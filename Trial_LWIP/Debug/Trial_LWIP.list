
Trial_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001443c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dec  0801463c  0801463c  0002463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017428  08017428  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  08017428  08017428  00027428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017430  08017430  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017430  08017430  00027430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017434  08017434  00027434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08017438  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  080174cc  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801756c  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00010508  200001d4  0801760c  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200106dc  0801760c  000306dc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000329ab  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007846  00000000  00000000  00062bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002558  00000000  00000000  0006a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000023c8  00000000  00000000  0006c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038933  00000000  00000000  0006ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037d60  00000000  00000000  000a764b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00122a0b  00000000  00000000  000df3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00201db6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a3fc  00000000  00000000  00201e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08014624 	.word	0x08014624

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08014624 	.word	0x08014624

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	200001f0 	.word	0x200001f0
 8000614:	20000244 	.word	0x20000244

08000618 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061c:	f3bf 8f4f 	dsb	sy
}
 8000620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
}
 8000626:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <SCB_EnableICache+0x48>)
 800062a:	2200      	movs	r2, #0
 800062c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000630:	f3bf 8f4f 	dsb	sy
}
 8000634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000636:	f3bf 8f6f 	isb	sy
}
 800063a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <SCB_EnableICache+0x48>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <SCB_EnableICache+0x48>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000648:	f3bf 8f4f 	dsb	sy
}
 800064c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy
}
 8000652:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SCB_EnableDCache+0x84>)
 800066c:	2200      	movs	r2, #0
 800066e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000672:	f3bf 8f4f 	dsb	sy
}
 8000676:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SCB_EnableDCache+0x84>)
 800067a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800067e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	0b5b      	lsrs	r3, r3, #13
 8000684:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000688:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	08db      	lsrs	r3, r3, #3
 800068e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000692:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	015a      	lsls	r2, r3, #5
 8000698:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800069c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006a2:	4911      	ldr	r1, [pc, #68]	; (80006e8 <SCB_EnableDCache+0x84>)
 80006a4:	4313      	orrs	r3, r2
 80006a6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	60ba      	str	r2, [r7, #8]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1ef      	bne.n	8000694 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	60fa      	str	r2, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1e5      	bne.n	800068a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
}
 80006c2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SCB_EnableDCache+0x84>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SCB_EnableDCache+0x84>)
 80006ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d0:	f3bf 8f4f 	dsb	sy
}
 80006d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d6:	f3bf 8f6f 	isb	sy
}
 80006da:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006f2:	f000 f9a1 	bl	8000a38 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006f6:	f7ff ff8f 	bl	8000618 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006fa:	f7ff ffb3 	bl	8000664 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 fe11 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f81f 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 f8eb 	bl	80008e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800070a:	f000 f88b 	bl	8000824 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800070e:	f000 f8b9 	bl	8000884 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <main+0x50>)
 8000714:	1d3c      	adds	r4, r7, #4
 8000716:	461d      	mov	r5, r3
 8000718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f005 ff43 	bl	80065b4 <osThreadCreate>
 800072e:	4603      	mov	r3, r0
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <main+0x54>)
 8000732:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000734:	f005 ff27 	bl	8006586 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x4c>
 800073a:	bf00      	nop
 800073c:	08014648 	.word	0x08014648
 8000740:	20000bd4 	.word	0x20000bd4

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f012 ff0e 	bl	8013574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f002 fce8 	bl	800313c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <SystemClock_Config+0xd8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a2a      	ldr	r2, [pc, #168]	; (800081c <SystemClock_Config+0xd8>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <SystemClock_Config+0xd8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <SystemClock_Config+0xdc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a25      	ldr	r2, [pc, #148]	; (8000820 <SystemClock_Config+0xdc>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <SystemClock_Config+0xdc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007b4:	23d8      	movs	r3, #216	; 0xd8
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007bc:	2309      	movs	r3, #9
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fd17 	bl	80031fc <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d4:	f000 f994 	bl	8000b00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d8:	f002 fcc0 	bl	800315c <HAL_PWREx_EnableOverDrive>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007e2:	f000 f98d 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2107      	movs	r1, #7
 8000804:	4618      	mov	r0, r3
 8000806:	f002 ffa7 	bl	8003758 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000810:	f000 f976 	bl	8000b00 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART3_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART3_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART3_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000868:	f004 f8d6 	bl	8004a18 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f945 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000644 	.word	0x20000644
 8000880:	40004800 	.word	0x40004800

08000884 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2206      	movs	r2, #6
 8000894:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2201      	movs	r2, #1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	f002 faef 	bl	8002eaa <HAL_PCD_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f915 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200006cc 	.word	0x200006cc

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b47      	ldr	r3, [pc, #284]	; (8000a14 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a46      	ldr	r2, [pc, #280]	; (8000a14 <MX_GPIO_Init+0x134>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	4b41      	ldr	r3, [pc, #260]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a3a      	ldr	r2, [pc, #232]	; (8000a14 <MX_GPIO_Init+0x134>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a34      	ldr	r2, [pc, #208]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <MX_GPIO_Init+0x134>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f244 0181 	movw	r1, #16513	; 0x4081
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <MX_GPIO_Init+0x138>)
 800098e:	f002 fa73 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	4821      	ldr	r0, [pc, #132]	; (8000a1c <MX_GPIO_Init+0x13c>)
 8000998:	f002 fa6e 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <MX_GPIO_Init+0x140>)
 80009b4:	f002 f8b4 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_GPIO_Init+0x138>)
 80009d2:	f002 f8a5 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <MX_GPIO_Init+0x13c>)
 80009ee:	f002 f897 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_GPIO_Init+0x13c>)
 8000a06:	f002 f88b 	bl	8002b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	; 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40021800 	.word	0x40021800
 8000a20:	40020800 	.word	0x40020800

08000a24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a2c:	f004 ff50 	bl	80058d0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f005 fe0b 	bl	800664c <osDelay>
 8000a36:	e7fb      	b.n	8000a30 <StartDefaultTask+0xc>

08000a38 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a4a:	f000 fd9f 	bl	800158c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a5a:	231f      	movs	r3, #31
 8000a5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a5e:	2387      	movs	r3, #135	; 0x87
 8000a60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a66:	2300      	movs	r3, #0
 8000a68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fdbd 	bl	80015fc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000a86:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000a8a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fdaa 	bl	80015fc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MPU_Config+0xa0>)
 8000aae:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fd9a 	bl	80015fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ac8:	2004      	movs	r0, #4
 8000aca:	f000 fd77 	bl	80015bc <HAL_MPU_Enable>

}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24020000 	.word	0x24020000

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 fc27 	bl	8001340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40001000 	.word	0x40001000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	210f      	movs	r1, #15
 8000b46:	f06f 0001 	mvn.w	r0, #1
 8000b4a:	f000 fcf5 	bl	8001538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0ae      	sub	sp, #184	; 0xb8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2290      	movs	r2, #144	; 0x90
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f012 fcf9 	bl	8013574 <memset>
  if(huart->Instance==USART3)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_UART_MspInit+0xb4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d13c      	bne.n	8000c06 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 f834 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ba6:	f7ff ffab 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_UART_MspInit+0xb8>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_UART_MspInit+0xb8>)
 8000bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0xb8>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_UART_MspInit+0xb8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_UART_MspInit+0xb8>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_UART_MspInit+0xb8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_UART_MspInit+0xbc>)
 8000c02:	f001 ff8d 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	37b8      	adds	r7, #184	; 0xb8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004800 	.word	0x40004800
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0ae      	sub	sp, #184	; 0xb8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2290      	movs	r2, #144	; 0x90
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f012 fc99 	bl	8013574 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c4a:	d159      	bne.n	8000d00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 ffd3 	bl	8003c08 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c68:	f7ff ff4a 	bl	8000b00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4818      	ldr	r0, [pc, #96]	; (8000d0c <HAL_PCD_MspInit+0xf0>)
 8000cac:	f001 ff38 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <HAL_PCD_MspInit+0xf0>)
 8000ccc:	f001 ff28 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cda:	6353      	str	r3, [r2, #52]	; 0x34
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_PCD_MspInit+0xec>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	37b8      	adds	r7, #184	; 0xb8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08e      	sub	sp, #56	; 0x38
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <HAL_InitTick+0xe0>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a32      	ldr	r2, [pc, #200]	; (8000df0 <HAL_InitTick+0xe0>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <HAL_InitTick+0xe0>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d38:	f107 0210 	add.w	r2, r7, #16
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 ff2e 	bl	8003ba4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d52:	f002 feff 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8000d56:	6378      	str	r0, [r7, #52]	; 0x34
 8000d58:	e004      	b.n	8000d64 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d5a:	f002 fefb 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <HAL_InitTick+0xe4>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9b      	lsrs	r3, r3, #18
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_InitTick+0xe8>)
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <HAL_InitTick+0xec>)
 8000d76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HAL_InitTick+0xe8>)
 8000d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_InitTick+0xe8>)
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_InitTick+0xe8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_InitTick+0xe8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_InitTick+0xe8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <HAL_InitTick+0xe8>)
 8000d9a:	f003 fb5d 	bl	8004458 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d11b      	bne.n	8000de4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <HAL_InitTick+0xe8>)
 8000dae:	f003 fbb5 	bl	800451c <HAL_TIM_Base_Start_IT>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d111      	bne.n	8000de4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc0:	2036      	movs	r0, #54	; 0x36
 8000dc2:	f000 fbd5 	bl	8001570 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d808      	bhi.n	8000dde <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	2036      	movs	r0, #54	; 0x36
 8000dd2:	f000 fbb1 	bl	8001538 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0xf0>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e002      	b.n	8000de4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3738      	adds	r7, #56	; 0x38
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	20000bd8 	.word	0x20000bd8
 8000dfc:	40001000 	.word	0x40001000
 8000e00:	20000004 	.word	0x20000004

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM6_DAC_IRQHandler+0x10>)
 8000e36:	f003 fbe9 	bl	800460c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000bd8 	.word	0x20000bd8

08000e44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <ETH_IRQHandler+0x10>)
 8000e4a:	f000 ff95 	bl	8001d78 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000560c 	.word	0x2000560c

08000e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return 1;
 8000e5c:	2301      	movs	r3, #1
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_kill>:

int _kill(int pid, int sig)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <_kill+0x20>)
 8000e74:	2216      	movs	r2, #22
 8000e76:	601a      	str	r2, [r3, #0]
  return -1;
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	200106cc 	.word	0x200106cc

08000e8c <_exit>:

void _exit (int status)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ffe5 	bl	8000e68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e9e:	e7fe      	b.n	8000e9e <_exit+0x12>

08000ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
  }

  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e009      	b.n	8000f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf1      	blt.n	8000eec <_write+0x12>
  }
  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d205      	bcs.n	8000fb8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <_sbrk+0x6c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20080000 	.word	0x20080000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	20000c24 	.word	0x20000c24
 8000fe4:	200106e0 	.word	0x200106e0
 8000fe8:	200106cc 	.word	0x200106cc

08000fec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800102c:	4c0b      	ldr	r4, [pc, #44]	; (800105c <LoopFillZerobss+0x26>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800103a:	f7ff ffd7 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f012 fa57 	bl	80134f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fb53 	bl	80006ec <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001054:	08017438 	.word	0x08017438
  ldr r2, =_sbss
 8001058:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800105c:	200106dc 	.word	0x200106dc

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>

08001062 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <LAN8742_RegisterBusIO+0x28>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <LAN8742_RegisterBusIO+0x28>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <LAN8742_RegisterBusIO+0x28>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	e014      	b.n	80010ba <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d17c      	bne.n	80011e0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e01c      	b.n	800113a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	f107 0208 	add.w	r2, r7, #8
 8001108:	2112      	movs	r1, #18
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	4798      	blx	r3
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	da03      	bge.n	800111c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001114:	f06f 0304 	mvn.w	r3, #4
 8001118:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800111a:	e00b      	b.n	8001134 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	d105      	bne.n	8001134 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
         break;
 8001132:	e005      	b.n	8001140 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2b1f      	cmp	r3, #31
 800113e:	d9df      	bls.n	8001100 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b1f      	cmp	r3, #31
 8001146:	d902      	bls.n	800114e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001148:	f06f 0302 	mvn.w	r3, #2
 800114c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d145      	bne.n	80011e0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6810      	ldr	r0, [r2, #0]
 800115c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001160:	2100      	movs	r1, #0
 8001162:	4798      	blx	r3
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	db37      	blt.n	80011da <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6810      	ldr	r0, [r2, #0]
 8001172:	f107 0208 	add.w	r2, r7, #8
 8001176:	2100      	movs	r1, #0
 8001178:	4798      	blx	r3
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	db28      	blt.n	80011d2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4798      	blx	r3
 8001186:	4603      	mov	r3, r0
 8001188:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800118a:	e01c      	b.n	80011c6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4798      	blx	r3
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800119e:	d80e      	bhi.n	80011be <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6810      	ldr	r0, [r2, #0]
 80011a8:	f107 0208 	add.w	r2, r7, #8
 80011ac:	2100      	movs	r1, #0
 80011ae:	4798      	blx	r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da07      	bge.n	80011c6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80011b6:	f06f 0304 	mvn.w	r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
                 break;
 80011bc:	e010      	b.n	80011e0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80011be:	f06f 0301 	mvn.w	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
               break;
 80011c4:	e00c      	b.n	80011e0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1dd      	bne.n	800118c <LAN8742_Init+0xc6>
 80011d0:	e006      	b.n	80011e0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80011d2:	f06f 0304 	mvn.w	r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	e002      	b.n	80011e0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80011da:	f06f 0303 	mvn.w	r3, #3
 80011de:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d112      	bne.n	800120c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4798      	blx	r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80011f0:	bf00      	nop
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4798      	blx	r3
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001204:	d9f5      	bls.n	80011f2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800120c:	693b      	ldr	r3, [r7, #16]
 }
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6810      	ldr	r0, [r2, #0]
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	2101      	movs	r1, #1
 8001230:	4798      	blx	r3
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	da02      	bge.n	800123e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001238:	f06f 0304 	mvn.w	r3, #4
 800123c:	e06e      	b.n	800131c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6810      	ldr	r0, [r2, #0]
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	2101      	movs	r1, #1
 800124c:	4798      	blx	r3
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	da02      	bge.n	800125a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001254:	f06f 0304 	mvn.w	r3, #4
 8001258:	e060      	b.n	800131c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001264:	2301      	movs	r3, #1
 8001266:	e059      	b.n	800131c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6810      	ldr	r0, [r2, #0]
 8001270:	f107 020c 	add.w	r2, r7, #12
 8001274:	2100      	movs	r1, #0
 8001276:	4798      	blx	r3
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	da02      	bge.n	8001284 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800127e:	f06f 0304 	mvn.w	r3, #4
 8001282:	e04b      	b.n	800131c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11b      	bne.n	80012c6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <LAN8742_GetLinkState+0x90>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012a2:	2302      	movs	r3, #2
 80012a4:	e03a      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e033      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012be:	2304      	movs	r3, #4
 80012c0:	e02c      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012c2:	2305      	movs	r3, #5
 80012c4:	e02a      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6810      	ldr	r0, [r2, #0]
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	211f      	movs	r1, #31
 80012d4:	4798      	blx	r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da02      	bge.n	80012e2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012dc:	f06f 0304 	mvn.w	r3, #4
 80012e0:	e01c      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012ec:	2306      	movs	r3, #6
 80012ee:	e015      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 031c 	and.w	r3, r3, #28
 80012f6:	2b18      	cmp	r3, #24
 80012f8:	d101      	bne.n	80012fe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012fa:	2302      	movs	r3, #2
 80012fc:	e00e      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 031c 	and.w	r3, r3, #28
 8001304:	2b08      	cmp	r3, #8
 8001306:	d101      	bne.n	800130c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001308:	2303      	movs	r3, #3
 800130a:	e007      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 031c 	and.w	r3, r3, #28
 8001312:	2b14      	cmp	r3, #20
 8001314:	d101      	bne.n	800131a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001316:	2304      	movs	r3, #4
 8001318:	e000      	b.n	800131c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800131a:	2305      	movs	r3, #5
    }				
  }
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f8fa 	bl	8001522 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f7ff fcee 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fbea 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000c28 	.word	0x20000c28

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000c28 	.word	0x20000c28

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <__NVIC_SetPriorityGrouping>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	05fa0000 	.word	0x05fa0000

08001410 <__NVIC_GetPriorityGrouping>:
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff4c 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154a:	f7ff ff61 	bl	8001410 <__NVIC_GetPriorityGrouping>
 800154e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	6978      	ldr	r0, [r7, #20]
 8001556:	f7ff ffb1 	bl	80014bc <NVIC_EncodePriority>
 800155a:	4602      	mov	r2, r0
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff80 	bl	8001468 <__NVIC_SetPriority>
}
 8001568:	bf00      	nop
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff54 	bl	800142c <__NVIC_EnableIRQ>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001590:	f3bf 8f5f 	dmb	sy
}
 8001594:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_MPU_Disable+0x28>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_MPU_Disable+0x28>)
 800159c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_MPU_Disable+0x2c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	e000ed90 	.word	0xe000ed90

080015bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_MPU_Enable+0x38>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_MPU_Enable+0x3c>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_MPU_Enable+0x3c>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015da:	f3bf 8f4f 	dsb	sy
}
 80015de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e0:	f3bf 8f6f 	isb	sy
}
 80015e4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed90 	.word	0xe000ed90
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	785a      	ldrb	r2, [r3, #1]
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_MPU_ConfigRegion+0x84>)
 800160a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d029      	beq.n	8001668 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <HAL_MPU_ConfigRegion+0x84>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7b1b      	ldrb	r3, [r3, #12]
 8001620:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7adb      	ldrb	r3, [r3, #11]
 8001626:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001628:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7a9b      	ldrb	r3, [r3, #10]
 800162e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001630:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7b5b      	ldrb	r3, [r3, #13]
 8001636:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001638:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7b9b      	ldrb	r3, [r3, #14]
 800163e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001640:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7bdb      	ldrb	r3, [r3, #15]
 8001646:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001648:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a5b      	ldrb	r3, [r3, #9]
 800164e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001650:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7a1b      	ldrb	r3, [r3, #8]
 8001656:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001658:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001662:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001664:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001666:	e005      	b.n	8001674 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_MPU_ConfigRegion+0x84>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_MPU_ConfigRegion+0x84>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed90 	.word	0xe000ed90

08001684 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06a      	b.n	800176c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800169c:	2b00      	cmp	r3, #0
 800169e:	d106      	bne.n	80016ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2223      	movs	r2, #35	; 0x23
 80016a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f004 fd29 	bl	8006100 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <HAL_ETH_Init+0xf0>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a30      	ldr	r2, [pc, #192]	; (8001774 <HAL_ETH_Init+0xf0>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_ETH_Init+0xf0>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_ETH_Init+0xf4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a2b      	ldr	r2, [pc, #172]	; (8001778 <HAL_ETH_Init+0xf4>)
 80016cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_ETH_Init+0xf4>)
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4927      	ldr	r1, [pc, #156]	; (8001778 <HAL_ETH_Init+0xf4>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_ETH_Init+0xf4>)
 80016e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016fc:	f7ff fe34 	bl	8001368 <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001702:	e011      	b.n	8001728 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001704:	f7ff fe30 	bl	8001368 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001712:	d909      	bls.n	8001728 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2204      	movs	r2, #4
 8001718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	22e0      	movs	r2, #224	; 0xe0
 8001720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e021      	b.n	800176c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1e4      	bne.n	8001704 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 ff4c 	bl	80025d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fff3 	bl	800272c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 f849 	bl	80027de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	461a      	mov	r2, r3
 8001752:	2100      	movs	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 ffb1 	bl	80026bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2210      	movs	r2, #16
 8001766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800

0800177c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800178a:	2b10      	cmp	r3, #16
 800178c:	d17b      	bne.n	8001886 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2223      	movs	r2, #35	; 0x23
 8001792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HAL_ETH_Start_IT+0x114>)
 80017ba:	430b      	orrs	r3, r1
 80017bc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80017d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2204      	movs	r2, #4
 80017d8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f9fc 	bl	8001bd8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0208 	orr.w	r2, r2, #8
 80017ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff fdc1 	bl	8001380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0204 	orr.w	r2, r2, #4
 8001814:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fdae 	bl	8001380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fd74 	bl	800231a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001844:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001848:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001860:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186a:	69d9      	ldr	r1, [r3, #28]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_ETH_Start_IT+0x118>)
 8001872:	430b      	orrs	r3, r1
 8001874:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001878:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2223      	movs	r2, #35	; 0x23
 800187e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
  }
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	00020060 	.word	0x00020060
 8001894:	0001a0c1 	.word	0x0001a0c1

08001898 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a6:	2b23      	cmp	r3, #35	; 0x23
 80018a8:	d16e      	bne.n	8001988 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2223      	movs	r2, #35	; 0x23
 80018ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ba:	69d9      	ldr	r1, [r3, #28]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_ETH_Stop_IT+0xfc>)
 80018c2:	400b      	ands	r3, r1
 80018c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018c8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	f023 0302 	bic.w	r3, r3, #2
 80018f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0204 	bic.w	r2, r2, #4
 8001908:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001912:	2001      	movs	r0, #1
 8001914:	f7ff fd34 	bl	8001380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fcfa 	bl	800231a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0208 	bic.w	r2, r2, #8
 8001934:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fd1e 	bl	8001380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00e      	b.n	8001970 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	3212      	adds	r2, #18
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d9ed      	bls.n	8001952 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2210      	movs	r2, #16
 8001980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	fffe5f3e 	.word	0xfffe5f3e

08001998 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e045      	b.n	8001a48 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c2:	2b23      	cmp	r3, #35	; 0x23
 80019c4:	d13f      	bne.n	8001a46 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019ce:	2201      	movs	r2, #1
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 ff70 	bl	80028b8 <ETH_Prepare_Tx_Descriptors>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e4:	f043 0202 	orr.w	r2, r3, #2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e02a      	b.n	8001a48 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80019f2:	f3bf 8f4f 	dsb	sy
}
 80019f6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d904      	bls.n	8001a14 <HAL_ETH_Transmit_IT+0x7c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	1f1a      	subs	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2304      	movs	r3, #4
 8001a32:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2300      	movs	r3, #0
 8001a40:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
  }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0a8      	b.n	8001bce <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a82:	2b23      	cmp	r3, #35	; 0x23
 8001a84:	d001      	beq.n	8001a8a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0a1      	b.n	8001bce <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	3212      	adds	r2, #18
 8001a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa0:	f1c3 0304 	rsb	r3, r3, #4
 8001aa4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001aa6:	e06a      	b.n	8001b7e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	69da      	ldr	r2, [r3, #28]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HAL_ETH_ReadData+0x88>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d040      	beq.n	8001b5a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b0c:	3b04      	subs	r3, #4
 8001b0e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b34:	461a      	mov	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f004 fcad 	bl	8006498 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	441a      	add	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d902      	bls.n	8001b6c <HAL_ETH_ReadData+0x11c>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b04      	subs	r3, #4
 8001b6a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	3212      	adds	r2, #18
 8001b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db06      	blt.n	8001b94 <HAL_ETH_ReadData+0x144>
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d202      	bcs.n	8001b94 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d089      	beq.n	8001aa8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	441a      	add	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f815 	bl	8001bd8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001be4:	2301      	movs	r3, #1
 8001be6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	3212      	adds	r2, #18
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bfe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c00:	e040      	b.n	8001c84 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d112      	bne.n	8001c30 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fc12 	bl	8006438 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	74fb      	strb	r3, [r7, #19]
 8001c1e:	e007      	b.n	8001c30 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	461a      	mov	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c30:	7cfb      	ldrb	r3, [r7, #19]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d026      	beq.n	8001c84 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <ETH_UpdateDescriptor+0xe4>)
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	e003      	b.n	8001c4e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001c4c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c4e:	f3bf 8f5f 	dmb	sy
}
 8001c52:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	3301      	adds	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d902      	bls.n	8001c72 <ETH_UpdateDescriptor+0x9a>
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	3212      	adds	r2, #18
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <ETH_UpdateDescriptor+0xb8>
 8001c8a:	7cfb      	ldrb	r3, [r7, #19]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1b8      	bne.n	8001c02 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d00c      	beq.n	8001cb4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	80004600 	.word	0x80004600

08001cc0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3318      	adds	r3, #24
 8001ccc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cde:	e03f      	b.n	8001d60 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d028      	beq.n	8001d60 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68d9      	ldr	r1, [r3, #12]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db1b      	blt.n	8001d5c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 fbf3 	bl	800651c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	3301      	adds	r3, #1
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d5a:	e001      	b.n	8001d60 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_ETH_ReleaseTxPacket+0xac>
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1b9      	bne.n	8001ce0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d112      	bne.n	8001db8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d109      	bne.n	8001db8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_ETH_IRQHandler+0x178>)
 8001db0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f003 ff08 	bl	8005bc8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d113      	bne.n	8001df2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10a      	bne.n	8001df2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	461a      	mov	r2, r3
 8001de6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001dea:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f003 fefb 	bl	8005be8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e04:	d14c      	bne.n	8001ea0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e18:	d142      	bne.n	8001ea0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e20:	f043 0208 	orr.w	r2, r3, #8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3c:	d11a      	bne.n	8001e74 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_ETH_IRQHandler+0x17c>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001e64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e68:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	22e0      	movs	r2, #224	; 0xe0
 8001e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e72:	e012      	b.n	8001e9a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e82:	4013      	ands	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	461a      	mov	r2, r3
 8001e94:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e98:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f003 feb4 	bl	8005c08 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d10e      	bne.n	8001ecc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f81c 	bl	8001efc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_ETH_IRQHandler+0x180>)
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_ETH_IRQHandler+0x180>)
 8001eda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ede:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f815 	bl	8001f10 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00010040 	.word	0x00010040
 8001ef4:	007e2000 	.word	0x007e2000
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 031c 	and.w	r3, r3, #28
 8001f40:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	02db      	lsls	r3, r3, #11
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 0302 	bic.w	r3, r3, #2
 8001f62:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001f74:	f7ff f9f8 	bl	8001368 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f7a:	e00d      	b.n	8001f98 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001f7c:	f7ff f9f4 	bl	8001368 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8a:	d301      	bcc.n	8001f90 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e010      	b.n	8001fb2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ec      	bne.n	8001f7c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 031c 	and.w	r3, r3, #28
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	02db      	lsls	r3, r3, #11
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002014:	f7ff f9a8 	bl	8001368 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800201a:	e00d      	b.n	8002038 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800201c:	f7ff f9a4 	bl	8001368 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d301      	bcc.n	8002030 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e009      	b.n	8002044 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ec      	bne.n	800201c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d9      	b.n	8002214 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf0c      	ite	eq
 800211e:	2301      	moveq	r3, #1
 8002120:	2300      	movne	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e00b      	b.n	800224c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800223a:	2b10      	cmp	r3, #16
 800223c:	d105      	bne.n	800224a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f88f 	bl	8002364 <ETH_SetMACConfig>

    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 031c 	bic.w	r3, r3, #28
 800226a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800226c:	f001 fc66 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8002270:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_ETH_SetMDIOClockRange+0x98>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d908      	bls.n	800228c <HAL_ETH_SetMDIOClockRange+0x38>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d804      	bhi.n	800228c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e027      	b.n	80022dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d908      	bls.n	80022a6 <HAL_ETH_SetMDIOClockRange+0x52>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d204      	bcs.n	80022a6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f043 030c 	orr.w	r3, r3, #12
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e01a      	b.n	80022dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d303      	bcc.n	80022b6 <HAL_ETH_SetMDIOClockRange+0x62>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d911      	bls.n	80022da <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d908      	bls.n	80022d0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d804      	bhi.n	80022d0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e005      	b.n	80022dc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e000      	b.n	80022dc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80022da:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	611a      	str	r2, [r3, #16]
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	01312cff 	.word	0x01312cff
 80022f0:	02160ebf 	.word	0x02160ebf
 80022f4:	03938700 	.word	0x03938700
 80022f8:	05f5e0ff 	.word	0x05f5e0ff
 80022fc:	08f0d17f 	.word	0x08f0d17f

08002300 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002338:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800233c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff f818 	bl	8001380 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800235a:	6193      	str	r3, [r2, #24]
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <ETH_SetMACConfig+0x15c>)
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	7c1b      	ldrb	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <ETH_SetMACConfig+0x28>
 8002386:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800238a:	e000      	b.n	800238e <ETH_SetMACConfig+0x2a>
 800238c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7c5b      	ldrb	r3, [r3, #17]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <ETH_SetMACConfig+0x38>
 8002396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800239a:	e000      	b.n	800239e <ETH_SetMACConfig+0x3a>
 800239c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800239e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	7fdb      	ldrb	r3, [r3, #31]
 80023aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	7f92      	ldrb	r2, [r2, #30]
 80023b8:	2a00      	cmp	r2, #0
 80023ba:	d102      	bne.n	80023c2 <ETH_SetMACConfig+0x5e>
 80023bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c0:	e000      	b.n	80023c4 <ETH_SetMACConfig+0x60>
 80023c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80023c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7f1b      	ldrb	r3, [r3, #28]
 80023ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	791b      	ldrb	r3, [r3, #4]
 80023d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d102      	bne.n	80023ec <ETH_SetMACConfig+0x88>
 80023e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ea:	e000      	b.n	80023ee <ETH_SetMACConfig+0x8a>
 80023ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	7bdb      	ldrb	r3, [r3, #15]
 80023f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002404:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002406:	4313      	orrs	r3, r2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800241e:	2001      	movs	r0, #1
 8002420:	f7fe ffae 	bl	8001380 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	f64f 7341 	movw	r3, #65345	; 0xff41
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002442:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800244a:	2a00      	cmp	r2, #0
 800244c:	d101      	bne.n	8002452 <ETH_SetMACConfig+0xee>
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	e000      	b.n	8002454 <ETH_SetMACConfig+0xf0>
 8002452:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002454:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800245a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002462:	2a01      	cmp	r2, #1
 8002464:	d101      	bne.n	800246a <ETH_SetMACConfig+0x106>
 8002466:	2208      	movs	r2, #8
 8002468:	e000      	b.n	800246c <ETH_SetMACConfig+0x108>
 800246a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800246c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002474:	2a01      	cmp	r2, #1
 8002476:	d101      	bne.n	800247c <ETH_SetMACConfig+0x118>
 8002478:	2204      	movs	r2, #4
 800247a:	e000      	b.n	800247e <ETH_SetMACConfig+0x11a>
 800247c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800247e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002486:	2a01      	cmp	r2, #1
 8002488:	d101      	bne.n	800248e <ETH_SetMACConfig+0x12a>
 800248a:	2202      	movs	r2, #2
 800248c:	e000      	b.n	8002490 <ETH_SetMACConfig+0x12c>
 800248e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002490:	4313      	orrs	r3, r2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7fe ff69 	bl	8001380 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	ff20810f 	.word	0xff20810f

080024c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <ETH_SetDMAConfig+0x110>)
 80024de:	4013      	ands	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	7b1b      	ldrb	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <ETH_SetDMAConfig+0x2c>
 80024ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024ee:	e000      	b.n	80024f2 <ETH_SetDMAConfig+0x2e>
 80024f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	7b5b      	ldrb	r3, [r3, #13]
 80024f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	7f52      	ldrb	r2, [r2, #29]
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d102      	bne.n	8002508 <ETH_SetDMAConfig+0x44>
 8002502:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002506:	e000      	b.n	800250a <ETH_SetDMAConfig+0x46>
 8002508:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800250a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	7b9b      	ldrb	r3, [r3, #14]
 8002510:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002512:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002518:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	7f1b      	ldrb	r3, [r3, #28]
 800251e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002520:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7f9b      	ldrb	r3, [r3, #30]
 8002526:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002528:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800252e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002536:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002538:	4313      	orrs	r3, r2
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002548:	461a      	mov	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800255a:	2001      	movs	r0, #1
 800255c:	f7fe ff10 	bl	8001380 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002568:	461a      	mov	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002578:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800257e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002584:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800258c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800258e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002596:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800259c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7fe fee1 	bl	8001380 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	f8de3f23 	.word	0xf8de3f23

080025d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0a6      	sub	sp, #152	; 0x98
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025ec:	2300      	movs	r3, #0
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002614:	2300      	movs	r3, #0
 8002616:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800261e:	2300      	movs	r3, #0
 8002620:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800263a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800264c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fe86 	bl	8002364 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002658:	2301      	movs	r3, #1
 800265a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800265c:	2301      	movs	r3, #1
 800265e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002666:	2301      	movs	r3, #1
 8002668:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800267a:	2300      	movs	r3, #0
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002684:	2301      	movs	r3, #1
 8002686:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800268e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002692:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002698:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff08 	bl	80024c4 <ETH_SetDMAConfig>
}
 80026b4:	bf00      	nop
 80026b6:	3798      	adds	r7, #152	; 0x98
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3305      	adds	r3, #5
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	3204      	adds	r2, #4
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <ETH_MACAddressConfig+0x68>)
 80026de:	4413      	add	r3, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3303      	adds	r3, #3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	061a      	lsls	r2, r3, #24
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3302      	adds	r3, #2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	4313      	orrs	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <ETH_MACAddressConfig+0x6c>)
 800270e:	4413      	add	r3, r2
 8002710:	461a      	mov	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	6013      	str	r3, [r2, #0]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40028040 	.word	0x40028040
 8002728:	40028044 	.word	0x40028044

0800272c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e03e      	b.n	80027b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68d9      	ldr	r1, [r3, #12]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	3206      	adds	r2, #6
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d80c      	bhi.n	800279c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68d9      	ldr	r1, [r3, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e004      	b.n	80027a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	461a      	mov	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d9bd      	bls.n	800273a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d0:	611a      	str	r2, [r3, #16]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e046      	b.n	800287a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6919      	ldr	r1, [r3, #16]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002828:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002830:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	3212      	adds	r2, #18
 8002846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d80c      	bhi.n	800286a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6919      	ldr	r1, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	e004      	b.n	8002874 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	461a      	mov	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d9b5      	bls.n	80027ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028aa:	60da      	str	r2, [r3, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b08d      	sub	sp, #52	; 0x34
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3318      	adds	r3, #24
 80028c8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028fa:	d007      	beq.n	800290c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	3304      	adds	r3, #4
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800290c:	2302      	movs	r3, #2
 800290e:	e0ff      	b.n	8002b10 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4b7d      	ldr	r3, [pc, #500]	; (8002b1c <ETH_Prepare_Tx_Descriptors+0x264>)
 8002926:	4013      	ands	r3, r2
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	6852      	ldr	r2, [r2, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	431a      	orrs	r2, r3
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	431a      	orrs	r2, r3
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002992:	f3bf 8f5f 	dmb	sy
}
 8002996:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80029a4:	e082      	b.n	8002aac <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e005      	b.n	80029d2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	3301      	adds	r3, #1
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d902      	bls.n	80029e4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	3b04      	subs	r3, #4
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ec:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a06:	d007      	beq.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d029      	beq.n	8002a6c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a24:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a2a:	e019      	b.n	8002a60 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a2c:	f3bf 8f5f 	dmb	sy
}
 8002a30:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	3301      	adds	r3, #1
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d902      	bls.n	8002a50 <ETH_Prepare_Tx_Descriptors+0x198>
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	3b04      	subs	r3, #4
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a58:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3e1      	bcc.n	8002a2c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e051      	b.n	8002b10 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	3301      	adds	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <ETH_Prepare_Tx_Descriptors+0x264>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	6852      	ldr	r2, [r2, #4]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a9a:	f3bf 8f5f 	dmb	sy
}
 8002a9e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f af78 	bne.w	80029a6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e005      	b.n	8002ad6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	3304      	adds	r3, #4
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	4413      	add	r3, r2
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002b0a:	b662      	cpsie	i
}
 8002b0c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3734      	adds	r7, #52	; 0x34
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	ffffe000 	.word	0xffffe000

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e175      	b.n	8002e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8164 	bne.w	8002e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_GPIO_Init+0x56>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d130      	bne.n	8002bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d123      	bne.n	8002c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80be 	beq.w	8002e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cc2:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x32c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d037      	beq.n	8002d5e <HAL_GPIO_Init+0x23e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_GPIO_Init+0x330>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_GPIO_Init+0x23a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <HAL_GPIO_Init+0x236>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_GPIO_Init+0x338>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d025      	beq.n	8002d52 <HAL_GPIO_Init+0x232>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_GPIO_Init+0x33c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <HAL_GPIO_Init+0x22e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_GPIO_Init+0x340>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x22a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x344>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_GPIO_Init+0x348>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x34c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_GPIO_Init+0x350>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d36:	2309      	movs	r3, #9
 8002d38:	e012      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e010      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00e      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d42:	2307      	movs	r3, #7
 8002d44:	e00c      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e00a      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	f67f ae86 	bls.w	8002b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40021400 	.word	0x40021400
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021c00 	.word	0x40021c00
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022400 	.word	0x40022400
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eac:	b08f      	sub	sp, #60	; 0x3c
 8002eae:	af0a      	add	r7, sp, #40	; 0x28
 8002eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e116      	b.n	80030ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fea0 	bl	8000c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 fa4c 	bl	8005398 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	687e      	ldr	r6, [r7, #4]
 8002f08:	466d      	mov	r5, sp
 8002f0a:	f106 0410 	add.w	r4, r6, #16
 8002f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f1e:	1d33      	adds	r3, r6, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	f002 f9e0 	bl	80052e8 <USB_CoreInit>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0d7      	b.n	80030ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fa3a 	bl	80053ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e04a      	b.n	8002fe2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	333d      	adds	r3, #61	; 0x3d
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	333c      	adds	r3, #60	; 0x3c
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	b298      	uxth	r0, r3
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3344      	adds	r3, #68	; 0x44
 8002f88:	4602      	mov	r2, r0
 8002f8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3340      	adds	r3, #64	; 0x40
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3348      	adds	r3, #72	; 0x48
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334c      	adds	r3, #76	; 0x4c
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3354      	adds	r3, #84	; 0x54
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3af      	bcc.n	8002f4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e044      	b.n	800307c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3301      	adds	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d3b5      	bcc.n	8002ff2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	687e      	ldr	r6, [r7, #4]
 800308e:	466d      	mov	r5, sp
 8003090:	f106 0410 	add.w	r4, r6, #16
 8003094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a4:	1d33      	adds	r3, r6, #4
 80030a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a8:	6838      	ldr	r0, [r7, #0]
 80030aa:	f002 f9d3 	bl	8005454 <USB_DevInit>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e014      	b.n	80030ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f80b 	bl	80030f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fb91 	bl	800580a <USB_DevDisconnect>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_PCDEx_ActivateLPM+0x44>)
 8003124:	4313      	orrs	r3, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	10000003 	.word	0x10000003

0800313c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000

0800315c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800318a:	f7fe f8ed 	bl	8001368 <HAL_GetTick>
 800318e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003190:	e009      	b.n	80031a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003192:	f7fe f8e9 	bl	8001368 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a0:	d901      	bls.n	80031a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e022      	b.n	80031ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b2:	d1ee      	bne.n	8003192 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c0:	f7fe f8d2 	bl	8001368 <HAL_GetTick>
 80031c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031c6:	e009      	b.n	80031dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031c8:	f7fe f8ce 	bl	8001368 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031d6:	d901      	bls.n	80031dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e007      	b.n	80031ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e8:	d1ee      	bne.n	80031c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40007000 	.word	0x40007000

080031fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003204:	2300      	movs	r3, #0
 8003206:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e29b      	b.n	800374a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8087 	beq.w	800332e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003220:	4b96      	ldr	r3, [pc, #600]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b04      	cmp	r3, #4
 800322a:	d00c      	beq.n	8003246 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322c:	4b93      	ldr	r3, [pc, #588]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d112      	bne.n	800325e <HAL_RCC_OscConfig+0x62>
 8003238:	4b90      	ldr	r3, [pc, #576]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003244:	d10b      	bne.n	800325e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003246:	4b8d      	ldr	r3, [pc, #564]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d06c      	beq.n	800332c <HAL_RCC_OscConfig+0x130>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d168      	bne.n	800332c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e275      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x7a>
 8003268:	4b84      	ldr	r3, [pc, #528]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a83      	ldr	r2, [pc, #524]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800326e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	e02e      	b.n	80032d4 <HAL_RCC_OscConfig+0xd8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x9c>
 800327e:	4b7f      	ldr	r3, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a7e      	ldr	r2, [pc, #504]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b7c      	ldr	r3, [pc, #496]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a7b      	ldr	r2, [pc, #492]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e01d      	b.n	80032d4 <HAL_RCC_OscConfig+0xd8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0xc0>
 80032a2:	4b76      	ldr	r3, [pc, #472]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a75      	ldr	r2, [pc, #468]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b73      	ldr	r3, [pc, #460]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a72      	ldr	r2, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e00b      	b.n	80032d4 <HAL_RCC_OscConfig+0xd8>
 80032bc:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b6c      	ldr	r3, [pc, #432]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6b      	ldr	r2, [pc, #428]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe f844 	bl	8001368 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe f840 	bl	8001368 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e229      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b61      	ldr	r3, [pc, #388]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0xe8>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f830 	bl	8001368 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe f82c 	bl	8001368 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e215      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	4b57      	ldr	r3, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x110>
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d069      	beq.n	800340e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800333a:	4b50      	ldr	r3, [pc, #320]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003346:	4b4d      	ldr	r3, [pc, #308]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b08      	cmp	r3, #8
 8003350:	d11c      	bne.n	800338c <HAL_RCC_OscConfig+0x190>
 8003352:	4b4a      	ldr	r3, [pc, #296]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d116      	bne.n	800338c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x17a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1e9      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	493d      	ldr	r1, [pc, #244]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	e040      	b.n	800340e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d023      	beq.n	80033dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd ffe2 	bl	8001368 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7fd ffde 	bl	8001368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1c7      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4929      	ldr	r1, [pc, #164]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
 80033da:	e018      	b.n	800340e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_RCC_OscConfig+0x280>)
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fd ffbe 	bl	8001368 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f0:	f7fd ffba 	bl	8001368 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1a3      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d038      	beq.n	800348c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d019      	beq.n	8003456 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fd ff9b 	bl	8001368 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003436:	f7fd ff97 	bl	8001368 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e180      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x23a>
 8003454:	e01a      	b.n	800348c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_OscConfig+0x280>)
 8003458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345a:	4a08      	ldr	r2, [pc, #32]	; (800347c <HAL_RCC_OscConfig+0x280>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fd ff81 	bl	8001368 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346a:	f7fd ff7d 	bl	8001368 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d903      	bls.n	8003480 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e166      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
 800347c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ee      	bne.n	800346a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a4 	beq.w	80035e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b89      	ldr	r3, [pc, #548]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	4a88      	ldr	r2, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	; 0x40
 80034b2:	4b86      	ldr	r3, [pc, #536]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c2:	4b83      	ldr	r3, [pc, #524]	; (80036d0 <HAL_RCC_OscConfig+0x4d4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034ce:	4b80      	ldr	r3, [pc, #512]	; (80036d0 <HAL_RCC_OscConfig+0x4d4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7f      	ldr	r2, [pc, #508]	; (80036d0 <HAL_RCC_OscConfig+0x4d4>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7fd ff45 	bl	8001368 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fd ff41 	bl	8001368 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b64      	cmp	r3, #100	; 0x64
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e12a      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f4:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_RCC_OscConfig+0x4d4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x31a>
 8003508:	4b70      	ldr	r3, [pc, #448]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a6f      	ldr	r2, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	e02d      	b.n	8003572 <HAL_RCC_OscConfig+0x376>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x33c>
 800351e:	4b6b      	ldr	r3, [pc, #428]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a67      	ldr	r2, [pc, #412]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
 8003536:	e01c      	b.n	8003572 <HAL_RCC_OscConfig+0x376>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x35e>
 8003540:	4b62      	ldr	r3, [pc, #392]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a61      	ldr	r2, [pc, #388]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	; 0x70
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0x376>
 800355a:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a5b      	ldr	r2, [pc, #364]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fd fef5 	bl	8001368 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fd fef1 	bl	8001368 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0d8      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCC_OscConfig+0x386>
 80035a4:	e014      	b.n	80035d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd fedf 	bl	8001368 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd fedb 	bl	8001368 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0c2      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	4b41      	ldr	r3, [pc, #260]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ee      	bne.n	80035ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a3c      	ldr	r2, [pc, #240]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80ae 	beq.w	8003748 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ec:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d06d      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d14b      	bne.n	8003698 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a31      	ldr	r2, [pc, #196]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800360a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd feac 	bl	8001368 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fd fea8 	bl	8001368 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e091      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	4b29      	ldr	r3, [pc, #164]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	3b01      	subs	r3, #1
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	491b      	ldr	r1, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fe7a 	bl	8001368 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fd fe76 	bl	8001368 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e05f      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x47c>
 8003696:	e057      	b.n	8003748 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 800369e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd fe60 	bl	8001368 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fd fe5c 	bl	8001368 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e045      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x4b0>
 80036ca:	e03d      	b.n	8003748 <HAL_RCC_OscConfig+0x54c>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036d4:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_RCC_OscConfig+0x558>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d030      	beq.n	8003744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d129      	bne.n	8003744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d122      	bne.n	8003744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d119      	bne.n	8003744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d10f      	bne.n	8003744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d107      	bne.n	8003744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0d0      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d910      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 020f 	bic.w	r2, r3, #15
 8003786:	4965      	ldr	r1, [pc, #404]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0b8      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a58      	ldr	r2, [pc, #352]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80037d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	494d      	ldr	r1, [pc, #308]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d040      	beq.n	800387c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d115      	bne.n	800383a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e07f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e073      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e06b      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383a:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4936      	ldr	r1, [pc, #216]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fd fd8c 	bl	8001368 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fd fd88 	bl	8001368 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e053      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 020c 	and.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	429a      	cmp	r2, r3
 800387a:	d1eb      	bne.n	8003854 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d210      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 020f 	bic.w	r2, r3, #15
 8003892:	4922      	ldr	r1, [pc, #136]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e032      	b.n	8003912 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4916      	ldr	r1, [pc, #88]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	490e      	ldr	r1, [pc, #56]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ea:	f000 f821 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_ClockConfig+0x1c8>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	490a      	ldr	r1, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x1cc>)
 80038fc:	5ccb      	ldrb	r3, [r1, r3]
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <HAL_RCC_ClockConfig+0x1d0>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1d4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fa00 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023c00 	.word	0x40023c00
 8003920:	40023800 	.word	0x40023800
 8003924:	08017190 	.word	0x08017190
 8003928:	20000000 	.word	0x20000000
 800392c:	20000004 	.word	0x20000004

08003930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003934:	b094      	sub	sp, #80	; 0x50
 8003936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	647b      	str	r3, [r7, #68]	; 0x44
 800393c:	2300      	movs	r3, #0
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003940:	2300      	movs	r3, #0
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003948:	4b79      	ldr	r3, [pc, #484]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d00d      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x40>
 8003954:	2b08      	cmp	r3, #8
 8003956:	f200 80e1 	bhi.w	8003b1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x34>
 800395e:	2b04      	cmp	r3, #4
 8003960:	d003      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x3a>
 8003962:	e0db      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b73      	ldr	r3, [pc, #460]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003966:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003968:	e0db      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800396a:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x208>)
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800396e:	e0d8      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003970:	4b6f      	ldr	r3, [pc, #444]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003978:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800397a:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d063      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003986:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	2200      	movs	r2, #0
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003990:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003998:	633b      	str	r3, [r7, #48]	; 0x30
 800399a:	2300      	movs	r3, #0
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
 800399e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039a2:	4622      	mov	r2, r4
 80039a4:	462b      	mov	r3, r5
 80039a6:	f04f 0000 	mov.w	r0, #0
 80039aa:	f04f 0100 	mov.w	r1, #0
 80039ae:	0159      	lsls	r1, r3, #5
 80039b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b4:	0150      	lsls	r0, r2, #5
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4621      	mov	r1, r4
 80039bc:	1a51      	subs	r1, r2, r1
 80039be:	6139      	str	r1, [r7, #16]
 80039c0:	4629      	mov	r1, r5
 80039c2:	eb63 0301 	sbc.w	r3, r3, r1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d4:	4659      	mov	r1, fp
 80039d6:	018b      	lsls	r3, r1, #6
 80039d8:	4651      	mov	r1, sl
 80039da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039de:	4651      	mov	r1, sl
 80039e0:	018a      	lsls	r2, r1, #6
 80039e2:	4651      	mov	r1, sl
 80039e4:	ebb2 0801 	subs.w	r8, r2, r1
 80039e8:	4659      	mov	r1, fp
 80039ea:	eb63 0901 	sbc.w	r9, r3, r1
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a02:	4690      	mov	r8, r2
 8003a04:	4699      	mov	r9, r3
 8003a06:	4623      	mov	r3, r4
 8003a08:	eb18 0303 	adds.w	r3, r8, r3
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	462b      	mov	r3, r5
 8003a10:	eb49 0303 	adc.w	r3, r9, r3
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a22:	4629      	mov	r1, r5
 8003a24:	024b      	lsls	r3, r1, #9
 8003a26:	4621      	mov	r1, r4
 8003a28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	024a      	lsls	r2, r1, #9
 8003a30:	4610      	mov	r0, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a36:	2200      	movs	r2, #0
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a40:	f7fc fc4e 	bl	80002e0 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a4c:	e058      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	099b      	lsrs	r3, r3, #6
 8003a54:	2200      	movs	r2, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	4611      	mov	r1, r2
 8003a5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
 8003a64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a68:	4642      	mov	r2, r8
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	f04f 0000 	mov.w	r0, #0
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	0159      	lsls	r1, r3, #5
 8003a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a7a:	0150      	lsls	r0, r2, #5
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4641      	mov	r1, r8
 8003a82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a86:	4649      	mov	r1, r9
 8003a88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003aa0:	ebb2 040a 	subs.w	r4, r2, sl
 8003aa4:	eb63 050b 	sbc.w	r5, r3, fp
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	00eb      	lsls	r3, r5, #3
 8003ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	eb45 0303 	adc.w	r3, r5, r3
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	028b      	lsls	r3, r1, #10
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	028a      	lsls	r2, r1, #10
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aea:	2200      	movs	r2, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	61fa      	str	r2, [r7, #28]
 8003af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af4:	f7fc fbf4 	bl	80002e0 <__aeabi_uldivmod>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4613      	mov	r3, r2
 8003afe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b1a:	e002      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3750      	adds	r7, #80	; 0x50
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	007a1200 	.word	0x007a1200

08003b3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b58:	f7ff fff0 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	080171a0 	.word	0x080171a0

08003b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b80:	f7ff ffdc 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0b5b      	lsrs	r3, r3, #13
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	080171a0 	.word	0x080171a0

08003ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCC_GetClockConfig+0x60>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	601a      	str	r2, [r3, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40023c00 	.word	0x40023c00

08003c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d012      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c30:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c3a:	6093      	str	r3, [r2, #8]
 8003c3c:	4b66      	ldr	r3, [pc, #408]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	4964      	ldr	r1, [pc, #400]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d017      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c62:	4b5d      	ldr	r3, [pc, #372]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	4959      	ldr	r1, [pc, #356]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c9e:	4b4e      	ldr	r3, [pc, #312]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	494a      	ldr	r1, [pc, #296]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 808b 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf8:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd fb2a 	bl	8001368 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d18:	f7fd fb26 	bl	8001368 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e38f      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d035      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d02e      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d76:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d114      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fd faee 	bl	8001368 <HAL_GetTick>
 8003d8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7fd faea 	bl	8001368 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e351      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ee      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dbe:	d111      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	4901      	ldr	r1, [pc, #4]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	0ffffcff 	.word	0x0ffffcff
 8003de4:	4bac      	ldr	r3, [pc, #688]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4aab      	ldr	r2, [pc, #684]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	4ba9      	ldr	r3, [pc, #676]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfc:	49a6      	ldr	r1, [pc, #664]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e0e:	4ba2      	ldr	r3, [pc, #648]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e14:	4aa0      	ldr	r2, [pc, #640]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e1e:	4b9e      	ldr	r3, [pc, #632]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	499b      	ldr	r1, [pc, #620]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e3c:	4b96      	ldr	r3, [pc, #600]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4a:	4993      	ldr	r1, [pc, #588]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e5e:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6c:	498a      	ldr	r1, [pc, #552]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e80:	4b85      	ldr	r3, [pc, #532]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8e:	4982      	ldr	r1, [pc, #520]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4979      	ldr	r1, [pc, #484]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec4:	4b74      	ldr	r3, [pc, #464]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	4971      	ldr	r1, [pc, #452]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee6:	4b6c      	ldr	r3, [pc, #432]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f023 020c 	bic.w	r2, r3, #12
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	4968      	ldr	r1, [pc, #416]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f08:	4b63      	ldr	r3, [pc, #396]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	4960      	ldr	r1, [pc, #384]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2a:	4b5b      	ldr	r3, [pc, #364]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	4957      	ldr	r1, [pc, #348]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f4c:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	494f      	ldr	r1, [pc, #316]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f6e:	4b4a      	ldr	r3, [pc, #296]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	4946      	ldr	r1, [pc, #280]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	493e      	ldr	r1, [pc, #248]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	4935      	ldr	r1, [pc, #212]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe2:	492d      	ldr	r1, [pc, #180]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d011      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	4924      	ldr	r1, [pc, #144]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004014:	d101      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004044:	4914      	ldr	r1, [pc, #80]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004068:	490b      	ldr	r1, [pc, #44]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00f      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408c:	4902      	ldr	r1, [pc, #8]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040a8:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	4986      	ldr	r1, [pc, #536]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040cc:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040dc:	497d      	ldr	r1, [pc, #500]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d006      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80d6 	beq.w	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040f8:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a75      	ldr	r2, [pc, #468]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fd f930 	bl	8001368 <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800410c:	f7fd f92c 	bl	8001368 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e195      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800411e:	4b6d      	ldr	r3, [pc, #436]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11d      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800413e:	4b65      	ldr	r3, [pc, #404]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800414c:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004152:	0e1b      	lsrs	r3, r3, #24
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	4958      	ldr	r1, [pc, #352]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02e      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a4:	d129      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041b4:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ba:	0f1b      	lsrs	r3, r3, #28
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	019a      	lsls	r2, r3, #6
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	431a      	orrs	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	071b      	lsls	r3, r3, #28
 80041da:	493e      	ldr	r1, [pc, #248]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041e2:	4b3c      	ldr	r3, [pc, #240]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	f023 021f 	bic.w	r2, r3, #31
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	3b01      	subs	r3, #1
 80041f2:	4938      	ldr	r1, [pc, #224]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01d      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004206:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	0e1b      	lsrs	r3, r3, #24
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004214:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421a:	0f1b      	lsrs	r3, r3, #28
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	019a      	lsls	r2, r3, #6
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	431a      	orrs	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	061b      	lsls	r3, r3, #24
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	4926      	ldr	r1, [pc, #152]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d011      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	019a      	lsls	r2, r3, #6
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	071b      	lsls	r3, r3, #28
 800426a:	491a      	ldr	r1, [pc, #104]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800427c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427e:	f7fd f873 	bl	8001368 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004286:	f7fd f86f 	bl	8001368 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b64      	cmp	r3, #100	; 0x64
 8004292:	d901      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0d8      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	f040 80ce 	bne.w	8004448 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fd f856 	bl	8001368 <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042be:	e00b      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042c0:	f7fd f852 	bl	8001368 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d904      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0bb      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e4:	d0ec      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02e      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d12a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800430e:	4b51      	ldr	r3, [pc, #324]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	0f1b      	lsrs	r3, r3, #28
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	071b      	lsls	r3, r3, #28
 8004342:	4944      	ldr	r1, [pc, #272]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800434a:	4b42      	ldr	r3, [pc, #264]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	3b01      	subs	r3, #1
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	493d      	ldr	r1, [pc, #244]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d022      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004378:	d11d      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800437a:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004388:	4b32      	ldr	r3, [pc, #200]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	0f1b      	lsrs	r3, r3, #28
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	019a      	lsls	r2, r3, #6
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	071b      	lsls	r3, r3, #28
 80043ae:	4929      	ldr	r1, [pc, #164]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d028      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	019a      	lsls	r2, r3, #6
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	431a      	orrs	r2, r3
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	4917      	ldr	r1, [pc, #92]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4911      	ldr	r1, [pc, #68]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004420:	f7fc ffa2 	bl	8001368 <HAL_GetTick>
 8004424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004428:	f7fc ff9e 	bl	8001368 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e007      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004446:	d1ef      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800

08004458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e049      	b.n	80044fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f841 	bl	8004506 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 fa00 	bl	800489c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d001      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e054      	b.n	80045de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <HAL_TIM_Base_Start_IT+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d01d      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a22      	ldr	r2, [pc, #136]	; (80045f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <HAL_TIM_Base_Start_IT+0xe0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <HAL_TIM_Base_Start_IT+0xe4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <HAL_TIM_Base_Start_IT+0xe8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d115      	bne.n	80045c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_TIM_Base_Start_IT+0xec>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b06      	cmp	r3, #6
 80045ac:	d015      	beq.n	80045da <HAL_TIM_Base_Start_IT+0xbe>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d011      	beq.n	80045da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	e008      	b.n	80045da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e000      	b.n	80045dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40010400 	.word	0x40010400
 8004600:	40014000 	.word	0x40014000
 8004604:	40001800 	.word	0x40001800
 8004608:	00010007 	.word	0x00010007

0800460c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b02      	cmp	r3, #2
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0202 	mvn.w	r2, #2
 8004638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f905 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8f7 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f908 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b04      	cmp	r3, #4
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0204 	mvn.w	r2, #4
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8db 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f8cd 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f8de 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0208 	mvn.w	r2, #8
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2204      	movs	r2, #4
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f8b1 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8a3 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8b4 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b10      	cmp	r3, #16
 800471c:	d122      	bne.n	8004764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b10      	cmp	r3, #16
 800472a:	d11b      	bne.n	8004764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0210 	mvn.w	r2, #16
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2208      	movs	r2, #8
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f887 	bl	800485e <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f879 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f88a 	bl	8004872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10e      	bne.n	8004790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0201 	mvn.w	r2, #1
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fc f9a6 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479a:	2b80      	cmp	r3, #128	; 0x80
 800479c:	d10e      	bne.n	80047bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d107      	bne.n	80047bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f91a 	bl	80049f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ca:	d10e      	bne.n	80047ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d107      	bne.n	80047ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f90d 	bl	8004a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d10e      	bne.n	8004816 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d107      	bne.n	8004816 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800480e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f838 	bl	8004886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d10e      	bne.n	8004842 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b20      	cmp	r3, #32
 8004830:	d107      	bne.n	8004842 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f06f 0220 	mvn.w	r2, #32
 800483a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f8cd 	bl	80049dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d00f      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3d      	ldr	r2, [pc, #244]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00b      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3c      	ldr	r2, [pc, #240]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <TIM_Base_SetConfig+0x120>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d027      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <TIM_Base_SetConfig+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d023      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2b      	ldr	r2, [pc, #172]	; (80049b8 <TIM_Base_SetConfig+0x11c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <TIM_Base_SetConfig+0x120>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <TIM_Base_SetConfig+0x128>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <TIM_Base_SetConfig+0x12c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00f      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <TIM_Base_SetConfig+0x130>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <TIM_Base_SetConfig+0x134>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <TIM_Base_SetConfig+0x138>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <TIM_Base_SetConfig+0x13c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <TIM_Base_SetConfig+0x114>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	40001800 	.word	0x40001800
 80049d4:	40001c00 	.word	0x40001c00
 80049d8:	40002000 	.word	0x40002000

080049dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e040      	b.n	8004aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc f88e 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f82c 	bl	8004ab4 <UART_SetConfig>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e022      	b.n	8004aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa84 	bl	8004f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fb0b 	bl	80050c0 <UART_CheckIdleState>
 8004aaa:	4603      	mov	r3, r0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4ba6      	ldr	r3, [pc, #664]	; (8004d78 <UART_SetConfig+0x2c4>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	6979      	ldr	r1, [r7, #20]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a94      	ldr	r2, [pc, #592]	; (8004d7c <UART_SetConfig+0x2c8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d120      	bne.n	8004b72 <UART_SetConfig+0xbe>
 8004b30:	4b93      	ldr	r3, [pc, #588]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d816      	bhi.n	8004b6c <UART_SetConfig+0xb8>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0x90>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b61 	.word	0x08004b61
 8004b4c:	08004b5b 	.word	0x08004b5b
 8004b50:	08004b67 	.word	0x08004b67
 8004b54:	2301      	movs	r3, #1
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e150      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e14d      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b60:	2304      	movs	r3, #4
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e14a      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b66:	2308      	movs	r3, #8
 8004b68:	77fb      	strb	r3, [r7, #31]
 8004b6a:	e147      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e144      	b.n	8004dfc <UART_SetConfig+0x348>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a83      	ldr	r2, [pc, #524]	; (8004d84 <UART_SetConfig+0x2d0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d132      	bne.n	8004be2 <UART_SetConfig+0x12e>
 8004b7c:	4b80      	ldr	r3, [pc, #512]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b0c      	cmp	r3, #12
 8004b88:	d828      	bhi.n	8004bdc <UART_SetConfig+0x128>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0xdc>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bc5 	.word	0x08004bc5
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bdd 	.word	0x08004bdd
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004bdd 	.word	0x08004bdd
 8004bb0:	08004bcb 	.word	0x08004bcb
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004bdd 	.word	0x08004bdd
 8004bc0:	08004bd7 	.word	0x08004bd7
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e118      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	77fb      	strb	r3, [r7, #31]
 8004bce:	e115      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e112      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	77fb      	strb	r3, [r7, #31]
 8004bda:	e10f      	b.n	8004dfc <UART_SetConfig+0x348>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e10c      	b.n	8004dfc <UART_SetConfig+0x348>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a68      	ldr	r2, [pc, #416]	; (8004d88 <UART_SetConfig+0x2d4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d120      	bne.n	8004c2e <UART_SetConfig+0x17a>
 8004bec:	4b64      	ldr	r3, [pc, #400]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bf6:	2b30      	cmp	r3, #48	; 0x30
 8004bf8:	d013      	beq.n	8004c22 <UART_SetConfig+0x16e>
 8004bfa:	2b30      	cmp	r3, #48	; 0x30
 8004bfc:	d814      	bhi.n	8004c28 <UART_SetConfig+0x174>
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d009      	beq.n	8004c16 <UART_SetConfig+0x162>
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d810      	bhi.n	8004c28 <UART_SetConfig+0x174>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <UART_SetConfig+0x15c>
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d006      	beq.n	8004c1c <UART_SetConfig+0x168>
 8004c0e:	e00b      	b.n	8004c28 <UART_SetConfig+0x174>
 8004c10:	2300      	movs	r3, #0
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e0f2      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c16:	2302      	movs	r3, #2
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e0ef      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e0ec      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c22:	2308      	movs	r3, #8
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e0e9      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e0e6      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a56      	ldr	r2, [pc, #344]	; (8004d8c <UART_SetConfig+0x2d8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d120      	bne.n	8004c7a <UART_SetConfig+0x1c6>
 8004c38:	4b51      	ldr	r3, [pc, #324]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c42:	2bc0      	cmp	r3, #192	; 0xc0
 8004c44:	d013      	beq.n	8004c6e <UART_SetConfig+0x1ba>
 8004c46:	2bc0      	cmp	r3, #192	; 0xc0
 8004c48:	d814      	bhi.n	8004c74 <UART_SetConfig+0x1c0>
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d009      	beq.n	8004c62 <UART_SetConfig+0x1ae>
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d810      	bhi.n	8004c74 <UART_SetConfig+0x1c0>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <UART_SetConfig+0x1a8>
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d006      	beq.n	8004c68 <UART_SetConfig+0x1b4>
 8004c5a:	e00b      	b.n	8004c74 <UART_SetConfig+0x1c0>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e0cc      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e0c9      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0c6      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e0c3      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0c0      	b.n	8004dfc <UART_SetConfig+0x348>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a44      	ldr	r2, [pc, #272]	; (8004d90 <UART_SetConfig+0x2dc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d125      	bne.n	8004cd0 <UART_SetConfig+0x21c>
 8004c84:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c92:	d017      	beq.n	8004cc4 <UART_SetConfig+0x210>
 8004c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c98:	d817      	bhi.n	8004cca <UART_SetConfig+0x216>
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9e:	d00b      	beq.n	8004cb8 <UART_SetConfig+0x204>
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca4:	d811      	bhi.n	8004cca <UART_SetConfig+0x216>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <UART_SetConfig+0x1fe>
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cae:	d006      	beq.n	8004cbe <UART_SetConfig+0x20a>
 8004cb0:	e00b      	b.n	8004cca <UART_SetConfig+0x216>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e0a1      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e09e      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e09b      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e098      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cca:	2310      	movs	r3, #16
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e095      	b.n	8004dfc <UART_SetConfig+0x348>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2f      	ldr	r2, [pc, #188]	; (8004d94 <UART_SetConfig+0x2e0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d125      	bne.n	8004d26 <UART_SetConfig+0x272>
 8004cda:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ce4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ce8:	d017      	beq.n	8004d1a <UART_SetConfig+0x266>
 8004cea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cee:	d817      	bhi.n	8004d20 <UART_SetConfig+0x26c>
 8004cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf4:	d00b      	beq.n	8004d0e <UART_SetConfig+0x25a>
 8004cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfa:	d811      	bhi.n	8004d20 <UART_SetConfig+0x26c>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <UART_SetConfig+0x254>
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d04:	d006      	beq.n	8004d14 <UART_SetConfig+0x260>
 8004d06:	e00b      	b.n	8004d20 <UART_SetConfig+0x26c>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e076      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e073      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d14:	2304      	movs	r3, #4
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e070      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e06d      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d20:	2310      	movs	r3, #16
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e06a      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <UART_SetConfig+0x2e4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d138      	bne.n	8004da2 <UART_SetConfig+0x2ee>
 8004d30:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d3e:	d017      	beq.n	8004d70 <UART_SetConfig+0x2bc>
 8004d40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d44:	d82a      	bhi.n	8004d9c <UART_SetConfig+0x2e8>
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4a:	d00b      	beq.n	8004d64 <UART_SetConfig+0x2b0>
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d50:	d824      	bhi.n	8004d9c <UART_SetConfig+0x2e8>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <UART_SetConfig+0x2aa>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d006      	beq.n	8004d6a <UART_SetConfig+0x2b6>
 8004d5c:	e01e      	b.n	8004d9c <UART_SetConfig+0x2e8>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e04b      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d64:	2302      	movs	r3, #2
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e048      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d6a:	2304      	movs	r3, #4
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e045      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d70:	2308      	movs	r3, #8
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e042      	b.n	8004dfc <UART_SetConfig+0x348>
 8004d76:	bf00      	nop
 8004d78:	efff69f3 	.word	0xefff69f3
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40004400 	.word	0x40004400
 8004d88:	40004800 	.word	0x40004800
 8004d8c:	40004c00 	.word	0x40004c00
 8004d90:	40005000 	.word	0x40005000
 8004d94:	40011400 	.word	0x40011400
 8004d98:	40007800 	.word	0x40007800
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e02c      	b.n	8004dfc <UART_SetConfig+0x348>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a72      	ldr	r2, [pc, #456]	; (8004f70 <UART_SetConfig+0x4bc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d125      	bne.n	8004df8 <UART_SetConfig+0x344>
 8004dac:	4b71      	ldr	r3, [pc, #452]	; (8004f74 <UART_SetConfig+0x4c0>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004db6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dba:	d017      	beq.n	8004dec <UART_SetConfig+0x338>
 8004dbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dc0:	d817      	bhi.n	8004df2 <UART_SetConfig+0x33e>
 8004dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc6:	d00b      	beq.n	8004de0 <UART_SetConfig+0x32c>
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dcc:	d811      	bhi.n	8004df2 <UART_SetConfig+0x33e>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <UART_SetConfig+0x326>
 8004dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd6:	d006      	beq.n	8004de6 <UART_SetConfig+0x332>
 8004dd8:	e00b      	b.n	8004df2 <UART_SetConfig+0x33e>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e00d      	b.n	8004dfc <UART_SetConfig+0x348>
 8004de0:	2302      	movs	r3, #2
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e00a      	b.n	8004dfc <UART_SetConfig+0x348>
 8004de6:	2304      	movs	r3, #4
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e007      	b.n	8004dfc <UART_SetConfig+0x348>
 8004dec:	2308      	movs	r3, #8
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e004      	b.n	8004dfc <UART_SetConfig+0x348>
 8004df2:	2310      	movs	r3, #16
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e001      	b.n	8004dfc <UART_SetConfig+0x348>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e04:	d15b      	bne.n	8004ebe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d828      	bhi.n	8004e5e <UART_SetConfig+0x3aa>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x360>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e39 	.word	0x08004e39
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08004e5f 	.word	0x08004e5f
 8004e24:	08004e4f 	.word	0x08004e4f
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e5f 	.word	0x08004e5f
 8004e34:	08004e57 	.word	0x08004e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7fe fe8c 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8004e3c:	61b8      	str	r0, [r7, #24]
        break;
 8004e3e:	e013      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7fe fe9c 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 8004e44:	61b8      	str	r0, [r7, #24]
        break;
 8004e46:	e00f      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e48:	4b4b      	ldr	r3, [pc, #300]	; (8004f78 <UART_SetConfig+0x4c4>)
 8004e4a:	61bb      	str	r3, [r7, #24]
        break;
 8004e4c:	e00c      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4e:	f7fe fd6f 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8004e52:	61b8      	str	r0, [r7, #24]
        break;
 8004e54:	e008      	b.n	8004e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5a:	61bb      	str	r3, [r7, #24]
        break;
 8004e5c:	e004      	b.n	8004e68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	77bb      	strb	r3, [r7, #30]
        break;
 8004e66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d074      	beq.n	8004f58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	005a      	lsls	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b0f      	cmp	r3, #15
 8004e88:	d916      	bls.n	8004eb8 <UART_SetConfig+0x404>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d212      	bcs.n	8004eb8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f023 030f 	bic.w	r3, r3, #15
 8004e9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	89fa      	ldrh	r2, [r7, #14]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	e04f      	b.n	8004f58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	77bb      	strb	r3, [r7, #30]
 8004ebc:	e04c      	b.n	8004f58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d828      	bhi.n	8004f16 <UART_SetConfig+0x462>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x418>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	08004f17 	.word	0x08004f17
 8004edc:	08004f07 	.word	0x08004f07
 8004ee0:	08004f17 	.word	0x08004f17
 8004ee4:	08004f17 	.word	0x08004f17
 8004ee8:	08004f17 	.word	0x08004f17
 8004eec:	08004f0f 	.word	0x08004f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fe fe30 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	61b8      	str	r0, [r7, #24]
        break;
 8004ef6:	e013      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7fe fe40 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 8004efc:	61b8      	str	r0, [r7, #24]
        break;
 8004efe:	e00f      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <UART_SetConfig+0x4c4>)
 8004f02:	61bb      	str	r3, [r7, #24]
        break;
 8004f04:	e00c      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f06:	f7fe fd13 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8004f0a:	61b8      	str	r0, [r7, #24]
        break;
 8004f0c:	e008      	b.n	8004f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f12:	61bb      	str	r3, [r7, #24]
        break;
 8004f14:	e004      	b.n	8004f20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	085a      	lsrs	r2, r3, #1
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d909      	bls.n	8004f54 <UART_SetConfig+0x4a0>
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f46:	d205      	bcs.n	8004f54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	e001      	b.n	8004f58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f64:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40007c00 	.word	0x40007c00
 8004f74:	40023800 	.word	0x40023800
 8004f78:	00f42400 	.word	0x00f42400

08004f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01a      	beq.n	8005092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507a:	d10a      	bne.n	8005092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d0:	f7fc f94a 	bl	8001368 <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10e      	bne.n	8005102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f831 	bl	800515a <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e027      	b.n	8005152 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d10e      	bne.n	800512e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f81b 	bl	800515a <UART_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e011      	b.n	8005152 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b09c      	sub	sp, #112	; 0x70
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516a:	e0a7      	b.n	80052bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005172:	f000 80a3 	beq.w	80052bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fc f8f7 	bl	8001368 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <UART_WaitOnFlagUntilTimeout+0x32>
 8005186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005188:	2b00      	cmp	r3, #0
 800518a:	d13f      	bne.n	800520c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800519a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051a0:	667b      	str	r3, [r7, #100]	; 0x64
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e6      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3308      	adds	r3, #8
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	663b      	str	r3, [r7, #96]	; 0x60
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3308      	adds	r3, #8
 80051dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051de:	64ba      	str	r2, [r7, #72]	; 0x48
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e068      	b.n	80052de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d050      	beq.n	80052bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005228:	d148      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005232:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
 8005254:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e6      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	613b      	str	r3, [r7, #16]
   return(result);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	66bb      	str	r3, [r7, #104]	; 0x68
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005286:	623a      	str	r2, [r7, #32]
 8005288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	69f9      	ldr	r1, [r7, #28]
 800528c:	6a3a      	ldr	r2, [r7, #32]
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	61bb      	str	r3, [r7, #24]
   return(result);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e010      	b.n	80052de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	f43f af48 	beq.w	800516c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3770      	adds	r7, #112	; 0x70
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e8:	b084      	sub	sp, #16
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	f107 001c 	add.w	r0, r7, #28
 80052f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d120      	bne.n	8005342 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	4b20      	ldr	r3, [pc, #128]	; (8005394 <USB_CoreInit+0xac>)
 8005312:	4013      	ands	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa96 	bl	8005868 <USB_CoreReset>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e010      	b.n	8005364 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa8a 	bl	8005868 <USB_CoreReset>
 8005354:	4603      	mov	r3, r0
 8005356:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10b      	bne.n	8005382 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f043 0206 	orr.w	r2, r3, #6
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800538e:	b004      	add	sp, #16
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	ffbdffbf 	.word	0xffbdffbf

08005398 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f023 0201 	bic.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053d6:	78fb      	ldrb	r3, [r7, #3]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d115      	bne.n	8005408 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053e8:	2001      	movs	r0, #1
 80053ea:	f7fb ffc9 	bl	8001380 <HAL_Delay>
      ms++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa29 	bl	800584c <USB_GetMode>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d01e      	beq.n	800543e <USB_SetCurrentMode+0x84>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b31      	cmp	r3, #49	; 0x31
 8005404:	d9f0      	bls.n	80053e8 <USB_SetCurrentMode+0x2e>
 8005406:	e01a      	b.n	800543e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d115      	bne.n	800543a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800541a:	2001      	movs	r0, #1
 800541c:	f7fb ffb0 	bl	8001380 <HAL_Delay>
      ms++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa10 	bl	800584c <USB_GetMode>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <USB_SetCurrentMode+0x84>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b31      	cmp	r3, #49	; 0x31
 8005436:	d9f0      	bls.n	800541a <USB_SetCurrentMode+0x60>
 8005438:	e001      	b.n	800543e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e005      	b.n	800544a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b32      	cmp	r3, #50	; 0x32
 8005442:	d101      	bne.n	8005448 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005454:	b084      	sub	sp, #16
 8005456:	b580      	push	{r7, lr}
 8005458:	b086      	sub	sp, #24
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	e009      	b.n	8005488 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	3340      	adds	r3, #64	; 0x40
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	2200      	movs	r2, #0
 8005480:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	3301      	adds	r3, #1
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2b0e      	cmp	r3, #14
 800548c:	d9f2      	bls.n	8005474 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800548e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11c      	bne.n	80054ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a2:	f043 0302 	orr.w	r3, r3, #2
 80054a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	e005      	b.n	80054da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e0:	461a      	mov	r2, r3
 80054e2:	2300      	movs	r3, #0
 80054e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	4619      	mov	r1, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	461a      	mov	r2, r3
 80054f6:	680b      	ldr	r3, [r1, #0]
 80054f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10c      	bne.n	800551a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005506:	2100      	movs	r1, #0
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f965 	bl	80057d8 <USB_SetDevSpeed>
 800550e:	e008      	b.n	8005522 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005510:	2101      	movs	r1, #1
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f960 	bl	80057d8 <USB_SetDevSpeed>
 8005518:	e003      	b.n	8005522 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800551a:	2103      	movs	r1, #3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f95b 	bl	80057d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005522:	2110      	movs	r1, #16
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8f3 	bl	8005710 <USB_FlushTxFifo>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f91f 	bl	8005778 <USB_FlushRxFifo>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	461a      	mov	r2, r3
 800554c:	2300      	movs	r3, #0
 800554e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	461a      	mov	r2, r3
 8005558:	2300      	movs	r3, #0
 800555a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	461a      	mov	r2, r3
 8005564:	2300      	movs	r3, #0
 8005566:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	e043      	b.n	80055f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005584:	d118      	bne.n	80055b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	461a      	mov	r2, r3
 800559a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e013      	b.n	80055ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	461a      	mov	r2, r3
 80055b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e008      	b.n	80055ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	461a      	mov	r2, r3
 80055d8:	2300      	movs	r3, #0
 80055da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	461a      	mov	r2, r3
 80055ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3301      	adds	r3, #1
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d3b7      	bcc.n	800556e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e043      	b.n	800568c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561a:	d118      	bne.n	800564e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	461a      	mov	r2, r3
 8005630:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e013      	b.n	8005660 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	461a      	mov	r2, r3
 8005646:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	e008      	b.n	8005660 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	461a      	mov	r2, r3
 800566e:	2300      	movs	r3, #0
 8005670:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	461a      	mov	r2, r3
 8005680:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005684:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	3301      	adds	r3, #1
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	429a      	cmp	r2, r3
 8005692:	d3b7      	bcc.n	8005604 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f043 0210 	orr.w	r2, r3, #16
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	4b0e      	ldr	r3, [pc, #56]	; (8005708 <USB_DevInit+0x2b4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f043 0208 	orr.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d105      	bne.n	80056f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <USB_DevInit+0x2b8>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005704:	b004      	add	sp, #16
 8005706:	4770      	bx	lr
 8005708:	803c3800 	.word	0x803c3800
 800570c:	40000004 	.word	0x40000004

08005710 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3301      	adds	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a13      	ldr	r2, [pc, #76]	; (8005774 <USB_FlushTxFifo+0x64>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e01b      	b.n	8005768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	daf2      	bge.n	800571e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	019b      	lsls	r3, r3, #6
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <USB_FlushTxFifo+0x64>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e006      	b.n	8005768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b20      	cmp	r3, #32
 8005764:	d0f0      	beq.n	8005748 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	00030d40 	.word	0x00030d40

08005778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a11      	ldr	r2, [pc, #68]	; (80057d4 <USB_FlushRxFifo+0x5c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e018      	b.n	80057c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	daf2      	bge.n	8005784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2210      	movs	r2, #16
 80057a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <USB_FlushRxFifo+0x5c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e006      	b.n	80057c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d0f0      	beq.n	80057a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	00030d40 	.word	0x00030d40

080057d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005824:	f023 0303 	bic.w	r3, r3, #3
 8005828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0301 	and.w	r3, r3, #1
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <USB_CoreReset+0x64>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e01b      	b.n	80058be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	daf2      	bge.n	8005874 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f043 0201 	orr.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <USB_CoreReset+0x64>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e006      	b.n	80058be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d0f0      	beq.n	800589e <USB_CoreReset+0x36>

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	00030d40 	.word	0x00030d40

080058d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80058d0:	b5b0      	push	{r4, r5, r7, lr}
 80058d2:	b08c      	sub	sp, #48	; 0x30
 80058d4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80058d6:	4b96      	ldr	r3, [pc, #600]	; (8005b30 <MX_LWIP_Init+0x260>)
 80058d8:	220a      	movs	r2, #10
 80058da:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 80058dc:	4b94      	ldr	r3, [pc, #592]	; (8005b30 <MX_LWIP_Init+0x260>)
 80058de:	222a      	movs	r2, #42	; 0x2a
 80058e0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80058e2:	4b93      	ldr	r3, [pc, #588]	; (8005b30 <MX_LWIP_Init+0x260>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 80058e8:	4b91      	ldr	r3, [pc, #580]	; (8005b30 <MX_LWIP_Init+0x260>)
 80058ea:	220f      	movs	r2, #15
 80058ec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80058ee:	4b91      	ldr	r3, [pc, #580]	; (8005b34 <MX_LWIP_Init+0x264>)
 80058f0:	22ff      	movs	r2, #255	; 0xff
 80058f2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80058f4:	4b8f      	ldr	r3, [pc, #572]	; (8005b34 <MX_LWIP_Init+0x264>)
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80058fa:	4b8e      	ldr	r3, [pc, #568]	; (8005b34 <MX_LWIP_Init+0x264>)
 80058fc:	22ff      	movs	r2, #255	; 0xff
 80058fe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005900:	4b8c      	ldr	r3, [pc, #560]	; (8005b34 <MX_LWIP_Init+0x264>)
 8005902:	2200      	movs	r2, #0
 8005904:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005906:	4b8c      	ldr	r3, [pc, #560]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005908:	220a      	movs	r2, #10
 800590a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 800590c:	4b8a      	ldr	r3, [pc, #552]	; (8005b38 <MX_LWIP_Init+0x268>)
 800590e:	222a      	movs	r2, #42	; 0x2a
 8005910:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005912:	4b89      	ldr	r3, [pc, #548]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005914:	2200      	movs	r2, #0
 8005916:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005918:	4b87      	ldr	r3, [pc, #540]	; (8005b38 <MX_LWIP_Init+0x268>)
 800591a:	2201      	movs	r2, #1
 800591c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800591e:	2100      	movs	r1, #0
 8005920:	2000      	movs	r0, #0
 8005922:	f003 fe93 	bl	800964c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005926:	4b82      	ldr	r3, [pc, #520]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	061a      	lsls	r2, r3, #24
 800592c:	4b80      	ldr	r3, [pc, #512]	; (8005b30 <MX_LWIP_Init+0x260>)
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	431a      	orrs	r2, r3
 8005934:	4b7e      	ldr	r3, [pc, #504]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005936:	789b      	ldrb	r3, [r3, #2]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	4313      	orrs	r3, r2
 800593c:	4a7c      	ldr	r2, [pc, #496]	; (8005b30 <MX_LWIP_Init+0x260>)
 800593e:	78d2      	ldrb	r2, [r2, #3]
 8005940:	4313      	orrs	r3, r2
 8005942:	061a      	lsls	r2, r3, #24
 8005944:	4b7a      	ldr	r3, [pc, #488]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	0619      	lsls	r1, r3, #24
 800594a:	4b79      	ldr	r3, [pc, #484]	; (8005b30 <MX_LWIP_Init+0x260>)
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	041b      	lsls	r3, r3, #16
 8005950:	4319      	orrs	r1, r3
 8005952:	4b77      	ldr	r3, [pc, #476]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005954:	789b      	ldrb	r3, [r3, #2]
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	430b      	orrs	r3, r1
 800595a:	4975      	ldr	r1, [pc, #468]	; (8005b30 <MX_LWIP_Init+0x260>)
 800595c:	78c9      	ldrb	r1, [r1, #3]
 800595e:	430b      	orrs	r3, r1
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005966:	431a      	orrs	r2, r3
 8005968:	4b71      	ldr	r3, [pc, #452]	; (8005b30 <MX_LWIP_Init+0x260>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	0619      	lsls	r1, r3, #24
 800596e:	4b70      	ldr	r3, [pc, #448]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	4319      	orrs	r1, r3
 8005976:	4b6e      	ldr	r3, [pc, #440]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005978:	789b      	ldrb	r3, [r3, #2]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	430b      	orrs	r3, r1
 800597e:	496c      	ldr	r1, [pc, #432]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005980:	78c9      	ldrb	r1, [r1, #3]
 8005982:	430b      	orrs	r3, r1
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800598a:	431a      	orrs	r2, r3
 800598c:	4b68      	ldr	r3, [pc, #416]	; (8005b30 <MX_LWIP_Init+0x260>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	0619      	lsls	r1, r3, #24
 8005992:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <MX_LWIP_Init+0x260>)
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	4319      	orrs	r1, r3
 800599a:	4b65      	ldr	r3, [pc, #404]	; (8005b30 <MX_LWIP_Init+0x260>)
 800599c:	789b      	ldrb	r3, [r3, #2]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	430b      	orrs	r3, r1
 80059a2:	4963      	ldr	r1, [pc, #396]	; (8005b30 <MX_LWIP_Init+0x260>)
 80059a4:	78c9      	ldrb	r1, [r1, #3]
 80059a6:	430b      	orrs	r3, r1
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	4313      	orrs	r3, r2
 80059ac:	4a63      	ldr	r2, [pc, #396]	; (8005b3c <MX_LWIP_Init+0x26c>)
 80059ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80059b0:	4b60      	ldr	r3, [pc, #384]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	061a      	lsls	r2, r3, #24
 80059b6:	4b5f      	ldr	r3, [pc, #380]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	431a      	orrs	r2, r3
 80059be:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059c0:	789b      	ldrb	r3, [r3, #2]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	4313      	orrs	r3, r2
 80059c6:	4a5b      	ldr	r2, [pc, #364]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059c8:	78d2      	ldrb	r2, [r2, #3]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	061a      	lsls	r2, r3, #24
 80059ce:	4b59      	ldr	r3, [pc, #356]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	0619      	lsls	r1, r3, #24
 80059d4:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	4319      	orrs	r1, r3
 80059dc:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059de:	789b      	ldrb	r3, [r3, #2]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	430b      	orrs	r3, r1
 80059e4:	4953      	ldr	r1, [pc, #332]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059e6:	78c9      	ldrb	r1, [r1, #3]
 80059e8:	430b      	orrs	r3, r1
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059f0:	431a      	orrs	r2, r3
 80059f2:	4b50      	ldr	r3, [pc, #320]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	0619      	lsls	r1, r3, #24
 80059f8:	4b4e      	ldr	r3, [pc, #312]	; (8005b34 <MX_LWIP_Init+0x264>)
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	041b      	lsls	r3, r3, #16
 80059fe:	4319      	orrs	r1, r3
 8005a00:	4b4c      	ldr	r3, [pc, #304]	; (8005b34 <MX_LWIP_Init+0x264>)
 8005a02:	789b      	ldrb	r3, [r3, #2]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	430b      	orrs	r3, r1
 8005a08:	494a      	ldr	r1, [pc, #296]	; (8005b34 <MX_LWIP_Init+0x264>)
 8005a0a:	78c9      	ldrb	r1, [r1, #3]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a14:	431a      	orrs	r2, r3
 8005a16:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <MX_LWIP_Init+0x264>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	0619      	lsls	r1, r3, #24
 8005a1c:	4b45      	ldr	r3, [pc, #276]	; (8005b34 <MX_LWIP_Init+0x264>)
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	4319      	orrs	r1, r3
 8005a24:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <MX_LWIP_Init+0x264>)
 8005a26:	789b      	ldrb	r3, [r3, #2]
 8005a28:	021b      	lsls	r3, r3, #8
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	4941      	ldr	r1, [pc, #260]	; (8005b34 <MX_LWIP_Init+0x264>)
 8005a2e:	78c9      	ldrb	r1, [r1, #3]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	0e1b      	lsrs	r3, r3, #24
 8005a34:	4313      	orrs	r3, r2
 8005a36:	4a42      	ldr	r2, [pc, #264]	; (8005b40 <MX_LWIP_Init+0x270>)
 8005a38:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	061a      	lsls	r2, r3, #24
 8005a40:	4b3d      	ldr	r3, [pc, #244]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	431a      	orrs	r2, r3
 8005a48:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a4a:	789b      	ldrb	r3, [r3, #2]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	4a39      	ldr	r2, [pc, #228]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a52:	78d2      	ldrb	r2, [r2, #3]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	061a      	lsls	r2, r3, #24
 8005a58:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	0619      	lsls	r1, r3, #24
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	4319      	orrs	r1, r3
 8005a66:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a68:	789b      	ldrb	r3, [r3, #2]
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	4932      	ldr	r1, [pc, #200]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a70:	78c9      	ldrb	r1, [r1, #3]
 8005a72:	430b      	orrs	r3, r1
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	0619      	lsls	r1, r3, #24
 8005a82:	4b2d      	ldr	r3, [pc, #180]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	4319      	orrs	r1, r3
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a8c:	789b      	ldrb	r3, [r3, #2]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	430b      	orrs	r3, r1
 8005a92:	4929      	ldr	r1, [pc, #164]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005a94:	78c9      	ldrb	r1, [r1, #3]
 8005a96:	430b      	orrs	r3, r1
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	0619      	lsls	r1, r3, #24
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	041b      	lsls	r3, r3, #16
 8005aac:	4319      	orrs	r1, r3
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005ab0:	789b      	ldrb	r3, [r3, #2]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	4920      	ldr	r1, [pc, #128]	; (8005b38 <MX_LWIP_Init+0x268>)
 8005ab8:	78c9      	ldrb	r1, [r1, #3]
 8005aba:	430b      	orrs	r3, r1
 8005abc:	0e1b      	lsrs	r3, r3, #24
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	4a20      	ldr	r2, [pc, #128]	; (8005b44 <MX_LWIP_Init+0x274>)
 8005ac2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005ac4:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <MX_LWIP_Init+0x278>)
 8005ac6:	9302      	str	r3, [sp, #8]
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <MX_LWIP_Init+0x27c>)
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	2300      	movs	r3, #0
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <MX_LWIP_Init+0x274>)
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <MX_LWIP_Init+0x270>)
 8005ad4:	4919      	ldr	r1, [pc, #100]	; (8005b3c <MX_LWIP_Init+0x26c>)
 8005ad6:	481e      	ldr	r0, [pc, #120]	; (8005b50 <MX_LWIP_Init+0x280>)
 8005ad8:	f004 fb92 	bl	800a200 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005adc:	481c      	ldr	r0, [pc, #112]	; (8005b50 <MX_LWIP_Init+0x280>)
 8005ade:	f004 fd41 	bl	800a564 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005ae2:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <MX_LWIP_Init+0x280>)
 8005ae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005af4:	4816      	ldr	r0, [pc, #88]	; (8005b50 <MX_LWIP_Init+0x280>)
 8005af6:	f004 fd45 	bl	800a584 <netif_set_up>
 8005afa:	e002      	b.n	8005b02 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005afc:	4814      	ldr	r0, [pc, #80]	; (8005b50 <MX_LWIP_Init+0x280>)
 8005afe:	f004 fdad 	bl	800a65c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005b02:	4914      	ldr	r1, [pc, #80]	; (8005b54 <MX_LWIP_Init+0x284>)
 8005b04:	4812      	ldr	r0, [pc, #72]	; (8005b50 <MX_LWIP_Init+0x280>)
 8005b06:	f004 fe3f 	bl	800a788 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <MX_LWIP_Init+0x288>)
 8005b0c:	1d3c      	adds	r4, r7, #4
 8005b0e:	461d      	mov	r5, r3
 8005b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	490c      	ldr	r1, [pc, #48]	; (8005b50 <MX_LWIP_Init+0x280>)
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fd47 	bl	80065b4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005b26:	bf00      	nop
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000c6c 	.word	0x20000c6c
 8005b34:	20000c70 	.word	0x20000c70
 8005b38:	20000c74 	.word	0x20000c74
 8005b3c:	20000c60 	.word	0x20000c60
 8005b40:	20000c64 	.word	0x20000c64
 8005b44:	20000c68 	.word	0x20000c68
 8005b48:	08009589 	.word	0x08009589
 8005b4c:	08006055 	.word	0x08006055
 8005b50:	20000c2c 	.word	0x20000c2c
 8005b54:	08005b5d 	.word	0x08005b5d
 8005b58:	0801466c 	.word	0x0801466c

08005b5c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005b82:	2320      	movs	r3, #32
 8005b84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b86:	f3bf 8f4f 	dsb	sy
}
 8005b8a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005b8c:	e00b      	b.n	8005ba6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005b8e:	4a0d      	ldr	r2, [pc, #52]	; (8005bc4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dcf0      	bgt.n	8005b8e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005bac:	f3bf 8f4f 	dsb	sy
}
 8005bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005bb2:	f3bf 8f6f 	isb	sy
}
 8005bb6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	e000ed00 	.word	0xe000ed00

08005bc8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <HAL_ETH_RxCpltCallback+0x1c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fe37 	bl	8006848 <osSemaphoreRelease>
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20005604 	.word	0x20005604

08005be8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005bf0:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <HAL_ETH_TxCpltCallback+0x1c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fe27 	bl	8006848 <osSemaphoreRelease>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20005608 	.word	0x20005608

08005c08 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fc fb75 	bl	8002300 <HAL_ETH_GetDMAError>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b80      	cmp	r3, #128	; 0x80
 8005c1e:	d104      	bne.n	8005c2a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <HAL_ETH_ErrorCallback+0x2c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fe0f 	bl	8006848 <osSemaphoreRelease>
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20005604 	.word	0x20005604

08005c38 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005c38:	b5b0      	push	{r4, r5, r7, lr}
 8005c3a:	b0a8      	sub	sp, #160	; 0xa0
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8005c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c56:	2264      	movs	r2, #100	; 0x64
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f00d fc8a 	bl	8013574 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005c60:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <low_level_init+0x240>)
 8005c62:	4a86      	ldr	r2, [pc, #536]	; (8005e7c <low_level_init+0x244>)
 8005c64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8005c72:	23e1      	movs	r3, #225	; 0xe1
 8005c74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005c8a:	4a7b      	ldr	r2, [pc, #492]	; (8005e78 <low_level_init+0x240>)
 8005c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c90:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005c92:	4b79      	ldr	r3, [pc, #484]	; (8005e78 <low_level_init+0x240>)
 8005c94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005c98:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005c9a:	4b77      	ldr	r3, [pc, #476]	; (8005e78 <low_level_init+0x240>)
 8005c9c:	4a78      	ldr	r2, [pc, #480]	; (8005e80 <low_level_init+0x248>)
 8005c9e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005ca0:	4b75      	ldr	r3, [pc, #468]	; (8005e78 <low_level_init+0x240>)
 8005ca2:	4a78      	ldr	r2, [pc, #480]	; (8005e84 <low_level_init+0x24c>)
 8005ca4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005ca6:	4b74      	ldr	r3, [pc, #464]	; (8005e78 <low_level_init+0x240>)
 8005ca8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005cac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005cae:	4872      	ldr	r0, [pc, #456]	; (8005e78 <low_level_init+0x240>)
 8005cb0:	f7fb fce8 	bl	8001684 <HAL_ETH_Init>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005cba:	2238      	movs	r2, #56	; 0x38
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4872      	ldr	r0, [pc, #456]	; (8005e88 <low_level_init+0x250>)
 8005cc0:	f00d fc58 	bl	8013574 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005cc4:	4b70      	ldr	r3, [pc, #448]	; (8005e88 <low_level_init+0x250>)
 8005cc6:	2221      	movs	r2, #33	; 0x21
 8005cc8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005cca:	4b6f      	ldr	r3, [pc, #444]	; (8005e88 <low_level_init+0x250>)
 8005ccc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005cd0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005cd2:	4b6d      	ldr	r3, [pc, #436]	; (8005e88 <low_level_init+0x250>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005cd8:	486c      	ldr	r0, [pc, #432]	; (8005e8c <low_level_init+0x254>)
 8005cda:	f004 f94b 	bl	8009f74 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2206      	movs	r2, #6
 8005ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ce6:	4b64      	ldr	r3, [pc, #400]	; (8005e78 <low_level_init+0x240>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005cf2:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <low_level_init+0x240>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	785a      	ldrb	r2, [r3, #1]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005cfe:	4b5e      	ldr	r3, [pc, #376]	; (8005e78 <low_level_init+0x240>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	789a      	ldrb	r2, [r3, #2]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005d0a:	4b5b      	ldr	r3, [pc, #364]	; (8005e78 <low_level_init+0x240>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	78da      	ldrb	r2, [r3, #3]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005d16:	4b58      	ldr	r3, [pc, #352]	; (8005e78 <low_level_init+0x240>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	791a      	ldrb	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005d22:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <low_level_init+0x240>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	795a      	ldrb	r2, [r3, #5]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005d34:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d3c:	f043 030a 	orr.w	r3, r3, #10
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005d48:	2203      	movs	r2, #3
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	f001 f82d 	bl	8006dac <xQueueGenericCreate>
 8005d52:	4603      	mov	r3, r0
 8005d54:	4a4e      	ldr	r2, [pc, #312]	; (8005e90 <low_level_init+0x258>)
 8005d56:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005d58:	2203      	movs	r2, #3
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f001 f825 	bl	8006dac <xQueueGenericCreate>
 8005d62:	4603      	mov	r3, r0
 8005d64:	4a4b      	ldr	r2, [pc, #300]	; (8005e94 <low_level_init+0x25c>)
 8005d66:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005d68:	4b4b      	ldr	r3, [pc, #300]	; (8005e98 <low_level_init+0x260>)
 8005d6a:	f107 0408 	add.w	r4, r7, #8
 8005d6e:	461d      	mov	r5, r3
 8005d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005d7c:	f107 0308 	add.w	r3, r7, #8
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fc16 	bl	80065b4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005d88:	4944      	ldr	r1, [pc, #272]	; (8005e9c <low_level_init+0x264>)
 8005d8a:	4845      	ldr	r0, [pc, #276]	; (8005ea0 <low_level_init+0x268>)
 8005d8c:	f7fb f969 	bl	8001062 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005d90:	4843      	ldr	r0, [pc, #268]	; (8005ea0 <low_level_init+0x268>)
 8005d92:	f7fb f998 	bl	80010c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005d96:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d165      	bne.n	8005e6a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005d9e:	4840      	ldr	r0, [pc, #256]	; (8005ea0 <low_level_init+0x268>)
 8005da0:	f7fb fa39 	bl	8001216 <LAN8742_GetLinkState>
 8005da4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	dc06      	bgt.n	8005dbe <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f004 fcb9 	bl	800a728 <netif_set_link_down>
      netif_set_down(netif);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f004 fc50 	bl	800a65c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005dbc:	e057      	b.n	8005e6e <low_level_init+0x236>
      switch (PHYLinkState)
 8005dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dc2:	3b02      	subs	r3, #2
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d82b      	bhi.n	8005e20 <low_level_init+0x1e8>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <low_level_init+0x198>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005df3 	.word	0x08005df3
 8005dd8:	08005e03 	.word	0x08005e03
 8005ddc:	08005e13 	.word	0x08005e13
        duplex = ETH_FULLDUPLEX_MODE;
 8005de0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005df0:	e01f      	b.n	8005e32 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005df8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005e00:	e017      	b.n	8005e32 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005e10:	e00f      	b.n	8005e32 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005e1e:	e008      	b.n	8005e32 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005e30:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e36:	4619      	mov	r1, r3
 8005e38:	480f      	ldr	r0, [pc, #60]	; (8005e78 <low_level_init+0x240>)
 8005e3a:	f7fc f907 	bl	800204c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e42:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e48:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4809      	ldr	r0, [pc, #36]	; (8005e78 <low_level_init+0x240>)
 8005e52:	f7fc f9e5 	bl	8002220 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005e56:	4808      	ldr	r0, [pc, #32]	; (8005e78 <low_level_init+0x240>)
 8005e58:	f7fb fc90 	bl	800177c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f004 fb91 	bl	800a584 <netif_set_up>
    netif_set_link_up(netif);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f004 fc2c 	bl	800a6c0 <netif_set_link_up>
}
 8005e68:	e001      	b.n	8005e6e <low_level_init+0x236>
    Error_Handler();
 8005e6a:	f7fa fe49 	bl	8000b00 <Error_Handler>
}
 8005e6e:	bf00      	nop
 8005e70:	37a0      	adds	r7, #160	; 0xa0
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bdb0      	pop	{r4, r5, r7, pc}
 8005e76:	bf00      	nop
 8005e78:	2000560c 	.word	0x2000560c
 8005e7c:	40028000 	.word	0x40028000
 8005e80:	20000134 	.word	0x20000134
 8005e84:	20000094 	.word	0x20000094
 8005e88:	200056bc 	.word	0x200056bc
 8005e8c:	080171a8 	.word	0x080171a8
 8005e90:	20005604 	.word	0x20005604
 8005e94:	20005608 	.word	0x20005608
 8005e98:	08014690 	.word	0x08014690
 8005e9c:	2000000c 	.word	0x2000000c
 8005ea0:	200056f4 	.word	0x200056f4

08005ea4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b092      	sub	sp, #72	; 0x48
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005ebc:	f107 030c 	add.w	r3, r7, #12
 8005ec0:	2230      	movs	r2, #48	; 0x30
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f00d fb55 	bl	8013574 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005eca:	f107 030c 	add.w	r3, r7, #12
 8005ece:	2230      	movs	r2, #48	; 0x30
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f00d fb4e 	bl	8013574 <memset>

  for(q = p; q != NULL; q = q->next)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	643b      	str	r3, [r7, #64]	; 0x40
 8005edc:	e045      	b.n	8005f6a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d902      	bls.n	8005eea <low_level_output+0x46>
      return ERR_IF;
 8005ee4:	f06f 030b 	mvn.w	r3, #11
 8005ee8:	e065      	b.n	8005fb6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eec:	6859      	ldr	r1, [r3, #4]
 8005eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	3348      	adds	r3, #72	; 0x48
 8005efa:	443b      	add	r3, r7
 8005efc:	3b3c      	subs	r3, #60	; 0x3c
 8005efe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f02:	895b      	ldrh	r3, [r3, #10]
 8005f04:	4619      	mov	r1, r3
 8005f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f08:	4613      	mov	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	3348      	adds	r3, #72	; 0x48
 8005f12:	443b      	add	r3, r7
 8005f14:	3b38      	subs	r3, #56	; 0x38
 8005f16:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d011      	beq.n	8005f42 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f20:	1e5a      	subs	r2, r3, #1
 8005f22:	f107 000c 	add.w	r0, r7, #12
 8005f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f28:	460b      	mov	r3, r1
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	440b      	add	r3, r1
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	18c1      	adds	r1, r0, r3
 8005f32:	4613      	mov	r3, r2
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	3348      	adds	r3, #72	; 0x48
 8005f3c:	443b      	add	r3, r7
 8005f3e:	3b34      	subs	r3, #52	; 0x34
 8005f40:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	3348      	adds	r3, #72	; 0x48
 8005f56:	443b      	add	r3, r7
 8005f58:	3b34      	subs	r3, #52	; 0x34
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f60:	3301      	adds	r3, #1
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	643b      	str	r3, [r7, #64]	; 0x40
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1b6      	bne.n	8005ede <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	891b      	ldrh	r3, [r3, #8]
 8005f74:	461a      	mov	r2, r3
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <low_level_output+0x11c>)
 8005f78:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005f7a:	4a11      	ldr	r2, [pc, #68]	; (8005fc0 <low_level_output+0x11c>)
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005f82:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <low_level_output+0x11c>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005f88:	6838      	ldr	r0, [r7, #0]
 8005f8a:	f005 f851 	bl	800b030 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005f8e:	490c      	ldr	r1, [pc, #48]	; (8005fc0 <low_level_output+0x11c>)
 8005f90:	480c      	ldr	r0, [pc, #48]	; (8005fc4 <low_level_output+0x120>)
 8005f92:	f7fb fd01 	bl	8001998 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005f96:	bf00      	nop
 8005f98:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <low_level_output+0x124>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fc03 	bl	80067ac <osSemaphoreWait>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f5      	bne.n	8005f98 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005fac:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <low_level_output+0x120>)
 8005fae:	f7fb fe87 	bl	8001cc0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005fb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3748      	adds	r7, #72	; 0x48
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200056bc 	.word	0x200056bc
 8005fc4:	2000560c 	.word	0x2000560c
 8005fc8:	20005608 	.word	0x20005608

08005fcc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <low_level_input+0x2c>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4805      	ldr	r0, [pc, #20]	; (8005ffc <low_level_input+0x30>)
 8005fe8:	f7fb fd32 	bl	8001a50 <HAL_ETH_ReadData>
  }

  return p;
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20005600 	.word	0x20005600
 8005ffc:	2000560c 	.word	0x2000560c

08006000 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <ethernetif_input+0x50>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fbc7 	bl	80067ac <osSemaphoreWait>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f5      	bne.n	8006010 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006024:	68b8      	ldr	r0, [r7, #8]
 8006026:	f7ff ffd1 	bl	8005fcc <low_level_input>
 800602a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f004 ff4e 	bl	800aee4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1ea      	bne.n	8006024 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800604e:	e7df      	b.n	8006010 <ethernetif_input+0x10>
 8006050:	20005604 	.word	0x20005604

08006054 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <ethernetif_init+0x1c>
 8006062:	4b0e      	ldr	r3, [pc, #56]	; (800609c <ethernetif_init+0x48>)
 8006064:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006068:	490d      	ldr	r1, [pc, #52]	; (80060a0 <ethernetif_init+0x4c>)
 800606a:	480e      	ldr	r0, [pc, #56]	; (80060a4 <ethernetif_init+0x50>)
 800606c:	f00d fa8a 	bl	8013584 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2273      	movs	r2, #115	; 0x73
 8006074:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2274      	movs	r2, #116	; 0x74
 800607c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <ethernetif_init+0x54>)
 8006084:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a08      	ldr	r2, [pc, #32]	; (80060ac <ethernetif_init+0x58>)
 800608a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff fdd3 	bl	8005c38 <low_level_init>

  return ERR_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	080146ac 	.word	0x080146ac
 80060a0:	080146c8 	.word	0x080146c8
 80060a4:	080146d8 	.word	0x080146d8
 80060a8:	080115d1 	.word	0x080115d1
 80060ac:	08005ea5 	.word	0x08005ea5

080060b0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	4809      	ldr	r0, [pc, #36]	; (80060e4 <pbuf_free_custom+0x34>)
 80060c0:	f004 f848 	bl	800a154 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80060c4:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <pbuf_free_custom+0x38>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d107      	bne.n	80060dc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <pbuf_free_custom+0x38>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <pbuf_free_custom+0x3c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fbb6 	bl	8006848 <osSemaphoreRelease>
  }
}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	080171a8 	.word	0x080171a8
 80060e8:	20005600 	.word	0x20005600
 80060ec:	20005604 	.word	0x20005604

080060f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060f4:	f7fb f938 	bl	8001368 <HAL_GetTick>
 80060f8:	4603      	mov	r3, r0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08e      	sub	sp, #56	; 0x38
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a52      	ldr	r2, [pc, #328]	; (8006268 <HAL_ETH_MspInit+0x168>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f040 809e 	bne.w	8006260 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006124:	4b51      	ldr	r3, [pc, #324]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	4a50      	ldr	r2, [pc, #320]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800612a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800612e:	6313      	str	r3, [r2, #48]	; 0x30
 8006130:	4b4e      	ldr	r3, [pc, #312]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006138:	623b      	str	r3, [r7, #32]
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4b4b      	ldr	r3, [pc, #300]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	4a4a      	ldr	r2, [pc, #296]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006146:	6313      	str	r3, [r2, #48]	; 0x30
 8006148:	4b48      	ldr	r3, [pc, #288]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	4a44      	ldr	r2, [pc, #272]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800615a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800615e:	6313      	str	r3, [r2, #48]	; 0x30
 8006160:	4b42      	ldr	r3, [pc, #264]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800616c:	4b3f      	ldr	r3, [pc, #252]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	4a3e      	ldr	r2, [pc, #248]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006172:	f043 0304 	orr.w	r3, r3, #4
 8006176:	6313      	str	r3, [r2, #48]	; 0x30
 8006178:	4b3c      	ldr	r3, [pc, #240]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006184:	4b39      	ldr	r3, [pc, #228]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	4a38      	ldr	r2, [pc, #224]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	6313      	str	r3, [r2, #48]	; 0x30
 8006190:	4b36      	ldr	r3, [pc, #216]	; (800626c <HAL_ETH_MspInit+0x16c>)
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800619c:	4b33      	ldr	r3, [pc, #204]	; (800626c <HAL_ETH_MspInit+0x16c>)
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	4a32      	ldr	r2, [pc, #200]	; (800626c <HAL_ETH_MspInit+0x16c>)
 80061a2:	f043 0302 	orr.w	r3, r3, #2
 80061a6:	6313      	str	r3, [r2, #48]	; 0x30
 80061a8:	4b30      	ldr	r3, [pc, #192]	; (800626c <HAL_ETH_MspInit+0x16c>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80061b4:	4b2d      	ldr	r3, [pc, #180]	; (800626c <HAL_ETH_MspInit+0x16c>)
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	4a2c      	ldr	r2, [pc, #176]	; (800626c <HAL_ETH_MspInit+0x16c>)
 80061ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061be:	6313      	str	r3, [r2, #48]	; 0x30
 80061c0:	4b2a      	ldr	r3, [pc, #168]	; (800626c <HAL_ETH_MspInit+0x16c>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80061cc:	2332      	movs	r3, #50	; 0x32
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d0:	2302      	movs	r3, #2
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d8:	2303      	movs	r3, #3
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061dc:	230b      	movs	r3, #11
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e4:	4619      	mov	r1, r3
 80061e6:	4822      	ldr	r0, [pc, #136]	; (8006270 <HAL_ETH_MspInit+0x170>)
 80061e8:	f7fc fc9a 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80061ec:	2386      	movs	r3, #134	; 0x86
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f0:	2302      	movs	r3, #2
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f8:	2303      	movs	r3, #3
 80061fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061fc:	230b      	movs	r3, #11
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006204:	4619      	mov	r1, r3
 8006206:	481b      	ldr	r0, [pc, #108]	; (8006274 <HAL_ETH_MspInit+0x174>)
 8006208:	f7fc fc8a 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800620c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006212:	2302      	movs	r3, #2
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006216:	2300      	movs	r3, #0
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800621a:	2303      	movs	r3, #3
 800621c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800621e:	230b      	movs	r3, #11
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006226:	4619      	mov	r1, r3
 8006228:	4813      	ldr	r0, [pc, #76]	; (8006278 <HAL_ETH_MspInit+0x178>)
 800622a:	f7fc fc79 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800622e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006234:	2302      	movs	r3, #2
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006238:	2300      	movs	r3, #0
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800623c:	2303      	movs	r3, #3
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006240:	230b      	movs	r3, #11
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006248:	4619      	mov	r1, r3
 800624a:	480c      	ldr	r0, [pc, #48]	; (800627c <HAL_ETH_MspInit+0x17c>)
 800624c:	f7fc fc68 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006250:	2200      	movs	r2, #0
 8006252:	2105      	movs	r1, #5
 8006254:	203d      	movs	r0, #61	; 0x3d
 8006256:	f7fb f96f 	bl	8001538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800625a:	203d      	movs	r0, #61	; 0x3d
 800625c:	f7fb f988 	bl	8001570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006260:	bf00      	nop
 8006262:	3738      	adds	r7, #56	; 0x38
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40028000 	.word	0x40028000
 800626c:	40023800 	.word	0x40023800
 8006270:	40020800 	.word	0x40020800
 8006274:	40020000 	.word	0x40020000
 8006278:	40020400 	.word	0x40020400
 800627c:	40021800 	.word	0x40021800

08006280 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006284:	4802      	ldr	r0, [pc, #8]	; (8006290 <ETH_PHY_IO_Init+0x10>)
 8006286:	f7fb ffe5 	bl	8002254 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	2000560c 	.word	0x2000560c

08006294 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  return 0;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	68f9      	ldr	r1, [r7, #12]
 80062b6:	4807      	ldr	r0, [pc, #28]	; (80062d4 <ETH_PHY_IO_ReadReg+0x30>)
 80062b8:	f7fb fe34 	bl	8001f24 <HAL_ETH_ReadPHYRegister>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062c6:	e000      	b.n	80062ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000560c 	.word	0x2000560c

080062d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	68f9      	ldr	r1, [r7, #12]
 80062ea:	4807      	ldr	r0, [pc, #28]	; (8006308 <ETH_PHY_IO_WriteReg+0x30>)
 80062ec:	f7fb fe65 	bl	8001fba <HAL_ETH_WritePHYRegister>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80062f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062fa:	e000      	b.n	80062fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	2000560c 	.word	0x2000560c

0800630c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006310:	f7fb f82a 	bl	8001368 <HAL_GetTick>
 8006314:	4603      	mov	r3, r0
}
 8006316:	4618      	mov	r0, r3
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b0a0      	sub	sp, #128	; 0x80
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006324:	f107 0308 	add.w	r3, r7, #8
 8006328:	2264      	movs	r2, #100	; 0x64
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f00d f921 	bl	8013574 <memset>
  int32_t PHYLinkState = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	67fb      	str	r3, [r7, #124]	; 0x7c
 800633a:	2300      	movs	r3, #0
 800633c:	67bb      	str	r3, [r7, #120]	; 0x78
 800633e:	2300      	movs	r3, #0
 8006340:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006346:	483a      	ldr	r0, [pc, #232]	; (8006430 <ethernet_link_thread+0x114>)
 8006348:	f7fa ff65 	bl	8001216 <LAN8742_GetLinkState>
 800634c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800634e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00c      	beq.n	800637a <ethernet_link_thread+0x5e>
 8006360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006362:	2b01      	cmp	r3, #1
 8006364:	dc09      	bgt.n	800637a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006366:	4833      	ldr	r0, [pc, #204]	; (8006434 <ethernet_link_thread+0x118>)
 8006368:	f7fb fa96 	bl	8001898 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800636c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800636e:	f004 f975 	bl	800a65c <netif_set_down>
    netif_set_link_down(netif);
 8006372:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006374:	f004 f9d8 	bl	800a728 <netif_set_link_down>
 8006378:	e055      	b.n	8006426 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800637a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d14e      	bne.n	8006426 <ethernet_link_thread+0x10a>
 8006388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800638a:	2b01      	cmp	r3, #1
 800638c:	dd4b      	ble.n	8006426 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800638e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006390:	3b02      	subs	r3, #2
 8006392:	2b03      	cmp	r3, #3
 8006394:	d82a      	bhi.n	80063ec <ethernet_link_thread+0xd0>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <ethernet_link_thread+0x80>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063bf 	.word	0x080063bf
 80063a4:	080063cf 	.word	0x080063cf
 80063a8:	080063df 	.word	0x080063df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80063ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80063b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063b8:	2301      	movs	r3, #1
 80063ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063bc:	e017      	b.n	80063ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80063be:	2300      	movs	r3, #0
 80063c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80063c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063c8:	2301      	movs	r3, #1
 80063ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063cc:	e00f      	b.n	80063ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80063ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80063d4:	2300      	movs	r3, #0
 80063d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063d8:	2301      	movs	r3, #1
 80063da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063dc:	e007      	b.n	80063ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80063de:	2300      	movs	r3, #0
 80063e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80063e2:	2300      	movs	r3, #0
 80063e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063e6:	2301      	movs	r3, #1
 80063e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063ea:	e000      	b.n	80063ee <ethernet_link_thread+0xd2>
    default:
      break;
 80063ec:	bf00      	nop
    }

    if(linkchanged)
 80063ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d018      	beq.n	8006426 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80063f4:	f107 0308 	add.w	r3, r7, #8
 80063f8:	4619      	mov	r1, r3
 80063fa:	480e      	ldr	r0, [pc, #56]	; (8006434 <ethernet_link_thread+0x118>)
 80063fc:	f7fb fe26 	bl	800204c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006402:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006406:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006408:	f107 0308 	add.w	r3, r7, #8
 800640c:	4619      	mov	r1, r3
 800640e:	4809      	ldr	r0, [pc, #36]	; (8006434 <ethernet_link_thread+0x118>)
 8006410:	f7fb ff06 	bl	8002220 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006414:	4807      	ldr	r0, [pc, #28]	; (8006434 <ethernet_link_thread+0x118>)
 8006416:	f7fb f9b1 	bl	800177c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800641a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800641c:	f004 f8b2 	bl	800a584 <netif_set_up>
      netif_set_link_up(netif);
 8006420:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006422:	f004 f94d 	bl	800a6c0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006426:	2064      	movs	r0, #100	; 0x64
 8006428:	f000 f910 	bl	800664c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800642c:	e78b      	b.n	8006346 <ethernet_link_thread+0x2a>
 800642e:	bf00      	nop
 8006430:	200056f4 	.word	0x200056f4
 8006434:	2000560c 	.word	0x2000560c

08006438 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006440:	4812      	ldr	r0, [pc, #72]	; (800648c <HAL_ETH_RxAllocateCallback+0x54>)
 8006442:	f003 fe13 	bl	800a06c <memp_malloc_pool>
 8006446:	60f8      	str	r0, [r7, #12]
  if (p)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d014      	beq.n	8006478 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f103 0220 	add.w	r2, r3, #32
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a0d      	ldr	r2, [pc, #52]	; (8006490 <HAL_ETH_RxAllocateCallback+0x58>)
 800645c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006466:	9201      	str	r2, [sp, #4]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2241      	movs	r2, #65	; 0x41
 800646e:	2100      	movs	r1, #0
 8006470:	2000      	movs	r0, #0
 8006472:	f004 fb7d 	bl	800ab70 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006476:	e005      	b.n	8006484 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_ETH_RxAllocateCallback+0x5c>)
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	080171a8 	.word	0x080171a8
 8006490:	080060b1 	.word	0x080060b1
 8006494:	20005600 	.word	0x20005600

08006498 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3b20      	subs	r3, #32
 80064b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2200      	movs	r2, #0
 80064c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	887a      	ldrh	r2, [r7, #2]
 80064c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e003      	b.n	80064e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	e009      	b.n	8006504 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	891a      	ldrh	r2, [r3, #8]
 80064f4:	887b      	ldrh	r3, [r7, #2]
 80064f6:	4413      	add	r3, r2
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f2      	bne.n	80064f0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800650a:	887b      	ldrh	r3, [r7, #2]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff fb2e 	bl	8005b70 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006514:	bf00      	nop
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f004 fcdd 	bl	800aee4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	4603      	mov	r3, r0
 800653a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006544:	2b84      	cmp	r3, #132	; 0x84
 8006546:	d005      	beq.n	8006554 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006548:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	3303      	adds	r3, #3
 8006552:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006554:	68fb      	ldr	r3, [r7, #12]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006568:	f3ef 8305 	mrs	r3, IPSR
 800656c:	607b      	str	r3, [r7, #4]
  return(result);
 800656e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800658a:	f001 fc73 	bl	8007e74 <vTaskStartScheduler>
  
  return osOK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}

08006594 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006598:	f7ff ffe3 	bl	8006562 <inHandlerMode>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80065a2:	f001 fd87 	bl	80080b4 <xTaskGetTickCountFromISR>
 80065a6:	4603      	mov	r3, r0
 80065a8:	e002      	b.n	80065b0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80065aa:	f001 fd73 	bl	8008094 <xTaskGetTickCount>
 80065ae:	4603      	mov	r3, r0
  }
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80065b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b6:	b089      	sub	sp, #36	; 0x24
 80065b8:	af04      	add	r7, sp, #16
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d020      	beq.n	8006608 <osThreadCreate+0x54>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01c      	beq.n	8006608 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685c      	ldr	r4, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691e      	ldr	r6, [r3, #16]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff ffa6 	bl	8006532 <makeFreeRtosPriority>
 80065e6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065f0:	9202      	str	r2, [sp, #8]
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	9100      	str	r1, [sp, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	4632      	mov	r2, r6
 80065fa:	4629      	mov	r1, r5
 80065fc:	4620      	mov	r0, r4
 80065fe:	f001 fa67 	bl	8007ad0 <xTaskCreateStatic>
 8006602:	4603      	mov	r3, r0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e01c      	b.n	8006642 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685c      	ldr	r4, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006614:	b29e      	uxth	r6, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff ff88 	bl	8006532 <makeFreeRtosPriority>
 8006622:	4602      	mov	r2, r0
 8006624:	f107 030c 	add.w	r3, r7, #12
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	9200      	str	r2, [sp, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	4632      	mov	r2, r6
 8006630:	4629      	mov	r1, r5
 8006632:	4620      	mov	r0, r4
 8006634:	f001 faaf 	bl	8007b96 <xTaskCreate>
 8006638:	4603      	mov	r3, r0
 800663a:	2b01      	cmp	r3, #1
 800663c:	d001      	beq.n	8006642 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006642:	68fb      	ldr	r3, [r7, #12]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800664c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <osDelay+0x16>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	e000      	b.n	8006664 <osDelay+0x18>
 8006662:	2301      	movs	r3, #1
 8006664:	4618      	mov	r0, r3
 8006666:	f001 fbcf 	bl	8007e08 <vTaskDelay>
  
  return osOK;
 800666a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4619      	mov	r1, r3
 800668a:	2001      	movs	r0, #1
 800668c:	f000 fc21 	bl	8006ed2 <xQueueCreateMutexStatic>
 8006690:	4603      	mov	r3, r0
 8006692:	e003      	b.n	800669c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006694:	2001      	movs	r0, #1
 8006696:	f000 fc04 	bl	8006ea2 <xQueueCreateMutex>
 800669a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <osMutexWait+0x18>
    return osErrorParameter;
 80066b8:	2380      	movs	r3, #128	; 0x80
 80066ba:	e03a      	b.n	8006732 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c6:	d103      	bne.n	80066d0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	e009      	b.n	80066e4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d006      	beq.n	80066e4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <osMutexWait+0x40>
      ticks = 1;
 80066e0:	2301      	movs	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80066e4:	f7ff ff3d 	bl	8006562 <inHandlerMode>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d017      	beq.n	800671e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80066ee:	f107 0308 	add.w	r3, r7, #8
 80066f2:	461a      	mov	r2, r3
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 f83c 	bl	8007774 <xQueueReceiveFromISR>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <osMutexWait+0x62>
      return osErrorOS;
 8006702:	23ff      	movs	r3, #255	; 0xff
 8006704:	e015      	b.n	8006732 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d011      	beq.n	8006730 <osMutexWait+0x8c>
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <osMutexWait+0x98>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	e008      	b.n	8006730 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 ff13 	bl	800754c <xQueueSemaphoreTake>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d001      	beq.n	8006730 <osMutexWait+0x8c>
    return osErrorOS;
 800672c:	23ff      	movs	r3, #255	; 0xff
 800672e:	e000      	b.n	8006732 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006750:	f7ff ff07 	bl	8006562 <inHandlerMode>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d016      	beq.n	8006788 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fd77 	bl	8007254 <xQueueGiveFromISR>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d001      	beq.n	8006770 <osMutexRelease+0x30>
      return osErrorOS;
 800676c:	23ff      	movs	r3, #255	; 0xff
 800676e:	e017      	b.n	80067a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d013      	beq.n	800679e <osMutexRelease+0x5e>
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <osMutexRelease+0x68>)
 8006778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	e00a      	b.n	800679e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006788:	2300      	movs	r3, #0
 800678a:	2200      	movs	r2, #0
 800678c:	2100      	movs	r1, #0
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fbba 	bl	8006f08 <xQueueGenericSend>
 8006794:	4603      	mov	r3, r0
 8006796:	2b01      	cmp	r3, #1
 8006798:	d001      	beq.n	800679e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800679a:	23ff      	movs	r3, #255	; 0xff
 800679c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80067c0:	2380      	movs	r3, #128	; 0x80
 80067c2:	e03a      	b.n	800683a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ce:	d103      	bne.n	80067d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80067d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	e009      	b.n	80067ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d006      	beq.n	80067ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <osSemaphoreWait+0x40>
      ticks = 1;
 80067e8:	2301      	movs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80067ec:	f7ff feb9 	bl	8006562 <inHandlerMode>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d017      	beq.n	8006826 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80067f6:	f107 0308 	add.w	r3, r7, #8
 80067fa:	461a      	mov	r2, r3
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 ffb8 	bl	8007774 <xQueueReceiveFromISR>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <osSemaphoreWait+0x62>
      return osErrorOS;
 800680a:	23ff      	movs	r3, #255	; 0xff
 800680c:	e015      	b.n	800683a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d011      	beq.n	8006838 <osSemaphoreWait+0x8c>
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <osSemaphoreWait+0x98>)
 8006816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	e008      	b.n	8006838 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006826:	68f9      	ldr	r1, [r7, #12]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fe8f 	bl	800754c <xQueueSemaphoreTake>
 800682e:	4603      	mov	r3, r0
 8006830:	2b01      	cmp	r3, #1
 8006832:	d001      	beq.n	8006838 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006834:	23ff      	movs	r3, #255	; 0xff
 8006836:	e000      	b.n	800683a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006858:	f7ff fe83 	bl	8006562 <inHandlerMode>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fcf3 	bl	8007254 <xQueueGiveFromISR>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d001      	beq.n	8006878 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006874:	23ff      	movs	r3, #255	; 0xff
 8006876:	e017      	b.n	80068a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d013      	beq.n	80068a6 <osSemaphoreRelease+0x5e>
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <osSemaphoreRelease+0x68>)
 8006880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	e00a      	b.n	80068a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fb36 	bl	8006f08 <xQueueGenericSend>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d001      	beq.n	80068a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80068a2:	23ff      	movs	r3, #255	; 0xff
 80068a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d011      	beq.n	80068ea <osMessageCreate+0x36>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6859      	ldr	r1, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2400      	movs	r4, #0
 80068e0:	9400      	str	r4, [sp, #0]
 80068e2:	f000 f9e1 	bl	8006ca8 <xQueueGenericCreateStatic>
 80068e6:	4603      	mov	r3, r0
 80068e8:	e008      	b.n	80068fc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	4619      	mov	r1, r3
 80068f6:	f000 fa59 	bl	8006dac <xQueueGenericCreate>
 80068fa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	bd90      	pop	{r4, r7, pc}

08006904 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <osMessagePut+0x1e>
    ticks = 1;
 800691e:	2301      	movs	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006922:	f7ff fe1e 	bl	8006562 <inHandlerMode>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d018      	beq.n	800695e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800692c:	f107 0210 	add.w	r2, r7, #16
 8006930:	f107 0108 	add.w	r1, r7, #8
 8006934:	2300      	movs	r3, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fbec 	bl	8007114 <xQueueGenericSendFromISR>
 800693c:	4603      	mov	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d001      	beq.n	8006946 <osMessagePut+0x42>
      return osErrorOS;
 8006942:	23ff      	movs	r3, #255	; 0xff
 8006944:	e018      	b.n	8006978 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d014      	beq.n	8006976 <osMessagePut+0x72>
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <osMessagePut+0x7c>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	e00b      	b.n	8006976 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800695e:	f107 0108 	add.w	r1, r7, #8
 8006962:	2300      	movs	r3, #0
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 face 	bl	8006f08 <xQueueGenericSend>
 800696c:	4603      	mov	r3, r0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d001      	beq.n	8006976 <osMessagePut+0x72>
      return osErrorOS;
 8006972:	23ff      	movs	r3, #255	; 0xff
 8006974:	e000      	b.n	8006978 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b08b      	sub	sp, #44	; 0x2c
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800699e:	2380      	movs	r3, #128	; 0x80
 80069a0:	617b      	str	r3, [r7, #20]
    return event;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	461c      	mov	r4, r3
 80069a6:	f107 0314 	add.w	r3, r7, #20
 80069aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80069b2:	e054      	b.n	8006a5e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c2:	d103      	bne.n	80069cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ca:	e009      	b.n	80069e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <osMessageGet+0x5c>
      ticks = 1;
 80069dc:	2301      	movs	r3, #1
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80069e0:	f7ff fdbf 	bl	8006562 <inHandlerMode>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01c      	beq.n	8006a24 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80069ea:	f107 0220 	add.w	r2, r7, #32
 80069ee:	f107 0314 	add.w	r3, r7, #20
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f000 febc 	bl	8007774 <xQueueReceiveFromISR>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d102      	bne.n	8006a08 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006a02:	2310      	movs	r3, #16
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e001      	b.n	8006a0c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01d      	beq.n	8006a4e <osMessageGet+0xca>
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <osMessageGet+0xe4>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	e014      	b.n	8006a4e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	3304      	adds	r3, #4
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	68b8      	ldr	r0, [r7, #8]
 8006a30:	f000 fca6 	bl	8007380 <xQueueReceive>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d102      	bne.n	8006a40 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e006      	b.n	8006a4e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <osMessageGet+0xc6>
 8006a46:	2300      	movs	r3, #0
 8006a48:	e000      	b.n	8006a4c <osMessageGet+0xc8>
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	461c      	mov	r4, r3
 8006a52:	f107 0314 	add.w	r3, r7, #20
 8006a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	372c      	adds	r7, #44	; 0x2c
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd90      	pop	{r4, r7, pc}
 8006a66:	bf00      	nop
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f103 0208 	add.w	r2, r3, #8
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f103 0208 	add.w	r2, r3, #8
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f103 0208 	add.w	r2, r3, #8
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	601a      	str	r2, [r3, #0]
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b085      	sub	sp, #20
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b24:	d103      	bne.n	8006b2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e00c      	b.n	8006b48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3308      	adds	r3, #8
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	e002      	b.n	8006b3c <vListInsert+0x2e>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d2f6      	bcs.n	8006b36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6892      	ldr	r2, [r2, #8]
 8006b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6852      	ldr	r2, [r2, #4]
 8006ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d103      	bne.n	8006bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	1e5a      	subs	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10c      	bne.n	8006c02 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	b672      	cpsid	i
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	b662      	cpsie	i
 8006bfc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006c02:	f002 f8bb 	bl	8008d7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	441a      	add	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	3b01      	subs	r3, #1
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	; 0xff
 8006c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	22ff      	movs	r2, #255	; 0xff
 8006c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d114      	bne.n	8006c82 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01a      	beq.n	8006c96 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3310      	adds	r3, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fb75 	bl	8008354 <xTaskRemoveFromEventList>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d012      	beq.n	8006c96 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c70:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <xQueueGenericReset+0xd0>)
 8006c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	e009      	b.n	8006c96 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3310      	adds	r3, #16
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff fef0 	bl	8006a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3324      	adds	r3, #36	; 0x24
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff feeb 	bl	8006a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c96:	f002 f8a5 	bl	8008de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c9a:	2301      	movs	r3, #1
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	e000ed04 	.word	0xe000ed04

08006ca8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08e      	sub	sp, #56	; 0x38
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10c      	bne.n	8006cd6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	b672      	cpsid	i
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	b662      	cpsie	i
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10c      	bne.n	8006cf6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	b672      	cpsid	i
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	b662      	cpsie	i
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <xQueueGenericCreateStatic+0x5a>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <xQueueGenericCreateStatic+0x5e>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <xQueueGenericCreateStatic+0x60>
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10c      	bne.n	8006d26 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	b672      	cpsid	i
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	b662      	cpsie	i
 8006d20:	623b      	str	r3, [r7, #32]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <xQueueGenericCreateStatic+0x8a>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <xQueueGenericCreateStatic+0x8e>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGenericCreateStatic+0x90>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10c      	bne.n	8006d56 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	b672      	cpsid	i
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	b662      	cpsie	i
 8006d50:	61fb      	str	r3, [r7, #28]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d56:	2348      	movs	r3, #72	; 0x48
 8006d58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b48      	cmp	r3, #72	; 0x48
 8006d5e:	d00c      	beq.n	8006d7a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	b672      	cpsid	i
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	b662      	cpsie	i
 8006d74:	61bb      	str	r3, [r7, #24]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4613      	mov	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f847 	bl	8006e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10c      	bne.n	8006dda <xQueueGenericCreate+0x2e>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	b672      	cpsid	i
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	b662      	cpsie	i
 8006dd4:	613b      	str	r3, [r7, #16]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	e004      	b.n	8006df0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	3348      	adds	r3, #72	; 0x48
 8006df4:	4618      	mov	r0, r3
 8006df6:	f002 f8ed 	bl	8008fd4 <pvPortMalloc>
 8006dfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d011      	beq.n	8006e26 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	3348      	adds	r3, #72	; 0x48
 8006e0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e14:	79fa      	ldrb	r2, [r7, #7]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f805 	bl	8006e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e26:	69bb      	ldr	r3, [r7, #24]
	}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e002      	b.n	8006e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e5e:	2101      	movs	r1, #1
 8006e60:	69b8      	ldr	r0, [r7, #24]
 8006e62:	f7ff feb7 	bl	8006bd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00e      	beq.n	8006e9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f837 	bl	8006f08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006eac:	2301      	movs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6939      	ldr	r1, [r7, #16]
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f7ff ff76 	bl	8006dac <xQueueGenericCreate>
 8006ec0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff ffd3 	bl	8006e6e <prvInitialiseMutex>

		return xNewQueue;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b088      	sub	sp, #32
 8006ed6:	af02      	add	r7, sp, #8
 8006ed8:	4603      	mov	r3, r0
 8006eda:	6039      	str	r1, [r7, #0]
 8006edc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2200      	movs	r2, #0
 8006eee:	6939      	ldr	r1, [r7, #16]
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f7ff fed9 	bl	8006ca8 <xQueueGenericCreateStatic>
 8006ef6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ffb8 	bl	8006e6e <prvInitialiseMutex>

		return xNewQueue;
 8006efe:	68fb      	ldr	r3, [r7, #12]
	}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08e      	sub	sp, #56	; 0x38
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f16:	2300      	movs	r3, #0
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10c      	bne.n	8006f3e <xQueueGenericSend+0x36>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	b672      	cpsid	i
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	b662      	cpsie	i
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d103      	bne.n	8006f4c <xQueueGenericSend+0x44>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <xQueueGenericSend+0x48>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <xQueueGenericSend+0x4a>
 8006f50:	2300      	movs	r3, #0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10c      	bne.n	8006f70 <xQueueGenericSend+0x68>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	b672      	cpsid	i
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	b662      	cpsie	i
 8006f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d103      	bne.n	8006f7e <xQueueGenericSend+0x76>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <xQueueGenericSend+0x7a>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <xQueueGenericSend+0x7c>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10c      	bne.n	8006fa2 <xQueueGenericSend+0x9a>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	b672      	cpsid	i
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	b662      	cpsie	i
 8006f9c:	623b      	str	r3, [r7, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fa2:	f001 fb9b 	bl	80086dc <xTaskGetSchedulerState>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d102      	bne.n	8006fb2 <xQueueGenericSend+0xaa>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <xQueueGenericSend+0xae>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <xQueueGenericSend+0xb0>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10c      	bne.n	8006fd6 <xQueueGenericSend+0xce>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	b672      	cpsid	i
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	b662      	cpsie	i
 8006fd0:	61fb      	str	r3, [r7, #28]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fd6:	f001 fed1 	bl	8008d7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d302      	bcc.n	8006fec <xQueueGenericSend+0xe4>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d129      	bne.n	8007040 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff2:	f000 fc5d 	bl	80078b0 <prvCopyDataToQueue>
 8006ff6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	3324      	adds	r3, #36	; 0x24
 8007004:	4618      	mov	r0, r3
 8007006:	f001 f9a5 	bl	8008354 <xTaskRemoveFromEventList>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d013      	beq.n	8007038 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007010:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <xQueueGenericSend+0x208>)
 8007012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	e00a      	b.n	8007038 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007028:	4b39      	ldr	r3, [pc, #228]	; (8007110 <xQueueGenericSend+0x208>)
 800702a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007038:	f001 fed4 	bl	8008de4 <vPortExitCritical>
				return pdPASS;
 800703c:	2301      	movs	r3, #1
 800703e:	e063      	b.n	8007108 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d103      	bne.n	800704e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007046:	f001 fecd 	bl	8008de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800704a:	2300      	movs	r3, #0
 800704c:	e05c      	b.n	8007108 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007054:	f107 0314 	add.w	r3, r7, #20
 8007058:	4618      	mov	r0, r3
 800705a:	f001 f9df 	bl	800841c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800705e:	2301      	movs	r3, #1
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007062:	f001 febf 	bl	8008de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007066:	f000 ff69 	bl	8007f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800706a:	f001 fe87 	bl	8008d7c <vPortEnterCritical>
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007074:	b25b      	sxtb	r3, r3
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800707a:	d103      	bne.n	8007084 <xQueueGenericSend+0x17c>
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800708a:	b25b      	sxtb	r3, r3
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007090:	d103      	bne.n	800709a <xQueueGenericSend+0x192>
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800709a:	f001 fea3 	bl	8008de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800709e:	1d3a      	adds	r2, r7, #4
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f001 f9ce 	bl	8008448 <xTaskCheckForTimeOut>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d124      	bne.n	80070fc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070b4:	f000 fcf4 	bl	8007aa0 <prvIsQueueFull>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d018      	beq.n	80070f0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	3310      	adds	r3, #16
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 f91e 	bl	8008308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ce:	f000 fc7f 	bl	80079d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070d2:	f000 ff41 	bl	8007f58 <xTaskResumeAll>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f47f af7c 	bne.w	8006fd6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <xQueueGenericSend+0x208>)
 80070e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	e772      	b.n	8006fd6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070f2:	f000 fc6d 	bl	80079d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070f6:	f000 ff2f 	bl	8007f58 <xTaskResumeAll>
 80070fa:	e76c      	b.n	8006fd6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070fe:	f000 fc67 	bl	80079d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007102:	f000 ff29 	bl	8007f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007108:	4618      	mov	r0, r3
 800710a:	3738      	adds	r7, #56	; 0x38
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08e      	sub	sp, #56	; 0x38
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10c      	bne.n	8007146 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	b672      	cpsid	i
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	b662      	cpsie	i
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <xQueueGenericSendFromISR+0x40>
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <xQueueGenericSendFromISR+0x44>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <xQueueGenericSendFromISR+0x46>
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10c      	bne.n	8007178 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	b672      	cpsid	i
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	b662      	cpsie	i
 8007172:	623b      	str	r3, [r7, #32]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d103      	bne.n	8007186 <xQueueGenericSendFromISR+0x72>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <xQueueGenericSendFromISR+0x76>
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <xQueueGenericSendFromISR+0x78>
 800718a:	2300      	movs	r3, #0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10c      	bne.n	80071aa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	b672      	cpsid	i
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	b662      	cpsie	i
 80071a4:	61fb      	str	r3, [r7, #28]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071aa:	f001 fecf 	bl	8008f4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071ae:	f3ef 8211 	mrs	r2, BASEPRI
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	61ba      	str	r2, [r7, #24]
 80071c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d302      	bcc.n	80071e0 <xQueueGenericSendFromISR+0xcc>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d12c      	bne.n	800723a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071f0:	f000 fb5e 	bl	80078b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071fc:	d112      	bne.n	8007224 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f001 f8a2 	bl	8008354 <xTaskRemoveFromEventList>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00e      	beq.n	8007234 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e007      	b.n	8007234 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007224:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007228:	3301      	adds	r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	b25a      	sxtb	r2, r3
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007234:	2301      	movs	r3, #1
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007238:	e001      	b.n	800723e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800723a:	2300      	movs	r3, #0
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007248:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800724c:	4618      	mov	r0, r3
 800724e:	3738      	adds	r7, #56	; 0x38
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08e      	sub	sp, #56	; 0x38
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10c      	bne.n	8007282 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	b672      	cpsid	i
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	b662      	cpsie	i
 800727c:	623b      	str	r3, [r7, #32]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00c      	beq.n	80072a4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	b672      	cpsid	i
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	b662      	cpsie	i
 800729e:	61fb      	str	r3, [r7, #28]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <xQueueGiveFromISR+0x60>
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <xQueueGiveFromISR+0x64>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <xQueueGiveFromISR+0x66>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10c      	bne.n	80072d8 <xQueueGiveFromISR+0x84>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	b672      	cpsid	i
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	b662      	cpsie	i
 80072d2:	61bb      	str	r3, [r7, #24]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072d8:	f001 fe38 	bl	8008f4c <vPortValidateInterruptPriority>
	__asm volatile
 80072dc:	f3ef 8211 	mrs	r2, BASEPRI
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	b672      	cpsid	i
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	b662      	cpsie	i
 80072f4:	617a      	str	r2, [r7, #20]
 80072f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80072f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007308:	429a      	cmp	r2, r3
 800730a:	d22b      	bcs.n	8007364 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800731e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007326:	d112      	bne.n	800734e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d016      	beq.n	800735e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	3324      	adds	r3, #36	; 0x24
 8007334:	4618      	mov	r0, r3
 8007336:	f001 f80d 	bl	8008354 <xTaskRemoveFromEventList>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00e      	beq.n	800735e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2201      	movs	r2, #1
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	e007      	b.n	800735e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800734e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007352:	3301      	adds	r3, #1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	b25a      	sxtb	r2, r3
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800735e:	2301      	movs	r3, #1
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	e001      	b.n	8007368 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007364:	2300      	movs	r3, #0
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f383 8811 	msr	BASEPRI, r3
}
 8007372:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007376:	4618      	mov	r0, r3
 8007378:	3738      	adds	r7, #56	; 0x38
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08c      	sub	sp, #48	; 0x30
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800738c:	2300      	movs	r3, #0
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10c      	bne.n	80073b4 <xQueueReceive+0x34>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	b672      	cpsid	i
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	b662      	cpsie	i
 80073ae:	623b      	str	r3, [r7, #32]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <xQueueReceive+0x42>
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <xQueueReceive+0x46>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <xQueueReceive+0x48>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <xQueueReceive+0x66>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	61fb      	str	r3, [r7, #28]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073e6:	f001 f979 	bl	80086dc <xTaskGetSchedulerState>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <xQueueReceive+0x76>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <xQueueReceive+0x7a>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <xQueueReceive+0x7c>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10c      	bne.n	800741a <xQueueReceive+0x9a>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	b672      	cpsid	i
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	b662      	cpsie	i
 8007414:	61bb      	str	r3, [r7, #24]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800741a:	f001 fcaf 	bl	8008d7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01f      	beq.n	800746a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800742e:	f000 faa9 	bl	8007984 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	1e5a      	subs	r2, r3, #1
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00f      	beq.n	8007462 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	3310      	adds	r3, #16
 8007446:	4618      	mov	r0, r3
 8007448:	f000 ff84 	bl	8008354 <xTaskRemoveFromEventList>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007452:	4b3d      	ldr	r3, [pc, #244]	; (8007548 <xQueueReceive+0x1c8>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007462:	f001 fcbf 	bl	8008de4 <vPortExitCritical>
				return pdPASS;
 8007466:	2301      	movs	r3, #1
 8007468:	e069      	b.n	800753e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007470:	f001 fcb8 	bl	8008de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007474:	2300      	movs	r3, #0
 8007476:	e062      	b.n	800753e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800747e:	f107 0310 	add.w	r3, r7, #16
 8007482:	4618      	mov	r0, r3
 8007484:	f000 ffca 	bl	800841c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800748c:	f001 fcaa 	bl	8008de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007490:	f000 fd54 	bl	8007f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007494:	f001 fc72 	bl	8008d7c <vPortEnterCritical>
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800749e:	b25b      	sxtb	r3, r3
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a4:	d103      	bne.n	80074ae <xQueueReceive+0x12e>
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ba:	d103      	bne.n	80074c4 <xQueueReceive+0x144>
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c4:	f001 fc8e 	bl	8008de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074c8:	1d3a      	adds	r2, r7, #4
 80074ca:	f107 0310 	add.w	r3, r7, #16
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 ffb9 	bl	8008448 <xTaskCheckForTimeOut>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d123      	bne.n	8007524 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074de:	f000 fac9 	bl	8007a74 <prvIsQueueEmpty>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d017      	beq.n	8007518 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 ff09 	bl	8008308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f8:	f000 fa6a 	bl	80079d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074fc:	f000 fd2c 	bl	8007f58 <xTaskResumeAll>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d189      	bne.n	800741a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007506:	4b10      	ldr	r3, [pc, #64]	; (8007548 <xQueueReceive+0x1c8>)
 8007508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	e780      	b.n	800741a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800751a:	f000 fa59 	bl	80079d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800751e:	f000 fd1b 	bl	8007f58 <xTaskResumeAll>
 8007522:	e77a      	b.n	800741a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007526:	f000 fa53 	bl	80079d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800752a:	f000 fd15 	bl	8007f58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800752e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007530:	f000 faa0 	bl	8007a74 <prvIsQueueEmpty>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	f43f af6f 	beq.w	800741a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800753c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800753e:	4618      	mov	r0, r3
 8007540:	3730      	adds	r7, #48	; 0x30
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08e      	sub	sp, #56	; 0x38
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10c      	bne.n	8007582 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	b672      	cpsid	i
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	b662      	cpsie	i
 800757c:	623b      	str	r3, [r7, #32]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00c      	beq.n	80075a4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	b672      	cpsid	i
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	b662      	cpsie	i
 800759e:	61fb      	str	r3, [r7, #28]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075a4:	f001 f89a 	bl	80086dc <xTaskGetSchedulerState>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <xQueueSemaphoreTake+0x68>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <xQueueSemaphoreTake+0x6c>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <xQueueSemaphoreTake+0x6e>
 80075b8:	2300      	movs	r3, #0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10c      	bne.n	80075d8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	b672      	cpsid	i
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	b662      	cpsie	i
 80075d2:	61bb      	str	r3, [r7, #24]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075d8:	f001 fbd0 	bl	8008d7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d024      	beq.n	8007632 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80075f8:	f001 fa36 	bl	8008a68 <pvTaskIncrementMutexHeldCount>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00f      	beq.n	800762a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	3310      	adds	r3, #16
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fea0 	bl	8008354 <xTaskRemoveFromEventList>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800761a:	4b55      	ldr	r3, [pc, #340]	; (8007770 <xQueueSemaphoreTake+0x224>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800762a:	f001 fbdb 	bl	8008de4 <vPortExitCritical>
				return pdPASS;
 800762e:	2301      	movs	r3, #1
 8007630:	e099      	b.n	8007766 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d113      	bne.n	8007660 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00c      	beq.n	8007658 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	617b      	str	r3, [r7, #20]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007658:	f001 fbc4 	bl	8008de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800765c:	2300      	movs	r3, #0
 800765e:	e082      	b.n	8007766 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007662:	2b00      	cmp	r3, #0
 8007664:	d106      	bne.n	8007674 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007666:	f107 030c 	add.w	r3, r7, #12
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fed6 	bl	800841c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007674:	f001 fbb6 	bl	8008de4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007678:	f000 fc60 	bl	8007f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800767c:	f001 fb7e 	bl	8008d7c <vPortEnterCritical>
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007686:	b25b      	sxtb	r3, r3
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800768c:	d103      	bne.n	8007696 <xQueueSemaphoreTake+0x14a>
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800769c:	b25b      	sxtb	r3, r3
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a2:	d103      	bne.n	80076ac <xQueueSemaphoreTake+0x160>
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076ac:	f001 fb9a 	bl	8008de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076b0:	463a      	mov	r2, r7
 80076b2:	f107 030c 	add.w	r3, r7, #12
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fec5 	bl	8008448 <xTaskCheckForTimeOut>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d132      	bne.n	800772a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076c6:	f000 f9d5 	bl	8007a74 <prvIsQueueEmpty>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d026      	beq.n	800771e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d109      	bne.n	80076ec <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80076d8:	f001 fb50 	bl	8008d7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 f819 	bl	8008718 <xTaskPriorityInherit>
 80076e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80076e8:	f001 fb7c 	bl	8008de4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	3324      	adds	r3, #36	; 0x24
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fe07 	bl	8008308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076fc:	f000 f968 	bl	80079d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007700:	f000 fc2a 	bl	8007f58 <xTaskResumeAll>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	f47f af66 	bne.w	80075d8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800770c:	4b18      	ldr	r3, [pc, #96]	; (8007770 <xQueueSemaphoreTake+0x224>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	e75c      	b.n	80075d8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800771e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007720:	f000 f956 	bl	80079d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007724:	f000 fc18 	bl	8007f58 <xTaskResumeAll>
 8007728:	e756      	b.n	80075d8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800772a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800772c:	f000 f950 	bl	80079d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007730:	f000 fc12 	bl	8007f58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007736:	f000 f99d 	bl	8007a74 <prvIsQueueEmpty>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	f43f af4b 	beq.w	80075d8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00d      	beq.n	8007764 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007748:	f001 fb18 	bl	8008d7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800774c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800774e:	f000 f897 	bl	8007880 <prvGetDisinheritPriorityAfterTimeout>
 8007752:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f8e6 	bl	800892c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007760:	f001 fb40 	bl	8008de4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007766:	4618      	mov	r0, r3
 8007768:	3738      	adds	r7, #56	; 0x38
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08e      	sub	sp, #56	; 0x38
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10c      	bne.n	80077a4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	b672      	cpsid	i
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	b662      	cpsie	i
 800779e:	623b      	str	r3, [r7, #32]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <xQueueReceiveFromISR+0x3e>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <xQueueReceiveFromISR+0x42>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <xQueueReceiveFromISR+0x44>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10c      	bne.n	80077d6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	b672      	cpsid	i
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	b662      	cpsie	i
 80077d0:	61fb      	str	r3, [r7, #28]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077d6:	f001 fbb9 	bl	8008f4c <vPortValidateInterruptPriority>
	__asm volatile
 80077da:	f3ef 8211 	mrs	r2, BASEPRI
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	b672      	cpsid	i
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	b662      	cpsie	i
 80077f2:	61ba      	str	r2, [r7, #24]
 80077f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80077f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d02f      	beq.n	8007866 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800780c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007814:	f000 f8b6 	bl	8007984 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	1e5a      	subs	r2, r3, #1
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007828:	d112      	bne.n	8007850 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d016      	beq.n	8007860 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	3310      	adds	r3, #16
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fd8c 	bl	8008354 <xTaskRemoveFromEventList>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00e      	beq.n	8007860 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	e007      	b.n	8007860 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007854:	3301      	adds	r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	b25a      	sxtb	r2, r3
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007860:	2301      	movs	r3, #1
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
 8007864:	e001      	b.n	800786a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007866:	2300      	movs	r3, #0
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f383 8811 	msr	BASEPRI, r3
}
 8007874:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007878:	4618      	mov	r0, r3
 800787a:	3738      	adds	r7, #56	; 0x38
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	d006      	beq.n	800789e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1c3 0307 	rsb	r3, r3, #7
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e001      	b.n	80078a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80078a2:	68fb      	ldr	r3, [r7, #12]
	}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10d      	bne.n	80078ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d14d      	bne.n	8007972 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 ff9c 	bl	8008818 <xTaskPriorityDisinherit>
 80078e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	e043      	b.n	8007972 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d119      	bne.n	8007924 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6858      	ldr	r0, [r3, #4]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	461a      	mov	r2, r3
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	f00b fe2c 	bl	8013558 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	441a      	add	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	429a      	cmp	r2, r3
 8007918:	d32b      	bcc.n	8007972 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	605a      	str	r2, [r3, #4]
 8007922:	e026      	b.n	8007972 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	68d8      	ldr	r0, [r3, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	461a      	mov	r2, r3
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	f00b fe12 	bl	8013558 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	425b      	negs	r3, r3
 800793e:	441a      	add	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d207      	bcs.n	8007960 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	425b      	negs	r3, r3
 800795a:	441a      	add	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d105      	bne.n	8007972 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	3b01      	subs	r3, #1
 8007970:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800797a:	697b      	ldr	r3, [r7, #20]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	d018      	beq.n	80079c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	441a      	add	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d303      	bcc.n	80079b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68d9      	ldr	r1, [r3, #12]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	461a      	mov	r2, r3
 80079c2:	6838      	ldr	r0, [r7, #0]
 80079c4:	f00b fdc8 	bl	8013558 <memcpy>
	}
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079d8:	f001 f9d0 	bl	8008d7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079e4:	e011      	b.n	8007a0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d012      	beq.n	8007a14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3324      	adds	r3, #36	; 0x24
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fcae 	bl	8008354 <xTaskRemoveFromEventList>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079fe:	f000 fd89 	bl	8008514 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dce9      	bgt.n	80079e6 <prvUnlockQueue+0x16>
 8007a12:	e000      	b.n	8007a16 <prvUnlockQueue+0x46>
					break;
 8007a14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	22ff      	movs	r2, #255	; 0xff
 8007a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a1e:	f001 f9e1 	bl	8008de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a22:	f001 f9ab 	bl	8008d7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a2e:	e011      	b.n	8007a54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d012      	beq.n	8007a5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fc89 	bl	8008354 <xTaskRemoveFromEventList>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a48:	f000 fd64 	bl	8008514 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	dce9      	bgt.n	8007a30 <prvUnlockQueue+0x60>
 8007a5c:	e000      	b.n	8007a60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	22ff      	movs	r2, #255	; 0xff
 8007a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a68:	f001 f9bc 	bl	8008de4 <vPortExitCritical>
}
 8007a6c:	bf00      	nop
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a7c:	f001 f97e 	bl	8008d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d102      	bne.n	8007a8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e001      	b.n	8007a92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a92:	f001 f9a7 	bl	8008de4 <vPortExitCritical>

	return xReturn;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007aa8:	f001 f968 	bl	8008d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d102      	bne.n	8007abe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	e001      	b.n	8007ac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ac2:	f001 f98f 	bl	8008de4 <vPortExitCritical>

	return xReturn;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08e      	sub	sp, #56	; 0x38
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10c      	bne.n	8007afe <xTaskCreateStatic+0x2e>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	b672      	cpsid	i
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	b662      	cpsie	i
 8007af8:	623b      	str	r3, [r7, #32]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10c      	bne.n	8007b1e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	b672      	cpsid	i
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	b662      	cpsie	i
 8007b18:	61fb      	str	r3, [r7, #28]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b1e:	2354      	movs	r3, #84	; 0x54
 8007b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b54      	cmp	r3, #84	; 0x54
 8007b26:	d00c      	beq.n	8007b42 <xTaskCreateStatic+0x72>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	b672      	cpsid	i
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	b662      	cpsie	i
 8007b3c:	61bb      	str	r3, [r7, #24]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d01e      	beq.n	8007b88 <xTaskCreateStatic+0xb8>
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01b      	beq.n	8007b88 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b62:	2300      	movs	r3, #0
 8007b64:	9303      	str	r3, [sp, #12]
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	9302      	str	r3, [sp, #8]
 8007b6a:	f107 0314 	add.w	r3, r7, #20
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	68b9      	ldr	r1, [r7, #8]
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f850 	bl	8007c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b82:	f000 f8d7 	bl	8007d34 <prvAddNewTaskToReadyList>
 8007b86:	e001      	b.n	8007b8c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b8c:	697b      	ldr	r3, [r7, #20]
	}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3728      	adds	r7, #40	; 0x28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b08c      	sub	sp, #48	; 0x30
 8007b9a:	af04      	add	r7, sp, #16
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 fa12 	bl	8008fd4 <pvPortMalloc>
 8007bb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00e      	beq.n	8007bd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bb8:	2054      	movs	r0, #84	; 0x54
 8007bba:	f001 fa0b 	bl	8008fd4 <pvPortMalloc>
 8007bbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
 8007bcc:	e005      	b.n	8007bda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bce:	6978      	ldr	r0, [r7, #20]
 8007bd0:	f001 faca 	bl	8009168 <vPortFree>
 8007bd4:	e001      	b.n	8007bda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d017      	beq.n	8007c10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	2300      	movs	r3, #0
 8007bec:	9303      	str	r3, [sp, #12]
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	9302      	str	r3, [sp, #8]
 8007bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 f80e 	bl	8007c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c04:	69f8      	ldr	r0, [r7, #28]
 8007c06:	f000 f895 	bl	8007d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	61bb      	str	r3, [r7, #24]
 8007c0e:	e002      	b.n	8007c16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c16:	69bb      	ldr	r3, [r7, #24]
	}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c38:	440b      	add	r3, r1
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00c      	beq.n	8007c6c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	b672      	cpsid	i
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	b662      	cpsie	i
 8007c66:	617b      	str	r3, [r7, #20]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01f      	beq.n	8007cb2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	e012      	b.n	8007c9e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	7819      	ldrb	r1, [r3, #0]
 8007c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	3334      	adds	r3, #52	; 0x34
 8007c88:	460a      	mov	r2, r1
 8007c8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	4413      	add	r3, r2
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	61fb      	str	r3, [r7, #28]
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	2b0f      	cmp	r3, #15
 8007ca2:	d9e9      	bls.n	8007c78 <prvInitialiseNewTask+0x58>
 8007ca4:	e000      	b.n	8007ca8 <prvInitialiseNewTask+0x88>
			{
				break;
 8007ca6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cb0:	e003      	b.n	8007cba <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	d901      	bls.n	8007cc4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cc0:	2306      	movs	r3, #6
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fee6 	bl	8006aac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	3318      	adds	r3, #24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fee1 	bl	8006aac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	f1c3 0207 	rsb	r2, r3, #7
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	2200      	movs	r2, #0
 8007d04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	68f9      	ldr	r1, [r7, #12]
 8007d12:	69b8      	ldr	r0, [r7, #24]
 8007d14:	f000 ff22 	bl	8008b5c <pxPortInitialiseStack>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d2a:	bf00      	nop
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d3c:	f001 f81e 	bl	8008d7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d40:	4b2a      	ldr	r3, [pc, #168]	; (8007dec <prvAddNewTaskToReadyList+0xb8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	4a29      	ldr	r2, [pc, #164]	; (8007dec <prvAddNewTaskToReadyList+0xb8>)
 8007d48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d4a:	4b29      	ldr	r3, [pc, #164]	; (8007df0 <prvAddNewTaskToReadyList+0xbc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d109      	bne.n	8007d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <prvAddNewTaskToReadyList+0xbc>)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d58:	4b24      	ldr	r3, [pc, #144]	; (8007dec <prvAddNewTaskToReadyList+0xb8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d110      	bne.n	8007d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d60:	f000 fbfc 	bl	800855c <prvInitialiseTaskLists>
 8007d64:	e00d      	b.n	8007d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d66:	4b23      	ldr	r3, [pc, #140]	; (8007df4 <prvAddNewTaskToReadyList+0xc0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d6e:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <prvAddNewTaskToReadyList+0xbc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d802      	bhi.n	8007d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d7c:	4a1c      	ldr	r2, [pc, #112]	; (8007df0 <prvAddNewTaskToReadyList+0xbc>)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d82:	4b1d      	ldr	r3, [pc, #116]	; (8007df8 <prvAddNewTaskToReadyList+0xc4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3301      	adds	r3, #1
 8007d88:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <prvAddNewTaskToReadyList+0xc4>)
 8007d8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	2201      	movs	r2, #1
 8007d92:	409a      	lsls	r2, r3
 8007d94:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <prvAddNewTaskToReadyList+0xc8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	4a18      	ldr	r2, [pc, #96]	; (8007dfc <prvAddNewTaskToReadyList+0xc8>)
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <prvAddNewTaskToReadyList+0xcc>)
 8007dac:	441a      	add	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fe fe86 	bl	8006ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dba:	f001 f813 	bl	8008de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <prvAddNewTaskToReadyList+0xc0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007dc6:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <prvAddNewTaskToReadyList+0xbc>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d207      	bcs.n	8007de4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dd4:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <prvAddNewTaskToReadyList+0xd0>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20005814 	.word	0x20005814
 8007df0:	20005714 	.word	0x20005714
 8007df4:	20005820 	.word	0x20005820
 8007df8:	20005830 	.word	0x20005830
 8007dfc:	2000581c 	.word	0x2000581c
 8007e00:	20005718 	.word	0x20005718
 8007e04:	e000ed04 	.word	0xe000ed04

08007e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d019      	beq.n	8007e4e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e1a:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <vTaskDelay+0x64>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00c      	beq.n	8007e3c <vTaskDelay+0x34>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	b672      	cpsid	i
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	b662      	cpsie	i
 8007e36:	60bb      	str	r3, [r7, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007e3c:	f000 f87e 	bl	8007f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e40:	2100      	movs	r1, #0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fe24 	bl	8008a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e48:	f000 f886 	bl	8007f58 <xTaskResumeAll>
 8007e4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d107      	bne.n	8007e64 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007e54:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <vTaskDelay+0x68>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	2000583c 	.word	0x2000583c
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08a      	sub	sp, #40	; 0x28
 8007e78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e82:	463a      	mov	r2, r7
 8007e84:	1d39      	adds	r1, r7, #4
 8007e86:	f107 0308 	add.w	r3, r7, #8
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7f8 fbaa 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	9202      	str	r2, [sp, #8]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	460a      	mov	r2, r1
 8007ea2:	4920      	ldr	r1, [pc, #128]	; (8007f24 <vTaskStartScheduler+0xb0>)
 8007ea4:	4820      	ldr	r0, [pc, #128]	; (8007f28 <vTaskStartScheduler+0xb4>)
 8007ea6:	f7ff fe13 	bl	8007ad0 <xTaskCreateStatic>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <vTaskStartScheduler+0xb8>)
 8007eae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <vTaskStartScheduler+0xb8>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	e001      	b.n	8007ec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d118      	bne.n	8007efa <vTaskStartScheduler+0x86>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	b672      	cpsid	i
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	b662      	cpsie	i
 8007edc:	613b      	str	r3, [r7, #16]
}
 8007ede:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ee0:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <vTaskStartScheduler+0xbc>)
 8007ee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ee6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ee8:	4b12      	ldr	r3, [pc, #72]	; (8007f34 <vTaskStartScheduler+0xc0>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <vTaskStartScheduler+0xc4>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ef4:	f000 fec4 	bl	8008c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ef8:	e010      	b.n	8007f1c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f00:	d10c      	bne.n	8007f1c <vTaskStartScheduler+0xa8>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	b672      	cpsid	i
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	b662      	cpsie	i
 8007f16:	60fb      	str	r3, [r7, #12]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <vTaskStartScheduler+0xa6>
}
 8007f1c:	bf00      	nop
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	08014700 	.word	0x08014700
 8007f28:	0800852d 	.word	0x0800852d
 8007f2c:	20005838 	.word	0x20005838
 8007f30:	20005834 	.word	0x20005834
 8007f34:	20005820 	.word	0x20005820
 8007f38:	20005818 	.word	0x20005818

08007f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f40:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <vTaskSuspendAll+0x18>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3301      	adds	r3, #1
 8007f46:	4a03      	ldr	r2, [pc, #12]	; (8007f54 <vTaskSuspendAll+0x18>)
 8007f48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007f4a:	bf00      	nop
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	2000583c 	.word	0x2000583c

08007f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f66:	4b42      	ldr	r3, [pc, #264]	; (8008070 <xTaskResumeAll+0x118>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10c      	bne.n	8007f88 <xTaskResumeAll+0x30>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	b672      	cpsid	i
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	b662      	cpsie	i
 8007f82:	603b      	str	r3, [r7, #0]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f88:	f000 fef8 	bl	8008d7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f8c:	4b38      	ldr	r3, [pc, #224]	; (8008070 <xTaskResumeAll+0x118>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	4a37      	ldr	r2, [pc, #220]	; (8008070 <xTaskResumeAll+0x118>)
 8007f94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f96:	4b36      	ldr	r3, [pc, #216]	; (8008070 <xTaskResumeAll+0x118>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d161      	bne.n	8008062 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f9e:	4b35      	ldr	r3, [pc, #212]	; (8008074 <xTaskResumeAll+0x11c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d05d      	beq.n	8008062 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fa6:	e02e      	b.n	8008006 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa8:	4b33      	ldr	r3, [pc, #204]	; (8008078 <xTaskResumeAll+0x120>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3318      	adds	r3, #24
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fde3 	bl	8006b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fdde 	bl	8006b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	2201      	movs	r2, #1
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	4b2b      	ldr	r3, [pc, #172]	; (800807c <xTaskResumeAll+0x124>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	4a2a      	ldr	r2, [pc, #168]	; (800807c <xTaskResumeAll+0x124>)
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4a27      	ldr	r2, [pc, #156]	; (8008080 <xTaskResumeAll+0x128>)
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f7fe fd6a 	bl	8006ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff6:	4b23      	ldr	r3, [pc, #140]	; (8008084 <xTaskResumeAll+0x12c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d302      	bcc.n	8008006 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008000:	4b21      	ldr	r3, [pc, #132]	; (8008088 <xTaskResumeAll+0x130>)
 8008002:	2201      	movs	r2, #1
 8008004:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008006:	4b1c      	ldr	r3, [pc, #112]	; (8008078 <xTaskResumeAll+0x120>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1cc      	bne.n	8007fa8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008014:	f000 fb42 	bl	800869c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008018:	4b1c      	ldr	r3, [pc, #112]	; (800808c <xTaskResumeAll+0x134>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008024:	f000 f858 	bl	80080d8 <xTaskIncrementTick>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <xTaskResumeAll+0x130>)
 8008030:	2201      	movs	r2, #1
 8008032:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3b01      	subs	r3, #1
 8008038:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f1      	bne.n	8008024 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008040:	4b12      	ldr	r3, [pc, #72]	; (800808c <xTaskResumeAll+0x134>)
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008046:	4b10      	ldr	r3, [pc, #64]	; (8008088 <xTaskResumeAll+0x130>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800804e:	2301      	movs	r3, #1
 8008050:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008052:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <xTaskResumeAll+0x138>)
 8008054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008062:	f000 febf 	bl	8008de4 <vPortExitCritical>

	return xAlreadyYielded;
 8008066:	68bb      	ldr	r3, [r7, #8]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	2000583c 	.word	0x2000583c
 8008074:	20005814 	.word	0x20005814
 8008078:	200057d4 	.word	0x200057d4
 800807c:	2000581c 	.word	0x2000581c
 8008080:	20005718 	.word	0x20005718
 8008084:	20005714 	.word	0x20005714
 8008088:	20005828 	.word	0x20005828
 800808c:	20005824 	.word	0x20005824
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800809a:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <xTaskGetTickCount+0x1c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080a0:	687b      	ldr	r3, [r7, #4]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20005818 	.word	0x20005818

080080b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080ba:	f000 ff47 	bl	8008f4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80080c2:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <xTaskGetTickCountFromISR+0x20>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080c8:	683b      	ldr	r3, [r7, #0]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20005818 	.word	0x20005818

080080d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e2:	4b4f      	ldr	r3, [pc, #316]	; (8008220 <xTaskIncrementTick+0x148>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f040 808a 	bne.w	8008200 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080ec:	4b4d      	ldr	r3, [pc, #308]	; (8008224 <xTaskIncrementTick+0x14c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3301      	adds	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080f4:	4a4b      	ldr	r2, [pc, #300]	; (8008224 <xTaskIncrementTick+0x14c>)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d122      	bne.n	8008146 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008100:	4b49      	ldr	r3, [pc, #292]	; (8008228 <xTaskIncrementTick+0x150>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <xTaskIncrementTick+0x4c>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	b672      	cpsid	i
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	b662      	cpsie	i
 800811e:	603b      	str	r3, [r7, #0]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <xTaskIncrementTick+0x4a>
 8008124:	4b40      	ldr	r3, [pc, #256]	; (8008228 <xTaskIncrementTick+0x150>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	4b40      	ldr	r3, [pc, #256]	; (800822c <xTaskIncrementTick+0x154>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a3e      	ldr	r2, [pc, #248]	; (8008228 <xTaskIncrementTick+0x150>)
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	4a3e      	ldr	r2, [pc, #248]	; (800822c <xTaskIncrementTick+0x154>)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	4b3d      	ldr	r3, [pc, #244]	; (8008230 <xTaskIncrementTick+0x158>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a3c      	ldr	r2, [pc, #240]	; (8008230 <xTaskIncrementTick+0x158>)
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	f000 faab 	bl	800869c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008146:	4b3b      	ldr	r3, [pc, #236]	; (8008234 <xTaskIncrementTick+0x15c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	d348      	bcc.n	80081e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008150:	4b35      	ldr	r3, [pc, #212]	; (8008228 <xTaskIncrementTick+0x150>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815a:	4b36      	ldr	r3, [pc, #216]	; (8008234 <xTaskIncrementTick+0x15c>)
 800815c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008160:	601a      	str	r2, [r3, #0]
					break;
 8008162:	e03e      	b.n	80081e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008164:	4b30      	ldr	r3, [pc, #192]	; (8008228 <xTaskIncrementTick+0x150>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d203      	bcs.n	8008184 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800817c:	4a2d      	ldr	r2, [pc, #180]	; (8008234 <xTaskIncrementTick+0x15c>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008182:	e02e      	b.n	80081e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	3304      	adds	r3, #4
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe fcf9 	bl	8006b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	3318      	adds	r3, #24
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fcf0 	bl	8006b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	2201      	movs	r2, #1
 80081a6:	409a      	lsls	r2, r3
 80081a8:	4b23      	ldr	r3, [pc, #140]	; (8008238 <xTaskIncrementTick+0x160>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	4a22      	ldr	r2, [pc, #136]	; (8008238 <xTaskIncrementTick+0x160>)
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4a1f      	ldr	r2, [pc, #124]	; (800823c <xTaskIncrementTick+0x164>)
 80081c0:	441a      	add	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4619      	mov	r1, r3
 80081c8:	4610      	mov	r0, r2
 80081ca:	f7fe fc7c 	bl	8006ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <xTaskIncrementTick+0x168>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	429a      	cmp	r2, r3
 80081da:	d3b9      	bcc.n	8008150 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e0:	e7b6      	b.n	8008150 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081e2:	4b17      	ldr	r3, [pc, #92]	; (8008240 <xTaskIncrementTick+0x168>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4914      	ldr	r1, [pc, #80]	; (800823c <xTaskIncrementTick+0x164>)
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d907      	bls.n	800820a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80081fa:	2301      	movs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e004      	b.n	800820a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <xTaskIncrementTick+0x16c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3301      	adds	r3, #1
 8008206:	4a0f      	ldr	r2, [pc, #60]	; (8008244 <xTaskIncrementTick+0x16c>)
 8008208:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800820a:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <xTaskIncrementTick+0x170>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008216:	697b      	ldr	r3, [r7, #20]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	2000583c 	.word	0x2000583c
 8008224:	20005818 	.word	0x20005818
 8008228:	200057cc 	.word	0x200057cc
 800822c:	200057d0 	.word	0x200057d0
 8008230:	2000582c 	.word	0x2000582c
 8008234:	20005834 	.word	0x20005834
 8008238:	2000581c 	.word	0x2000581c
 800823c:	20005718 	.word	0x20005718
 8008240:	20005714 	.word	0x20005714
 8008244:	20005824 	.word	0x20005824
 8008248:	20005828 	.word	0x20005828

0800824c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008252:	4b28      	ldr	r3, [pc, #160]	; (80082f4 <vTaskSwitchContext+0xa8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800825a:	4b27      	ldr	r3, [pc, #156]	; (80082f8 <vTaskSwitchContext+0xac>)
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008260:	e041      	b.n	80082e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008262:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <vTaskSwitchContext+0xac>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008268:	4b24      	ldr	r3, [pc, #144]	; (80082fc <vTaskSwitchContext+0xb0>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	fab3 f383 	clz	r3, r3
 8008274:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008276:	7afb      	ldrb	r3, [r7, #11]
 8008278:	f1c3 031f 	rsb	r3, r3, #31
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	4920      	ldr	r1, [pc, #128]	; (8008300 <vTaskSwitchContext+0xb4>)
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10c      	bne.n	80082ac <vTaskSwitchContext+0x60>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	b672      	cpsid	i
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	b662      	cpsie	i
 80082a6:	607b      	str	r3, [r7, #4]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <vTaskSwitchContext+0x5e>
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4a12      	ldr	r2, [pc, #72]	; (8008300 <vTaskSwitchContext+0xb4>)
 80082b8:	4413      	add	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	605a      	str	r2, [r3, #4]
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3308      	adds	r3, #8
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d104      	bne.n	80082dc <vTaskSwitchContext+0x90>
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	605a      	str	r2, [r3, #4]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	4a08      	ldr	r2, [pc, #32]	; (8008304 <vTaskSwitchContext+0xb8>)
 80082e4:	6013      	str	r3, [r2, #0]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	2000583c 	.word	0x2000583c
 80082f8:	20005828 	.word	0x20005828
 80082fc:	2000581c 	.word	0x2000581c
 8008300:	20005718 	.word	0x20005718
 8008304:	20005714 	.word	0x20005714

08008308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10c      	bne.n	8008332 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	60fb      	str	r3, [r7, #12]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008332:	4b07      	ldr	r3, [pc, #28]	; (8008350 <vTaskPlaceOnEventList+0x48>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3318      	adds	r3, #24
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7fe fbe7 	bl	8006b0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008340:	2101      	movs	r1, #1
 8008342:	6838      	ldr	r0, [r7, #0]
 8008344:	f000 fba4 	bl	8008a90 <prvAddCurrentTaskToDelayedList>
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20005714 	.word	0x20005714

08008354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10c      	bne.n	8008384 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	b672      	cpsid	i
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	b662      	cpsie	i
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	3318      	adds	r3, #24
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fbf9 	bl	8006b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800838e:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <xTaskRemoveFromEventList+0xb0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d11c      	bne.n	80083d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3304      	adds	r3, #4
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fbf0 	bl	8006b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	2201      	movs	r2, #1
 80083a6:	409a      	lsls	r2, r3
 80083a8:	4b17      	ldr	r3, [pc, #92]	; (8008408 <xTaskRemoveFromEventList+0xb4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	4a16      	ldr	r2, [pc, #88]	; (8008408 <xTaskRemoveFromEventList+0xb4>)
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4a13      	ldr	r2, [pc, #76]	; (800840c <xTaskRemoveFromEventList+0xb8>)
 80083c0:	441a      	add	r2, r3
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f7fe fb7c 	bl	8006ac6 <vListInsertEnd>
 80083ce:	e005      	b.n	80083dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3318      	adds	r3, #24
 80083d4:	4619      	mov	r1, r3
 80083d6:	480e      	ldr	r0, [pc, #56]	; (8008410 <xTaskRemoveFromEventList+0xbc>)
 80083d8:	f7fe fb75 	bl	8006ac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e0:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <xTaskRemoveFromEventList+0xc0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d905      	bls.n	80083f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083ee:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <xTaskRemoveFromEventList+0xc4>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e001      	b.n	80083fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80083fa:	697b      	ldr	r3, [r7, #20]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	2000583c 	.word	0x2000583c
 8008408:	2000581c 	.word	0x2000581c
 800840c:	20005718 	.word	0x20005718
 8008410:	200057d4 	.word	0x200057d4
 8008414:	20005714 	.word	0x20005714
 8008418:	20005828 	.word	0x20005828

0800841c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008424:	4b06      	ldr	r3, [pc, #24]	; (8008440 <vTaskInternalSetTimeOutState+0x24>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800842c:	4b05      	ldr	r3, [pc, #20]	; (8008444 <vTaskInternalSetTimeOutState+0x28>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	605a      	str	r2, [r3, #4]
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	2000582c 	.word	0x2000582c
 8008444:	20005818 	.word	0x20005818

08008448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10c      	bne.n	8008472 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	613b      	str	r3, [r7, #16]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10c      	bne.n	8008492 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	b672      	cpsid	i
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	b662      	cpsie	i
 800848c:	60fb      	str	r3, [r7, #12]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008492:	f000 fc73 	bl	8008d7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008496:	4b1d      	ldr	r3, [pc, #116]	; (800850c <xTaskCheckForTimeOut+0xc4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ae:	d102      	bne.n	80084b6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]
 80084b4:	e023      	b.n	80084fe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	4b15      	ldr	r3, [pc, #84]	; (8008510 <xTaskCheckForTimeOut+0xc8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d007      	beq.n	80084d2 <xTaskCheckForTimeOut+0x8a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d302      	bcc.n	80084d2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084cc:	2301      	movs	r3, #1
 80084ce:	61fb      	str	r3, [r7, #28]
 80084d0:	e015      	b.n	80084fe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d20b      	bcs.n	80084f4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ff97 	bl	800841c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]
 80084f2:	e004      	b.n	80084fe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084fa:	2301      	movs	r3, #1
 80084fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80084fe:	f000 fc71 	bl	8008de4 <vPortExitCritical>

	return xReturn;
 8008502:	69fb      	ldr	r3, [r7, #28]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20005818 	.word	0x20005818
 8008510:	2000582c 	.word	0x2000582c

08008514 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008518:	4b03      	ldr	r3, [pc, #12]	; (8008528 <vTaskMissedYield+0x14>)
 800851a:	2201      	movs	r2, #1
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	20005828 	.word	0x20005828

0800852c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008534:	f000 f852 	bl	80085dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <prvIdleTask+0x28>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d9f9      	bls.n	8008534 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <prvIdleTask+0x2c>)
 8008542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008550:	e7f0      	b.n	8008534 <prvIdleTask+0x8>
 8008552:	bf00      	nop
 8008554:	20005718 	.word	0x20005718
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
 8008566:	e00c      	b.n	8008582 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4a12      	ldr	r2, [pc, #72]	; (80085bc <prvInitialiseTaskLists+0x60>)
 8008574:	4413      	add	r3, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fa78 	bl	8006a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3301      	adds	r3, #1
 8008580:	607b      	str	r3, [r7, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b06      	cmp	r3, #6
 8008586:	d9ef      	bls.n	8008568 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008588:	480d      	ldr	r0, [pc, #52]	; (80085c0 <prvInitialiseTaskLists+0x64>)
 800858a:	f7fe fa6f 	bl	8006a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800858e:	480d      	ldr	r0, [pc, #52]	; (80085c4 <prvInitialiseTaskLists+0x68>)
 8008590:	f7fe fa6c 	bl	8006a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008594:	480c      	ldr	r0, [pc, #48]	; (80085c8 <prvInitialiseTaskLists+0x6c>)
 8008596:	f7fe fa69 	bl	8006a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800859a:	480c      	ldr	r0, [pc, #48]	; (80085cc <prvInitialiseTaskLists+0x70>)
 800859c:	f7fe fa66 	bl	8006a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085a0:	480b      	ldr	r0, [pc, #44]	; (80085d0 <prvInitialiseTaskLists+0x74>)
 80085a2:	f7fe fa63 	bl	8006a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085a6:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <prvInitialiseTaskLists+0x78>)
 80085a8:	4a05      	ldr	r2, [pc, #20]	; (80085c0 <prvInitialiseTaskLists+0x64>)
 80085aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <prvInitialiseTaskLists+0x7c>)
 80085ae:	4a05      	ldr	r2, [pc, #20]	; (80085c4 <prvInitialiseTaskLists+0x68>)
 80085b0:	601a      	str	r2, [r3, #0]
}
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20005718 	.word	0x20005718
 80085c0:	200057a4 	.word	0x200057a4
 80085c4:	200057b8 	.word	0x200057b8
 80085c8:	200057d4 	.word	0x200057d4
 80085cc:	200057e8 	.word	0x200057e8
 80085d0:	20005800 	.word	0x20005800
 80085d4:	200057cc 	.word	0x200057cc
 80085d8:	200057d0 	.word	0x200057d0

080085dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085e2:	e019      	b.n	8008618 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085e4:	f000 fbca 	bl	8008d7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e8:	4b10      	ldr	r3, [pc, #64]	; (800862c <prvCheckTasksWaitingTermination+0x50>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fac3 	bl	8006b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085fa:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <prvCheckTasksWaitingTermination+0x54>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3b01      	subs	r3, #1
 8008600:	4a0b      	ldr	r2, [pc, #44]	; (8008630 <prvCheckTasksWaitingTermination+0x54>)
 8008602:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008604:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <prvCheckTasksWaitingTermination+0x58>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3b01      	subs	r3, #1
 800860a:	4a0a      	ldr	r2, [pc, #40]	; (8008634 <prvCheckTasksWaitingTermination+0x58>)
 800860c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800860e:	f000 fbe9 	bl	8008de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f810 	bl	8008638 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008618:	4b06      	ldr	r3, [pc, #24]	; (8008634 <prvCheckTasksWaitingTermination+0x58>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e1      	bne.n	80085e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	200057e8 	.word	0x200057e8
 8008630:	20005814 	.word	0x20005814
 8008634:	200057fc 	.word	0x200057fc

08008638 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008646:	2b00      	cmp	r3, #0
 8008648:	d108      	bne.n	800865c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fd8a 	bl	8009168 <vPortFree>
				vPortFree( pxTCB );
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fd87 	bl	8009168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800865a:	e01a      	b.n	8008692 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008662:	2b01      	cmp	r3, #1
 8008664:	d103      	bne.n	800866e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fd7e 	bl	8009168 <vPortFree>
	}
 800866c:	e011      	b.n	8008692 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008674:	2b02      	cmp	r3, #2
 8008676:	d00c      	beq.n	8008692 <prvDeleteTCB+0x5a>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	b672      	cpsid	i
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	b662      	cpsie	i
 800868c:	60fb      	str	r3, [r7, #12]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <prvDeleteTCB+0x58>
	}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a2:	4b0c      	ldr	r3, [pc, #48]	; (80086d4 <prvResetNextTaskUnblockTime+0x38>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d104      	bne.n	80086b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <prvResetNextTaskUnblockTime+0x3c>)
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086b4:	e008      	b.n	80086c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <prvResetNextTaskUnblockTime+0x38>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	4a04      	ldr	r2, [pc, #16]	; (80086d8 <prvResetNextTaskUnblockTime+0x3c>)
 80086c6:	6013      	str	r3, [r2, #0]
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	200057cc 	.word	0x200057cc
 80086d8:	20005834 	.word	0x20005834

080086dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086e2:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <xTaskGetSchedulerState+0x34>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d102      	bne.n	80086f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086ea:	2301      	movs	r3, #1
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	e008      	b.n	8008702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086f0:	4b08      	ldr	r3, [pc, #32]	; (8008714 <xTaskGetSchedulerState+0x38>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086f8:	2302      	movs	r3, #2
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	e001      	b.n	8008702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086fe:	2300      	movs	r3, #0
 8008700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008702:	687b      	ldr	r3, [r7, #4]
	}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	20005820 	.word	0x20005820
 8008714:	2000583c 	.word	0x2000583c

08008718 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d069      	beq.n	8008802 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	4b36      	ldr	r3, [pc, #216]	; (800880c <xTaskPriorityInherit+0xf4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	429a      	cmp	r2, r3
 800873a:	d259      	bcs.n	80087f0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	2b00      	cmp	r3, #0
 8008742:	db06      	blt.n	8008752 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008744:	4b31      	ldr	r3, [pc, #196]	; (800880c <xTaskPriorityInherit+0xf4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	f1c3 0207 	rsb	r2, r3, #7
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6959      	ldr	r1, [r3, #20]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4a2b      	ldr	r2, [pc, #172]	; (8008810 <xTaskPriorityInherit+0xf8>)
 8008764:	4413      	add	r3, r2
 8008766:	4299      	cmp	r1, r3
 8008768:	d13a      	bne.n	80087e0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	3304      	adds	r3, #4
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fa06 	bl	8006b80 <uxListRemove>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d115      	bne.n	80087a6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877e:	4924      	ldr	r1, [pc, #144]	; (8008810 <xTaskPriorityInherit+0xf8>)
 8008780:	4613      	mov	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xTaskPriorityInherit+0x8e>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	2201      	movs	r2, #1
 8008796:	fa02 f303 	lsl.w	r3, r2, r3
 800879a:	43da      	mvns	r2, r3
 800879c:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <xTaskPriorityInherit+0xfc>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4013      	ands	r3, r2
 80087a2:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <xTaskPriorityInherit+0xfc>)
 80087a4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087a6:	4b19      	ldr	r3, [pc, #100]	; (800880c <xTaskPriorityInherit+0xf4>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	2201      	movs	r2, #1
 80087b6:	409a      	lsls	r2, r3
 80087b8:	4b16      	ldr	r3, [pc, #88]	; (8008814 <xTaskPriorityInherit+0xfc>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4313      	orrs	r3, r2
 80087be:	4a15      	ldr	r2, [pc, #84]	; (8008814 <xTaskPriorityInherit+0xfc>)
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4a10      	ldr	r2, [pc, #64]	; (8008810 <xTaskPriorityInherit+0xf8>)
 80087d0:	441a      	add	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fe f974 	bl	8006ac6 <vListInsertEnd>
 80087de:	e004      	b.n	80087ea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <xTaskPriorityInherit+0xf4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	e008      	b.n	8008802 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <xTaskPriorityInherit+0xf4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d201      	bcs.n	8008802 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80087fe:	2301      	movs	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008802:	68fb      	ldr	r3, [r7, #12]
	}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20005714 	.word	0x20005714
 8008810:	20005718 	.word	0x20005718
 8008814:	2000581c 	.word	0x2000581c

08008818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008824:	2300      	movs	r3, #0
 8008826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d072      	beq.n	8008914 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800882e:	4b3c      	ldr	r3, [pc, #240]	; (8008920 <xTaskPriorityDisinherit+0x108>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	429a      	cmp	r2, r3
 8008836:	d00c      	beq.n	8008852 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	b672      	cpsid	i
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	b662      	cpsie	i
 800884c:	60fb      	str	r3, [r7, #12]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10c      	bne.n	8008874 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	b672      	cpsid	i
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	b662      	cpsie	i
 800886e:	60bb      	str	r3, [r7, #8]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008886:	429a      	cmp	r2, r3
 8008888:	d044      	beq.n	8008914 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800888e:	2b00      	cmp	r3, #0
 8008890:	d140      	bne.n	8008914 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	3304      	adds	r3, #4
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe f972 	bl	8006b80 <uxListRemove>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d115      	bne.n	80088ce <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	491f      	ldr	r1, [pc, #124]	; (8008924 <xTaskPriorityDisinherit+0x10c>)
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10a      	bne.n	80088ce <xTaskPriorityDisinherit+0xb6>
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	2201      	movs	r2, #1
 80088be:	fa02 f303 	lsl.w	r3, r2, r3
 80088c2:	43da      	mvns	r2, r3
 80088c4:	4b18      	ldr	r3, [pc, #96]	; (8008928 <xTaskPriorityDisinherit+0x110>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4013      	ands	r3, r2
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <xTaskPriorityDisinherit+0x110>)
 80088cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	f1c3 0207 	rsb	r2, r3, #7
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	2201      	movs	r2, #1
 80088e8:	409a      	lsls	r2, r3
 80088ea:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <xTaskPriorityDisinherit+0x110>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	4a0d      	ldr	r2, [pc, #52]	; (8008928 <xTaskPriorityDisinherit+0x110>)
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4a08      	ldr	r2, [pc, #32]	; (8008924 <xTaskPriorityDisinherit+0x10c>)
 8008902:	441a      	add	r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	3304      	adds	r3, #4
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe f8db 	bl	8006ac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008910:	2301      	movs	r3, #1
 8008912:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008914:	697b      	ldr	r3, [r7, #20]
	}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20005714 	.word	0x20005714
 8008924:	20005718 	.word	0x20005718
 8008928:	2000581c 	.word	0x2000581c

0800892c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800893a:	2301      	movs	r3, #1
 800893c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 8087 	beq.w	8008a54 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10c      	bne.n	8008968 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	b672      	cpsid	i
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	b662      	cpsie	i
 8008962:	60fb      	str	r3, [r7, #12]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	429a      	cmp	r2, r3
 8008970:	d902      	bls.n	8008978 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	e002      	b.n	800897e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	429a      	cmp	r2, r3
 8008986:	d065      	beq.n	8008a54 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	429a      	cmp	r2, r3
 8008990:	d160      	bne.n	8008a54 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008992:	4b32      	ldr	r3, [pc, #200]	; (8008a5c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	429a      	cmp	r2, r3
 800899a:	d10c      	bne.n	80089b6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	b672      	cpsid	i
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	b662      	cpsie	i
 80089b0:	60bb      	str	r3, [r7, #8]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	db04      	blt.n	80089d4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	f1c3 0207 	rsb	r2, r3, #7
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	6959      	ldr	r1, [r3, #20]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4a1f      	ldr	r2, [pc, #124]	; (8008a60 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80089e4:	4413      	add	r3, r2
 80089e6:	4299      	cmp	r1, r3
 80089e8:	d134      	bne.n	8008a54 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe f8c6 	bl	8006b80 <uxListRemove>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d115      	bne.n	8008a26 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fe:	4918      	ldr	r1, [pc, #96]	; (8008a60 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	2201      	movs	r2, #1
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4013      	ands	r3, r2
 8008a22:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008a24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	409a      	lsls	r2, r3
 8008a2e:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	4a0b      	ldr	r2, [pc, #44]	; (8008a64 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008a46:	441a      	add	r2, r3
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe f839 	bl	8006ac6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a54:	bf00      	nop
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20005714 	.word	0x20005714
 8008a60:	20005718 	.word	0x20005718
 8008a64:	2000581c 	.word	0x2000581c

08008a68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a6c:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d004      	beq.n	8008a7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008a7e:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a80:	681b      	ldr	r3, [r3, #0]
	}
 8008a82:	4618      	mov	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	20005714 	.word	0x20005714

08008a90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a9a:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aa0:	4b28      	ldr	r3, [pc, #160]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe f86a 	bl	8006b80 <uxListRemove>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10b      	bne.n	8008aca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008ab2:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	2201      	movs	r2, #1
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	43da      	mvns	r2, r3
 8008ac0:	4b21      	ldr	r3, [pc, #132]	; (8008b48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	4a20      	ldr	r2, [pc, #128]	; (8008b48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ac8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ad0:	d10a      	bne.n	8008ae8 <prvAddCurrentTaskToDelayedList+0x58>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3304      	adds	r3, #4
 8008ade:	4619      	mov	r1, r3
 8008ae0:	481a      	ldr	r0, [pc, #104]	; (8008b4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008ae2:	f7fd fff0 	bl	8006ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ae6:	e026      	b.n	8008b36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008af0:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d209      	bcs.n	8008b14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b00:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	f7fd fffe 	bl	8006b0e <vListInsert>
}
 8008b12:	e010      	b.n	8008b36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f7fd fff4 	bl	8006b0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b26:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d202      	bcs.n	8008b36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b30:	4a09      	ldr	r2, [pc, #36]	; (8008b58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	6013      	str	r3, [r2, #0]
}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	20005818 	.word	0x20005818
 8008b44:	20005714 	.word	0x20005714
 8008b48:	2000581c 	.word	0x2000581c
 8008b4c:	20005800 	.word	0x20005800
 8008b50:	200057d0 	.word	0x200057d0
 8008b54:	200057cc 	.word	0x200057cc
 8008b58:	20005834 	.word	0x20005834

08008b5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3b04      	subs	r3, #4
 8008b6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f023 0201 	bic.w	r2, r3, #1
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3b04      	subs	r3, #4
 8008b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b8c:	4a0c      	ldr	r2, [pc, #48]	; (8008bc0 <pxPortInitialiseStack+0x64>)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3b14      	subs	r3, #20
 8008b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3b04      	subs	r3, #4
 8008ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f06f 0202 	mvn.w	r2, #2
 8008baa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3b20      	subs	r3, #32
 8008bb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	08008bc5 	.word	0x08008bc5

08008bc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bce:	4b14      	ldr	r3, [pc, #80]	; (8008c20 <prvTaskExitError+0x5c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd6:	d00c      	beq.n	8008bf2 <prvTaskExitError+0x2e>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	b672      	cpsid	i
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	b662      	cpsie	i
 8008bec:	60fb      	str	r3, [r7, #12]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <prvTaskExitError+0x2c>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	b672      	cpsid	i
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	b662      	cpsie	i
 8008c06:	60bb      	str	r3, [r7, #8]
}
 8008c08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c0a:	bf00      	nop
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0fc      	beq.n	8008c0c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	20000020 	.word	0x20000020
	...

08008c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c30:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <pxCurrentTCBConst2>)
 8008c32:	6819      	ldr	r1, [r3, #0]
 8008c34:	6808      	ldr	r0, [r1, #0]
 8008c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3a:	f380 8809 	msr	PSP, r0
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8811 	msr	BASEPRI, r0
 8008c4a:	4770      	bx	lr
 8008c4c:	f3af 8000 	nop.w

08008c50 <pxCurrentTCBConst2>:
 8008c50:	20005714 	.word	0x20005714
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop

08008c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c58:	4808      	ldr	r0, [pc, #32]	; (8008c7c <prvPortStartFirstTask+0x24>)
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	6800      	ldr	r0, [r0, #0]
 8008c5e:	f380 8808 	msr	MSP, r0
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f380 8814 	msr	CONTROL, r0
 8008c6a:	b662      	cpsie	i
 8008c6c:	b661      	cpsie	f
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	df00      	svc	0
 8008c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c7a:	bf00      	nop
 8008c7c:	e000ed08 	.word	0xe000ed08

08008c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c86:	4b37      	ldr	r3, [pc, #220]	; (8008d64 <xPortStartScheduler+0xe4>)
 8008c88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	22ff      	movs	r2, #255	; 0xff
 8008c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	4b2f      	ldr	r3, [pc, #188]	; (8008d68 <xPortStartScheduler+0xe8>)
 8008cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cae:	4b2f      	ldr	r3, [pc, #188]	; (8008d6c <xPortStartScheduler+0xec>)
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cb4:	e009      	b.n	8008cca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008cb6:	4b2d      	ldr	r3, [pc, #180]	; (8008d6c <xPortStartScheduler+0xec>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	4a2b      	ldr	r2, [pc, #172]	; (8008d6c <xPortStartScheduler+0xec>)
 8008cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b80      	cmp	r3, #128	; 0x80
 8008cd4:	d0ef      	beq.n	8008cb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cd6:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <xPortStartScheduler+0xec>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1c3 0307 	rsb	r3, r3, #7
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	d00c      	beq.n	8008cfc <xPortStartScheduler+0x7c>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	b672      	cpsid	i
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	b662      	cpsie	i
 8008cf6:	60bb      	str	r3, [r7, #8]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cfc:	4b1b      	ldr	r3, [pc, #108]	; (8008d6c <xPortStartScheduler+0xec>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	021b      	lsls	r3, r3, #8
 8008d02:	4a1a      	ldr	r2, [pc, #104]	; (8008d6c <xPortStartScheduler+0xec>)
 8008d04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d06:	4b19      	ldr	r3, [pc, #100]	; (8008d6c <xPortStartScheduler+0xec>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d0e:	4a17      	ldr	r2, [pc, #92]	; (8008d6c <xPortStartScheduler+0xec>)
 8008d10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <xPortStartScheduler+0xf0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a14      	ldr	r2, [pc, #80]	; (8008d70 <xPortStartScheduler+0xf0>)
 8008d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d26:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <xPortStartScheduler+0xf0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <xPortStartScheduler+0xf0>)
 8008d2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d32:	f000 f8dd 	bl	8008ef0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <xPortStartScheduler+0xf4>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d3c:	f000 f8fc 	bl	8008f38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <xPortStartScheduler+0xf8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a0c      	ldr	r2, [pc, #48]	; (8008d78 <xPortStartScheduler+0xf8>)
 8008d46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d4c:	f7ff ff84 	bl	8008c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d50:	f7ff fa7c 	bl	800824c <vTaskSwitchContext>
	prvTaskExitError();
 8008d54:	f7ff ff36 	bl	8008bc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	e000e400 	.word	0xe000e400
 8008d68:	20005840 	.word	0x20005840
 8008d6c:	20005844 	.word	0x20005844
 8008d70:	e000ed20 	.word	0xe000ed20
 8008d74:	20000020 	.word	0x20000020
 8008d78:	e000ef34 	.word	0xe000ef34

08008d7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	b672      	cpsid	i
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	b662      	cpsie	i
 8008d96:	607b      	str	r3, [r7, #4]
}
 8008d98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d9a:	4b10      	ldr	r3, [pc, #64]	; (8008ddc <vPortEnterCritical+0x60>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	4a0e      	ldr	r2, [pc, #56]	; (8008ddc <vPortEnterCritical+0x60>)
 8008da2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008da4:	4b0d      	ldr	r3, [pc, #52]	; (8008ddc <vPortEnterCritical+0x60>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d111      	bne.n	8008dd0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dac:	4b0c      	ldr	r3, [pc, #48]	; (8008de0 <vPortEnterCritical+0x64>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00c      	beq.n	8008dd0 <vPortEnterCritical+0x54>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	b672      	cpsid	i
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	b662      	cpsie	i
 8008dca:	603b      	str	r3, [r7, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <vPortEnterCritical+0x52>
	}
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	20000020 	.word	0x20000020
 8008de0:	e000ed04 	.word	0xe000ed04

08008de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <vPortExitCritical+0x54>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10c      	bne.n	8008e0c <vPortExitCritical+0x28>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	b672      	cpsid	i
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	b662      	cpsie	i
 8008e06:	607b      	str	r3, [r7, #4]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <vPortExitCritical+0x54>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	4a09      	ldr	r2, [pc, #36]	; (8008e38 <vPortExitCritical+0x54>)
 8008e14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e16:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <vPortExitCritical+0x54>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <vPortExitCritical+0x46>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	f383 8811 	msr	BASEPRI, r3
}
 8008e28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	20000020 	.word	0x20000020
 8008e3c:	00000000 	.word	0x00000000

08008e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e40:	f3ef 8009 	mrs	r0, PSP
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <pxCurrentTCBConst>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	f01e 0f10 	tst.w	lr, #16
 8008e50:	bf08      	it	eq
 8008e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5a:	6010      	str	r0, [r2, #0]
 8008e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e64:	b672      	cpsid	i
 8008e66:	f380 8811 	msr	BASEPRI, r0
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	b662      	cpsie	i
 8008e74:	f7ff f9ea 	bl	800824c <vTaskSwitchContext>
 8008e78:	f04f 0000 	mov.w	r0, #0
 8008e7c:	f380 8811 	msr	BASEPRI, r0
 8008e80:	bc09      	pop	{r0, r3}
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	6808      	ldr	r0, [r1, #0]
 8008e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	f01e 0f10 	tst.w	lr, #16
 8008e8e:	bf08      	it	eq
 8008e90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e94:	f380 8809 	msr	PSP, r0
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop

08008ea0 <pxCurrentTCBConst>:
 8008ea0:	20005714 	.word	0x20005714
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop

08008ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	b672      	cpsid	i
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	b662      	cpsie	i
 8008ec2:	607b      	str	r3, [r7, #4]
}
 8008ec4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ec6:	f7ff f907 	bl	80080d8 <xTaskIncrementTick>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ed0:	4b06      	ldr	r3, [pc, #24]	; (8008eec <SysTick_Handler+0x44>)
 8008ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	f383 8811 	msr	BASEPRI, r3
}
 8008ee2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	e000ed04 	.word	0xe000ed04

08008ef0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ef4:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <vPortSetupTimerInterrupt+0x34>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <vPortSetupTimerInterrupt+0x38>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <vPortSetupTimerInterrupt+0x3c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a0a      	ldr	r2, [pc, #40]	; (8008f30 <vPortSetupTimerInterrupt+0x40>)
 8008f06:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0a:	099b      	lsrs	r3, r3, #6
 8008f0c:	4a09      	ldr	r2, [pc, #36]	; (8008f34 <vPortSetupTimerInterrupt+0x44>)
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f12:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <vPortSetupTimerInterrupt+0x34>)
 8008f14:	2207      	movs	r2, #7
 8008f16:	601a      	str	r2, [r3, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	e000e010 	.word	0xe000e010
 8008f28:	e000e018 	.word	0xe000e018
 8008f2c:	20000000 	.word	0x20000000
 8008f30:	10624dd3 	.word	0x10624dd3
 8008f34:	e000e014 	.word	0xe000e014

08008f38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f48 <vPortEnableVFP+0x10>
 8008f3c:	6801      	ldr	r1, [r0, #0]
 8008f3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f42:	6001      	str	r1, [r0, #0]
 8008f44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f46:	bf00      	nop
 8008f48:	e000ed88 	.word	0xe000ed88

08008f4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f52:	f3ef 8305 	mrs	r3, IPSR
 8008f56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b0f      	cmp	r3, #15
 8008f5c:	d916      	bls.n	8008f8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f5e:	4a19      	ldr	r2, [pc, #100]	; (8008fc4 <vPortValidateInterruptPriority+0x78>)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f68:	4b17      	ldr	r3, [pc, #92]	; (8008fc8 <vPortValidateInterruptPriority+0x7c>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	7afa      	ldrb	r2, [r7, #11]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d20c      	bcs.n	8008f8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	b672      	cpsid	i
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	b662      	cpsie	i
 8008f86:	607b      	str	r3, [r7, #4]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f8c:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <vPortValidateInterruptPriority+0x80>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f94:	4b0e      	ldr	r3, [pc, #56]	; (8008fd0 <vPortValidateInterruptPriority+0x84>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d90c      	bls.n	8008fb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	b672      	cpsid	i
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	b662      	cpsie	i
 8008fb0:	603b      	str	r3, [r7, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <vPortValidateInterruptPriority+0x68>
	}
 8008fb6:	bf00      	nop
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	e000e3f0 	.word	0xe000e3f0
 8008fc8:	20005840 	.word	0x20005840
 8008fcc:	e000ed0c 	.word	0xe000ed0c
 8008fd0:	20005844 	.word	0x20005844

08008fd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08a      	sub	sp, #40	; 0x28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fe0:	f7fe ffac 	bl	8007f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fe4:	4b5b      	ldr	r3, [pc, #364]	; (8009154 <pvPortMalloc+0x180>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fec:	f000 f91a 	bl	8009224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ff0:	4b59      	ldr	r3, [pc, #356]	; (8009158 <pvPortMalloc+0x184>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f040 8092 	bne.w	8009122 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01f      	beq.n	8009044 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009004:	2208      	movs	r2, #8
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4413      	add	r3, r2
 800900a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	2b00      	cmp	r3, #0
 8009014:	d016      	beq.n	8009044 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f023 0307 	bic.w	r3, r3, #7
 800901c:	3308      	adds	r3, #8
 800901e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00c      	beq.n	8009044 <pvPortMalloc+0x70>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	b672      	cpsid	i
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	b662      	cpsie	i
 800903e:	617b      	str	r3, [r7, #20]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d06b      	beq.n	8009122 <pvPortMalloc+0x14e>
 800904a:	4b44      	ldr	r3, [pc, #272]	; (800915c <pvPortMalloc+0x188>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	429a      	cmp	r2, r3
 8009052:	d866      	bhi.n	8009122 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009054:	4b42      	ldr	r3, [pc, #264]	; (8009160 <pvPortMalloc+0x18c>)
 8009056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009058:	4b41      	ldr	r3, [pc, #260]	; (8009160 <pvPortMalloc+0x18c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800905e:	e004      	b.n	800906a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d903      	bls.n	800907c <pvPortMalloc+0xa8>
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1f1      	bne.n	8009060 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800907c:	4b35      	ldr	r3, [pc, #212]	; (8009154 <pvPortMalloc+0x180>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009082:	429a      	cmp	r2, r3
 8009084:	d04d      	beq.n	8009122 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2208      	movs	r2, #8
 800908c:	4413      	add	r3, r2
 800908e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	2308      	movs	r3, #8
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d921      	bls.n	80090ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <pvPortMalloc+0x100>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	b672      	cpsid	i
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	b662      	cpsie	i
 80090ce:	613b      	str	r3, [r7, #16]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	1ad2      	subs	r2, r2, r3
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090e6:	69b8      	ldr	r0, [r7, #24]
 80090e8:	f000 f8fe 	bl	80092e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090ec:	4b1b      	ldr	r3, [pc, #108]	; (800915c <pvPortMalloc+0x188>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	4a19      	ldr	r2, [pc, #100]	; (800915c <pvPortMalloc+0x188>)
 80090f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090fa:	4b18      	ldr	r3, [pc, #96]	; (800915c <pvPortMalloc+0x188>)
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4b19      	ldr	r3, [pc, #100]	; (8009164 <pvPortMalloc+0x190>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d203      	bcs.n	800910e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009106:	4b15      	ldr	r3, [pc, #84]	; (800915c <pvPortMalloc+0x188>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a16      	ldr	r2, [pc, #88]	; (8009164 <pvPortMalloc+0x190>)
 800910c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	4b11      	ldr	r3, [pc, #68]	; (8009158 <pvPortMalloc+0x184>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	431a      	orrs	r2, r3
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009122:	f7fe ff19 	bl	8007f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00c      	beq.n	800914a <pvPortMalloc+0x176>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	b672      	cpsid	i
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	b662      	cpsie	i
 8009144:	60fb      	str	r3, [r7, #12]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <pvPortMalloc+0x174>
	return pvReturn;
 800914a:	69fb      	ldr	r3, [r7, #28]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3728      	adds	r7, #40	; 0x28
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20009450 	.word	0x20009450
 8009158:	2000945c 	.word	0x2000945c
 800915c:	20009454 	.word	0x20009454
 8009160:	20009448 	.word	0x20009448
 8009164:	20009458 	.word	0x20009458

08009168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d04c      	beq.n	8009214 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800917a:	2308      	movs	r3, #8
 800917c:	425b      	negs	r3, r3
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	4413      	add	r3, r2
 8009182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	4b23      	ldr	r3, [pc, #140]	; (800921c <vPortFree+0xb4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4013      	ands	r3, r2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10c      	bne.n	80091b0 <vPortFree+0x48>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919a:	b672      	cpsid	i
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	b662      	cpsie	i
 80091aa:	60fb      	str	r3, [r7, #12]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00c      	beq.n	80091d2 <vPortFree+0x6a>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	b672      	cpsid	i
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	b662      	cpsie	i
 80091cc:	60bb      	str	r3, [r7, #8]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	4b11      	ldr	r3, [pc, #68]	; (800921c <vPortFree+0xb4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4013      	ands	r3, r2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d019      	beq.n	8009214 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d115      	bne.n	8009214 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	4b0b      	ldr	r3, [pc, #44]	; (800921c <vPortFree+0xb4>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	43db      	mvns	r3, r3
 80091f2:	401a      	ands	r2, r3
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091f8:	f7fe fea0 	bl	8007f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <vPortFree+0xb8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4413      	add	r3, r2
 8009206:	4a06      	ldr	r2, [pc, #24]	; (8009220 <vPortFree+0xb8>)
 8009208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800920a:	6938      	ldr	r0, [r7, #16]
 800920c:	f000 f86c 	bl	80092e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009210:	f7fe fea2 	bl	8007f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	2000945c 	.word	0x2000945c
 8009220:	20009454 	.word	0x20009454

08009224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800922a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800922e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009230:	4b27      	ldr	r3, [pc, #156]	; (80092d0 <prvHeapInit+0xac>)
 8009232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00c      	beq.n	8009258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3307      	adds	r3, #7
 8009242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <prvHeapInit+0xac>)
 8009254:	4413      	add	r3, r2
 8009256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800925c:	4a1d      	ldr	r2, [pc, #116]	; (80092d4 <prvHeapInit+0xb0>)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009262:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <prvHeapInit+0xb0>)
 8009264:	2200      	movs	r2, #0
 8009266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4413      	add	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009270:	2208      	movs	r2, #8
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0307 	bic.w	r3, r3, #7
 800927e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4a15      	ldr	r2, [pc, #84]	; (80092d8 <prvHeapInit+0xb4>)
 8009284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <prvHeapInit+0xb4>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2200      	movs	r2, #0
 800928c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800928e:	4b12      	ldr	r3, [pc, #72]	; (80092d8 <prvHeapInit+0xb4>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	1ad2      	subs	r2, r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <prvHeapInit+0xb4>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <prvHeapInit+0xb8>)
 80092b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <prvHeapInit+0xbc>)
 80092ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <prvHeapInit+0xc0>)
 80092be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092c2:	601a      	str	r2, [r3, #0]
}
 80092c4:	bf00      	nop
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	20005848 	.word	0x20005848
 80092d4:	20009448 	.word	0x20009448
 80092d8:	20009450 	.word	0x20009450
 80092dc:	20009458 	.word	0x20009458
 80092e0:	20009454 	.word	0x20009454
 80092e4:	2000945c 	.word	0x2000945c

080092e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092f0:	4b28      	ldr	r3, [pc, #160]	; (8009394 <prvInsertBlockIntoFreeList+0xac>)
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	e002      	b.n	80092fc <prvInsertBlockIntoFreeList+0x14>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d8f7      	bhi.n	80092f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4413      	add	r3, r2
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d108      	bne.n	800932a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	441a      	add	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	441a      	add	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d118      	bne.n	8009370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <prvInsertBlockIntoFreeList+0xb0>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d00d      	beq.n	8009366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	441a      	add	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e008      	b.n	8009378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <prvInsertBlockIntoFreeList+0xb0>)
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e003      	b.n	8009378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	429a      	cmp	r2, r3
 800937e:	d002      	beq.n	8009386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009386:	bf00      	nop
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	20009448 	.word	0x20009448
 8009398:	20009450 	.word	0x20009450

0800939c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80093a6:	f007 fad5 	bl	8010954 <sys_timeouts_sleeptime>
 80093aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b2:	d10b      	bne.n	80093cc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80093b4:	4813      	ldr	r0, [pc, #76]	; (8009404 <tcpip_timeouts_mbox_fetch+0x68>)
 80093b6:	f00a f84a 	bl	801344e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80093ba:	2200      	movs	r2, #0
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f009 ffbc 	bl	801333c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80093c4:	480f      	ldr	r0, [pc, #60]	; (8009404 <tcpip_timeouts_mbox_fetch+0x68>)
 80093c6:	f00a f833 	bl	8013430 <sys_mutex_lock>
    return;
 80093ca:	e018      	b.n	80093fe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80093d2:	f007 fa85 	bl	80108e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80093d6:	e7e6      	b.n	80093a6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80093d8:	480a      	ldr	r0, [pc, #40]	; (8009404 <tcpip_timeouts_mbox_fetch+0x68>)
 80093da:	f00a f838 	bl	801344e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f009 ffaa 	bl	801333c <sys_arch_mbox_fetch>
 80093e8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80093ea:	4806      	ldr	r0, [pc, #24]	; (8009404 <tcpip_timeouts_mbox_fetch+0x68>)
 80093ec:	f00a f820 	bl	8013430 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f6:	d102      	bne.n	80093fe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80093f8:	f007 fa72 	bl	80108e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80093fc:	e7d3      	b.n	80093a6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	2000946c 	.word	0x2000946c

08009408 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009410:	4810      	ldr	r0, [pc, #64]	; (8009454 <tcpip_thread+0x4c>)
 8009412:	f00a f80d 	bl	8013430 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009416:	4b10      	ldr	r3, [pc, #64]	; (8009458 <tcpip_thread+0x50>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800941e:	4b0e      	ldr	r3, [pc, #56]	; (8009458 <tcpip_thread+0x50>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a0e      	ldr	r2, [pc, #56]	; (800945c <tcpip_thread+0x54>)
 8009424:	6812      	ldr	r2, [r2, #0]
 8009426:	4610      	mov	r0, r2
 8009428:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800942a:	f107 030c 	add.w	r3, r7, #12
 800942e:	4619      	mov	r1, r3
 8009430:	480b      	ldr	r0, [pc, #44]	; (8009460 <tcpip_thread+0x58>)
 8009432:	f7ff ffb3 	bl	800939c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800943c:	4b09      	ldr	r3, [pc, #36]	; (8009464 <tcpip_thread+0x5c>)
 800943e:	2291      	movs	r2, #145	; 0x91
 8009440:	4909      	ldr	r1, [pc, #36]	; (8009468 <tcpip_thread+0x60>)
 8009442:	480a      	ldr	r0, [pc, #40]	; (800946c <tcpip_thread+0x64>)
 8009444:	f00a f89e 	bl	8013584 <iprintf>
      continue;
 8009448:	e003      	b.n	8009452 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f80f 	bl	8009470 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009452:	e7ea      	b.n	800942a <tcpip_thread+0x22>
 8009454:	2000946c 	.word	0x2000946c
 8009458:	20009460 	.word	0x20009460
 800945c:	20009464 	.word	0x20009464
 8009460:	20009468 	.word	0x20009468
 8009464:	08014708 	.word	0x08014708
 8009468:	08014738 	.word	0x08014738
 800946c:	08014758 	.word	0x08014758

08009470 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	2b02      	cmp	r3, #2
 800947e:	d026      	beq.n	80094ce <tcpip_thread_handle_msg+0x5e>
 8009480:	2b02      	cmp	r3, #2
 8009482:	dc2b      	bgt.n	80094dc <tcpip_thread_handle_msg+0x6c>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <tcpip_thread_handle_msg+0x1e>
 8009488:	2b01      	cmp	r3, #1
 800948a:	d015      	beq.n	80094b8 <tcpip_thread_handle_msg+0x48>
 800948c:	e026      	b.n	80094dc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6850      	ldr	r0, [r2, #4]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6892      	ldr	r2, [r2, #8]
 800949a:	4611      	mov	r1, r2
 800949c:	4798      	blx	r3
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d004      	beq.n	80094ae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fd1b 	bl	800aee4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	2009      	movs	r0, #9
 80094b2:	f000 fe73 	bl	800a19c <memp_free>
      break;
 80094b6:	e018      	b.n	80094ea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6892      	ldr	r2, [r2, #8]
 80094c0:	4610      	mov	r0, r2
 80094c2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	2008      	movs	r0, #8
 80094c8:	f000 fe68 	bl	800a19c <memp_free>
      break;
 80094cc:	e00d      	b.n	80094ea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6892      	ldr	r2, [r2, #8]
 80094d6:	4610      	mov	r0, r2
 80094d8:	4798      	blx	r3
      break;
 80094da:	e006      	b.n	80094ea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80094dc:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <tcpip_thread_handle_msg+0x84>)
 80094de:	22cf      	movs	r2, #207	; 0xcf
 80094e0:	4905      	ldr	r1, [pc, #20]	; (80094f8 <tcpip_thread_handle_msg+0x88>)
 80094e2:	4806      	ldr	r0, [pc, #24]	; (80094fc <tcpip_thread_handle_msg+0x8c>)
 80094e4:	f00a f84e 	bl	8013584 <iprintf>
      break;
 80094e8:	bf00      	nop
  }
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	08014708 	.word	0x08014708
 80094f8:	08014738 	.word	0x08014738
 80094fc:	08014758 	.word	0x08014758

08009500 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800950c:	481a      	ldr	r0, [pc, #104]	; (8009578 <tcpip_inpkt+0x78>)
 800950e:	f009 ff54 	bl	80133ba <sys_mbox_valid>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d105      	bne.n	8009524 <tcpip_inpkt+0x24>
 8009518:	4b18      	ldr	r3, [pc, #96]	; (800957c <tcpip_inpkt+0x7c>)
 800951a:	22fc      	movs	r2, #252	; 0xfc
 800951c:	4918      	ldr	r1, [pc, #96]	; (8009580 <tcpip_inpkt+0x80>)
 800951e:	4819      	ldr	r0, [pc, #100]	; (8009584 <tcpip_inpkt+0x84>)
 8009520:	f00a f830 	bl	8013584 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009524:	2009      	movs	r0, #9
 8009526:	f000 fdc3 	bl	800a0b0 <memp_malloc>
 800952a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009536:	e01a      	b.n	800956e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009550:	6979      	ldr	r1, [r7, #20]
 8009552:	4809      	ldr	r0, [pc, #36]	; (8009578 <tcpip_inpkt+0x78>)
 8009554:	f009 fed8 	bl	8013308 <sys_mbox_trypost>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d006      	beq.n	800956c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800955e:	6979      	ldr	r1, [r7, #20]
 8009560:	2009      	movs	r0, #9
 8009562:	f000 fe1b 	bl	800a19c <memp_free>
    return ERR_MEM;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800956a:	e000      	b.n	800956e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800956c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20009468 	.word	0x20009468
 800957c:	08014708 	.word	0x08014708
 8009580:	08014780 	.word	0x08014780
 8009584:	08014758 	.word	0x08014758

08009588 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009598:	f003 0318 	and.w	r3, r3, #24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d006      	beq.n	80095ae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80095a0:	4a08      	ldr	r2, [pc, #32]	; (80095c4 <tcpip_input+0x3c>)
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff ffab 	bl	8009500 <tcpip_inpkt>
 80095aa:	4603      	mov	r3, r0
 80095ac:	e005      	b.n	80095ba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80095ae:	4a06      	ldr	r2, [pc, #24]	; (80095c8 <tcpip_input+0x40>)
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff ffa4 	bl	8009500 <tcpip_inpkt>
 80095b8:	4603      	mov	r3, r0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	08013119 	.word	0x08013119
 80095c8:	08012021 	.word	0x08012021

080095cc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80095d6:	4819      	ldr	r0, [pc, #100]	; (800963c <tcpip_try_callback+0x70>)
 80095d8:	f009 feef 	bl	80133ba <sys_mbox_valid>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <tcpip_try_callback+0x24>
 80095e2:	4b17      	ldr	r3, [pc, #92]	; (8009640 <tcpip_try_callback+0x74>)
 80095e4:	f240 125d 	movw	r2, #349	; 0x15d
 80095e8:	4916      	ldr	r1, [pc, #88]	; (8009644 <tcpip_try_callback+0x78>)
 80095ea:	4817      	ldr	r0, [pc, #92]	; (8009648 <tcpip_try_callback+0x7c>)
 80095ec:	f009 ffca 	bl	8013584 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80095f0:	2008      	movs	r0, #8
 80095f2:	f000 fd5d 	bl	800a0b0 <memp_malloc>
 80095f6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80095fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009602:	e017      	b.n	8009634 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	4808      	ldr	r0, [pc, #32]	; (800963c <tcpip_try_callback+0x70>)
 800961a:	f009 fe75 	bl	8013308 <sys_mbox_trypost>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d006      	beq.n	8009632 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009624:	68f9      	ldr	r1, [r7, #12]
 8009626:	2008      	movs	r0, #8
 8009628:	f000 fdb8 	bl	800a19c <memp_free>
    return ERR_MEM;
 800962c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009630:	e000      	b.n	8009634 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20009468 	.word	0x20009468
 8009640:	08014708 	.word	0x08014708
 8009644:	08014780 	.word	0x08014780
 8009648:	08014758 	.word	0x08014758

0800964c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af02      	add	r7, sp, #8
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009656:	f000 f871 	bl	800973c <lwip_init>

  tcpip_init_done = initfunc;
 800965a:	4a17      	ldr	r2, [pc, #92]	; (80096b8 <tcpip_init+0x6c>)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009660:	4a16      	ldr	r2, [pc, #88]	; (80096bc <tcpip_init+0x70>)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009666:	2106      	movs	r1, #6
 8009668:	4815      	ldr	r0, [pc, #84]	; (80096c0 <tcpip_init+0x74>)
 800966a:	f009 fe2b 	bl	80132c4 <sys_mbox_new>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d006      	beq.n	8009682 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009674:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <tcpip_init+0x78>)
 8009676:	f240 2261 	movw	r2, #609	; 0x261
 800967a:	4913      	ldr	r1, [pc, #76]	; (80096c8 <tcpip_init+0x7c>)
 800967c:	4813      	ldr	r0, [pc, #76]	; (80096cc <tcpip_init+0x80>)
 800967e:	f009 ff81 	bl	8013584 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009682:	4813      	ldr	r0, [pc, #76]	; (80096d0 <tcpip_init+0x84>)
 8009684:	f009 feb8 	bl	80133f8 <sys_mutex_new>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d006      	beq.n	800969c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <tcpip_init+0x78>)
 8009690:	f240 2265 	movw	r2, #613	; 0x265
 8009694:	490f      	ldr	r1, [pc, #60]	; (80096d4 <tcpip_init+0x88>)
 8009696:	480d      	ldr	r0, [pc, #52]	; (80096cc <tcpip_init+0x80>)
 8009698:	f009 ff74 	bl	8013584 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800969c:	2300      	movs	r3, #0
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a4:	2200      	movs	r2, #0
 80096a6:	490c      	ldr	r1, [pc, #48]	; (80096d8 <tcpip_init+0x8c>)
 80096a8:	480c      	ldr	r0, [pc, #48]	; (80096dc <tcpip_init+0x90>)
 80096aa:	f009 fedd 	bl	8013468 <sys_thread_new>
}
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20009460 	.word	0x20009460
 80096bc:	20009464 	.word	0x20009464
 80096c0:	20009468 	.word	0x20009468
 80096c4:	08014708 	.word	0x08014708
 80096c8:	08014790 	.word	0x08014790
 80096cc:	08014758 	.word	0x08014758
 80096d0:	2000946c 	.word	0x2000946c
 80096d4:	080147b4 	.word	0x080147b4
 80096d8:	08009409 	.word	0x08009409
 80096dc:	080147d8 	.word	0x080147d8

080096e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	b21a      	sxth	r2, r3
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	0a1b      	lsrs	r3, r3, #8
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	b21b      	sxth	r3, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	b21b      	sxth	r3, r3
 80096fc:	b29b      	uxth	r3, r3
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	061a      	lsls	r2, r3, #24
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	0e1b      	lsrs	r3, r3, #24
 800972e:	4313      	orrs	r3, r2
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009746:	f009 fe49 	bl	80133dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800974a:	f000 f8d9 	bl	8009900 <mem_init>
  memp_init();
 800974e:	f000 fc41 	bl	8009fd4 <memp_init>
  pbuf_init();
  netif_init();
 8009752:	f000 fd4d 	bl	800a1f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009756:	f007 f935 	bl	80109c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800975a:	f001 fe5d 	bl	800b418 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800975e:	f007 f877 	bl	8010850 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <ptr_to_mem+0x20>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	88fb      	ldrh	r3, [r7, #6]
 800977c:	4413      	add	r3, r2
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	2000d484 	.word	0x2000d484

08009790 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <mem_to_ptr+0x20>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	b29b      	uxth	r3, r3
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	2000d484 	.word	0x2000d484

080097b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80097b4:	b590      	push	{r4, r7, lr}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80097bc:	4b47      	ldr	r3, [pc, #284]	; (80098dc <plug_holes+0x128>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d206      	bcs.n	80097d4 <plug_holes+0x20>
 80097c6:	4b46      	ldr	r3, [pc, #280]	; (80098e0 <plug_holes+0x12c>)
 80097c8:	f240 12df 	movw	r2, #479	; 0x1df
 80097cc:	4945      	ldr	r1, [pc, #276]	; (80098e4 <plug_holes+0x130>)
 80097ce:	4846      	ldr	r0, [pc, #280]	; (80098e8 <plug_holes+0x134>)
 80097d0:	f009 fed8 	bl	8013584 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80097d4:	4b45      	ldr	r3, [pc, #276]	; (80098ec <plug_holes+0x138>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d306      	bcc.n	80097ec <plug_holes+0x38>
 80097de:	4b40      	ldr	r3, [pc, #256]	; (80098e0 <plug_holes+0x12c>)
 80097e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80097e4:	4942      	ldr	r1, [pc, #264]	; (80098f0 <plug_holes+0x13c>)
 80097e6:	4840      	ldr	r0, [pc, #256]	; (80098e8 <plug_holes+0x134>)
 80097e8:	f009 fecc 	bl	8013584 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	791b      	ldrb	r3, [r3, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d006      	beq.n	8009802 <plug_holes+0x4e>
 80097f4:	4b3a      	ldr	r3, [pc, #232]	; (80098e0 <plug_holes+0x12c>)
 80097f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80097fa:	493e      	ldr	r1, [pc, #248]	; (80098f4 <plug_holes+0x140>)
 80097fc:	483a      	ldr	r0, [pc, #232]	; (80098e8 <plug_holes+0x134>)
 80097fe:	f009 fec1 	bl	8013584 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800980a:	4293      	cmp	r3, r2
 800980c:	d906      	bls.n	800981c <plug_holes+0x68>
 800980e:	4b34      	ldr	r3, [pc, #208]	; (80098e0 <plug_holes+0x12c>)
 8009810:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009814:	4938      	ldr	r1, [pc, #224]	; (80098f8 <plug_holes+0x144>)
 8009816:	4834      	ldr	r0, [pc, #208]	; (80098e8 <plug_holes+0x134>)
 8009818:	f009 feb4 	bl	8013584 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff ffa3 	bl	800976c <ptr_to_mem>
 8009826:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	429a      	cmp	r2, r3
 800982e:	d025      	beq.n	800987c <plug_holes+0xc8>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	791b      	ldrb	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d121      	bne.n	800987c <plug_holes+0xc8>
 8009838:	4b2c      	ldr	r3, [pc, #176]	; (80098ec <plug_holes+0x138>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	429a      	cmp	r2, r3
 8009840:	d01c      	beq.n	800987c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009842:	4b2e      	ldr	r3, [pc, #184]	; (80098fc <plug_holes+0x148>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	429a      	cmp	r2, r3
 800984a:	d102      	bne.n	8009852 <plug_holes+0x9e>
      lfree = mem;
 800984c:	4a2b      	ldr	r2, [pc, #172]	; (80098fc <plug_holes+0x148>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	881a      	ldrh	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009862:	4293      	cmp	r3, r2
 8009864:	d00a      	beq.n	800987c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff ff7e 	bl	800976c <ptr_to_mem>
 8009870:	4604      	mov	r4, r0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff ff8c 	bl	8009790 <mem_to_ptr>
 8009878:	4603      	mov	r3, r0
 800987a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	885b      	ldrh	r3, [r3, #2]
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff ff73 	bl	800976c <ptr_to_mem>
 8009886:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	429a      	cmp	r2, r3
 800988e:	d020      	beq.n	80098d2 <plug_holes+0x11e>
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	791b      	ldrb	r3, [r3, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d11c      	bne.n	80098d2 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009898:	4b18      	ldr	r3, [pc, #96]	; (80098fc <plug_holes+0x148>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d102      	bne.n	80098a8 <plug_holes+0xf4>
      lfree = pmem;
 80098a2:	4a16      	ldr	r2, [pc, #88]	; (80098fc <plug_holes+0x148>)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	881a      	ldrh	r2, [r3, #0]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00a      	beq.n	80098d2 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff ff53 	bl	800976c <ptr_to_mem>
 80098c6:	4604      	mov	r4, r0
 80098c8:	68b8      	ldr	r0, [r7, #8]
 80098ca:	f7ff ff61 	bl	8009790 <mem_to_ptr>
 80098ce:	4603      	mov	r3, r0
 80098d0:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd90      	pop	{r4, r7, pc}
 80098da:	bf00      	nop
 80098dc:	2000d484 	.word	0x2000d484
 80098e0:	080147e8 	.word	0x080147e8
 80098e4:	08014818 	.word	0x08014818
 80098e8:	08014830 	.word	0x08014830
 80098ec:	2000d488 	.word	0x2000d488
 80098f0:	08014858 	.word	0x08014858
 80098f4:	08014874 	.word	0x08014874
 80098f8:	08014890 	.word	0x08014890
 80098fc:	2000d490 	.word	0x2000d490

08009900 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009906:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <mem_init+0x84>)
 8009908:	3303      	adds	r3, #3
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	461a      	mov	r2, r3
 8009910:	4b1d      	ldr	r3, [pc, #116]	; (8009988 <mem_init+0x88>)
 8009912:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009914:	4b1c      	ldr	r3, [pc, #112]	; (8009988 <mem_init+0x88>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009920:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800992e:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8009932:	f7ff ff1b 	bl	800976c <ptr_to_mem>
 8009936:	4603      	mov	r3, r0
 8009938:	4a14      	ldr	r2, [pc, #80]	; (800998c <mem_init+0x8c>)
 800993a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800993c:	4b13      	ldr	r3, [pc, #76]	; (800998c <mem_init+0x8c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2201      	movs	r2, #1
 8009942:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009944:	4b11      	ldr	r3, [pc, #68]	; (800998c <mem_init+0x8c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800994c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <mem_init+0x8c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009956:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <mem_init+0x88>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a0c      	ldr	r2, [pc, #48]	; (8009990 <mem_init+0x90>)
 800995e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009960:	480c      	ldr	r0, [pc, #48]	; (8009994 <mem_init+0x94>)
 8009962:	f009 fd49 	bl	80133f8 <sys_mutex_new>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d006      	beq.n	800997a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <mem_init+0x98>)
 800996e:	f240 221f 	movw	r2, #543	; 0x21f
 8009972:	490a      	ldr	r1, [pc, #40]	; (800999c <mem_init+0x9c>)
 8009974:	480a      	ldr	r0, [pc, #40]	; (80099a0 <mem_init+0xa0>)
 8009976:	f009 fe05 	bl	8013584 <iprintf>
  }
}
 800997a:	bf00      	nop
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20009488 	.word	0x20009488
 8009988:	2000d484 	.word	0x2000d484
 800998c:	2000d488 	.word	0x2000d488
 8009990:	2000d490 	.word	0x2000d490
 8009994:	2000d48c 	.word	0x2000d48c
 8009998:	080147e8 	.word	0x080147e8
 800999c:	080148bc 	.word	0x080148bc
 80099a0:	08014830 	.word	0x08014830

080099a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7ff feef 	bl	8009790 <mem_to_ptr>
 80099b2:	4603      	mov	r3, r0
 80099b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff fed6 	bl	800976c <ptr_to_mem>
 80099c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	885b      	ldrh	r3, [r3, #2]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff fed0 	bl	800976c <ptr_to_mem>
 80099cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d819      	bhi.n	8009a0e <mem_link_valid+0x6a>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	885b      	ldrh	r3, [r3, #2]
 80099de:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d813      	bhi.n	8009a0e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80099ea:	8afa      	ldrh	r2, [r7, #22]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d004      	beq.n	80099fa <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	8afa      	ldrh	r2, [r7, #22]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d109      	bne.n	8009a0e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80099fa:	4b08      	ldr	r3, [pc, #32]	; (8009a1c <mem_link_valid+0x78>)
 80099fc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d006      	beq.n	8009a12 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	885b      	ldrh	r3, [r3, #2]
 8009a08:	8afa      	ldrh	r2, [r7, #22]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d001      	beq.n	8009a12 <mem_link_valid+0x6e>
    return 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e000      	b.n	8009a14 <mem_link_valid+0x70>
  }
  return 1;
 8009a12:	2301      	movs	r3, #1
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	2000d488 	.word	0x2000d488

08009a20 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d070      	beq.n	8009b10 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00d      	beq.n	8009a54 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009a38:	4b37      	ldr	r3, [pc, #220]	; (8009b18 <mem_free+0xf8>)
 8009a3a:	f240 2273 	movw	r2, #627	; 0x273
 8009a3e:	4937      	ldr	r1, [pc, #220]	; (8009b1c <mem_free+0xfc>)
 8009a40:	4837      	ldr	r0, [pc, #220]	; (8009b20 <mem_free+0x100>)
 8009a42:	f009 fd9f 	bl	8013584 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a46:	f009 fd35 	bl	80134b4 <sys_arch_protect>
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f009 fd3f 	bl	80134d0 <sys_arch_unprotect>
    return;
 8009a52:	e05e      	b.n	8009b12 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3b08      	subs	r3, #8
 8009a58:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009a5a:	4b32      	ldr	r3, [pc, #200]	; (8009b24 <mem_free+0x104>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d306      	bcc.n	8009a72 <mem_free+0x52>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f103 020c 	add.w	r2, r3, #12
 8009a6a:	4b2f      	ldr	r3, [pc, #188]	; (8009b28 <mem_free+0x108>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d90d      	bls.n	8009a8e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009a72:	4b29      	ldr	r3, [pc, #164]	; (8009b18 <mem_free+0xf8>)
 8009a74:	f240 227f 	movw	r2, #639	; 0x27f
 8009a78:	492c      	ldr	r1, [pc, #176]	; (8009b2c <mem_free+0x10c>)
 8009a7a:	4829      	ldr	r0, [pc, #164]	; (8009b20 <mem_free+0x100>)
 8009a7c:	f009 fd82 	bl	8013584 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a80:	f009 fd18 	bl	80134b4 <sys_arch_protect>
 8009a84:	6138      	str	r0, [r7, #16]
 8009a86:	6938      	ldr	r0, [r7, #16]
 8009a88:	f009 fd22 	bl	80134d0 <sys_arch_unprotect>
    return;
 8009a8c:	e041      	b.n	8009b12 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009a8e:	4828      	ldr	r0, [pc, #160]	; (8009b30 <mem_free+0x110>)
 8009a90:	f009 fcce 	bl	8013430 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	791b      	ldrb	r3, [r3, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d110      	bne.n	8009abe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009a9c:	4b1e      	ldr	r3, [pc, #120]	; (8009b18 <mem_free+0xf8>)
 8009a9e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009aa2:	4924      	ldr	r1, [pc, #144]	; (8009b34 <mem_free+0x114>)
 8009aa4:	481e      	ldr	r0, [pc, #120]	; (8009b20 <mem_free+0x100>)
 8009aa6:	f009 fd6d 	bl	8013584 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009aaa:	4821      	ldr	r0, [pc, #132]	; (8009b30 <mem_free+0x110>)
 8009aac:	f009 fccf 	bl	801344e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009ab0:	f009 fd00 	bl	80134b4 <sys_arch_protect>
 8009ab4:	6178      	str	r0, [r7, #20]
 8009ab6:	6978      	ldr	r0, [r7, #20]
 8009ab8:	f009 fd0a 	bl	80134d0 <sys_arch_unprotect>
    return;
 8009abc:	e029      	b.n	8009b12 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009abe:	69f8      	ldr	r0, [r7, #28]
 8009ac0:	f7ff ff70 	bl	80099a4 <mem_link_valid>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d110      	bne.n	8009aec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <mem_free+0xf8>)
 8009acc:	f240 2295 	movw	r2, #661	; 0x295
 8009ad0:	4919      	ldr	r1, [pc, #100]	; (8009b38 <mem_free+0x118>)
 8009ad2:	4813      	ldr	r0, [pc, #76]	; (8009b20 <mem_free+0x100>)
 8009ad4:	f009 fd56 	bl	8013584 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009ad8:	4815      	ldr	r0, [pc, #84]	; (8009b30 <mem_free+0x110>)
 8009ada:	f009 fcb8 	bl	801344e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009ade:	f009 fce9 	bl	80134b4 <sys_arch_protect>
 8009ae2:	61b8      	str	r0, [r7, #24]
 8009ae4:	69b8      	ldr	r0, [r7, #24]
 8009ae6:	f009 fcf3 	bl	80134d0 <sys_arch_unprotect>
    return;
 8009aea:	e012      	b.n	8009b12 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	2200      	movs	r2, #0
 8009af0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009af2:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <mem_free+0x11c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d202      	bcs.n	8009b02 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009afc:	4a0f      	ldr	r2, [pc, #60]	; (8009b3c <mem_free+0x11c>)
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009b02:	69f8      	ldr	r0, [r7, #28]
 8009b04:	f7ff fe56 	bl	80097b4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009b08:	4809      	ldr	r0, [pc, #36]	; (8009b30 <mem_free+0x110>)
 8009b0a:	f009 fca0 	bl	801344e <sys_mutex_unlock>
 8009b0e:	e000      	b.n	8009b12 <mem_free+0xf2>
    return;
 8009b10:	bf00      	nop
}
 8009b12:	3720      	adds	r7, #32
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	080147e8 	.word	0x080147e8
 8009b1c:	080148d8 	.word	0x080148d8
 8009b20:	08014830 	.word	0x08014830
 8009b24:	2000d484 	.word	0x2000d484
 8009b28:	2000d488 	.word	0x2000d488
 8009b2c:	080148fc 	.word	0x080148fc
 8009b30:	2000d48c 	.word	0x2000d48c
 8009b34:	08014918 	.word	0x08014918
 8009b38:	08014940 	.word	0x08014940
 8009b3c:	2000d490 	.word	0x2000d490

08009b40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009b4c:	887b      	ldrh	r3, [r7, #2]
 8009b4e:	3303      	adds	r3, #3
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009b58:	8bfb      	ldrh	r3, [r7, #30]
 8009b5a:	2b0b      	cmp	r3, #11
 8009b5c:	d801      	bhi.n	8009b62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009b5e:	230c      	movs	r3, #12
 8009b60:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009b62:	8bfb      	ldrh	r3, [r7, #30]
 8009b64:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d803      	bhi.n	8009b74 <mem_trim+0x34>
 8009b6c:	8bfa      	ldrh	r2, [r7, #30]
 8009b6e:	887b      	ldrh	r3, [r7, #2]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d201      	bcs.n	8009b78 <mem_trim+0x38>
    return NULL;
 8009b74:	2300      	movs	r3, #0
 8009b76:	e0dc      	b.n	8009d32 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009b78:	4b70      	ldr	r3, [pc, #448]	; (8009d3c <mem_trim+0x1fc>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d304      	bcc.n	8009b8c <mem_trim+0x4c>
 8009b82:	4b6f      	ldr	r3, [pc, #444]	; (8009d40 <mem_trim+0x200>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d306      	bcc.n	8009b9a <mem_trim+0x5a>
 8009b8c:	4b6d      	ldr	r3, [pc, #436]	; (8009d44 <mem_trim+0x204>)
 8009b8e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009b92:	496d      	ldr	r1, [pc, #436]	; (8009d48 <mem_trim+0x208>)
 8009b94:	486d      	ldr	r0, [pc, #436]	; (8009d4c <mem_trim+0x20c>)
 8009b96:	f009 fcf5 	bl	8013584 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009b9a:	4b68      	ldr	r3, [pc, #416]	; (8009d3c <mem_trim+0x1fc>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d304      	bcc.n	8009bae <mem_trim+0x6e>
 8009ba4:	4b66      	ldr	r3, [pc, #408]	; (8009d40 <mem_trim+0x200>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d307      	bcc.n	8009bbe <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009bae:	f009 fc81 	bl	80134b4 <sys_arch_protect>
 8009bb2:	60b8      	str	r0, [r7, #8]
 8009bb4:	68b8      	ldr	r0, [r7, #8]
 8009bb6:	f009 fc8b 	bl	80134d0 <sys_arch_unprotect>
    return rmem;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	e0b9      	b.n	8009d32 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3b08      	subs	r3, #8
 8009bc2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009bc4:	69b8      	ldr	r0, [r7, #24]
 8009bc6:	f7ff fde3 	bl	8009790 <mem_to_ptr>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	881a      	ldrh	r2, [r3, #0]
 8009bd2:	8afb      	ldrh	r3, [r7, #22]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3b08      	subs	r3, #8
 8009bda:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009bdc:	8bfa      	ldrh	r2, [r7, #30]
 8009bde:	8abb      	ldrh	r3, [r7, #20]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d906      	bls.n	8009bf2 <mem_trim+0xb2>
 8009be4:	4b57      	ldr	r3, [pc, #348]	; (8009d44 <mem_trim+0x204>)
 8009be6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009bea:	4959      	ldr	r1, [pc, #356]	; (8009d50 <mem_trim+0x210>)
 8009bec:	4857      	ldr	r0, [pc, #348]	; (8009d4c <mem_trim+0x20c>)
 8009bee:	f009 fcc9 	bl	8013584 <iprintf>
  if (newsize > size) {
 8009bf2:	8bfa      	ldrh	r2, [r7, #30]
 8009bf4:	8abb      	ldrh	r3, [r7, #20]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d901      	bls.n	8009bfe <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e099      	b.n	8009d32 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8009bfe:	8bfa      	ldrh	r2, [r7, #30]
 8009c00:	8abb      	ldrh	r3, [r7, #20]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d101      	bne.n	8009c0a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	e093      	b.n	8009d32 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009c0a:	4852      	ldr	r0, [pc, #328]	; (8009d54 <mem_trim+0x214>)
 8009c0c:	f009 fc10 	bl	8013430 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fda9 	bl	800976c <ptr_to_mem>
 8009c1a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	791b      	ldrb	r3, [r3, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d141      	bne.n	8009ca8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d106      	bne.n	8009c3e <mem_trim+0xfe>
 8009c30:	4b44      	ldr	r3, [pc, #272]	; (8009d44 <mem_trim+0x204>)
 8009c32:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009c36:	4948      	ldr	r1, [pc, #288]	; (8009d58 <mem_trim+0x218>)
 8009c38:	4844      	ldr	r0, [pc, #272]	; (8009d4c <mem_trim+0x20c>)
 8009c3a:	f009 fca3 	bl	8013584 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009c44:	8afa      	ldrh	r2, [r7, #22]
 8009c46:	8bfb      	ldrh	r3, [r7, #30]
 8009c48:	4413      	add	r3, r2
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009c50:	4b42      	ldr	r3, [pc, #264]	; (8009d5c <mem_trim+0x21c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	693a      	ldr	r2, [r7, #16]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d106      	bne.n	8009c68 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8009c5a:	89fb      	ldrh	r3, [r7, #14]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff fd85 	bl	800976c <ptr_to_mem>
 8009c62:	4603      	mov	r3, r0
 8009c64:	4a3d      	ldr	r2, [pc, #244]	; (8009d5c <mem_trim+0x21c>)
 8009c66:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009c68:	89fb      	ldrh	r3, [r7, #14]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff fd7e 	bl	800976c <ptr_to_mem>
 8009c70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	2200      	movs	r2, #0
 8009c76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	89ba      	ldrh	r2, [r7, #12]
 8009c7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	8afa      	ldrh	r2, [r7, #22]
 8009c82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	89fa      	ldrh	r2, [r7, #14]
 8009c88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d049      	beq.n	8009d2a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fd66 	bl	800976c <ptr_to_mem>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	89fb      	ldrh	r3, [r7, #14]
 8009ca4:	8053      	strh	r3, [r2, #2]
 8009ca6:	e040      	b.n	8009d2a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009ca8:	8bfb      	ldrh	r3, [r7, #30]
 8009caa:	f103 0214 	add.w	r2, r3, #20
 8009cae:	8abb      	ldrh	r3, [r7, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d83a      	bhi.n	8009d2a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009cb4:	8afa      	ldrh	r2, [r7, #22]
 8009cb6:	8bfb      	ldrh	r3, [r7, #30]
 8009cb8:	4413      	add	r3, r2
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d106      	bne.n	8009cda <mem_trim+0x19a>
 8009ccc:	4b1d      	ldr	r3, [pc, #116]	; (8009d44 <mem_trim+0x204>)
 8009cce:	f240 3216 	movw	r2, #790	; 0x316
 8009cd2:	4921      	ldr	r1, [pc, #132]	; (8009d58 <mem_trim+0x218>)
 8009cd4:	481d      	ldr	r0, [pc, #116]	; (8009d4c <mem_trim+0x20c>)
 8009cd6:	f009 fc55 	bl	8013584 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009cda:	89fb      	ldrh	r3, [r7, #14]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff fd45 	bl	800976c <ptr_to_mem>
 8009ce2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009ce4:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <mem_trim+0x21c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d202      	bcs.n	8009cf4 <mem_trim+0x1b4>
      lfree = mem2;
 8009cee:	4a1b      	ldr	r2, [pc, #108]	; (8009d5c <mem_trim+0x21c>)
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	8afa      	ldrh	r2, [r7, #22]
 8009d06:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	89fa      	ldrh	r2, [r7, #14]
 8009d0c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d007      	beq.n	8009d2a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	881b      	ldrh	r3, [r3, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fd24 	bl	800976c <ptr_to_mem>
 8009d24:	4602      	mov	r2, r0
 8009d26:	89fb      	ldrh	r3, [r7, #14]
 8009d28:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009d2a:	480a      	ldr	r0, [pc, #40]	; (8009d54 <mem_trim+0x214>)
 8009d2c:	f009 fb8f 	bl	801344e <sys_mutex_unlock>
  return rmem;
 8009d30:	687b      	ldr	r3, [r7, #4]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	2000d484 	.word	0x2000d484
 8009d40:	2000d488 	.word	0x2000d488
 8009d44:	080147e8 	.word	0x080147e8
 8009d48:	08014974 	.word	0x08014974
 8009d4c:	08014830 	.word	0x08014830
 8009d50:	0801498c 	.word	0x0801498c
 8009d54:	2000d48c 	.word	0x2000d48c
 8009d58:	080149ac 	.word	0x080149ac
 8009d5c:	2000d490 	.word	0x2000d490

08009d60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <mem_malloc+0x14>
    return NULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	e0e6      	b.n	8009f42 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	3303      	adds	r3, #3
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009d80:	8bbb      	ldrh	r3, [r7, #28]
 8009d82:	2b0b      	cmp	r3, #11
 8009d84:	d801      	bhi.n	8009d8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009d86:	230c      	movs	r3, #12
 8009d88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009d8a:	8bbb      	ldrh	r3, [r7, #28]
 8009d8c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d803      	bhi.n	8009d9c <mem_malloc+0x3c>
 8009d94:	8bba      	ldrh	r2, [r7, #28]
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d201      	bcs.n	8009da0 <mem_malloc+0x40>
    return NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e0d0      	b.n	8009f42 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009da0:	486a      	ldr	r0, [pc, #424]	; (8009f4c <mem_malloc+0x1ec>)
 8009da2:	f009 fb45 	bl	8013430 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009da6:	4b6a      	ldr	r3, [pc, #424]	; (8009f50 <mem_malloc+0x1f0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fcf0 	bl	8009790 <mem_to_ptr>
 8009db0:	4603      	mov	r3, r0
 8009db2:	83fb      	strh	r3, [r7, #30]
 8009db4:	e0b9      	b.n	8009f2a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009db6:	8bfb      	ldrh	r3, [r7, #30]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff fcd7 	bl	800976c <ptr_to_mem>
 8009dbe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	791b      	ldrb	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f040 80a9 	bne.w	8009f1c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	8bfb      	ldrh	r3, [r7, #30]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	f1a3 0208 	sub.w	r2, r3, #8
 8009dd8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	f0c0 809e 	bcc.w	8009f1c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	461a      	mov	r2, r3
 8009de6:	8bfb      	ldrh	r3, [r7, #30]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	f1a3 0208 	sub.w	r2, r3, #8
 8009dee:	8bbb      	ldrh	r3, [r7, #28]
 8009df0:	3314      	adds	r3, #20
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d335      	bcc.n	8009e62 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009df6:	8bfa      	ldrh	r2, [r7, #30]
 8009df8:	8bbb      	ldrh	r3, [r7, #28]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3308      	adds	r3, #8
 8009e00:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009e02:	8a7b      	ldrh	r3, [r7, #18]
 8009e04:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d106      	bne.n	8009e1a <mem_malloc+0xba>
 8009e0c:	4b51      	ldr	r3, [pc, #324]	; (8009f54 <mem_malloc+0x1f4>)
 8009e0e:	f240 3287 	movw	r2, #903	; 0x387
 8009e12:	4951      	ldr	r1, [pc, #324]	; (8009f58 <mem_malloc+0x1f8>)
 8009e14:	4851      	ldr	r0, [pc, #324]	; (8009f5c <mem_malloc+0x1fc>)
 8009e16:	f009 fbb5 	bl	8013584 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009e1a:	8a7b      	ldrh	r3, [r7, #18]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fca5 	bl	800976c <ptr_to_mem>
 8009e22:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	881a      	ldrh	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	8bfa      	ldrh	r2, [r7, #30]
 8009e36:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	8a7a      	ldrh	r2, [r7, #18]
 8009e3c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	2201      	movs	r2, #1
 8009e42:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00b      	beq.n	8009e68 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fc89 	bl	800976c <ptr_to_mem>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	8a7b      	ldrh	r3, [r7, #18]
 8009e5e:	8053      	strh	r3, [r2, #2]
 8009e60:	e002      	b.n	8009e68 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2201      	movs	r2, #1
 8009e66:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009e68:	4b39      	ldr	r3, [pc, #228]	; (8009f50 <mem_malloc+0x1f0>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d127      	bne.n	8009ec2 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8009e72:	4b37      	ldr	r3, [pc, #220]	; (8009f50 <mem_malloc+0x1f0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009e78:	e005      	b.n	8009e86 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7ff fc74 	bl	800976c <ptr_to_mem>
 8009e84:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	791b      	ldrb	r3, [r3, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d004      	beq.n	8009e98 <mem_malloc+0x138>
 8009e8e:	4b34      	ldr	r3, [pc, #208]	; (8009f60 <mem_malloc+0x200>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d1f0      	bne.n	8009e7a <mem_malloc+0x11a>
          }
          lfree = cur;
 8009e98:	4a2d      	ldr	r2, [pc, #180]	; (8009f50 <mem_malloc+0x1f0>)
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009e9e:	4b2c      	ldr	r3, [pc, #176]	; (8009f50 <mem_malloc+0x1f0>)
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4b2f      	ldr	r3, [pc, #188]	; (8009f60 <mem_malloc+0x200>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d00b      	beq.n	8009ec2 <mem_malloc+0x162>
 8009eaa:	4b29      	ldr	r3, [pc, #164]	; (8009f50 <mem_malloc+0x1f0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	791b      	ldrb	r3, [r3, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <mem_malloc+0x162>
 8009eb4:	4b27      	ldr	r3, [pc, #156]	; (8009f54 <mem_malloc+0x1f4>)
 8009eb6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009eba:	492a      	ldr	r1, [pc, #168]	; (8009f64 <mem_malloc+0x204>)
 8009ebc:	4827      	ldr	r0, [pc, #156]	; (8009f5c <mem_malloc+0x1fc>)
 8009ebe:	f009 fb61 	bl	8013584 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009ec2:	4822      	ldr	r0, [pc, #136]	; (8009f4c <mem_malloc+0x1ec>)
 8009ec4:	f009 fac3 	bl	801344e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009ec8:	8bba      	ldrh	r2, [r7, #28]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	4413      	add	r3, r2
 8009ece:	3308      	adds	r3, #8
 8009ed0:	4a23      	ldr	r2, [pc, #140]	; (8009f60 <mem_malloc+0x200>)
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d906      	bls.n	8009ee6 <mem_malloc+0x186>
 8009ed8:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <mem_malloc+0x1f4>)
 8009eda:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009ede:	4922      	ldr	r1, [pc, #136]	; (8009f68 <mem_malloc+0x208>)
 8009ee0:	481e      	ldr	r0, [pc, #120]	; (8009f5c <mem_malloc+0x1fc>)
 8009ee2:	f009 fb4f 	bl	8013584 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f003 0303 	and.w	r3, r3, #3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d006      	beq.n	8009efe <mem_malloc+0x19e>
 8009ef0:	4b18      	ldr	r3, [pc, #96]	; (8009f54 <mem_malloc+0x1f4>)
 8009ef2:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009ef6:	491d      	ldr	r1, [pc, #116]	; (8009f6c <mem_malloc+0x20c>)
 8009ef8:	4818      	ldr	r0, [pc, #96]	; (8009f5c <mem_malloc+0x1fc>)
 8009efa:	f009 fb43 	bl	8013584 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f003 0303 	and.w	r3, r3, #3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d006      	beq.n	8009f16 <mem_malloc+0x1b6>
 8009f08:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <mem_malloc+0x1f4>)
 8009f0a:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009f0e:	4918      	ldr	r1, [pc, #96]	; (8009f70 <mem_malloc+0x210>)
 8009f10:	4812      	ldr	r0, [pc, #72]	; (8009f5c <mem_malloc+0x1fc>)
 8009f12:	f009 fb37 	bl	8013584 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	3308      	adds	r3, #8
 8009f1a:	e012      	b.n	8009f42 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8009f1c:	8bfb      	ldrh	r3, [r7, #30]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fc24 	bl	800976c <ptr_to_mem>
 8009f24:	4603      	mov	r3, r0
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f2a:	8bfa      	ldrh	r2, [r7, #30]
 8009f2c:	8bb9      	ldrh	r1, [r7, #28]
 8009f2e:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8009f32:	1a5b      	subs	r3, r3, r1
 8009f34:	429a      	cmp	r2, r3
 8009f36:	f4ff af3e 	bcc.w	8009db6 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009f3a:	4804      	ldr	r0, [pc, #16]	; (8009f4c <mem_malloc+0x1ec>)
 8009f3c:	f009 fa87 	bl	801344e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3720      	adds	r7, #32
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	2000d48c 	.word	0x2000d48c
 8009f50:	2000d490 	.word	0x2000d490
 8009f54:	080147e8 	.word	0x080147e8
 8009f58:	080149ac 	.word	0x080149ac
 8009f5c:	08014830 	.word	0x08014830
 8009f60:	2000d488 	.word	0x2000d488
 8009f64:	080149c0 	.word	0x080149c0
 8009f68:	080149dc 	.word	0x080149dc
 8009f6c:	08014a0c 	.word	0x08014a0c
 8009f70:	08014a3c 	.word	0x08014a3c

08009f74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	3303      	adds	r3, #3
 8009f8a:	f023 0303 	bic.w	r3, r3, #3
 8009f8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e011      	b.n	8009fba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	461a      	mov	r2, r3
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	885b      	ldrh	r3, [r3, #2]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	dbe7      	blt.n	8009f96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009fda:	2300      	movs	r3, #0
 8009fdc:	80fb      	strh	r3, [r7, #6]
 8009fde:	e009      	b.n	8009ff4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009fe0:	88fb      	ldrh	r3, [r7, #6]
 8009fe2:	4a08      	ldr	r2, [pc, #32]	; (800a004 <memp_init+0x30>)
 8009fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff ffc3 	bl	8009f74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009fee:	88fb      	ldrh	r3, [r7, #6]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	80fb      	strh	r3, [r7, #6]
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	2b0c      	cmp	r3, #12
 8009ff8:	d9f2      	bls.n	8009fe0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	08017250 	.word	0x08017250

0800a008 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a010:	f009 fa50 	bl	80134b4 <sys_arch_protect>
 800a014:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d015      	beq.n	800a050 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	6812      	ldr	r2, [r2, #0]
 800a02c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	f003 0303 	and.w	r3, r3, #3
 800a034:	2b00      	cmp	r3, #0
 800a036:	d006      	beq.n	800a046 <do_memp_malloc_pool+0x3e>
 800a038:	4b09      	ldr	r3, [pc, #36]	; (800a060 <do_memp_malloc_pool+0x58>)
 800a03a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a03e:	4909      	ldr	r1, [pc, #36]	; (800a064 <do_memp_malloc_pool+0x5c>)
 800a040:	4809      	ldr	r0, [pc, #36]	; (800a068 <do_memp_malloc_pool+0x60>)
 800a042:	f009 fa9f 	bl	8013584 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f009 fa42 	bl	80134d0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	e003      	b.n	800a058 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f009 fa3d 	bl	80134d0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	08014a60 	.word	0x08014a60
 800a064:	08014a90 	.word	0x08014a90
 800a068:	08014ab4 	.word	0x08014ab4

0800a06c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d106      	bne.n	800a088 <memp_malloc_pool+0x1c>
 800a07a:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <memp_malloc_pool+0x38>)
 800a07c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a080:	4909      	ldr	r1, [pc, #36]	; (800a0a8 <memp_malloc_pool+0x3c>)
 800a082:	480a      	ldr	r0, [pc, #40]	; (800a0ac <memp_malloc_pool+0x40>)
 800a084:	f009 fa7e 	bl	8013584 <iprintf>
  if (desc == NULL) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <memp_malloc_pool+0x26>
    return NULL;
 800a08e:	2300      	movs	r3, #0
 800a090:	e003      	b.n	800a09a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff ffb8 	bl	800a008 <do_memp_malloc_pool>
 800a098:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	08014a60 	.word	0x08014a60
 800a0a8:	08014adc 	.word	0x08014adc
 800a0ac:	08014ab4 	.word	0x08014ab4

0800a0b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	2b0c      	cmp	r3, #12
 800a0be:	d908      	bls.n	800a0d2 <memp_malloc+0x22>
 800a0c0:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <memp_malloc+0x3c>)
 800a0c2:	f240 1257 	movw	r2, #343	; 0x157
 800a0c6:	490a      	ldr	r1, [pc, #40]	; (800a0f0 <memp_malloc+0x40>)
 800a0c8:	480a      	ldr	r0, [pc, #40]	; (800a0f4 <memp_malloc+0x44>)
 800a0ca:	f009 fa5b 	bl	8013584 <iprintf>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e008      	b.n	800a0e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <memp_malloc+0x48>)
 800a0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7ff ff94 	bl	800a008 <do_memp_malloc_pool>
 800a0e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	08014a60 	.word	0x08014a60
 800a0f0:	08014af0 	.word	0x08014af0
 800a0f4:	08014ab4 	.word	0x08014ab4
 800a0f8:	08017250 	.word	0x08017250

0800a0fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d006      	beq.n	800a11e <do_memp_free_pool+0x22>
 800a110:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <do_memp_free_pool+0x4c>)
 800a112:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a116:	490d      	ldr	r1, [pc, #52]	; (800a14c <do_memp_free_pool+0x50>)
 800a118:	480d      	ldr	r0, [pc, #52]	; (800a150 <do_memp_free_pool+0x54>)
 800a11a:	f009 fa33 	bl	8013584 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a122:	f009 f9c7 	bl	80134b4 <sys_arch_protect>
 800a126:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a13a:	68b8      	ldr	r0, [r7, #8]
 800a13c:	f009 f9c8 	bl	80134d0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	08014a60 	.word	0x08014a60
 800a14c:	08014b10 	.word	0x08014b10
 800a150:	08014ab4 	.word	0x08014ab4

0800a154 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <memp_free_pool+0x1e>
 800a164:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <memp_free_pool+0x3c>)
 800a166:	f240 1295 	movw	r2, #405	; 0x195
 800a16a:	490a      	ldr	r1, [pc, #40]	; (800a194 <memp_free_pool+0x40>)
 800a16c:	480a      	ldr	r0, [pc, #40]	; (800a198 <memp_free_pool+0x44>)
 800a16e:	f009 fa09 	bl	8013584 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <memp_free_pool+0x34>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d004      	beq.n	800a188 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff ffbb 	bl	800a0fc <do_memp_free_pool>
 800a186:	e000      	b.n	800a18a <memp_free_pool+0x36>
    return;
 800a188:	bf00      	nop
}
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	08014a60 	.word	0x08014a60
 800a194:	08014adc 	.word	0x08014adc
 800a198:	08014ab4 	.word	0x08014ab4

0800a19c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6039      	str	r1, [r7, #0]
 800a1a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	2b0c      	cmp	r3, #12
 800a1ac:	d907      	bls.n	800a1be <memp_free+0x22>
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <memp_free+0x44>)
 800a1b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a1b4:	490b      	ldr	r1, [pc, #44]	; (800a1e4 <memp_free+0x48>)
 800a1b6:	480c      	ldr	r0, [pc, #48]	; (800a1e8 <memp_free+0x4c>)
 800a1b8:	f009 f9e4 	bl	8013584 <iprintf>
 800a1bc:	e00c      	b.n	800a1d8 <memp_free+0x3c>

  if (mem == NULL) {
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d008      	beq.n	800a1d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	4a09      	ldr	r2, [pc, #36]	; (800a1ec <memp_free+0x50>)
 800a1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff ff94 	bl	800a0fc <do_memp_free_pool>
 800a1d4:	e000      	b.n	800a1d8 <memp_free+0x3c>
    return;
 800a1d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	08014a60 	.word	0x08014a60
 800a1e4:	08014b30 	.word	0x08014b30
 800a1e8:	08014ab4 	.word	0x08014ab4
 800a1ec:	08017250 	.word	0x08017250

0800a1f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a1f4:	bf00      	nop
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
	...

0800a200 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d108      	bne.n	800a226 <netif_add+0x26>
 800a214:	4b57      	ldr	r3, [pc, #348]	; (800a374 <netif_add+0x174>)
 800a216:	f240 1227 	movw	r2, #295	; 0x127
 800a21a:	4957      	ldr	r1, [pc, #348]	; (800a378 <netif_add+0x178>)
 800a21c:	4857      	ldr	r0, [pc, #348]	; (800a37c <netif_add+0x17c>)
 800a21e:	f009 f9b1 	bl	8013584 <iprintf>
 800a222:	2300      	movs	r3, #0
 800a224:	e0a2      	b.n	800a36c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d108      	bne.n	800a23e <netif_add+0x3e>
 800a22c:	4b51      	ldr	r3, [pc, #324]	; (800a374 <netif_add+0x174>)
 800a22e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a232:	4953      	ldr	r1, [pc, #332]	; (800a380 <netif_add+0x180>)
 800a234:	4851      	ldr	r0, [pc, #324]	; (800a37c <netif_add+0x17c>)
 800a236:	f009 f9a5 	bl	8013584 <iprintf>
 800a23a:	2300      	movs	r3, #0
 800a23c:	e096      	b.n	800a36c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a244:	4b4f      	ldr	r3, [pc, #316]	; (800a384 <netif_add+0x184>)
 800a246:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a24e:	4b4d      	ldr	r3, [pc, #308]	; (800a384 <netif_add+0x184>)
 800a250:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a258:	4b4a      	ldr	r3, [pc, #296]	; (800a384 <netif_add+0x184>)
 800a25a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4a45      	ldr	r2, [pc, #276]	; (800a388 <netif_add+0x188>)
 800a272:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a3a      	ldr	r2, [r7, #32]
 800a28c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a28e:	4b3f      	ldr	r3, [pc, #252]	; (800a38c <netif_add+0x18c>)
 800a290:	781a      	ldrb	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a29c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 f913 	bl	800a4d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	4798      	blx	r3
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <netif_add+0xba>
    return NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e058      	b.n	800a36c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2c0:	2bff      	cmp	r3, #255	; 0xff
 800a2c2:	d103      	bne.n	800a2cc <netif_add+0xcc>
        netif->num = 0;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a2d0:	4b2f      	ldr	r3, [pc, #188]	; (800a390 <netif_add+0x190>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e02b      	b.n	800a330 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d106      	bne.n	800a2ee <netif_add+0xee>
 800a2e0:	4b24      	ldr	r3, [pc, #144]	; (800a374 <netif_add+0x174>)
 800a2e2:	f240 128b 	movw	r2, #395	; 0x18b
 800a2e6:	492b      	ldr	r1, [pc, #172]	; (800a394 <netif_add+0x194>)
 800a2e8:	4824      	ldr	r0, [pc, #144]	; (800a37c <netif_add+0x17c>)
 800a2ea:	f009 f94b 	bl	8013584 <iprintf>
        num_netifs++;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	2bff      	cmp	r3, #255	; 0xff
 800a2f8:	dd06      	ble.n	800a308 <netif_add+0x108>
 800a2fa:	4b1e      	ldr	r3, [pc, #120]	; (800a374 <netif_add+0x174>)
 800a2fc:	f240 128d 	movw	r2, #397	; 0x18d
 800a300:	4925      	ldr	r1, [pc, #148]	; (800a398 <netif_add+0x198>)
 800a302:	481e      	ldr	r0, [pc, #120]	; (800a37c <netif_add+0x17c>)
 800a304:	f009 f93e 	bl	8013584 <iprintf>
        if (netif2->num == netif->num) {
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a314:	429a      	cmp	r2, r3
 800a316:	d108      	bne.n	800a32a <netif_add+0x12a>
          netif->num++;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a31e:	3301      	adds	r3, #1
 800a320:	b2da      	uxtb	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a328:	e005      	b.n	800a336 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1d0      	bne.n	800a2d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1be      	bne.n	800a2ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a342:	2bfe      	cmp	r3, #254	; 0xfe
 800a344:	d103      	bne.n	800a34e <netif_add+0x14e>
    netif_num = 0;
 800a346:	4b11      	ldr	r3, [pc, #68]	; (800a38c <netif_add+0x18c>)
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]
 800a34c:	e006      	b.n	800a35c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a354:	3301      	adds	r3, #1
 800a356:	b2da      	uxtb	r2, r3
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <netif_add+0x18c>)
 800a35a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a35c:	4b0c      	ldr	r3, [pc, #48]	; (800a390 <netif_add+0x190>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a364:	4a0a      	ldr	r2, [pc, #40]	; (800a390 <netif_add+0x190>)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a36a:	68fb      	ldr	r3, [r7, #12]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	08014b4c 	.word	0x08014b4c
 800a378:	08014be0 	.word	0x08014be0
 800a37c:	08014b9c 	.word	0x08014b9c
 800a380:	08014bfc 	.word	0x08014bfc
 800a384:	080172c4 	.word	0x080172c4
 800a388:	0800a7ab 	.word	0x0800a7ab
 800a38c:	20010568 	.word	0x20010568
 800a390:	20010560 	.word	0x20010560
 800a394:	08014c20 	.word	0x08014c20
 800a398:	08014c34 	.word	0x08014c34

0800a39c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f002 fb7d 	bl	800caa8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f006 fc91 	bl	8010cd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a3b6:	bf00      	nop
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <netif_do_set_ipaddr+0x20>
 800a3d2:	4b1d      	ldr	r3, [pc, #116]	; (800a448 <netif_do_set_ipaddr+0x88>)
 800a3d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a3d8:	491c      	ldr	r1, [pc, #112]	; (800a44c <netif_do_set_ipaddr+0x8c>)
 800a3da:	481d      	ldr	r0, [pc, #116]	; (800a450 <netif_do_set_ipaddr+0x90>)
 800a3dc:	f009 f8d2 	bl	8013584 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <netif_do_set_ipaddr+0x34>
 800a3e6:	4b18      	ldr	r3, [pc, #96]	; (800a448 <netif_do_set_ipaddr+0x88>)
 800a3e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a3ec:	4917      	ldr	r1, [pc, #92]	; (800a44c <netif_do_set_ipaddr+0x8c>)
 800a3ee:	4818      	ldr	r0, [pc, #96]	; (800a450 <netif_do_set_ipaddr+0x90>)
 800a3f0:	f009 f8c8 	bl	8013584 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d01c      	beq.n	800a43c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3304      	adds	r3, #4
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a412:	f107 0314 	add.w	r3, r7, #20
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff ffbf 	bl	800a39c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <netif_do_set_ipaddr+0x6a>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	e000      	b.n	800a42c <netif_do_set_ipaddr+0x6c>
 800a42a:	2300      	movs	r3, #0
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a430:	2101      	movs	r1, #1
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f000 f8d2 	bl	800a5dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a438:	2301      	movs	r3, #1
 800a43a:	e000      	b.n	800a43e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	08014b4c 	.word	0x08014b4c
 800a44c:	08014c64 	.word	0x08014c64
 800a450:	08014b9c 	.word	0x08014b9c

0800a454 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3308      	adds	r3, #8
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d00a      	beq.n	800a484 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <netif_do_set_netmask+0x26>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	e000      	b.n	800a47c <netif_do_set_netmask+0x28>
 800a47a:	2300      	movs	r3, #0
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a492:	b480      	push	{r7}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	330c      	adds	r3, #12
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d00a      	beq.n	800a4c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <netif_do_set_gw+0x26>
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	e000      	b.n	800a4ba <netif_do_set_gw+0x28>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a4ec:	4b1c      	ldr	r3, [pc, #112]	; (800a560 <netif_set_addr+0x90>)
 800a4ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a4f6:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <netif_set_addr+0x90>)
 800a4f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a500:	4b17      	ldr	r3, [pc, #92]	; (800a560 <netif_set_addr+0x90>)
 800a502:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <netif_set_addr+0x42>
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <netif_set_addr+0x46>
 800a512:	2301      	movs	r3, #1
 800a514:	e000      	b.n	800a518 <netif_set_addr+0x48>
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a520:	f107 0310 	add.w	r3, r7, #16
 800a524:	461a      	mov	r2, r3
 800a526:	68b9      	ldr	r1, [r7, #8]
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff ff49 	bl	800a3c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a52e:	69fa      	ldr	r2, [r7, #28]
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7ff ff8e 	bl	800a454 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff ffa8 	bl	800a492 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a548:	f107 0310 	add.w	r3, r7, #16
 800a54c:	461a      	mov	r2, r3
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff ff35 	bl	800a3c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a556:	bf00      	nop
 800a558:	3720      	adds	r7, #32
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	080172c4 	.word	0x080172c4

0800a564 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a56c:	4a04      	ldr	r2, [pc, #16]	; (800a580 <netif_set_default+0x1c>)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	20010564 	.word	0x20010564

0800a584 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d107      	bne.n	800a5a2 <netif_set_up+0x1e>
 800a592:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <netif_set_up+0x4c>)
 800a594:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a598:	490e      	ldr	r1, [pc, #56]	; (800a5d4 <netif_set_up+0x50>)
 800a59a:	480f      	ldr	r0, [pc, #60]	; (800a5d8 <netif_set_up+0x54>)
 800a59c:	f008 fff2 	bl	8013584 <iprintf>
 800a5a0:	e013      	b.n	800a5ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10c      	bne.n	800a5ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5b6:	f043 0301 	orr.w	r3, r3, #1
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a5c2:	2103      	movs	r1, #3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f809 	bl	800a5dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	08014b4c 	.word	0x08014b4c
 800a5d4:	08014cd4 	.word	0x08014cd4
 800a5d8:	08014b9c 	.word	0x08014b9c

0800a5dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <netif_issue_reports+0x20>
 800a5ee:	4b18      	ldr	r3, [pc, #96]	; (800a650 <netif_issue_reports+0x74>)
 800a5f0:	f240 326d 	movw	r2, #877	; 0x36d
 800a5f4:	4917      	ldr	r1, [pc, #92]	; (800a654 <netif_issue_reports+0x78>)
 800a5f6:	4818      	ldr	r0, [pc, #96]	; (800a658 <netif_issue_reports+0x7c>)
 800a5f8:	f008 ffc4 	bl	8013584 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a602:	f003 0304 	and.w	r3, r3, #4
 800a606:	2b00      	cmp	r3, #0
 800a608:	d01e      	beq.n	800a648 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a610:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a614:	2b00      	cmp	r3, #0
 800a616:	d017      	beq.n	800a648 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d013      	beq.n	800a64a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3304      	adds	r3, #4
 800a626:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00e      	beq.n	800a64a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a632:	f003 0308 	and.w	r3, r3, #8
 800a636:	2b00      	cmp	r3, #0
 800a638:	d007      	beq.n	800a64a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3304      	adds	r3, #4
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f007 fab3 	bl	8011bac <etharp_request>
 800a646:	e000      	b.n	800a64a <netif_issue_reports+0x6e>
    return;
 800a648:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	08014b4c 	.word	0x08014b4c
 800a654:	08014cf0 	.word	0x08014cf0
 800a658:	08014b9c 	.word	0x08014b9c

0800a65c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d107      	bne.n	800a67a <netif_set_down+0x1e>
 800a66a:	4b12      	ldr	r3, [pc, #72]	; (800a6b4 <netif_set_down+0x58>)
 800a66c:	f240 329b 	movw	r2, #923	; 0x39b
 800a670:	4911      	ldr	r1, [pc, #68]	; (800a6b8 <netif_set_down+0x5c>)
 800a672:	4812      	ldr	r0, [pc, #72]	; (800a6bc <netif_set_down+0x60>)
 800a674:	f008 ff86 	bl	8013584 <iprintf>
 800a678:	e019      	b.n	800a6ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d012      	beq.n	800a6ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a68e:	f023 0301 	bic.w	r3, r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6a0:	f003 0308 	and.w	r3, r3, #8
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f006 fe3d 	bl	8011328 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	08014b4c 	.word	0x08014b4c
 800a6b8:	08014d14 	.word	0x08014d14
 800a6bc:	08014b9c 	.word	0x08014b9c

0800a6c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d107      	bne.n	800a6de <netif_set_link_up+0x1e>
 800a6ce:	4b13      	ldr	r3, [pc, #76]	; (800a71c <netif_set_link_up+0x5c>)
 800a6d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a6d4:	4912      	ldr	r1, [pc, #72]	; (800a720 <netif_set_link_up+0x60>)
 800a6d6:	4813      	ldr	r0, [pc, #76]	; (800a724 <netif_set_link_up+0x64>)
 800a6d8:	f008 ff54 	bl	8013584 <iprintf>
 800a6dc:	e01b      	b.n	800a716 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d114      	bne.n	800a716 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6f2:	f043 0304 	orr.w	r3, r3, #4
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a6fe:	2103      	movs	r1, #3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff ff6b 	bl	800a5dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <netif_set_link_up+0x56>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	08014b4c 	.word	0x08014b4c
 800a720:	08014d34 	.word	0x08014d34
 800a724:	08014b9c 	.word	0x08014b9c

0800a728 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d107      	bne.n	800a746 <netif_set_link_down+0x1e>
 800a736:	4b11      	ldr	r3, [pc, #68]	; (800a77c <netif_set_link_down+0x54>)
 800a738:	f240 4206 	movw	r2, #1030	; 0x406
 800a73c:	4910      	ldr	r1, [pc, #64]	; (800a780 <netif_set_link_down+0x58>)
 800a73e:	4811      	ldr	r0, [pc, #68]	; (800a784 <netif_set_link_down+0x5c>)
 800a740:	f008 ff20 	bl	8013584 <iprintf>
 800a744:	e017      	b.n	800a776 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d010      	beq.n	800a776 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a75a:	f023 0304 	bic.w	r3, r3, #4
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <netif_set_link_down+0x4e>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	08014b4c 	.word	0x08014b4c
 800a780:	08014d58 	.word	0x08014d58
 800a784:	08014b9c 	.word	0x08014b9c

0800a788 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	61da      	str	r2, [r3, #28]
  }
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a7b6:	f06f 030b 	mvn.w	r3, #11
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d013      	beq.n	800a800 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a7d8:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <netif_get_by_index+0x48>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	e00c      	b.n	800a7fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	79fa      	ldrb	r2, [r7, #7]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d101      	bne.n	800a7f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	e006      	b.n	800a802 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1ef      	bne.n	800a7e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	20010560 	.word	0x20010560

0800a814 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a81a:	f008 fe4b 	bl	80134b4 <sys_arch_protect>
 800a81e:	6038      	str	r0, [r7, #0]
 800a820:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <pbuf_free_ooseq+0x44>)
 800a822:	2200      	movs	r2, #0
 800a824:	701a      	strb	r2, [r3, #0]
 800a826:	6838      	ldr	r0, [r7, #0]
 800a828:	f008 fe52 	bl	80134d0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a82c:	4b0b      	ldr	r3, [pc, #44]	; (800a85c <pbuf_free_ooseq+0x48>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	607b      	str	r3, [r7, #4]
 800a832:	e00a      	b.n	800a84a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f002 f971 	bl	800cb24 <tcp_free_ooseq>
      return;
 800a842:	e005      	b.n	800a850 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1f1      	bne.n	800a834 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20010569 	.word	0x20010569
 800a85c:	20010578 	.word	0x20010578

0800a860 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a868:	f7ff ffd4 	bl	800a814 <pbuf_free_ooseq>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a87a:	f008 fe1b 	bl	80134b4 <sys_arch_protect>
 800a87e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a880:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <pbuf_pool_is_empty+0x4c>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a886:	4b0e      	ldr	r3, [pc, #56]	; (800a8c0 <pbuf_pool_is_empty+0x4c>)
 800a888:	2201      	movs	r2, #1
 800a88a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f008 fe1f 	bl	80134d0 <sys_arch_unprotect>

  if (!queued) {
 800a892:	78fb      	ldrb	r3, [r7, #3]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10f      	bne.n	800a8b8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a898:	2100      	movs	r1, #0
 800a89a:	480a      	ldr	r0, [pc, #40]	; (800a8c4 <pbuf_pool_is_empty+0x50>)
 800a89c:	f7fe fe96 	bl	80095cc <tcpip_try_callback>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d008      	beq.n	800a8b8 <pbuf_pool_is_empty+0x44>
 800a8a6:	f008 fe05 	bl	80134b4 <sys_arch_protect>
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <pbuf_pool_is_empty+0x4c>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f008 fe0c 	bl	80134d0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20010569 	.word	0x20010569
 800a8c4:	0800a861 	.word	0x0800a861

0800a8c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	80fb      	strh	r3, [r7, #6]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	88fa      	ldrh	r2, [r7, #6]
 800a8ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	88ba      	ldrh	r2, [r7, #4]
 800a8f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a8f6:	8b3b      	ldrh	r3, [r7, #24]
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	7f3a      	ldrb	r2, [r7, #28]
 800a902:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2201      	movs	r2, #1
 800a908:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	73da      	strb	r2, [r3, #15]
}
 800a910:	bf00      	nop
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08c      	sub	sp, #48	; 0x30
 800a920:	af02      	add	r7, sp, #8
 800a922:	4603      	mov	r3, r0
 800a924:	71fb      	strb	r3, [r7, #7]
 800a926:	460b      	mov	r3, r1
 800a928:	80bb      	strh	r3, [r7, #4]
 800a92a:	4613      	mov	r3, r2
 800a92c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a92e:	79fb      	ldrb	r3, [r7, #7]
 800a930:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a932:	887b      	ldrh	r3, [r7, #2]
 800a934:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a938:	d07f      	beq.n	800aa3a <pbuf_alloc+0x11e>
 800a93a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a93e:	f300 80c8 	bgt.w	800aad2 <pbuf_alloc+0x1b6>
 800a942:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a946:	d010      	beq.n	800a96a <pbuf_alloc+0x4e>
 800a948:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a94c:	f300 80c1 	bgt.w	800aad2 <pbuf_alloc+0x1b6>
 800a950:	2b01      	cmp	r3, #1
 800a952:	d002      	beq.n	800a95a <pbuf_alloc+0x3e>
 800a954:	2b41      	cmp	r3, #65	; 0x41
 800a956:	f040 80bc 	bne.w	800aad2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a95a:	887a      	ldrh	r2, [r7, #2]
 800a95c:	88bb      	ldrh	r3, [r7, #4]
 800a95e:	4619      	mov	r1, r3
 800a960:	2000      	movs	r0, #0
 800a962:	f000 f8d1 	bl	800ab08 <pbuf_alloc_reference>
 800a966:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a968:	e0bd      	b.n	800aae6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a972:	88bb      	ldrh	r3, [r7, #4]
 800a974:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a976:	200c      	movs	r0, #12
 800a978:	f7ff fb9a 	bl	800a0b0 <memp_malloc>
 800a97c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d109      	bne.n	800a998 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a984:	f7ff ff76 	bl	800a874 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a98e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a990:	f000 faa8 	bl	800aee4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a994:	2300      	movs	r3, #0
 800a996:	e0a7      	b.n	800aae8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a99a:	3303      	adds	r3, #3
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	8b7a      	ldrh	r2, [r7, #26]
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	bf28      	it	cs
 800a9b0:	4613      	movcs	r3, r2
 800a9b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a9b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9b6:	3310      	adds	r3, #16
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	3303      	adds	r3, #3
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	89f9      	ldrh	r1, [r7, #14]
 800a9c6:	8b7a      	ldrh	r2, [r7, #26]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	9301      	str	r3, [sp, #4]
 800a9cc:	887b      	ldrh	r3, [r7, #2]
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4601      	mov	r1, r0
 800a9d4:	6938      	ldr	r0, [r7, #16]
 800a9d6:	f7ff ff77 	bl	800a8c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d006      	beq.n	800a9f4 <pbuf_alloc+0xd8>
 800a9e6:	4b42      	ldr	r3, [pc, #264]	; (800aaf0 <pbuf_alloc+0x1d4>)
 800a9e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9ec:	4941      	ldr	r1, [pc, #260]	; (800aaf4 <pbuf_alloc+0x1d8>)
 800a9ee:	4842      	ldr	r0, [pc, #264]	; (800aaf8 <pbuf_alloc+0x1dc>)
 800a9f0:	f008 fdc8 	bl	8013584 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a9f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9f6:	3303      	adds	r3, #3
 800a9f8:	f023 0303 	bic.w	r3, r3, #3
 800a9fc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800aa00:	d106      	bne.n	800aa10 <pbuf_alloc+0xf4>
 800aa02:	4b3b      	ldr	r3, [pc, #236]	; (800aaf0 <pbuf_alloc+0x1d4>)
 800aa04:	f44f 7281 	mov.w	r2, #258	; 0x102
 800aa08:	493c      	ldr	r1, [pc, #240]	; (800aafc <pbuf_alloc+0x1e0>)
 800aa0a:	483b      	ldr	r0, [pc, #236]	; (800aaf8 <pbuf_alloc+0x1dc>)
 800aa0c:	f008 fdba 	bl	8013584 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1a:	e002      	b.n	800aa22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800aa26:	8b7a      	ldrh	r2, [r7, #26]
 800aa28:	89fb      	ldrh	r3, [r7, #14]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800aa32:	8b7b      	ldrh	r3, [r7, #26]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d19e      	bne.n	800a976 <pbuf_alloc+0x5a>
      break;
 800aa38:	e055      	b.n	800aae6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800aa3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa3c:	3303      	adds	r3, #3
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f023 0303 	bic.w	r3, r3, #3
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	88bb      	ldrh	r3, [r7, #4]
 800aa48:	3303      	adds	r3, #3
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	f023 0303 	bic.w	r3, r3, #3
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	4413      	add	r3, r2
 800aa54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800aa56:	8b3b      	ldrh	r3, [r7, #24]
 800aa58:	3310      	adds	r3, #16
 800aa5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aa5c:	8b3a      	ldrh	r2, [r7, #24]
 800aa5e:	88bb      	ldrh	r3, [r7, #4]
 800aa60:	3303      	adds	r3, #3
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d306      	bcc.n	800aa78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800aa6a:	8afa      	ldrh	r2, [r7, #22]
 800aa6c:	88bb      	ldrh	r3, [r7, #4]
 800aa6e:	3303      	adds	r3, #3
 800aa70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d201      	bcs.n	800aa7c <pbuf_alloc+0x160>
        return NULL;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e035      	b.n	800aae8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800aa7c:	8afb      	ldrh	r3, [r7, #22]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff f96e 	bl	8009d60 <mem_malloc>
 800aa84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <pbuf_alloc+0x174>
        return NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e02b      	b.n	800aae8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aa90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa92:	3310      	adds	r3, #16
 800aa94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa96:	4413      	add	r3, r2
 800aa98:	3303      	adds	r3, #3
 800aa9a:	f023 0303 	bic.w	r3, r3, #3
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	88b9      	ldrh	r1, [r7, #4]
 800aaa2:	88ba      	ldrh	r2, [r7, #4]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	887b      	ldrh	r3, [r7, #2]
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	460b      	mov	r3, r1
 800aaae:	4601      	mov	r1, r0
 800aab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aab2:	f7ff ff09 	bl	800a8c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f003 0303 	and.w	r3, r3, #3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d010      	beq.n	800aae4 <pbuf_alloc+0x1c8>
 800aac2:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <pbuf_alloc+0x1d4>)
 800aac4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800aac8:	490d      	ldr	r1, [pc, #52]	; (800ab00 <pbuf_alloc+0x1e4>)
 800aaca:	480b      	ldr	r0, [pc, #44]	; (800aaf8 <pbuf_alloc+0x1dc>)
 800aacc:	f008 fd5a 	bl	8013584 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800aad0:	e008      	b.n	800aae4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aad2:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <pbuf_alloc+0x1d4>)
 800aad4:	f240 1227 	movw	r2, #295	; 0x127
 800aad8:	490a      	ldr	r1, [pc, #40]	; (800ab04 <pbuf_alloc+0x1e8>)
 800aada:	4807      	ldr	r0, [pc, #28]	; (800aaf8 <pbuf_alloc+0x1dc>)
 800aadc:	f008 fd52 	bl	8013584 <iprintf>
      return NULL;
 800aae0:	2300      	movs	r3, #0
 800aae2:	e001      	b.n	800aae8 <pbuf_alloc+0x1cc>
      break;
 800aae4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3728      	adds	r7, #40	; 0x28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	08014d7c 	.word	0x08014d7c
 800aaf4:	08014dac 	.word	0x08014dac
 800aaf8:	08014ddc 	.word	0x08014ddc
 800aafc:	08014e04 	.word	0x08014e04
 800ab00:	08014e38 	.word	0x08014e38
 800ab04:	08014e64 	.word	0x08014e64

0800ab08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af02      	add	r7, sp, #8
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	807b      	strh	r3, [r7, #2]
 800ab14:	4613      	mov	r3, r2
 800ab16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ab18:	883b      	ldrh	r3, [r7, #0]
 800ab1a:	2b41      	cmp	r3, #65	; 0x41
 800ab1c:	d009      	beq.n	800ab32 <pbuf_alloc_reference+0x2a>
 800ab1e:	883b      	ldrh	r3, [r7, #0]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d006      	beq.n	800ab32 <pbuf_alloc_reference+0x2a>
 800ab24:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <pbuf_alloc_reference+0x5c>)
 800ab26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ab2a:	490f      	ldr	r1, [pc, #60]	; (800ab68 <pbuf_alloc_reference+0x60>)
 800ab2c:	480f      	ldr	r0, [pc, #60]	; (800ab6c <pbuf_alloc_reference+0x64>)
 800ab2e:	f008 fd29 	bl	8013584 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ab32:	200b      	movs	r0, #11
 800ab34:	f7ff fabc 	bl	800a0b0 <memp_malloc>
 800ab38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e00b      	b.n	800ab5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ab44:	8879      	ldrh	r1, [r7, #2]
 800ab46:	887a      	ldrh	r2, [r7, #2]
 800ab48:	2300      	movs	r3, #0
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	883b      	ldrh	r3, [r7, #0]
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	460b      	mov	r3, r1
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7ff feb7 	bl	800a8c8 <pbuf_init_alloced_pbuf>
  return p;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	08014d7c 	.word	0x08014d7c
 800ab68:	08014e80 	.word	0x08014e80
 800ab6c:	08014ddc 	.word	0x08014ddc

0800ab70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af02      	add	r7, sp, #8
 800ab76:	607b      	str	r3, [r7, #4]
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	81bb      	strh	r3, [r7, #12]
 800ab80:	4613      	mov	r3, r2
 800ab82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ab88:	8a7b      	ldrh	r3, [r7, #18]
 800ab8a:	3303      	adds	r3, #3
 800ab8c:	f023 0203 	bic.w	r2, r3, #3
 800ab90:	89bb      	ldrh	r3, [r7, #12]
 800ab92:	441a      	add	r2, r3
 800ab94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d901      	bls.n	800ab9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e018      	b.n	800abd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d007      	beq.n	800abb4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800aba4:	8a7b      	ldrh	r3, [r7, #18]
 800aba6:	3303      	adds	r3, #3
 800aba8:	f023 0303 	bic.w	r3, r3, #3
 800abac:	6a3a      	ldr	r2, [r7, #32]
 800abae:	4413      	add	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	e001      	b.n	800abb8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	89b9      	ldrh	r1, [r7, #12]
 800abbc:	89ba      	ldrh	r2, [r7, #12]
 800abbe:	2302      	movs	r3, #2
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	897b      	ldrh	r3, [r7, #10]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	460b      	mov	r3, r1
 800abc8:	6979      	ldr	r1, [r7, #20]
 800abca:	f7ff fe7d 	bl	800a8c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800abce:	687b      	ldr	r3, [r7, #4]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <pbuf_realloc+0x20>
 800abea:	4b3a      	ldr	r3, [pc, #232]	; (800acd4 <pbuf_realloc+0xfc>)
 800abec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800abf0:	4939      	ldr	r1, [pc, #228]	; (800acd8 <pbuf_realloc+0x100>)
 800abf2:	483a      	ldr	r0, [pc, #232]	; (800acdc <pbuf_realloc+0x104>)
 800abf4:	f008 fcc6 	bl	8013584 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	891b      	ldrh	r3, [r3, #8]
 800abfc:	887a      	ldrh	r2, [r7, #2]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d263      	bcs.n	800acca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	891a      	ldrh	r2, [r3, #8]
 800ac06:	887b      	ldrh	r3, [r7, #2]
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ac0c:	887b      	ldrh	r3, [r7, #2]
 800ac0e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ac14:	e018      	b.n	800ac48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	895b      	ldrh	r3, [r3, #10]
 800ac1a:	897a      	ldrh	r2, [r7, #10]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	891a      	ldrh	r2, [r3, #8]
 800ac24:	893b      	ldrh	r3, [r7, #8]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <pbuf_realloc+0x70>
 800ac3a:	4b26      	ldr	r3, [pc, #152]	; (800acd4 <pbuf_realloc+0xfc>)
 800ac3c:	f240 12af 	movw	r2, #431	; 0x1af
 800ac40:	4927      	ldr	r1, [pc, #156]	; (800ace0 <pbuf_realloc+0x108>)
 800ac42:	4826      	ldr	r0, [pc, #152]	; (800acdc <pbuf_realloc+0x104>)
 800ac44:	f008 fc9e 	bl	8013584 <iprintf>
  while (rem_len > q->len) {
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	895b      	ldrh	r3, [r3, #10]
 800ac4c:	897a      	ldrh	r2, [r7, #10]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d8e1      	bhi.n	800ac16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	7b1b      	ldrb	r3, [r3, #12]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d121      	bne.n	800aca2 <pbuf_realloc+0xca>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	895b      	ldrh	r3, [r3, #10]
 800ac62:	897a      	ldrh	r2, [r7, #10]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d01c      	beq.n	800aca2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7b5b      	ldrb	r3, [r3, #13]
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d116      	bne.n	800aca2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	897b      	ldrh	r3, [r7, #10]
 800ac80:	4413      	add	r3, r2
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	4619      	mov	r1, r3
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7fe ff5a 	bl	8009b40 <mem_trim>
 800ac8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d106      	bne.n	800aca2 <pbuf_realloc+0xca>
 800ac94:	4b0f      	ldr	r3, [pc, #60]	; (800acd4 <pbuf_realloc+0xfc>)
 800ac96:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ac9a:	4912      	ldr	r1, [pc, #72]	; (800ace4 <pbuf_realloc+0x10c>)
 800ac9c:	480f      	ldr	r0, [pc, #60]	; (800acdc <pbuf_realloc+0x104>)
 800ac9e:	f008 fc71 	bl	8013584 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	897a      	ldrh	r2, [r7, #10]
 800aca6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	895a      	ldrh	r2, [r3, #10]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 f911 	bl	800aee4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	e000      	b.n	800accc <pbuf_realloc+0xf4>
    return;
 800acca:	bf00      	nop

}
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	08014d7c 	.word	0x08014d7c
 800acd8:	08014e94 	.word	0x08014e94
 800acdc:	08014ddc 	.word	0x08014ddc
 800ace0:	08014eac 	.word	0x08014eac
 800ace4:	08014ec4 	.word	0x08014ec4

0800ace8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	4613      	mov	r3, r2
 800acf4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d106      	bne.n	800ad0a <pbuf_add_header_impl+0x22>
 800acfc:	4b2b      	ldr	r3, [pc, #172]	; (800adac <pbuf_add_header_impl+0xc4>)
 800acfe:	f240 12df 	movw	r2, #479	; 0x1df
 800ad02:	492b      	ldr	r1, [pc, #172]	; (800adb0 <pbuf_add_header_impl+0xc8>)
 800ad04:	482b      	ldr	r0, [pc, #172]	; (800adb4 <pbuf_add_header_impl+0xcc>)
 800ad06:	f008 fc3d 	bl	8013584 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <pbuf_add_header_impl+0x30>
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad16:	d301      	bcc.n	800ad1c <pbuf_add_header_impl+0x34>
    return 1;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e043      	b.n	800ada4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <pbuf_add_header_impl+0x3e>
    return 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e03e      	b.n	800ada4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	891a      	ldrh	r2, [r3, #8]
 800ad2e:	8a7b      	ldrh	r3, [r7, #18]
 800ad30:	4413      	add	r3, r2
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	8a7a      	ldrh	r2, [r7, #18]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d901      	bls.n	800ad3e <pbuf_add_header_impl+0x56>
    return 1;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e032      	b.n	800ada4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	7b1b      	ldrb	r3, [r3, #12]
 800ad42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ad44:	8a3b      	ldrh	r3, [r7, #16]
 800ad46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00c      	beq.n	800ad68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	425b      	negs	r3, r3
 800ad56:	4413      	add	r3, r2
 800ad58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3310      	adds	r3, #16
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d20d      	bcs.n	800ad80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e01d      	b.n	800ada4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d006      	beq.n	800ad7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	425b      	negs	r3, r3
 800ad76:	4413      	add	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]
 800ad7a:	e001      	b.n	800ad80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e011      	b.n	800ada4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	895a      	ldrh	r2, [r3, #10]
 800ad8a:	8a7b      	ldrh	r3, [r7, #18]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	891a      	ldrh	r2, [r3, #8]
 800ad98:	8a7b      	ldrh	r3, [r7, #18]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	811a      	strh	r2, [r3, #8]


  return 0;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	08014d7c 	.word	0x08014d7c
 800adb0:	08014ee0 	.word	0x08014ee0
 800adb4:	08014ddc 	.word	0x08014ddc

0800adb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800adc2:	2200      	movs	r2, #0
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff ff8e 	bl	800ace8 <pbuf_add_header_impl>
 800adcc:	4603      	mov	r3, r0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d106      	bne.n	800adf6 <pbuf_remove_header+0x1e>
 800ade8:	4b20      	ldr	r3, [pc, #128]	; (800ae6c <pbuf_remove_header+0x94>)
 800adea:	f240 224b 	movw	r2, #587	; 0x24b
 800adee:	4920      	ldr	r1, [pc, #128]	; (800ae70 <pbuf_remove_header+0x98>)
 800adf0:	4820      	ldr	r0, [pc, #128]	; (800ae74 <pbuf_remove_header+0x9c>)
 800adf2:	f008 fbc7 	bl	8013584 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <pbuf_remove_header+0x2c>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae02:	d301      	bcc.n	800ae08 <pbuf_remove_header+0x30>
    return 1;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e02c      	b.n	800ae62 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d101      	bne.n	800ae12 <pbuf_remove_header+0x3a>
    return 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e027      	b.n	800ae62 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	895b      	ldrh	r3, [r3, #10]
 800ae1a:	89fa      	ldrh	r2, [r7, #14]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d908      	bls.n	800ae32 <pbuf_remove_header+0x5a>
 800ae20:	4b12      	ldr	r3, [pc, #72]	; (800ae6c <pbuf_remove_header+0x94>)
 800ae22:	f240 2255 	movw	r2, #597	; 0x255
 800ae26:	4914      	ldr	r1, [pc, #80]	; (800ae78 <pbuf_remove_header+0xa0>)
 800ae28:	4812      	ldr	r0, [pc, #72]	; (800ae74 <pbuf_remove_header+0x9c>)
 800ae2a:	f008 fbab 	bl	8013584 <iprintf>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e017      	b.n	800ae62 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	441a      	add	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	895a      	ldrh	r2, [r3, #10]
 800ae48:	89fb      	ldrh	r3, [r7, #14]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	891a      	ldrh	r2, [r3, #8]
 800ae56:	89fb      	ldrh	r3, [r7, #14]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	08014d7c 	.word	0x08014d7c
 800ae70:	08014ee0 	.word	0x08014ee0
 800ae74:	08014ddc 	.word	0x08014ddc
 800ae78:	08014eec 	.word	0x08014eec

0800ae7c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	807b      	strh	r3, [r7, #2]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ae8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	da08      	bge.n	800aea6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ae94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae98:	425b      	negs	r3, r3
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff ff9b 	bl	800add8 <pbuf_remove_header>
 800aea2:	4603      	mov	r3, r0
 800aea4:	e007      	b.n	800aeb6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800aea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aeaa:	787a      	ldrb	r2, [r7, #1]
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff ff1a 	bl	800ace8 <pbuf_add_header_impl>
 800aeb4:	4603      	mov	r3, r0
  }
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800aeca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aece:	2201      	movs	r2, #1
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff ffd2 	bl	800ae7c <pbuf_header_impl>
 800aed8:	4603      	mov	r3, r0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
	...

0800aee4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d106      	bne.n	800af06 <pbuf_free+0x22>
 800aef8:	4b3b      	ldr	r3, [pc, #236]	; (800afe8 <pbuf_free+0x104>)
 800aefa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800aefe:	493b      	ldr	r1, [pc, #236]	; (800afec <pbuf_free+0x108>)
 800af00:	483b      	ldr	r0, [pc, #236]	; (800aff0 <pbuf_free+0x10c>)
 800af02:	f008 fb3f 	bl	8013584 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800af06:	2300      	movs	r3, #0
 800af08:	e069      	b.n	800afde <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800af0e:	e062      	b.n	800afd6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800af10:	f008 fad0 	bl	80134b4 <sys_arch_protect>
 800af14:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	7b9b      	ldrb	r3, [r3, #14]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d106      	bne.n	800af2c <pbuf_free+0x48>
 800af1e:	4b32      	ldr	r3, [pc, #200]	; (800afe8 <pbuf_free+0x104>)
 800af20:	f240 22f1 	movw	r2, #753	; 0x2f1
 800af24:	4933      	ldr	r1, [pc, #204]	; (800aff4 <pbuf_free+0x110>)
 800af26:	4832      	ldr	r0, [pc, #200]	; (800aff0 <pbuf_free+0x10c>)
 800af28:	f008 fb2c 	bl	8013584 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	7b9b      	ldrb	r3, [r3, #14]
 800af30:	3b01      	subs	r3, #1
 800af32:	b2da      	uxtb	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	739a      	strb	r2, [r3, #14]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7b9b      	ldrb	r3, [r3, #14]
 800af3c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800af3e:	69b8      	ldr	r0, [r7, #24]
 800af40:	f008 fac6 	bl	80134d0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d143      	bne.n	800afd2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	7b1b      	ldrb	r3, [r3, #12]
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	7b5b      	ldrb	r3, [r3, #13]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d011      	beq.n	800af8a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <pbuf_free+0x9c>
 800af72:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <pbuf_free+0x104>)
 800af74:	f240 22ff 	movw	r2, #767	; 0x2ff
 800af78:	491f      	ldr	r1, [pc, #124]	; (800aff8 <pbuf_free+0x114>)
 800af7a:	481d      	ldr	r0, [pc, #116]	; (800aff0 <pbuf_free+0x10c>)
 800af7c:	f008 fb02 	bl	8013584 <iprintf>
        pc->custom_free_function(p);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	4798      	blx	r3
 800af88:	e01d      	b.n	800afc6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d104      	bne.n	800af9a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	200c      	movs	r0, #12
 800af94:	f7ff f902 	bl	800a19c <memp_free>
 800af98:	e015      	b.n	800afc6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d104      	bne.n	800afaa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	200b      	movs	r0, #11
 800afa4:	f7ff f8fa 	bl	800a19c <memp_free>
 800afa8:	e00d      	b.n	800afc6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <pbuf_free+0xd4>
          mem_free(p);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7fe fd35 	bl	8009a20 <mem_free>
 800afb6:	e006      	b.n	800afc6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800afb8:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <pbuf_free+0x104>)
 800afba:	f240 320f 	movw	r2, #783	; 0x30f
 800afbe:	490f      	ldr	r1, [pc, #60]	; (800affc <pbuf_free+0x118>)
 800afc0:	480b      	ldr	r0, [pc, #44]	; (800aff0 <pbuf_free+0x10c>)
 800afc2:	f008 fadf 	bl	8013584 <iprintf>
        }
      }
      count++;
 800afc6:	7ffb      	ldrb	r3, [r7, #31]
 800afc8:	3301      	adds	r3, #1
 800afca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	e001      	b.n	800afd6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d199      	bne.n	800af10 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800afdc:	7ffb      	ldrb	r3, [r7, #31]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3720      	adds	r7, #32
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	08014d7c 	.word	0x08014d7c
 800afec:	08014ee0 	.word	0x08014ee0
 800aff0:	08014ddc 	.word	0x08014ddc
 800aff4:	08014f0c 	.word	0x08014f0c
 800aff8:	08014f24 	.word	0x08014f24
 800affc:	08014f48 	.word	0x08014f48

0800b000 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b00c:	e005      	b.n	800b01a <pbuf_clen+0x1a>
    ++len;
 800b00e:	89fb      	ldrh	r3, [r7, #14]
 800b010:	3301      	adds	r3, #1
 800b012:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1f6      	bne.n	800b00e <pbuf_clen+0xe>
  }
  return len;
 800b020:	89fb      	ldrh	r3, [r7, #14]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
	...

0800b030 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d016      	beq.n	800b06c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b03e:	f008 fa39 	bl	80134b4 <sys_arch_protect>
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	7b9b      	ldrb	r3, [r3, #14]
 800b048:	3301      	adds	r3, #1
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	739a      	strb	r2, [r3, #14]
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f008 fa3d 	bl	80134d0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	7b9b      	ldrb	r3, [r3, #14]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d106      	bne.n	800b06c <pbuf_ref+0x3c>
 800b05e:	4b05      	ldr	r3, [pc, #20]	; (800b074 <pbuf_ref+0x44>)
 800b060:	f240 3242 	movw	r2, #834	; 0x342
 800b064:	4904      	ldr	r1, [pc, #16]	; (800b078 <pbuf_ref+0x48>)
 800b066:	4805      	ldr	r0, [pc, #20]	; (800b07c <pbuf_ref+0x4c>)
 800b068:	f008 fa8c 	bl	8013584 <iprintf>
  }
}
 800b06c:	bf00      	nop
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	08014d7c 	.word	0x08014d7c
 800b078:	08014f5c 	.word	0x08014f5c
 800b07c:	08014ddc 	.word	0x08014ddc

0800b080 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <pbuf_cat+0x16>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d107      	bne.n	800b0a6 <pbuf_cat+0x26>
 800b096:	4b20      	ldr	r3, [pc, #128]	; (800b118 <pbuf_cat+0x98>)
 800b098:	f240 3259 	movw	r2, #857	; 0x359
 800b09c:	491f      	ldr	r1, [pc, #124]	; (800b11c <pbuf_cat+0x9c>)
 800b09e:	4820      	ldr	r0, [pc, #128]	; (800b120 <pbuf_cat+0xa0>)
 800b0a0:	f008 fa70 	bl	8013584 <iprintf>
 800b0a4:	e034      	b.n	800b110 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	e00a      	b.n	800b0c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	891a      	ldrh	r2, [r3, #8]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	891b      	ldrh	r3, [r3, #8]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1f0      	bne.n	800b0ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	891a      	ldrh	r2, [r3, #8]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	895b      	ldrh	r3, [r3, #10]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d006      	beq.n	800b0e4 <pbuf_cat+0x64>
 800b0d6:	4b10      	ldr	r3, [pc, #64]	; (800b118 <pbuf_cat+0x98>)
 800b0d8:	f240 3262 	movw	r2, #866	; 0x362
 800b0dc:	4911      	ldr	r1, [pc, #68]	; (800b124 <pbuf_cat+0xa4>)
 800b0de:	4810      	ldr	r0, [pc, #64]	; (800b120 <pbuf_cat+0xa0>)
 800b0e0:	f008 fa50 	bl	8013584 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <pbuf_cat+0x7a>
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	; (800b118 <pbuf_cat+0x98>)
 800b0ee:	f240 3263 	movw	r2, #867	; 0x363
 800b0f2:	490d      	ldr	r1, [pc, #52]	; (800b128 <pbuf_cat+0xa8>)
 800b0f4:	480a      	ldr	r0, [pc, #40]	; (800b120 <pbuf_cat+0xa0>)
 800b0f6:	f008 fa45 	bl	8013584 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	891a      	ldrh	r2, [r3, #8]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	891b      	ldrh	r3, [r3, #8]
 800b102:	4413      	add	r3, r2
 800b104:	b29a      	uxth	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	08014d7c 	.word	0x08014d7c
 800b11c:	08014f70 	.word	0x08014f70
 800b120:	08014ddc 	.word	0x08014ddc
 800b124:	08014fa8 	.word	0x08014fa8
 800b128:	08014fd8 	.word	0x08014fd8

0800b12c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]
 800b13a:	2300      	movs	r3, #0
 800b13c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d008      	beq.n	800b156 <pbuf_copy+0x2a>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d005      	beq.n	800b156 <pbuf_copy+0x2a>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	891a      	ldrh	r2, [r3, #8]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	891b      	ldrh	r3, [r3, #8]
 800b152:	429a      	cmp	r2, r3
 800b154:	d209      	bcs.n	800b16a <pbuf_copy+0x3e>
 800b156:	4b57      	ldr	r3, [pc, #348]	; (800b2b4 <pbuf_copy+0x188>)
 800b158:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b15c:	4956      	ldr	r1, [pc, #344]	; (800b2b8 <pbuf_copy+0x18c>)
 800b15e:	4857      	ldr	r0, [pc, #348]	; (800b2bc <pbuf_copy+0x190>)
 800b160:	f008 fa10 	bl	8013584 <iprintf>
 800b164:	f06f 030f 	mvn.w	r3, #15
 800b168:	e09f      	b.n	800b2aa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	895b      	ldrh	r3, [r3, #10]
 800b16e:	461a      	mov	r2, r3
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	895b      	ldrh	r3, [r3, #10]
 800b178:	4619      	mov	r1, r3
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	1acb      	subs	r3, r1, r3
 800b17e:	429a      	cmp	r2, r3
 800b180:	d306      	bcc.n	800b190 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	895b      	ldrh	r3, [r3, #10]
 800b186:	461a      	mov	r2, r3
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e005      	b.n	800b19c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	895b      	ldrh	r3, [r3, #10]
 800b194:	461a      	mov	r2, r3
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	18d0      	adds	r0, r2, r3
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	f008 f9d2 	bl	8013558 <memcpy>
    offset_to += len;
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	895b      	ldrh	r3, [r3, #10]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d906      	bls.n	800b1de <pbuf_copy+0xb2>
 800b1d0:	4b38      	ldr	r3, [pc, #224]	; (800b2b4 <pbuf_copy+0x188>)
 800b1d2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b1d6:	493a      	ldr	r1, [pc, #232]	; (800b2c0 <pbuf_copy+0x194>)
 800b1d8:	4838      	ldr	r0, [pc, #224]	; (800b2bc <pbuf_copy+0x190>)
 800b1da:	f008 f9d3 	bl	8013584 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	895b      	ldrh	r3, [r3, #10]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d906      	bls.n	800b1f8 <pbuf_copy+0xcc>
 800b1ea:	4b32      	ldr	r3, [pc, #200]	; (800b2b4 <pbuf_copy+0x188>)
 800b1ec:	f240 32da 	movw	r2, #986	; 0x3da
 800b1f0:	4934      	ldr	r1, [pc, #208]	; (800b2c4 <pbuf_copy+0x198>)
 800b1f2:	4832      	ldr	r0, [pc, #200]	; (800b2bc <pbuf_copy+0x190>)
 800b1f4:	f008 f9c6 	bl	8013584 <iprintf>
    if (offset_from >= p_from->len) {
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	895b      	ldrh	r3, [r3, #10]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	4293      	cmp	r3, r2
 800b202:	d304      	bcc.n	800b20e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	895b      	ldrh	r3, [r3, #10]
 800b212:	461a      	mov	r2, r3
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	4293      	cmp	r3, r2
 800b218:	d114      	bne.n	800b244 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10c      	bne.n	800b244 <pbuf_copy+0x118>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d009      	beq.n	800b244 <pbuf_copy+0x118>
 800b230:	4b20      	ldr	r3, [pc, #128]	; (800b2b4 <pbuf_copy+0x188>)
 800b232:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b236:	4924      	ldr	r1, [pc, #144]	; (800b2c8 <pbuf_copy+0x19c>)
 800b238:	4820      	ldr	r0, [pc, #128]	; (800b2bc <pbuf_copy+0x190>)
 800b23a:	f008 f9a3 	bl	8013584 <iprintf>
 800b23e:	f06f 030f 	mvn.w	r3, #15
 800b242:	e032      	b.n	800b2aa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d013      	beq.n	800b272 <pbuf_copy+0x146>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	895a      	ldrh	r2, [r3, #10]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	891b      	ldrh	r3, [r3, #8]
 800b252:	429a      	cmp	r2, r3
 800b254:	d10d      	bne.n	800b272 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d009      	beq.n	800b272 <pbuf_copy+0x146>
 800b25e:	4b15      	ldr	r3, [pc, #84]	; (800b2b4 <pbuf_copy+0x188>)
 800b260:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b264:	4919      	ldr	r1, [pc, #100]	; (800b2cc <pbuf_copy+0x1a0>)
 800b266:	4815      	ldr	r0, [pc, #84]	; (800b2bc <pbuf_copy+0x190>)
 800b268:	f008 f98c 	bl	8013584 <iprintf>
 800b26c:	f06f 0305 	mvn.w	r3, #5
 800b270:	e01b      	b.n	800b2aa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d013      	beq.n	800b2a0 <pbuf_copy+0x174>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	895a      	ldrh	r2, [r3, #10]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	891b      	ldrh	r3, [r3, #8]
 800b280:	429a      	cmp	r2, r3
 800b282:	d10d      	bne.n	800b2a0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d009      	beq.n	800b2a0 <pbuf_copy+0x174>
 800b28c:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <pbuf_copy+0x188>)
 800b28e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b292:	490e      	ldr	r1, [pc, #56]	; (800b2cc <pbuf_copy+0x1a0>)
 800b294:	4809      	ldr	r0, [pc, #36]	; (800b2bc <pbuf_copy+0x190>)
 800b296:	f008 f975 	bl	8013584 <iprintf>
 800b29a:	f06f 0305 	mvn.w	r3, #5
 800b29e:	e004      	b.n	800b2aa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f47f af61 	bne.w	800b16a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	08014d7c 	.word	0x08014d7c
 800b2b8:	08015024 	.word	0x08015024
 800b2bc:	08014ddc 	.word	0x08014ddc
 800b2c0:	08015054 	.word	0x08015054
 800b2c4:	0801506c 	.word	0x0801506c
 800b2c8:	08015088 	.word	0x08015088
 800b2cc:	08015098 	.word	0x08015098

0800b2d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	4611      	mov	r1, r2
 800b2dc:	461a      	mov	r2, r3
 800b2de:	460b      	mov	r3, r1
 800b2e0:	80fb      	strh	r3, [r7, #6]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d108      	bne.n	800b306 <pbuf_copy_partial+0x36>
 800b2f4:	4b2b      	ldr	r3, [pc, #172]	; (800b3a4 <pbuf_copy_partial+0xd4>)
 800b2f6:	f240 420a 	movw	r2, #1034	; 0x40a
 800b2fa:	492b      	ldr	r1, [pc, #172]	; (800b3a8 <pbuf_copy_partial+0xd8>)
 800b2fc:	482b      	ldr	r0, [pc, #172]	; (800b3ac <pbuf_copy_partial+0xdc>)
 800b2fe:	f008 f941 	bl	8013584 <iprintf>
 800b302:	2300      	movs	r3, #0
 800b304:	e04a      	b.n	800b39c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d108      	bne.n	800b31e <pbuf_copy_partial+0x4e>
 800b30c:	4b25      	ldr	r3, [pc, #148]	; (800b3a4 <pbuf_copy_partial+0xd4>)
 800b30e:	f240 420b 	movw	r2, #1035	; 0x40b
 800b312:	4927      	ldr	r1, [pc, #156]	; (800b3b0 <pbuf_copy_partial+0xe0>)
 800b314:	4825      	ldr	r0, [pc, #148]	; (800b3ac <pbuf_copy_partial+0xdc>)
 800b316:	f008 f935 	bl	8013584 <iprintf>
 800b31a:	2300      	movs	r3, #0
 800b31c:	e03e      	b.n	800b39c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	61fb      	str	r3, [r7, #28]
 800b322:	e034      	b.n	800b38e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b324:	88bb      	ldrh	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <pbuf_copy_partial+0x70>
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	895b      	ldrh	r3, [r3, #10]
 800b32e:	88ba      	ldrh	r2, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d305      	bcc.n	800b340 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	895b      	ldrh	r3, [r3, #10]
 800b338:	88ba      	ldrh	r2, [r7, #4]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	80bb      	strh	r3, [r7, #4]
 800b33e:	e023      	b.n	800b388 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	895a      	ldrh	r2, [r3, #10]
 800b344:	88bb      	ldrh	r3, [r7, #4]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b34a:	8b3a      	ldrh	r2, [r7, #24]
 800b34c:	88fb      	ldrh	r3, [r7, #6]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d901      	bls.n	800b356 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b352:	88fb      	ldrh	r3, [r7, #6]
 800b354:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b356:	8b7b      	ldrh	r3, [r7, #26]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	18d0      	adds	r0, r2, r3
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	88bb      	ldrh	r3, [r7, #4]
 800b362:	4413      	add	r3, r2
 800b364:	8b3a      	ldrh	r2, [r7, #24]
 800b366:	4619      	mov	r1, r3
 800b368:	f008 f8f6 	bl	8013558 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b36c:	8afa      	ldrh	r2, [r7, #22]
 800b36e:	8b3b      	ldrh	r3, [r7, #24]
 800b370:	4413      	add	r3, r2
 800b372:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b374:	8b7a      	ldrh	r2, [r7, #26]
 800b376:	8b3b      	ldrh	r3, [r7, #24]
 800b378:	4413      	add	r3, r2
 800b37a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b37c:	88fa      	ldrh	r2, [r7, #6]
 800b37e:	8b3b      	ldrh	r3, [r7, #24]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	88fb      	ldrh	r3, [r7, #6]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <pbuf_copy_partial+0xca>
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1c4      	bne.n	800b324 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b39a:	8afb      	ldrh	r3, [r7, #22]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3720      	adds	r7, #32
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	08014d7c 	.word	0x08014d7c
 800b3a8:	080150c4 	.word	0x080150c4
 800b3ac:	08014ddc 	.word	0x08014ddc
 800b3b0:	080150e4 	.word	0x080150e4

0800b3b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	603a      	str	r2, [r7, #0]
 800b3be:	71fb      	strb	r3, [r7, #7]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	8919      	ldrh	r1, [r3, #8]
 800b3c8:	88ba      	ldrh	r2, [r7, #4]
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7ff faa5 	bl	800a91c <pbuf_alloc>
 800b3d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <pbuf_clone+0x2a>
    return NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e011      	b.n	800b402 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fea3 	bl	800b12c <pbuf_copy>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b3ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d006      	beq.n	800b400 <pbuf_clone+0x4c>
 800b3f2:	4b06      	ldr	r3, [pc, #24]	; (800b40c <pbuf_clone+0x58>)
 800b3f4:	f240 5224 	movw	r2, #1316	; 0x524
 800b3f8:	4905      	ldr	r1, [pc, #20]	; (800b410 <pbuf_clone+0x5c>)
 800b3fa:	4806      	ldr	r0, [pc, #24]	; (800b414 <pbuf_clone+0x60>)
 800b3fc:	f008 f8c2 	bl	8013584 <iprintf>
  return q;
 800b400:	68fb      	ldr	r3, [r7, #12]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	08014d7c 	.word	0x08014d7c
 800b410:	080151f0 	.word	0x080151f0
 800b414:	08014ddc 	.word	0x08014ddc

0800b418 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b41c:	f008 f8ca 	bl	80135b4 <rand>
 800b420:	4603      	mov	r3, r0
 800b422:	b29b      	uxth	r3, r3
 800b424:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b428:	b29b      	uxth	r3, r3
 800b42a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b42e:	b29a      	uxth	r2, r3
 800b430:	4b01      	ldr	r3, [pc, #4]	; (800b438 <tcp_init+0x20>)
 800b432:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b434:	bf00      	nop
 800b436:	bd80      	pop	{r7, pc}
 800b438:	20000024 	.word	0x20000024

0800b43c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	7d1b      	ldrb	r3, [r3, #20]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d105      	bne.n	800b458 <tcp_free+0x1c>
 800b44c:	4b06      	ldr	r3, [pc, #24]	; (800b468 <tcp_free+0x2c>)
 800b44e:	22d4      	movs	r2, #212	; 0xd4
 800b450:	4906      	ldr	r1, [pc, #24]	; (800b46c <tcp_free+0x30>)
 800b452:	4807      	ldr	r0, [pc, #28]	; (800b470 <tcp_free+0x34>)
 800b454:	f008 f896 	bl	8013584 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b458:	6879      	ldr	r1, [r7, #4]
 800b45a:	2001      	movs	r0, #1
 800b45c:	f7fe fe9e 	bl	800a19c <memp_free>
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	0801527c 	.word	0x0801527c
 800b46c:	080152ac 	.word	0x080152ac
 800b470:	080152c0 	.word	0x080152c0

0800b474 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7d1b      	ldrb	r3, [r3, #20]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d105      	bne.n	800b490 <tcp_free_listen+0x1c>
 800b484:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <tcp_free_listen+0x2c>)
 800b486:	22df      	movs	r2, #223	; 0xdf
 800b488:	4906      	ldr	r1, [pc, #24]	; (800b4a4 <tcp_free_listen+0x30>)
 800b48a:	4807      	ldr	r0, [pc, #28]	; (800b4a8 <tcp_free_listen+0x34>)
 800b48c:	f008 f87a 	bl	8013584 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	2002      	movs	r0, #2
 800b494:	f7fe fe82 	bl	800a19c <memp_free>
}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	0801527c 	.word	0x0801527c
 800b4a4:	080152e8 	.word	0x080152e8
 800b4a8:	080152c0 	.word	0x080152c0

0800b4ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b4b0:	f000 fea2 	bl	800c1f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b4b4:	4b07      	ldr	r3, [pc, #28]	; (800b4d4 <tcp_tmr+0x28>)
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <tcp_tmr+0x28>)
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <tcp_tmr+0x28>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b4cc:	f000 fb54 	bl	800bb78 <tcp_slowtmr>
  }
}
 800b4d0:	bf00      	nop
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20010581 	.word	0x20010581

0800b4d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d105      	bne.n	800b4f4 <tcp_remove_listener+0x1c>
 800b4e8:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <tcp_remove_listener+0x48>)
 800b4ea:	22ff      	movs	r2, #255	; 0xff
 800b4ec:	490d      	ldr	r1, [pc, #52]	; (800b524 <tcp_remove_listener+0x4c>)
 800b4ee:	480e      	ldr	r0, [pc, #56]	; (800b528 <tcp_remove_listener+0x50>)
 800b4f0:	f008 f848 	bl	8013584 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	e00a      	b.n	800b510 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d102      	bne.n	800b50a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1f1      	bne.n	800b4fa <tcp_remove_listener+0x22>
    }
  }
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	0801527c 	.word	0x0801527c
 800b524:	08015304 	.word	0x08015304
 800b528:	080152c0 	.word	0x080152c0

0800b52c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d106      	bne.n	800b548 <tcp_listen_closed+0x1c>
 800b53a:	4b14      	ldr	r3, [pc, #80]	; (800b58c <tcp_listen_closed+0x60>)
 800b53c:	f240 1211 	movw	r2, #273	; 0x111
 800b540:	4913      	ldr	r1, [pc, #76]	; (800b590 <tcp_listen_closed+0x64>)
 800b542:	4814      	ldr	r0, [pc, #80]	; (800b594 <tcp_listen_closed+0x68>)
 800b544:	f008 f81e 	bl	8013584 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	7d1b      	ldrb	r3, [r3, #20]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d006      	beq.n	800b55e <tcp_listen_closed+0x32>
 800b550:	4b0e      	ldr	r3, [pc, #56]	; (800b58c <tcp_listen_closed+0x60>)
 800b552:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b556:	4910      	ldr	r1, [pc, #64]	; (800b598 <tcp_listen_closed+0x6c>)
 800b558:	480e      	ldr	r0, [pc, #56]	; (800b594 <tcp_listen_closed+0x68>)
 800b55a:	f008 f813 	bl	8013584 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b55e:	2301      	movs	r3, #1
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e00b      	b.n	800b57c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b564:	4a0d      	ldr	r2, [pc, #52]	; (800b59c <tcp_listen_closed+0x70>)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	4618      	mov	r0, r3
 800b572:	f7ff ffb1 	bl	800b4d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3301      	adds	r3, #1
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d9f0      	bls.n	800b564 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b582:	bf00      	nop
 800b584:	bf00      	nop
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	0801527c 	.word	0x0801527c
 800b590:	0801532c 	.word	0x0801532c
 800b594:	080152c0 	.word	0x080152c0
 800b598:	08015338 	.word	0x08015338
 800b59c:	0801729c 	.word	0x0801729c

0800b5a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b5a0:	b5b0      	push	{r4, r5, r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af04      	add	r7, sp, #16
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <tcp_close_shutdown+0x20>
 800b5b2:	4b63      	ldr	r3, [pc, #396]	; (800b740 <tcp_close_shutdown+0x1a0>)
 800b5b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b5b8:	4962      	ldr	r1, [pc, #392]	; (800b744 <tcp_close_shutdown+0x1a4>)
 800b5ba:	4863      	ldr	r0, [pc, #396]	; (800b748 <tcp_close_shutdown+0x1a8>)
 800b5bc:	f007 ffe2 	bl	8013584 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b5c0:	78fb      	ldrb	r3, [r7, #3]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d066      	beq.n	800b694 <tcp_close_shutdown+0xf4>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ca:	2b04      	cmp	r3, #4
 800b5cc:	d003      	beq.n	800b5d6 <tcp_close_shutdown+0x36>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	7d1b      	ldrb	r3, [r3, #20]
 800b5d2:	2b07      	cmp	r3, #7
 800b5d4:	d15e      	bne.n	800b694 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d104      	bne.n	800b5e8 <tcp_close_shutdown+0x48>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b5e6:	d055      	beq.n	800b694 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8b5b      	ldrh	r3, [r3, #26]
 800b5ec:	f003 0310 	and.w	r3, r3, #16
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d106      	bne.n	800b602 <tcp_close_shutdown+0x62>
 800b5f4:	4b52      	ldr	r3, [pc, #328]	; (800b740 <tcp_close_shutdown+0x1a0>)
 800b5f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b5fa:	4954      	ldr	r1, [pc, #336]	; (800b74c <tcp_close_shutdown+0x1ac>)
 800b5fc:	4852      	ldr	r0, [pc, #328]	; (800b748 <tcp_close_shutdown+0x1a8>)
 800b5fe:	f007 ffc1 	bl	8013584 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b60a:	687d      	ldr	r5, [r7, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	8ad2      	ldrh	r2, [r2, #22]
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	8b09      	ldrh	r1, [r1, #24]
 800b618:	9102      	str	r1, [sp, #8]
 800b61a:	9201      	str	r2, [sp, #4]
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	462b      	mov	r3, r5
 800b620:	4622      	mov	r2, r4
 800b622:	4601      	mov	r1, r0
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f004 fe91 	bl	801034c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f001 f8c6 	bl	800c7bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b630:	4b47      	ldr	r3, [pc, #284]	; (800b750 <tcp_close_shutdown+0x1b0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	429a      	cmp	r2, r3
 800b638:	d105      	bne.n	800b646 <tcp_close_shutdown+0xa6>
 800b63a:	4b45      	ldr	r3, [pc, #276]	; (800b750 <tcp_close_shutdown+0x1b0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	4a43      	ldr	r2, [pc, #268]	; (800b750 <tcp_close_shutdown+0x1b0>)
 800b642:	6013      	str	r3, [r2, #0]
 800b644:	e013      	b.n	800b66e <tcp_close_shutdown+0xce>
 800b646:	4b42      	ldr	r3, [pc, #264]	; (800b750 <tcp_close_shutdown+0x1b0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	e00c      	b.n	800b668 <tcp_close_shutdown+0xc8>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	429a      	cmp	r2, r3
 800b656:	d104      	bne.n	800b662 <tcp_close_shutdown+0xc2>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68da      	ldr	r2, [r3, #12]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	60da      	str	r2, [r3, #12]
 800b660:	e005      	b.n	800b66e <tcp_close_shutdown+0xce>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1ef      	bne.n	800b64e <tcp_close_shutdown+0xae>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	60da      	str	r2, [r3, #12]
 800b674:	4b37      	ldr	r3, [pc, #220]	; (800b754 <tcp_close_shutdown+0x1b4>)
 800b676:	2201      	movs	r2, #1
 800b678:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b67a:	4b37      	ldr	r3, [pc, #220]	; (800b758 <tcp_close_shutdown+0x1b8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	429a      	cmp	r2, r3
 800b682:	d102      	bne.n	800b68a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b684:	f003 fd5e 	bl	800f144 <tcp_trigger_input_pcb_close>
 800b688:	e002      	b.n	800b690 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff fed6 	bl	800b43c <tcp_free>
      }
      return ERR_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	e050      	b.n	800b736 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	7d1b      	ldrb	r3, [r3, #20]
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d03b      	beq.n	800b714 <tcp_close_shutdown+0x174>
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	dc44      	bgt.n	800b72a <tcp_close_shutdown+0x18a>
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <tcp_close_shutdown+0x10a>
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d02a      	beq.n	800b6fe <tcp_close_shutdown+0x15e>
 800b6a8:	e03f      	b.n	800b72a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	8adb      	ldrh	r3, [r3, #22]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d021      	beq.n	800b6f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b6b2:	4b2a      	ldr	r3, [pc, #168]	; (800b75c <tcp_close_shutdown+0x1bc>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d105      	bne.n	800b6c8 <tcp_close_shutdown+0x128>
 800b6bc:	4b27      	ldr	r3, [pc, #156]	; (800b75c <tcp_close_shutdown+0x1bc>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	4a26      	ldr	r2, [pc, #152]	; (800b75c <tcp_close_shutdown+0x1bc>)
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	e013      	b.n	800b6f0 <tcp_close_shutdown+0x150>
 800b6c8:	4b24      	ldr	r3, [pc, #144]	; (800b75c <tcp_close_shutdown+0x1bc>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	60bb      	str	r3, [r7, #8]
 800b6ce:	e00c      	b.n	800b6ea <tcp_close_shutdown+0x14a>
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d104      	bne.n	800b6e4 <tcp_close_shutdown+0x144>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	60da      	str	r2, [r3, #12]
 800b6e2:	e005      	b.n	800b6f0 <tcp_close_shutdown+0x150>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	60bb      	str	r3, [r7, #8]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1ef      	bne.n	800b6d0 <tcp_close_shutdown+0x130>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7ff fea0 	bl	800b43c <tcp_free>
      break;
 800b6fc:	e01a      	b.n	800b734 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff ff14 	bl	800b52c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	4816      	ldr	r0, [pc, #88]	; (800b760 <tcp_close_shutdown+0x1c0>)
 800b708:	f001 f8a8 	bl	800c85c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff feb1 	bl	800b474 <tcp_free_listen>
      break;
 800b712:	e00f      	b.n	800b734 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	480e      	ldr	r0, [pc, #56]	; (800b750 <tcp_close_shutdown+0x1b0>)
 800b718:	f001 f8a0 	bl	800c85c <tcp_pcb_remove>
 800b71c:	4b0d      	ldr	r3, [pc, #52]	; (800b754 <tcp_close_shutdown+0x1b4>)
 800b71e:	2201      	movs	r2, #1
 800b720:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fe8a 	bl	800b43c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b728:	e004      	b.n	800b734 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f81a 	bl	800b764 <tcp_close_shutdown_fin>
 800b730:	4603      	mov	r3, r0
 800b732:	e000      	b.n	800b736 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bdb0      	pop	{r4, r5, r7, pc}
 800b73e:	bf00      	nop
 800b740:	0801527c 	.word	0x0801527c
 800b744:	08015350 	.word	0x08015350
 800b748:	080152c0 	.word	0x080152c0
 800b74c:	08015370 	.word	0x08015370
 800b750:	20010578 	.word	0x20010578
 800b754:	20010580 	.word	0x20010580
 800b758:	200105b8 	.word	0x200105b8
 800b75c:	20010570 	.word	0x20010570
 800b760:	20010574 	.word	0x20010574

0800b764 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <tcp_close_shutdown_fin+0x1c>
 800b772:	4b2e      	ldr	r3, [pc, #184]	; (800b82c <tcp_close_shutdown_fin+0xc8>)
 800b774:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b778:	492d      	ldr	r1, [pc, #180]	; (800b830 <tcp_close_shutdown_fin+0xcc>)
 800b77a:	482e      	ldr	r0, [pc, #184]	; (800b834 <tcp_close_shutdown_fin+0xd0>)
 800b77c:	f007 ff02 	bl	8013584 <iprintf>

  switch (pcb->state) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	7d1b      	ldrb	r3, [r3, #20]
 800b784:	2b07      	cmp	r3, #7
 800b786:	d020      	beq.n	800b7ca <tcp_close_shutdown_fin+0x66>
 800b788:	2b07      	cmp	r3, #7
 800b78a:	dc2b      	bgt.n	800b7e4 <tcp_close_shutdown_fin+0x80>
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d002      	beq.n	800b796 <tcp_close_shutdown_fin+0x32>
 800b790:	2b04      	cmp	r3, #4
 800b792:	d00d      	beq.n	800b7b0 <tcp_close_shutdown_fin+0x4c>
 800b794:	e026      	b.n	800b7e4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f003 fee6 	bl	800f568 <tcp_send_fin>
 800b79c:	4603      	mov	r3, r0
 800b79e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b7a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d11f      	bne.n	800b7e8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2205      	movs	r2, #5
 800b7ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b7ae:	e01b      	b.n	800b7e8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f003 fed9 	bl	800f568 <tcp_send_fin>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d114      	bne.n	800b7ec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2205      	movs	r2, #5
 800b7c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b7c8:	e010      	b.n	800b7ec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f003 fecc 	bl	800f568 <tcp_send_fin>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b7d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d109      	bne.n	800b7f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2209      	movs	r2, #9
 800b7e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b7e2:	e005      	b.n	800b7f0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	e01c      	b.n	800b822 <tcp_close_shutdown_fin+0xbe>
      break;
 800b7e8:	bf00      	nop
 800b7ea:	e002      	b.n	800b7f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800b7ec:	bf00      	nop
 800b7ee:	e000      	b.n	800b7f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800b7f0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d103      	bne.n	800b802 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f003 fff2 	bl	800f7e4 <tcp_output>
 800b800:	e00d      	b.n	800b81e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b80a:	d108      	bne.n	800b81e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	8b5b      	ldrh	r3, [r3, #26]
 800b810:	f043 0308 	orr.w	r3, r3, #8
 800b814:	b29a      	uxth	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	e001      	b.n	800b822 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	0801527c 	.word	0x0801527c
 800b830:	0801532c 	.word	0x0801532c
 800b834:	080152c0 	.word	0x080152c0

0800b838 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d109      	bne.n	800b85a <tcp_close+0x22>
 800b846:	4b0f      	ldr	r3, [pc, #60]	; (800b884 <tcp_close+0x4c>)
 800b848:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b84c:	490e      	ldr	r1, [pc, #56]	; (800b888 <tcp_close+0x50>)
 800b84e:	480f      	ldr	r0, [pc, #60]	; (800b88c <tcp_close+0x54>)
 800b850:	f007 fe98 	bl	8013584 <iprintf>
 800b854:	f06f 030f 	mvn.w	r3, #15
 800b858:	e00f      	b.n	800b87a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	7d1b      	ldrb	r3, [r3, #20]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d006      	beq.n	800b870 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	8b5b      	ldrh	r3, [r3, #26]
 800b866:	f043 0310 	orr.w	r3, r3, #16
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b870:	2101      	movs	r1, #1
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff fe94 	bl	800b5a0 <tcp_close_shutdown>
 800b878:	4603      	mov	r3, r0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	0801527c 	.word	0x0801527c
 800b888:	0801538c 	.word	0x0801538c
 800b88c:	080152c0 	.word	0x080152c0

0800b890 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08e      	sub	sp, #56	; 0x38
 800b894:	af04      	add	r7, sp, #16
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d107      	bne.n	800b8b0 <tcp_abandon+0x20>
 800b8a0:	4b52      	ldr	r3, [pc, #328]	; (800b9ec <tcp_abandon+0x15c>)
 800b8a2:	f240 223d 	movw	r2, #573	; 0x23d
 800b8a6:	4952      	ldr	r1, [pc, #328]	; (800b9f0 <tcp_abandon+0x160>)
 800b8a8:	4852      	ldr	r0, [pc, #328]	; (800b9f4 <tcp_abandon+0x164>)
 800b8aa:	f007 fe6b 	bl	8013584 <iprintf>
 800b8ae:	e099      	b.n	800b9e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	7d1b      	ldrb	r3, [r3, #20]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d106      	bne.n	800b8c6 <tcp_abandon+0x36>
 800b8b8:	4b4c      	ldr	r3, [pc, #304]	; (800b9ec <tcp_abandon+0x15c>)
 800b8ba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b8be:	494e      	ldr	r1, [pc, #312]	; (800b9f8 <tcp_abandon+0x168>)
 800b8c0:	484c      	ldr	r0, [pc, #304]	; (800b9f4 <tcp_abandon+0x164>)
 800b8c2:	f007 fe5f 	bl	8013584 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ca:	2b0a      	cmp	r3, #10
 800b8cc:	d107      	bne.n	800b8de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	484a      	ldr	r0, [pc, #296]	; (800b9fc <tcp_abandon+0x16c>)
 800b8d2:	f000 ffc3 	bl	800c85c <tcp_pcb_remove>
    tcp_free(pcb);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fdb0 	bl	800b43c <tcp_free>
 800b8dc:	e082      	b.n	800b9e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	7d1b      	ldrb	r3, [r3, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d126      	bne.n	800b956 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8adb      	ldrh	r3, [r3, #22]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d02e      	beq.n	800b96e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b910:	4b3b      	ldr	r3, [pc, #236]	; (800ba00 <tcp_abandon+0x170>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	429a      	cmp	r2, r3
 800b918:	d105      	bne.n	800b926 <tcp_abandon+0x96>
 800b91a:	4b39      	ldr	r3, [pc, #228]	; (800ba00 <tcp_abandon+0x170>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	4a37      	ldr	r2, [pc, #220]	; (800ba00 <tcp_abandon+0x170>)
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	e013      	b.n	800b94e <tcp_abandon+0xbe>
 800b926:	4b36      	ldr	r3, [pc, #216]	; (800ba00 <tcp_abandon+0x170>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	61fb      	str	r3, [r7, #28]
 800b92c:	e00c      	b.n	800b948 <tcp_abandon+0xb8>
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d104      	bne.n	800b942 <tcp_abandon+0xb2>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68da      	ldr	r2, [r3, #12]
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	60da      	str	r2, [r3, #12]
 800b940:	e005      	b.n	800b94e <tcp_abandon+0xbe>
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1ef      	bne.n	800b92e <tcp_abandon+0x9e>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	60da      	str	r2, [r3, #12]
 800b954:	e00b      	b.n	800b96e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8adb      	ldrh	r3, [r3, #22]
 800b95e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b960:	6879      	ldr	r1, [r7, #4]
 800b962:	4828      	ldr	r0, [pc, #160]	; (800ba04 <tcp_abandon+0x174>)
 800b964:	f000 ff7a 	bl	800c85c <tcp_pcb_remove>
 800b968:	4b27      	ldr	r3, [pc, #156]	; (800ba08 <tcp_abandon+0x178>)
 800b96a:	2201      	movs	r2, #1
 800b96c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b972:	2b00      	cmp	r3, #0
 800b974:	d004      	beq.n	800b980 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fd1c 	bl	800c3b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d004      	beq.n	800b992 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fd13 	bl	800c3b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b996:	2b00      	cmp	r3, #0
 800b998:	d004      	beq.n	800b9a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 fd0a 	bl	800c3b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00e      	beq.n	800b9c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	8b12      	ldrh	r2, [r2, #24]
 800b9b4:	9202      	str	r2, [sp, #8]
 800b9b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b9b8:	9201      	str	r2, [sp, #4]
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	69b9      	ldr	r1, [r7, #24]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f004 fcc2 	bl	801034c <tcp_rst>
    }
    last_state = pcb->state;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	7d1b      	ldrb	r3, [r3, #20]
 800b9cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff fd34 	bl	800b43c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d004      	beq.n	800b9e4 <tcp_abandon+0x154>
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	f06f 010c 	mvn.w	r1, #12
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	4798      	blx	r3
  }
}
 800b9e4:	3728      	adds	r7, #40	; 0x28
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	0801527c 	.word	0x0801527c
 800b9f0:	080153c0 	.word	0x080153c0
 800b9f4:	080152c0 	.word	0x080152c0
 800b9f8:	080153dc 	.word	0x080153dc
 800b9fc:	2001057c 	.word	0x2001057c
 800ba00:	20010570 	.word	0x20010570
 800ba04:	20010578 	.word	0x20010578
 800ba08:	20010580 	.word	0x20010580

0800ba0c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ba14:	2101      	movs	r1, #1
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7ff ff3a 	bl	800b890 <tcp_abandon>
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d106      	bne.n	800ba40 <tcp_update_rcv_ann_wnd+0x1c>
 800ba32:	4b25      	ldr	r3, [pc, #148]	; (800bac8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ba34:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ba38:	4924      	ldr	r1, [pc, #144]	; (800bacc <tcp_update_rcv_ann_wnd+0xa8>)
 800ba3a:	4825      	ldr	r0, [pc, #148]	; (800bad0 <tcp_update_rcv_ann_wnd+0xac>)
 800ba3c:	f007 fda2 	bl	8013584 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ba48:	4413      	add	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ba54:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ba58:	bf28      	it	cs
 800ba5a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ba5e:	b292      	uxth	r2, r2
 800ba60:	4413      	add	r3, r2
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	db08      	blt.n	800ba7c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	e020      	b.n	800babe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dd03      	ble.n	800ba92 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba90:	e014      	b.n	800babc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baa4:	d306      	bcc.n	800bab4 <tcp_update_rcv_ann_wnd+0x90>
 800baa6:	4b08      	ldr	r3, [pc, #32]	; (800bac8 <tcp_update_rcv_ann_wnd+0xa4>)
 800baa8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800baac:	4909      	ldr	r1, [pc, #36]	; (800bad4 <tcp_update_rcv_ann_wnd+0xb0>)
 800baae:	4808      	ldr	r0, [pc, #32]	; (800bad0 <tcp_update_rcv_ann_wnd+0xac>)
 800bab0:	f007 fd68 	bl	8013584 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800babc:	2300      	movs	r3, #0
  }
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	0801527c 	.word	0x0801527c
 800bacc:	080154d8 	.word	0x080154d8
 800bad0:	080152c0 	.word	0x080152c0
 800bad4:	080154fc 	.word	0x080154fc

0800bad8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d107      	bne.n	800bafa <tcp_recved+0x22>
 800baea:	4b1f      	ldr	r3, [pc, #124]	; (800bb68 <tcp_recved+0x90>)
 800baec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800baf0:	491e      	ldr	r1, [pc, #120]	; (800bb6c <tcp_recved+0x94>)
 800baf2:	481f      	ldr	r0, [pc, #124]	; (800bb70 <tcp_recved+0x98>)
 800baf4:	f007 fd46 	bl	8013584 <iprintf>
 800baf8:	e032      	b.n	800bb60 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	7d1b      	ldrb	r3, [r3, #20]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d106      	bne.n	800bb10 <tcp_recved+0x38>
 800bb02:	4b19      	ldr	r3, [pc, #100]	; (800bb68 <tcp_recved+0x90>)
 800bb04:	f240 32d2 	movw	r2, #978	; 0x3d2
 800bb08:	491a      	ldr	r1, [pc, #104]	; (800bb74 <tcp_recved+0x9c>)
 800bb0a:	4819      	ldr	r0, [pc, #100]	; (800bb70 <tcp_recved+0x98>)
 800bb0c:	f007 fd3a 	bl	8013584 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb14:	887b      	ldrh	r3, [r7, #2]
 800bb16:	4413      	add	r3, r2
 800bb18:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bb1a:	89fb      	ldrh	r3, [r7, #14]
 800bb1c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bb20:	d804      	bhi.n	800bb2c <tcp_recved+0x54>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb26:	89fa      	ldrh	r2, [r7, #14]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d204      	bcs.n	800bb36 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bb32:	851a      	strh	r2, [r3, #40]	; 0x28
 800bb34:	e002      	b.n	800bb3c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	89fa      	ldrh	r2, [r7, #14]
 800bb3a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7ff ff71 	bl	800ba24 <tcp_update_rcv_ann_wnd>
 800bb42:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bb4a:	d309      	bcc.n	800bb60 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	8b5b      	ldrh	r3, [r3, #26]
 800bb50:	f043 0302 	orr.w	r3, r3, #2
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f003 fe42 	bl	800f7e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	0801527c 	.word	0x0801527c
 800bb6c:	08015518 	.word	0x08015518
 800bb70:	080152c0 	.word	0x080152c0
 800bb74:	08015530 	.word	0x08015530

0800bb78 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bb78:	b5b0      	push	{r4, r5, r7, lr}
 800bb7a:	b090      	sub	sp, #64	; 0x40
 800bb7c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bb84:	4b94      	ldr	r3, [pc, #592]	; (800bdd8 <tcp_slowtmr+0x260>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	4a93      	ldr	r2, [pc, #588]	; (800bdd8 <tcp_slowtmr+0x260>)
 800bb8c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bb8e:	4b93      	ldr	r3, [pc, #588]	; (800bddc <tcp_slowtmr+0x264>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	4b91      	ldr	r3, [pc, #580]	; (800bddc <tcp_slowtmr+0x264>)
 800bb98:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bb9e:	4b90      	ldr	r3, [pc, #576]	; (800bde0 <tcp_slowtmr+0x268>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bba4:	e29d      	b.n	800c0e2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba8:	7d1b      	ldrb	r3, [r3, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d106      	bne.n	800bbbc <tcp_slowtmr+0x44>
 800bbae:	4b8d      	ldr	r3, [pc, #564]	; (800bde4 <tcp_slowtmr+0x26c>)
 800bbb0:	f240 42be 	movw	r2, #1214	; 0x4be
 800bbb4:	498c      	ldr	r1, [pc, #560]	; (800bde8 <tcp_slowtmr+0x270>)
 800bbb6:	488d      	ldr	r0, [pc, #564]	; (800bdec <tcp_slowtmr+0x274>)
 800bbb8:	f007 fce4 	bl	8013584 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbe:	7d1b      	ldrb	r3, [r3, #20]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d106      	bne.n	800bbd2 <tcp_slowtmr+0x5a>
 800bbc4:	4b87      	ldr	r3, [pc, #540]	; (800bde4 <tcp_slowtmr+0x26c>)
 800bbc6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bbca:	4989      	ldr	r1, [pc, #548]	; (800bdf0 <tcp_slowtmr+0x278>)
 800bbcc:	4887      	ldr	r0, [pc, #540]	; (800bdec <tcp_slowtmr+0x274>)
 800bbce:	f007 fcd9 	bl	8013584 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd4:	7d1b      	ldrb	r3, [r3, #20]
 800bbd6:	2b0a      	cmp	r3, #10
 800bbd8:	d106      	bne.n	800bbe8 <tcp_slowtmr+0x70>
 800bbda:	4b82      	ldr	r3, [pc, #520]	; (800bde4 <tcp_slowtmr+0x26c>)
 800bbdc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bbe0:	4984      	ldr	r1, [pc, #528]	; (800bdf4 <tcp_slowtmr+0x27c>)
 800bbe2:	4882      	ldr	r0, [pc, #520]	; (800bdec <tcp_slowtmr+0x274>)
 800bbe4:	f007 fcce 	bl	8013584 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	7f9a      	ldrb	r2, [r3, #30]
 800bbec:	4b7b      	ldr	r3, [pc, #492]	; (800bddc <tcp_slowtmr+0x264>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d105      	bne.n	800bc00 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bbfe:	e270      	b.n	800c0e2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bc00:	4b76      	ldr	r3, [pc, #472]	; (800bddc <tcp_slowtmr+0x264>)
 800bc02:	781a      	ldrb	r2, [r3, #0]
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc16:	7d1b      	ldrb	r3, [r3, #20]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d10a      	bne.n	800bc32 <tcp_slowtmr+0xba>
 800bc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc22:	2b05      	cmp	r3, #5
 800bc24:	d905      	bls.n	800bc32 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bc26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc30:	e11e      	b.n	800be70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc38:	2b0b      	cmp	r3, #11
 800bc3a:	d905      	bls.n	800bc48 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc40:	3301      	adds	r3, #1
 800bc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc46:	e113      	b.n	800be70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d075      	beq.n	800bd3e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d006      	beq.n	800bc68 <tcp_slowtmr+0xf0>
 800bc5a:	4b62      	ldr	r3, [pc, #392]	; (800bde4 <tcp_slowtmr+0x26c>)
 800bc5c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bc60:	4965      	ldr	r1, [pc, #404]	; (800bdf8 <tcp_slowtmr+0x280>)
 800bc62:	4862      	ldr	r0, [pc, #392]	; (800bdec <tcp_slowtmr+0x274>)
 800bc64:	f007 fc8e 	bl	8013584 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d106      	bne.n	800bc7e <tcp_slowtmr+0x106>
 800bc70:	4b5c      	ldr	r3, [pc, #368]	; (800bde4 <tcp_slowtmr+0x26c>)
 800bc72:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bc76:	4961      	ldr	r1, [pc, #388]	; (800bdfc <tcp_slowtmr+0x284>)
 800bc78:	485c      	ldr	r0, [pc, #368]	; (800bdec <tcp_slowtmr+0x274>)
 800bc7a:	f007 fc83 	bl	8013584 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bc84:	2b0b      	cmp	r3, #11
 800bc86:	d905      	bls.n	800bc94 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bc88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc92:	e0ed      	b.n	800be70 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	4a58      	ldr	r2, [pc, #352]	; (800be00 <tcp_slowtmr+0x288>)
 800bc9e:	5cd3      	ldrb	r3, [r2, r3]
 800bca0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bca8:	7c7a      	ldrb	r2, [r7, #17]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d907      	bls.n	800bcbe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bcc4:	7c7a      	ldrb	r2, [r7, #17]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	f200 80d2 	bhi.w	800be70 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bccc:	2301      	movs	r3, #1
 800bcce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d108      	bne.n	800bcec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bcda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcdc:	f004 fc2a 	bl	8010534 <tcp_zero_window_probe>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d014      	beq.n	800bd10 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bce6:	2300      	movs	r3, #0
 800bce8:	623b      	str	r3, [r7, #32]
 800bcea:	e011      	b.n	800bd10 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcf6:	f003 faef 	bl	800f2d8 <tcp_split_unsent_seg>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d107      	bne.n	800bd10 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bd00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd02:	f003 fd6f 	bl	800f7e4 <tcp_output>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f000 80ac 	beq.w	800be70 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bd26:	2b06      	cmp	r3, #6
 800bd28:	f200 80a2 	bhi.w	800be70 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bd32:	3301      	adds	r3, #1
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bd3c:	e098      	b.n	800be70 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	db0f      	blt.n	800bd68 <tcp_slowtmr+0x1f0>
 800bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d008      	beq.n	800bd68 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	3301      	adds	r3, #1
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	b21a      	sxth	r2, r3
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bd74:	429a      	cmp	r2, r3
 800bd76:	db7b      	blt.n	800be70 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bd78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd7a:	f004 f825 	bl	800fdc8 <tcp_rexmit_rto_prepare>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d007      	beq.n	800bd94 <tcp_slowtmr+0x21c>
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d171      	bne.n	800be70 <tcp_slowtmr+0x2f8>
 800bd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d06d      	beq.n	800be70 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	7d1b      	ldrb	r3, [r3, #20]
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d03a      	beq.n	800be12 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bda2:	2b0c      	cmp	r3, #12
 800bda4:	bf28      	it	cs
 800bda6:	230c      	movcs	r3, #12
 800bda8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bdb0:	10db      	asrs	r3, r3, #3
 800bdb2:	b21b      	sxth	r3, r3
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bdbc:	4413      	add	r3, r2
 800bdbe:	7efa      	ldrb	r2, [r7, #27]
 800bdc0:	4910      	ldr	r1, [pc, #64]	; (800be04 <tcp_slowtmr+0x28c>)
 800bdc2:	5c8a      	ldrb	r2, [r1, r2]
 800bdc4:	4093      	lsls	r3, r2
 800bdc6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	dc1a      	bgt.n	800be08 <tcp_slowtmr+0x290>
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	b21a      	sxth	r2, r3
 800bdd6:	e019      	b.n	800be0c <tcp_slowtmr+0x294>
 800bdd8:	2001056c 	.word	0x2001056c
 800bddc:	20010582 	.word	0x20010582
 800bde0:	20010578 	.word	0x20010578
 800bde4:	0801527c 	.word	0x0801527c
 800bde8:	080155c0 	.word	0x080155c0
 800bdec:	080152c0 	.word	0x080152c0
 800bdf0:	080155ec 	.word	0x080155ec
 800bdf4:	08015618 	.word	0x08015618
 800bdf8:	08015648 	.word	0x08015648
 800bdfc:	0801567c 	.word	0x0801567c
 800be00:	08017294 	.word	0x08017294
 800be04:	08017284 	.word	0x08017284
 800be08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	2200      	movs	r2, #0
 800be16:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800be24:	4293      	cmp	r3, r2
 800be26:	bf28      	it	cs
 800be28:	4613      	movcs	r3, r2
 800be2a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800be2c:	8a7b      	ldrh	r3, [r7, #18]
 800be2e:	085b      	lsrs	r3, r3, #1
 800be30:	b29a      	uxth	r2, r3
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800be38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800be3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	b29b      	uxth	r3, r3
 800be46:	429a      	cmp	r2, r3
 800be48:	d206      	bcs.n	800be58 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	b29a      	uxth	r2, r3
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800be5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800be62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be64:	2200      	movs	r2, #0
 800be66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800be6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be6c:	f004 f81c 	bl	800fea8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	7d1b      	ldrb	r3, [r3, #20]
 800be74:	2b06      	cmp	r3, #6
 800be76:	d111      	bne.n	800be9c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	8b5b      	ldrh	r3, [r3, #26]
 800be7c:	f003 0310 	and.w	r3, r3, #16
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00b      	beq.n	800be9c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be84:	4b9c      	ldr	r3, [pc, #624]	; (800c0f8 <tcp_slowtmr+0x580>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	2b28      	cmp	r3, #40	; 0x28
 800be90:	d904      	bls.n	800be9c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800be92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be96:	3301      	adds	r3, #1
 800be98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	7a5b      	ldrb	r3, [r3, #9]
 800bea0:	f003 0308 	and.w	r3, r3, #8
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d04a      	beq.n	800bf3e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800bea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beaa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800beac:	2b04      	cmp	r3, #4
 800beae:	d003      	beq.n	800beb8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800beb4:	2b07      	cmp	r3, #7
 800beb6:	d142      	bne.n	800bf3e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800beb8:	4b8f      	ldr	r3, [pc, #572]	; (800c0f8 <tcp_slowtmr+0x580>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bec8:	4b8c      	ldr	r3, [pc, #560]	; (800c0fc <tcp_slowtmr+0x584>)
 800beca:	440b      	add	r3, r1
 800becc:	498c      	ldr	r1, [pc, #560]	; (800c100 <tcp_slowtmr+0x588>)
 800bece:	fba1 1303 	umull	r1, r3, r1, r3
 800bed2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d90a      	bls.n	800beee <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bedc:	3301      	adds	r3, #1
 800bede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bee6:	3301      	adds	r3, #1
 800bee8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800beec:	e027      	b.n	800bf3e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800beee:	4b82      	ldr	r3, [pc, #520]	; (800c0f8 <tcp_slowtmr+0x580>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800befe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf00:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bf04:	4618      	mov	r0, r3
 800bf06:	4b7f      	ldr	r3, [pc, #508]	; (800c104 <tcp_slowtmr+0x58c>)
 800bf08:	fb00 f303 	mul.w	r3, r0, r3
 800bf0c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bf0e:	497c      	ldr	r1, [pc, #496]	; (800c100 <tcp_slowtmr+0x588>)
 800bf10:	fba1 1303 	umull	r1, r3, r1, r3
 800bf14:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d911      	bls.n	800bf3e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800bf1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf1c:	f004 faca 	bl	80104b4 <tcp_keepalive>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bf26:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d107      	bne.n	800bf3e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bf34:	3301      	adds	r3, #1
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d011      	beq.n	800bf6a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bf46:	4b6c      	ldr	r3, [pc, #432]	; (800c0f8 <tcp_slowtmr+0x580>)
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	6a1b      	ldr	r3, [r3, #32]
 800bf4e:	1ad2      	subs	r2, r2, r3
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bf56:	4619      	mov	r1, r3
 800bf58:	460b      	mov	r3, r1
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	440b      	add	r3, r1
 800bf5e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d302      	bcc.n	800bf6a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bf64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf66:	f000 fddd 	bl	800cb24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6c:	7d1b      	ldrb	r3, [r3, #20]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d10b      	bne.n	800bf8a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf72:	4b61      	ldr	r3, [pc, #388]	; (800c0f8 <tcp_slowtmr+0x580>)
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	2b28      	cmp	r3, #40	; 0x28
 800bf7e:	d904      	bls.n	800bf8a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf84:	3301      	adds	r3, #1
 800bf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	7d1b      	ldrb	r3, [r3, #20]
 800bf8e:	2b09      	cmp	r3, #9
 800bf90:	d10b      	bne.n	800bfaa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bf92:	4b59      	ldr	r3, [pc, #356]	; (800c0f8 <tcp_slowtmr+0x580>)
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	2bf0      	cmp	r3, #240	; 0xf0
 800bf9e:	d904      	bls.n	800bfaa <tcp_slowtmr+0x432>
        ++pcb_remove;
 800bfa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bfaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d060      	beq.n	800c074 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfb8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bfba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfbc:	f000 fbfe 	bl	800c7bc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d010      	beq.n	800bfe8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bfc6:	4b50      	ldr	r3, [pc, #320]	; (800c108 <tcp_slowtmr+0x590>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d106      	bne.n	800bfde <tcp_slowtmr+0x466>
 800bfd0:	4b4e      	ldr	r3, [pc, #312]	; (800c10c <tcp_slowtmr+0x594>)
 800bfd2:	f240 526d 	movw	r2, #1389	; 0x56d
 800bfd6:	494e      	ldr	r1, [pc, #312]	; (800c110 <tcp_slowtmr+0x598>)
 800bfd8:	484e      	ldr	r0, [pc, #312]	; (800c114 <tcp_slowtmr+0x59c>)
 800bfda:	f007 fad3 	bl	8013584 <iprintf>
        prev->next = pcb->next;
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	68da      	ldr	r2, [r3, #12]
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	e00f      	b.n	800c008 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bfe8:	4b47      	ldr	r3, [pc, #284]	; (800c108 <tcp_slowtmr+0x590>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d006      	beq.n	800c000 <tcp_slowtmr+0x488>
 800bff2:	4b46      	ldr	r3, [pc, #280]	; (800c10c <tcp_slowtmr+0x594>)
 800bff4:	f240 5271 	movw	r2, #1393	; 0x571
 800bff8:	4947      	ldr	r1, [pc, #284]	; (800c118 <tcp_slowtmr+0x5a0>)
 800bffa:	4846      	ldr	r0, [pc, #280]	; (800c114 <tcp_slowtmr+0x59c>)
 800bffc:	f007 fac2 	bl	8013584 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	4a40      	ldr	r2, [pc, #256]	; (800c108 <tcp_slowtmr+0x590>)
 800c006:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d013      	beq.n	800c038 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c016:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c018:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01c:	3304      	adds	r3, #4
 800c01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c020:	8ad2      	ldrh	r2, [r2, #22]
 800c022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c024:	8b09      	ldrh	r1, [r1, #24]
 800c026:	9102      	str	r1, [sp, #8]
 800c028:	9201      	str	r2, [sp, #4]
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	462b      	mov	r3, r5
 800c02e:	4622      	mov	r2, r4
 800c030:	4601      	mov	r1, r0
 800c032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c034:	f004 f98a 	bl	801034c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	7d1b      	ldrb	r3, [r3, #20]
 800c042:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c04e:	6838      	ldr	r0, [r7, #0]
 800c050:	f7ff f9f4 	bl	800b43c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c054:	4b31      	ldr	r3, [pc, #196]	; (800c11c <tcp_slowtmr+0x5a4>)
 800c056:	2200      	movs	r2, #0
 800c058:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d004      	beq.n	800c06a <tcp_slowtmr+0x4f2>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f06f 010c 	mvn.w	r1, #12
 800c066:	68b8      	ldr	r0, [r7, #8]
 800c068:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c06a:	4b2c      	ldr	r3, [pc, #176]	; (800c11c <tcp_slowtmr+0x5a4>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d037      	beq.n	800c0e2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c072:	e592      	b.n	800bb9a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c076:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	7f1b      	ldrb	r3, [r3, #28]
 800c082:	3301      	adds	r3, #1
 800c084:	b2da      	uxtb	r2, r3
 800c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c088:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	7f1a      	ldrb	r2, [r3, #28]
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	7f5b      	ldrb	r3, [r3, #29]
 800c092:	429a      	cmp	r2, r3
 800c094:	d325      	bcc.n	800c0e2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	2200      	movs	r2, #0
 800c09a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c09c:	4b1f      	ldr	r3, [pc, #124]	; (800c11c <tcp_slowtmr+0x5a4>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <tcp_slowtmr+0x54c>
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0b4:	6912      	ldr	r2, [r2, #16]
 800c0b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	4798      	blx	r3
 800c0bc:	4603      	mov	r3, r0
 800c0be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c0c2:	e002      	b.n	800c0ca <tcp_slowtmr+0x552>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c0ca:	4b14      	ldr	r3, [pc, #80]	; (800c11c <tcp_slowtmr+0x5a4>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d000      	beq.n	800c0d4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c0d2:	e562      	b.n	800bb9a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c0d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0de:	f003 fb81 	bl	800f7e4 <tcp_output>
  while (pcb != NULL) {
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f47f ad5e 	bne.w	800bba6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c0ee:	4b0c      	ldr	r3, [pc, #48]	; (800c120 <tcp_slowtmr+0x5a8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c0f4:	e069      	b.n	800c1ca <tcp_slowtmr+0x652>
 800c0f6:	bf00      	nop
 800c0f8:	2001056c 	.word	0x2001056c
 800c0fc:	000a4cb8 	.word	0x000a4cb8
 800c100:	10624dd3 	.word	0x10624dd3
 800c104:	000124f8 	.word	0x000124f8
 800c108:	20010578 	.word	0x20010578
 800c10c:	0801527c 	.word	0x0801527c
 800c110:	080156b4 	.word	0x080156b4
 800c114:	080152c0 	.word	0x080152c0
 800c118:	080156e0 	.word	0x080156e0
 800c11c:	20010580 	.word	0x20010580
 800c120:	2001057c 	.word	0x2001057c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c126:	7d1b      	ldrb	r3, [r3, #20]
 800c128:	2b0a      	cmp	r3, #10
 800c12a:	d006      	beq.n	800c13a <tcp_slowtmr+0x5c2>
 800c12c:	4b2b      	ldr	r3, [pc, #172]	; (800c1dc <tcp_slowtmr+0x664>)
 800c12e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c132:	492b      	ldr	r1, [pc, #172]	; (800c1e0 <tcp_slowtmr+0x668>)
 800c134:	482b      	ldr	r0, [pc, #172]	; (800c1e4 <tcp_slowtmr+0x66c>)
 800c136:	f007 fa25 	bl	8013584 <iprintf>
    pcb_remove = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c140:	4b29      	ldr	r3, [pc, #164]	; (800c1e8 <tcp_slowtmr+0x670>)
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	2bf0      	cmp	r3, #240	; 0xf0
 800c14c:	d904      	bls.n	800c158 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c14e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c152:	3301      	adds	r3, #1
 800c154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d02f      	beq.n	800c1c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c162:	f000 fb2b 	bl	800c7bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d010      	beq.n	800c18e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c16c:	4b1f      	ldr	r3, [pc, #124]	; (800c1ec <tcp_slowtmr+0x674>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c172:	429a      	cmp	r2, r3
 800c174:	d106      	bne.n	800c184 <tcp_slowtmr+0x60c>
 800c176:	4b19      	ldr	r3, [pc, #100]	; (800c1dc <tcp_slowtmr+0x664>)
 800c178:	f240 52af 	movw	r2, #1455	; 0x5af
 800c17c:	491c      	ldr	r1, [pc, #112]	; (800c1f0 <tcp_slowtmr+0x678>)
 800c17e:	4819      	ldr	r0, [pc, #100]	; (800c1e4 <tcp_slowtmr+0x66c>)
 800c180:	f007 fa00 	bl	8013584 <iprintf>
        prev->next = pcb->next;
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	60da      	str	r2, [r3, #12]
 800c18c:	e00f      	b.n	800c1ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c18e:	4b17      	ldr	r3, [pc, #92]	; (800c1ec <tcp_slowtmr+0x674>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c194:	429a      	cmp	r2, r3
 800c196:	d006      	beq.n	800c1a6 <tcp_slowtmr+0x62e>
 800c198:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <tcp_slowtmr+0x664>)
 800c19a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c19e:	4915      	ldr	r1, [pc, #84]	; (800c1f4 <tcp_slowtmr+0x67c>)
 800c1a0:	4810      	ldr	r0, [pc, #64]	; (800c1e4 <tcp_slowtmr+0x66c>)
 800c1a2:	f007 f9ef 	bl	8013584 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	4a10      	ldr	r2, [pc, #64]	; (800c1ec <tcp_slowtmr+0x674>)
 800c1ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c1b8:	69f8      	ldr	r0, [r7, #28]
 800c1ba:	f7ff f93f 	bl	800b43c <tcp_free>
 800c1be:	e004      	b.n	800c1ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1a9      	bne.n	800c124 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	3730      	adds	r7, #48	; 0x30
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	0801527c 	.word	0x0801527c
 800c1e0:	0801570c 	.word	0x0801570c
 800c1e4:	080152c0 	.word	0x080152c0
 800c1e8:	2001056c 	.word	0x2001056c
 800c1ec:	2001057c 	.word	0x2001057c
 800c1f0:	0801573c 	.word	0x0801573c
 800c1f4:	08015764 	.word	0x08015764

0800c1f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c1fe:	4b2d      	ldr	r3, [pc, #180]	; (800c2b4 <tcp_fasttmr+0xbc>)
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	3301      	adds	r3, #1
 800c204:	b2da      	uxtb	r2, r3
 800c206:	4b2b      	ldr	r3, [pc, #172]	; (800c2b4 <tcp_fasttmr+0xbc>)
 800c208:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c20a:	4b2b      	ldr	r3, [pc, #172]	; (800c2b8 <tcp_fasttmr+0xc0>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c210:	e048      	b.n	800c2a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	7f9a      	ldrb	r2, [r3, #30]
 800c216:	4b27      	ldr	r3, [pc, #156]	; (800c2b4 <tcp_fasttmr+0xbc>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d03f      	beq.n	800c29e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c21e:	4b25      	ldr	r3, [pc, #148]	; (800c2b4 <tcp_fasttmr+0xbc>)
 800c220:	781a      	ldrb	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	8b5b      	ldrh	r3, [r3, #26]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d010      	beq.n	800c254 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	8b5b      	ldrh	r3, [r3, #26]
 800c236:	f043 0302 	orr.w	r3, r3, #2
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f003 facf 	bl	800f7e4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	8b5b      	ldrh	r3, [r3, #26]
 800c24a:	f023 0303 	bic.w	r3, r3, #3
 800c24e:	b29a      	uxth	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	8b5b      	ldrh	r3, [r3, #26]
 800c258:	f003 0308 	and.w	r3, r3, #8
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	8b5b      	ldrh	r3, [r3, #26]
 800c264:	f023 0308 	bic.w	r3, r3, #8
 800c268:	b29a      	uxth	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff fa78 	bl	800b764 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00a      	beq.n	800c298 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c282:	4b0e      	ldr	r3, [pc, #56]	; (800c2bc <tcp_fasttmr+0xc4>)
 800c284:	2200      	movs	r2, #0
 800c286:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f819 	bl	800c2c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <tcp_fasttmr+0xc4>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d000      	beq.n	800c298 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c296:	e7b8      	b.n	800c20a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	607b      	str	r3, [r7, #4]
 800c29c:	e002      	b.n	800c2a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1b3      	bne.n	800c212 <tcp_fasttmr+0x1a>
    }
  }
}
 800c2aa:	bf00      	nop
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20010582 	.word	0x20010582
 800c2b8:	20010578 	.word	0x20010578
 800c2bc:	20010580 	.word	0x20010580

0800c2c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c2c0:	b590      	push	{r4, r7, lr}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d109      	bne.n	800c2e2 <tcp_process_refused_data+0x22>
 800c2ce:	4b37      	ldr	r3, [pc, #220]	; (800c3ac <tcp_process_refused_data+0xec>)
 800c2d0:	f240 6209 	movw	r2, #1545	; 0x609
 800c2d4:	4936      	ldr	r1, [pc, #216]	; (800c3b0 <tcp_process_refused_data+0xf0>)
 800c2d6:	4837      	ldr	r0, [pc, #220]	; (800c3b4 <tcp_process_refused_data+0xf4>)
 800c2d8:	f007 f954 	bl	8013584 <iprintf>
 800c2dc:	f06f 030f 	mvn.w	r3, #15
 800c2e0:	e060      	b.n	800c3a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2e6:	7b5b      	ldrb	r3, [r3, #13]
 800c2e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <tcp_process_refused_data+0x58>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6918      	ldr	r0, [r3, #16]
 800c30a:	2300      	movs	r3, #0
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	47a0      	blx	r4
 800c312:	4603      	mov	r3, r0
 800c314:	73fb      	strb	r3, [r7, #15]
 800c316:	e007      	b.n	800c328 <tcp_process_refused_data+0x68>
 800c318:	2300      	movs	r3, #0
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	2000      	movs	r0, #0
 800c320:	f000 f8a4 	bl	800c46c <tcp_recv_null>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d12a      	bne.n	800c386 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	f003 0320 	and.w	r3, r3, #32
 800c336:	2b00      	cmp	r3, #0
 800c338:	d033      	beq.n	800c3a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c33e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c342:	d005      	beq.n	800c350 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c348:	3301      	adds	r3, #1
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00b      	beq.n	800c372 <tcp_process_refused_data+0xb2>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6918      	ldr	r0, [r3, #16]
 800c364:	2300      	movs	r3, #0
 800c366:	2200      	movs	r2, #0
 800c368:	6879      	ldr	r1, [r7, #4]
 800c36a:	47a0      	blx	r4
 800c36c:	4603      	mov	r3, r0
 800c36e:	73fb      	strb	r3, [r7, #15]
 800c370:	e001      	b.n	800c376 <tcp_process_refused_data+0xb6>
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c37a:	f113 0f0d 	cmn.w	r3, #13
 800c37e:	d110      	bne.n	800c3a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c380:	f06f 030c 	mvn.w	r3, #12
 800c384:	e00e      	b.n	800c3a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c38a:	f113 0f0d 	cmn.w	r3, #13
 800c38e:	d102      	bne.n	800c396 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c390:	f06f 030c 	mvn.w	r3, #12
 800c394:	e006      	b.n	800c3a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c39c:	f06f 0304 	mvn.w	r3, #4
 800c3a0:	e000      	b.n	800c3a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd90      	pop	{r4, r7, pc}
 800c3ac:	0801527c 	.word	0x0801527c
 800c3b0:	0801578c 	.word	0x0801578c
 800c3b4:	080152c0 	.word	0x080152c0

0800c3b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c3c0:	e007      	b.n	800c3d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f80a 	bl	800c3e2 <tcp_seg_free>
    seg = next;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1f4      	bne.n	800c3c2 <tcp_segs_free+0xa>
  }
}
 800c3d8:	bf00      	nop
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00c      	beq.n	800c40a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d004      	beq.n	800c402 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fe fd71 	bl	800aee4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c402:	6879      	ldr	r1, [r7, #4]
 800c404:	2003      	movs	r0, #3
 800c406:	f7fd fec9 	bl	800a19c <memp_free>
  }
}
 800c40a:	bf00      	nop
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d106      	bne.n	800c430 <tcp_seg_copy+0x1c>
 800c422:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <tcp_seg_copy+0x4c>)
 800c424:	f240 6282 	movw	r2, #1666	; 0x682
 800c428:	490e      	ldr	r1, [pc, #56]	; (800c464 <tcp_seg_copy+0x50>)
 800c42a:	480f      	ldr	r0, [pc, #60]	; (800c468 <tcp_seg_copy+0x54>)
 800c42c:	f007 f8aa 	bl	8013584 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c430:	2003      	movs	r0, #3
 800c432:	f7fd fe3d 	bl	800a0b0 <memp_malloc>
 800c436:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <tcp_seg_copy+0x2e>
    return NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	e00a      	b.n	800c458 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c442:	2210      	movs	r2, #16
 800c444:	6879      	ldr	r1, [r7, #4]
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f007 f886 	bl	8013558 <memcpy>
  pbuf_ref(cseg->p);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	f7fe fded 	bl	800b030 <pbuf_ref>
  return cseg;
 800c456:	68fb      	ldr	r3, [r7, #12]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	0801527c 	.word	0x0801527c
 800c464:	080157d0 	.word	0x080157d0
 800c468:	080152c0 	.word	0x080152c0

0800c46c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d109      	bne.n	800c494 <tcp_recv_null+0x28>
 800c480:	4b12      	ldr	r3, [pc, #72]	; (800c4cc <tcp_recv_null+0x60>)
 800c482:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c486:	4912      	ldr	r1, [pc, #72]	; (800c4d0 <tcp_recv_null+0x64>)
 800c488:	4812      	ldr	r0, [pc, #72]	; (800c4d4 <tcp_recv_null+0x68>)
 800c48a:	f007 f87b 	bl	8013584 <iprintf>
 800c48e:	f06f 030f 	mvn.w	r3, #15
 800c492:	e016      	b.n	800c4c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d009      	beq.n	800c4ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	891b      	ldrh	r3, [r3, #8]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	68b8      	ldr	r0, [r7, #8]
 800c4a2:	f7ff fb19 	bl	800bad8 <tcp_recved>
    pbuf_free(p);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7fe fd1c 	bl	800aee4 <pbuf_free>
 800c4ac:	e008      	b.n	800c4c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c4ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d104      	bne.n	800c4c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c4b6:	68b8      	ldr	r0, [r7, #8]
 800c4b8:	f7ff f9be 	bl	800b838 <tcp_close>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	e000      	b.n	800c4c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	0801527c 	.word	0x0801527c
 800c4d0:	080157ec 	.word	0x080157ec
 800c4d4:	080152c0 	.word	0x080152c0

0800c4d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	db01      	blt.n	800c4ee <tcp_kill_prio+0x16>
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	e000      	b.n	800c4f0 <tcp_kill_prio+0x18>
 800c4ee:	237f      	movs	r3, #127	; 0x7f
 800c4f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c4f2:	7afb      	ldrb	r3, [r7, #11]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d034      	beq.n	800c562 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c4f8:	7afb      	ldrb	r3, [r7, #11]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c502:	2300      	movs	r3, #0
 800c504:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c506:	4b19      	ldr	r3, [pc, #100]	; (800c56c <tcp_kill_prio+0x94>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	e01f      	b.n	800c54e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	7d5b      	ldrb	r3, [r3, #21]
 800c512:	7afa      	ldrb	r2, [r7, #11]
 800c514:	429a      	cmp	r2, r3
 800c516:	d80c      	bhi.n	800c532 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c51c:	7afa      	ldrb	r2, [r7, #11]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d112      	bne.n	800c548 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c522:	4b13      	ldr	r3, [pc, #76]	; (800c570 <tcp_kill_prio+0x98>)
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d80a      	bhi.n	800c548 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c532:	4b0f      	ldr	r3, [pc, #60]	; (800c570 <tcp_kill_prio+0x98>)
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	7d5b      	ldrb	r3, [r3, #21]
 800c546:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	617b      	str	r3, [r7, #20]
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1dc      	bne.n	800c50e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d004      	beq.n	800c564 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c55a:	6938      	ldr	r0, [r7, #16]
 800c55c:	f7ff fa56 	bl	800ba0c <tcp_abort>
 800c560:	e000      	b.n	800c564 <tcp_kill_prio+0x8c>
    return;
 800c562:	bf00      	nop
  }
}
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20010578 	.word	0x20010578
 800c570:	2001056c 	.word	0x2001056c

0800c574 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	4603      	mov	r3, r0
 800c57c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c57e:	79fb      	ldrb	r3, [r7, #7]
 800c580:	2b08      	cmp	r3, #8
 800c582:	d009      	beq.n	800c598 <tcp_kill_state+0x24>
 800c584:	79fb      	ldrb	r3, [r7, #7]
 800c586:	2b09      	cmp	r3, #9
 800c588:	d006      	beq.n	800c598 <tcp_kill_state+0x24>
 800c58a:	4b1a      	ldr	r3, [pc, #104]	; (800c5f4 <tcp_kill_state+0x80>)
 800c58c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c590:	4919      	ldr	r1, [pc, #100]	; (800c5f8 <tcp_kill_state+0x84>)
 800c592:	481a      	ldr	r0, [pc, #104]	; (800c5fc <tcp_kill_state+0x88>)
 800c594:	f006 fff6 	bl	8013584 <iprintf>

  inactivity = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c59c:	2300      	movs	r3, #0
 800c59e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5a0:	4b17      	ldr	r3, [pc, #92]	; (800c600 <tcp_kill_state+0x8c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	e017      	b.n	800c5d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	7d1b      	ldrb	r3, [r3, #20]
 800c5ac:	79fa      	ldrb	r2, [r7, #7]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d10f      	bne.n	800c5d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c5b2:	4b14      	ldr	r3, [pc, #80]	; (800c604 <tcp_kill_state+0x90>)
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d807      	bhi.n	800c5d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c5c2:	4b10      	ldr	r3, [pc, #64]	; (800c604 <tcp_kill_state+0x90>)
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	617b      	str	r3, [r7, #20]
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1e4      	bne.n	800c5a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	6938      	ldr	r0, [r7, #16]
 800c5e8:	f7ff f952 	bl	800b890 <tcp_abandon>
  }
}
 800c5ec:	bf00      	nop
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	0801527c 	.word	0x0801527c
 800c5f8:	08015808 	.word	0x08015808
 800c5fc:	080152c0 	.word	0x080152c0
 800c600:	20010578 	.word	0x20010578
 800c604:	2001056c 	.word	0x2001056c

0800c608 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c616:	4b12      	ldr	r3, [pc, #72]	; (800c660 <tcp_kill_timewait+0x58>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	60fb      	str	r3, [r7, #12]
 800c61c:	e012      	b.n	800c644 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c61e:	4b11      	ldr	r3, [pc, #68]	; (800c664 <tcp_kill_timewait+0x5c>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d807      	bhi.n	800c63e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c62e:	4b0d      	ldr	r3, [pc, #52]	; (800c664 <tcp_kill_timewait+0x5c>)
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e9      	bne.n	800c61e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c650:	68b8      	ldr	r0, [r7, #8]
 800c652:	f7ff f9db 	bl	800ba0c <tcp_abort>
  }
}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	2001057c 	.word	0x2001057c
 800c664:	2001056c 	.word	0x2001056c

0800c668 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c66e:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <tcp_handle_closepend+0x48>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c674:	e014      	b.n	800c6a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	8b5b      	ldrh	r3, [r3, #26]
 800c680:	f003 0308 	and.w	r3, r3, #8
 800c684:	2b00      	cmp	r3, #0
 800c686:	d009      	beq.n	800c69c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	8b5b      	ldrh	r3, [r3, #26]
 800c68c:	f023 0308 	bic.w	r3, r3, #8
 800c690:	b29a      	uxth	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff f864 	bl	800b764 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1e7      	bne.n	800c676 <tcp_handle_closepend+0xe>
  }
}
 800c6a6:	bf00      	nop
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20010578 	.word	0x20010578

0800c6b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6be:	2001      	movs	r0, #1
 800c6c0:	f7fd fcf6 	bl	800a0b0 <memp_malloc>
 800c6c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d126      	bne.n	800c71a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c6cc:	f7ff ffcc 	bl	800c668 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c6d0:	f7ff ff9a 	bl	800c608 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	f7fd fceb 	bl	800a0b0 <memp_malloc>
 800c6da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d11b      	bne.n	800c71a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c6e2:	2009      	movs	r0, #9
 800c6e4:	f7ff ff46 	bl	800c574 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6e8:	2001      	movs	r0, #1
 800c6ea:	f7fd fce1 	bl	800a0b0 <memp_malloc>
 800c6ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d111      	bne.n	800c71a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c6f6:	2008      	movs	r0, #8
 800c6f8:	f7ff ff3c 	bl	800c574 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	f7fd fcd7 	bl	800a0b0 <memp_malloc>
 800c702:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d107      	bne.n	800c71a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7ff fee3 	bl	800c4d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c712:	2001      	movs	r0, #1
 800c714:	f7fd fccc 	bl	800a0b0 <memp_malloc>
 800c718:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d03f      	beq.n	800c7a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c720:	229c      	movs	r2, #156	; 0x9c
 800c722:	2100      	movs	r1, #0
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f006 ff25 	bl	8013574 <memset>
    pcb->prio = prio;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	79fa      	ldrb	r2, [r7, #7]
 800c72e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c736:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c740:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	22ff      	movs	r2, #255	; 0xff
 800c74e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c756:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2206      	movs	r2, #6
 800c75c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2206      	movs	r2, #6
 800c764:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c76c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2201      	movs	r2, #1
 800c772:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c776:	4b0d      	ldr	r3, [pc, #52]	; (800c7ac <tcp_alloc+0xf8>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c77e:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <tcp_alloc+0xfc>)
 800c780:	781a      	ldrb	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c78c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	4a08      	ldr	r2, [pc, #32]	; (800c7b4 <tcp_alloc+0x100>)
 800c794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	4a07      	ldr	r2, [pc, #28]	; (800c7b8 <tcp_alloc+0x104>)
 800c79c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	2001056c 	.word	0x2001056c
 800c7b0:	20010582 	.word	0x20010582
 800c7b4:	0800c46d 	.word	0x0800c46d
 800c7b8:	006ddd00 	.word	0x006ddd00

0800c7bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d107      	bne.n	800c7da <tcp_pcb_purge+0x1e>
 800c7ca:	4b21      	ldr	r3, [pc, #132]	; (800c850 <tcp_pcb_purge+0x94>)
 800c7cc:	f640 0251 	movw	r2, #2129	; 0x851
 800c7d0:	4920      	ldr	r1, [pc, #128]	; (800c854 <tcp_pcb_purge+0x98>)
 800c7d2:	4821      	ldr	r0, [pc, #132]	; (800c858 <tcp_pcb_purge+0x9c>)
 800c7d4:	f006 fed6 	bl	8013584 <iprintf>
 800c7d8:	e037      	b.n	800c84a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	7d1b      	ldrb	r3, [r3, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d033      	beq.n	800c84a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c7e6:	2b0a      	cmp	r3, #10
 800c7e8:	d02f      	beq.n	800c84a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d02b      	beq.n	800c84a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d007      	beq.n	800c80a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe fb70 	bl	800aee4 <pbuf_free>
      pcb->refused_data = NULL;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f986 	bl	800cb24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c81e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c824:	4618      	mov	r0, r3
 800c826:	f7ff fdc7 	bl	800c3b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff fdc2 	bl	800c3b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	66da      	str	r2, [r3, #108]	; 0x6c
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	0801527c 	.word	0x0801527c
 800c854:	080158c8 	.word	0x080158c8
 800c858:	080152c0 	.word	0x080152c0

0800c85c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d106      	bne.n	800c87a <tcp_pcb_remove+0x1e>
 800c86c:	4b3e      	ldr	r3, [pc, #248]	; (800c968 <tcp_pcb_remove+0x10c>)
 800c86e:	f640 0283 	movw	r2, #2179	; 0x883
 800c872:	493e      	ldr	r1, [pc, #248]	; (800c96c <tcp_pcb_remove+0x110>)
 800c874:	483e      	ldr	r0, [pc, #248]	; (800c970 <tcp_pcb_remove+0x114>)
 800c876:	f006 fe85 	bl	8013584 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <tcp_pcb_remove+0x32>
 800c880:	4b39      	ldr	r3, [pc, #228]	; (800c968 <tcp_pcb_remove+0x10c>)
 800c882:	f640 0284 	movw	r2, #2180	; 0x884
 800c886:	493b      	ldr	r1, [pc, #236]	; (800c974 <tcp_pcb_remove+0x118>)
 800c888:	4839      	ldr	r0, [pc, #228]	; (800c970 <tcp_pcb_remove+0x114>)
 800c88a:	f006 fe7b 	bl	8013584 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d105      	bne.n	800c8a4 <tcp_pcb_remove+0x48>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68da      	ldr	r2, [r3, #12]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	e013      	b.n	800c8cc <tcp_pcb_remove+0x70>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60fb      	str	r3, [r7, #12]
 800c8aa:	e00c      	b.n	800c8c6 <tcp_pcb_remove+0x6a>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d104      	bne.n	800c8c0 <tcp_pcb_remove+0x64>
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	60da      	str	r2, [r3, #12]
 800c8be:	e005      	b.n	800c8cc <tcp_pcb_remove+0x70>
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1ef      	bne.n	800c8ac <tcp_pcb_remove+0x50>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c8d2:	6838      	ldr	r0, [r7, #0]
 800c8d4:	f7ff ff72 	bl	800c7bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	2b0a      	cmp	r3, #10
 800c8de:	d013      	beq.n	800c908 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d00f      	beq.n	800c908 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	8b5b      	ldrh	r3, [r3, #26]
 800c8ec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d009      	beq.n	800c908 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	8b5b      	ldrh	r3, [r3, #26]
 800c8f8:	f043 0302 	orr.w	r3, r3, #2
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c902:	6838      	ldr	r0, [r7, #0]
 800c904:	f002 ff6e 	bl	800f7e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	7d1b      	ldrb	r3, [r3, #20]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d020      	beq.n	800c952 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c914:	2b00      	cmp	r3, #0
 800c916:	d006      	beq.n	800c926 <tcp_pcb_remove+0xca>
 800c918:	4b13      	ldr	r3, [pc, #76]	; (800c968 <tcp_pcb_remove+0x10c>)
 800c91a:	f640 0293 	movw	r2, #2195	; 0x893
 800c91e:	4916      	ldr	r1, [pc, #88]	; (800c978 <tcp_pcb_remove+0x11c>)
 800c920:	4813      	ldr	r0, [pc, #76]	; (800c970 <tcp_pcb_remove+0x114>)
 800c922:	f006 fe2f 	bl	8013584 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d006      	beq.n	800c93c <tcp_pcb_remove+0xe0>
 800c92e:	4b0e      	ldr	r3, [pc, #56]	; (800c968 <tcp_pcb_remove+0x10c>)
 800c930:	f640 0294 	movw	r2, #2196	; 0x894
 800c934:	4911      	ldr	r1, [pc, #68]	; (800c97c <tcp_pcb_remove+0x120>)
 800c936:	480e      	ldr	r0, [pc, #56]	; (800c970 <tcp_pcb_remove+0x114>)
 800c938:	f006 fe24 	bl	8013584 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c940:	2b00      	cmp	r3, #0
 800c942:	d006      	beq.n	800c952 <tcp_pcb_remove+0xf6>
 800c944:	4b08      	ldr	r3, [pc, #32]	; (800c968 <tcp_pcb_remove+0x10c>)
 800c946:	f640 0296 	movw	r2, #2198	; 0x896
 800c94a:	490d      	ldr	r1, [pc, #52]	; (800c980 <tcp_pcb_remove+0x124>)
 800c94c:	4808      	ldr	r0, [pc, #32]	; (800c970 <tcp_pcb_remove+0x114>)
 800c94e:	f006 fe19 	bl	8013584 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2200      	movs	r2, #0
 800c956:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	2200      	movs	r2, #0
 800c95c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c95e:	bf00      	nop
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	0801527c 	.word	0x0801527c
 800c96c:	080158e4 	.word	0x080158e4
 800c970:	080152c0 	.word	0x080152c0
 800c974:	08015900 	.word	0x08015900
 800c978:	08015920 	.word	0x08015920
 800c97c:	08015938 	.word	0x08015938
 800c980:	08015954 	.word	0x08015954

0800c984 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <tcp_next_iss+0x1c>
 800c992:	4b0a      	ldr	r3, [pc, #40]	; (800c9bc <tcp_next_iss+0x38>)
 800c994:	f640 02af 	movw	r2, #2223	; 0x8af
 800c998:	4909      	ldr	r1, [pc, #36]	; (800c9c0 <tcp_next_iss+0x3c>)
 800c99a:	480a      	ldr	r0, [pc, #40]	; (800c9c4 <tcp_next_iss+0x40>)
 800c99c:	f006 fdf2 	bl	8013584 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c9a0:	4b09      	ldr	r3, [pc, #36]	; (800c9c8 <tcp_next_iss+0x44>)
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	4b09      	ldr	r3, [pc, #36]	; (800c9cc <tcp_next_iss+0x48>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	4a07      	ldr	r2, [pc, #28]	; (800c9c8 <tcp_next_iss+0x44>)
 800c9ac:	6013      	str	r3, [r2, #0]
  return iss;
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <tcp_next_iss+0x44>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	0801527c 	.word	0x0801527c
 800c9c0:	0801596c 	.word	0x0801596c
 800c9c4:	080152c0 	.word	0x080152c0
 800c9c8:	20000028 	.word	0x20000028
 800c9cc:	2001056c 	.word	0x2001056c

0800c9d0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
 800c9dc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d106      	bne.n	800c9f2 <tcp_eff_send_mss_netif+0x22>
 800c9e4:	4b14      	ldr	r3, [pc, #80]	; (800ca38 <tcp_eff_send_mss_netif+0x68>)
 800c9e6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c9ea:	4914      	ldr	r1, [pc, #80]	; (800ca3c <tcp_eff_send_mss_netif+0x6c>)
 800c9ec:	4814      	ldr	r0, [pc, #80]	; (800ca40 <tcp_eff_send_mss_netif+0x70>)
 800c9ee:	f006 fdc9 	bl	8013584 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d101      	bne.n	800c9fc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c9f8:	89fb      	ldrh	r3, [r7, #14]
 800c9fa:	e019      	b.n	800ca30 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ca00:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ca02:	8afb      	ldrh	r3, [r7, #22]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d012      	beq.n	800ca2e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ca08:	2328      	movs	r3, #40	; 0x28
 800ca0a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ca0c:	8afa      	ldrh	r2, [r7, #22]
 800ca0e:	8abb      	ldrh	r3, [r7, #20]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d904      	bls.n	800ca1e <tcp_eff_send_mss_netif+0x4e>
 800ca14:	8afa      	ldrh	r2, [r7, #22]
 800ca16:	8abb      	ldrh	r3, [r7, #20]
 800ca18:	1ad3      	subs	r3, r2, r3
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	e000      	b.n	800ca20 <tcp_eff_send_mss_netif+0x50>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ca22:	8a7a      	ldrh	r2, [r7, #18]
 800ca24:	89fb      	ldrh	r3, [r7, #14]
 800ca26:	4293      	cmp	r3, r2
 800ca28:	bf28      	it	cs
 800ca2a:	4613      	movcs	r3, r2
 800ca2c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ca2e:	89fb      	ldrh	r3, [r7, #14]
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3718      	adds	r7, #24
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	0801527c 	.word	0x0801527c
 800ca3c:	08015988 	.word	0x08015988
 800ca40:	080152c0 	.word	0x080152c0

0800ca44 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d119      	bne.n	800ca8c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ca58:	4b10      	ldr	r3, [pc, #64]	; (800ca9c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ca5a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ca5e:	4910      	ldr	r1, [pc, #64]	; (800caa0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ca60:	4810      	ldr	r0, [pc, #64]	; (800caa4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ca62:	f006 fd8f 	bl	8013584 <iprintf>

  while (pcb != NULL) {
 800ca66:	e011      	b.n	800ca8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d108      	bne.n	800ca86 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ca7a:	68f8      	ldr	r0, [r7, #12]
 800ca7c:	f7fe ffc6 	bl	800ba0c <tcp_abort>
      pcb = next;
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	e002      	b.n	800ca8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1ea      	bne.n	800ca68 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	0801527c 	.word	0x0801527c
 800caa0:	080159b0 	.word	0x080159b0
 800caa4:	080152c0 	.word	0x080152c0

0800caa8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d02a      	beq.n	800cb0e <tcp_netif_ip_addr_changed+0x66>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d026      	beq.n	800cb0e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cac0:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <tcp_netif_ip_addr_changed+0x70>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4619      	mov	r1, r3
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff ffbc 	bl	800ca44 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cacc:	4b13      	ldr	r3, [pc, #76]	; (800cb1c <tcp_netif_ip_addr_changed+0x74>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7ff ffb6 	bl	800ca44 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d017      	beq.n	800cb0e <tcp_netif_ip_addr_changed+0x66>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d013      	beq.n	800cb0e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cae6:	4b0e      	ldr	r3, [pc, #56]	; (800cb20 <tcp_netif_ip_addr_changed+0x78>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	e00c      	b.n	800cb08 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d103      	bne.n	800cb02 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1ef      	bne.n	800caee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cb0e:	bf00      	nop
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	20010578 	.word	0x20010578
 800cb1c:	20010570 	.word	0x20010570
 800cb20:	20010574 	.word	0x20010574

0800cb24 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d007      	beq.n	800cb44 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff fc3d 	bl	800c3b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cb44:	bf00      	nop
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cb4c:	b590      	push	{r4, r7, lr}
 800cb4e:	b08d      	sub	sp, #52	; 0x34
 800cb50:	af04      	add	r7, sp, #16
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d105      	bne.n	800cb68 <tcp_input+0x1c>
 800cb5c:	4b9b      	ldr	r3, [pc, #620]	; (800cdcc <tcp_input+0x280>)
 800cb5e:	2283      	movs	r2, #131	; 0x83
 800cb60:	499b      	ldr	r1, [pc, #620]	; (800cdd0 <tcp_input+0x284>)
 800cb62:	489c      	ldr	r0, [pc, #624]	; (800cdd4 <tcp_input+0x288>)
 800cb64:	f006 fd0e 	bl	8013584 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	4a9a      	ldr	r2, [pc, #616]	; (800cdd8 <tcp_input+0x28c>)
 800cb6e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	895b      	ldrh	r3, [r3, #10]
 800cb74:	2b13      	cmp	r3, #19
 800cb76:	f240 83d1 	bls.w	800d31c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cb7a:	4b98      	ldr	r3, [pc, #608]	; (800cddc <tcp_input+0x290>)
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	4a97      	ldr	r2, [pc, #604]	; (800cddc <tcp_input+0x290>)
 800cb80:	6812      	ldr	r2, [r2, #0]
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f005 fc47 	bl	8012418 <ip4_addr_isbroadcast_u32>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f040 83c7 	bne.w	800d320 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cb92:	4b92      	ldr	r3, [pc, #584]	; (800cddc <tcp_input+0x290>)
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cb9a:	2be0      	cmp	r3, #224	; 0xe0
 800cb9c:	f000 83c0 	beq.w	800d320 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cba0:	4b8d      	ldr	r3, [pc, #564]	; (800cdd8 <tcp_input+0x28c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	899b      	ldrh	r3, [r3, #12]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fc fd99 	bl	80096e0 <lwip_htons>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	0b1b      	lsrs	r3, r3, #12
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cbba:	7cbb      	ldrb	r3, [r7, #18]
 800cbbc:	2b13      	cmp	r3, #19
 800cbbe:	f240 83b1 	bls.w	800d324 <tcp_input+0x7d8>
 800cbc2:	7cbb      	ldrb	r3, [r7, #18]
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	891b      	ldrh	r3, [r3, #8]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	f200 83aa 	bhi.w	800d324 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cbd0:	7cbb      	ldrb	r3, [r7, #18]
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	3b14      	subs	r3, #20
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	4b81      	ldr	r3, [pc, #516]	; (800cde0 <tcp_input+0x294>)
 800cbda:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cbdc:	4b81      	ldr	r3, [pc, #516]	; (800cde4 <tcp_input+0x298>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	895a      	ldrh	r2, [r3, #10]
 800cbe6:	7cbb      	ldrb	r3, [r7, #18]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d309      	bcc.n	800cc02 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cbee:	4b7c      	ldr	r3, [pc, #496]	; (800cde0 <tcp_input+0x294>)
 800cbf0:	881a      	ldrh	r2, [r3, #0]
 800cbf2:	4b7d      	ldr	r3, [pc, #500]	; (800cde8 <tcp_input+0x29c>)
 800cbf4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cbf6:	7cbb      	ldrb	r3, [r7, #18]
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7fe f8ec 	bl	800add8 <pbuf_remove_header>
 800cc00:	e04e      	b.n	800cca0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d105      	bne.n	800cc16 <tcp_input+0xca>
 800cc0a:	4b70      	ldr	r3, [pc, #448]	; (800cdcc <tcp_input+0x280>)
 800cc0c:	22c2      	movs	r2, #194	; 0xc2
 800cc0e:	4977      	ldr	r1, [pc, #476]	; (800cdec <tcp_input+0x2a0>)
 800cc10:	4870      	ldr	r0, [pc, #448]	; (800cdd4 <tcp_input+0x288>)
 800cc12:	f006 fcb7 	bl	8013584 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cc16:	2114      	movs	r1, #20
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7fe f8dd 	bl	800add8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	895a      	ldrh	r2, [r3, #10]
 800cc22:	4b71      	ldr	r3, [pc, #452]	; (800cde8 <tcp_input+0x29c>)
 800cc24:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cc26:	4b6e      	ldr	r3, [pc, #440]	; (800cde0 <tcp_input+0x294>)
 800cc28:	881a      	ldrh	r2, [r3, #0]
 800cc2a:	4b6f      	ldr	r3, [pc, #444]	; (800cde8 <tcp_input+0x29c>)
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cc32:	4b6d      	ldr	r3, [pc, #436]	; (800cde8 <tcp_input+0x29c>)
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7fe f8cd 	bl	800add8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	895b      	ldrh	r3, [r3, #10]
 800cc44:	8a3a      	ldrh	r2, [r7, #16]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	f200 836e 	bhi.w	800d328 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	4a64      	ldr	r2, [pc, #400]	; (800cde4 <tcp_input+0x298>)
 800cc54:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	8a3a      	ldrh	r2, [r7, #16]
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fe f8ba 	bl	800add8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	891a      	ldrh	r2, [r3, #8]
 800cc68:	8a3b      	ldrh	r3, [r7, #16]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	895b      	ldrh	r3, [r3, #10]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d005      	beq.n	800cc86 <tcp_input+0x13a>
 800cc7a:	4b54      	ldr	r3, [pc, #336]	; (800cdcc <tcp_input+0x280>)
 800cc7c:	22df      	movs	r2, #223	; 0xdf
 800cc7e:	495c      	ldr	r1, [pc, #368]	; (800cdf0 <tcp_input+0x2a4>)
 800cc80:	4854      	ldr	r0, [pc, #336]	; (800cdd4 <tcp_input+0x288>)
 800cc82:	f006 fc7f 	bl	8013584 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	891a      	ldrh	r2, [r3, #8]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	891b      	ldrh	r3, [r3, #8]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d005      	beq.n	800cca0 <tcp_input+0x154>
 800cc94:	4b4d      	ldr	r3, [pc, #308]	; (800cdcc <tcp_input+0x280>)
 800cc96:	22e0      	movs	r2, #224	; 0xe0
 800cc98:	4956      	ldr	r1, [pc, #344]	; (800cdf4 <tcp_input+0x2a8>)
 800cc9a:	484e      	ldr	r0, [pc, #312]	; (800cdd4 <tcp_input+0x288>)
 800cc9c:	f006 fc72 	bl	8013584 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cca0:	4b4d      	ldr	r3, [pc, #308]	; (800cdd8 <tcp_input+0x28c>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	4a4b      	ldr	r2, [pc, #300]	; (800cdd8 <tcp_input+0x28c>)
 800ccaa:	6814      	ldr	r4, [r2, #0]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fc fd17 	bl	80096e0 <lwip_htons>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ccb6:	4b48      	ldr	r3, [pc, #288]	; (800cdd8 <tcp_input+0x28c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	885b      	ldrh	r3, [r3, #2]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	4a46      	ldr	r2, [pc, #280]	; (800cdd8 <tcp_input+0x28c>)
 800ccc0:	6814      	ldr	r4, [r2, #0]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fc fd0c 	bl	80096e0 <lwip_htons>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cccc:	4b42      	ldr	r3, [pc, #264]	; (800cdd8 <tcp_input+0x28c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	4a41      	ldr	r2, [pc, #260]	; (800cdd8 <tcp_input+0x28c>)
 800ccd4:	6814      	ldr	r4, [r2, #0]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fc fd17 	bl	800970a <lwip_htonl>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	6063      	str	r3, [r4, #4]
 800cce0:	6863      	ldr	r3, [r4, #4]
 800cce2:	4a45      	ldr	r2, [pc, #276]	; (800cdf8 <tcp_input+0x2ac>)
 800cce4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cce6:	4b3c      	ldr	r3, [pc, #240]	; (800cdd8 <tcp_input+0x28c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	4a3a      	ldr	r2, [pc, #232]	; (800cdd8 <tcp_input+0x28c>)
 800ccee:	6814      	ldr	r4, [r2, #0]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fc fd0a 	bl	800970a <lwip_htonl>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	68a3      	ldr	r3, [r4, #8]
 800ccfc:	4a3f      	ldr	r2, [pc, #252]	; (800cdfc <tcp_input+0x2b0>)
 800ccfe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cd00:	4b35      	ldr	r3, [pc, #212]	; (800cdd8 <tcp_input+0x28c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	89db      	ldrh	r3, [r3, #14]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4a33      	ldr	r2, [pc, #204]	; (800cdd8 <tcp_input+0x28c>)
 800cd0a:	6814      	ldr	r4, [r2, #0]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fc fce7 	bl	80096e0 <lwip_htons>
 800cd12:	4603      	mov	r3, r0
 800cd14:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cd16:	4b30      	ldr	r3, [pc, #192]	; (800cdd8 <tcp_input+0x28c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	899b      	ldrh	r3, [r3, #12]
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fc fcde 	bl	80096e0 <lwip_htons>
 800cd24:	4603      	mov	r3, r0
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	4b34      	ldr	r3, [pc, #208]	; (800ce00 <tcp_input+0x2b4>)
 800cd30:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	891a      	ldrh	r2, [r3, #8]
 800cd36:	4b33      	ldr	r3, [pc, #204]	; (800ce04 <tcp_input+0x2b8>)
 800cd38:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cd3a:	4b31      	ldr	r3, [pc, #196]	; (800ce00 <tcp_input+0x2b4>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	f003 0303 	and.w	r3, r3, #3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00c      	beq.n	800cd60 <tcp_input+0x214>
    tcplen++;
 800cd46:	4b2f      	ldr	r3, [pc, #188]	; (800ce04 <tcp_input+0x2b8>)
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	4b2d      	ldr	r3, [pc, #180]	; (800ce04 <tcp_input+0x2b8>)
 800cd50:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	891a      	ldrh	r2, [r3, #8]
 800cd56:	4b2b      	ldr	r3, [pc, #172]	; (800ce04 <tcp_input+0x2b8>)
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	f200 82e6 	bhi.w	800d32c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cd60:	2300      	movs	r3, #0
 800cd62:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd64:	4b28      	ldr	r3, [pc, #160]	; (800ce08 <tcp_input+0x2bc>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	61fb      	str	r3, [r7, #28]
 800cd6a:	e09d      	b.n	800cea8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	7d1b      	ldrb	r3, [r3, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d105      	bne.n	800cd80 <tcp_input+0x234>
 800cd74:	4b15      	ldr	r3, [pc, #84]	; (800cdcc <tcp_input+0x280>)
 800cd76:	22fb      	movs	r2, #251	; 0xfb
 800cd78:	4924      	ldr	r1, [pc, #144]	; (800ce0c <tcp_input+0x2c0>)
 800cd7a:	4816      	ldr	r0, [pc, #88]	; (800cdd4 <tcp_input+0x288>)
 800cd7c:	f006 fc02 	bl	8013584 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	7d1b      	ldrb	r3, [r3, #20]
 800cd84:	2b0a      	cmp	r3, #10
 800cd86:	d105      	bne.n	800cd94 <tcp_input+0x248>
 800cd88:	4b10      	ldr	r3, [pc, #64]	; (800cdcc <tcp_input+0x280>)
 800cd8a:	22fc      	movs	r2, #252	; 0xfc
 800cd8c:	4920      	ldr	r1, [pc, #128]	; (800ce10 <tcp_input+0x2c4>)
 800cd8e:	4811      	ldr	r0, [pc, #68]	; (800cdd4 <tcp_input+0x288>)
 800cd90:	f006 fbf8 	bl	8013584 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	7d1b      	ldrb	r3, [r3, #20]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d105      	bne.n	800cda8 <tcp_input+0x25c>
 800cd9c:	4b0b      	ldr	r3, [pc, #44]	; (800cdcc <tcp_input+0x280>)
 800cd9e:	22fd      	movs	r2, #253	; 0xfd
 800cda0:	491c      	ldr	r1, [pc, #112]	; (800ce14 <tcp_input+0x2c8>)
 800cda2:	480c      	ldr	r0, [pc, #48]	; (800cdd4 <tcp_input+0x288>)
 800cda4:	f006 fbee 	bl	8013584 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	7a1b      	ldrb	r3, [r3, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d033      	beq.n	800ce18 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	7a1a      	ldrb	r2, [r3, #8]
 800cdb4:	4b09      	ldr	r3, [pc, #36]	; (800cddc <tcp_input+0x290>)
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d029      	beq.n	800ce18 <tcp_input+0x2cc>
      prev = pcb;
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	61bb      	str	r3, [r7, #24]
      continue;
 800cdc8:	e06b      	b.n	800cea2 <tcp_input+0x356>
 800cdca:	bf00      	nop
 800cdcc:	080159e4 	.word	0x080159e4
 800cdd0:	08015a18 	.word	0x08015a18
 800cdd4:	08015a30 	.word	0x08015a30
 800cdd8:	20010594 	.word	0x20010594
 800cddc:	20009470 	.word	0x20009470
 800cde0:	20010598 	.word	0x20010598
 800cde4:	2001059c 	.word	0x2001059c
 800cde8:	2001059a 	.word	0x2001059a
 800cdec:	08015a58 	.word	0x08015a58
 800cdf0:	08015a68 	.word	0x08015a68
 800cdf4:	08015a74 	.word	0x08015a74
 800cdf8:	200105a4 	.word	0x200105a4
 800cdfc:	200105a8 	.word	0x200105a8
 800ce00:	200105b0 	.word	0x200105b0
 800ce04:	200105ae 	.word	0x200105ae
 800ce08:	20010578 	.word	0x20010578
 800ce0c:	08015a94 	.word	0x08015a94
 800ce10:	08015abc 	.word	0x08015abc
 800ce14:	08015ae8 	.word	0x08015ae8
    }

    if (pcb->remote_port == tcphdr->src &&
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	8b1a      	ldrh	r2, [r3, #24]
 800ce1c:	4b72      	ldr	r3, [pc, #456]	; (800cfe8 <tcp_input+0x49c>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	881b      	ldrh	r3, [r3, #0]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d13a      	bne.n	800ce9e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	8ada      	ldrh	r2, [r3, #22]
 800ce2c:	4b6e      	ldr	r3, [pc, #440]	; (800cfe8 <tcp_input+0x49c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	885b      	ldrh	r3, [r3, #2]
 800ce32:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d132      	bne.n	800ce9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	4b6b      	ldr	r3, [pc, #428]	; (800cfec <tcp_input+0x4a0>)
 800ce3e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d12c      	bne.n	800ce9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	4b68      	ldr	r3, [pc, #416]	; (800cfec <tcp_input+0x4a0>)
 800ce4a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d126      	bne.n	800ce9e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	69fa      	ldr	r2, [r7, #28]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d106      	bne.n	800ce68 <tcp_input+0x31c>
 800ce5a:	4b65      	ldr	r3, [pc, #404]	; (800cff0 <tcp_input+0x4a4>)
 800ce5c:	f240 120d 	movw	r2, #269	; 0x10d
 800ce60:	4964      	ldr	r1, [pc, #400]	; (800cff4 <tcp_input+0x4a8>)
 800ce62:	4865      	ldr	r0, [pc, #404]	; (800cff8 <tcp_input+0x4ac>)
 800ce64:	f006 fb8e 	bl	8013584 <iprintf>
      if (prev != NULL) {
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00a      	beq.n	800ce84 <tcp_input+0x338>
        prev->next = pcb->next;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ce76:	4b61      	ldr	r3, [pc, #388]	; (800cffc <tcp_input+0x4b0>)
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ce7e:	4a5f      	ldr	r2, [pc, #380]	; (800cffc <tcp_input+0x4b0>)
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	69fa      	ldr	r2, [r7, #28]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d111      	bne.n	800ceb2 <tcp_input+0x366>
 800ce8e:	4b58      	ldr	r3, [pc, #352]	; (800cff0 <tcp_input+0x4a4>)
 800ce90:	f240 1215 	movw	r2, #277	; 0x115
 800ce94:	495a      	ldr	r1, [pc, #360]	; (800d000 <tcp_input+0x4b4>)
 800ce96:	4858      	ldr	r0, [pc, #352]	; (800cff8 <tcp_input+0x4ac>)
 800ce98:	f006 fb74 	bl	8013584 <iprintf>
      break;
 800ce9c:	e009      	b.n	800ceb2 <tcp_input+0x366>
    }
    prev = pcb;
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	61fb      	str	r3, [r7, #28]
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f47f af5e 	bne.w	800cd6c <tcp_input+0x220>
 800ceb0:	e000      	b.n	800ceb4 <tcp_input+0x368>
      break;
 800ceb2:	bf00      	nop
  }

  if (pcb == NULL) {
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f040 80aa 	bne.w	800d010 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cebc:	4b51      	ldr	r3, [pc, #324]	; (800d004 <tcp_input+0x4b8>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	61fb      	str	r3, [r7, #28]
 800cec2:	e03f      	b.n	800cf44 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	7d1b      	ldrb	r3, [r3, #20]
 800cec8:	2b0a      	cmp	r3, #10
 800ceca:	d006      	beq.n	800ceda <tcp_input+0x38e>
 800cecc:	4b48      	ldr	r3, [pc, #288]	; (800cff0 <tcp_input+0x4a4>)
 800cece:	f240 121f 	movw	r2, #287	; 0x11f
 800ced2:	494d      	ldr	r1, [pc, #308]	; (800d008 <tcp_input+0x4bc>)
 800ced4:	4848      	ldr	r0, [pc, #288]	; (800cff8 <tcp_input+0x4ac>)
 800ced6:	f006 fb55 	bl	8013584 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	7a1b      	ldrb	r3, [r3, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d009      	beq.n	800cef6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	7a1a      	ldrb	r2, [r3, #8]
 800cee6:	4b41      	ldr	r3, [pc, #260]	; (800cfec <tcp_input+0x4a0>)
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceee:	3301      	adds	r3, #1
 800cef0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d122      	bne.n	800cf3c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	8b1a      	ldrh	r2, [r3, #24]
 800cefa:	4b3b      	ldr	r3, [pc, #236]	; (800cfe8 <tcp_input+0x49c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d11b      	bne.n	800cf3e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	8ada      	ldrh	r2, [r3, #22]
 800cf0a:	4b37      	ldr	r3, [pc, #220]	; (800cfe8 <tcp_input+0x49c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	885b      	ldrh	r3, [r3, #2]
 800cf10:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d113      	bne.n	800cf3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	4b34      	ldr	r3, [pc, #208]	; (800cfec <tcp_input+0x4a0>)
 800cf1c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d10d      	bne.n	800cf3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4b31      	ldr	r3, [pc, #196]	; (800cfec <tcp_input+0x4a0>)
 800cf28:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d107      	bne.n	800cf3e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cf2e:	69f8      	ldr	r0, [r7, #28]
 800cf30:	f000 fb56 	bl	800d5e0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7fd ffd5 	bl	800aee4 <pbuf_free>
        return;
 800cf3a:	e1fd      	b.n	800d338 <tcp_input+0x7ec>
        continue;
 800cf3c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1bc      	bne.n	800cec4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf4e:	4b2f      	ldr	r3, [pc, #188]	; (800d00c <tcp_input+0x4c0>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	617b      	str	r3, [r7, #20]
 800cf54:	e02a      	b.n	800cfac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	7a1b      	ldrb	r3, [r3, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00c      	beq.n	800cf78 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	7a1a      	ldrb	r2, [r3, #8]
 800cf62:	4b22      	ldr	r3, [pc, #136]	; (800cfec <tcp_input+0x4a0>)
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d002      	beq.n	800cf78 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	61bb      	str	r3, [r7, #24]
        continue;
 800cf76:	e016      	b.n	800cfa6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	8ada      	ldrh	r2, [r3, #22]
 800cf7c:	4b1a      	ldr	r3, [pc, #104]	; (800cfe8 <tcp_input+0x49c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	885b      	ldrh	r3, [r3, #2]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d10c      	bne.n	800cfa2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	4b17      	ldr	r3, [pc, #92]	; (800cfec <tcp_input+0x4a0>)
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d00f      	beq.n	800cfb4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00d      	beq.n	800cfb6 <tcp_input+0x46a>
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d009      	beq.n	800cfb6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1d1      	bne.n	800cf56 <tcp_input+0x40a>
 800cfb2:	e000      	b.n	800cfb6 <tcp_input+0x46a>
            break;
 800cfb4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d029      	beq.n	800d010 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	68da      	ldr	r2, [r3, #12]
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cfca:	4b10      	ldr	r3, [pc, #64]	; (800d00c <tcp_input+0x4c0>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cfd2:	4a0e      	ldr	r2, [pc, #56]	; (800d00c <tcp_input+0x4c0>)
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cfd8:	6978      	ldr	r0, [r7, #20]
 800cfda:	f000 fa03 	bl	800d3e4 <tcp_listen_input>
      }
      pbuf_free(p);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7fd ff80 	bl	800aee4 <pbuf_free>
      return;
 800cfe4:	e1a8      	b.n	800d338 <tcp_input+0x7ec>
 800cfe6:	bf00      	nop
 800cfe8:	20010594 	.word	0x20010594
 800cfec:	20009470 	.word	0x20009470
 800cff0:	080159e4 	.word	0x080159e4
 800cff4:	08015b10 	.word	0x08015b10
 800cff8:	08015a30 	.word	0x08015a30
 800cffc:	20010578 	.word	0x20010578
 800d000:	08015b3c 	.word	0x08015b3c
 800d004:	2001057c 	.word	0x2001057c
 800d008:	08015b68 	.word	0x08015b68
 800d00c:	20010574 	.word	0x20010574
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	2b00      	cmp	r3, #0
 800d014:	f000 8158 	beq.w	800d2c8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d018:	4b95      	ldr	r3, [pc, #596]	; (800d270 <tcp_input+0x724>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	891a      	ldrh	r2, [r3, #8]
 800d022:	4b93      	ldr	r3, [pc, #588]	; (800d270 <tcp_input+0x724>)
 800d024:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d026:	4a92      	ldr	r2, [pc, #584]	; (800d270 <tcp_input+0x724>)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d02c:	4b91      	ldr	r3, [pc, #580]	; (800d274 <tcp_input+0x728>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a8f      	ldr	r2, [pc, #572]	; (800d270 <tcp_input+0x724>)
 800d032:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d034:	4b90      	ldr	r3, [pc, #576]	; (800d278 <tcp_input+0x72c>)
 800d036:	2200      	movs	r2, #0
 800d038:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d03a:	4b90      	ldr	r3, [pc, #576]	; (800d27c <tcp_input+0x730>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d040:	4b8f      	ldr	r3, [pc, #572]	; (800d280 <tcp_input+0x734>)
 800d042:	2200      	movs	r2, #0
 800d044:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d046:	4b8f      	ldr	r3, [pc, #572]	; (800d284 <tcp_input+0x738>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	f003 0308 	and.w	r3, r3, #8
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d006      	beq.n	800d060 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	7b5b      	ldrb	r3, [r3, #13]
 800d056:	f043 0301 	orr.w	r3, r3, #1
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d064:	2b00      	cmp	r3, #0
 800d066:	d017      	beq.n	800d098 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d068:	69f8      	ldr	r0, [r7, #28]
 800d06a:	f7ff f929 	bl	800c2c0 <tcp_process_refused_data>
 800d06e:	4603      	mov	r3, r0
 800d070:	f113 0f0d 	cmn.w	r3, #13
 800d074:	d007      	beq.n	800d086 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00c      	beq.n	800d098 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d07e:	4b82      	ldr	r3, [pc, #520]	; (800d288 <tcp_input+0x73c>)
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d008      	beq.n	800d098 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f040 80e3 	bne.w	800d256 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d090:	69f8      	ldr	r0, [r7, #28]
 800d092:	f003 f9ad 	bl	80103f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d096:	e0de      	b.n	800d256 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d098:	4a7c      	ldr	r2, [pc, #496]	; (800d28c <tcp_input+0x740>)
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d09e:	69f8      	ldr	r0, [r7, #28]
 800d0a0:	f000 fb18 	bl	800d6d4 <tcp_process>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d0a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0ac:	f113 0f0d 	cmn.w	r3, #13
 800d0b0:	f000 80d3 	beq.w	800d25a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d0b4:	4b71      	ldr	r3, [pc, #452]	; (800d27c <tcp_input+0x730>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f003 0308 	and.w	r3, r3, #8
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d015      	beq.n	800d0ec <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d008      	beq.n	800d0dc <tcp_input+0x590>
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	6912      	ldr	r2, [r2, #16]
 800d0d4:	f06f 010d 	mvn.w	r1, #13
 800d0d8:	4610      	mov	r0, r2
 800d0da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d0dc:	69f9      	ldr	r1, [r7, #28]
 800d0de:	486c      	ldr	r0, [pc, #432]	; (800d290 <tcp_input+0x744>)
 800d0e0:	f7ff fbbc 	bl	800c85c <tcp_pcb_remove>
        tcp_free(pcb);
 800d0e4:	69f8      	ldr	r0, [r7, #28]
 800d0e6:	f7fe f9a9 	bl	800b43c <tcp_free>
 800d0ea:	e0da      	b.n	800d2a2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d0f0:	4b63      	ldr	r3, [pc, #396]	; (800d280 <tcp_input+0x734>)
 800d0f2:	881b      	ldrh	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01d      	beq.n	800d134 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d0f8:	4b61      	ldr	r3, [pc, #388]	; (800d280 <tcp_input+0x734>)
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00a      	beq.n	800d11e <tcp_input+0x5d2>
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d10e:	69fa      	ldr	r2, [r7, #28]
 800d110:	6910      	ldr	r0, [r2, #16]
 800d112:	89fa      	ldrh	r2, [r7, #14]
 800d114:	69f9      	ldr	r1, [r7, #28]
 800d116:	4798      	blx	r3
 800d118:	4603      	mov	r3, r0
 800d11a:	74fb      	strb	r3, [r7, #19]
 800d11c:	e001      	b.n	800d122 <tcp_input+0x5d6>
 800d11e:	2300      	movs	r3, #0
 800d120:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d122:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d126:	f113 0f0d 	cmn.w	r3, #13
 800d12a:	f000 8098 	beq.w	800d25e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d12e:	4b54      	ldr	r3, [pc, #336]	; (800d280 <tcp_input+0x734>)
 800d130:	2200      	movs	r2, #0
 800d132:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d134:	69f8      	ldr	r0, [r7, #28]
 800d136:	f000 f915 	bl	800d364 <tcp_input_delayed_close>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f040 8090 	bne.w	800d262 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d142:	4b4d      	ldr	r3, [pc, #308]	; (800d278 <tcp_input+0x72c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d041      	beq.n	800d1ce <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d006      	beq.n	800d160 <tcp_input+0x614>
 800d152:	4b50      	ldr	r3, [pc, #320]	; (800d294 <tcp_input+0x748>)
 800d154:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d158:	494f      	ldr	r1, [pc, #316]	; (800d298 <tcp_input+0x74c>)
 800d15a:	4850      	ldr	r0, [pc, #320]	; (800d29c <tcp_input+0x750>)
 800d15c:	f006 fa12 	bl	8013584 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	8b5b      	ldrh	r3, [r3, #26]
 800d164:	f003 0310 	and.w	r3, r3, #16
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d008      	beq.n	800d17e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d16c:	4b42      	ldr	r3, [pc, #264]	; (800d278 <tcp_input+0x72c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4618      	mov	r0, r3
 800d172:	f7fd feb7 	bl	800aee4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d176:	69f8      	ldr	r0, [r7, #28]
 800d178:	f7fe fc48 	bl	800ba0c <tcp_abort>
            goto aborted;
 800d17c:	e091      	b.n	800d2a2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00c      	beq.n	800d1a2 <tcp_input+0x656>
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	6918      	ldr	r0, [r3, #16]
 800d192:	4b39      	ldr	r3, [pc, #228]	; (800d278 <tcp_input+0x72c>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	2300      	movs	r3, #0
 800d198:	69f9      	ldr	r1, [r7, #28]
 800d19a:	47a0      	blx	r4
 800d19c:	4603      	mov	r3, r0
 800d19e:	74fb      	strb	r3, [r7, #19]
 800d1a0:	e008      	b.n	800d1b4 <tcp_input+0x668>
 800d1a2:	4b35      	ldr	r3, [pc, #212]	; (800d278 <tcp_input+0x72c>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	69f9      	ldr	r1, [r7, #28]
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	f7ff f95e 	bl	800c46c <tcp_recv_null>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d1b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1b8:	f113 0f0d 	cmn.w	r3, #13
 800d1bc:	d053      	beq.n	800d266 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d1be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d003      	beq.n	800d1ce <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d1c6:	4b2c      	ldr	r3, [pc, #176]	; (800d278 <tcp_input+0x72c>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d1ce:	4b2b      	ldr	r3, [pc, #172]	; (800d27c <tcp_input+0x730>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	f003 0320 	and.w	r3, r3, #32
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d030      	beq.n	800d23c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d009      	beq.n	800d1f6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1e6:	7b5a      	ldrb	r2, [r3, #13]
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1ec:	f042 0220 	orr.w	r2, r2, #32
 800d1f0:	b2d2      	uxtb	r2, r2
 800d1f2:	735a      	strb	r2, [r3, #13]
 800d1f4:	e022      	b.n	800d23c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d1fe:	d005      	beq.n	800d20c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d204:	3301      	adds	r3, #1
 800d206:	b29a      	uxth	r2, r3
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00b      	beq.n	800d22e <tcp_input+0x6e2>
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	6918      	ldr	r0, [r3, #16]
 800d220:	2300      	movs	r3, #0
 800d222:	2200      	movs	r2, #0
 800d224:	69f9      	ldr	r1, [r7, #28]
 800d226:	47a0      	blx	r4
 800d228:	4603      	mov	r3, r0
 800d22a:	74fb      	strb	r3, [r7, #19]
 800d22c:	e001      	b.n	800d232 <tcp_input+0x6e6>
 800d22e:	2300      	movs	r3, #0
 800d230:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d232:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d236:	f113 0f0d 	cmn.w	r3, #13
 800d23a:	d016      	beq.n	800d26a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <tcp_input+0x740>)
 800d23e:	2200      	movs	r2, #0
 800d240:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d242:	69f8      	ldr	r0, [r7, #28]
 800d244:	f000 f88e 	bl	800d364 <tcp_input_delayed_close>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d128      	bne.n	800d2a0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d24e:	69f8      	ldr	r0, [r7, #28]
 800d250:	f002 fac8 	bl	800f7e4 <tcp_output>
 800d254:	e025      	b.n	800d2a2 <tcp_input+0x756>
        goto aborted;
 800d256:	bf00      	nop
 800d258:	e023      	b.n	800d2a2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d25a:	bf00      	nop
 800d25c:	e021      	b.n	800d2a2 <tcp_input+0x756>
              goto aborted;
 800d25e:	bf00      	nop
 800d260:	e01f      	b.n	800d2a2 <tcp_input+0x756>
          goto aborted;
 800d262:	bf00      	nop
 800d264:	e01d      	b.n	800d2a2 <tcp_input+0x756>
            goto aborted;
 800d266:	bf00      	nop
 800d268:	e01b      	b.n	800d2a2 <tcp_input+0x756>
              goto aborted;
 800d26a:	bf00      	nop
 800d26c:	e019      	b.n	800d2a2 <tcp_input+0x756>
 800d26e:	bf00      	nop
 800d270:	20010584 	.word	0x20010584
 800d274:	20010594 	.word	0x20010594
 800d278:	200105b4 	.word	0x200105b4
 800d27c:	200105b1 	.word	0x200105b1
 800d280:	200105ac 	.word	0x200105ac
 800d284:	200105b0 	.word	0x200105b0
 800d288:	200105ae 	.word	0x200105ae
 800d28c:	200105b8 	.word	0x200105b8
 800d290:	20010578 	.word	0x20010578
 800d294:	080159e4 	.word	0x080159e4
 800d298:	08015b98 	.word	0x08015b98
 800d29c:	08015a30 	.word	0x08015a30
          goto aborted;
 800d2a0:	bf00      	nop
    tcp_input_pcb = NULL;
 800d2a2:	4b27      	ldr	r3, [pc, #156]	; (800d340 <tcp_input+0x7f4>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d2a8:	4b26      	ldr	r3, [pc, #152]	; (800d344 <tcp_input+0x7f8>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d2ae:	4b26      	ldr	r3, [pc, #152]	; (800d348 <tcp_input+0x7fc>)
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d03f      	beq.n	800d336 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d2b6:	4b24      	ldr	r3, [pc, #144]	; (800d348 <tcp_input+0x7fc>)
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fd fe12 	bl	800aee4 <pbuf_free>
      inseg.p = NULL;
 800d2c0:	4b21      	ldr	r3, [pc, #132]	; (800d348 <tcp_input+0x7fc>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d2c6:	e036      	b.n	800d336 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d2c8:	4b20      	ldr	r3, [pc, #128]	; (800d34c <tcp_input+0x800>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	899b      	ldrh	r3, [r3, #12]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fc fa05 	bl	80096e0 <lwip_htons>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 0304 	and.w	r3, r3, #4
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d118      	bne.n	800d314 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2e2:	4b1b      	ldr	r3, [pc, #108]	; (800d350 <tcp_input+0x804>)
 800d2e4:	6819      	ldr	r1, [r3, #0]
 800d2e6:	4b1b      	ldr	r3, [pc, #108]	; (800d354 <tcp_input+0x808>)
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	4b1a      	ldr	r3, [pc, #104]	; (800d358 <tcp_input+0x80c>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2f2:	4b16      	ldr	r3, [pc, #88]	; (800d34c <tcp_input+0x800>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2f6:	885b      	ldrh	r3, [r3, #2]
 800d2f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2fa:	4a14      	ldr	r2, [pc, #80]	; (800d34c <tcp_input+0x800>)
 800d2fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2fe:	8812      	ldrh	r2, [r2, #0]
 800d300:	b292      	uxth	r2, r2
 800d302:	9202      	str	r2, [sp, #8]
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	4b15      	ldr	r3, [pc, #84]	; (800d35c <tcp_input+0x810>)
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	4b15      	ldr	r3, [pc, #84]	; (800d360 <tcp_input+0x814>)
 800d30c:	4602      	mov	r2, r0
 800d30e:	2000      	movs	r0, #0
 800d310:	f003 f81c 	bl	801034c <tcp_rst>
    pbuf_free(p);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7fd fde5 	bl	800aee4 <pbuf_free>
  return;
 800d31a:	e00c      	b.n	800d336 <tcp_input+0x7ea>
    goto dropped;
 800d31c:	bf00      	nop
 800d31e:	e006      	b.n	800d32e <tcp_input+0x7e2>
    goto dropped;
 800d320:	bf00      	nop
 800d322:	e004      	b.n	800d32e <tcp_input+0x7e2>
    goto dropped;
 800d324:	bf00      	nop
 800d326:	e002      	b.n	800d32e <tcp_input+0x7e2>
      goto dropped;
 800d328:	bf00      	nop
 800d32a:	e000      	b.n	800d32e <tcp_input+0x7e2>
      goto dropped;
 800d32c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7fd fdd8 	bl	800aee4 <pbuf_free>
 800d334:	e000      	b.n	800d338 <tcp_input+0x7ec>
  return;
 800d336:	bf00      	nop
}
 800d338:	3724      	adds	r7, #36	; 0x24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd90      	pop	{r4, r7, pc}
 800d33e:	bf00      	nop
 800d340:	200105b8 	.word	0x200105b8
 800d344:	200105b4 	.word	0x200105b4
 800d348:	20010584 	.word	0x20010584
 800d34c:	20010594 	.word	0x20010594
 800d350:	200105a8 	.word	0x200105a8
 800d354:	200105ae 	.word	0x200105ae
 800d358:	200105a4 	.word	0x200105a4
 800d35c:	20009480 	.word	0x20009480
 800d360:	20009484 	.word	0x20009484

0800d364 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <tcp_input_delayed_close+0x1c>
 800d372:	4b17      	ldr	r3, [pc, #92]	; (800d3d0 <tcp_input_delayed_close+0x6c>)
 800d374:	f240 225a 	movw	r2, #602	; 0x25a
 800d378:	4916      	ldr	r1, [pc, #88]	; (800d3d4 <tcp_input_delayed_close+0x70>)
 800d37a:	4817      	ldr	r0, [pc, #92]	; (800d3d8 <tcp_input_delayed_close+0x74>)
 800d37c:	f006 f902 	bl	8013584 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d380:	4b16      	ldr	r3, [pc, #88]	; (800d3dc <tcp_input_delayed_close+0x78>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 0310 	and.w	r3, r3, #16
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d01c      	beq.n	800d3c6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	8b5b      	ldrh	r3, [r3, #26]
 800d390:	f003 0310 	and.w	r3, r3, #16
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10d      	bne.n	800d3b4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d008      	beq.n	800d3b4 <tcp_input_delayed_close+0x50>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	6912      	ldr	r2, [r2, #16]
 800d3ac:	f06f 010e 	mvn.w	r1, #14
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d3b4:	6879      	ldr	r1, [r7, #4]
 800d3b6:	480a      	ldr	r0, [pc, #40]	; (800d3e0 <tcp_input_delayed_close+0x7c>)
 800d3b8:	f7ff fa50 	bl	800c85c <tcp_pcb_remove>
    tcp_free(pcb);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7fe f83d 	bl	800b43c <tcp_free>
    return 1;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e000      	b.n	800d3c8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	080159e4 	.word	0x080159e4
 800d3d4:	08015bb4 	.word	0x08015bb4
 800d3d8:	08015a30 	.word	0x08015a30
 800d3dc:	200105b1 	.word	0x200105b1
 800d3e0:	20010578 	.word	0x20010578

0800d3e4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d3e4:	b590      	push	{r4, r7, lr}
 800d3e6:	b08b      	sub	sp, #44	; 0x2c
 800d3e8:	af04      	add	r7, sp, #16
 800d3ea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d3ec:	4b6f      	ldr	r3, [pc, #444]	; (800d5ac <tcp_listen_input+0x1c8>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f003 0304 	and.w	r3, r3, #4
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f040 80d2 	bne.w	800d59e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d106      	bne.n	800d40e <tcp_listen_input+0x2a>
 800d400:	4b6b      	ldr	r3, [pc, #428]	; (800d5b0 <tcp_listen_input+0x1cc>)
 800d402:	f240 2281 	movw	r2, #641	; 0x281
 800d406:	496b      	ldr	r1, [pc, #428]	; (800d5b4 <tcp_listen_input+0x1d0>)
 800d408:	486b      	ldr	r0, [pc, #428]	; (800d5b8 <tcp_listen_input+0x1d4>)
 800d40a:	f006 f8bb 	bl	8013584 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d40e:	4b67      	ldr	r3, [pc, #412]	; (800d5ac <tcp_listen_input+0x1c8>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	f003 0310 	and.w	r3, r3, #16
 800d416:	2b00      	cmp	r3, #0
 800d418:	d019      	beq.n	800d44e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d41a:	4b68      	ldr	r3, [pc, #416]	; (800d5bc <tcp_listen_input+0x1d8>)
 800d41c:	6819      	ldr	r1, [r3, #0]
 800d41e:	4b68      	ldr	r3, [pc, #416]	; (800d5c0 <tcp_listen_input+0x1dc>)
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	461a      	mov	r2, r3
 800d424:	4b67      	ldr	r3, [pc, #412]	; (800d5c4 <tcp_listen_input+0x1e0>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d42a:	4b67      	ldr	r3, [pc, #412]	; (800d5c8 <tcp_listen_input+0x1e4>)
 800d42c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d42e:	885b      	ldrh	r3, [r3, #2]
 800d430:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d432:	4a65      	ldr	r2, [pc, #404]	; (800d5c8 <tcp_listen_input+0x1e4>)
 800d434:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d436:	8812      	ldrh	r2, [r2, #0]
 800d438:	b292      	uxth	r2, r2
 800d43a:	9202      	str	r2, [sp, #8]
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	4b63      	ldr	r3, [pc, #396]	; (800d5cc <tcp_listen_input+0x1e8>)
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	4b63      	ldr	r3, [pc, #396]	; (800d5d0 <tcp_listen_input+0x1ec>)
 800d444:	4602      	mov	r2, r0
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f002 ff80 	bl	801034c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d44c:	e0a9      	b.n	800d5a2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d44e:	4b57      	ldr	r3, [pc, #348]	; (800d5ac <tcp_listen_input+0x1c8>)
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b00      	cmp	r3, #0
 800d458:	f000 80a3 	beq.w	800d5a2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7d5b      	ldrb	r3, [r3, #21]
 800d460:	4618      	mov	r0, r3
 800d462:	f7ff f927 	bl	800c6b4 <tcp_alloc>
 800d466:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d111      	bne.n	800d492 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00a      	beq.n	800d48c <tcp_listen_input+0xa8>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6910      	ldr	r0, [r2, #16]
 800d47e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d482:	2100      	movs	r1, #0
 800d484:	4798      	blx	r3
 800d486:	4603      	mov	r3, r0
 800d488:	73bb      	strb	r3, [r7, #14]
      return;
 800d48a:	e08b      	b.n	800d5a4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d48c:	23f0      	movs	r3, #240	; 0xf0
 800d48e:	73bb      	strb	r3, [r7, #14]
      return;
 800d490:	e088      	b.n	800d5a4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d492:	4b50      	ldr	r3, [pc, #320]	; (800d5d4 <tcp_listen_input+0x1f0>)
 800d494:	695a      	ldr	r2, [r3, #20]
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d49a:	4b4e      	ldr	r3, [pc, #312]	; (800d5d4 <tcp_listen_input+0x1f0>)
 800d49c:	691a      	ldr	r2, [r3, #16]
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	8ada      	ldrh	r2, [r3, #22]
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d4aa:	4b47      	ldr	r3, [pc, #284]	; (800d5c8 <tcp_listen_input+0x1e4>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	881b      	ldrh	r3, [r3, #0]
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2203      	movs	r2, #3
 800d4ba:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d4bc:	4b41      	ldr	r3, [pc, #260]	; (800d5c4 <tcp_listen_input+0x1e0>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d4ce:	6978      	ldr	r0, [r7, #20]
 800d4d0:	f7ff fa58 	bl	800c984 <tcp_next_iss>
 800d4d4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	693a      	ldr	r2, [r7, #16]
 800d4e6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	693a      	ldr	r2, [r7, #16]
 800d4ec:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d4ee:	4b35      	ldr	r3, [pc, #212]	; (800d5c4 <tcp_listen_input+0x1e0>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	1e5a      	subs	r2, r3, #1
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	691a      	ldr	r2, [r3, #16]
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	7a5b      	ldrb	r3, [r3, #9]
 800d50a:	f003 030c 	and.w	r3, r3, #12
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	7a1a      	ldrb	r2, [r3, #8]
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d51c:	4b2e      	ldr	r3, [pc, #184]	; (800d5d8 <tcp_listen_input+0x1f4>)
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	60da      	str	r2, [r3, #12]
 800d524:	4a2c      	ldr	r2, [pc, #176]	; (800d5d8 <tcp_listen_input+0x1f4>)
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	f003 f8d1 	bl	80106d0 <tcp_timer_needed>
 800d52e:	4b2b      	ldr	r3, [pc, #172]	; (800d5dc <tcp_listen_input+0x1f8>)
 800d530:	2201      	movs	r2, #1
 800d532:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d534:	6978      	ldr	r0, [r7, #20]
 800d536:	f001 fd8f 	bl	800f058 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d53a:	4b23      	ldr	r3, [pc, #140]	; (800d5c8 <tcp_listen_input+0x1e4>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	89db      	ldrh	r3, [r3, #14]
 800d540:	b29a      	uxth	r2, r3
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	3304      	adds	r3, #4
 800d55c:	4618      	mov	r0, r3
 800d55e:	f004 fcc5 	bl	8011eec <ip4_route>
 800d562:	4601      	mov	r1, r0
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	3304      	adds	r3, #4
 800d568:	461a      	mov	r2, r3
 800d56a:	4620      	mov	r0, r4
 800d56c:	f7ff fa30 	bl	800c9d0 <tcp_eff_send_mss_netif>
 800d570:	4603      	mov	r3, r0
 800d572:	461a      	mov	r2, r3
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d578:	2112      	movs	r1, #18
 800d57a:	6978      	ldr	r0, [r7, #20]
 800d57c:	f002 f844 	bl	800f608 <tcp_enqueue_flags>
 800d580:	4603      	mov	r3, r0
 800d582:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d004      	beq.n	800d596 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d58c:	2100      	movs	r1, #0
 800d58e:	6978      	ldr	r0, [r7, #20]
 800d590:	f7fe f97e 	bl	800b890 <tcp_abandon>
      return;
 800d594:	e006      	b.n	800d5a4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d596:	6978      	ldr	r0, [r7, #20]
 800d598:	f002 f924 	bl	800f7e4 <tcp_output>
  return;
 800d59c:	e001      	b.n	800d5a2 <tcp_listen_input+0x1be>
    return;
 800d59e:	bf00      	nop
 800d5a0:	e000      	b.n	800d5a4 <tcp_listen_input+0x1c0>
  return;
 800d5a2:	bf00      	nop
}
 800d5a4:	371c      	adds	r7, #28
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd90      	pop	{r4, r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	200105b0 	.word	0x200105b0
 800d5b0:	080159e4 	.word	0x080159e4
 800d5b4:	08015bdc 	.word	0x08015bdc
 800d5b8:	08015a30 	.word	0x08015a30
 800d5bc:	200105a8 	.word	0x200105a8
 800d5c0:	200105ae 	.word	0x200105ae
 800d5c4:	200105a4 	.word	0x200105a4
 800d5c8:	20010594 	.word	0x20010594
 800d5cc:	20009480 	.word	0x20009480
 800d5d0:	20009484 	.word	0x20009484
 800d5d4:	20009470 	.word	0x20009470
 800d5d8:	20010578 	.word	0x20010578
 800d5dc:	20010580 	.word	0x20010580

0800d5e0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d5e8:	4b2f      	ldr	r3, [pc, #188]	; (800d6a8 <tcp_timewait_input+0xc8>)
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	f003 0304 	and.w	r3, r3, #4
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d153      	bne.n	800d69c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d106      	bne.n	800d608 <tcp_timewait_input+0x28>
 800d5fa:	4b2c      	ldr	r3, [pc, #176]	; (800d6ac <tcp_timewait_input+0xcc>)
 800d5fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d600:	492b      	ldr	r1, [pc, #172]	; (800d6b0 <tcp_timewait_input+0xd0>)
 800d602:	482c      	ldr	r0, [pc, #176]	; (800d6b4 <tcp_timewait_input+0xd4>)
 800d604:	f005 ffbe 	bl	8013584 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d608:	4b27      	ldr	r3, [pc, #156]	; (800d6a8 <tcp_timewait_input+0xc8>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	f003 0302 	and.w	r3, r3, #2
 800d610:	2b00      	cmp	r3, #0
 800d612:	d02a      	beq.n	800d66a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d614:	4b28      	ldr	r3, [pc, #160]	; (800d6b8 <tcp_timewait_input+0xd8>)
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	db2d      	blt.n	800d67e <tcp_timewait_input+0x9e>
 800d622:	4b25      	ldr	r3, [pc, #148]	; (800d6b8 <tcp_timewait_input+0xd8>)
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62a:	6879      	ldr	r1, [r7, #4]
 800d62c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d62e:	440b      	add	r3, r1
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	2b00      	cmp	r3, #0
 800d634:	dc23      	bgt.n	800d67e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d636:	4b21      	ldr	r3, [pc, #132]	; (800d6bc <tcp_timewait_input+0xdc>)
 800d638:	6819      	ldr	r1, [r3, #0]
 800d63a:	4b21      	ldr	r3, [pc, #132]	; (800d6c0 <tcp_timewait_input+0xe0>)
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	4b1d      	ldr	r3, [pc, #116]	; (800d6b8 <tcp_timewait_input+0xd8>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d646:	4b1f      	ldr	r3, [pc, #124]	; (800d6c4 <tcp_timewait_input+0xe4>)
 800d648:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d64a:	885b      	ldrh	r3, [r3, #2]
 800d64c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d64e:	4a1d      	ldr	r2, [pc, #116]	; (800d6c4 <tcp_timewait_input+0xe4>)
 800d650:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d652:	8812      	ldrh	r2, [r2, #0]
 800d654:	b292      	uxth	r2, r2
 800d656:	9202      	str	r2, [sp, #8]
 800d658:	9301      	str	r3, [sp, #4]
 800d65a:	4b1b      	ldr	r3, [pc, #108]	; (800d6c8 <tcp_timewait_input+0xe8>)
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	4b1b      	ldr	r3, [pc, #108]	; (800d6cc <tcp_timewait_input+0xec>)
 800d660:	4602      	mov	r2, r0
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f002 fe72 	bl	801034c <tcp_rst>
      return;
 800d668:	e01b      	b.n	800d6a2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d66a:	4b0f      	ldr	r3, [pc, #60]	; (800d6a8 <tcp_timewait_input+0xc8>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d003      	beq.n	800d67e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d676:	4b16      	ldr	r3, [pc, #88]	; (800d6d0 <tcp_timewait_input+0xf0>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d67e:	4b10      	ldr	r3, [pc, #64]	; (800d6c0 <tcp_timewait_input+0xe0>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00c      	beq.n	800d6a0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	8b5b      	ldrh	r3, [r3, #26]
 800d68a:	f043 0302 	orr.w	r3, r3, #2
 800d68e:	b29a      	uxth	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f002 f8a5 	bl	800f7e4 <tcp_output>
  }
  return;
 800d69a:	e001      	b.n	800d6a0 <tcp_timewait_input+0xc0>
    return;
 800d69c:	bf00      	nop
 800d69e:	e000      	b.n	800d6a2 <tcp_timewait_input+0xc2>
  return;
 800d6a0:	bf00      	nop
}
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	200105b0 	.word	0x200105b0
 800d6ac:	080159e4 	.word	0x080159e4
 800d6b0:	08015bfc 	.word	0x08015bfc
 800d6b4:	08015a30 	.word	0x08015a30
 800d6b8:	200105a4 	.word	0x200105a4
 800d6bc:	200105a8 	.word	0x200105a8
 800d6c0:	200105ae 	.word	0x200105ae
 800d6c4:	20010594 	.word	0x20010594
 800d6c8:	20009480 	.word	0x20009480
 800d6cc:	20009484 	.word	0x20009484
 800d6d0:	2001056c 	.word	0x2001056c

0800d6d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d6d4:	b590      	push	{r4, r7, lr}
 800d6d6:	b08d      	sub	sp, #52	; 0x34
 800d6d8:	af04      	add	r7, sp, #16
 800d6da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d106      	bne.n	800d6f8 <tcp_process+0x24>
 800d6ea:	4b9d      	ldr	r3, [pc, #628]	; (800d960 <tcp_process+0x28c>)
 800d6ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d6f0:	499c      	ldr	r1, [pc, #624]	; (800d964 <tcp_process+0x290>)
 800d6f2:	489d      	ldr	r0, [pc, #628]	; (800d968 <tcp_process+0x294>)
 800d6f4:	f005 ff46 	bl	8013584 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d6f8:	4b9c      	ldr	r3, [pc, #624]	; (800d96c <tcp_process+0x298>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	f003 0304 	and.w	r3, r3, #4
 800d700:	2b00      	cmp	r3, #0
 800d702:	d04e      	beq.n	800d7a2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	7d1b      	ldrb	r3, [r3, #20]
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d108      	bne.n	800d71e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d710:	4b97      	ldr	r3, [pc, #604]	; (800d970 <tcp_process+0x29c>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	429a      	cmp	r2, r3
 800d716:	d123      	bne.n	800d760 <tcp_process+0x8c>
        acceptable = 1;
 800d718:	2301      	movs	r3, #1
 800d71a:	76fb      	strb	r3, [r7, #27]
 800d71c:	e020      	b.n	800d760 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d722:	4b94      	ldr	r3, [pc, #592]	; (800d974 <tcp_process+0x2a0>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	429a      	cmp	r2, r3
 800d728:	d102      	bne.n	800d730 <tcp_process+0x5c>
        acceptable = 1;
 800d72a:	2301      	movs	r3, #1
 800d72c:	76fb      	strb	r3, [r7, #27]
 800d72e:	e017      	b.n	800d760 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d730:	4b90      	ldr	r3, [pc, #576]	; (800d974 <tcp_process+0x2a0>)
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	db10      	blt.n	800d760 <tcp_process+0x8c>
 800d73e:	4b8d      	ldr	r3, [pc, #564]	; (800d974 <tcp_process+0x2a0>)
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d74a:	440b      	add	r3, r1
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	dc06      	bgt.n	800d760 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	8b5b      	ldrh	r3, [r3, #26]
 800d756:	f043 0302 	orr.w	r3, r3, #2
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d760:	7efb      	ldrb	r3, [r7, #27]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d01b      	beq.n	800d79e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	7d1b      	ldrb	r3, [r3, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d106      	bne.n	800d77c <tcp_process+0xa8>
 800d76e:	4b7c      	ldr	r3, [pc, #496]	; (800d960 <tcp_process+0x28c>)
 800d770:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d774:	4980      	ldr	r1, [pc, #512]	; (800d978 <tcp_process+0x2a4>)
 800d776:	487c      	ldr	r0, [pc, #496]	; (800d968 <tcp_process+0x294>)
 800d778:	f005 ff04 	bl	8013584 <iprintf>
      recv_flags |= TF_RESET;
 800d77c:	4b7f      	ldr	r3, [pc, #508]	; (800d97c <tcp_process+0x2a8>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	f043 0308 	orr.w	r3, r3, #8
 800d784:	b2da      	uxtb	r2, r3
 800d786:	4b7d      	ldr	r3, [pc, #500]	; (800d97c <tcp_process+0x2a8>)
 800d788:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	8b5b      	ldrh	r3, [r3, #26]
 800d78e:	f023 0301 	bic.w	r3, r3, #1
 800d792:	b29a      	uxth	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d798:	f06f 030d 	mvn.w	r3, #13
 800d79c:	e37a      	b.n	800de94 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	e378      	b.n	800de94 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d7a2:	4b72      	ldr	r3, [pc, #456]	; (800d96c <tcp_process+0x298>)
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	f003 0302 	and.w	r3, r3, #2
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d010      	beq.n	800d7d0 <tcp_process+0xfc>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7d1b      	ldrb	r3, [r3, #20]
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	d00c      	beq.n	800d7d0 <tcp_process+0xfc>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ba:	2b03      	cmp	r3, #3
 800d7bc:	d008      	beq.n	800d7d0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	8b5b      	ldrh	r3, [r3, #26]
 800d7c2:	f043 0302 	orr.w	r3, r3, #2
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	e361      	b.n	800de94 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	8b5b      	ldrh	r3, [r3, #26]
 800d7d4:	f003 0310 	and.w	r3, r3, #16
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d103      	bne.n	800d7e4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d7dc:	4b68      	ldr	r3, [pc, #416]	; (800d980 <tcp_process+0x2ac>)
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f001 fc2f 	bl	800f058 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	7d1b      	ldrb	r3, [r3, #20]
 800d7fe:	3b02      	subs	r3, #2
 800d800:	2b07      	cmp	r3, #7
 800d802:	f200 8337 	bhi.w	800de74 <tcp_process+0x7a0>
 800d806:	a201      	add	r2, pc, #4	; (adr r2, 800d80c <tcp_process+0x138>)
 800d808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80c:	0800d82d 	.word	0x0800d82d
 800d810:	0800da5d 	.word	0x0800da5d
 800d814:	0800dbd5 	.word	0x0800dbd5
 800d818:	0800dbff 	.word	0x0800dbff
 800d81c:	0800dd23 	.word	0x0800dd23
 800d820:	0800dbd5 	.word	0x0800dbd5
 800d824:	0800ddaf 	.word	0x0800ddaf
 800d828:	0800de3f 	.word	0x0800de3f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d82c:	4b4f      	ldr	r3, [pc, #316]	; (800d96c <tcp_process+0x298>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	f003 0310 	and.w	r3, r3, #16
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 80e4 	beq.w	800da02 <tcp_process+0x32e>
 800d83a:	4b4c      	ldr	r3, [pc, #304]	; (800d96c <tcp_process+0x298>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	f003 0302 	and.w	r3, r3, #2
 800d842:	2b00      	cmp	r3, #0
 800d844:	f000 80dd 	beq.w	800da02 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d84c:	1c5a      	adds	r2, r3, #1
 800d84e:	4b48      	ldr	r3, [pc, #288]	; (800d970 <tcp_process+0x29c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	429a      	cmp	r2, r3
 800d854:	f040 80d5 	bne.w	800da02 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d858:	4b46      	ldr	r3, [pc, #280]	; (800d974 <tcp_process+0x2a0>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d86a:	4b41      	ldr	r3, [pc, #260]	; (800d970 <tcp_process+0x29c>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d872:	4b44      	ldr	r3, [pc, #272]	; (800d984 <tcp_process+0x2b0>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	89db      	ldrh	r3, [r3, #14]
 800d878:	b29a      	uxth	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d88c:	4b39      	ldr	r3, [pc, #228]	; (800d974 <tcp_process+0x2a0>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2204      	movs	r2, #4
 800d89a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f004 fb21 	bl	8011eec <ip4_route>
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f7ff f88c 	bl	800c9d0 <tcp_eff_send_mss_netif>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8c4:	009a      	lsls	r2, r3, #2
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8ca:	005b      	lsls	r3, r3, #1
 800d8cc:	f241 111c 	movw	r1, #4380	; 0x111c
 800d8d0:	428b      	cmp	r3, r1
 800d8d2:	bf38      	it	cc
 800d8d4:	460b      	movcc	r3, r1
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d204      	bcs.n	800d8e4 <tcp_process+0x210>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	e00d      	b.n	800d900 <tcp_process+0x22c>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d904      	bls.n	800d8fc <tcp_process+0x228>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	e001      	b.n	800d900 <tcp_process+0x22c>
 800d8fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d106      	bne.n	800d91e <tcp_process+0x24a>
 800d910:	4b13      	ldr	r3, [pc, #76]	; (800d960 <tcp_process+0x28c>)
 800d912:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d916:	491c      	ldr	r1, [pc, #112]	; (800d988 <tcp_process+0x2b4>)
 800d918:	4813      	ldr	r0, [pc, #76]	; (800d968 <tcp_process+0x294>)
 800d91a:	f005 fe33 	bl	8013584 <iprintf>
        --pcb->snd_queuelen;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d924:	3b01      	subs	r3, #1
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d932:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d12a      	bne.n	800d990 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d106      	bne.n	800d954 <tcp_process+0x280>
 800d946:	4b06      	ldr	r3, [pc, #24]	; (800d960 <tcp_process+0x28c>)
 800d948:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d94c:	490f      	ldr	r1, [pc, #60]	; (800d98c <tcp_process+0x2b8>)
 800d94e:	4806      	ldr	r0, [pc, #24]	; (800d968 <tcp_process+0x294>)
 800d950:	f005 fe18 	bl	8013584 <iprintf>
          pcb->unsent = rseg->next;
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	66da      	str	r2, [r3, #108]	; 0x6c
 800d95c:	e01c      	b.n	800d998 <tcp_process+0x2c4>
 800d95e:	bf00      	nop
 800d960:	080159e4 	.word	0x080159e4
 800d964:	08015c1c 	.word	0x08015c1c
 800d968:	08015a30 	.word	0x08015a30
 800d96c:	200105b0 	.word	0x200105b0
 800d970:	200105a8 	.word	0x200105a8
 800d974:	200105a4 	.word	0x200105a4
 800d978:	08015c38 	.word	0x08015c38
 800d97c:	200105b1 	.word	0x200105b1
 800d980:	2001056c 	.word	0x2001056c
 800d984:	20010594 	.word	0x20010594
 800d988:	08015c58 	.word	0x08015c58
 800d98c:	08015c70 	.word	0x08015c70
        } else {
          pcb->unacked = rseg->next;
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d998:	69f8      	ldr	r0, [r7, #28]
 800d99a:	f7fe fd22 	bl	800c3e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d104      	bne.n	800d9b0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9ac:	861a      	strh	r2, [r3, #48]	; 0x30
 800d9ae:	e006      	b.n	800d9be <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00a      	beq.n	800d9de <tcp_process+0x30a>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	6910      	ldr	r0, [r2, #16]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	6879      	ldr	r1, [r7, #4]
 800d9d6:	4798      	blx	r3
 800d9d8:	4603      	mov	r3, r0
 800d9da:	76bb      	strb	r3, [r7, #26]
 800d9dc:	e001      	b.n	800d9e2 <tcp_process+0x30e>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d9e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d9e6:	f113 0f0d 	cmn.w	r3, #13
 800d9ea:	d102      	bne.n	800d9f2 <tcp_process+0x31e>
          return ERR_ABRT;
 800d9ec:	f06f 030c 	mvn.w	r3, #12
 800d9f0:	e250      	b.n	800de94 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	8b5b      	ldrh	r3, [r3, #26]
 800d9f6:	f043 0302 	orr.w	r3, r3, #2
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800da00:	e23a      	b.n	800de78 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800da02:	4b98      	ldr	r3, [pc, #608]	; (800dc64 <tcp_process+0x590>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	f003 0310 	and.w	r3, r3, #16
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 8234 	beq.w	800de78 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da10:	4b95      	ldr	r3, [pc, #596]	; (800dc68 <tcp_process+0x594>)
 800da12:	6819      	ldr	r1, [r3, #0]
 800da14:	4b95      	ldr	r3, [pc, #596]	; (800dc6c <tcp_process+0x598>)
 800da16:	881b      	ldrh	r3, [r3, #0]
 800da18:	461a      	mov	r2, r3
 800da1a:	4b95      	ldr	r3, [pc, #596]	; (800dc70 <tcp_process+0x59c>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da20:	4b94      	ldr	r3, [pc, #592]	; (800dc74 <tcp_process+0x5a0>)
 800da22:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da24:	885b      	ldrh	r3, [r3, #2]
 800da26:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da28:	4a92      	ldr	r2, [pc, #584]	; (800dc74 <tcp_process+0x5a0>)
 800da2a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da2c:	8812      	ldrh	r2, [r2, #0]
 800da2e:	b292      	uxth	r2, r2
 800da30:	9202      	str	r2, [sp, #8]
 800da32:	9301      	str	r3, [sp, #4]
 800da34:	4b90      	ldr	r3, [pc, #576]	; (800dc78 <tcp_process+0x5a4>)
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	4b90      	ldr	r3, [pc, #576]	; (800dc7c <tcp_process+0x5a8>)
 800da3a:	4602      	mov	r2, r0
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f002 fc85 	bl	801034c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da48:	2b05      	cmp	r3, #5
 800da4a:	f200 8215 	bhi.w	800de78 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f002 fa4f 	bl	800fef8 <tcp_rexmit_rto>
      break;
 800da5a:	e20d      	b.n	800de78 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800da5c:	4b81      	ldr	r3, [pc, #516]	; (800dc64 <tcp_process+0x590>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	f003 0310 	and.w	r3, r3, #16
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 80a1 	beq.w	800dbac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da6a:	4b7f      	ldr	r3, [pc, #508]	; (800dc68 <tcp_process+0x594>)
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da72:	1ad3      	subs	r3, r2, r3
 800da74:	3b01      	subs	r3, #1
 800da76:	2b00      	cmp	r3, #0
 800da78:	db7e      	blt.n	800db78 <tcp_process+0x4a4>
 800da7a:	4b7b      	ldr	r3, [pc, #492]	; (800dc68 <tcp_process+0x594>)
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	2b00      	cmp	r3, #0
 800da86:	dc77      	bgt.n	800db78 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2204      	movs	r2, #4
 800da8c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da92:	2b00      	cmp	r3, #0
 800da94:	d102      	bne.n	800da9c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800da96:	23fa      	movs	r3, #250	; 0xfa
 800da98:	76bb      	strb	r3, [r7, #26]
 800da9a:	e01d      	b.n	800dad8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d106      	bne.n	800dab4 <tcp_process+0x3e0>
 800daa6:	4b76      	ldr	r3, [pc, #472]	; (800dc80 <tcp_process+0x5ac>)
 800daa8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800daac:	4975      	ldr	r1, [pc, #468]	; (800dc84 <tcp_process+0x5b0>)
 800daae:	4876      	ldr	r0, [pc, #472]	; (800dc88 <tcp_process+0x5b4>)
 800dab0:	f005 fd68 	bl	8013584 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dab8:	699b      	ldr	r3, [r3, #24]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00a      	beq.n	800dad4 <tcp_process+0x400>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	6910      	ldr	r0, [r2, #16]
 800dac8:	2200      	movs	r2, #0
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	4798      	blx	r3
 800dace:	4603      	mov	r3, r0
 800dad0:	76bb      	strb	r3, [r7, #26]
 800dad2:	e001      	b.n	800dad8 <tcp_process+0x404>
 800dad4:	23f0      	movs	r3, #240	; 0xf0
 800dad6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800dad8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00a      	beq.n	800daf6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800dae0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dae4:	f113 0f0d 	cmn.w	r3, #13
 800dae8:	d002      	beq.n	800daf0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7fd ff8e 	bl	800ba0c <tcp_abort>
            }
            return ERR_ABRT;
 800daf0:	f06f 030c 	mvn.w	r3, #12
 800daf4:	e1ce      	b.n	800de94 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 fae0 	bl	800e0bc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dafc:	4b63      	ldr	r3, [pc, #396]	; (800dc8c <tcp_process+0x5b8>)
 800dafe:	881b      	ldrh	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d005      	beq.n	800db10 <tcp_process+0x43c>
            recv_acked--;
 800db04:	4b61      	ldr	r3, [pc, #388]	; (800dc8c <tcp_process+0x5b8>)
 800db06:	881b      	ldrh	r3, [r3, #0]
 800db08:	3b01      	subs	r3, #1
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	4b5f      	ldr	r3, [pc, #380]	; (800dc8c <tcp_process+0x5b8>)
 800db0e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db14:	009a      	lsls	r2, r3, #2
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	f241 111c 	movw	r1, #4380	; 0x111c
 800db20:	428b      	cmp	r3, r1
 800db22:	bf38      	it	cc
 800db24:	460b      	movcc	r3, r1
 800db26:	429a      	cmp	r2, r3
 800db28:	d204      	bcs.n	800db34 <tcp_process+0x460>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	b29b      	uxth	r3, r3
 800db32:	e00d      	b.n	800db50 <tcp_process+0x47c>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	f241 121c 	movw	r2, #4380	; 0x111c
 800db3e:	4293      	cmp	r3, r2
 800db40:	d904      	bls.n	800db4c <tcp_process+0x478>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db46:	005b      	lsls	r3, r3, #1
 800db48:	b29b      	uxth	r3, r3
 800db4a:	e001      	b.n	800db50 <tcp_process+0x47c>
 800db4c:	f241 131c 	movw	r3, #4380	; 0x111c
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800db56:	4b4e      	ldr	r3, [pc, #312]	; (800dc90 <tcp_process+0x5bc>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	f003 0320 	and.w	r3, r3, #32
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d037      	beq.n	800dbd2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	8b5b      	ldrh	r3, [r3, #26]
 800db66:	f043 0302 	orr.w	r3, r3, #2
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2207      	movs	r2, #7
 800db74:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800db76:	e02c      	b.n	800dbd2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db78:	4b3b      	ldr	r3, [pc, #236]	; (800dc68 <tcp_process+0x594>)
 800db7a:	6819      	ldr	r1, [r3, #0]
 800db7c:	4b3b      	ldr	r3, [pc, #236]	; (800dc6c <tcp_process+0x598>)
 800db7e:	881b      	ldrh	r3, [r3, #0]
 800db80:	461a      	mov	r2, r3
 800db82:	4b3b      	ldr	r3, [pc, #236]	; (800dc70 <tcp_process+0x59c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db88:	4b3a      	ldr	r3, [pc, #232]	; (800dc74 <tcp_process+0x5a0>)
 800db8a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db8c:	885b      	ldrh	r3, [r3, #2]
 800db8e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db90:	4a38      	ldr	r2, [pc, #224]	; (800dc74 <tcp_process+0x5a0>)
 800db92:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db94:	8812      	ldrh	r2, [r2, #0]
 800db96:	b292      	uxth	r2, r2
 800db98:	9202      	str	r2, [sp, #8]
 800db9a:	9301      	str	r3, [sp, #4]
 800db9c:	4b36      	ldr	r3, [pc, #216]	; (800dc78 <tcp_process+0x5a4>)
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	4b36      	ldr	r3, [pc, #216]	; (800dc7c <tcp_process+0x5a8>)
 800dba2:	4602      	mov	r2, r0
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f002 fbd1 	bl	801034c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dbaa:	e167      	b.n	800de7c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dbac:	4b2d      	ldr	r3, [pc, #180]	; (800dc64 <tcp_process+0x590>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	f003 0302 	and.w	r3, r3, #2
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f000 8161 	beq.w	800de7c <tcp_process+0x7a8>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbe:	1e5a      	subs	r2, r3, #1
 800dbc0:	4b2b      	ldr	r3, [pc, #172]	; (800dc70 <tcp_process+0x59c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	f040 8159 	bne.w	800de7c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f002 f9b6 	bl	800ff3c <tcp_rexmit>
      break;
 800dbd0:	e154      	b.n	800de7c <tcp_process+0x7a8>
 800dbd2:	e153      	b.n	800de7c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fa71 	bl	800e0bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800dbda:	4b2d      	ldr	r3, [pc, #180]	; (800dc90 <tcp_process+0x5bc>)
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	f003 0320 	and.w	r3, r3, #32
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 814c 	beq.w	800de80 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	8b5b      	ldrh	r3, [r3, #26]
 800dbec:	f043 0302 	orr.w	r3, r3, #2
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2207      	movs	r2, #7
 800dbfa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dbfc:	e140      	b.n	800de80 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fa5c 	bl	800e0bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dc04:	4b22      	ldr	r3, [pc, #136]	; (800dc90 <tcp_process+0x5bc>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	f003 0320 	and.w	r3, r3, #32
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d071      	beq.n	800dcf4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc10:	4b14      	ldr	r3, [pc, #80]	; (800dc64 <tcp_process+0x590>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	f003 0310 	and.w	r3, r3, #16
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d060      	beq.n	800dcde <tcp_process+0x60a>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc20:	4b11      	ldr	r3, [pc, #68]	; (800dc68 <tcp_process+0x594>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d15a      	bne.n	800dcde <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d156      	bne.n	800dcde <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	8b5b      	ldrh	r3, [r3, #26]
 800dc34:	f043 0302 	orr.w	r3, r3, #2
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7fe fdbc 	bl	800c7bc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dc44:	4b13      	ldr	r3, [pc, #76]	; (800dc94 <tcp_process+0x5c0>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d105      	bne.n	800dc5a <tcp_process+0x586>
 800dc4e:	4b11      	ldr	r3, [pc, #68]	; (800dc94 <tcp_process+0x5c0>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	4a0f      	ldr	r2, [pc, #60]	; (800dc94 <tcp_process+0x5c0>)
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	e02e      	b.n	800dcb8 <tcp_process+0x5e4>
 800dc5a:	4b0e      	ldr	r3, [pc, #56]	; (800dc94 <tcp_process+0x5c0>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	e027      	b.n	800dcb2 <tcp_process+0x5de>
 800dc62:	bf00      	nop
 800dc64:	200105b0 	.word	0x200105b0
 800dc68:	200105a8 	.word	0x200105a8
 800dc6c:	200105ae 	.word	0x200105ae
 800dc70:	200105a4 	.word	0x200105a4
 800dc74:	20010594 	.word	0x20010594
 800dc78:	20009480 	.word	0x20009480
 800dc7c:	20009484 	.word	0x20009484
 800dc80:	080159e4 	.word	0x080159e4
 800dc84:	08015c84 	.word	0x08015c84
 800dc88:	08015a30 	.word	0x08015a30
 800dc8c:	200105ac 	.word	0x200105ac
 800dc90:	200105b1 	.word	0x200105b1
 800dc94:	20010578 	.word	0x20010578
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d104      	bne.n	800dcac <tcp_process+0x5d8>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68da      	ldr	r2, [r3, #12]
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	60da      	str	r2, [r3, #12]
 800dcaa:	e005      	b.n	800dcb8 <tcp_process+0x5e4>
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1ef      	bne.n	800dc98 <tcp_process+0x5c4>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	60da      	str	r2, [r3, #12]
 800dcbe:	4b77      	ldr	r3, [pc, #476]	; (800de9c <tcp_process+0x7c8>)
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	220a      	movs	r2, #10
 800dcc8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dcca:	4b75      	ldr	r3, [pc, #468]	; (800dea0 <tcp_process+0x7cc>)
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	60da      	str	r2, [r3, #12]
 800dcd2:	4a73      	ldr	r2, [pc, #460]	; (800dea0 <tcp_process+0x7cc>)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	f002 fcfa 	bl	80106d0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dcdc:	e0d2      	b.n	800de84 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	8b5b      	ldrh	r3, [r3, #26]
 800dce2:	f043 0302 	orr.w	r3, r3, #2
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2208      	movs	r2, #8
 800dcf0:	751a      	strb	r2, [r3, #20]
      break;
 800dcf2:	e0c7      	b.n	800de84 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dcf4:	4b6b      	ldr	r3, [pc, #428]	; (800dea4 <tcp_process+0x7d0>)
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	f003 0310 	and.w	r3, r3, #16
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 80c1 	beq.w	800de84 <tcp_process+0x7b0>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd06:	4b68      	ldr	r3, [pc, #416]	; (800dea8 <tcp_process+0x7d4>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	f040 80ba 	bne.w	800de84 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f040 80b5 	bne.w	800de84 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2206      	movs	r2, #6
 800dd1e:	751a      	strb	r2, [r3, #20]
      break;
 800dd20:	e0b0      	b.n	800de84 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f9ca 	bl	800e0bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dd28:	4b60      	ldr	r3, [pc, #384]	; (800deac <tcp_process+0x7d8>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	f003 0320 	and.w	r3, r3, #32
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 80a9 	beq.w	800de88 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	8b5b      	ldrh	r3, [r3, #26]
 800dd3a:	f043 0302 	orr.w	r3, r3, #2
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7fe fd39 	bl	800c7bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dd4a:	4b59      	ldr	r3, [pc, #356]	; (800deb0 <tcp_process+0x7dc>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d105      	bne.n	800dd60 <tcp_process+0x68c>
 800dd54:	4b56      	ldr	r3, [pc, #344]	; (800deb0 <tcp_process+0x7dc>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	4a55      	ldr	r2, [pc, #340]	; (800deb0 <tcp_process+0x7dc>)
 800dd5c:	6013      	str	r3, [r2, #0]
 800dd5e:	e013      	b.n	800dd88 <tcp_process+0x6b4>
 800dd60:	4b53      	ldr	r3, [pc, #332]	; (800deb0 <tcp_process+0x7dc>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	613b      	str	r3, [r7, #16]
 800dd66:	e00c      	b.n	800dd82 <tcp_process+0x6ae>
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d104      	bne.n	800dd7c <tcp_process+0x6a8>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	60da      	str	r2, [r3, #12]
 800dd7a:	e005      	b.n	800dd88 <tcp_process+0x6b4>
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	613b      	str	r3, [r7, #16]
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1ef      	bne.n	800dd68 <tcp_process+0x694>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	60da      	str	r2, [r3, #12]
 800dd8e:	4b43      	ldr	r3, [pc, #268]	; (800de9c <tcp_process+0x7c8>)
 800dd90:	2201      	movs	r2, #1
 800dd92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	220a      	movs	r2, #10
 800dd98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dd9a:	4b41      	ldr	r3, [pc, #260]	; (800dea0 <tcp_process+0x7cc>)
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	4a3f      	ldr	r2, [pc, #252]	; (800dea0 <tcp_process+0x7cc>)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	f002 fc92 	bl	80106d0 <tcp_timer_needed>
      }
      break;
 800ddac:	e06c      	b.n	800de88 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f984 	bl	800e0bc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ddb4:	4b3b      	ldr	r3, [pc, #236]	; (800dea4 <tcp_process+0x7d0>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f003 0310 	and.w	r3, r3, #16
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d065      	beq.n	800de8c <tcp_process+0x7b8>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddc4:	4b38      	ldr	r3, [pc, #224]	; (800dea8 <tcp_process+0x7d4>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d15f      	bne.n	800de8c <tcp_process+0x7b8>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d15b      	bne.n	800de8c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7fe fcf1 	bl	800c7bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ddda:	4b35      	ldr	r3, [pc, #212]	; (800deb0 <tcp_process+0x7dc>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d105      	bne.n	800ddf0 <tcp_process+0x71c>
 800dde4:	4b32      	ldr	r3, [pc, #200]	; (800deb0 <tcp_process+0x7dc>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	4a31      	ldr	r2, [pc, #196]	; (800deb0 <tcp_process+0x7dc>)
 800ddec:	6013      	str	r3, [r2, #0]
 800ddee:	e013      	b.n	800de18 <tcp_process+0x744>
 800ddf0:	4b2f      	ldr	r3, [pc, #188]	; (800deb0 <tcp_process+0x7dc>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	e00c      	b.n	800de12 <tcp_process+0x73e>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d104      	bne.n	800de0c <tcp_process+0x738>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	60da      	str	r2, [r3, #12]
 800de0a:	e005      	b.n	800de18 <tcp_process+0x744>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1ef      	bne.n	800ddf8 <tcp_process+0x724>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	60da      	str	r2, [r3, #12]
 800de1e:	4b1f      	ldr	r3, [pc, #124]	; (800de9c <tcp_process+0x7c8>)
 800de20:	2201      	movs	r2, #1
 800de22:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	220a      	movs	r2, #10
 800de28:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800de2a:	4b1d      	ldr	r3, [pc, #116]	; (800dea0 <tcp_process+0x7cc>)
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	60da      	str	r2, [r3, #12]
 800de32:	4a1b      	ldr	r2, [pc, #108]	; (800dea0 <tcp_process+0x7cc>)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6013      	str	r3, [r2, #0]
 800de38:	f002 fc4a 	bl	80106d0 <tcp_timer_needed>
      }
      break;
 800de3c:	e026      	b.n	800de8c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f93c 	bl	800e0bc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800de44:	4b17      	ldr	r3, [pc, #92]	; (800dea4 <tcp_process+0x7d0>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	f003 0310 	and.w	r3, r3, #16
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01f      	beq.n	800de90 <tcp_process+0x7bc>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de54:	4b14      	ldr	r3, [pc, #80]	; (800dea8 <tcp_process+0x7d4>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d119      	bne.n	800de90 <tcp_process+0x7bc>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d115      	bne.n	800de90 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800de64:	4b11      	ldr	r3, [pc, #68]	; (800deac <tcp_process+0x7d8>)
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	f043 0310 	orr.w	r3, r3, #16
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	4b0f      	ldr	r3, [pc, #60]	; (800deac <tcp_process+0x7d8>)
 800de70:	701a      	strb	r2, [r3, #0]
      }
      break;
 800de72:	e00d      	b.n	800de90 <tcp_process+0x7bc>
    default:
      break;
 800de74:	bf00      	nop
 800de76:	e00c      	b.n	800de92 <tcp_process+0x7be>
      break;
 800de78:	bf00      	nop
 800de7a:	e00a      	b.n	800de92 <tcp_process+0x7be>
      break;
 800de7c:	bf00      	nop
 800de7e:	e008      	b.n	800de92 <tcp_process+0x7be>
      break;
 800de80:	bf00      	nop
 800de82:	e006      	b.n	800de92 <tcp_process+0x7be>
      break;
 800de84:	bf00      	nop
 800de86:	e004      	b.n	800de92 <tcp_process+0x7be>
      break;
 800de88:	bf00      	nop
 800de8a:	e002      	b.n	800de92 <tcp_process+0x7be>
      break;
 800de8c:	bf00      	nop
 800de8e:	e000      	b.n	800de92 <tcp_process+0x7be>
      break;
 800de90:	bf00      	nop
  }
  return ERR_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3724      	adds	r7, #36	; 0x24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd90      	pop	{r4, r7, pc}
 800de9c:	20010580 	.word	0x20010580
 800dea0:	2001057c 	.word	0x2001057c
 800dea4:	200105b0 	.word	0x200105b0
 800dea8:	200105a8 	.word	0x200105a8
 800deac:	200105b1 	.word	0x200105b1
 800deb0:	20010578 	.word	0x20010578

0800deb4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <tcp_oos_insert_segment+0x1e>
 800dec4:	4b3b      	ldr	r3, [pc, #236]	; (800dfb4 <tcp_oos_insert_segment+0x100>)
 800dec6:	f240 421f 	movw	r2, #1055	; 0x41f
 800deca:	493b      	ldr	r1, [pc, #236]	; (800dfb8 <tcp_oos_insert_segment+0x104>)
 800decc:	483b      	ldr	r0, [pc, #236]	; (800dfbc <tcp_oos_insert_segment+0x108>)
 800dece:	f005 fb59 	bl	8013584 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	899b      	ldrh	r3, [r3, #12]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fb fc00 	bl	80096e0 <lwip_htons>
 800dee0:	4603      	mov	r3, r0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d028      	beq.n	800df3e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800deec:	6838      	ldr	r0, [r7, #0]
 800deee:	f7fe fa63 	bl	800c3b8 <tcp_segs_free>
    next = NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	603b      	str	r3, [r7, #0]
 800def6:	e056      	b.n	800dfa6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	899b      	ldrh	r3, [r3, #12]
 800defe:	b29b      	uxth	r3, r3
 800df00:	4618      	mov	r0, r3
 800df02:	f7fb fbed 	bl	80096e0 <lwip_htons>
 800df06:	4603      	mov	r3, r0
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00d      	beq.n	800df2e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	899b      	ldrh	r3, [r3, #12]
 800df18:	b29c      	uxth	r4, r3
 800df1a:	2001      	movs	r0, #1
 800df1c:	f7fb fbe0 	bl	80096e0 <lwip_htons>
 800df20:	4603      	mov	r3, r0
 800df22:	461a      	mov	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	4322      	orrs	r2, r4
 800df2a:	b292      	uxth	r2, r2
 800df2c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7fe fa52 	bl	800c3e2 <tcp_seg_free>
    while (next &&
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00e      	beq.n	800df62 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	891b      	ldrh	r3, [r3, #8]
 800df48:	461a      	mov	r2, r3
 800df4a:	4b1d      	ldr	r3, [pc, #116]	; (800dfc0 <tcp_oos_insert_segment+0x10c>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	441a      	add	r2, r3
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	8909      	ldrh	r1, [r1, #8]
 800df5a:	440b      	add	r3, r1
 800df5c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800df5e:	2b00      	cmp	r3, #0
 800df60:	daca      	bge.n	800def8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d01e      	beq.n	800dfa6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	891b      	ldrh	r3, [r3, #8]
 800df6c:	461a      	mov	r2, r3
 800df6e:	4b14      	ldr	r3, [pc, #80]	; (800dfc0 <tcp_oos_insert_segment+0x10c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	441a      	add	r2, r3
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	dd12      	ble.n	800dfa6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	b29a      	uxth	r2, r3
 800df88:	4b0d      	ldr	r3, [pc, #52]	; (800dfc0 <tcp_oos_insert_segment+0x10c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	b29a      	uxth	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	685a      	ldr	r2, [r3, #4]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	891b      	ldrh	r3, [r3, #8]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	4610      	mov	r0, r2
 800dfa2:	f7fc fe19 	bl	800abd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	601a      	str	r2, [r3, #0]
}
 800dfac:	bf00      	nop
 800dfae:	3714      	adds	r7, #20
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd90      	pop	{r4, r7, pc}
 800dfb4:	080159e4 	.word	0x080159e4
 800dfb8:	08015ca4 	.word	0x08015ca4
 800dfbc:	08015a30 	.word	0x08015a30
 800dfc0:	200105a4 	.word	0x200105a4

0800dfc4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dfc4:	b5b0      	push	{r4, r5, r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
 800dfd0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dfd2:	e03e      	b.n	800e052 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fd f80c 	bl	800b000 <pbuf_clen>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dff2:	8a7a      	ldrh	r2, [r7, #18]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d906      	bls.n	800e006 <tcp_free_acked_segments+0x42>
 800dff8:	4b2a      	ldr	r3, [pc, #168]	; (800e0a4 <tcp_free_acked_segments+0xe0>)
 800dffa:	f240 4257 	movw	r2, #1111	; 0x457
 800dffe:	492a      	ldr	r1, [pc, #168]	; (800e0a8 <tcp_free_acked_segments+0xe4>)
 800e000:	482a      	ldr	r0, [pc, #168]	; (800e0ac <tcp_free_acked_segments+0xe8>)
 800e002:	f005 fabf 	bl	8013584 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e00c:	8a7b      	ldrh	r3, [r7, #18]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	b29a      	uxth	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	891a      	ldrh	r2, [r3, #8]
 800e01c:	4b24      	ldr	r3, [pc, #144]	; (800e0b0 <tcp_free_acked_segments+0xec>)
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	4413      	add	r3, r2
 800e022:	b29a      	uxth	r2, r3
 800e024:	4b22      	ldr	r3, [pc, #136]	; (800e0b0 <tcp_free_acked_segments+0xec>)
 800e026:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e028:	6978      	ldr	r0, [r7, #20]
 800e02a:	f7fe f9da 	bl	800c3e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00c      	beq.n	800e052 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d109      	bne.n	800e052 <tcp_free_acked_segments+0x8e>
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d106      	bne.n	800e052 <tcp_free_acked_segments+0x8e>
 800e044:	4b17      	ldr	r3, [pc, #92]	; (800e0a4 <tcp_free_acked_segments+0xe0>)
 800e046:	f240 4261 	movw	r2, #1121	; 0x461
 800e04a:	491a      	ldr	r1, [pc, #104]	; (800e0b4 <tcp_free_acked_segments+0xf0>)
 800e04c:	4817      	ldr	r0, [pc, #92]	; (800e0ac <tcp_free_acked_segments+0xe8>)
 800e04e:	f005 fa99 	bl	8013584 <iprintf>
  while (seg_list != NULL &&
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d020      	beq.n	800e09a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fb fb53 	bl	800970a <lwip_htonl>
 800e064:	4604      	mov	r4, r0
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	891b      	ldrh	r3, [r3, #8]
 800e06a:	461d      	mov	r5, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	899b      	ldrh	r3, [r3, #12]
 800e072:	b29b      	uxth	r3, r3
 800e074:	4618      	mov	r0, r3
 800e076:	f7fb fb33 	bl	80096e0 <lwip_htons>
 800e07a:	4603      	mov	r3, r0
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	f003 0303 	and.w	r3, r3, #3
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <tcp_free_acked_segments+0xc6>
 800e086:	2301      	movs	r3, #1
 800e088:	e000      	b.n	800e08c <tcp_free_acked_segments+0xc8>
 800e08a:	2300      	movs	r3, #0
 800e08c:	442b      	add	r3, r5
 800e08e:	18e2      	adds	r2, r4, r3
 800e090:	4b09      	ldr	r3, [pc, #36]	; (800e0b8 <tcp_free_acked_segments+0xf4>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e096:	2b00      	cmp	r3, #0
 800e098:	dd9c      	ble.n	800dfd4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e09a:	68bb      	ldr	r3, [r7, #8]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3718      	adds	r7, #24
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bdb0      	pop	{r4, r5, r7, pc}
 800e0a4:	080159e4 	.word	0x080159e4
 800e0a8:	08015ccc 	.word	0x08015ccc
 800e0ac:	08015a30 	.word	0x08015a30
 800e0b0:	200105ac 	.word	0x200105ac
 800e0b4:	08015cf4 	.word	0x08015cf4
 800e0b8:	200105a8 	.word	0x200105a8

0800e0bc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e0bc:	b5b0      	push	{r4, r5, r7, lr}
 800e0be:	b094      	sub	sp, #80	; 0x50
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d106      	bne.n	800e0dc <tcp_receive+0x20>
 800e0ce:	4b91      	ldr	r3, [pc, #580]	; (800e314 <tcp_receive+0x258>)
 800e0d0:	f240 427b 	movw	r2, #1147	; 0x47b
 800e0d4:	4990      	ldr	r1, [pc, #576]	; (800e318 <tcp_receive+0x25c>)
 800e0d6:	4891      	ldr	r0, [pc, #580]	; (800e31c <tcp_receive+0x260>)
 800e0d8:	f005 fa54 	bl	8013584 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7d1b      	ldrb	r3, [r3, #20]
 800e0e0:	2b03      	cmp	r3, #3
 800e0e2:	d806      	bhi.n	800e0f2 <tcp_receive+0x36>
 800e0e4:	4b8b      	ldr	r3, [pc, #556]	; (800e314 <tcp_receive+0x258>)
 800e0e6:	f240 427c 	movw	r2, #1148	; 0x47c
 800e0ea:	498d      	ldr	r1, [pc, #564]	; (800e320 <tcp_receive+0x264>)
 800e0ec:	488b      	ldr	r0, [pc, #556]	; (800e31c <tcp_receive+0x260>)
 800e0ee:	f005 fa49 	bl	8013584 <iprintf>

  if (flags & TCP_ACK) {
 800e0f2:	4b8c      	ldr	r3, [pc, #560]	; (800e324 <tcp_receive+0x268>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	f003 0310 	and.w	r3, r3, #16
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f000 8264 	beq.w	800e5c8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e106:	461a      	mov	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e10c:	4413      	add	r3, r2
 800e10e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e114:	4b84      	ldr	r3, [pc, #528]	; (800e328 <tcp_receive+0x26c>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	db1b      	blt.n	800e156 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e122:	4b81      	ldr	r3, [pc, #516]	; (800e328 <tcp_receive+0x26c>)
 800e124:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e126:	429a      	cmp	r2, r3
 800e128:	d106      	bne.n	800e138 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e12e:	4b7f      	ldr	r3, [pc, #508]	; (800e32c <tcp_receive+0x270>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	db0e      	blt.n	800e156 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e13c:	4b7b      	ldr	r3, [pc, #492]	; (800e32c <tcp_receive+0x270>)
 800e13e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e140:	429a      	cmp	r2, r3
 800e142:	d125      	bne.n	800e190 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e144:	4b7a      	ldr	r3, [pc, #488]	; (800e330 <tcp_receive+0x274>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	89db      	ldrh	r3, [r3, #14]
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e152:	429a      	cmp	r2, r3
 800e154:	d91c      	bls.n	800e190 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e156:	4b76      	ldr	r3, [pc, #472]	; (800e330 <tcp_receive+0x274>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	89db      	ldrh	r3, [r3, #14]
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e170:	429a      	cmp	r2, r3
 800e172:	d205      	bcs.n	800e180 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e180:	4b69      	ldr	r3, [pc, #420]	; (800e328 <tcp_receive+0x26c>)
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e188:	4b68      	ldr	r3, [pc, #416]	; (800e32c <tcp_receive+0x270>)
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e190:	4b66      	ldr	r3, [pc, #408]	; (800e32c <tcp_receive+0x270>)
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	dc58      	bgt.n	800e250 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e19e:	4b65      	ldr	r3, [pc, #404]	; (800e334 <tcp_receive+0x278>)
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d14b      	bne.n	800e23e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e1b0:	4413      	add	r3, r2
 800e1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d142      	bne.n	800e23e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	db3d      	blt.n	800e23e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1c6:	4b59      	ldr	r3, [pc, #356]	; (800e32c <tcp_receive+0x270>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d137      	bne.n	800e23e <tcp_receive+0x182>
              found_dupack = 1;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e1d8:	2bff      	cmp	r3, #255	; 0xff
 800e1da:	d007      	beq.n	800e1ec <tcp_receive+0x130>
                ++pcb->dupacks;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d91b      	bls.n	800e22e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e200:	4413      	add	r3, r2
 800e202:	b29a      	uxth	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d30a      	bcc.n	800e224 <tcp_receive+0x168>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e218:	4413      	add	r3, r2
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e222:	e004      	b.n	800e22e <tcp_receive+0x172>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e22a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e234:	2b02      	cmp	r3, #2
 800e236:	d902      	bls.n	800e23e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f001 feeb 	bl	8010014 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e23e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e240:	2b00      	cmp	r3, #0
 800e242:	f040 8161 	bne.w	800e508 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e24e:	e15b      	b.n	800e508 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e250:	4b36      	ldr	r3, [pc, #216]	; (800e32c <tcp_receive+0x270>)
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	3b01      	subs	r3, #1
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f2c0 814e 	blt.w	800e4fe <tcp_receive+0x442>
 800e262:	4b32      	ldr	r3, [pc, #200]	; (800e32c <tcp_receive+0x270>)
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f300 8146 	bgt.w	800e4fe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	8b5b      	ldrh	r3, [r3, #26]
 800e276:	f003 0304 	and.w	r3, r3, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d010      	beq.n	800e2a0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	8b5b      	ldrh	r3, [r3, #26]
 800e282:	f023 0304 	bic.w	r3, r3, #4
 800e286:	b29a      	uxth	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e2ae:	10db      	asrs	r3, r3, #3
 800e2b0:	b21b      	sxth	r3, r3
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	4413      	add	r3, r2
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	b21a      	sxth	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e2c8:	4b18      	ldr	r3, [pc, #96]	; (800e32c <tcp_receive+0x270>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e2e0:	4b12      	ldr	r3, [pc, #72]	; (800e32c <tcp_receive+0x270>)
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7d1b      	ldrb	r3, [r3, #20]
 800e2ec:	2b03      	cmp	r3, #3
 800e2ee:	f240 8097 	bls.w	800e420 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d245      	bcs.n	800e38e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	8b5b      	ldrh	r3, [r3, #26]
 800e306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d014      	beq.n	800e338 <tcp_receive+0x27c>
 800e30e:	2301      	movs	r3, #1
 800e310:	e013      	b.n	800e33a <tcp_receive+0x27e>
 800e312:	bf00      	nop
 800e314:	080159e4 	.word	0x080159e4
 800e318:	08015d14 	.word	0x08015d14
 800e31c:	08015a30 	.word	0x08015a30
 800e320:	08015d30 	.word	0x08015d30
 800e324:	200105b0 	.word	0x200105b0
 800e328:	200105a4 	.word	0x200105a4
 800e32c:	200105a8 	.word	0x200105a8
 800e330:	20010594 	.word	0x20010594
 800e334:	200105ae 	.word	0x200105ae
 800e338:	2302      	movs	r3, #2
 800e33a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e33e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e342:	b29a      	uxth	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e348:	fb12 f303 	smulbb	r3, r2, r3
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e350:	4293      	cmp	r3, r2
 800e352:	bf28      	it	cs
 800e354:	4613      	movcs	r3, r2
 800e356:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e35e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e360:	4413      	add	r3, r2
 800e362:	b29a      	uxth	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d309      	bcc.n	800e382 <tcp_receive+0x2c6>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e374:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e376:	4413      	add	r3, r2
 800e378:	b29a      	uxth	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e380:	e04e      	b.n	800e420 <tcp_receive+0x364>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e388:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e38c:	e048      	b.n	800e420 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e396:	4413      	add	r3, r2
 800e398:	b29a      	uxth	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d309      	bcc.n	800e3b8 <tcp_receive+0x2fc>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e3aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3ac:	4413      	add	r3, r2
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3b6:	e004      	b.n	800e3c2 <tcp_receive+0x306>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d326      	bcc.n	800e420 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3f2:	4413      	add	r3, r2
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d30a      	bcc.n	800e416 <tcp_receive+0x35a>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e40a:	4413      	add	r3, r2
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e414:	e004      	b.n	800e420 <tcp_receive+0x364>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e41c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e428:	4a98      	ldr	r2, [pc, #608]	; (800e68c <tcp_receive+0x5d0>)
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7ff fdca 	bl	800dfc4 <tcp_free_acked_segments>
 800e430:	4602      	mov	r2, r0
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e43e:	4a94      	ldr	r2, [pc, #592]	; (800e690 <tcp_receive+0x5d4>)
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f7ff fdbf 	bl	800dfc4 <tcp_free_acked_segments>
 800e446:	4602      	mov	r2, r0
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e450:	2b00      	cmp	r3, #0
 800e452:	d104      	bne.n	800e45e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e45a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e45c:	e002      	b.n	800e464 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d103      	bne.n	800e47a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e480:	4b84      	ldr	r3, [pc, #528]	; (800e694 <tcp_receive+0x5d8>)
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	4413      	add	r3, r2
 800e486:	b29a      	uxth	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	8b5b      	ldrh	r3, [r3, #26]
 800e492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e496:	2b00      	cmp	r3, #0
 800e498:	d035      	beq.n	800e506 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d118      	bne.n	800e4d4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00c      	beq.n	800e4c4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fb f927 	bl	800970a <lwip_htonl>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	dc20      	bgt.n	800e506 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	8b5b      	ldrh	r3, [r3, #26]
 800e4c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4d2:	e018      	b.n	800e506 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fb f912 	bl	800970a <lwip_htonl>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	1ae3      	subs	r3, r4, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	dc0b      	bgt.n	800e506 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	8b5b      	ldrh	r3, [r3, #26]
 800e4f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4fc:	e003      	b.n	800e506 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f001 ff76 	bl	80103f0 <tcp_send_empty_ack>
 800e504:	e000      	b.n	800e508 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e506:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d05b      	beq.n	800e5c8 <tcp_receive+0x50c>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e514:	4b60      	ldr	r3, [pc, #384]	; (800e698 <tcp_receive+0x5dc>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	da54      	bge.n	800e5c8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e51e:	4b5f      	ldr	r3, [pc, #380]	; (800e69c <tcp_receive+0x5e0>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	b29a      	uxth	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e528:	b29b      	uxth	r3, r3
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e532:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e53c:	10db      	asrs	r3, r3, #3
 800e53e:	b21b      	sxth	r3, r3
 800e540:	b29b      	uxth	r3, r3
 800e542:	1ad3      	subs	r3, r2, r3
 800e544:	b29b      	uxth	r3, r3
 800e546:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e550:	b29a      	uxth	r2, r3
 800e552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e556:	4413      	add	r3, r2
 800e558:	b29b      	uxth	r3, r3
 800e55a:	b21a      	sxth	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e560:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e564:	2b00      	cmp	r3, #0
 800e566:	da05      	bge.n	800e574 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e568:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e56c:	425b      	negs	r3, r3
 800e56e:	b29b      	uxth	r3, r3
 800e570:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e574:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e57e:	109b      	asrs	r3, r3, #2
 800e580:	b21b      	sxth	r3, r3
 800e582:	b29b      	uxth	r3, r3
 800e584:	1ad3      	subs	r3, r2, r3
 800e586:	b29b      	uxth	r3, r3
 800e588:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e592:	b29a      	uxth	r2, r3
 800e594:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e598:	4413      	add	r3, r2
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	b21a      	sxth	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5a8:	10db      	asrs	r3, r3, #3
 800e5aa:	b21b      	sxth	r3, r3
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	4413      	add	r3, r2
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	b21a      	sxth	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e5c8:	4b35      	ldr	r3, [pc, #212]	; (800e6a0 <tcp_receive+0x5e4>)
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	f000 84e2 	beq.w	800ef96 <tcp_receive+0xeda>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	7d1b      	ldrb	r3, [r3, #20]
 800e5d6:	2b06      	cmp	r3, #6
 800e5d8:	f200 84dd 	bhi.w	800ef96 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5e0:	4b30      	ldr	r3, [pc, #192]	; (800e6a4 <tcp_receive+0x5e8>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f2c0 808f 	blt.w	800e70c <tcp_receive+0x650>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5f2:	4b2b      	ldr	r3, [pc, #172]	; (800e6a0 <tcp_receive+0x5e4>)
 800e5f4:	881b      	ldrh	r3, [r3, #0]
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	4b2a      	ldr	r3, [pc, #168]	; (800e6a4 <tcp_receive+0x5e8>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	440b      	add	r3, r1
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	3301      	adds	r3, #1
 800e602:	2b00      	cmp	r3, #0
 800e604:	f300 8082 	bgt.w	800e70c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e608:	4b27      	ldr	r3, [pc, #156]	; (800e6a8 <tcp_receive+0x5ec>)
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e612:	4b24      	ldr	r3, [pc, #144]	; (800e6a4 <tcp_receive+0x5e8>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e61a:	4b23      	ldr	r3, [pc, #140]	; (800e6a8 <tcp_receive+0x5ec>)
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d106      	bne.n	800e630 <tcp_receive+0x574>
 800e622:	4b22      	ldr	r3, [pc, #136]	; (800e6ac <tcp_receive+0x5f0>)
 800e624:	f240 5294 	movw	r2, #1428	; 0x594
 800e628:	4921      	ldr	r1, [pc, #132]	; (800e6b0 <tcp_receive+0x5f4>)
 800e62a:	4822      	ldr	r0, [pc, #136]	; (800e6b4 <tcp_receive+0x5f8>)
 800e62c:	f004 ffaa 	bl	8013584 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e636:	4293      	cmp	r3, r2
 800e638:	d906      	bls.n	800e648 <tcp_receive+0x58c>
 800e63a:	4b1c      	ldr	r3, [pc, #112]	; (800e6ac <tcp_receive+0x5f0>)
 800e63c:	f240 5295 	movw	r2, #1429	; 0x595
 800e640:	491d      	ldr	r1, [pc, #116]	; (800e6b8 <tcp_receive+0x5fc>)
 800e642:	481c      	ldr	r0, [pc, #112]	; (800e6b4 <tcp_receive+0x5f8>)
 800e644:	f004 ff9e 	bl	8013584 <iprintf>
      off = (u16_t)off32;
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e64e:	4b16      	ldr	r3, [pc, #88]	; (800e6a8 <tcp_receive+0x5ec>)
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	891b      	ldrh	r3, [r3, #8]
 800e654:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e658:	429a      	cmp	r2, r3
 800e65a:	d906      	bls.n	800e66a <tcp_receive+0x5ae>
 800e65c:	4b13      	ldr	r3, [pc, #76]	; (800e6ac <tcp_receive+0x5f0>)
 800e65e:	f240 5297 	movw	r2, #1431	; 0x597
 800e662:	4916      	ldr	r1, [pc, #88]	; (800e6bc <tcp_receive+0x600>)
 800e664:	4813      	ldr	r0, [pc, #76]	; (800e6b4 <tcp_receive+0x5f8>)
 800e666:	f004 ff8d 	bl	8013584 <iprintf>
      inseg.len -= off;
 800e66a:	4b0f      	ldr	r3, [pc, #60]	; (800e6a8 <tcp_receive+0x5ec>)
 800e66c:	891a      	ldrh	r2, [r3, #8]
 800e66e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e672:	1ad3      	subs	r3, r2, r3
 800e674:	b29a      	uxth	r2, r3
 800e676:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <tcp_receive+0x5ec>)
 800e678:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e67a:	4b0b      	ldr	r3, [pc, #44]	; (800e6a8 <tcp_receive+0x5ec>)
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	891a      	ldrh	r2, [r3, #8]
 800e680:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e688:	e02a      	b.n	800e6e0 <tcp_receive+0x624>
 800e68a:	bf00      	nop
 800e68c:	08015d4c 	.word	0x08015d4c
 800e690:	08015d54 	.word	0x08015d54
 800e694:	200105ac 	.word	0x200105ac
 800e698:	200105a8 	.word	0x200105a8
 800e69c:	2001056c 	.word	0x2001056c
 800e6a0:	200105ae 	.word	0x200105ae
 800e6a4:	200105a4 	.word	0x200105a4
 800e6a8:	20010584 	.word	0x20010584
 800e6ac:	080159e4 	.word	0x080159e4
 800e6b0:	08015d5c 	.word	0x08015d5c
 800e6b4:	08015a30 	.word	0x08015a30
 800e6b8:	08015d6c 	.word	0x08015d6c
 800e6bc:	08015d7c 	.word	0x08015d7c
        off -= p->len;
 800e6c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6c2:	895b      	ldrh	r3, [r3, #10]
 800e6c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e6d2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e6e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6e2:	895b      	ldrh	r3, [r3, #10]
 800e6e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d8e9      	bhi.n	800e6c0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e6ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e6f4:	f7fc fb70 	bl	800add8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fc:	4a91      	ldr	r2, [pc, #580]	; (800e944 <tcp_receive+0x888>)
 800e6fe:	6013      	str	r3, [r2, #0]
 800e700:	4b91      	ldr	r3, [pc, #580]	; (800e948 <tcp_receive+0x88c>)
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	4a8f      	ldr	r2, [pc, #572]	; (800e944 <tcp_receive+0x888>)
 800e706:	6812      	ldr	r2, [r2, #0]
 800e708:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e70a:	e00d      	b.n	800e728 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e70c:	4b8d      	ldr	r3, [pc, #564]	; (800e944 <tcp_receive+0x888>)
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	da06      	bge.n	800e728 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	8b5b      	ldrh	r3, [r3, #26]
 800e71e:	f043 0302 	orr.w	r3, r3, #2
 800e722:	b29a      	uxth	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e728:	4b86      	ldr	r3, [pc, #536]	; (800e944 <tcp_receive+0x888>)
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	f2c0 842a 	blt.w	800ef8c <tcp_receive+0xed0>
 800e738:	4b82      	ldr	r3, [pc, #520]	; (800e944 <tcp_receive+0x888>)
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e744:	440b      	add	r3, r1
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	3301      	adds	r3, #1
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f300 841e 	bgt.w	800ef8c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e754:	4b7b      	ldr	r3, [pc, #492]	; (800e944 <tcp_receive+0x888>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	429a      	cmp	r2, r3
 800e75a:	f040 829a 	bne.w	800ec92 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e75e:	4b7a      	ldr	r3, [pc, #488]	; (800e948 <tcp_receive+0x88c>)
 800e760:	891c      	ldrh	r4, [r3, #8]
 800e762:	4b79      	ldr	r3, [pc, #484]	; (800e948 <tcp_receive+0x88c>)
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	899b      	ldrh	r3, [r3, #12]
 800e768:	b29b      	uxth	r3, r3
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fa ffb8 	bl	80096e0 <lwip_htons>
 800e770:	4603      	mov	r3, r0
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 0303 	and.w	r3, r3, #3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d001      	beq.n	800e780 <tcp_receive+0x6c4>
 800e77c:	2301      	movs	r3, #1
 800e77e:	e000      	b.n	800e782 <tcp_receive+0x6c6>
 800e780:	2300      	movs	r3, #0
 800e782:	4423      	add	r3, r4
 800e784:	b29a      	uxth	r2, r3
 800e786:	4b71      	ldr	r3, [pc, #452]	; (800e94c <tcp_receive+0x890>)
 800e788:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e78e:	4b6f      	ldr	r3, [pc, #444]	; (800e94c <tcp_receive+0x890>)
 800e790:	881b      	ldrh	r3, [r3, #0]
 800e792:	429a      	cmp	r2, r3
 800e794:	d275      	bcs.n	800e882 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e796:	4b6c      	ldr	r3, [pc, #432]	; (800e948 <tcp_receive+0x88c>)
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	899b      	ldrh	r3, [r3, #12]
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fa ff9e 	bl	80096e0 <lwip_htons>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	f003 0301 	and.w	r3, r3, #1
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d01f      	beq.n	800e7f0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e7b0:	4b65      	ldr	r3, [pc, #404]	; (800e948 <tcp_receive+0x88c>)
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	899b      	ldrh	r3, [r3, #12]
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	b21b      	sxth	r3, r3
 800e7ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e7be:	b21c      	sxth	r4, r3
 800e7c0:	4b61      	ldr	r3, [pc, #388]	; (800e948 <tcp_receive+0x88c>)
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	899b      	ldrh	r3, [r3, #12]
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fa ff89 	bl	80096e0 <lwip_htons>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fa ff80 	bl	80096e0 <lwip_htons>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	b21b      	sxth	r3, r3
 800e7e4:	4323      	orrs	r3, r4
 800e7e6:	b21a      	sxth	r2, r3
 800e7e8:	4b57      	ldr	r3, [pc, #348]	; (800e948 <tcp_receive+0x88c>)
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	b292      	uxth	r2, r2
 800e7ee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e7f4:	4b54      	ldr	r3, [pc, #336]	; (800e948 <tcp_receive+0x88c>)
 800e7f6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e7f8:	4b53      	ldr	r3, [pc, #332]	; (800e948 <tcp_receive+0x88c>)
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	899b      	ldrh	r3, [r3, #12]
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	4618      	mov	r0, r3
 800e802:	f7fa ff6d 	bl	80096e0 <lwip_htons>
 800e806:	4603      	mov	r3, r0
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	f003 0302 	and.w	r3, r3, #2
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d005      	beq.n	800e81e <tcp_receive+0x762>
            inseg.len -= 1;
 800e812:	4b4d      	ldr	r3, [pc, #308]	; (800e948 <tcp_receive+0x88c>)
 800e814:	891b      	ldrh	r3, [r3, #8]
 800e816:	3b01      	subs	r3, #1
 800e818:	b29a      	uxth	r2, r3
 800e81a:	4b4b      	ldr	r3, [pc, #300]	; (800e948 <tcp_receive+0x88c>)
 800e81c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e81e:	4b4a      	ldr	r3, [pc, #296]	; (800e948 <tcp_receive+0x88c>)
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	4a49      	ldr	r2, [pc, #292]	; (800e948 <tcp_receive+0x88c>)
 800e824:	8912      	ldrh	r2, [r2, #8]
 800e826:	4611      	mov	r1, r2
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fc f9d5 	bl	800abd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e82e:	4b46      	ldr	r3, [pc, #280]	; (800e948 <tcp_receive+0x88c>)
 800e830:	891c      	ldrh	r4, [r3, #8]
 800e832:	4b45      	ldr	r3, [pc, #276]	; (800e948 <tcp_receive+0x88c>)
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7fa ff50 	bl	80096e0 <lwip_htons>
 800e840:	4603      	mov	r3, r0
 800e842:	b2db      	uxtb	r3, r3
 800e844:	f003 0303 	and.w	r3, r3, #3
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d001      	beq.n	800e850 <tcp_receive+0x794>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e000      	b.n	800e852 <tcp_receive+0x796>
 800e850:	2300      	movs	r3, #0
 800e852:	4423      	add	r3, r4
 800e854:	b29a      	uxth	r2, r3
 800e856:	4b3d      	ldr	r3, [pc, #244]	; (800e94c <tcp_receive+0x890>)
 800e858:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e85a:	4b3c      	ldr	r3, [pc, #240]	; (800e94c <tcp_receive+0x890>)
 800e85c:	881b      	ldrh	r3, [r3, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	4b38      	ldr	r3, [pc, #224]	; (800e944 <tcp_receive+0x888>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	441a      	add	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86a:	6879      	ldr	r1, [r7, #4]
 800e86c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e86e:	440b      	add	r3, r1
 800e870:	429a      	cmp	r2, r3
 800e872:	d006      	beq.n	800e882 <tcp_receive+0x7c6>
 800e874:	4b36      	ldr	r3, [pc, #216]	; (800e950 <tcp_receive+0x894>)
 800e876:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e87a:	4936      	ldr	r1, [pc, #216]	; (800e954 <tcp_receive+0x898>)
 800e87c:	4836      	ldr	r0, [pc, #216]	; (800e958 <tcp_receive+0x89c>)
 800e87e:	f004 fe81 	bl	8013584 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 80e7 	beq.w	800ea5a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e88c:	4b2e      	ldr	r3, [pc, #184]	; (800e948 <tcp_receive+0x88c>)
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	899b      	ldrh	r3, [r3, #12]
 800e892:	b29b      	uxth	r3, r3
 800e894:	4618      	mov	r0, r3
 800e896:	f7fa ff23 	bl	80096e0 <lwip_htons>
 800e89a:	4603      	mov	r3, r0
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d010      	beq.n	800e8c8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e8a6:	e00a      	b.n	800e8be <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8ac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f7fd fd92 	bl	800c3e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1f0      	bne.n	800e8a8 <tcp_receive+0x7ec>
 800e8c6:	e0c8      	b.n	800ea5a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e8ce:	e052      	b.n	800e976 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	899b      	ldrh	r3, [r3, #12]
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fa ff01 	bl	80096e0 <lwip_htons>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d03d      	beq.n	800e966 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e8ea:	4b17      	ldr	r3, [pc, #92]	; (800e948 <tcp_receive+0x88c>)
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	899b      	ldrh	r3, [r3, #12]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fa fef4 	bl	80096e0 <lwip_htons>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e900:	2b00      	cmp	r3, #0
 800e902:	d130      	bne.n	800e966 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e904:	4b10      	ldr	r3, [pc, #64]	; (800e948 <tcp_receive+0x88c>)
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	899b      	ldrh	r3, [r3, #12]
 800e90a:	b29c      	uxth	r4, r3
 800e90c:	2001      	movs	r0, #1
 800e90e:	f7fa fee7 	bl	80096e0 <lwip_htons>
 800e912:	4603      	mov	r3, r0
 800e914:	461a      	mov	r2, r3
 800e916:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <tcp_receive+0x88c>)
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	4322      	orrs	r2, r4
 800e91c:	b292      	uxth	r2, r2
 800e91e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e920:	4b09      	ldr	r3, [pc, #36]	; (800e948 <tcp_receive+0x88c>)
 800e922:	891c      	ldrh	r4, [r3, #8]
 800e924:	4b08      	ldr	r3, [pc, #32]	; (800e948 <tcp_receive+0x88c>)
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	899b      	ldrh	r3, [r3, #12]
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fa fed7 	bl	80096e0 <lwip_htons>
 800e932:	4603      	mov	r3, r0
 800e934:	b2db      	uxtb	r3, r3
 800e936:	f003 0303 	and.w	r3, r3, #3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00e      	beq.n	800e95c <tcp_receive+0x8a0>
 800e93e:	2301      	movs	r3, #1
 800e940:	e00d      	b.n	800e95e <tcp_receive+0x8a2>
 800e942:	bf00      	nop
 800e944:	200105a4 	.word	0x200105a4
 800e948:	20010584 	.word	0x20010584
 800e94c:	200105ae 	.word	0x200105ae
 800e950:	080159e4 	.word	0x080159e4
 800e954:	08015d8c 	.word	0x08015d8c
 800e958:	08015a30 	.word	0x08015a30
 800e95c:	2300      	movs	r3, #0
 800e95e:	4423      	add	r3, r4
 800e960:	b29a      	uxth	r2, r3
 800e962:	4b98      	ldr	r3, [pc, #608]	; (800ebc4 <tcp_receive+0xb08>)
 800e964:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e968:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e970:	6938      	ldr	r0, [r7, #16]
 800e972:	f7fd fd36 	bl	800c3e2 <tcp_seg_free>
            while (next &&
 800e976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00e      	beq.n	800e99a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e97c:	4b91      	ldr	r3, [pc, #580]	; (800ebc4 <tcp_receive+0xb08>)
 800e97e:	881b      	ldrh	r3, [r3, #0]
 800e980:	461a      	mov	r2, r3
 800e982:	4b91      	ldr	r3, [pc, #580]	; (800ebc8 <tcp_receive+0xb0c>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	441a      	add	r2, r3
 800e988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e990:	8909      	ldrh	r1, [r1, #8]
 800e992:	440b      	add	r3, r1
 800e994:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e996:	2b00      	cmp	r3, #0
 800e998:	da9a      	bge.n	800e8d0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d059      	beq.n	800ea54 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e9a0:	4b88      	ldr	r3, [pc, #544]	; (800ebc4 <tcp_receive+0xb08>)
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	4b88      	ldr	r3, [pc, #544]	; (800ebc8 <tcp_receive+0xb0c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	441a      	add	r2, r3
 800e9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	dd4d      	ble.n	800ea54 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	4b81      	ldr	r3, [pc, #516]	; (800ebc8 <tcp_receive+0xb0c>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	b29a      	uxth	r2, r3
 800e9ca:	4b80      	ldr	r3, [pc, #512]	; (800ebcc <tcp_receive+0xb10>)
 800e9cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e9ce:	4b7f      	ldr	r3, [pc, #508]	; (800ebcc <tcp_receive+0xb10>)
 800e9d0:	68db      	ldr	r3, [r3, #12]
 800e9d2:	899b      	ldrh	r3, [r3, #12]
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fa fe82 	bl	80096e0 <lwip_htons>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	f003 0302 	and.w	r3, r3, #2
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d005      	beq.n	800e9f4 <tcp_receive+0x938>
                inseg.len -= 1;
 800e9e8:	4b78      	ldr	r3, [pc, #480]	; (800ebcc <tcp_receive+0xb10>)
 800e9ea:	891b      	ldrh	r3, [r3, #8]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	4b76      	ldr	r3, [pc, #472]	; (800ebcc <tcp_receive+0xb10>)
 800e9f2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e9f4:	4b75      	ldr	r3, [pc, #468]	; (800ebcc <tcp_receive+0xb10>)
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	4a74      	ldr	r2, [pc, #464]	; (800ebcc <tcp_receive+0xb10>)
 800e9fa:	8912      	ldrh	r2, [r2, #8]
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fc f8ea 	bl	800abd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ea04:	4b71      	ldr	r3, [pc, #452]	; (800ebcc <tcp_receive+0xb10>)
 800ea06:	891c      	ldrh	r4, [r3, #8]
 800ea08:	4b70      	ldr	r3, [pc, #448]	; (800ebcc <tcp_receive+0xb10>)
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	899b      	ldrh	r3, [r3, #12]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fa fe65 	bl	80096e0 <lwip_htons>
 800ea16:	4603      	mov	r3, r0
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	f003 0303 	and.w	r3, r3, #3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <tcp_receive+0x96a>
 800ea22:	2301      	movs	r3, #1
 800ea24:	e000      	b.n	800ea28 <tcp_receive+0x96c>
 800ea26:	2300      	movs	r3, #0
 800ea28:	4423      	add	r3, r4
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	4b65      	ldr	r3, [pc, #404]	; (800ebc4 <tcp_receive+0xb08>)
 800ea2e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ea30:	4b64      	ldr	r3, [pc, #400]	; (800ebc4 <tcp_receive+0xb08>)
 800ea32:	881b      	ldrh	r3, [r3, #0]
 800ea34:	461a      	mov	r2, r3
 800ea36:	4b64      	ldr	r3, [pc, #400]	; (800ebc8 <tcp_receive+0xb0c>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	441a      	add	r2, r3
 800ea3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d006      	beq.n	800ea54 <tcp_receive+0x998>
 800ea46:	4b62      	ldr	r3, [pc, #392]	; (800ebd0 <tcp_receive+0xb14>)
 800ea48:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ea4c:	4961      	ldr	r1, [pc, #388]	; (800ebd4 <tcp_receive+0xb18>)
 800ea4e:	4862      	ldr	r0, [pc, #392]	; (800ebd8 <tcp_receive+0xb1c>)
 800ea50:	f004 fd98 	bl	8013584 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea58:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ea5a:	4b5a      	ldr	r3, [pc, #360]	; (800ebc4 <tcp_receive+0xb08>)
 800ea5c:	881b      	ldrh	r3, [r3, #0]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	4b59      	ldr	r3, [pc, #356]	; (800ebc8 <tcp_receive+0xb0c>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	441a      	add	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea6e:	4b55      	ldr	r3, [pc, #340]	; (800ebc4 <tcp_receive+0xb08>)
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d206      	bcs.n	800ea84 <tcp_receive+0x9c8>
 800ea76:	4b56      	ldr	r3, [pc, #344]	; (800ebd0 <tcp_receive+0xb14>)
 800ea78:	f240 6207 	movw	r2, #1543	; 0x607
 800ea7c:	4957      	ldr	r1, [pc, #348]	; (800ebdc <tcp_receive+0xb20>)
 800ea7e:	4856      	ldr	r0, [pc, #344]	; (800ebd8 <tcp_receive+0xb1c>)
 800ea80:	f004 fd80 	bl	8013584 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea88:	4b4e      	ldr	r3, [pc, #312]	; (800ebc4 <tcp_receive+0xb08>)
 800ea8a:	881b      	ldrh	r3, [r3, #0]
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7fc ffc5 	bl	800ba24 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ea9a:	4b4c      	ldr	r3, [pc, #304]	; (800ebcc <tcp_receive+0xb10>)
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	891b      	ldrh	r3, [r3, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d006      	beq.n	800eab2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800eaa4:	4b49      	ldr	r3, [pc, #292]	; (800ebcc <tcp_receive+0xb10>)
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	4a4d      	ldr	r2, [pc, #308]	; (800ebe0 <tcp_receive+0xb24>)
 800eaaa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800eaac:	4b47      	ldr	r3, [pc, #284]	; (800ebcc <tcp_receive+0xb10>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eab2:	4b46      	ldr	r3, [pc, #280]	; (800ebcc <tcp_receive+0xb10>)
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	899b      	ldrh	r3, [r3, #12]
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fa fe10 	bl	80096e0 <lwip_htons>
 800eac0:	4603      	mov	r3, r0
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	f003 0301 	and.w	r3, r3, #1
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f000 80b8 	beq.w	800ec3e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800eace:	4b45      	ldr	r3, [pc, #276]	; (800ebe4 <tcp_receive+0xb28>)
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	f043 0320 	orr.w	r3, r3, #32
 800ead6:	b2da      	uxtb	r2, r3
 800ead8:	4b42      	ldr	r3, [pc, #264]	; (800ebe4 <tcp_receive+0xb28>)
 800eada:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800eadc:	e0af      	b.n	800ec3e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eae2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	4a36      	ldr	r2, [pc, #216]	; (800ebc8 <tcp_receive+0xb0c>)
 800eaee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	891b      	ldrh	r3, [r3, #8]
 800eaf4:	461c      	mov	r4, r3
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	899b      	ldrh	r3, [r3, #12]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fa fdee 	bl	80096e0 <lwip_htons>
 800eb04:	4603      	mov	r3, r0
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	f003 0303 	and.w	r3, r3, #3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d001      	beq.n	800eb14 <tcp_receive+0xa58>
 800eb10:	2301      	movs	r3, #1
 800eb12:	e000      	b.n	800eb16 <tcp_receive+0xa5a>
 800eb14:	2300      	movs	r3, #0
 800eb16:	191a      	adds	r2, r3, r4
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1c:	441a      	add	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb26:	461c      	mov	r4, r3
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	891b      	ldrh	r3, [r3, #8]
 800eb2c:	461d      	mov	r5, r3
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	899b      	ldrh	r3, [r3, #12]
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fa fdd2 	bl	80096e0 <lwip_htons>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	f003 0303 	and.w	r3, r3, #3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d001      	beq.n	800eb4c <tcp_receive+0xa90>
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e000      	b.n	800eb4e <tcp_receive+0xa92>
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	442b      	add	r3, r5
 800eb50:	429c      	cmp	r4, r3
 800eb52:	d206      	bcs.n	800eb62 <tcp_receive+0xaa6>
 800eb54:	4b1e      	ldr	r3, [pc, #120]	; (800ebd0 <tcp_receive+0xb14>)
 800eb56:	f240 622b 	movw	r2, #1579	; 0x62b
 800eb5a:	4923      	ldr	r1, [pc, #140]	; (800ebe8 <tcp_receive+0xb2c>)
 800eb5c:	481e      	ldr	r0, [pc, #120]	; (800ebd8 <tcp_receive+0xb1c>)
 800eb5e:	f004 fd11 	bl	8013584 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	891b      	ldrh	r3, [r3, #8]
 800eb66:	461c      	mov	r4, r3
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	899b      	ldrh	r3, [r3, #12]
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fa fdb5 	bl	80096e0 <lwip_htons>
 800eb76:	4603      	mov	r3, r0
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	f003 0303 	and.w	r3, r3, #3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <tcp_receive+0xaca>
 800eb82:	2301      	movs	r3, #1
 800eb84:	e000      	b.n	800eb88 <tcp_receive+0xacc>
 800eb86:	2300      	movs	r3, #0
 800eb88:	1919      	adds	r1, r3, r4
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb8e:	b28b      	uxth	r3, r1
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7fc ff43 	bl	800ba24 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	891b      	ldrh	r3, [r3, #8]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d028      	beq.n	800ebfa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800eba8:	4b0d      	ldr	r3, [pc, #52]	; (800ebe0 <tcp_receive+0xb24>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d01d      	beq.n	800ebec <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ebb0:	4b0b      	ldr	r3, [pc, #44]	; (800ebe0 <tcp_receive+0xb24>)
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4610      	mov	r0, r2
 800ebbc:	f7fc fa60 	bl	800b080 <pbuf_cat>
 800ebc0:	e018      	b.n	800ebf4 <tcp_receive+0xb38>
 800ebc2:	bf00      	nop
 800ebc4:	200105ae 	.word	0x200105ae
 800ebc8:	200105a4 	.word	0x200105a4
 800ebcc:	20010584 	.word	0x20010584
 800ebd0:	080159e4 	.word	0x080159e4
 800ebd4:	08015dc4 	.word	0x08015dc4
 800ebd8:	08015a30 	.word	0x08015a30
 800ebdc:	08015e00 	.word	0x08015e00
 800ebe0:	200105b4 	.word	0x200105b4
 800ebe4:	200105b1 	.word	0x200105b1
 800ebe8:	08015e20 	.word	0x08015e20
            } else {
              recv_data = cseg->p;
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	4a70      	ldr	r2, [pc, #448]	; (800edb4 <tcp_receive+0xcf8>)
 800ebf2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	899b      	ldrh	r3, [r3, #12]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fa fd6c 	bl	80096e0 <lwip_htons>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	f003 0301 	and.w	r3, r3, #1
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00d      	beq.n	800ec30 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ec14:	4b68      	ldr	r3, [pc, #416]	; (800edb8 <tcp_receive+0xcfc>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f043 0320 	orr.w	r3, r3, #32
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	4b66      	ldr	r3, [pc, #408]	; (800edb8 <tcp_receive+0xcfc>)
 800ec20:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	7d1b      	ldrb	r3, [r3, #20]
 800ec26:	2b04      	cmp	r3, #4
 800ec28:	d102      	bne.n	800ec30 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2207      	movs	r2, #7
 800ec2e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ec38:	68b8      	ldr	r0, [r7, #8]
 800ec3a:	f7fd fbd2 	bl	800c3e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	685a      	ldr	r2, [r3, #4]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ec52:	429a      	cmp	r2, r3
 800ec54:	f43f af43 	beq.w	800eade <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	8b5b      	ldrh	r3, [r3, #26]
 800ec5c:	f003 0301 	and.w	r3, r3, #1
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00e      	beq.n	800ec82 <tcp_receive+0xbc6>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	8b5b      	ldrh	r3, [r3, #26]
 800ec68:	f023 0301 	bic.w	r3, r3, #1
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	835a      	strh	r2, [r3, #26]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	8b5b      	ldrh	r3, [r3, #26]
 800ec76:	f043 0302 	orr.w	r3, r3, #2
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ec80:	e188      	b.n	800ef94 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	8b5b      	ldrh	r3, [r3, #26]
 800ec86:	f043 0301 	orr.w	r3, r3, #1
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ec90:	e180      	b.n	800ef94 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d106      	bne.n	800eca8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ec9a:	4848      	ldr	r0, [pc, #288]	; (800edbc <tcp_receive+0xd00>)
 800ec9c:	f7fd fbba 	bl	800c414 <tcp_seg_copy>
 800eca0:	4602      	mov	r2, r0
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	675a      	str	r2, [r3, #116]	; 0x74
 800eca6:	e16d      	b.n	800ef84 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecb2:	e157      	b.n	800ef64 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ecb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	685a      	ldr	r2, [r3, #4]
 800ecba:	4b41      	ldr	r3, [pc, #260]	; (800edc0 <tcp_receive+0xd04>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d11d      	bne.n	800ecfe <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ecc2:	4b3e      	ldr	r3, [pc, #248]	; (800edbc <tcp_receive+0xd00>)
 800ecc4:	891a      	ldrh	r2, [r3, #8]
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc8:	891b      	ldrh	r3, [r3, #8]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	f240 814f 	bls.w	800ef6e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ecd0:	483a      	ldr	r0, [pc, #232]	; (800edbc <tcp_receive+0xd00>)
 800ecd2:	f7fd fb9f 	bl	800c414 <tcp_seg_copy>
 800ecd6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f000 8149 	beq.w	800ef72 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ece0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d003      	beq.n	800ecee <tcp_receive+0xc32>
                    prev->next = cseg;
 800ece6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	e002      	b.n	800ecf4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	697a      	ldr	r2, [r7, #20]
 800ecf2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ecf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecf6:	6978      	ldr	r0, [r7, #20]
 800ecf8:	f7ff f8dc 	bl	800deb4 <tcp_oos_insert_segment>
                }
                break;
 800ecfc:	e139      	b.n	800ef72 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ecfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d117      	bne.n	800ed34 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ed04:	4b2e      	ldr	r3, [pc, #184]	; (800edc0 <tcp_receive+0xd04>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	da57      	bge.n	800edc4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed14:	4829      	ldr	r0, [pc, #164]	; (800edbc <tcp_receive+0xd00>)
 800ed16:	f7fd fb7d 	bl	800c414 <tcp_seg_copy>
 800ed1a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8129 	beq.w	800ef76 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	69ba      	ldr	r2, [r7, #24]
 800ed28:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ed2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed2c:	69b8      	ldr	r0, [r7, #24]
 800ed2e:	f7ff f8c1 	bl	800deb4 <tcp_oos_insert_segment>
                  }
                  break;
 800ed32:	e120      	b.n	800ef76 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ed34:	4b22      	ldr	r3, [pc, #136]	; (800edc0 <tcp_receive+0xd04>)
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	1ad3      	subs	r3, r2, r3
 800ed40:	3b01      	subs	r3, #1
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	db3e      	blt.n	800edc4 <tcp_receive+0xd08>
 800ed46:	4b1e      	ldr	r3, [pc, #120]	; (800edc0 <tcp_receive+0xd04>)
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	3301      	adds	r3, #1
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	dc35      	bgt.n	800edc4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed58:	4818      	ldr	r0, [pc, #96]	; (800edbc <tcp_receive+0xd00>)
 800ed5a:	f7fd fb5b 	bl	800c414 <tcp_seg_copy>
 800ed5e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 8109 	beq.w	800ef7a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ed68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed70:	8912      	ldrh	r2, [r2, #8]
 800ed72:	441a      	add	r2, r3
 800ed74:	4b12      	ldr	r3, [pc, #72]	; (800edc0 <tcp_receive+0xd04>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	1ad3      	subs	r3, r2, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	dd12      	ble.n	800eda4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ed7e:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <tcp_receive+0xd04>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed92:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ed94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9a:	891b      	ldrh	r3, [r3, #8]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4610      	mov	r0, r2
 800eda0:	f7fb ff1a 	bl	800abd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800eda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda6:	69fa      	ldr	r2, [r7, #28]
 800eda8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800edaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800edac:	69f8      	ldr	r0, [r7, #28]
 800edae:	f7ff f881 	bl	800deb4 <tcp_oos_insert_segment>
                  }
                  break;
 800edb2:	e0e2      	b.n	800ef7a <tcp_receive+0xebe>
 800edb4:	200105b4 	.word	0x200105b4
 800edb8:	200105b1 	.word	0x200105b1
 800edbc:	20010584 	.word	0x20010584
 800edc0:	200105a4 	.word	0x200105a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800edc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f040 80c6 	bne.w	800ef5e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800edd2:	4b80      	ldr	r3, [pc, #512]	; (800efd4 <tcp_receive+0xf18>)
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f340 80bd 	ble.w	800ef5e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ede4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	899b      	ldrh	r3, [r3, #12]
 800edea:	b29b      	uxth	r3, r3
 800edec:	4618      	mov	r0, r3
 800edee:	f7fa fc77 	bl	80096e0 <lwip_htons>
 800edf2:	4603      	mov	r3, r0
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	f003 0301 	and.w	r3, r3, #1
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	f040 80bf 	bne.w	800ef7e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ee00:	4875      	ldr	r0, [pc, #468]	; (800efd8 <tcp_receive+0xf1c>)
 800ee02:	f7fd fb07 	bl	800c414 <tcp_seg_copy>
 800ee06:	4602      	mov	r2, r0
 800ee08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f000 80b6 	beq.w	800ef82 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ee16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1e:	8912      	ldrh	r2, [r2, #8]
 800ee20:	441a      	add	r2, r3
 800ee22:	4b6c      	ldr	r3, [pc, #432]	; (800efd4 <tcp_receive+0xf18>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	dd12      	ble.n	800ee52 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ee2c:	4b69      	ldr	r3, [pc, #420]	; (800efd4 <tcp_receive+0xf18>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	1ad3      	subs	r3, r2, r3
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ee42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee44:	685a      	ldr	r2, [r3, #4]
 800ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee48:	891b      	ldrh	r3, [r3, #8]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7fb fec3 	bl	800abd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ee52:	4b62      	ldr	r3, [pc, #392]	; (800efdc <tcp_receive+0xf20>)
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	4b5e      	ldr	r3, [pc, #376]	; (800efd4 <tcp_receive+0xf18>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	441a      	add	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee62:	6879      	ldr	r1, [r7, #4]
 800ee64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee66:	440b      	add	r3, r1
 800ee68:	1ad3      	subs	r3, r2, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f340 8089 	ble.w	800ef82 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ee70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	899b      	ldrh	r3, [r3, #12]
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fa fc30 	bl	80096e0 <lwip_htons>
 800ee80:	4603      	mov	r3, r0
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	f003 0301 	and.w	r3, r3, #1
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d022      	beq.n	800eed2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	899b      	ldrh	r3, [r3, #12]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	b21b      	sxth	r3, r3
 800ee98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ee9c:	b21c      	sxth	r4, r3
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	899b      	ldrh	r3, [r3, #12]
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fa fc19 	bl	80096e0 <lwip_htons>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fa fc10 	bl	80096e0 <lwip_htons>
 800eec0:	4603      	mov	r3, r0
 800eec2:	b21b      	sxth	r3, r3
 800eec4:	4323      	orrs	r3, r4
 800eec6:	b21a      	sxth	r2, r3
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	b292      	uxth	r2, r2
 800eed0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eedc:	4413      	add	r3, r2
 800eede:	b299      	uxth	r1, r3
 800eee0:	4b3c      	ldr	r3, [pc, #240]	; (800efd4 <tcp_receive+0xf18>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	1a8a      	subs	r2, r1, r2
 800eeec:	b292      	uxth	r2, r2
 800eeee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	685a      	ldr	r2, [r3, #4]
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	891b      	ldrh	r3, [r3, #8]
 800eefc:	4619      	mov	r1, r3
 800eefe:	4610      	mov	r0, r2
 800ef00:	f7fb fe6a 	bl	800abd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	891c      	ldrh	r4, [r3, #8]
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	899b      	ldrh	r3, [r3, #12]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fa fbe3 	bl	80096e0 <lwip_htons>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	f003 0303 	and.w	r3, r3, #3
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <tcp_receive+0xe6e>
 800ef26:	2301      	movs	r3, #1
 800ef28:	e000      	b.n	800ef2c <tcp_receive+0xe70>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	4423      	add	r3, r4
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	4b2a      	ldr	r3, [pc, #168]	; (800efdc <tcp_receive+0xf20>)
 800ef32:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef34:	4b29      	ldr	r3, [pc, #164]	; (800efdc <tcp_receive+0xf20>)
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	4b26      	ldr	r3, [pc, #152]	; (800efd4 <tcp_receive+0xf18>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	441a      	add	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef44:	6879      	ldr	r1, [r7, #4]
 800ef46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef48:	440b      	add	r3, r1
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d019      	beq.n	800ef82 <tcp_receive+0xec6>
 800ef4e:	4b24      	ldr	r3, [pc, #144]	; (800efe0 <tcp_receive+0xf24>)
 800ef50:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ef54:	4923      	ldr	r1, [pc, #140]	; (800efe4 <tcp_receive+0xf28>)
 800ef56:	4824      	ldr	r0, [pc, #144]	; (800efe8 <tcp_receive+0xf2c>)
 800ef58:	f004 fb14 	bl	8013584 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ef5c:	e011      	b.n	800ef82 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f47f aea4 	bne.w	800ecb4 <tcp_receive+0xbf8>
 800ef6c:	e00a      	b.n	800ef84 <tcp_receive+0xec8>
                break;
 800ef6e:	bf00      	nop
 800ef70:	e008      	b.n	800ef84 <tcp_receive+0xec8>
                break;
 800ef72:	bf00      	nop
 800ef74:	e006      	b.n	800ef84 <tcp_receive+0xec8>
                  break;
 800ef76:	bf00      	nop
 800ef78:	e004      	b.n	800ef84 <tcp_receive+0xec8>
                  break;
 800ef7a:	bf00      	nop
 800ef7c:	e002      	b.n	800ef84 <tcp_receive+0xec8>
                  break;
 800ef7e:	bf00      	nop
 800ef80:	e000      	b.n	800ef84 <tcp_receive+0xec8>
                break;
 800ef82:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f001 fa33 	bl	80103f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ef8a:	e003      	b.n	800ef94 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f001 fa2f 	bl	80103f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ef92:	e01a      	b.n	800efca <tcp_receive+0xf0e>
 800ef94:	e019      	b.n	800efca <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ef96:	4b0f      	ldr	r3, [pc, #60]	; (800efd4 <tcp_receive+0xf18>)
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	db0a      	blt.n	800efba <tcp_receive+0xefe>
 800efa4:	4b0b      	ldr	r3, [pc, #44]	; (800efd4 <tcp_receive+0xf18>)
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efac:	6879      	ldr	r1, [r7, #4]
 800efae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efb0:	440b      	add	r3, r1
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	3301      	adds	r3, #1
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	dd07      	ble.n	800efca <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	8b5b      	ldrh	r3, [r3, #26]
 800efbe:	f043 0302 	orr.w	r3, r3, #2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800efc8:	e7ff      	b.n	800efca <tcp_receive+0xf0e>
 800efca:	bf00      	nop
 800efcc:	3750      	adds	r7, #80	; 0x50
 800efce:	46bd      	mov	sp, r7
 800efd0:	bdb0      	pop	{r4, r5, r7, pc}
 800efd2:	bf00      	nop
 800efd4:	200105a4 	.word	0x200105a4
 800efd8:	20010584 	.word	0x20010584
 800efdc:	200105ae 	.word	0x200105ae
 800efe0:	080159e4 	.word	0x080159e4
 800efe4:	08015d8c 	.word	0x08015d8c
 800efe8:	08015a30 	.word	0x08015a30

0800efec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800eff2:	4b15      	ldr	r3, [pc, #84]	; (800f048 <tcp_get_next_optbyte+0x5c>)
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	1c5a      	adds	r2, r3, #1
 800eff8:	b291      	uxth	r1, r2
 800effa:	4a13      	ldr	r2, [pc, #76]	; (800f048 <tcp_get_next_optbyte+0x5c>)
 800effc:	8011      	strh	r1, [r2, #0]
 800effe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f000:	4b12      	ldr	r3, [pc, #72]	; (800f04c <tcp_get_next_optbyte+0x60>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d004      	beq.n	800f012 <tcp_get_next_optbyte+0x26>
 800f008:	4b11      	ldr	r3, [pc, #68]	; (800f050 <tcp_get_next_optbyte+0x64>)
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	88fa      	ldrh	r2, [r7, #6]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d208      	bcs.n	800f024 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f012:	4b10      	ldr	r3, [pc, #64]	; (800f054 <tcp_get_next_optbyte+0x68>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3314      	adds	r3, #20
 800f018:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f01a:	88fb      	ldrh	r3, [r7, #6]
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	4413      	add	r3, r2
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	e00b      	b.n	800f03c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f024:	88fb      	ldrh	r3, [r7, #6]
 800f026:	b2da      	uxtb	r2, r3
 800f028:	4b09      	ldr	r3, [pc, #36]	; (800f050 <tcp_get_next_optbyte+0x64>)
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	1ad3      	subs	r3, r2, r3
 800f030:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f032:	4b06      	ldr	r3, [pc, #24]	; (800f04c <tcp_get_next_optbyte+0x60>)
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	797b      	ldrb	r3, [r7, #5]
 800f038:	4413      	add	r3, r2
 800f03a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	200105a0 	.word	0x200105a0
 800f04c:	2001059c 	.word	0x2001059c
 800f050:	2001059a 	.word	0x2001059a
 800f054:	20010594 	.word	0x20010594

0800f058 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d106      	bne.n	800f074 <tcp_parseopt+0x1c>
 800f066:	4b32      	ldr	r3, [pc, #200]	; (800f130 <tcp_parseopt+0xd8>)
 800f068:	f240 727d 	movw	r2, #1917	; 0x77d
 800f06c:	4931      	ldr	r1, [pc, #196]	; (800f134 <tcp_parseopt+0xdc>)
 800f06e:	4832      	ldr	r0, [pc, #200]	; (800f138 <tcp_parseopt+0xe0>)
 800f070:	f004 fa88 	bl	8013584 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f074:	4b31      	ldr	r3, [pc, #196]	; (800f13c <tcp_parseopt+0xe4>)
 800f076:	881b      	ldrh	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d055      	beq.n	800f128 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f07c:	4b30      	ldr	r3, [pc, #192]	; (800f140 <tcp_parseopt+0xe8>)
 800f07e:	2200      	movs	r2, #0
 800f080:	801a      	strh	r2, [r3, #0]
 800f082:	e045      	b.n	800f110 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f084:	f7ff ffb2 	bl	800efec <tcp_get_next_optbyte>
 800f088:	4603      	mov	r3, r0
 800f08a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f08c:	7bfb      	ldrb	r3, [r7, #15]
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d006      	beq.n	800f0a0 <tcp_parseopt+0x48>
 800f092:	2b02      	cmp	r3, #2
 800f094:	dc2b      	bgt.n	800f0ee <tcp_parseopt+0x96>
 800f096:	2b00      	cmp	r3, #0
 800f098:	d041      	beq.n	800f11e <tcp_parseopt+0xc6>
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d127      	bne.n	800f0ee <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f09e:	e037      	b.n	800f110 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f0a0:	f7ff ffa4 	bl	800efec <tcp_get_next_optbyte>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b04      	cmp	r3, #4
 800f0a8:	d13b      	bne.n	800f122 <tcp_parseopt+0xca>
 800f0aa:	4b25      	ldr	r3, [pc, #148]	; (800f140 <tcp_parseopt+0xe8>)
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	4a22      	ldr	r2, [pc, #136]	; (800f13c <tcp_parseopt+0xe4>)
 800f0b2:	8812      	ldrh	r2, [r2, #0]
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	da34      	bge.n	800f122 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f0b8:	f7ff ff98 	bl	800efec <tcp_get_next_optbyte>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	021b      	lsls	r3, r3, #8
 800f0c2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f0c4:	f7ff ff92 	bl	800efec <tcp_get_next_optbyte>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	89bb      	ldrh	r3, [r7, #12]
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f0d2:	89bb      	ldrh	r3, [r7, #12]
 800f0d4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f0d8:	d804      	bhi.n	800f0e4 <tcp_parseopt+0x8c>
 800f0da:	89bb      	ldrh	r3, [r7, #12]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d001      	beq.n	800f0e4 <tcp_parseopt+0x8c>
 800f0e0:	89ba      	ldrh	r2, [r7, #12]
 800f0e2:	e001      	b.n	800f0e8 <tcp_parseopt+0x90>
 800f0e4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f0ec:	e010      	b.n	800f110 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f0ee:	f7ff ff7d 	bl	800efec <tcp_get_next_optbyte>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f0f6:	7afb      	ldrb	r3, [r7, #11]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d914      	bls.n	800f126 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f0fc:	7afb      	ldrb	r3, [r7, #11]
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <tcp_parseopt+0xe8>)
 800f102:	881b      	ldrh	r3, [r3, #0]
 800f104:	4413      	add	r3, r2
 800f106:	b29b      	uxth	r3, r3
 800f108:	3b02      	subs	r3, #2
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <tcp_parseopt+0xe8>)
 800f10e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f110:	4b0b      	ldr	r3, [pc, #44]	; (800f140 <tcp_parseopt+0xe8>)
 800f112:	881a      	ldrh	r2, [r3, #0]
 800f114:	4b09      	ldr	r3, [pc, #36]	; (800f13c <tcp_parseopt+0xe4>)
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d3b3      	bcc.n	800f084 <tcp_parseopt+0x2c>
 800f11c:	e004      	b.n	800f128 <tcp_parseopt+0xd0>
          return;
 800f11e:	bf00      	nop
 800f120:	e002      	b.n	800f128 <tcp_parseopt+0xd0>
            return;
 800f122:	bf00      	nop
 800f124:	e000      	b.n	800f128 <tcp_parseopt+0xd0>
            return;
 800f126:	bf00      	nop
      }
    }
  }
}
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	080159e4 	.word	0x080159e4
 800f134:	08015e48 	.word	0x08015e48
 800f138:	08015a30 	.word	0x08015a30
 800f13c:	20010598 	.word	0x20010598
 800f140:	200105a0 	.word	0x200105a0

0800f144 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f144:	b480      	push	{r7}
 800f146:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f148:	4b05      	ldr	r3, [pc, #20]	; (800f160 <tcp_trigger_input_pcb_close+0x1c>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	f043 0310 	orr.w	r3, r3, #16
 800f150:	b2da      	uxtb	r2, r3
 800f152:	4b03      	ldr	r3, [pc, #12]	; (800f160 <tcp_trigger_input_pcb_close+0x1c>)
 800f154:	701a      	strb	r2, [r3, #0]
}
 800f156:	bf00      	nop
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr
 800f160:	200105b1 	.word	0x200105b1

0800f164 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00a      	beq.n	800f18c <tcp_route+0x28>
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	7a1b      	ldrb	r3, [r3, #8]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d006      	beq.n	800f18c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	7a1b      	ldrb	r3, [r3, #8]
 800f182:	4618      	mov	r0, r3
 800f184:	f7fb fb20 	bl	800a7c8 <netif_get_by_index>
 800f188:	4603      	mov	r3, r0
 800f18a:	e003      	b.n	800f194 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f002 fead 	bl	8011eec <ip4_route>
 800f192:	4603      	mov	r3, r0
  }
}
 800f194:	4618      	mov	r0, r3
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f19c:	b590      	push	{r4, r7, lr}
 800f19e:	b087      	sub	sp, #28
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d105      	bne.n	800f1be <tcp_create_segment+0x22>
 800f1b2:	4b44      	ldr	r3, [pc, #272]	; (800f2c4 <tcp_create_segment+0x128>)
 800f1b4:	22a3      	movs	r2, #163	; 0xa3
 800f1b6:	4944      	ldr	r1, [pc, #272]	; (800f2c8 <tcp_create_segment+0x12c>)
 800f1b8:	4844      	ldr	r0, [pc, #272]	; (800f2cc <tcp_create_segment+0x130>)
 800f1ba:	f004 f9e3 	bl	8013584 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d105      	bne.n	800f1d0 <tcp_create_segment+0x34>
 800f1c4:	4b3f      	ldr	r3, [pc, #252]	; (800f2c4 <tcp_create_segment+0x128>)
 800f1c6:	22a4      	movs	r2, #164	; 0xa4
 800f1c8:	4941      	ldr	r1, [pc, #260]	; (800f2d0 <tcp_create_segment+0x134>)
 800f1ca:	4840      	ldr	r0, [pc, #256]	; (800f2cc <tcp_create_segment+0x130>)
 800f1cc:	f004 f9da 	bl	8013584 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f1d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f1de:	2003      	movs	r0, #3
 800f1e0:	f7fa ff66 	bl	800a0b0 <memp_malloc>
 800f1e4:	6138      	str	r0, [r7, #16]
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d104      	bne.n	800f1f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f1ec:	68b8      	ldr	r0, [r7, #8]
 800f1ee:	f7fb fe79 	bl	800aee4 <pbuf_free>
    return NULL;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	e061      	b.n	800f2ba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f1fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	2200      	movs	r2, #0
 800f202:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	891a      	ldrh	r2, [r3, #8]
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
 800f210:	b29b      	uxth	r3, r3
 800f212:	429a      	cmp	r2, r3
 800f214:	d205      	bcs.n	800f222 <tcp_create_segment+0x86>
 800f216:	4b2b      	ldr	r3, [pc, #172]	; (800f2c4 <tcp_create_segment+0x128>)
 800f218:	22b0      	movs	r2, #176	; 0xb0
 800f21a:	492e      	ldr	r1, [pc, #184]	; (800f2d4 <tcp_create_segment+0x138>)
 800f21c:	482b      	ldr	r0, [pc, #172]	; (800f2cc <tcp_create_segment+0x130>)
 800f21e:	f004 f9b1 	bl	8013584 <iprintf>
  seg->len = p->tot_len - optlen;
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	891a      	ldrh	r2, [r3, #8]
 800f226:	7dfb      	ldrb	r3, [r7, #23]
 800f228:	b29b      	uxth	r3, r3
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f232:	2114      	movs	r1, #20
 800f234:	68b8      	ldr	r0, [r7, #8]
 800f236:	f7fb fdbf 	bl	800adb8 <pbuf_add_header>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d004      	beq.n	800f24a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f240:	6938      	ldr	r0, [r7, #16]
 800f242:	f7fd f8ce 	bl	800c3e2 <tcp_seg_free>
    return NULL;
 800f246:	2300      	movs	r3, #0
 800f248:	e037      	b.n	800f2ba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	8ada      	ldrh	r2, [r3, #22]
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	68dc      	ldr	r4, [r3, #12]
 800f25c:	4610      	mov	r0, r2
 800f25e:	f7fa fa3f 	bl	80096e0 <lwip_htons>
 800f262:	4603      	mov	r3, r0
 800f264:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	8b1a      	ldrh	r2, [r3, #24]
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	68dc      	ldr	r4, [r3, #12]
 800f26e:	4610      	mov	r0, r2
 800f270:	f7fa fa36 	bl	80096e0 <lwip_htons>
 800f274:	4603      	mov	r3, r0
 800f276:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	68dc      	ldr	r4, [r3, #12]
 800f27c:	6838      	ldr	r0, [r7, #0]
 800f27e:	f7fa fa44 	bl	800970a <lwip_htonl>
 800f282:	4603      	mov	r3, r0
 800f284:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f286:	7dfb      	ldrb	r3, [r7, #23]
 800f288:	089b      	lsrs	r3, r3, #2
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	3305      	adds	r3, #5
 800f290:	b29b      	uxth	r3, r3
 800f292:	031b      	lsls	r3, r3, #12
 800f294:	b29a      	uxth	r2, r3
 800f296:	79fb      	ldrb	r3, [r7, #7]
 800f298:	b29b      	uxth	r3, r3
 800f29a:	4313      	orrs	r3, r2
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	68dc      	ldr	r4, [r3, #12]
 800f2a2:	4610      	mov	r0, r2
 800f2a4:	f7fa fa1c 	bl	80096e0 <lwip_htons>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	749a      	strb	r2, [r3, #18]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	74da      	strb	r2, [r3, #19]
  return seg;
 800f2b8:	693b      	ldr	r3, [r7, #16]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	371c      	adds	r7, #28
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd90      	pop	{r4, r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	08015e64 	.word	0x08015e64
 800f2c8:	08015e98 	.word	0x08015e98
 800f2cc:	08015eb8 	.word	0x08015eb8
 800f2d0:	08015ee0 	.word	0x08015ee0
 800f2d4:	08015f04 	.word	0x08015f04

0800f2d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f2d8:	b590      	push	{r4, r7, lr}
 800f2da:	b08b      	sub	sp, #44	; 0x2c
 800f2dc:	af02      	add	r7, sp, #8
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	61fb      	str	r3, [r7, #28]
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d106      	bne.n	800f304 <tcp_split_unsent_seg+0x2c>
 800f2f6:	4b95      	ldr	r3, [pc, #596]	; (800f54c <tcp_split_unsent_seg+0x274>)
 800f2f8:	f240 324b 	movw	r2, #843	; 0x34b
 800f2fc:	4994      	ldr	r1, [pc, #592]	; (800f550 <tcp_split_unsent_seg+0x278>)
 800f2fe:	4895      	ldr	r0, [pc, #596]	; (800f554 <tcp_split_unsent_seg+0x27c>)
 800f300:	f004 f940 	bl	8013584 <iprintf>

  useg = pcb->unsent;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f308:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d102      	bne.n	800f316 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f314:	e116      	b.n	800f544 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f316:	887b      	ldrh	r3, [r7, #2]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d109      	bne.n	800f330 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f31c:	4b8b      	ldr	r3, [pc, #556]	; (800f54c <tcp_split_unsent_seg+0x274>)
 800f31e:	f240 3253 	movw	r2, #851	; 0x353
 800f322:	498d      	ldr	r1, [pc, #564]	; (800f558 <tcp_split_unsent_seg+0x280>)
 800f324:	488b      	ldr	r0, [pc, #556]	; (800f554 <tcp_split_unsent_seg+0x27c>)
 800f326:	f004 f92d 	bl	8013584 <iprintf>
    return ERR_VAL;
 800f32a:	f06f 0305 	mvn.w	r3, #5
 800f32e:	e109      	b.n	800f544 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	891b      	ldrh	r3, [r3, #8]
 800f334:	887a      	ldrh	r2, [r7, #2]
 800f336:	429a      	cmp	r2, r3
 800f338:	d301      	bcc.n	800f33e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	e102      	b.n	800f544 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f342:	887a      	ldrh	r2, [r7, #2]
 800f344:	429a      	cmp	r2, r3
 800f346:	d906      	bls.n	800f356 <tcp_split_unsent_seg+0x7e>
 800f348:	4b80      	ldr	r3, [pc, #512]	; (800f54c <tcp_split_unsent_seg+0x274>)
 800f34a:	f240 325b 	movw	r2, #859	; 0x35b
 800f34e:	4983      	ldr	r1, [pc, #524]	; (800f55c <tcp_split_unsent_seg+0x284>)
 800f350:	4880      	ldr	r0, [pc, #512]	; (800f554 <tcp_split_unsent_seg+0x27c>)
 800f352:	f004 f917 	bl	8013584 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	891b      	ldrh	r3, [r3, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d106      	bne.n	800f36c <tcp_split_unsent_seg+0x94>
 800f35e:	4b7b      	ldr	r3, [pc, #492]	; (800f54c <tcp_split_unsent_seg+0x274>)
 800f360:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f364:	497e      	ldr	r1, [pc, #504]	; (800f560 <tcp_split_unsent_seg+0x288>)
 800f366:	487b      	ldr	r0, [pc, #492]	; (800f554 <tcp_split_unsent_seg+0x27c>)
 800f368:	f004 f90c 	bl	8013584 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	7a9b      	ldrb	r3, [r3, #10]
 800f370:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f372:	7bfb      	ldrb	r3, [r7, #15]
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	b2db      	uxtb	r3, r3
 800f378:	f003 0304 	and.w	r3, r3, #4
 800f37c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	891a      	ldrh	r2, [r3, #8]
 800f382:	887b      	ldrh	r3, [r7, #2]
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f388:	7bbb      	ldrb	r3, [r7, #14]
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	89bb      	ldrh	r3, [r7, #12]
 800f38e:	4413      	add	r3, r2
 800f390:	b29b      	uxth	r3, r3
 800f392:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f396:	4619      	mov	r1, r3
 800f398:	2036      	movs	r0, #54	; 0x36
 800f39a:	f7fb fabf 	bl	800a91c <pbuf_alloc>
 800f39e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f000 80b7 	beq.w	800f516 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	891a      	ldrh	r2, [r3, #8]
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	891b      	ldrh	r3, [r3, #8]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	887b      	ldrh	r3, [r7, #2]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	6858      	ldr	r0, [r3, #4]
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	685a      	ldr	r2, [r3, #4]
 800f3c4:	7bbb      	ldrb	r3, [r7, #14]
 800f3c6:	18d1      	adds	r1, r2, r3
 800f3c8:	897b      	ldrh	r3, [r7, #10]
 800f3ca:	89ba      	ldrh	r2, [r7, #12]
 800f3cc:	f7fb ff80 	bl	800b2d0 <pbuf_copy_partial>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	89bb      	ldrh	r3, [r7, #12]
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	f040 809f 	bne.w	800f51a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	899b      	ldrh	r3, [r3, #12]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fa f97b 	bl	80096e0 <lwip_htons>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f3f8:	7efb      	ldrb	r3, [r7, #27]
 800f3fa:	f003 0308 	and.w	r3, r3, #8
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d007      	beq.n	800f412 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f402:	7efb      	ldrb	r3, [r7, #27]
 800f404:	f023 0308 	bic.w	r3, r3, #8
 800f408:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f40a:	7ebb      	ldrb	r3, [r7, #26]
 800f40c:	f043 0308 	orr.w	r3, r3, #8
 800f410:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f412:	7efb      	ldrb	r3, [r7, #27]
 800f414:	f003 0301 	and.w	r3, r3, #1
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d007      	beq.n	800f42c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f41c:	7efb      	ldrb	r3, [r7, #27]
 800f41e:	f023 0301 	bic.w	r3, r3, #1
 800f422:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f424:	7ebb      	ldrb	r3, [r7, #26]
 800f426:	f043 0301 	orr.w	r3, r3, #1
 800f42a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	4618      	mov	r0, r3
 800f434:	f7fa f969 	bl	800970a <lwip_htonl>
 800f438:	4602      	mov	r2, r0
 800f43a:	887b      	ldrh	r3, [r7, #2]
 800f43c:	18d1      	adds	r1, r2, r3
 800f43e:	7eba      	ldrb	r2, [r7, #26]
 800f440:	7bfb      	ldrb	r3, [r7, #15]
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	460b      	mov	r3, r1
 800f446:	6939      	ldr	r1, [r7, #16]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7ff fea7 	bl	800f19c <tcp_create_segment>
 800f44e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d063      	beq.n	800f51e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fb fdd0 	bl	800b000 <pbuf_clen>
 800f460:	4603      	mov	r3, r0
 800f462:	461a      	mov	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f46a:	1a9b      	subs	r3, r3, r2
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	6858      	ldr	r0, [r3, #4]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	891a      	ldrh	r2, [r3, #8]
 800f47e:	89bb      	ldrh	r3, [r7, #12]
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	b29b      	uxth	r3, r3
 800f484:	4619      	mov	r1, r3
 800f486:	f7fb fba7 	bl	800abd8 <pbuf_realloc>
  useg->len -= remainder;
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	891a      	ldrh	r2, [r3, #8]
 800f48e:	89bb      	ldrh	r3, [r7, #12]
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	b29a      	uxth	r2, r3
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	899b      	ldrh	r3, [r3, #12]
 800f49e:	b29c      	uxth	r4, r3
 800f4a0:	7efb      	ldrb	r3, [r7, #27]
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fa f91b 	bl	80096e0 <lwip_htons>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	4322      	orrs	r2, r4
 800f4b4:	b292      	uxth	r2, r2
 800f4b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fb fd9f 	bl	800b000 <pbuf_clen>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4cc:	4413      	add	r3, r2
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fb fd90 	bl	800b000 <pbuf_clen>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4ea:	4413      	add	r3, r2
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	69fa      	ldr	r2, [r7, #28]
 800f500:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d103      	bne.n	800f512 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	e016      	b.n	800f544 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f516:	bf00      	nop
 800f518:	e002      	b.n	800f520 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f51a:	bf00      	nop
 800f51c:	e000      	b.n	800f520 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f51e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d006      	beq.n	800f534 <tcp_split_unsent_seg+0x25c>
 800f526:	4b09      	ldr	r3, [pc, #36]	; (800f54c <tcp_split_unsent_seg+0x274>)
 800f528:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f52c:	490d      	ldr	r1, [pc, #52]	; (800f564 <tcp_split_unsent_seg+0x28c>)
 800f52e:	4809      	ldr	r0, [pc, #36]	; (800f554 <tcp_split_unsent_seg+0x27c>)
 800f530:	f004 f828 	bl	8013584 <iprintf>
  if (p != NULL) {
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d002      	beq.n	800f540 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f53a:	6938      	ldr	r0, [r7, #16]
 800f53c:	f7fb fcd2 	bl	800aee4 <pbuf_free>
  }

  return ERR_MEM;
 800f540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f544:	4618      	mov	r0, r3
 800f546:	3724      	adds	r7, #36	; 0x24
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd90      	pop	{r4, r7, pc}
 800f54c:	08015e64 	.word	0x08015e64
 800f550:	080161f8 	.word	0x080161f8
 800f554:	08015eb8 	.word	0x08015eb8
 800f558:	0801621c 	.word	0x0801621c
 800f55c:	08016240 	.word	0x08016240
 800f560:	08016250 	.word	0x08016250
 800f564:	08016260 	.word	0x08016260

0800f568 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f568:	b590      	push	{r4, r7, lr}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d106      	bne.n	800f584 <tcp_send_fin+0x1c>
 800f576:	4b21      	ldr	r3, [pc, #132]	; (800f5fc <tcp_send_fin+0x94>)
 800f578:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f57c:	4920      	ldr	r1, [pc, #128]	; (800f600 <tcp_send_fin+0x98>)
 800f57e:	4821      	ldr	r0, [pc, #132]	; (800f604 <tcp_send_fin+0x9c>)
 800f580:	f004 f800 	bl	8013584 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d02e      	beq.n	800f5ea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f590:	60fb      	str	r3, [r7, #12]
 800f592:	e002      	b.n	800f59a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1f8      	bne.n	800f594 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	899b      	ldrh	r3, [r3, #12]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fa f898 	bl	80096e0 <lwip_htons>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f003 0307 	and.w	r3, r3, #7
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d116      	bne.n	800f5ea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	899b      	ldrh	r3, [r3, #12]
 800f5c2:	b29c      	uxth	r4, r3
 800f5c4:	2001      	movs	r0, #1
 800f5c6:	f7fa f88b 	bl	80096e0 <lwip_htons>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	4322      	orrs	r2, r4
 800f5d4:	b292      	uxth	r2, r2
 800f5d6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	8b5b      	ldrh	r3, [r3, #26]
 800f5dc:	f043 0320 	orr.w	r3, r3, #32
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	e004      	b.n	800f5f4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f5ea:	2101      	movs	r1, #1
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 f80b 	bl	800f608 <tcp_enqueue_flags>
 800f5f2:	4603      	mov	r3, r0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd90      	pop	{r4, r7, pc}
 800f5fc:	08015e64 	.word	0x08015e64
 800f600:	0801626c 	.word	0x0801626c
 800f604:	08015eb8 	.word	0x08015eb8

0800f608 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b08a      	sub	sp, #40	; 0x28
 800f60c:	af02      	add	r7, sp, #8
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	460b      	mov	r3, r1
 800f612:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f614:	2300      	movs	r3, #0
 800f616:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f61c:	78fb      	ldrb	r3, [r7, #3]
 800f61e:	f003 0303 	and.w	r3, r3, #3
 800f622:	2b00      	cmp	r3, #0
 800f624:	d106      	bne.n	800f634 <tcp_enqueue_flags+0x2c>
 800f626:	4b67      	ldr	r3, [pc, #412]	; (800f7c4 <tcp_enqueue_flags+0x1bc>)
 800f628:	f240 4211 	movw	r2, #1041	; 0x411
 800f62c:	4966      	ldr	r1, [pc, #408]	; (800f7c8 <tcp_enqueue_flags+0x1c0>)
 800f62e:	4867      	ldr	r0, [pc, #412]	; (800f7cc <tcp_enqueue_flags+0x1c4>)
 800f630:	f003 ffa8 	bl	8013584 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d106      	bne.n	800f648 <tcp_enqueue_flags+0x40>
 800f63a:	4b62      	ldr	r3, [pc, #392]	; (800f7c4 <tcp_enqueue_flags+0x1bc>)
 800f63c:	f240 4213 	movw	r2, #1043	; 0x413
 800f640:	4963      	ldr	r1, [pc, #396]	; (800f7d0 <tcp_enqueue_flags+0x1c8>)
 800f642:	4862      	ldr	r0, [pc, #392]	; (800f7cc <tcp_enqueue_flags+0x1c4>)
 800f644:	f003 ff9e 	bl	8013584 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f648:	78fb      	ldrb	r3, [r7, #3]
 800f64a:	f003 0302 	and.w	r3, r3, #2
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d001      	beq.n	800f656 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f652:	2301      	movs	r3, #1
 800f654:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f656:	7ffb      	ldrb	r3, [r7, #31]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	f003 0304 	and.w	r3, r3, #4
 800f660:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f662:	7dfb      	ldrb	r3, [r7, #23]
 800f664:	b29b      	uxth	r3, r3
 800f666:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f66a:	4619      	mov	r1, r3
 800f66c:	2036      	movs	r0, #54	; 0x36
 800f66e:	f7fb f955 	bl	800a91c <pbuf_alloc>
 800f672:	6138      	str	r0, [r7, #16]
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d109      	bne.n	800f68e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8b5b      	ldrh	r3, [r3, #26]
 800f67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f682:	b29a      	uxth	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f68c:	e095      	b.n	800f7ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	895a      	ldrh	r2, [r3, #10]
 800f692:	7dfb      	ldrb	r3, [r7, #23]
 800f694:	b29b      	uxth	r3, r3
 800f696:	429a      	cmp	r2, r3
 800f698:	d206      	bcs.n	800f6a8 <tcp_enqueue_flags+0xa0>
 800f69a:	4b4a      	ldr	r3, [pc, #296]	; (800f7c4 <tcp_enqueue_flags+0x1bc>)
 800f69c:	f240 4239 	movw	r2, #1081	; 0x439
 800f6a0:	494c      	ldr	r1, [pc, #304]	; (800f7d4 <tcp_enqueue_flags+0x1cc>)
 800f6a2:	484a      	ldr	r0, [pc, #296]	; (800f7cc <tcp_enqueue_flags+0x1c4>)
 800f6a4:	f003 ff6e 	bl	8013584 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f6ac:	78fa      	ldrb	r2, [r7, #3]
 800f6ae:	7ffb      	ldrb	r3, [r7, #31]
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	6939      	ldr	r1, [r7, #16]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7ff fd70 	bl	800f19c <tcp_create_segment>
 800f6bc:	60f8      	str	r0, [r7, #12]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d109      	bne.n	800f6d8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	8b5b      	ldrh	r3, [r3, #26]
 800f6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f6d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6d6:	e070      	b.n	800f7ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	f003 0303 	and.w	r3, r3, #3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d006      	beq.n	800f6f2 <tcp_enqueue_flags+0xea>
 800f6e4:	4b37      	ldr	r3, [pc, #220]	; (800f7c4 <tcp_enqueue_flags+0x1bc>)
 800f6e6:	f240 4242 	movw	r2, #1090	; 0x442
 800f6ea:	493b      	ldr	r1, [pc, #236]	; (800f7d8 <tcp_enqueue_flags+0x1d0>)
 800f6ec:	4837      	ldr	r0, [pc, #220]	; (800f7cc <tcp_enqueue_flags+0x1c4>)
 800f6ee:	f003 ff49 	bl	8013584 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	891b      	ldrh	r3, [r3, #8]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d006      	beq.n	800f708 <tcp_enqueue_flags+0x100>
 800f6fa:	4b32      	ldr	r3, [pc, #200]	; (800f7c4 <tcp_enqueue_flags+0x1bc>)
 800f6fc:	f240 4243 	movw	r2, #1091	; 0x443
 800f700:	4936      	ldr	r1, [pc, #216]	; (800f7dc <tcp_enqueue_flags+0x1d4>)
 800f702:	4832      	ldr	r0, [pc, #200]	; (800f7cc <tcp_enqueue_flags+0x1c4>)
 800f704:	f003 ff3e 	bl	8013584 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d103      	bne.n	800f718 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	68fa      	ldr	r2, [r7, #12]
 800f714:	66da      	str	r2, [r3, #108]	; 0x6c
 800f716:	e00d      	b.n	800f734 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f71c:	61bb      	str	r3, [r7, #24]
 800f71e:	e002      	b.n	800f726 <tcp_enqueue_flags+0x11e>
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	61bb      	str	r3, [r7, #24]
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1f8      	bne.n	800f720 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f73c:	78fb      	ldrb	r3, [r7, #3]
 800f73e:	f003 0302 	and.w	r3, r3, #2
 800f742:	2b00      	cmp	r3, #0
 800f744:	d104      	bne.n	800f750 <tcp_enqueue_flags+0x148>
 800f746:	78fb      	ldrb	r3, [r7, #3]
 800f748:	f003 0301 	and.w	r3, r3, #1
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d004      	beq.n	800f75a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f754:	1c5a      	adds	r2, r3, #1
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f75a:	78fb      	ldrb	r3, [r7, #3]
 800f75c:	f003 0301 	and.w	r3, r3, #1
 800f760:	2b00      	cmp	r3, #0
 800f762:	d006      	beq.n	800f772 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	8b5b      	ldrh	r3, [r3, #26]
 800f768:	f043 0320 	orr.w	r3, r3, #32
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	4618      	mov	r0, r3
 800f778:	f7fb fc42 	bl	800b000 <pbuf_clen>
 800f77c:	4603      	mov	r3, r0
 800f77e:	461a      	mov	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f786:	4413      	add	r3, r2
 800f788:	b29a      	uxth	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00e      	beq.n	800f7b8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d10a      	bne.n	800f7b8 <tcp_enqueue_flags+0x1b0>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d106      	bne.n	800f7b8 <tcp_enqueue_flags+0x1b0>
 800f7aa:	4b06      	ldr	r3, [pc, #24]	; (800f7c4 <tcp_enqueue_flags+0x1bc>)
 800f7ac:	f240 4265 	movw	r2, #1125	; 0x465
 800f7b0:	490b      	ldr	r1, [pc, #44]	; (800f7e0 <tcp_enqueue_flags+0x1d8>)
 800f7b2:	4806      	ldr	r0, [pc, #24]	; (800f7cc <tcp_enqueue_flags+0x1c4>)
 800f7b4:	f003 fee6 	bl	8013584 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f7b8:	2300      	movs	r3, #0
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3720      	adds	r7, #32
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	08015e64 	.word	0x08015e64
 800f7c8:	08016288 	.word	0x08016288
 800f7cc:	08015eb8 	.word	0x08015eb8
 800f7d0:	080162e0 	.word	0x080162e0
 800f7d4:	08016300 	.word	0x08016300
 800f7d8:	0801633c 	.word	0x0801633c
 800f7dc:	08016354 	.word	0x08016354
 800f7e0:	08016380 	.word	0x08016380

0800f7e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f7e4:	b5b0      	push	{r4, r5, r7, lr}
 800f7e6:	b08a      	sub	sp, #40	; 0x28
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <tcp_output+0x1c>
 800f7f2:	4b8a      	ldr	r3, [pc, #552]	; (800fa1c <tcp_output+0x238>)
 800f7f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f7f8:	4989      	ldr	r1, [pc, #548]	; (800fa20 <tcp_output+0x23c>)
 800f7fa:	488a      	ldr	r0, [pc, #552]	; (800fa24 <tcp_output+0x240>)
 800f7fc:	f003 fec2 	bl	8013584 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	7d1b      	ldrb	r3, [r3, #20]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d106      	bne.n	800f816 <tcp_output+0x32>
 800f808:	4b84      	ldr	r3, [pc, #528]	; (800fa1c <tcp_output+0x238>)
 800f80a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f80e:	4986      	ldr	r1, [pc, #536]	; (800fa28 <tcp_output+0x244>)
 800f810:	4884      	ldr	r0, [pc, #528]	; (800fa24 <tcp_output+0x240>)
 800f812:	f003 feb7 	bl	8013584 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f816:	4b85      	ldr	r3, [pc, #532]	; (800fa2c <tcp_output+0x248>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d101      	bne.n	800f824 <tcp_output+0x40>
    return ERR_OK;
 800f820:	2300      	movs	r3, #0
 800f822:	e1ce      	b.n	800fbc2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f830:	4293      	cmp	r3, r2
 800f832:	bf28      	it	cs
 800f834:	4613      	movcs	r3, r2
 800f836:	b29b      	uxth	r3, r3
 800f838:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f83e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	2b00      	cmp	r3, #0
 800f844:	d10b      	bne.n	800f85e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	8b5b      	ldrh	r3, [r3, #26]
 800f84a:	f003 0302 	and.w	r3, r3, #2
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f000 81aa 	beq.w	800fba8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fdcb 	bl	80103f0 <tcp_send_empty_ack>
 800f85a:	4603      	mov	r3, r0
 800f85c:	e1b1      	b.n	800fbc2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f85e:	6879      	ldr	r1, [r7, #4]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3304      	adds	r3, #4
 800f864:	461a      	mov	r2, r3
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7ff fc7c 	bl	800f164 <tcp_route>
 800f86c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d102      	bne.n	800f87a <tcp_output+0x96>
    return ERR_RTE;
 800f874:	f06f 0303 	mvn.w	r3, #3
 800f878:	e1a3      	b.n	800fbc2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d003      	beq.n	800f888 <tcp_output+0xa4>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d111      	bne.n	800f8ac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <tcp_output+0xb0>
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	3304      	adds	r3, #4
 800f892:	e000      	b.n	800f896 <tcp_output+0xb2>
 800f894:	2300      	movs	r3, #0
 800f896:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d102      	bne.n	800f8a4 <tcp_output+0xc0>
      return ERR_RTE;
 800f89e:	f06f 0303 	mvn.w	r3, #3
 800f8a2:	e18e      	b.n	800fbc2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f9 ff29 	bl	800970a <lwip_htonl>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8c2:	8912      	ldrh	r2, [r2, #8]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	69ba      	ldr	r2, [r7, #24]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d227      	bcs.n	800f91c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d114      	bne.n	800f904 <tcp_output+0x120>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d110      	bne.n	800f904 <tcp_output+0x120>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d10b      	bne.n	800f904 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	8b5b      	ldrh	r3, [r3, #26]
 800f908:	f003 0302 	and.w	r3, r3, #2
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 814d 	beq.w	800fbac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fd6c 	bl	80103f0 <tcp_send_empty_ack>
 800f918:	4603      	mov	r3, r0
 800f91a:	e152      	b.n	800fbc2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f928:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 811c 	beq.w	800fb6a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f932:	e002      	b.n	800f93a <tcp_output+0x156>
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	623b      	str	r3, [r7, #32]
 800f93a:	6a3b      	ldr	r3, [r7, #32]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1f8      	bne.n	800f934 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f942:	e112      	b.n	800fb6a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	899b      	ldrh	r3, [r3, #12]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7f9 fec7 	bl	80096e0 <lwip_htons>
 800f952:	4603      	mov	r3, r0
 800f954:	b2db      	uxtb	r3, r3
 800f956:	f003 0304 	and.w	r3, r3, #4
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d006      	beq.n	800f96c <tcp_output+0x188>
 800f95e:	4b2f      	ldr	r3, [pc, #188]	; (800fa1c <tcp_output+0x238>)
 800f960:	f240 5236 	movw	r2, #1334	; 0x536
 800f964:	4932      	ldr	r1, [pc, #200]	; (800fa30 <tcp_output+0x24c>)
 800f966:	482f      	ldr	r0, [pc, #188]	; (800fa24 <tcp_output+0x240>)
 800f968:	f003 fe0c 	bl	8013584 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f970:	2b00      	cmp	r3, #0
 800f972:	d01f      	beq.n	800f9b4 <tcp_output+0x1d0>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	8b5b      	ldrh	r3, [r3, #26]
 800f978:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d119      	bne.n	800f9b4 <tcp_output+0x1d0>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00b      	beq.n	800f9a0 <tcp_output+0x1bc>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d110      	bne.n	800f9b4 <tcp_output+0x1d0>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f996:	891a      	ldrh	r2, [r3, #8]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d209      	bcs.n	800f9b4 <tcp_output+0x1d0>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d004      	beq.n	800f9b4 <tcp_output+0x1d0>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9b0:	2b08      	cmp	r3, #8
 800f9b2:	d901      	bls.n	800f9b8 <tcp_output+0x1d4>
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	e000      	b.n	800f9ba <tcp_output+0x1d6>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d106      	bne.n	800f9cc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	8b5b      	ldrh	r3, [r3, #26]
 800f9c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f000 80e4 	beq.w	800fb94 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	7d1b      	ldrb	r3, [r3, #20]
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d00d      	beq.n	800f9f0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	899b      	ldrh	r3, [r3, #12]
 800f9da:	b29c      	uxth	r4, r3
 800f9dc:	2010      	movs	r0, #16
 800f9de:	f7f9 fe7f 	bl	80096e0 <lwip_htons>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	4322      	orrs	r2, r4
 800f9ec:	b292      	uxth	r2, r2
 800f9ee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	6879      	ldr	r1, [r7, #4]
 800f9f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9f6:	f000 f909 	bl	800fc0c <tcp_output_segment>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d016      	beq.n	800fa34 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	8b5b      	ldrh	r3, [r3, #26]
 800fa0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	835a      	strh	r2, [r3, #26]
      return err;
 800fa14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa18:	e0d3      	b.n	800fbc2 <tcp_output+0x3de>
 800fa1a:	bf00      	nop
 800fa1c:	08015e64 	.word	0x08015e64
 800fa20:	080163a8 	.word	0x080163a8
 800fa24:	08015eb8 	.word	0x08015eb8
 800fa28:	080163c0 	.word	0x080163c0
 800fa2c:	200105b8 	.word	0x200105b8
 800fa30:	080163e8 	.word	0x080163e8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	7d1b      	ldrb	r3, [r3, #20]
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d006      	beq.n	800fa52 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	8b5b      	ldrh	r3, [r3, #26]
 800fa48:	f023 0303 	bic.w	r3, r3, #3
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f9 fe56 	bl	800970a <lwip_htonl>
 800fa5e:	4604      	mov	r4, r0
 800fa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa62:	891b      	ldrh	r3, [r3, #8]
 800fa64:	461d      	mov	r5, r3
 800fa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	899b      	ldrh	r3, [r3, #12]
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7f9 fe36 	bl	80096e0 <lwip_htons>
 800fa74:	4603      	mov	r3, r0
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	f003 0303 	and.w	r3, r3, #3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d001      	beq.n	800fa84 <tcp_output+0x2a0>
 800fa80:	2301      	movs	r3, #1
 800fa82:	e000      	b.n	800fa86 <tcp_output+0x2a2>
 800fa84:	2300      	movs	r3, #0
 800fa86:	442b      	add	r3, r5
 800fa88:	4423      	add	r3, r4
 800fa8a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	1ad3      	subs	r3, r2, r3
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	da02      	bge.n	800fa9e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	891b      	ldrh	r3, [r3, #8]
 800faa2:	461c      	mov	r4, r3
 800faa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	899b      	ldrh	r3, [r3, #12]
 800faaa:	b29b      	uxth	r3, r3
 800faac:	4618      	mov	r0, r3
 800faae:	f7f9 fe17 	bl	80096e0 <lwip_htons>
 800fab2:	4603      	mov	r3, r0
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	f003 0303 	and.w	r3, r3, #3
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <tcp_output+0x2de>
 800fabe:	2301      	movs	r3, #1
 800fac0:	e000      	b.n	800fac4 <tcp_output+0x2e0>
 800fac2:	2300      	movs	r3, #0
 800fac4:	4423      	add	r3, r4
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d049      	beq.n	800fb5e <tcp_output+0x37a>
      seg->next = NULL;
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	2200      	movs	r2, #0
 800face:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d105      	bne.n	800fae4 <tcp_output+0x300>
        pcb->unacked = seg;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fadc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae0:	623b      	str	r3, [r7, #32]
 800fae2:	e03f      	b.n	800fb64 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	685b      	ldr	r3, [r3, #4]
 800faea:	4618      	mov	r0, r3
 800faec:	f7f9 fe0d 	bl	800970a <lwip_htonl>
 800faf0:	4604      	mov	r4, r0
 800faf2:	6a3b      	ldr	r3, [r7, #32]
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7f9 fe06 	bl	800970a <lwip_htonl>
 800fafe:	4603      	mov	r3, r0
 800fb00:	1ae3      	subs	r3, r4, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	da24      	bge.n	800fb50 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3370      	adds	r3, #112	; 0x70
 800fb0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fb0c:	e002      	b.n	800fb14 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d011      	beq.n	800fb40 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7f9 fdf0 	bl	800970a <lwip_htonl>
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7f9 fde9 	bl	800970a <lwip_htonl>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	dbe6      	blt.n	800fb0e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb4c:	601a      	str	r2, [r3, #0]
 800fb4e:	e009      	b.n	800fb64 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fb50:	6a3b      	ldr	r3, [r7, #32]
 800fb52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb54:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	623b      	str	r3, [r7, #32]
 800fb5c:	e002      	b.n	800fb64 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fb5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb60:	f7fc fc3f 	bl	800c3e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb68:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d012      	beq.n	800fb96 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7f9 fdc7 	bl	800970a <lwip_htonl>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb86:	8912      	ldrh	r2, [r2, #8]
 800fb88:	4413      	add	r3, r2
  while (seg != NULL &&
 800fb8a:	69ba      	ldr	r2, [r7, #24]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	f4bf aed9 	bcs.w	800f944 <tcp_output+0x160>
 800fb92:	e000      	b.n	800fb96 <tcp_output+0x3b2>
      break;
 800fb94:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d108      	bne.n	800fbb0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fba6:	e004      	b.n	800fbb2 <tcp_output+0x3ce>
    goto output_done;
 800fba8:	bf00      	nop
 800fbaa:	e002      	b.n	800fbb2 <tcp_output+0x3ce>
    goto output_done;
 800fbac:	bf00      	nop
 800fbae:	e000      	b.n	800fbb2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fbb0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8b5b      	ldrh	r3, [r3, #26]
 800fbb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fbc0:	2300      	movs	r3, #0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3728      	adds	r7, #40	; 0x28
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bdb0      	pop	{r4, r5, r7, pc}
 800fbca:	bf00      	nop

0800fbcc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d106      	bne.n	800fbe8 <tcp_output_segment_busy+0x1c>
 800fbda:	4b09      	ldr	r3, [pc, #36]	; (800fc00 <tcp_output_segment_busy+0x34>)
 800fbdc:	f240 529a 	movw	r2, #1434	; 0x59a
 800fbe0:	4908      	ldr	r1, [pc, #32]	; (800fc04 <tcp_output_segment_busy+0x38>)
 800fbe2:	4809      	ldr	r0, [pc, #36]	; (800fc08 <tcp_output_segment_busy+0x3c>)
 800fbe4:	f003 fcce 	bl	8013584 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	7b9b      	ldrb	r3, [r3, #14]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d001      	beq.n	800fbf6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	e000      	b.n	800fbf8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	08015e64 	.word	0x08015e64
 800fc04:	08016400 	.word	0x08016400
 800fc08:	08015eb8 	.word	0x08015eb8

0800fc0c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fc0c:	b5b0      	push	{r4, r5, r7, lr}
 800fc0e:	b08c      	sub	sp, #48	; 0x30
 800fc10:	af04      	add	r7, sp, #16
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d106      	bne.n	800fc2c <tcp_output_segment+0x20>
 800fc1e:	4b63      	ldr	r3, [pc, #396]	; (800fdac <tcp_output_segment+0x1a0>)
 800fc20:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800fc24:	4962      	ldr	r1, [pc, #392]	; (800fdb0 <tcp_output_segment+0x1a4>)
 800fc26:	4863      	ldr	r0, [pc, #396]	; (800fdb4 <tcp_output_segment+0x1a8>)
 800fc28:	f003 fcac 	bl	8013584 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d106      	bne.n	800fc40 <tcp_output_segment+0x34>
 800fc32:	4b5e      	ldr	r3, [pc, #376]	; (800fdac <tcp_output_segment+0x1a0>)
 800fc34:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fc38:	495f      	ldr	r1, [pc, #380]	; (800fdb8 <tcp_output_segment+0x1ac>)
 800fc3a:	485e      	ldr	r0, [pc, #376]	; (800fdb4 <tcp_output_segment+0x1a8>)
 800fc3c:	f003 fca2 	bl	8013584 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d106      	bne.n	800fc54 <tcp_output_segment+0x48>
 800fc46:	4b59      	ldr	r3, [pc, #356]	; (800fdac <tcp_output_segment+0x1a0>)
 800fc48:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800fc4c:	495b      	ldr	r1, [pc, #364]	; (800fdbc <tcp_output_segment+0x1b0>)
 800fc4e:	4859      	ldr	r0, [pc, #356]	; (800fdb4 <tcp_output_segment+0x1a8>)
 800fc50:	f003 fc98 	bl	8013584 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7ff ffb9 	bl	800fbcc <tcp_output_segment_busy>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d001      	beq.n	800fc64 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fc60:	2300      	movs	r3, #0
 800fc62:	e09f      	b.n	800fda4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	68dc      	ldr	r4, [r3, #12]
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	f7f9 fd4c 	bl	800970a <lwip_htonl>
 800fc72:	4603      	mov	r3, r0
 800fc74:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	68dc      	ldr	r4, [r3, #12]
 800fc7e:	4610      	mov	r0, r2
 800fc80:	f7f9 fd2e 	bl	80096e0 <lwip_htons>
 800fc84:	4603      	mov	r3, r0
 800fc86:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fc90:	441a      	add	r2, r3
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	3314      	adds	r3, #20
 800fc9c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	7a9b      	ldrb	r3, [r3, #10]
 800fca2:	f003 0301 	and.w	r3, r3, #1
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d015      	beq.n	800fcd6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	3304      	adds	r3, #4
 800fcae:	461a      	mov	r2, r3
 800fcb0:	6879      	ldr	r1, [r7, #4]
 800fcb2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fcb6:	f7fc fe8b 	bl	800c9d0 <tcp_eff_send_mss_netif>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fcbe:	8b7b      	ldrh	r3, [r7, #26]
 800fcc0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7f9 fd20 	bl	800970a <lwip_htonl>
 800fcca:	4602      	mov	r2, r0
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	da02      	bge.n	800fce6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	2200      	movs	r2, #0
 800fce4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d10c      	bne.n	800fd08 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fcee:	4b34      	ldr	r3, [pc, #208]	; (800fdc0 <tcp_output_segment+0x1b4>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f9 fd04 	bl	800970a <lwip_htonl>
 800fd02:	4602      	mov	r2, r0
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	68da      	ldr	r2, [r3, #12]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	8959      	ldrh	r1, [r3, #10]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	8b3a      	ldrh	r2, [r7, #24]
 800fd22:	1a8a      	subs	r2, r1, r2
 800fd24:	b292      	uxth	r2, r2
 800fd26:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	8919      	ldrh	r1, [r3, #8]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	8b3a      	ldrh	r2, [r7, #24]
 800fd34:	1a8a      	subs	r2, r1, r2
 800fd36:	b292      	uxth	r2, r2
 800fd38:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	68d2      	ldr	r2, [r2, #12]
 800fd42:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	741a      	strb	r2, [r3, #16]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	f103 0214 	add.w	r2, r3, #20
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	7a9b      	ldrb	r3, [r3, #10]
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	f003 0304 	and.w	r3, r3, #4
 800fd62:	4413      	add	r3, r2
 800fd64:	69fa      	ldr	r2, [r7, #28]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d006      	beq.n	800fd78 <tcp_output_segment+0x16c>
 800fd6a:	4b10      	ldr	r3, [pc, #64]	; (800fdac <tcp_output_segment+0x1a0>)
 800fd6c:	f240 621c 	movw	r2, #1564	; 0x61c
 800fd70:	4914      	ldr	r1, [pc, #80]	; (800fdc4 <tcp_output_segment+0x1b8>)
 800fd72:	4810      	ldr	r0, [pc, #64]	; (800fdb4 <tcp_output_segment+0x1a8>)
 800fd74:	f003 fc06 	bl	8013584 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6858      	ldr	r0, [r3, #4]
 800fd7c:	68b9      	ldr	r1, [r7, #8]
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	1d1c      	adds	r4, r3, #4
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	7add      	ldrb	r5, [r3, #11]
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	7a9b      	ldrb	r3, [r3, #10]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	9202      	str	r2, [sp, #8]
 800fd8e:	2206      	movs	r2, #6
 800fd90:	9201      	str	r2, [sp, #4]
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	462b      	mov	r3, r5
 800fd96:	4622      	mov	r2, r4
 800fd98:	f002 fa66 	bl	8012268 <ip4_output_if>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fda0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3720      	adds	r7, #32
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bdb0      	pop	{r4, r5, r7, pc}
 800fdac:	08015e64 	.word	0x08015e64
 800fdb0:	08016428 	.word	0x08016428
 800fdb4:	08015eb8 	.word	0x08015eb8
 800fdb8:	08016448 	.word	0x08016448
 800fdbc:	08016468 	.word	0x08016468
 800fdc0:	2001056c 	.word	0x2001056c
 800fdc4:	0801648c 	.word	0x0801648c

0800fdc8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fdc8:	b5b0      	push	{r4, r5, r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d106      	bne.n	800fde4 <tcp_rexmit_rto_prepare+0x1c>
 800fdd6:	4b31      	ldr	r3, [pc, #196]	; (800fe9c <tcp_rexmit_rto_prepare+0xd4>)
 800fdd8:	f240 6263 	movw	r2, #1635	; 0x663
 800fddc:	4930      	ldr	r1, [pc, #192]	; (800fea0 <tcp_rexmit_rto_prepare+0xd8>)
 800fdde:	4831      	ldr	r0, [pc, #196]	; (800fea4 <tcp_rexmit_rto_prepare+0xdc>)
 800fde0:	f003 fbd0 	bl	8013584 <iprintf>

  if (pcb->unacked == NULL) {
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d102      	bne.n	800fdf2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fdec:	f06f 0305 	mvn.w	r3, #5
 800fdf0:	e050      	b.n	800fe94 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdf6:	60fb      	str	r3, [r7, #12]
 800fdf8:	e00b      	b.n	800fe12 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f7ff fee6 	bl	800fbcc <tcp_output_segment_busy>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d002      	beq.n	800fe0c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fe06:	f06f 0305 	mvn.w	r3, #5
 800fe0a:	e043      	b.n	800fe94 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	60fb      	str	r3, [r7, #12]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1ef      	bne.n	800fdfa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7ff fed6 	bl	800fbcc <tcp_output_segment_busy>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fe26:	f06f 0305 	mvn.w	r3, #5
 800fe2a:	e033      	b.n	800fe94 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	8b5b      	ldrh	r3, [r3, #26]
 800fe46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7f9 fc57 	bl	800970a <lwip_htonl>
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	891b      	ldrh	r3, [r3, #8]
 800fe62:	461d      	mov	r5, r3
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	899b      	ldrh	r3, [r3, #12]
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7f9 fc37 	bl	80096e0 <lwip_htons>
 800fe72:	4603      	mov	r3, r0
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	f003 0303 	and.w	r3, r3, #3
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d001      	beq.n	800fe82 <tcp_rexmit_rto_prepare+0xba>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e000      	b.n	800fe84 <tcp_rexmit_rto_prepare+0xbc>
 800fe82:	2300      	movs	r3, #0
 800fe84:	442b      	add	r3, r5
 800fe86:	18e2      	adds	r2, r4, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe9c:	08015e64 	.word	0x08015e64
 800fea0:	080164a0 	.word	0x080164a0
 800fea4:	08015eb8 	.word	0x08015eb8

0800fea8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d106      	bne.n	800fec4 <tcp_rexmit_rto_commit+0x1c>
 800feb6:	4b0d      	ldr	r3, [pc, #52]	; (800feec <tcp_rexmit_rto_commit+0x44>)
 800feb8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800febc:	490c      	ldr	r1, [pc, #48]	; (800fef0 <tcp_rexmit_rto_commit+0x48>)
 800febe:	480d      	ldr	r0, [pc, #52]	; (800fef4 <tcp_rexmit_rto_commit+0x4c>)
 800fec0:	f003 fb60 	bl	8013584 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800feca:	2bff      	cmp	r3, #255	; 0xff
 800fecc:	d007      	beq.n	800fede <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fed4:	3301      	adds	r3, #1
 800fed6:	b2da      	uxtb	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7ff fc80 	bl	800f7e4 <tcp_output>
}
 800fee4:	bf00      	nop
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	08015e64 	.word	0x08015e64
 800fef0:	080164c4 	.word	0x080164c4
 800fef4:	08015eb8 	.word	0x08015eb8

0800fef8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d106      	bne.n	800ff14 <tcp_rexmit_rto+0x1c>
 800ff06:	4b0a      	ldr	r3, [pc, #40]	; (800ff30 <tcp_rexmit_rto+0x38>)
 800ff08:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ff0c:	4909      	ldr	r1, [pc, #36]	; (800ff34 <tcp_rexmit_rto+0x3c>)
 800ff0e:	480a      	ldr	r0, [pc, #40]	; (800ff38 <tcp_rexmit_rto+0x40>)
 800ff10:	f003 fb38 	bl	8013584 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7ff ff57 	bl	800fdc8 <tcp_rexmit_rto_prepare>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d102      	bne.n	800ff26 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f7ff ffc1 	bl	800fea8 <tcp_rexmit_rto_commit>
  }
}
 800ff26:	bf00      	nop
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	08015e64 	.word	0x08015e64
 800ff34:	080164e8 	.word	0x080164e8
 800ff38:	08015eb8 	.word	0x08015eb8

0800ff3c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ff3c:	b590      	push	{r4, r7, lr}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <tcp_rexmit+0x1c>
 800ff4a:	4b2f      	ldr	r3, [pc, #188]	; (8010008 <tcp_rexmit+0xcc>)
 800ff4c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ff50:	492e      	ldr	r1, [pc, #184]	; (801000c <tcp_rexmit+0xd0>)
 800ff52:	482f      	ldr	r0, [pc, #188]	; (8010010 <tcp_rexmit+0xd4>)
 800ff54:	f003 fb16 	bl	8013584 <iprintf>

  if (pcb->unacked == NULL) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d102      	bne.n	800ff66 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ff60:	f06f 0305 	mvn.w	r3, #5
 800ff64:	e04c      	b.n	8010000 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff6a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ff6c:	68b8      	ldr	r0, [r7, #8]
 800ff6e:	f7ff fe2d 	bl	800fbcc <tcp_output_segment_busy>
 800ff72:	4603      	mov	r3, r0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d002      	beq.n	800ff7e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ff78:	f06f 0305 	mvn.w	r3, #5
 800ff7c:	e040      	b.n	8010000 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	336c      	adds	r3, #108	; 0x6c
 800ff8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ff8c:	e002      	b.n	800ff94 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d011      	beq.n	800ffc0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7f9 fbb0 	bl	800970a <lwip_htonl>
 800ffaa:	4604      	mov	r4, r0
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7f9 fba9 	bl	800970a <lwip_htonl>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	dbe6      	blt.n	800ff8e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	68ba      	ldr	r2, [r7, #8]
 800ffcc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d103      	bne.n	800ffde <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffe4:	2bff      	cmp	r3, #255	; 0xff
 800ffe6:	d007      	beq.n	800fff8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffee:	3301      	adds	r3, #1
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3714      	adds	r7, #20
 8010004:	46bd      	mov	sp, r7
 8010006:	bd90      	pop	{r4, r7, pc}
 8010008:	08015e64 	.word	0x08015e64
 801000c:	08016504 	.word	0x08016504
 8010010:	08015eb8 	.word	0x08015eb8

08010014 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d106      	bne.n	8010030 <tcp_rexmit_fast+0x1c>
 8010022:	4b2a      	ldr	r3, [pc, #168]	; (80100cc <tcp_rexmit_fast+0xb8>)
 8010024:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010028:	4929      	ldr	r1, [pc, #164]	; (80100d0 <tcp_rexmit_fast+0xbc>)
 801002a:	482a      	ldr	r0, [pc, #168]	; (80100d4 <tcp_rexmit_fast+0xc0>)
 801002c:	f003 faaa 	bl	8013584 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010034:	2b00      	cmp	r3, #0
 8010036:	d045      	beq.n	80100c4 <tcp_rexmit_fast+0xb0>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	8b5b      	ldrh	r3, [r3, #26]
 801003c:	f003 0304 	and.w	r3, r3, #4
 8010040:	2b00      	cmp	r3, #0
 8010042:	d13f      	bne.n	80100c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff ff79 	bl	800ff3c <tcp_rexmit>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d139      	bne.n	80100c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801005c:	4293      	cmp	r3, r2
 801005e:	bf28      	it	cs
 8010060:	4613      	movcs	r3, r2
 8010062:	b29b      	uxth	r3, r3
 8010064:	2b00      	cmp	r3, #0
 8010066:	da00      	bge.n	801006a <tcp_rexmit_fast+0x56>
 8010068:	3301      	adds	r3, #1
 801006a:	105b      	asrs	r3, r3, #1
 801006c:	b29a      	uxth	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801007a:	461a      	mov	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	429a      	cmp	r2, r3
 8010084:	d206      	bcs.n	8010094 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801008a:	005b      	lsls	r3, r3, #1
 801008c:	b29a      	uxth	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801009e:	4619      	mov	r1, r3
 80100a0:	0049      	lsls	r1, r1, #1
 80100a2:	440b      	add	r3, r1
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	4413      	add	r3, r2
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	8b5b      	ldrh	r3, [r3, #26]
 80100b4:	f043 0304 	orr.w	r3, r3, #4
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2200      	movs	r2, #0
 80100c2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80100c4:	bf00      	nop
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	08015e64 	.word	0x08015e64
 80100d0:	0801651c 	.word	0x0801651c
 80100d4:	08015eb8 	.word	0x08015eb8

080100d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	607b      	str	r3, [r7, #4]
 80100e2:	460b      	mov	r3, r1
 80100e4:	817b      	strh	r3, [r7, #10]
 80100e6:	4613      	mov	r3, r2
 80100e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80100ea:	897a      	ldrh	r2, [r7, #10]
 80100ec:	893b      	ldrh	r3, [r7, #8]
 80100ee:	4413      	add	r3, r2
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	3314      	adds	r3, #20
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100fa:	4619      	mov	r1, r3
 80100fc:	2022      	movs	r0, #34	; 0x22
 80100fe:	f7fa fc0d 	bl	800a91c <pbuf_alloc>
 8010102:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d04d      	beq.n	80101a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801010a:	897b      	ldrh	r3, [r7, #10]
 801010c:	3313      	adds	r3, #19
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	8952      	ldrh	r2, [r2, #10]
 8010112:	4293      	cmp	r3, r2
 8010114:	db06      	blt.n	8010124 <tcp_output_alloc_header_common+0x4c>
 8010116:	4b26      	ldr	r3, [pc, #152]	; (80101b0 <tcp_output_alloc_header_common+0xd8>)
 8010118:	f240 7223 	movw	r2, #1827	; 0x723
 801011c:	4925      	ldr	r1, [pc, #148]	; (80101b4 <tcp_output_alloc_header_common+0xdc>)
 801011e:	4826      	ldr	r0, [pc, #152]	; (80101b8 <tcp_output_alloc_header_common+0xe0>)
 8010120:	f003 fa30 	bl	8013584 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801012a:	8c3b      	ldrh	r3, [r7, #32]
 801012c:	4618      	mov	r0, r3
 801012e:	f7f9 fad7 	bl	80096e0 <lwip_htons>
 8010132:	4603      	mov	r3, r0
 8010134:	461a      	mov	r2, r3
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801013a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801013c:	4618      	mov	r0, r3
 801013e:	f7f9 facf 	bl	80096e0 <lwip_htons>
 8010142:	4603      	mov	r3, r0
 8010144:	461a      	mov	r2, r3
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7f9 fada 	bl	800970a <lwip_htonl>
 8010156:	4602      	mov	r2, r0
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801015c:	897b      	ldrh	r3, [r7, #10]
 801015e:	089b      	lsrs	r3, r3, #2
 8010160:	b29b      	uxth	r3, r3
 8010162:	3305      	adds	r3, #5
 8010164:	b29b      	uxth	r3, r3
 8010166:	031b      	lsls	r3, r3, #12
 8010168:	b29a      	uxth	r2, r3
 801016a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801016e:	b29b      	uxth	r3, r3
 8010170:	4313      	orrs	r3, r2
 8010172:	b29b      	uxth	r3, r3
 8010174:	4618      	mov	r0, r3
 8010176:	f7f9 fab3 	bl	80096e0 <lwip_htons>
 801017a:	4603      	mov	r3, r0
 801017c:	461a      	mov	r2, r3
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010182:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010184:	4618      	mov	r0, r3
 8010186:	f7f9 faab 	bl	80096e0 <lwip_htons>
 801018a:	4603      	mov	r3, r0
 801018c:	461a      	mov	r2, r3
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	2200      	movs	r2, #0
 8010196:	741a      	strb	r2, [r3, #16]
 8010198:	2200      	movs	r2, #0
 801019a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	2200      	movs	r2, #0
 80101a0:	749a      	strb	r2, [r3, #18]
 80101a2:	2200      	movs	r2, #0
 80101a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80101a6:	697b      	ldr	r3, [r7, #20]
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3718      	adds	r7, #24
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	08015e64 	.word	0x08015e64
 80101b4:	0801653c 	.word	0x0801653c
 80101b8:	08015eb8 	.word	0x08015eb8

080101bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80101bc:	b5b0      	push	{r4, r5, r7, lr}
 80101be:	b08a      	sub	sp, #40	; 0x28
 80101c0:	af04      	add	r7, sp, #16
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	607b      	str	r3, [r7, #4]
 80101c6:	460b      	mov	r3, r1
 80101c8:	817b      	strh	r3, [r7, #10]
 80101ca:	4613      	mov	r3, r2
 80101cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d106      	bne.n	80101e2 <tcp_output_alloc_header+0x26>
 80101d4:	4b15      	ldr	r3, [pc, #84]	; (801022c <tcp_output_alloc_header+0x70>)
 80101d6:	f240 7242 	movw	r2, #1858	; 0x742
 80101da:	4915      	ldr	r1, [pc, #84]	; (8010230 <tcp_output_alloc_header+0x74>)
 80101dc:	4815      	ldr	r0, [pc, #84]	; (8010234 <tcp_output_alloc_header+0x78>)
 80101de:	f003 f9d1 	bl	8013584 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	8adb      	ldrh	r3, [r3, #22]
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	8b12      	ldrh	r2, [r2, #24]
 80101ee:	68f9      	ldr	r1, [r7, #12]
 80101f0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80101f2:	893d      	ldrh	r5, [r7, #8]
 80101f4:	897c      	ldrh	r4, [r7, #10]
 80101f6:	9103      	str	r1, [sp, #12]
 80101f8:	2110      	movs	r1, #16
 80101fa:	9102      	str	r1, [sp, #8]
 80101fc:	9201      	str	r2, [sp, #4]
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	462a      	mov	r2, r5
 8010204:	4621      	mov	r1, r4
 8010206:	f7ff ff67 	bl	80100d8 <tcp_output_alloc_header_common>
 801020a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d006      	beq.n	8010220 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801021a:	441a      	add	r2, r3
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010220:	697b      	ldr	r3, [r7, #20]
}
 8010222:	4618      	mov	r0, r3
 8010224:	3718      	adds	r7, #24
 8010226:	46bd      	mov	sp, r7
 8010228:	bdb0      	pop	{r4, r5, r7, pc}
 801022a:	bf00      	nop
 801022c:	08015e64 	.word	0x08015e64
 8010230:	0801656c 	.word	0x0801656c
 8010234:	08015eb8 	.word	0x08015eb8

08010238 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b088      	sub	sp, #32
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	4611      	mov	r1, r2
 8010244:	461a      	mov	r2, r3
 8010246:	460b      	mov	r3, r1
 8010248:	71fb      	strb	r3, [r7, #7]
 801024a:	4613      	mov	r3, r2
 801024c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d106      	bne.n	8010266 <tcp_output_fill_options+0x2e>
 8010258:	4b13      	ldr	r3, [pc, #76]	; (80102a8 <tcp_output_fill_options+0x70>)
 801025a:	f240 7256 	movw	r2, #1878	; 0x756
 801025e:	4913      	ldr	r1, [pc, #76]	; (80102ac <tcp_output_fill_options+0x74>)
 8010260:	4813      	ldr	r0, [pc, #76]	; (80102b0 <tcp_output_fill_options+0x78>)
 8010262:	f003 f98f 	bl	8013584 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	3314      	adds	r3, #20
 8010270:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	f103 0214 	add.w	r2, r3, #20
 8010278:	8bfb      	ldrh	r3, [r7, #30]
 801027a:	009b      	lsls	r3, r3, #2
 801027c:	4619      	mov	r1, r3
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	f003 0304 	and.w	r3, r3, #4
 8010286:	440b      	add	r3, r1
 8010288:	4413      	add	r3, r2
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	429a      	cmp	r2, r3
 801028e:	d006      	beq.n	801029e <tcp_output_fill_options+0x66>
 8010290:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <tcp_output_fill_options+0x70>)
 8010292:	f240 7275 	movw	r2, #1909	; 0x775
 8010296:	4907      	ldr	r1, [pc, #28]	; (80102b4 <tcp_output_fill_options+0x7c>)
 8010298:	4805      	ldr	r0, [pc, #20]	; (80102b0 <tcp_output_fill_options+0x78>)
 801029a:	f003 f973 	bl	8013584 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801029e:	bf00      	nop
 80102a0:	3720      	adds	r7, #32
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	08015e64 	.word	0x08015e64
 80102ac:	08016594 	.word	0x08016594
 80102b0:	08015eb8 	.word	0x08015eb8
 80102b4:	0801648c 	.word	0x0801648c

080102b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b08a      	sub	sp, #40	; 0x28
 80102bc:	af04      	add	r7, sp, #16
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
 80102c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d106      	bne.n	80102da <tcp_output_control_segment+0x22>
 80102cc:	4b1c      	ldr	r3, [pc, #112]	; (8010340 <tcp_output_control_segment+0x88>)
 80102ce:	f240 7287 	movw	r2, #1927	; 0x787
 80102d2:	491c      	ldr	r1, [pc, #112]	; (8010344 <tcp_output_control_segment+0x8c>)
 80102d4:	481c      	ldr	r0, [pc, #112]	; (8010348 <tcp_output_control_segment+0x90>)
 80102d6:	f003 f955 	bl	8013584 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80102da:	683a      	ldr	r2, [r7, #0]
 80102dc:	6879      	ldr	r1, [r7, #4]
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f7fe ff40 	bl	800f164 <tcp_route>
 80102e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d102      	bne.n	80102f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80102ec:	23fc      	movs	r3, #252	; 0xfc
 80102ee:	75fb      	strb	r3, [r7, #23]
 80102f0:	e01c      	b.n	801032c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d006      	beq.n	8010306 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	7adb      	ldrb	r3, [r3, #11]
 80102fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	7a9b      	ldrb	r3, [r3, #10]
 8010302:	757b      	strb	r3, [r7, #21]
 8010304:	e003      	b.n	801030e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010306:	23ff      	movs	r3, #255	; 0xff
 8010308:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801030a:	2300      	movs	r3, #0
 801030c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801030e:	7dba      	ldrb	r2, [r7, #22]
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	9302      	str	r3, [sp, #8]
 8010314:	2306      	movs	r3, #6
 8010316:	9301      	str	r3, [sp, #4]
 8010318:	7d7b      	ldrb	r3, [r7, #21]
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	4613      	mov	r3, r2
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	6879      	ldr	r1, [r7, #4]
 8010322:	68b8      	ldr	r0, [r7, #8]
 8010324:	f001 ffa0 	bl	8012268 <ip4_output_if>
 8010328:	4603      	mov	r3, r0
 801032a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801032c:	68b8      	ldr	r0, [r7, #8]
 801032e:	f7fa fdd9 	bl	800aee4 <pbuf_free>
  return err;
 8010332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	08015e64 	.word	0x08015e64
 8010344:	080165bc 	.word	0x080165bc
 8010348:	08015eb8 	.word	0x08015eb8

0801034c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801034c:	b590      	push	{r4, r7, lr}
 801034e:	b08b      	sub	sp, #44	; 0x2c
 8010350:	af04      	add	r7, sp, #16
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
 8010358:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d106      	bne.n	801036e <tcp_rst+0x22>
 8010360:	4b1f      	ldr	r3, [pc, #124]	; (80103e0 <tcp_rst+0x94>)
 8010362:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010366:	491f      	ldr	r1, [pc, #124]	; (80103e4 <tcp_rst+0x98>)
 8010368:	481f      	ldr	r0, [pc, #124]	; (80103e8 <tcp_rst+0x9c>)
 801036a:	f003 f90b 	bl	8013584 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801036e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010370:	2b00      	cmp	r3, #0
 8010372:	d106      	bne.n	8010382 <tcp_rst+0x36>
 8010374:	4b1a      	ldr	r3, [pc, #104]	; (80103e0 <tcp_rst+0x94>)
 8010376:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801037a:	491c      	ldr	r1, [pc, #112]	; (80103ec <tcp_rst+0xa0>)
 801037c:	481a      	ldr	r0, [pc, #104]	; (80103e8 <tcp_rst+0x9c>)
 801037e:	f003 f901 	bl	8013584 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010382:	2300      	movs	r3, #0
 8010384:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010386:	f246 0308 	movw	r3, #24584	; 0x6008
 801038a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801038c:	7dfb      	ldrb	r3, [r7, #23]
 801038e:	b29c      	uxth	r4, r3
 8010390:	68b8      	ldr	r0, [r7, #8]
 8010392:	f7f9 f9ba 	bl	800970a <lwip_htonl>
 8010396:	4602      	mov	r2, r0
 8010398:	8abb      	ldrh	r3, [r7, #20]
 801039a:	9303      	str	r3, [sp, #12]
 801039c:	2314      	movs	r3, #20
 801039e:	9302      	str	r3, [sp, #8]
 80103a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80103a2:	9301      	str	r3, [sp, #4]
 80103a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	4613      	mov	r3, r2
 80103aa:	2200      	movs	r2, #0
 80103ac:	4621      	mov	r1, r4
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7ff fe92 	bl	80100d8 <tcp_output_alloc_header_common>
 80103b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00c      	beq.n	80103d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80103bc:	7dfb      	ldrb	r3, [r7, #23]
 80103be:	2200      	movs	r2, #0
 80103c0:	6939      	ldr	r1, [r7, #16]
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f7ff ff38 	bl	8010238 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80103c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	6939      	ldr	r1, [r7, #16]
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f7ff ff72 	bl	80102b8 <tcp_output_control_segment>
 80103d4:	e000      	b.n	80103d8 <tcp_rst+0x8c>
    return;
 80103d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80103d8:	371c      	adds	r7, #28
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd90      	pop	{r4, r7, pc}
 80103de:	bf00      	nop
 80103e0:	08015e64 	.word	0x08015e64
 80103e4:	080165e8 	.word	0x080165e8
 80103e8:	08015eb8 	.word	0x08015eb8
 80103ec:	08016604 	.word	0x08016604

080103f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80103f0:	b590      	push	{r4, r7, lr}
 80103f2:	b087      	sub	sp, #28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80103f8:	2300      	movs	r3, #0
 80103fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80103fc:	2300      	movs	r3, #0
 80103fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <tcp_send_empty_ack+0x24>
 8010406:	4b28      	ldr	r3, [pc, #160]	; (80104a8 <tcp_send_empty_ack+0xb8>)
 8010408:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801040c:	4927      	ldr	r1, [pc, #156]	; (80104ac <tcp_send_empty_ack+0xbc>)
 801040e:	4828      	ldr	r0, [pc, #160]	; (80104b0 <tcp_send_empty_ack+0xc0>)
 8010410:	f003 f8b8 	bl	8013584 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010414:	7dfb      	ldrb	r3, [r7, #23]
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	b2db      	uxtb	r3, r3
 801041a:	f003 0304 	and.w	r3, r3, #4
 801041e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010420:	7d7b      	ldrb	r3, [r7, #21]
 8010422:	b29c      	uxth	r4, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010428:	4618      	mov	r0, r3
 801042a:	f7f9 f96e 	bl	800970a <lwip_htonl>
 801042e:	4603      	mov	r3, r0
 8010430:	2200      	movs	r2, #0
 8010432:	4621      	mov	r1, r4
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7ff fec1 	bl	80101bc <tcp_output_alloc_header>
 801043a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d109      	bne.n	8010456 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	8b5b      	ldrh	r3, [r3, #26]
 8010446:	f043 0303 	orr.w	r3, r3, #3
 801044a:	b29a      	uxth	r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010450:	f06f 0301 	mvn.w	r3, #1
 8010454:	e023      	b.n	801049e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010456:	7dbb      	ldrb	r3, [r7, #22]
 8010458:	7dfa      	ldrb	r2, [r7, #23]
 801045a:	6939      	ldr	r1, [r7, #16]
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7ff feeb 	bl	8010238 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3304      	adds	r3, #4
 8010468:	6939      	ldr	r1, [r7, #16]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7ff ff24 	bl	80102b8 <tcp_output_control_segment>
 8010470:	4603      	mov	r3, r0
 8010472:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d007      	beq.n	801048c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8b5b      	ldrh	r3, [r3, #26]
 8010480:	f043 0303 	orr.w	r3, r3, #3
 8010484:	b29a      	uxth	r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	835a      	strh	r2, [r3, #26]
 801048a:	e006      	b.n	801049a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	8b5b      	ldrh	r3, [r3, #26]
 8010490:	f023 0303 	bic.w	r3, r3, #3
 8010494:	b29a      	uxth	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801049a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	371c      	adds	r7, #28
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd90      	pop	{r4, r7, pc}
 80104a6:	bf00      	nop
 80104a8:	08015e64 	.word	0x08015e64
 80104ac:	08016620 	.word	0x08016620
 80104b0:	08015eb8 	.word	0x08015eb8

080104b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80104b4:	b590      	push	{r4, r7, lr}
 80104b6:	b087      	sub	sp, #28
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80104bc:	2300      	movs	r3, #0
 80104be:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d106      	bne.n	80104d4 <tcp_keepalive+0x20>
 80104c6:	4b18      	ldr	r3, [pc, #96]	; (8010528 <tcp_keepalive+0x74>)
 80104c8:	f640 0224 	movw	r2, #2084	; 0x824
 80104cc:	4917      	ldr	r1, [pc, #92]	; (801052c <tcp_keepalive+0x78>)
 80104ce:	4818      	ldr	r0, [pc, #96]	; (8010530 <tcp_keepalive+0x7c>)
 80104d0:	f003 f858 	bl	8013584 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80104d4:	7dfb      	ldrb	r3, [r7, #23]
 80104d6:	b29c      	uxth	r4, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104dc:	3b01      	subs	r3, #1
 80104de:	4618      	mov	r0, r3
 80104e0:	f7f9 f913 	bl	800970a <lwip_htonl>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2200      	movs	r2, #0
 80104e8:	4621      	mov	r1, r4
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f7ff fe66 	bl	80101bc <tcp_output_alloc_header>
 80104f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d102      	bne.n	80104fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80104f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104fc:	e010      	b.n	8010520 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80104fe:	7dfb      	ldrb	r3, [r7, #23]
 8010500:	2200      	movs	r2, #0
 8010502:	6939      	ldr	r1, [r7, #16]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff fe97 	bl	8010238 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	3304      	adds	r3, #4
 8010510:	6939      	ldr	r1, [r7, #16]
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f7ff fed0 	bl	80102b8 <tcp_output_control_segment>
 8010518:	4603      	mov	r3, r0
 801051a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801051c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010520:	4618      	mov	r0, r3
 8010522:	371c      	adds	r7, #28
 8010524:	46bd      	mov	sp, r7
 8010526:	bd90      	pop	{r4, r7, pc}
 8010528:	08015e64 	.word	0x08015e64
 801052c:	08016640 	.word	0x08016640
 8010530:	08015eb8 	.word	0x08015eb8

08010534 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010534:	b590      	push	{r4, r7, lr}
 8010536:	b08b      	sub	sp, #44	; 0x2c
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801053c:	2300      	movs	r3, #0
 801053e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d106      	bne.n	8010556 <tcp_zero_window_probe+0x22>
 8010548:	4b4c      	ldr	r3, [pc, #304]	; (801067c <tcp_zero_window_probe+0x148>)
 801054a:	f640 024f 	movw	r2, #2127	; 0x84f
 801054e:	494c      	ldr	r1, [pc, #304]	; (8010680 <tcp_zero_window_probe+0x14c>)
 8010550:	484c      	ldr	r0, [pc, #304]	; (8010684 <tcp_zero_window_probe+0x150>)
 8010552:	f003 f817 	bl	8013584 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801055a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801055c:	6a3b      	ldr	r3, [r7, #32]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d101      	bne.n	8010566 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010562:	2300      	movs	r3, #0
 8010564:	e086      	b.n	8010674 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801056c:	2bff      	cmp	r3, #255	; 0xff
 801056e:	d007      	beq.n	8010580 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010576:	3301      	adds	r3, #1
 8010578:	b2da      	uxtb	r2, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010580:	6a3b      	ldr	r3, [r7, #32]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	899b      	ldrh	r3, [r3, #12]
 8010586:	b29b      	uxth	r3, r3
 8010588:	4618      	mov	r0, r3
 801058a:	f7f9 f8a9 	bl	80096e0 <lwip_htons>
 801058e:	4603      	mov	r3, r0
 8010590:	b2db      	uxtb	r3, r3
 8010592:	f003 0301 	and.w	r3, r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	d005      	beq.n	80105a6 <tcp_zero_window_probe+0x72>
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	891b      	ldrh	r3, [r3, #8]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d101      	bne.n	80105a6 <tcp_zero_window_probe+0x72>
 80105a2:	2301      	movs	r3, #1
 80105a4:	e000      	b.n	80105a8 <tcp_zero_window_probe+0x74>
 80105a6:	2300      	movs	r3, #0
 80105a8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80105aa:	7ffb      	ldrb	r3, [r7, #31]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	bf0c      	ite	eq
 80105b0:	2301      	moveq	r3, #1
 80105b2:	2300      	movne	r3, #0
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80105b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105bc:	b299      	uxth	r1, r3
 80105be:	6a3b      	ldr	r3, [r7, #32]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	8bba      	ldrh	r2, [r7, #28]
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7ff fdf8 	bl	80101bc <tcp_output_alloc_header>
 80105cc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d102      	bne.n	80105da <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80105d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105d8:	e04c      	b.n	8010674 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80105e0:	7ffb      	ldrb	r3, [r7, #31]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d011      	beq.n	801060a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	899b      	ldrh	r3, [r3, #12]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	b21b      	sxth	r3, r3
 80105ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80105f2:	b21c      	sxth	r4, r3
 80105f4:	2011      	movs	r0, #17
 80105f6:	f7f9 f873 	bl	80096e0 <lwip_htons>
 80105fa:	4603      	mov	r3, r0
 80105fc:	b21b      	sxth	r3, r3
 80105fe:	4323      	orrs	r3, r4
 8010600:	b21b      	sxth	r3, r3
 8010602:	b29a      	uxth	r2, r3
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	819a      	strh	r2, [r3, #12]
 8010608:	e010      	b.n	801062c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	3314      	adds	r3, #20
 8010610:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010612:	6a3b      	ldr	r3, [r7, #32]
 8010614:	6858      	ldr	r0, [r3, #4]
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	891a      	ldrh	r2, [r3, #8]
 801061c:	6a3b      	ldr	r3, [r7, #32]
 801061e:	891b      	ldrh	r3, [r3, #8]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	b29b      	uxth	r3, r3
 8010624:	2201      	movs	r2, #1
 8010626:	6939      	ldr	r1, [r7, #16]
 8010628:	f7fa fe52 	bl	800b2d0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	68db      	ldr	r3, [r3, #12]
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	4618      	mov	r0, r3
 8010634:	f7f9 f869 	bl	800970a <lwip_htonl>
 8010638:	4603      	mov	r3, r0
 801063a:	3301      	adds	r3, #1
 801063c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	1ad3      	subs	r3, r2, r3
 8010646:	2b00      	cmp	r3, #0
 8010648:	da02      	bge.n	8010650 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010654:	2200      	movs	r2, #0
 8010656:	69b9      	ldr	r1, [r7, #24]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff fded 	bl	8010238 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	3304      	adds	r3, #4
 8010664:	69b9      	ldr	r1, [r7, #24]
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff fe26 	bl	80102b8 <tcp_output_control_segment>
 801066c:	4603      	mov	r3, r0
 801066e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010670:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010674:	4618      	mov	r0, r3
 8010676:	372c      	adds	r7, #44	; 0x2c
 8010678:	46bd      	mov	sp, r7
 801067a:	bd90      	pop	{r4, r7, pc}
 801067c:	08015e64 	.word	0x08015e64
 8010680:	0801665c 	.word	0x0801665c
 8010684:	08015eb8 	.word	0x08015eb8

08010688 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010690:	f7fa ff0c 	bl	800b4ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010694:	4b0a      	ldr	r3, [pc, #40]	; (80106c0 <tcpip_tcp_timer+0x38>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d103      	bne.n	80106a4 <tcpip_tcp_timer+0x1c>
 801069c:	4b09      	ldr	r3, [pc, #36]	; (80106c4 <tcpip_tcp_timer+0x3c>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d005      	beq.n	80106b0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80106a4:	2200      	movs	r2, #0
 80106a6:	4908      	ldr	r1, [pc, #32]	; (80106c8 <tcpip_tcp_timer+0x40>)
 80106a8:	20fa      	movs	r0, #250	; 0xfa
 80106aa:	f000 f8f3 	bl	8010894 <sys_timeout>
 80106ae:	e003      	b.n	80106b8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80106b0:	4b06      	ldr	r3, [pc, #24]	; (80106cc <tcpip_tcp_timer+0x44>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	601a      	str	r2, [r3, #0]
  }
}
 80106b6:	bf00      	nop
 80106b8:	bf00      	nop
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20010578 	.word	0x20010578
 80106c4:	2001057c 	.word	0x2001057c
 80106c8:	08010689 	.word	0x08010689
 80106cc:	200105c4 	.word	0x200105c4

080106d0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80106d4:	4b0a      	ldr	r3, [pc, #40]	; (8010700 <tcp_timer_needed+0x30>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10f      	bne.n	80106fc <tcp_timer_needed+0x2c>
 80106dc:	4b09      	ldr	r3, [pc, #36]	; (8010704 <tcp_timer_needed+0x34>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d103      	bne.n	80106ec <tcp_timer_needed+0x1c>
 80106e4:	4b08      	ldr	r3, [pc, #32]	; (8010708 <tcp_timer_needed+0x38>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d007      	beq.n	80106fc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80106ec:	4b04      	ldr	r3, [pc, #16]	; (8010700 <tcp_timer_needed+0x30>)
 80106ee:	2201      	movs	r2, #1
 80106f0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80106f2:	2200      	movs	r2, #0
 80106f4:	4905      	ldr	r1, [pc, #20]	; (801070c <tcp_timer_needed+0x3c>)
 80106f6:	20fa      	movs	r0, #250	; 0xfa
 80106f8:	f000 f8cc 	bl	8010894 <sys_timeout>
  }
}
 80106fc:	bf00      	nop
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	200105c4 	.word	0x200105c4
 8010704:	20010578 	.word	0x20010578
 8010708:	2001057c 	.word	0x2001057c
 801070c:	08010689 	.word	0x08010689

08010710 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801071c:	200a      	movs	r0, #10
 801071e:	f7f9 fcc7 	bl	800a0b0 <memp_malloc>
 8010722:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d109      	bne.n	801073e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d151      	bne.n	80107d4 <sys_timeout_abs+0xc4>
 8010730:	4b2a      	ldr	r3, [pc, #168]	; (80107dc <sys_timeout_abs+0xcc>)
 8010732:	22be      	movs	r2, #190	; 0xbe
 8010734:	492a      	ldr	r1, [pc, #168]	; (80107e0 <sys_timeout_abs+0xd0>)
 8010736:	482b      	ldr	r0, [pc, #172]	; (80107e4 <sys_timeout_abs+0xd4>)
 8010738:	f002 ff24 	bl	8013584 <iprintf>
    return;
 801073c:	e04a      	b.n	80107d4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	2200      	movs	r2, #0
 8010742:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	68ba      	ldr	r2, [r7, #8]
 8010748:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	68fa      	ldr	r2, [r7, #12]
 8010754:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010756:	4b24      	ldr	r3, [pc, #144]	; (80107e8 <sys_timeout_abs+0xd8>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d103      	bne.n	8010766 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801075e:	4a22      	ldr	r2, [pc, #136]	; (80107e8 <sys_timeout_abs+0xd8>)
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	6013      	str	r3, [r2, #0]
    return;
 8010764:	e037      	b.n	80107d6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	4b1f      	ldr	r3, [pc, #124]	; (80107e8 <sys_timeout_abs+0xd8>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	0fdb      	lsrs	r3, r3, #31
 8010774:	f003 0301 	and.w	r3, r3, #1
 8010778:	b2db      	uxtb	r3, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	d007      	beq.n	801078e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801077e:	4b1a      	ldr	r3, [pc, #104]	; (80107e8 <sys_timeout_abs+0xd8>)
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010786:	4a18      	ldr	r2, [pc, #96]	; (80107e8 <sys_timeout_abs+0xd8>)
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	6013      	str	r3, [r2, #0]
 801078c:	e023      	b.n	80107d6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801078e:	4b16      	ldr	r3, [pc, #88]	; (80107e8 <sys_timeout_abs+0xd8>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	617b      	str	r3, [r7, #20]
 8010794:	e01a      	b.n	80107cc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00b      	beq.n	80107b6 <sys_timeout_abs+0xa6>
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	1ad3      	subs	r3, r2, r3
 80107aa:	0fdb      	lsrs	r3, r3, #31
 80107ac:	f003 0301 	and.w	r3, r3, #1
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d007      	beq.n	80107c6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	601a      	str	r2, [r3, #0]
        break;
 80107c4:	e007      	b.n	80107d6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	617b      	str	r3, [r7, #20]
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d1e1      	bne.n	8010796 <sys_timeout_abs+0x86>
 80107d2:	e000      	b.n	80107d6 <sys_timeout_abs+0xc6>
    return;
 80107d4:	bf00      	nop
      }
    }
  }
}
 80107d6:	3718      	adds	r7, #24
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	08016680 	.word	0x08016680
 80107e0:	080166b4 	.word	0x080166b4
 80107e4:	080166f4 	.word	0x080166f4
 80107e8:	200105bc 	.word	0x200105bc

080107ec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	4798      	blx	r3

  now = sys_now();
 80107fe:	f7f5 fc77 	bl	80060f0 <sys_now>
 8010802:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	4b0f      	ldr	r3, [pc, #60]	; (8010848 <lwip_cyclic_timer+0x5c>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4413      	add	r3, r2
 801080e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	0fdb      	lsrs	r3, r3, #31
 8010818:	f003 0301 	and.w	r3, r3, #1
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2b00      	cmp	r3, #0
 8010820:	d009      	beq.n	8010836 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	4413      	add	r3, r2
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	4907      	ldr	r1, [pc, #28]	; (801084c <lwip_cyclic_timer+0x60>)
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff ff6e 	bl	8010710 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010834:	e004      	b.n	8010840 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	4904      	ldr	r1, [pc, #16]	; (801084c <lwip_cyclic_timer+0x60>)
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f7ff ff68 	bl	8010710 <sys_timeout_abs>
}
 8010840:	bf00      	nop
 8010842:	3718      	adds	r7, #24
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	200105c0 	.word	0x200105c0
 801084c:	080107ed 	.word	0x080107ed

08010850 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010856:	2301      	movs	r3, #1
 8010858:	607b      	str	r3, [r7, #4]
 801085a:	e00e      	b.n	801087a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801085c:	4a0b      	ldr	r2, [pc, #44]	; (801088c <sys_timeouts_init+0x3c>)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	00db      	lsls	r3, r3, #3
 8010868:	4a08      	ldr	r2, [pc, #32]	; (801088c <sys_timeouts_init+0x3c>)
 801086a:	4413      	add	r3, r2
 801086c:	461a      	mov	r2, r3
 801086e:	4908      	ldr	r1, [pc, #32]	; (8010890 <sys_timeouts_init+0x40>)
 8010870:	f000 f810 	bl	8010894 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	3301      	adds	r3, #1
 8010878:	607b      	str	r3, [r7, #4]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2b02      	cmp	r3, #2
 801087e:	d9ed      	bls.n	801085c <sys_timeouts_init+0xc>
  }
}
 8010880:	bf00      	nop
 8010882:	bf00      	nop
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	080172ac 	.word	0x080172ac
 8010890:	080107ed 	.word	0x080107ed

08010894 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108a6:	d306      	bcc.n	80108b6 <sys_timeout+0x22>
 80108a8:	4b0a      	ldr	r3, [pc, #40]	; (80108d4 <sys_timeout+0x40>)
 80108aa:	f240 1229 	movw	r2, #297	; 0x129
 80108ae:	490a      	ldr	r1, [pc, #40]	; (80108d8 <sys_timeout+0x44>)
 80108b0:	480a      	ldr	r0, [pc, #40]	; (80108dc <sys_timeout+0x48>)
 80108b2:	f002 fe67 	bl	8013584 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80108b6:	f7f5 fc1b 	bl	80060f0 <sys_now>
 80108ba:	4602      	mov	r2, r0
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	4413      	add	r3, r2
 80108c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	68b9      	ldr	r1, [r7, #8]
 80108c6:	6978      	ldr	r0, [r7, #20]
 80108c8:	f7ff ff22 	bl	8010710 <sys_timeout_abs>
#endif
}
 80108cc:	bf00      	nop
 80108ce:	3718      	adds	r7, #24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	08016680 	.word	0x08016680
 80108d8:	0801671c 	.word	0x0801671c
 80108dc:	080166f4 	.word	0x080166f4

080108e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80108e6:	f7f5 fc03 	bl	80060f0 <sys_now>
 80108ea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80108ec:	4b17      	ldr	r3, [pc, #92]	; (801094c <sys_check_timeouts+0x6c>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d022      	beq.n	801093e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	1ad3      	subs	r3, r2, r3
 8010900:	0fdb      	lsrs	r3, r3, #31
 8010902:	f003 0301 	and.w	r3, r3, #1
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b00      	cmp	r3, #0
 801090a:	d11a      	bne.n	8010942 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a0e      	ldr	r2, [pc, #56]	; (801094c <sys_check_timeouts+0x6c>)
 8010912:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	68db      	ldr	r3, [r3, #12]
 801091e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	4a0a      	ldr	r2, [pc, #40]	; (8010950 <sys_check_timeouts+0x70>)
 8010926:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010928:	68b9      	ldr	r1, [r7, #8]
 801092a:	200a      	movs	r0, #10
 801092c:	f7f9 fc36 	bl	800a19c <memp_free>
    if (handler != NULL) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d0da      	beq.n	80108ec <sys_check_timeouts+0xc>
      handler(arg);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6838      	ldr	r0, [r7, #0]
 801093a:	4798      	blx	r3
  do {
 801093c:	e7d6      	b.n	80108ec <sys_check_timeouts+0xc>
      return;
 801093e:	bf00      	nop
 8010940:	e000      	b.n	8010944 <sys_check_timeouts+0x64>
      return;
 8010942:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	200105bc 	.word	0x200105bc
 8010950:	200105c0 	.word	0x200105c0

08010954 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801095a:	4b16      	ldr	r3, [pc, #88]	; (80109b4 <sys_timeouts_sleeptime+0x60>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d102      	bne.n	8010968 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010966:	e020      	b.n	80109aa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8010968:	f7f5 fbc2 	bl	80060f0 <sys_now>
 801096c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801096e:	4b11      	ldr	r3, [pc, #68]	; (80109b4 <sys_timeouts_sleeptime+0x60>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	0fdb      	lsrs	r3, r3, #31
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b00      	cmp	r3, #0
 8010982:	d001      	beq.n	8010988 <sys_timeouts_sleeptime+0x34>
    return 0;
 8010984:	2300      	movs	r3, #0
 8010986:	e010      	b.n	80109aa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010988:	4b0a      	ldr	r3, [pc, #40]	; (80109b4 <sys_timeouts_sleeptime+0x60>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	685a      	ldr	r2, [r3, #4]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	da06      	bge.n	80109a8 <sys_timeouts_sleeptime+0x54>
 801099a:	4b07      	ldr	r3, [pc, #28]	; (80109b8 <sys_timeouts_sleeptime+0x64>)
 801099c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80109a0:	4906      	ldr	r1, [pc, #24]	; (80109bc <sys_timeouts_sleeptime+0x68>)
 80109a2:	4807      	ldr	r0, [pc, #28]	; (80109c0 <sys_timeouts_sleeptime+0x6c>)
 80109a4:	f002 fdee 	bl	8013584 <iprintf>
    return ret;
 80109a8:	683b      	ldr	r3, [r7, #0]
  }
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	200105bc 	.word	0x200105bc
 80109b8:	08016680 	.word	0x08016680
 80109bc:	08016754 	.word	0x08016754
 80109c0:	080166f4 	.word	0x080166f4

080109c4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80109c8:	f002 fdf4 	bl	80135b4 <rand>
 80109cc:	4603      	mov	r3, r0
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80109da:	b29a      	uxth	r2, r3
 80109dc:	4b01      	ldr	r3, [pc, #4]	; (80109e4 <udp_init+0x20>)
 80109de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80109e0:	bf00      	nop
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	2000002c 	.word	0x2000002c

080109e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	4613      	mov	r3, r2
 80109f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d105      	bne.n	8010a08 <udp_input_local_match+0x20>
 80109fc:	4b27      	ldr	r3, [pc, #156]	; (8010a9c <udp_input_local_match+0xb4>)
 80109fe:	2287      	movs	r2, #135	; 0x87
 8010a00:	4927      	ldr	r1, [pc, #156]	; (8010aa0 <udp_input_local_match+0xb8>)
 8010a02:	4828      	ldr	r0, [pc, #160]	; (8010aa4 <udp_input_local_match+0xbc>)
 8010a04:	f002 fdbe 	bl	8013584 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d105      	bne.n	8010a1a <udp_input_local_match+0x32>
 8010a0e:	4b23      	ldr	r3, [pc, #140]	; (8010a9c <udp_input_local_match+0xb4>)
 8010a10:	2288      	movs	r2, #136	; 0x88
 8010a12:	4925      	ldr	r1, [pc, #148]	; (8010aa8 <udp_input_local_match+0xc0>)
 8010a14:	4823      	ldr	r0, [pc, #140]	; (8010aa4 <udp_input_local_match+0xbc>)
 8010a16:	f002 fdb5 	bl	8013584 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	7a1b      	ldrb	r3, [r3, #8]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00b      	beq.n	8010a3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	7a1a      	ldrb	r2, [r3, #8]
 8010a26:	4b21      	ldr	r3, [pc, #132]	; (8010aac <udp_input_local_match+0xc4>)
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a2e:	3301      	adds	r3, #1
 8010a30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d001      	beq.n	8010a3a <udp_input_local_match+0x52>
    return 0;
 8010a36:	2300      	movs	r3, #0
 8010a38:	e02b      	b.n	8010a92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010a3a:	79fb      	ldrb	r3, [r7, #7]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d018      	beq.n	8010a72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d013      	beq.n	8010a6e <udp_input_local_match+0x86>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00f      	beq.n	8010a6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010a4e:	4b17      	ldr	r3, [pc, #92]	; (8010aac <udp_input_local_match+0xc4>)
 8010a50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a56:	d00a      	beq.n	8010a6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	4b13      	ldr	r3, [pc, #76]	; (8010aac <udp_input_local_match+0xc4>)
 8010a5e:	695b      	ldr	r3, [r3, #20]
 8010a60:	405a      	eors	r2, r3
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	3308      	adds	r3, #8
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d110      	bne.n	8010a90 <udp_input_local_match+0xa8>
          return 1;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	e00f      	b.n	8010a92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d009      	beq.n	8010a8c <udp_input_local_match+0xa4>
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d005      	beq.n	8010a8c <udp_input_local_match+0xa4>
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	4b09      	ldr	r3, [pc, #36]	; (8010aac <udp_input_local_match+0xc4>)
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d101      	bne.n	8010a90 <udp_input_local_match+0xa8>
        return 1;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e000      	b.n	8010a92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010a90:	2300      	movs	r3, #0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3710      	adds	r7, #16
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	08016768 	.word	0x08016768
 8010aa0:	08016798 	.word	0x08016798
 8010aa4:	080167bc 	.word	0x080167bc
 8010aa8:	080167e4 	.word	0x080167e4
 8010aac:	20009470 	.word	0x20009470

08010ab0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010ab0:	b590      	push	{r4, r7, lr}
 8010ab2:	b08d      	sub	sp, #52	; 0x34
 8010ab4:	af02      	add	r7, sp, #8
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010aba:	2300      	movs	r3, #0
 8010abc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d105      	bne.n	8010ad0 <udp_input+0x20>
 8010ac4:	4b7c      	ldr	r3, [pc, #496]	; (8010cb8 <udp_input+0x208>)
 8010ac6:	22cf      	movs	r2, #207	; 0xcf
 8010ac8:	497c      	ldr	r1, [pc, #496]	; (8010cbc <udp_input+0x20c>)
 8010aca:	487d      	ldr	r0, [pc, #500]	; (8010cc0 <udp_input+0x210>)
 8010acc:	f002 fd5a 	bl	8013584 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d105      	bne.n	8010ae2 <udp_input+0x32>
 8010ad6:	4b78      	ldr	r3, [pc, #480]	; (8010cb8 <udp_input+0x208>)
 8010ad8:	22d0      	movs	r2, #208	; 0xd0
 8010ada:	497a      	ldr	r1, [pc, #488]	; (8010cc4 <udp_input+0x214>)
 8010adc:	4878      	ldr	r0, [pc, #480]	; (8010cc0 <udp_input+0x210>)
 8010ade:	f002 fd51 	bl	8013584 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	895b      	ldrh	r3, [r3, #10]
 8010ae6:	2b07      	cmp	r3, #7
 8010ae8:	d803      	bhi.n	8010af2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f7fa f9fa 	bl	800aee4 <pbuf_free>
    goto end;
 8010af0:	e0de      	b.n	8010cb0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010af8:	4b73      	ldr	r3, [pc, #460]	; (8010cc8 <udp_input+0x218>)
 8010afa:	695b      	ldr	r3, [r3, #20]
 8010afc:	4a72      	ldr	r2, [pc, #456]	; (8010cc8 <udp_input+0x218>)
 8010afe:	6812      	ldr	r2, [r2, #0]
 8010b00:	4611      	mov	r1, r2
 8010b02:	4618      	mov	r0, r3
 8010b04:	f001 fc88 	bl	8012418 <ip4_addr_isbroadcast_u32>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	881b      	ldrh	r3, [r3, #0]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7f8 fde4 	bl	80096e0 <lwip_htons>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	885b      	ldrh	r3, [r3, #2]
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7f8 fddc 	bl	80096e0 <lwip_htons>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010b30:	2300      	movs	r3, #0
 8010b32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010b34:	2300      	movs	r3, #0
 8010b36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b38:	4b64      	ldr	r3, [pc, #400]	; (8010ccc <udp_input+0x21c>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8010b3e:	e054      	b.n	8010bea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b42:	8a5b      	ldrh	r3, [r3, #18]
 8010b44:	89fa      	ldrh	r2, [r7, #14]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d14a      	bne.n	8010be0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010b4a:	7cfb      	ldrb	r3, [r7, #19]
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	6839      	ldr	r1, [r7, #0]
 8010b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b52:	f7ff ff49 	bl	80109e8 <udp_input_local_match>
 8010b56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d041      	beq.n	8010be0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5e:	7c1b      	ldrb	r3, [r3, #16]
 8010b60:	f003 0304 	and.w	r3, r3, #4
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d11d      	bne.n	8010ba4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d102      	bne.n	8010b74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b70:	61fb      	str	r3, [r7, #28]
 8010b72:	e017      	b.n	8010ba4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010b74:	7cfb      	ldrb	r3, [r7, #19]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d014      	beq.n	8010ba4 <udp_input+0xf4>
 8010b7a:	4b53      	ldr	r3, [pc, #332]	; (8010cc8 <udp_input+0x218>)
 8010b7c:	695b      	ldr	r3, [r3, #20]
 8010b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b82:	d10f      	bne.n	8010ba4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	3304      	adds	r3, #4
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d008      	beq.n	8010ba4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	3304      	adds	r3, #4
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d101      	bne.n	8010ba4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	8a9b      	ldrh	r3, [r3, #20]
 8010ba8:	8a3a      	ldrh	r2, [r7, #16]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d118      	bne.n	8010be0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d005      	beq.n	8010bc2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb8:	685a      	ldr	r2, [r3, #4]
 8010bba:	4b43      	ldr	r3, [pc, #268]	; (8010cc8 <udp_input+0x218>)
 8010bbc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d10e      	bne.n	8010be0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d014      	beq.n	8010bf2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bca:	68da      	ldr	r2, [r3, #12]
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010bd0:	4b3e      	ldr	r3, [pc, #248]	; (8010ccc <udp_input+0x21c>)
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010bd8:	4a3c      	ldr	r2, [pc, #240]	; (8010ccc <udp_input+0x21c>)
 8010bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bdc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010bde:	e008      	b.n	8010bf2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d1a7      	bne.n	8010b40 <udp_input+0x90>
 8010bf0:	e000      	b.n	8010bf4 <udp_input+0x144>
        break;
 8010bf2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d101      	bne.n	8010bfe <udp_input+0x14e>
    pcb = uncon_pcb;
 8010bfa:	69fb      	ldr	r3, [r7, #28]
 8010bfc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d002      	beq.n	8010c0a <udp_input+0x15a>
    for_us = 1;
 8010c04:	2301      	movs	r3, #1
 8010c06:	76fb      	strb	r3, [r7, #27]
 8010c08:	e00a      	b.n	8010c20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	4b2d      	ldr	r3, [pc, #180]	; (8010cc8 <udp_input+0x218>)
 8010c12:	695b      	ldr	r3, [r3, #20]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	bf0c      	ite	eq
 8010c18:	2301      	moveq	r3, #1
 8010c1a:	2300      	movne	r3, #0
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010c20:	7efb      	ldrb	r3, [r7, #27]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d041      	beq.n	8010caa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010c26:	2108      	movs	r1, #8
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f7fa f8d5 	bl	800add8 <pbuf_remove_header>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00a      	beq.n	8010c4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010c34:	4b20      	ldr	r3, [pc, #128]	; (8010cb8 <udp_input+0x208>)
 8010c36:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010c3a:	4925      	ldr	r1, [pc, #148]	; (8010cd0 <udp_input+0x220>)
 8010c3c:	4820      	ldr	r0, [pc, #128]	; (8010cc0 <udp_input+0x210>)
 8010c3e:	f002 fca1 	bl	8013584 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7fa f94e 	bl	800aee4 <pbuf_free>
      goto end;
 8010c48:	e032      	b.n	8010cb0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d012      	beq.n	8010c76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c52:	699b      	ldr	r3, [r3, #24]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00a      	beq.n	8010c6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	699c      	ldr	r4, [r3, #24]
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	69d8      	ldr	r0, [r3, #28]
 8010c60:	8a3b      	ldrh	r3, [r7, #16]
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	4b1b      	ldr	r3, [pc, #108]	; (8010cd4 <udp_input+0x224>)
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010c6c:	e021      	b.n	8010cb2 <udp_input+0x202>
        pbuf_free(p);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f7fa f938 	bl	800aee4 <pbuf_free>
        goto end;
 8010c74:	e01c      	b.n	8010cb0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010c76:	7cfb      	ldrb	r3, [r7, #19]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d112      	bne.n	8010ca2 <udp_input+0x1f2>
 8010c7c:	4b12      	ldr	r3, [pc, #72]	; (8010cc8 <udp_input+0x218>)
 8010c7e:	695b      	ldr	r3, [r3, #20]
 8010c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c84:	2be0      	cmp	r3, #224	; 0xe0
 8010c86:	d00c      	beq.n	8010ca2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010c88:	4b0f      	ldr	r3, [pc, #60]	; (8010cc8 <udp_input+0x218>)
 8010c8a:	899b      	ldrh	r3, [r3, #12]
 8010c8c:	3308      	adds	r3, #8
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	b21b      	sxth	r3, r3
 8010c92:	4619      	mov	r1, r3
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7fa f912 	bl	800aebe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010c9a:	2103      	movs	r1, #3
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f001 f89b 	bl	8011dd8 <icmp_dest_unreach>
      pbuf_free(p);
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7fa f91e 	bl	800aee4 <pbuf_free>
  return;
 8010ca8:	e003      	b.n	8010cb2 <udp_input+0x202>
    pbuf_free(p);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f7fa f91a 	bl	800aee4 <pbuf_free>
  return;
 8010cb0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010cb2:	372c      	adds	r7, #44	; 0x2c
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd90      	pop	{r4, r7, pc}
 8010cb8:	08016768 	.word	0x08016768
 8010cbc:	0801680c 	.word	0x0801680c
 8010cc0:	080167bc 	.word	0x080167bc
 8010cc4:	08016824 	.word	0x08016824
 8010cc8:	20009470 	.word	0x20009470
 8010ccc:	200105c8 	.word	0x200105c8
 8010cd0:	08016840 	.word	0x08016840
 8010cd4:	20009480 	.word	0x20009480

08010cd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b085      	sub	sp, #20
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d01e      	beq.n	8010d26 <udp_netif_ip_addr_changed+0x4e>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d01a      	beq.n	8010d26 <udp_netif_ip_addr_changed+0x4e>
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d017      	beq.n	8010d26 <udp_netif_ip_addr_changed+0x4e>
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d013      	beq.n	8010d26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010cfe:	4b0d      	ldr	r3, [pc, #52]	; (8010d34 <udp_netif_ip_addr_changed+0x5c>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	e00c      	b.n	8010d20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d103      	bne.n	8010d1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	60fb      	str	r3, [r7, #12]
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1ef      	bne.n	8010d06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010d26:	bf00      	nop
 8010d28:	3714      	adds	r7, #20
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop
 8010d34:	200105c8 	.word	0x200105c8

08010d38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010d40:	4915      	ldr	r1, [pc, #84]	; (8010d98 <etharp_free_entry+0x60>)
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	4613      	mov	r3, r2
 8010d46:	005b      	lsls	r3, r3, #1
 8010d48:	4413      	add	r3, r2
 8010d4a:	00db      	lsls	r3, r3, #3
 8010d4c:	440b      	add	r3, r1
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d013      	beq.n	8010d7c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010d54:	4910      	ldr	r1, [pc, #64]	; (8010d98 <etharp_free_entry+0x60>)
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	005b      	lsls	r3, r3, #1
 8010d5c:	4413      	add	r3, r2
 8010d5e:	00db      	lsls	r3, r3, #3
 8010d60:	440b      	add	r3, r1
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fa f8bd 	bl	800aee4 <pbuf_free>
    arp_table[i].q = NULL;
 8010d6a:	490b      	ldr	r1, [pc, #44]	; (8010d98 <etharp_free_entry+0x60>)
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	440b      	add	r3, r1
 8010d78:	2200      	movs	r2, #0
 8010d7a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010d7c:	4906      	ldr	r1, [pc, #24]	; (8010d98 <etharp_free_entry+0x60>)
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	4613      	mov	r3, r2
 8010d82:	005b      	lsls	r3, r3, #1
 8010d84:	4413      	add	r3, r2
 8010d86:	00db      	lsls	r3, r3, #3
 8010d88:	440b      	add	r3, r1
 8010d8a:	3314      	adds	r3, #20
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010d90:	bf00      	nop
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	200105cc 	.word	0x200105cc

08010d9c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010da2:	2300      	movs	r3, #0
 8010da4:	607b      	str	r3, [r7, #4]
 8010da6:	e096      	b.n	8010ed6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010da8:	494f      	ldr	r1, [pc, #316]	; (8010ee8 <etharp_tmr+0x14c>)
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	4613      	mov	r3, r2
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	4413      	add	r3, r2
 8010db2:	00db      	lsls	r3, r3, #3
 8010db4:	440b      	add	r3, r1
 8010db6:	3314      	adds	r3, #20
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010dbc:	78fb      	ldrb	r3, [r7, #3]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f000 8086 	beq.w	8010ed0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010dc4:	4948      	ldr	r1, [pc, #288]	; (8010ee8 <etharp_tmr+0x14c>)
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	4613      	mov	r3, r2
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	4413      	add	r3, r2
 8010dce:	00db      	lsls	r3, r3, #3
 8010dd0:	440b      	add	r3, r1
 8010dd2:	3312      	adds	r3, #18
 8010dd4:	881b      	ldrh	r3, [r3, #0]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	b298      	uxth	r0, r3
 8010dda:	4943      	ldr	r1, [pc, #268]	; (8010ee8 <etharp_tmr+0x14c>)
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	4613      	mov	r3, r2
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	4413      	add	r3, r2
 8010de4:	00db      	lsls	r3, r3, #3
 8010de6:	440b      	add	r3, r1
 8010de8:	3312      	adds	r3, #18
 8010dea:	4602      	mov	r2, r0
 8010dec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010dee:	493e      	ldr	r1, [pc, #248]	; (8010ee8 <etharp_tmr+0x14c>)
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	4613      	mov	r3, r2
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	4413      	add	r3, r2
 8010df8:	00db      	lsls	r3, r3, #3
 8010dfa:	440b      	add	r3, r1
 8010dfc:	3312      	adds	r3, #18
 8010dfe:	881b      	ldrh	r3, [r3, #0]
 8010e00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010e04:	d215      	bcs.n	8010e32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e06:	4938      	ldr	r1, [pc, #224]	; (8010ee8 <etharp_tmr+0x14c>)
 8010e08:	687a      	ldr	r2, [r7, #4]
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	4413      	add	r3, r2
 8010e10:	00db      	lsls	r3, r3, #3
 8010e12:	440b      	add	r3, r1
 8010e14:	3314      	adds	r3, #20
 8010e16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d10e      	bne.n	8010e3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010e1c:	4932      	ldr	r1, [pc, #200]	; (8010ee8 <etharp_tmr+0x14c>)
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	4613      	mov	r3, r2
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	4413      	add	r3, r2
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	440b      	add	r3, r1
 8010e2a:	3312      	adds	r3, #18
 8010e2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010e2e:	2b04      	cmp	r3, #4
 8010e30:	d903      	bls.n	8010e3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f7ff ff80 	bl	8010d38 <etharp_free_entry>
 8010e38:	e04a      	b.n	8010ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010e3a:	492b      	ldr	r1, [pc, #172]	; (8010ee8 <etharp_tmr+0x14c>)
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	4413      	add	r3, r2
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	440b      	add	r3, r1
 8010e48:	3314      	adds	r3, #20
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	2b03      	cmp	r3, #3
 8010e4e:	d10a      	bne.n	8010e66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010e50:	4925      	ldr	r1, [pc, #148]	; (8010ee8 <etharp_tmr+0x14c>)
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	4613      	mov	r3, r2
 8010e56:	005b      	lsls	r3, r3, #1
 8010e58:	4413      	add	r3, r2
 8010e5a:	00db      	lsls	r3, r3, #3
 8010e5c:	440b      	add	r3, r1
 8010e5e:	3314      	adds	r3, #20
 8010e60:	2204      	movs	r2, #4
 8010e62:	701a      	strb	r2, [r3, #0]
 8010e64:	e034      	b.n	8010ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010e66:	4920      	ldr	r1, [pc, #128]	; (8010ee8 <etharp_tmr+0x14c>)
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	4413      	add	r3, r2
 8010e70:	00db      	lsls	r3, r3, #3
 8010e72:	440b      	add	r3, r1
 8010e74:	3314      	adds	r3, #20
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2b04      	cmp	r3, #4
 8010e7a:	d10a      	bne.n	8010e92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010e7c:	491a      	ldr	r1, [pc, #104]	; (8010ee8 <etharp_tmr+0x14c>)
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	4613      	mov	r3, r2
 8010e82:	005b      	lsls	r3, r3, #1
 8010e84:	4413      	add	r3, r2
 8010e86:	00db      	lsls	r3, r3, #3
 8010e88:	440b      	add	r3, r1
 8010e8a:	3314      	adds	r3, #20
 8010e8c:	2202      	movs	r2, #2
 8010e8e:	701a      	strb	r2, [r3, #0]
 8010e90:	e01e      	b.n	8010ed0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010e92:	4915      	ldr	r1, [pc, #84]	; (8010ee8 <etharp_tmr+0x14c>)
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	4613      	mov	r3, r2
 8010e98:	005b      	lsls	r3, r3, #1
 8010e9a:	4413      	add	r3, r2
 8010e9c:	00db      	lsls	r3, r3, #3
 8010e9e:	440b      	add	r3, r1
 8010ea0:	3314      	adds	r3, #20
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d113      	bne.n	8010ed0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010ea8:	490f      	ldr	r1, [pc, #60]	; (8010ee8 <etharp_tmr+0x14c>)
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	4613      	mov	r3, r2
 8010eae:	005b      	lsls	r3, r3, #1
 8010eb0:	4413      	add	r3, r2
 8010eb2:	00db      	lsls	r3, r3, #3
 8010eb4:	440b      	add	r3, r1
 8010eb6:	3308      	adds	r3, #8
 8010eb8:	6818      	ldr	r0, [r3, #0]
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	005b      	lsls	r3, r3, #1
 8010ec0:	4413      	add	r3, r2
 8010ec2:	00db      	lsls	r3, r3, #3
 8010ec4:	4a08      	ldr	r2, [pc, #32]	; (8010ee8 <etharp_tmr+0x14c>)
 8010ec6:	4413      	add	r3, r2
 8010ec8:	3304      	adds	r3, #4
 8010eca:	4619      	mov	r1, r3
 8010ecc:	f000 fe6e 	bl	8011bac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	607b      	str	r3, [r7, #4]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2b09      	cmp	r3, #9
 8010eda:	f77f af65 	ble.w	8010da8 <etharp_tmr+0xc>
      }
    }
  }
}
 8010ede:	bf00      	nop
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	200105cc 	.word	0x200105cc

08010eec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08a      	sub	sp, #40	; 0x28
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	460b      	mov	r3, r1
 8010ef6:	607a      	str	r2, [r7, #4]
 8010ef8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010efa:	230a      	movs	r3, #10
 8010efc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010efe:	230a      	movs	r3, #10
 8010f00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010f02:	230a      	movs	r3, #10
 8010f04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010f06:	2300      	movs	r3, #0
 8010f08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010f0a:	230a      	movs	r3, #10
 8010f0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	83bb      	strh	r3, [r7, #28]
 8010f12:	2300      	movs	r3, #0
 8010f14:	837b      	strh	r3, [r7, #26]
 8010f16:	2300      	movs	r3, #0
 8010f18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	843b      	strh	r3, [r7, #32]
 8010f1e:	e0ae      	b.n	801107e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010f20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f24:	49a6      	ldr	r1, [pc, #664]	; (80111c0 <etharp_find_entry+0x2d4>)
 8010f26:	4613      	mov	r3, r2
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	4413      	add	r3, r2
 8010f2c:	00db      	lsls	r3, r3, #3
 8010f2e:	440b      	add	r3, r1
 8010f30:	3314      	adds	r3, #20
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010f36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010f3a:	2b0a      	cmp	r3, #10
 8010f3c:	d105      	bne.n	8010f4a <etharp_find_entry+0x5e>
 8010f3e:	7dfb      	ldrb	r3, [r7, #23]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d102      	bne.n	8010f4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010f44:	8c3b      	ldrh	r3, [r7, #32]
 8010f46:	847b      	strh	r3, [r7, #34]	; 0x22
 8010f48:	e095      	b.n	8011076 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010f4a:	7dfb      	ldrb	r3, [r7, #23]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f000 8092 	beq.w	8011076 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010f52:	7dfb      	ldrb	r3, [r7, #23]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d009      	beq.n	8010f6c <etharp_find_entry+0x80>
 8010f58:	7dfb      	ldrb	r3, [r7, #23]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d806      	bhi.n	8010f6c <etharp_find_entry+0x80>
 8010f5e:	4b99      	ldr	r3, [pc, #612]	; (80111c4 <etharp_find_entry+0x2d8>)
 8010f60:	f240 1223 	movw	r2, #291	; 0x123
 8010f64:	4998      	ldr	r1, [pc, #608]	; (80111c8 <etharp_find_entry+0x2dc>)
 8010f66:	4899      	ldr	r0, [pc, #612]	; (80111cc <etharp_find_entry+0x2e0>)
 8010f68:	f002 fb0c 	bl	8013584 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d020      	beq.n	8010fb4 <etharp_find_entry+0xc8>
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	6819      	ldr	r1, [r3, #0]
 8010f76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f7a:	4891      	ldr	r0, [pc, #580]	; (80111c0 <etharp_find_entry+0x2d4>)
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	4413      	add	r3, r2
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	4403      	add	r3, r0
 8010f86:	3304      	adds	r3, #4
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4299      	cmp	r1, r3
 8010f8c:	d112      	bne.n	8010fb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d00c      	beq.n	8010fae <etharp_find_entry+0xc2>
 8010f94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f98:	4989      	ldr	r1, [pc, #548]	; (80111c0 <etharp_find_entry+0x2d4>)
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	4413      	add	r3, r2
 8010fa0:	00db      	lsls	r3, r3, #3
 8010fa2:	440b      	add	r3, r1
 8010fa4:	3308      	adds	r3, #8
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d102      	bne.n	8010fb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010fae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010fb2:	e100      	b.n	80111b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010fb4:	7dfb      	ldrb	r3, [r7, #23]
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d140      	bne.n	801103c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010fba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fbe:	4980      	ldr	r1, [pc, #512]	; (80111c0 <etharp_find_entry+0x2d4>)
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	4413      	add	r3, r2
 8010fc6:	00db      	lsls	r3, r3, #3
 8010fc8:	440b      	add	r3, r1
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d01a      	beq.n	8011006 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010fd4:	497a      	ldr	r1, [pc, #488]	; (80111c0 <etharp_find_entry+0x2d4>)
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	4413      	add	r3, r2
 8010fdc:	00db      	lsls	r3, r3, #3
 8010fde:	440b      	add	r3, r1
 8010fe0:	3312      	adds	r3, #18
 8010fe2:	881b      	ldrh	r3, [r3, #0]
 8010fe4:	8bba      	ldrh	r2, [r7, #28]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d845      	bhi.n	8011076 <etharp_find_entry+0x18a>
            old_queue = i;
 8010fea:	8c3b      	ldrh	r3, [r7, #32]
 8010fec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010fee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ff2:	4973      	ldr	r1, [pc, #460]	; (80111c0 <etharp_find_entry+0x2d4>)
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	005b      	lsls	r3, r3, #1
 8010ff8:	4413      	add	r3, r2
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	440b      	add	r3, r1
 8010ffe:	3312      	adds	r3, #18
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	83bb      	strh	r3, [r7, #28]
 8011004:	e037      	b.n	8011076 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801100a:	496d      	ldr	r1, [pc, #436]	; (80111c0 <etharp_find_entry+0x2d4>)
 801100c:	4613      	mov	r3, r2
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	440b      	add	r3, r1
 8011016:	3312      	adds	r3, #18
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	8b7a      	ldrh	r2, [r7, #26]
 801101c:	429a      	cmp	r2, r3
 801101e:	d82a      	bhi.n	8011076 <etharp_find_entry+0x18a>
            old_pending = i;
 8011020:	8c3b      	ldrh	r3, [r7, #32]
 8011022:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011024:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011028:	4965      	ldr	r1, [pc, #404]	; (80111c0 <etharp_find_entry+0x2d4>)
 801102a:	4613      	mov	r3, r2
 801102c:	005b      	lsls	r3, r3, #1
 801102e:	4413      	add	r3, r2
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	440b      	add	r3, r1
 8011034:	3312      	adds	r3, #18
 8011036:	881b      	ldrh	r3, [r3, #0]
 8011038:	837b      	strh	r3, [r7, #26]
 801103a:	e01c      	b.n	8011076 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801103c:	7dfb      	ldrb	r3, [r7, #23]
 801103e:	2b01      	cmp	r3, #1
 8011040:	d919      	bls.n	8011076 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011046:	495e      	ldr	r1, [pc, #376]	; (80111c0 <etharp_find_entry+0x2d4>)
 8011048:	4613      	mov	r3, r2
 801104a:	005b      	lsls	r3, r3, #1
 801104c:	4413      	add	r3, r2
 801104e:	00db      	lsls	r3, r3, #3
 8011050:	440b      	add	r3, r1
 8011052:	3312      	adds	r3, #18
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	8b3a      	ldrh	r2, [r7, #24]
 8011058:	429a      	cmp	r2, r3
 801105a:	d80c      	bhi.n	8011076 <etharp_find_entry+0x18a>
            old_stable = i;
 801105c:	8c3b      	ldrh	r3, [r7, #32]
 801105e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011064:	4956      	ldr	r1, [pc, #344]	; (80111c0 <etharp_find_entry+0x2d4>)
 8011066:	4613      	mov	r3, r2
 8011068:	005b      	lsls	r3, r3, #1
 801106a:	4413      	add	r3, r2
 801106c:	00db      	lsls	r3, r3, #3
 801106e:	440b      	add	r3, r1
 8011070:	3312      	adds	r3, #18
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011076:	8c3b      	ldrh	r3, [r7, #32]
 8011078:	3301      	adds	r3, #1
 801107a:	b29b      	uxth	r3, r3
 801107c:	843b      	strh	r3, [r7, #32]
 801107e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011082:	2b09      	cmp	r3, #9
 8011084:	f77f af4c 	ble.w	8010f20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011088:	7afb      	ldrb	r3, [r7, #11]
 801108a:	f003 0302 	and.w	r3, r3, #2
 801108e:	2b00      	cmp	r3, #0
 8011090:	d108      	bne.n	80110a4 <etharp_find_entry+0x1b8>
 8011092:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011096:	2b0a      	cmp	r3, #10
 8011098:	d107      	bne.n	80110aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801109a:	7afb      	ldrb	r3, [r7, #11]
 801109c:	f003 0301 	and.w	r3, r3, #1
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d102      	bne.n	80110aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80110a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110a8:	e085      	b.n	80111b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80110aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110ae:	2b09      	cmp	r3, #9
 80110b0:	dc02      	bgt.n	80110b8 <etharp_find_entry+0x1cc>
    i = empty;
 80110b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110b4:	843b      	strh	r3, [r7, #32]
 80110b6:	e039      	b.n	801112c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80110b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80110bc:	2b09      	cmp	r3, #9
 80110be:	dc14      	bgt.n	80110ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80110c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80110c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110c8:	493d      	ldr	r1, [pc, #244]	; (80111c0 <etharp_find_entry+0x2d4>)
 80110ca:	4613      	mov	r3, r2
 80110cc:	005b      	lsls	r3, r3, #1
 80110ce:	4413      	add	r3, r2
 80110d0:	00db      	lsls	r3, r3, #3
 80110d2:	440b      	add	r3, r1
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d018      	beq.n	801110c <etharp_find_entry+0x220>
 80110da:	4b3a      	ldr	r3, [pc, #232]	; (80111c4 <etharp_find_entry+0x2d8>)
 80110dc:	f240 126d 	movw	r2, #365	; 0x16d
 80110e0:	493b      	ldr	r1, [pc, #236]	; (80111d0 <etharp_find_entry+0x2e4>)
 80110e2:	483a      	ldr	r0, [pc, #232]	; (80111cc <etharp_find_entry+0x2e0>)
 80110e4:	f002 fa4e 	bl	8013584 <iprintf>
 80110e8:	e010      	b.n	801110c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80110ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80110ee:	2b09      	cmp	r3, #9
 80110f0:	dc02      	bgt.n	80110f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80110f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80110f4:	843b      	strh	r3, [r7, #32]
 80110f6:	e009      	b.n	801110c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80110f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80110fc:	2b09      	cmp	r3, #9
 80110fe:	dc02      	bgt.n	8011106 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011100:	8bfb      	ldrh	r3, [r7, #30]
 8011102:	843b      	strh	r3, [r7, #32]
 8011104:	e002      	b.n	801110c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801110a:	e054      	b.n	80111b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801110c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011110:	2b09      	cmp	r3, #9
 8011112:	dd06      	ble.n	8011122 <etharp_find_entry+0x236>
 8011114:	4b2b      	ldr	r3, [pc, #172]	; (80111c4 <etharp_find_entry+0x2d8>)
 8011116:	f240 127f 	movw	r2, #383	; 0x17f
 801111a:	492e      	ldr	r1, [pc, #184]	; (80111d4 <etharp_find_entry+0x2e8>)
 801111c:	482b      	ldr	r0, [pc, #172]	; (80111cc <etharp_find_entry+0x2e0>)
 801111e:	f002 fa31 	bl	8013584 <iprintf>
    etharp_free_entry(i);
 8011122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011126:	4618      	mov	r0, r3
 8011128:	f7ff fe06 	bl	8010d38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801112c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011130:	2b09      	cmp	r3, #9
 8011132:	dd06      	ble.n	8011142 <etharp_find_entry+0x256>
 8011134:	4b23      	ldr	r3, [pc, #140]	; (80111c4 <etharp_find_entry+0x2d8>)
 8011136:	f240 1283 	movw	r2, #387	; 0x183
 801113a:	4926      	ldr	r1, [pc, #152]	; (80111d4 <etharp_find_entry+0x2e8>)
 801113c:	4823      	ldr	r0, [pc, #140]	; (80111cc <etharp_find_entry+0x2e0>)
 801113e:	f002 fa21 	bl	8013584 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011146:	491e      	ldr	r1, [pc, #120]	; (80111c0 <etharp_find_entry+0x2d4>)
 8011148:	4613      	mov	r3, r2
 801114a:	005b      	lsls	r3, r3, #1
 801114c:	4413      	add	r3, r2
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	440b      	add	r3, r1
 8011152:	3314      	adds	r3, #20
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d006      	beq.n	8011168 <etharp_find_entry+0x27c>
 801115a:	4b1a      	ldr	r3, [pc, #104]	; (80111c4 <etharp_find_entry+0x2d8>)
 801115c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011160:	491d      	ldr	r1, [pc, #116]	; (80111d8 <etharp_find_entry+0x2ec>)
 8011162:	481a      	ldr	r0, [pc, #104]	; (80111cc <etharp_find_entry+0x2e0>)
 8011164:	f002 fa0e 	bl	8013584 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00b      	beq.n	8011186 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801116e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	6819      	ldr	r1, [r3, #0]
 8011176:	4812      	ldr	r0, [pc, #72]	; (80111c0 <etharp_find_entry+0x2d4>)
 8011178:	4613      	mov	r3, r2
 801117a:	005b      	lsls	r3, r3, #1
 801117c:	4413      	add	r3, r2
 801117e:	00db      	lsls	r3, r3, #3
 8011180:	4403      	add	r3, r0
 8011182:	3304      	adds	r3, #4
 8011184:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011186:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801118a:	490d      	ldr	r1, [pc, #52]	; (80111c0 <etharp_find_entry+0x2d4>)
 801118c:	4613      	mov	r3, r2
 801118e:	005b      	lsls	r3, r3, #1
 8011190:	4413      	add	r3, r2
 8011192:	00db      	lsls	r3, r3, #3
 8011194:	440b      	add	r3, r1
 8011196:	3312      	adds	r3, #18
 8011198:	2200      	movs	r2, #0
 801119a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801119c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111a0:	4907      	ldr	r1, [pc, #28]	; (80111c0 <etharp_find_entry+0x2d4>)
 80111a2:	4613      	mov	r3, r2
 80111a4:	005b      	lsls	r3, r3, #1
 80111a6:	4413      	add	r3, r2
 80111a8:	00db      	lsls	r3, r3, #3
 80111aa:	440b      	add	r3, r1
 80111ac:	3308      	adds	r3, #8
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80111b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3728      	adds	r7, #40	; 0x28
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	200105cc 	.word	0x200105cc
 80111c4:	08016acc 	.word	0x08016acc
 80111c8:	08016b04 	.word	0x08016b04
 80111cc:	08016b44 	.word	0x08016b44
 80111d0:	08016b6c 	.word	0x08016b6c
 80111d4:	08016b84 	.word	0x08016b84
 80111d8:	08016b98 	.word	0x08016b98

080111dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b088      	sub	sp, #32
 80111e0:	af02      	add	r7, sp, #8
 80111e2:	60f8      	str	r0, [r7, #12]
 80111e4:	60b9      	str	r1, [r7, #8]
 80111e6:	607a      	str	r2, [r7, #4]
 80111e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111f0:	2b06      	cmp	r3, #6
 80111f2:	d006      	beq.n	8011202 <etharp_update_arp_entry+0x26>
 80111f4:	4b48      	ldr	r3, [pc, #288]	; (8011318 <etharp_update_arp_entry+0x13c>)
 80111f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80111fa:	4948      	ldr	r1, [pc, #288]	; (801131c <etharp_update_arp_entry+0x140>)
 80111fc:	4848      	ldr	r0, [pc, #288]	; (8011320 <etharp_update_arp_entry+0x144>)
 80111fe:	f002 f9c1 	bl	8013584 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d012      	beq.n	801122e <etharp_update_arp_entry+0x52>
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00e      	beq.n	801122e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	68f9      	ldr	r1, [r7, #12]
 8011216:	4618      	mov	r0, r3
 8011218:	f001 f8fe 	bl	8012418 <ip4_addr_isbroadcast_u32>
 801121c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801121e:	2b00      	cmp	r3, #0
 8011220:	d105      	bne.n	801122e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801122a:	2be0      	cmp	r3, #224	; 0xe0
 801122c:	d102      	bne.n	8011234 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801122e:	f06f 030f 	mvn.w	r3, #15
 8011232:	e06c      	b.n	801130e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011234:	78fb      	ldrb	r3, [r7, #3]
 8011236:	68fa      	ldr	r2, [r7, #12]
 8011238:	4619      	mov	r1, r3
 801123a:	68b8      	ldr	r0, [r7, #8]
 801123c:	f7ff fe56 	bl	8010eec <etharp_find_entry>
 8011240:	4603      	mov	r3, r0
 8011242:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011248:	2b00      	cmp	r3, #0
 801124a:	da02      	bge.n	8011252 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801124c:	8afb      	ldrh	r3, [r7, #22]
 801124e:	b25b      	sxtb	r3, r3
 8011250:	e05d      	b.n	801130e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011252:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011256:	4933      	ldr	r1, [pc, #204]	; (8011324 <etharp_update_arp_entry+0x148>)
 8011258:	4613      	mov	r3, r2
 801125a:	005b      	lsls	r3, r3, #1
 801125c:	4413      	add	r3, r2
 801125e:	00db      	lsls	r3, r3, #3
 8011260:	440b      	add	r3, r1
 8011262:	3314      	adds	r3, #20
 8011264:	2202      	movs	r2, #2
 8011266:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801126c:	492d      	ldr	r1, [pc, #180]	; (8011324 <etharp_update_arp_entry+0x148>)
 801126e:	4613      	mov	r3, r2
 8011270:	005b      	lsls	r3, r3, #1
 8011272:	4413      	add	r3, r2
 8011274:	00db      	lsls	r3, r3, #3
 8011276:	440b      	add	r3, r1
 8011278:	3308      	adds	r3, #8
 801127a:	68fa      	ldr	r2, [r7, #12]
 801127c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801127e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011282:	4613      	mov	r3, r2
 8011284:	005b      	lsls	r3, r3, #1
 8011286:	4413      	add	r3, r2
 8011288:	00db      	lsls	r3, r3, #3
 801128a:	3308      	adds	r3, #8
 801128c:	4a25      	ldr	r2, [pc, #148]	; (8011324 <etharp_update_arp_entry+0x148>)
 801128e:	4413      	add	r3, r2
 8011290:	3304      	adds	r3, #4
 8011292:	2206      	movs	r2, #6
 8011294:	6879      	ldr	r1, [r7, #4]
 8011296:	4618      	mov	r0, r3
 8011298:	f002 f95e 	bl	8013558 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801129c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112a0:	4920      	ldr	r1, [pc, #128]	; (8011324 <etharp_update_arp_entry+0x148>)
 80112a2:	4613      	mov	r3, r2
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	4413      	add	r3, r2
 80112a8:	00db      	lsls	r3, r3, #3
 80112aa:	440b      	add	r3, r1
 80112ac:	3312      	adds	r3, #18
 80112ae:	2200      	movs	r2, #0
 80112b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80112b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112b6:	491b      	ldr	r1, [pc, #108]	; (8011324 <etharp_update_arp_entry+0x148>)
 80112b8:	4613      	mov	r3, r2
 80112ba:	005b      	lsls	r3, r3, #1
 80112bc:	4413      	add	r3, r2
 80112be:	00db      	lsls	r3, r3, #3
 80112c0:	440b      	add	r3, r1
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d021      	beq.n	801130c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80112c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112cc:	4915      	ldr	r1, [pc, #84]	; (8011324 <etharp_update_arp_entry+0x148>)
 80112ce:	4613      	mov	r3, r2
 80112d0:	005b      	lsls	r3, r3, #1
 80112d2:	4413      	add	r3, r2
 80112d4:	00db      	lsls	r3, r3, #3
 80112d6:	440b      	add	r3, r1
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80112dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80112e0:	4910      	ldr	r1, [pc, #64]	; (8011324 <etharp_update_arp_entry+0x148>)
 80112e2:	4613      	mov	r3, r2
 80112e4:	005b      	lsls	r3, r3, #1
 80112e6:	4413      	add	r3, r2
 80112e8:	00db      	lsls	r3, r3, #3
 80112ea:	440b      	add	r3, r1
 80112ec:	2200      	movs	r2, #0
 80112ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80112f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112fa:	9300      	str	r3, [sp, #0]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6939      	ldr	r1, [r7, #16]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f001 ff97 	bl	8013234 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011306:	6938      	ldr	r0, [r7, #16]
 8011308:	f7f9 fdec 	bl	800aee4 <pbuf_free>
  }
  return ERR_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	08016acc 	.word	0x08016acc
 801131c:	08016bc4 	.word	0x08016bc4
 8011320:	08016b44 	.word	0x08016b44
 8011324:	200105cc 	.word	0x200105cc

08011328 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011330:	2300      	movs	r3, #0
 8011332:	60fb      	str	r3, [r7, #12]
 8011334:	e01e      	b.n	8011374 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011336:	4913      	ldr	r1, [pc, #76]	; (8011384 <etharp_cleanup_netif+0x5c>)
 8011338:	68fa      	ldr	r2, [r7, #12]
 801133a:	4613      	mov	r3, r2
 801133c:	005b      	lsls	r3, r3, #1
 801133e:	4413      	add	r3, r2
 8011340:	00db      	lsls	r3, r3, #3
 8011342:	440b      	add	r3, r1
 8011344:	3314      	adds	r3, #20
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801134a:	7afb      	ldrb	r3, [r7, #11]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d00e      	beq.n	801136e <etharp_cleanup_netif+0x46>
 8011350:	490c      	ldr	r1, [pc, #48]	; (8011384 <etharp_cleanup_netif+0x5c>)
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	4613      	mov	r3, r2
 8011356:	005b      	lsls	r3, r3, #1
 8011358:	4413      	add	r3, r2
 801135a:	00db      	lsls	r3, r3, #3
 801135c:	440b      	add	r3, r1
 801135e:	3308      	adds	r3, #8
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	429a      	cmp	r2, r3
 8011366:	d102      	bne.n	801136e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011368:	68f8      	ldr	r0, [r7, #12]
 801136a:	f7ff fce5 	bl	8010d38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3301      	adds	r3, #1
 8011372:	60fb      	str	r3, [r7, #12]
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b09      	cmp	r3, #9
 8011378:	dddd      	ble.n	8011336 <etharp_cleanup_netif+0xe>
    }
  }
}
 801137a:	bf00      	nop
 801137c:	bf00      	nop
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	200105cc 	.word	0x200105cc

08011388 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011388:	b5b0      	push	{r4, r5, r7, lr}
 801138a:	b08a      	sub	sp, #40	; 0x28
 801138c:	af04      	add	r7, sp, #16
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d107      	bne.n	80113a8 <etharp_input+0x20>
 8011398:	4b3d      	ldr	r3, [pc, #244]	; (8011490 <etharp_input+0x108>)
 801139a:	f240 228a 	movw	r2, #650	; 0x28a
 801139e:	493d      	ldr	r1, [pc, #244]	; (8011494 <etharp_input+0x10c>)
 80113a0:	483d      	ldr	r0, [pc, #244]	; (8011498 <etharp_input+0x110>)
 80113a2:	f002 f8ef 	bl	8013584 <iprintf>
 80113a6:	e06f      	b.n	8011488 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113b8:	d10c      	bne.n	80113d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80113be:	2b06      	cmp	r3, #6
 80113c0:	d108      	bne.n	80113d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80113c6:	2b04      	cmp	r3, #4
 80113c8:	d104      	bne.n	80113d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	885b      	ldrh	r3, [r3, #2]
 80113ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80113d0:	2b08      	cmp	r3, #8
 80113d2:	d003      	beq.n	80113dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7f9 fd85 	bl	800aee4 <pbuf_free>
    return;
 80113da:	e055      	b.n	8011488 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	330e      	adds	r3, #14
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	3318      	adds	r3, #24
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	3304      	adds	r3, #4
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d102      	bne.n	80113fc <etharp_input+0x74>
    for_us = 0;
 80113f6:	2300      	movs	r3, #0
 80113f8:	75fb      	strb	r3, [r7, #23]
 80113fa:	e009      	b.n	8011410 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80113fc:	68ba      	ldr	r2, [r7, #8]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	3304      	adds	r3, #4
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	429a      	cmp	r2, r3
 8011406:	bf0c      	ite	eq
 8011408:	2301      	moveq	r3, #1
 801140a:	2300      	movne	r3, #0
 801140c:	b2db      	uxtb	r3, r3
 801140e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	f103 0208 	add.w	r2, r3, #8
 8011416:	7dfb      	ldrb	r3, [r7, #23]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d001      	beq.n	8011420 <etharp_input+0x98>
 801141c:	2301      	movs	r3, #1
 801141e:	e000      	b.n	8011422 <etharp_input+0x9a>
 8011420:	2302      	movs	r3, #2
 8011422:	f107 010c 	add.w	r1, r7, #12
 8011426:	6838      	ldr	r0, [r7, #0]
 8011428:	f7ff fed8 	bl	80111dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	88db      	ldrh	r3, [r3, #6]
 8011430:	b29b      	uxth	r3, r3
 8011432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011436:	d003      	beq.n	8011440 <etharp_input+0xb8>
 8011438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801143c:	d01e      	beq.n	801147c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801143e:	e020      	b.n	8011482 <etharp_input+0xfa>
      if (for_us) {
 8011440:	7dfb      	ldrb	r3, [r7, #23]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d01c      	beq.n	8011480 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801145c:	693a      	ldr	r2, [r7, #16]
 801145e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011460:	2102      	movs	r1, #2
 8011462:	9103      	str	r1, [sp, #12]
 8011464:	f107 010c 	add.w	r1, r7, #12
 8011468:	9102      	str	r1, [sp, #8]
 801146a:	9201      	str	r2, [sp, #4]
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	462b      	mov	r3, r5
 8011470:	4622      	mov	r2, r4
 8011472:	4601      	mov	r1, r0
 8011474:	6838      	ldr	r0, [r7, #0]
 8011476:	f000 faeb 	bl	8011a50 <etharp_raw>
      break;
 801147a:	e001      	b.n	8011480 <etharp_input+0xf8>
      break;
 801147c:	bf00      	nop
 801147e:	e000      	b.n	8011482 <etharp_input+0xfa>
      break;
 8011480:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7f9 fd2e 	bl	800aee4 <pbuf_free>
}
 8011488:	3718      	adds	r7, #24
 801148a:	46bd      	mov	sp, r7
 801148c:	bdb0      	pop	{r4, r5, r7, pc}
 801148e:	bf00      	nop
 8011490:	08016acc 	.word	0x08016acc
 8011494:	08016c1c 	.word	0x08016c1c
 8011498:	08016b44 	.word	0x08016b44

0801149c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b086      	sub	sp, #24
 80114a0:	af02      	add	r7, sp, #8
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	4613      	mov	r3, r2
 80114a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80114aa:	79fa      	ldrb	r2, [r7, #7]
 80114ac:	4944      	ldr	r1, [pc, #272]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 80114ae:	4613      	mov	r3, r2
 80114b0:	005b      	lsls	r3, r3, #1
 80114b2:	4413      	add	r3, r2
 80114b4:	00db      	lsls	r3, r3, #3
 80114b6:	440b      	add	r3, r1
 80114b8:	3314      	adds	r3, #20
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d806      	bhi.n	80114ce <etharp_output_to_arp_index+0x32>
 80114c0:	4b40      	ldr	r3, [pc, #256]	; (80115c4 <etharp_output_to_arp_index+0x128>)
 80114c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80114c6:	4940      	ldr	r1, [pc, #256]	; (80115c8 <etharp_output_to_arp_index+0x12c>)
 80114c8:	4840      	ldr	r0, [pc, #256]	; (80115cc <etharp_output_to_arp_index+0x130>)
 80114ca:	f002 f85b 	bl	8013584 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80114ce:	79fa      	ldrb	r2, [r7, #7]
 80114d0:	493b      	ldr	r1, [pc, #236]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 80114d2:	4613      	mov	r3, r2
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	4413      	add	r3, r2
 80114d8:	00db      	lsls	r3, r3, #3
 80114da:	440b      	add	r3, r1
 80114dc:	3314      	adds	r3, #20
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	2b02      	cmp	r3, #2
 80114e2:	d153      	bne.n	801158c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80114e4:	79fa      	ldrb	r2, [r7, #7]
 80114e6:	4936      	ldr	r1, [pc, #216]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 80114e8:	4613      	mov	r3, r2
 80114ea:	005b      	lsls	r3, r3, #1
 80114ec:	4413      	add	r3, r2
 80114ee:	00db      	lsls	r3, r3, #3
 80114f0:	440b      	add	r3, r1
 80114f2:	3312      	adds	r3, #18
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80114fa:	d919      	bls.n	8011530 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80114fc:	79fa      	ldrb	r2, [r7, #7]
 80114fe:	4613      	mov	r3, r2
 8011500:	005b      	lsls	r3, r3, #1
 8011502:	4413      	add	r3, r2
 8011504:	00db      	lsls	r3, r3, #3
 8011506:	4a2e      	ldr	r2, [pc, #184]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 8011508:	4413      	add	r3, r2
 801150a:	3304      	adds	r3, #4
 801150c:	4619      	mov	r1, r3
 801150e:	68f8      	ldr	r0, [r7, #12]
 8011510:	f000 fb4c 	bl	8011bac <etharp_request>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d138      	bne.n	801158c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801151a:	79fa      	ldrb	r2, [r7, #7]
 801151c:	4928      	ldr	r1, [pc, #160]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 801151e:	4613      	mov	r3, r2
 8011520:	005b      	lsls	r3, r3, #1
 8011522:	4413      	add	r3, r2
 8011524:	00db      	lsls	r3, r3, #3
 8011526:	440b      	add	r3, r1
 8011528:	3314      	adds	r3, #20
 801152a:	2203      	movs	r2, #3
 801152c:	701a      	strb	r2, [r3, #0]
 801152e:	e02d      	b.n	801158c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011530:	79fa      	ldrb	r2, [r7, #7]
 8011532:	4923      	ldr	r1, [pc, #140]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 8011534:	4613      	mov	r3, r2
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	4413      	add	r3, r2
 801153a:	00db      	lsls	r3, r3, #3
 801153c:	440b      	add	r3, r1
 801153e:	3312      	adds	r3, #18
 8011540:	881b      	ldrh	r3, [r3, #0]
 8011542:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011546:	d321      	bcc.n	801158c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011548:	79fa      	ldrb	r2, [r7, #7]
 801154a:	4613      	mov	r3, r2
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	4413      	add	r3, r2
 8011550:	00db      	lsls	r3, r3, #3
 8011552:	4a1b      	ldr	r2, [pc, #108]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 8011554:	4413      	add	r3, r2
 8011556:	1d19      	adds	r1, r3, #4
 8011558:	79fa      	ldrb	r2, [r7, #7]
 801155a:	4613      	mov	r3, r2
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	4413      	add	r3, r2
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	3308      	adds	r3, #8
 8011564:	4a16      	ldr	r2, [pc, #88]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 8011566:	4413      	add	r3, r2
 8011568:	3304      	adds	r3, #4
 801156a:	461a      	mov	r2, r3
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f000 fafb 	bl	8011b68 <etharp_request_dst>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d109      	bne.n	801158c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011578:	79fa      	ldrb	r2, [r7, #7]
 801157a:	4911      	ldr	r1, [pc, #68]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 801157c:	4613      	mov	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	4413      	add	r3, r2
 8011582:	00db      	lsls	r3, r3, #3
 8011584:	440b      	add	r3, r1
 8011586:	3314      	adds	r3, #20
 8011588:	2203      	movs	r2, #3
 801158a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011592:	79fa      	ldrb	r2, [r7, #7]
 8011594:	4613      	mov	r3, r2
 8011596:	005b      	lsls	r3, r3, #1
 8011598:	4413      	add	r3, r2
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	3308      	adds	r3, #8
 801159e:	4a08      	ldr	r2, [pc, #32]	; (80115c0 <etharp_output_to_arp_index+0x124>)
 80115a0:	4413      	add	r3, r2
 80115a2:	3304      	adds	r3, #4
 80115a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115a8:	9200      	str	r2, [sp, #0]
 80115aa:	460a      	mov	r2, r1
 80115ac:	68b9      	ldr	r1, [r7, #8]
 80115ae:	68f8      	ldr	r0, [r7, #12]
 80115b0:	f001 fe40 	bl	8013234 <ethernet_output>
 80115b4:	4603      	mov	r3, r0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	200105cc 	.word	0x200105cc
 80115c4:	08016acc 	.word	0x08016acc
 80115c8:	08016c3c 	.word	0x08016c3c
 80115cc:	08016b44 	.word	0x08016b44

080115d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b08a      	sub	sp, #40	; 0x28
 80115d4:	af02      	add	r7, sp, #8
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d106      	bne.n	80115f4 <etharp_output+0x24>
 80115e6:	4b73      	ldr	r3, [pc, #460]	; (80117b4 <etharp_output+0x1e4>)
 80115e8:	f240 321e 	movw	r2, #798	; 0x31e
 80115ec:	4972      	ldr	r1, [pc, #456]	; (80117b8 <etharp_output+0x1e8>)
 80115ee:	4873      	ldr	r0, [pc, #460]	; (80117bc <etharp_output+0x1ec>)
 80115f0:	f001 ffc8 	bl	8013584 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d106      	bne.n	8011608 <etharp_output+0x38>
 80115fa:	4b6e      	ldr	r3, [pc, #440]	; (80117b4 <etharp_output+0x1e4>)
 80115fc:	f240 321f 	movw	r2, #799	; 0x31f
 8011600:	496f      	ldr	r1, [pc, #444]	; (80117c0 <etharp_output+0x1f0>)
 8011602:	486e      	ldr	r0, [pc, #440]	; (80117bc <etharp_output+0x1ec>)
 8011604:	f001 ffbe 	bl	8013584 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d106      	bne.n	801161c <etharp_output+0x4c>
 801160e:	4b69      	ldr	r3, [pc, #420]	; (80117b4 <etharp_output+0x1e4>)
 8011610:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011614:	496b      	ldr	r1, [pc, #428]	; (80117c4 <etharp_output+0x1f4>)
 8011616:	4869      	ldr	r0, [pc, #420]	; (80117bc <etharp_output+0x1ec>)
 8011618:	f001 ffb4 	bl	8013584 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68f9      	ldr	r1, [r7, #12]
 8011622:	4618      	mov	r0, r3
 8011624:	f000 fef8 	bl	8012418 <ip4_addr_isbroadcast_u32>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d002      	beq.n	8011634 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801162e:	4b66      	ldr	r3, [pc, #408]	; (80117c8 <etharp_output+0x1f8>)
 8011630:	61fb      	str	r3, [r7, #28]
 8011632:	e0af      	b.n	8011794 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801163c:	2be0      	cmp	r3, #224	; 0xe0
 801163e:	d118      	bne.n	8011672 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011640:	2301      	movs	r3, #1
 8011642:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011644:	2300      	movs	r3, #0
 8011646:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011648:	235e      	movs	r3, #94	; 0x5e
 801164a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	3301      	adds	r3, #1
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011656:	b2db      	uxtb	r3, r3
 8011658:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	3302      	adds	r3, #2
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	3303      	adds	r3, #3
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801166a:	f107 0310 	add.w	r3, r7, #16
 801166e:	61fb      	str	r3, [r7, #28]
 8011670:	e090      	b.n	8011794 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681a      	ldr	r2, [r3, #0]
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	3304      	adds	r3, #4
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	405a      	eors	r2, r3
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	3308      	adds	r3, #8
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	4013      	ands	r3, r2
 8011686:	2b00      	cmp	r3, #0
 8011688:	d012      	beq.n	80116b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011690:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011694:	4293      	cmp	r3, r2
 8011696:	d00b      	beq.n	80116b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	330c      	adds	r3, #12
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d003      	beq.n	80116aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	330c      	adds	r3, #12
 80116a6:	61bb      	str	r3, [r7, #24]
 80116a8:	e002      	b.n	80116b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80116aa:	f06f 0303 	mvn.w	r3, #3
 80116ae:	e07d      	b.n	80117ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80116b0:	4b46      	ldr	r3, [pc, #280]	; (80117cc <etharp_output+0x1fc>)
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	4619      	mov	r1, r3
 80116b6:	4a46      	ldr	r2, [pc, #280]	; (80117d0 <etharp_output+0x200>)
 80116b8:	460b      	mov	r3, r1
 80116ba:	005b      	lsls	r3, r3, #1
 80116bc:	440b      	add	r3, r1
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	4413      	add	r3, r2
 80116c2:	3314      	adds	r3, #20
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	d925      	bls.n	8011716 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80116ca:	4b40      	ldr	r3, [pc, #256]	; (80117cc <etharp_output+0x1fc>)
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	4619      	mov	r1, r3
 80116d0:	4a3f      	ldr	r2, [pc, #252]	; (80117d0 <etharp_output+0x200>)
 80116d2:	460b      	mov	r3, r1
 80116d4:	005b      	lsls	r3, r3, #1
 80116d6:	440b      	add	r3, r1
 80116d8:	00db      	lsls	r3, r3, #3
 80116da:	4413      	add	r3, r2
 80116dc:	3308      	adds	r3, #8
 80116de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d117      	bne.n	8011716 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	4b38      	ldr	r3, [pc, #224]	; (80117cc <etharp_output+0x1fc>)
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	4618      	mov	r0, r3
 80116f0:	4937      	ldr	r1, [pc, #220]	; (80117d0 <etharp_output+0x200>)
 80116f2:	4603      	mov	r3, r0
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	4403      	add	r3, r0
 80116f8:	00db      	lsls	r3, r3, #3
 80116fa:	440b      	add	r3, r1
 80116fc:	3304      	adds	r3, #4
 80116fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011700:	429a      	cmp	r2, r3
 8011702:	d108      	bne.n	8011716 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011704:	4b31      	ldr	r3, [pc, #196]	; (80117cc <etharp_output+0x1fc>)
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	461a      	mov	r2, r3
 801170a:	68b9      	ldr	r1, [r7, #8]
 801170c:	68f8      	ldr	r0, [r7, #12]
 801170e:	f7ff fec5 	bl	801149c <etharp_output_to_arp_index>
 8011712:	4603      	mov	r3, r0
 8011714:	e04a      	b.n	80117ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011716:	2300      	movs	r3, #0
 8011718:	75fb      	strb	r3, [r7, #23]
 801171a:	e031      	b.n	8011780 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801171c:	7dfa      	ldrb	r2, [r7, #23]
 801171e:	492c      	ldr	r1, [pc, #176]	; (80117d0 <etharp_output+0x200>)
 8011720:	4613      	mov	r3, r2
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	4413      	add	r3, r2
 8011726:	00db      	lsls	r3, r3, #3
 8011728:	440b      	add	r3, r1
 801172a:	3314      	adds	r3, #20
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	2b01      	cmp	r3, #1
 8011730:	d923      	bls.n	801177a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011732:	7dfa      	ldrb	r2, [r7, #23]
 8011734:	4926      	ldr	r1, [pc, #152]	; (80117d0 <etharp_output+0x200>)
 8011736:	4613      	mov	r3, r2
 8011738:	005b      	lsls	r3, r3, #1
 801173a:	4413      	add	r3, r2
 801173c:	00db      	lsls	r3, r3, #3
 801173e:	440b      	add	r3, r1
 8011740:	3308      	adds	r3, #8
 8011742:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	429a      	cmp	r2, r3
 8011748:	d117      	bne.n	801177a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	6819      	ldr	r1, [r3, #0]
 801174e:	7dfa      	ldrb	r2, [r7, #23]
 8011750:	481f      	ldr	r0, [pc, #124]	; (80117d0 <etharp_output+0x200>)
 8011752:	4613      	mov	r3, r2
 8011754:	005b      	lsls	r3, r3, #1
 8011756:	4413      	add	r3, r2
 8011758:	00db      	lsls	r3, r3, #3
 801175a:	4403      	add	r3, r0
 801175c:	3304      	adds	r3, #4
 801175e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011760:	4299      	cmp	r1, r3
 8011762:	d10a      	bne.n	801177a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011764:	4a19      	ldr	r2, [pc, #100]	; (80117cc <etharp_output+0x1fc>)
 8011766:	7dfb      	ldrb	r3, [r7, #23]
 8011768:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801176a:	7dfb      	ldrb	r3, [r7, #23]
 801176c:	461a      	mov	r2, r3
 801176e:	68b9      	ldr	r1, [r7, #8]
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	f7ff fe93 	bl	801149c <etharp_output_to_arp_index>
 8011776:	4603      	mov	r3, r0
 8011778:	e018      	b.n	80117ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801177a:	7dfb      	ldrb	r3, [r7, #23]
 801177c:	3301      	adds	r3, #1
 801177e:	75fb      	strb	r3, [r7, #23]
 8011780:	7dfb      	ldrb	r3, [r7, #23]
 8011782:	2b09      	cmp	r3, #9
 8011784:	d9ca      	bls.n	801171c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011786:	68ba      	ldr	r2, [r7, #8]
 8011788:	69b9      	ldr	r1, [r7, #24]
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f000 f822 	bl	80117d4 <etharp_query>
 8011790:	4603      	mov	r3, r0
 8011792:	e00b      	b.n	80117ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801179a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	68b9      	ldr	r1, [r7, #8]
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f001 fd45 	bl	8013234 <ethernet_output>
 80117aa:	4603      	mov	r3, r0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3720      	adds	r7, #32
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	08016acc 	.word	0x08016acc
 80117b8:	08016c1c 	.word	0x08016c1c
 80117bc:	08016b44 	.word	0x08016b44
 80117c0:	08016c6c 	.word	0x08016c6c
 80117c4:	08016c0c 	.word	0x08016c0c
 80117c8:	080172c8 	.word	0x080172c8
 80117cc:	200106bc 	.word	0x200106bc
 80117d0:	200105cc 	.word	0x200105cc

080117d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b08c      	sub	sp, #48	; 0x30
 80117d8:	af02      	add	r7, sp, #8
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	3326      	adds	r3, #38	; 0x26
 80117e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80117e6:	23ff      	movs	r3, #255	; 0xff
 80117e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80117ec:	2300      	movs	r3, #0
 80117ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	68f9      	ldr	r1, [r7, #12]
 80117f6:	4618      	mov	r0, r3
 80117f8:	f000 fe0e 	bl	8012418 <ip4_addr_isbroadcast_u32>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d10c      	bne.n	801181c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801180a:	2be0      	cmp	r3, #224	; 0xe0
 801180c:	d006      	beq.n	801181c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d003      	beq.n	801181c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d102      	bne.n	8011822 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801181c:	f06f 030f 	mvn.w	r3, #15
 8011820:	e101      	b.n	8011a26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	2101      	movs	r1, #1
 8011826:	68b8      	ldr	r0, [r7, #8]
 8011828:	f7ff fb60 	bl	8010eec <etharp_find_entry>
 801182c:	4603      	mov	r3, r0
 801182e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011834:	2b00      	cmp	r3, #0
 8011836:	da02      	bge.n	801183e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011838:	8a7b      	ldrh	r3, [r7, #18]
 801183a:	b25b      	sxtb	r3, r3
 801183c:	e0f3      	b.n	8011a26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801183e:	8a7b      	ldrh	r3, [r7, #18]
 8011840:	2b7e      	cmp	r3, #126	; 0x7e
 8011842:	d906      	bls.n	8011852 <etharp_query+0x7e>
 8011844:	4b7a      	ldr	r3, [pc, #488]	; (8011a30 <etharp_query+0x25c>)
 8011846:	f240 32c1 	movw	r2, #961	; 0x3c1
 801184a:	497a      	ldr	r1, [pc, #488]	; (8011a34 <etharp_query+0x260>)
 801184c:	487a      	ldr	r0, [pc, #488]	; (8011a38 <etharp_query+0x264>)
 801184e:	f001 fe99 	bl	8013584 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011852:	8a7b      	ldrh	r3, [r7, #18]
 8011854:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011856:	7c7a      	ldrb	r2, [r7, #17]
 8011858:	4978      	ldr	r1, [pc, #480]	; (8011a3c <etharp_query+0x268>)
 801185a:	4613      	mov	r3, r2
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	4413      	add	r3, r2
 8011860:	00db      	lsls	r3, r3, #3
 8011862:	440b      	add	r3, r1
 8011864:	3314      	adds	r3, #20
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d115      	bne.n	8011898 <etharp_query+0xc4>
    is_new_entry = 1;
 801186c:	2301      	movs	r3, #1
 801186e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011870:	7c7a      	ldrb	r2, [r7, #17]
 8011872:	4972      	ldr	r1, [pc, #456]	; (8011a3c <etharp_query+0x268>)
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	00db      	lsls	r3, r3, #3
 801187c:	440b      	add	r3, r1
 801187e:	3314      	adds	r3, #20
 8011880:	2201      	movs	r2, #1
 8011882:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011884:	7c7a      	ldrb	r2, [r7, #17]
 8011886:	496d      	ldr	r1, [pc, #436]	; (8011a3c <etharp_query+0x268>)
 8011888:	4613      	mov	r3, r2
 801188a:	005b      	lsls	r3, r3, #1
 801188c:	4413      	add	r3, r2
 801188e:	00db      	lsls	r3, r3, #3
 8011890:	440b      	add	r3, r1
 8011892:	3308      	adds	r3, #8
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011898:	7c7a      	ldrb	r2, [r7, #17]
 801189a:	4968      	ldr	r1, [pc, #416]	; (8011a3c <etharp_query+0x268>)
 801189c:	4613      	mov	r3, r2
 801189e:	005b      	lsls	r3, r3, #1
 80118a0:	4413      	add	r3, r2
 80118a2:	00db      	lsls	r3, r3, #3
 80118a4:	440b      	add	r3, r1
 80118a6:	3314      	adds	r3, #20
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d011      	beq.n	80118d2 <etharp_query+0xfe>
 80118ae:	7c7a      	ldrb	r2, [r7, #17]
 80118b0:	4962      	ldr	r1, [pc, #392]	; (8011a3c <etharp_query+0x268>)
 80118b2:	4613      	mov	r3, r2
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	4413      	add	r3, r2
 80118b8:	00db      	lsls	r3, r3, #3
 80118ba:	440b      	add	r3, r1
 80118bc:	3314      	adds	r3, #20
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d806      	bhi.n	80118d2 <etharp_query+0xfe>
 80118c4:	4b5a      	ldr	r3, [pc, #360]	; (8011a30 <etharp_query+0x25c>)
 80118c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80118ca:	495d      	ldr	r1, [pc, #372]	; (8011a40 <etharp_query+0x26c>)
 80118cc:	485a      	ldr	r0, [pc, #360]	; (8011a38 <etharp_query+0x264>)
 80118ce:	f001 fe59 	bl	8013584 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80118d2:	6a3b      	ldr	r3, [r7, #32]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d102      	bne.n	80118de <etharp_query+0x10a>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d10c      	bne.n	80118f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80118de:	68b9      	ldr	r1, [r7, #8]
 80118e0:	68f8      	ldr	r0, [r7, #12]
 80118e2:	f000 f963 	bl	8011bac <etharp_request>
 80118e6:	4603      	mov	r3, r0
 80118e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d102      	bne.n	80118f8 <etharp_query+0x124>
      return result;
 80118f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80118f6:	e096      	b.n	8011a26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d106      	bne.n	801190c <etharp_query+0x138>
 80118fe:	4b4c      	ldr	r3, [pc, #304]	; (8011a30 <etharp_query+0x25c>)
 8011900:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011904:	494f      	ldr	r1, [pc, #316]	; (8011a44 <etharp_query+0x270>)
 8011906:	484c      	ldr	r0, [pc, #304]	; (8011a38 <etharp_query+0x264>)
 8011908:	f001 fe3c 	bl	8013584 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801190c:	7c7a      	ldrb	r2, [r7, #17]
 801190e:	494b      	ldr	r1, [pc, #300]	; (8011a3c <etharp_query+0x268>)
 8011910:	4613      	mov	r3, r2
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	4413      	add	r3, r2
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	440b      	add	r3, r1
 801191a:	3314      	adds	r3, #20
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	2b01      	cmp	r3, #1
 8011920:	d917      	bls.n	8011952 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011922:	4a49      	ldr	r2, [pc, #292]	; (8011a48 <etharp_query+0x274>)
 8011924:	7c7b      	ldrb	r3, [r7, #17]
 8011926:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011928:	7c7a      	ldrb	r2, [r7, #17]
 801192a:	4613      	mov	r3, r2
 801192c:	005b      	lsls	r3, r3, #1
 801192e:	4413      	add	r3, r2
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	3308      	adds	r3, #8
 8011934:	4a41      	ldr	r2, [pc, #260]	; (8011a3c <etharp_query+0x268>)
 8011936:	4413      	add	r3, r2
 8011938:	3304      	adds	r3, #4
 801193a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801193e:	9200      	str	r2, [sp, #0]
 8011940:	697a      	ldr	r2, [r7, #20]
 8011942:	6879      	ldr	r1, [r7, #4]
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f001 fc75 	bl	8013234 <ethernet_output>
 801194a:	4603      	mov	r3, r0
 801194c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011950:	e067      	b.n	8011a22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011952:	7c7a      	ldrb	r2, [r7, #17]
 8011954:	4939      	ldr	r1, [pc, #228]	; (8011a3c <etharp_query+0x268>)
 8011956:	4613      	mov	r3, r2
 8011958:	005b      	lsls	r3, r3, #1
 801195a:	4413      	add	r3, r2
 801195c:	00db      	lsls	r3, r3, #3
 801195e:	440b      	add	r3, r1
 8011960:	3314      	adds	r3, #20
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	2b01      	cmp	r3, #1
 8011966:	d15c      	bne.n	8011a22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011968:	2300      	movs	r3, #0
 801196a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011970:	e01c      	b.n	80119ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011972:	69fb      	ldr	r3, [r7, #28]
 8011974:	895a      	ldrh	r2, [r3, #10]
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	891b      	ldrh	r3, [r3, #8]
 801197a:	429a      	cmp	r2, r3
 801197c:	d10a      	bne.n	8011994 <etharp_query+0x1c0>
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d006      	beq.n	8011994 <etharp_query+0x1c0>
 8011986:	4b2a      	ldr	r3, [pc, #168]	; (8011a30 <etharp_query+0x25c>)
 8011988:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801198c:	492f      	ldr	r1, [pc, #188]	; (8011a4c <etharp_query+0x278>)
 801198e:	482a      	ldr	r0, [pc, #168]	; (8011a38 <etharp_query+0x264>)
 8011990:	f001 fdf8 	bl	8013584 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	7b1b      	ldrb	r3, [r3, #12]
 8011998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801199c:	2b00      	cmp	r3, #0
 801199e:	d002      	beq.n	80119a6 <etharp_query+0x1d2>
        copy_needed = 1;
 80119a0:	2301      	movs	r3, #1
 80119a2:	61bb      	str	r3, [r7, #24]
        break;
 80119a4:	e005      	b.n	80119b2 <etharp_query+0x1de>
      }
      p = p->next;
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d1df      	bne.n	8011972 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80119b2:	69bb      	ldr	r3, [r7, #24]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d007      	beq.n	80119c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 80119be:	200e      	movs	r0, #14
 80119c0:	f7f9 fcf8 	bl	800b3b4 <pbuf_clone>
 80119c4:	61f8      	str	r0, [r7, #28]
 80119c6:	e004      	b.n	80119d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80119cc:	69f8      	ldr	r0, [r7, #28]
 80119ce:	f7f9 fb2f 	bl	800b030 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d021      	beq.n	8011a1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80119d8:	7c7a      	ldrb	r2, [r7, #17]
 80119da:	4918      	ldr	r1, [pc, #96]	; (8011a3c <etharp_query+0x268>)
 80119dc:	4613      	mov	r3, r2
 80119de:	005b      	lsls	r3, r3, #1
 80119e0:	4413      	add	r3, r2
 80119e2:	00db      	lsls	r3, r3, #3
 80119e4:	440b      	add	r3, r1
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00a      	beq.n	8011a02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80119ec:	7c7a      	ldrb	r2, [r7, #17]
 80119ee:	4913      	ldr	r1, [pc, #76]	; (8011a3c <etharp_query+0x268>)
 80119f0:	4613      	mov	r3, r2
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	4413      	add	r3, r2
 80119f6:	00db      	lsls	r3, r3, #3
 80119f8:	440b      	add	r3, r1
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7f9 fa71 	bl	800aee4 <pbuf_free>
      }
      arp_table[i].q = p;
 8011a02:	7c7a      	ldrb	r2, [r7, #17]
 8011a04:	490d      	ldr	r1, [pc, #52]	; (8011a3c <etharp_query+0x268>)
 8011a06:	4613      	mov	r3, r2
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	4413      	add	r3, r2
 8011a0c:	00db      	lsls	r3, r3, #3
 8011a0e:	440b      	add	r3, r1
 8011a10:	69fa      	ldr	r2, [r7, #28]
 8011a12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011a14:	2300      	movs	r3, #0
 8011a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a1a:	e002      	b.n	8011a22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011a1c:	23ff      	movs	r3, #255	; 0xff
 8011a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3728      	adds	r7, #40	; 0x28
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	08016acc 	.word	0x08016acc
 8011a34:	08016c78 	.word	0x08016c78
 8011a38:	08016b44 	.word	0x08016b44
 8011a3c:	200105cc 	.word	0x200105cc
 8011a40:	08016c88 	.word	0x08016c88
 8011a44:	08016c6c 	.word	0x08016c6c
 8011a48:	200106bc 	.word	0x200106bc
 8011a4c:	08016cb0 	.word	0x08016cb0

08011a50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b08a      	sub	sp, #40	; 0x28
 8011a54:	af02      	add	r7, sp, #8
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
 8011a5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d106      	bne.n	8011a76 <etharp_raw+0x26>
 8011a68:	4b3a      	ldr	r3, [pc, #232]	; (8011b54 <etharp_raw+0x104>)
 8011a6a:	f240 4257 	movw	r2, #1111	; 0x457
 8011a6e:	493a      	ldr	r1, [pc, #232]	; (8011b58 <etharp_raw+0x108>)
 8011a70:	483a      	ldr	r0, [pc, #232]	; (8011b5c <etharp_raw+0x10c>)
 8011a72:	f001 fd87 	bl	8013584 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011a76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a7a:	211c      	movs	r1, #28
 8011a7c:	200e      	movs	r0, #14
 8011a7e:	f7f8 ff4d 	bl	800a91c <pbuf_alloc>
 8011a82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d102      	bne.n	8011a90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a8e:	e05d      	b.n	8011b4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	895b      	ldrh	r3, [r3, #10]
 8011a94:	2b1b      	cmp	r3, #27
 8011a96:	d806      	bhi.n	8011aa6 <etharp_raw+0x56>
 8011a98:	4b2e      	ldr	r3, [pc, #184]	; (8011b54 <etharp_raw+0x104>)
 8011a9a:	f240 4262 	movw	r2, #1122	; 0x462
 8011a9e:	4930      	ldr	r1, [pc, #192]	; (8011b60 <etharp_raw+0x110>)
 8011aa0:	482e      	ldr	r0, [pc, #184]	; (8011b5c <etharp_raw+0x10c>)
 8011aa2:	f001 fd6f 	bl	8013584 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011aac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7f7 fe16 	bl	80096e0 <lwip_htons>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011ac2:	2b06      	cmp	r3, #6
 8011ac4:	d006      	beq.n	8011ad4 <etharp_raw+0x84>
 8011ac6:	4b23      	ldr	r3, [pc, #140]	; (8011b54 <etharp_raw+0x104>)
 8011ac8:	f240 4269 	movw	r2, #1129	; 0x469
 8011acc:	4925      	ldr	r1, [pc, #148]	; (8011b64 <etharp_raw+0x114>)
 8011ace:	4823      	ldr	r0, [pc, #140]	; (8011b5c <etharp_raw+0x10c>)
 8011ad0:	f001 fd58 	bl	8013584 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	2206      	movs	r2, #6
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f001 fd3b 	bl	8013558 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	3312      	adds	r3, #18
 8011ae6:	2206      	movs	r2, #6
 8011ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011aea:	4618      	mov	r0, r3
 8011aec:	f001 fd34 	bl	8013558 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	330e      	adds	r3, #14
 8011af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011af6:	6812      	ldr	r2, [r2, #0]
 8011af8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	3318      	adds	r3, #24
 8011afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b00:	6812      	ldr	r2, [r2, #0]
 8011b02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	2200      	movs	r2, #0
 8011b08:	701a      	strb	r2, [r3, #0]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f042 0201 	orr.w	r2, r2, #1
 8011b10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f042 0208 	orr.w	r2, r2, #8
 8011b1a:	709a      	strb	r2, [r3, #2]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	2206      	movs	r2, #6
 8011b24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	2204      	movs	r2, #4
 8011b2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011b2c:	f640 0306 	movw	r3, #2054	; 0x806
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	69b9      	ldr	r1, [r7, #24]
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f001 fb7b 	bl	8013234 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011b3e:	69b8      	ldr	r0, [r7, #24]
 8011b40:	f7f9 f9d0 	bl	800aee4 <pbuf_free>
  p = NULL;
 8011b44:	2300      	movs	r3, #0
 8011b46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011b48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3720      	adds	r7, #32
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	08016acc 	.word	0x08016acc
 8011b58:	08016c1c 	.word	0x08016c1c
 8011b5c:	08016b44 	.word	0x08016b44
 8011b60:	08016ccc 	.word	0x08016ccc
 8011b64:	08016d00 	.word	0x08016d00

08011b68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b088      	sub	sp, #32
 8011b6c:	af04      	add	r7, sp, #16
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011b84:	2201      	movs	r2, #1
 8011b86:	9203      	str	r2, [sp, #12]
 8011b88:	68ba      	ldr	r2, [r7, #8]
 8011b8a:	9202      	str	r2, [sp, #8]
 8011b8c:	4a06      	ldr	r2, [pc, #24]	; (8011ba8 <etharp_request_dst+0x40>)
 8011b8e:	9201      	str	r2, [sp, #4]
 8011b90:	9300      	str	r3, [sp, #0]
 8011b92:	4603      	mov	r3, r0
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	68f8      	ldr	r0, [r7, #12]
 8011b98:	f7ff ff5a 	bl	8011a50 <etharp_raw>
 8011b9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	080172d0 	.word	0x080172d0

08011bac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011bb6:	4a05      	ldr	r2, [pc, #20]	; (8011bcc <etharp_request+0x20>)
 8011bb8:	6839      	ldr	r1, [r7, #0]
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f7ff ffd4 	bl	8011b68 <etharp_request_dst>
 8011bc0:	4603      	mov	r3, r0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	080172c8 	.word	0x080172c8

08011bd0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b08e      	sub	sp, #56	; 0x38
 8011bd4:	af04      	add	r7, sp, #16
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011bda:	4b79      	ldr	r3, [pc, #484]	; (8011dc0 <icmp_input+0x1f0>)
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	f003 030f 	and.w	r3, r3, #15
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	b2db      	uxtb	r3, r3
 8011bee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011bf2:	2b13      	cmp	r3, #19
 8011bf4:	f240 80cd 	bls.w	8011d92 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	895b      	ldrh	r3, [r3, #10]
 8011bfc:	2b03      	cmp	r3, #3
 8011bfe:	f240 80ca 	bls.w	8011d96 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011c0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f000 80b7 	beq.w	8011d84 <icmp_input+0x1b4>
 8011c16:	2b08      	cmp	r3, #8
 8011c18:	f040 80b7 	bne.w	8011d8a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011c1c:	4b69      	ldr	r3, [pc, #420]	; (8011dc4 <icmp_input+0x1f4>)
 8011c1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c20:	4b67      	ldr	r3, [pc, #412]	; (8011dc0 <icmp_input+0x1f0>)
 8011c22:	695b      	ldr	r3, [r3, #20]
 8011c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c28:	2be0      	cmp	r3, #224	; 0xe0
 8011c2a:	f000 80bb 	beq.w	8011da4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011c2e:	4b64      	ldr	r3, [pc, #400]	; (8011dc0 <icmp_input+0x1f0>)
 8011c30:	695b      	ldr	r3, [r3, #20]
 8011c32:	4a63      	ldr	r2, [pc, #396]	; (8011dc0 <icmp_input+0x1f0>)
 8011c34:	6812      	ldr	r2, [r2, #0]
 8011c36:	4611      	mov	r1, r2
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f000 fbed 	bl	8012418 <ip4_addr_isbroadcast_u32>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f040 80b1 	bne.w	8011da8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	891b      	ldrh	r3, [r3, #8]
 8011c4a:	2b07      	cmp	r3, #7
 8011c4c:	f240 80a5 	bls.w	8011d9a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c52:	330e      	adds	r3, #14
 8011c54:	4619      	mov	r1, r3
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7f9 f8ae 	bl	800adb8 <pbuf_add_header>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d04b      	beq.n	8011cfa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	891a      	ldrh	r2, [r3, #8]
 8011c66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c68:	4413      	add	r3, r2
 8011c6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	891b      	ldrh	r3, [r3, #8]
 8011c70:	8b7a      	ldrh	r2, [r7, #26]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	f0c0 809a 	bcc.w	8011dac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011c78:	8b7b      	ldrh	r3, [r7, #26]
 8011c7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c7e:	4619      	mov	r1, r3
 8011c80:	200e      	movs	r0, #14
 8011c82:	f7f8 fe4b 	bl	800a91c <pbuf_alloc>
 8011c86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f000 8090 	beq.w	8011db0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	895b      	ldrh	r3, [r3, #10]
 8011c94:	461a      	mov	r2, r3
 8011c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c98:	3308      	adds	r3, #8
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d203      	bcs.n	8011ca6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011c9e:	6978      	ldr	r0, [r7, #20]
 8011ca0:	f7f9 f920 	bl	800aee4 <pbuf_free>
          goto icmperr;
 8011ca4:	e085      	b.n	8011db2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f001 fc52 	bl	8013558 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011cb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	6978      	ldr	r0, [r7, #20]
 8011cba:	f7f9 f88d 	bl	800add8 <pbuf_remove_header>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d009      	beq.n	8011cd8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011cc4:	4b40      	ldr	r3, [pc, #256]	; (8011dc8 <icmp_input+0x1f8>)
 8011cc6:	22b6      	movs	r2, #182	; 0xb6
 8011cc8:	4940      	ldr	r1, [pc, #256]	; (8011dcc <icmp_input+0x1fc>)
 8011cca:	4841      	ldr	r0, [pc, #260]	; (8011dd0 <icmp_input+0x200>)
 8011ccc:	f001 fc5a 	bl	8013584 <iprintf>
          pbuf_free(r);
 8011cd0:	6978      	ldr	r0, [r7, #20]
 8011cd2:	f7f9 f907 	bl	800aee4 <pbuf_free>
          goto icmperr;
 8011cd6:	e06c      	b.n	8011db2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011cd8:	6879      	ldr	r1, [r7, #4]
 8011cda:	6978      	ldr	r0, [r7, #20]
 8011cdc:	f7f9 fa26 	bl	800b12c <pbuf_copy>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d003      	beq.n	8011cee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011ce6:	6978      	ldr	r0, [r7, #20]
 8011ce8:	f7f9 f8fc 	bl	800aee4 <pbuf_free>
          goto icmperr;
 8011cec:	e061      	b.n	8011db2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7f9 f8f8 	bl	800aee4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	607b      	str	r3, [r7, #4]
 8011cf8:	e00f      	b.n	8011d1a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cfc:	330e      	adds	r3, #14
 8011cfe:	4619      	mov	r1, r3
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f7f9 f869 	bl	800add8 <pbuf_remove_header>
 8011d06:	4603      	mov	r3, r0
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d006      	beq.n	8011d1a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011d0c:	4b2e      	ldr	r3, [pc, #184]	; (8011dc8 <icmp_input+0x1f8>)
 8011d0e:	22c7      	movs	r2, #199	; 0xc7
 8011d10:	4930      	ldr	r1, [pc, #192]	; (8011dd4 <icmp_input+0x204>)
 8011d12:	482f      	ldr	r0, [pc, #188]	; (8011dd0 <icmp_input+0x200>)
 8011d14:	f001 fc36 	bl	8013584 <iprintf>
          goto icmperr;
 8011d18:	e04b      	b.n	8011db2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011d20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d22:	4619      	mov	r1, r3
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7f9 f847 	bl	800adb8 <pbuf_add_header>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d12b      	bne.n	8011d88 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011d3e:	4b20      	ldr	r3, [pc, #128]	; (8011dc0 <icmp_input+0x1f0>)
 8011d40:	691a      	ldr	r2, [r3, #16]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	709a      	strb	r2, [r3, #2]
 8011d52:	2200      	movs	r2, #0
 8011d54:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	22ff      	movs	r2, #255	; 0xff
 8011d5a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	729a      	strb	r2, [r3, #10]
 8011d62:	2200      	movs	r2, #0
 8011d64:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	9302      	str	r3, [sp, #8]
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	9301      	str	r3, [sp, #4]
 8011d6e:	2300      	movs	r3, #0
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	23ff      	movs	r3, #255	; 0xff
 8011d74:	2200      	movs	r2, #0
 8011d76:	69f9      	ldr	r1, [r7, #28]
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 fa75 	bl	8012268 <ip4_output_if>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011d82:	e001      	b.n	8011d88 <icmp_input+0x1b8>
      break;
 8011d84:	bf00      	nop
 8011d86:	e000      	b.n	8011d8a <icmp_input+0x1ba>
      break;
 8011d88:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7f9 f8aa 	bl	800aee4 <pbuf_free>
  return;
 8011d90:	e013      	b.n	8011dba <icmp_input+0x1ea>
    goto lenerr;
 8011d92:	bf00      	nop
 8011d94:	e002      	b.n	8011d9c <icmp_input+0x1cc>
    goto lenerr;
 8011d96:	bf00      	nop
 8011d98:	e000      	b.n	8011d9c <icmp_input+0x1cc>
        goto lenerr;
 8011d9a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f7f9 f8a1 	bl	800aee4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011da2:	e00a      	b.n	8011dba <icmp_input+0x1ea>
        goto icmperr;
 8011da4:	bf00      	nop
 8011da6:	e004      	b.n	8011db2 <icmp_input+0x1e2>
        goto icmperr;
 8011da8:	bf00      	nop
 8011daa:	e002      	b.n	8011db2 <icmp_input+0x1e2>
          goto icmperr;
 8011dac:	bf00      	nop
 8011dae:	e000      	b.n	8011db2 <icmp_input+0x1e2>
          goto icmperr;
 8011db0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7f9 f896 	bl	800aee4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011db8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011dba:	3728      	adds	r7, #40	; 0x28
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	20009470 	.word	0x20009470
 8011dc4:	20009484 	.word	0x20009484
 8011dc8:	08016d44 	.word	0x08016d44
 8011dcc:	08016d7c 	.word	0x08016d7c
 8011dd0:	08016db4 	.word	0x08016db4
 8011dd4:	08016ddc 	.word	0x08016ddc

08011dd8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	460b      	mov	r3, r1
 8011de2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011de4:	78fb      	ldrb	r3, [r7, #3]
 8011de6:	461a      	mov	r2, r3
 8011de8:	2103      	movs	r1, #3
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 f814 	bl	8011e18 <icmp_send_response>
}
 8011df0:	bf00      	nop
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	460b      	mov	r3, r1
 8011e02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011e04:	78fb      	ldrb	r3, [r7, #3]
 8011e06:	461a      	mov	r2, r3
 8011e08:	210b      	movs	r1, #11
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f000 f804 	bl	8011e18 <icmp_send_response>
}
 8011e10:	bf00      	nop
 8011e12:	3708      	adds	r7, #8
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b08c      	sub	sp, #48	; 0x30
 8011e1c:	af04      	add	r7, sp, #16
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	460b      	mov	r3, r1
 8011e22:	70fb      	strb	r3, [r7, #3]
 8011e24:	4613      	mov	r3, r2
 8011e26:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011e28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e2c:	2124      	movs	r1, #36	; 0x24
 8011e2e:	2022      	movs	r0, #34	; 0x22
 8011e30:	f7f8 fd74 	bl	800a91c <pbuf_alloc>
 8011e34:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d04c      	beq.n	8011ed6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	895b      	ldrh	r3, [r3, #10]
 8011e40:	2b23      	cmp	r3, #35	; 0x23
 8011e42:	d806      	bhi.n	8011e52 <icmp_send_response+0x3a>
 8011e44:	4b26      	ldr	r3, [pc, #152]	; (8011ee0 <icmp_send_response+0xc8>)
 8011e46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011e4a:	4926      	ldr	r1, [pc, #152]	; (8011ee4 <icmp_send_response+0xcc>)
 8011e4c:	4826      	ldr	r0, [pc, #152]	; (8011ee8 <icmp_send_response+0xd0>)
 8011e4e:	f001 fb99 	bl	8013584 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011e58:	69fb      	ldr	r3, [r7, #28]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	78fa      	ldrb	r2, [r7, #3]
 8011e62:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	78ba      	ldrb	r2, [r7, #2]
 8011e68:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	711a      	strb	r2, [r3, #4]
 8011e70:	2200      	movs	r2, #0
 8011e72:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	2200      	movs	r2, #0
 8011e78:	719a      	strb	r2, [r3, #6]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	f103 0008 	add.w	r0, r3, #8
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	221c      	movs	r2, #28
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	f001 fb63 	bl	8013558 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011e98:	f107 030c 	add.w	r3, r7, #12
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f000 f825 	bl	8011eec <ip4_route>
 8011ea2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d011      	beq.n	8011ece <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	2200      	movs	r2, #0
 8011eae:	709a      	strb	r2, [r3, #2]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011eb4:	f107 020c 	add.w	r2, r7, #12
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	9302      	str	r3, [sp, #8]
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	9301      	str	r3, [sp, #4]
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	23ff      	movs	r3, #255	; 0xff
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	69f8      	ldr	r0, [r7, #28]
 8011eca:	f000 f9cd 	bl	8012268 <ip4_output_if>
  }
  pbuf_free(q);
 8011ece:	69f8      	ldr	r0, [r7, #28]
 8011ed0:	f7f9 f808 	bl	800aee4 <pbuf_free>
 8011ed4:	e000      	b.n	8011ed8 <icmp_send_response+0xc0>
    return;
 8011ed6:	bf00      	nop
}
 8011ed8:	3720      	adds	r7, #32
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	08016d44 	.word	0x08016d44
 8011ee4:	08016e10 	.word	0x08016e10
 8011ee8:	08016db4 	.word	0x08016db4

08011eec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011eec:	b480      	push	{r7}
 8011eee:	b085      	sub	sp, #20
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011ef4:	4b33      	ldr	r3, [pc, #204]	; (8011fc4 <ip4_route+0xd8>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	60fb      	str	r3, [r7, #12]
 8011efa:	e036      	b.n	8011f6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d02b      	beq.n	8011f64 <ip4_route+0x78>
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f12:	089b      	lsrs	r3, r3, #2
 8011f14:	f003 0301 	and.w	r3, r3, #1
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d022      	beq.n	8011f64 <ip4_route+0x78>
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	3304      	adds	r3, #4
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d01d      	beq.n	8011f64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681a      	ldr	r2, [r3, #0]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	3304      	adds	r3, #4
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	405a      	eors	r2, r3
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	3308      	adds	r3, #8
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	4013      	ands	r3, r2
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d101      	bne.n	8011f44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	e038      	b.n	8011fb6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f4a:	f003 0302 	and.w	r3, r3, #2
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d108      	bne.n	8011f64 <ip4_route+0x78>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	330c      	adds	r3, #12
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d101      	bne.n	8011f64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	e028      	b.n	8011fb6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	60fb      	str	r3, [r7, #12]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1c5      	bne.n	8011efc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011f70:	4b15      	ldr	r3, [pc, #84]	; (8011fc8 <ip4_route+0xdc>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d01a      	beq.n	8011fae <ip4_route+0xc2>
 8011f78:	4b13      	ldr	r3, [pc, #76]	; (8011fc8 <ip4_route+0xdc>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f80:	f003 0301 	and.w	r3, r3, #1
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d012      	beq.n	8011fae <ip4_route+0xc2>
 8011f88:	4b0f      	ldr	r3, [pc, #60]	; (8011fc8 <ip4_route+0xdc>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f90:	f003 0304 	and.w	r3, r3, #4
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d00a      	beq.n	8011fae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011f98:	4b0b      	ldr	r3, [pc, #44]	; (8011fc8 <ip4_route+0xdc>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	3304      	adds	r3, #4
 8011f9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d004      	beq.n	8011fae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	2b7f      	cmp	r3, #127	; 0x7f
 8011fac:	d101      	bne.n	8011fb2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	e001      	b.n	8011fb6 <ip4_route+0xca>
  }

  return netif_default;
 8011fb2:	4b05      	ldr	r3, [pc, #20]	; (8011fc8 <ip4_route+0xdc>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3714      	adds	r7, #20
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr
 8011fc2:	bf00      	nop
 8011fc4:	20010560 	.word	0x20010560
 8011fc8:	20010564 	.word	0x20010564

08011fcc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fda:	f003 0301 	and.w	r3, r3, #1
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d016      	beq.n	8012012 <ip4_input_accept+0x46>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	3304      	adds	r3, #4
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d011      	beq.n	8012012 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011fee:	4b0b      	ldr	r3, [pc, #44]	; (801201c <ip4_input_accept+0x50>)
 8011ff0:	695a      	ldr	r2, [r3, #20]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	3304      	adds	r3, #4
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d008      	beq.n	801200e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011ffc:	4b07      	ldr	r3, [pc, #28]	; (801201c <ip4_input_accept+0x50>)
 8011ffe:	695b      	ldr	r3, [r3, #20]
 8012000:	6879      	ldr	r1, [r7, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	f000 fa08 	bl	8012418 <ip4_addr_isbroadcast_u32>
 8012008:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801200a:	2b00      	cmp	r3, #0
 801200c:	d001      	beq.n	8012012 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801200e:	2301      	movs	r3, #1
 8012010:	e000      	b.n	8012014 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012012:	2300      	movs	r3, #0
}
 8012014:	4618      	mov	r0, r3
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	20009470 	.word	0x20009470

08012020 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	091b      	lsrs	r3, r3, #4
 8012036:	b2db      	uxtb	r3, r3
 8012038:	2b04      	cmp	r3, #4
 801203a:	d004      	beq.n	8012046 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7f8 ff51 	bl	800aee4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012042:	2300      	movs	r3, #0
 8012044:	e107      	b.n	8012256 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	f003 030f 	and.w	r3, r3, #15
 801204e:	b2db      	uxtb	r3, r3
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	b2db      	uxtb	r3, r3
 8012054:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	885b      	ldrh	r3, [r3, #2]
 801205a:	b29b      	uxth	r3, r3
 801205c:	4618      	mov	r0, r3
 801205e:	f7f7 fb3f 	bl	80096e0 <lwip_htons>
 8012062:	4603      	mov	r3, r0
 8012064:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	891b      	ldrh	r3, [r3, #8]
 801206a:	89ba      	ldrh	r2, [r7, #12]
 801206c:	429a      	cmp	r2, r3
 801206e:	d204      	bcs.n	801207a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012070:	89bb      	ldrh	r3, [r7, #12]
 8012072:	4619      	mov	r1, r3
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7f8 fdaf 	bl	800abd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	895b      	ldrh	r3, [r3, #10]
 801207e:	89fa      	ldrh	r2, [r7, #14]
 8012080:	429a      	cmp	r2, r3
 8012082:	d807      	bhi.n	8012094 <ip4_input+0x74>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	891b      	ldrh	r3, [r3, #8]
 8012088:	89ba      	ldrh	r2, [r7, #12]
 801208a:	429a      	cmp	r2, r3
 801208c:	d802      	bhi.n	8012094 <ip4_input+0x74>
 801208e:	89fb      	ldrh	r3, [r7, #14]
 8012090:	2b13      	cmp	r3, #19
 8012092:	d804      	bhi.n	801209e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7f8 ff25 	bl	800aee4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	e0db      	b.n	8012256 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	4a6f      	ldr	r2, [pc, #444]	; (8012260 <ip4_input+0x240>)
 80120a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	68db      	ldr	r3, [r3, #12]
 80120aa:	4a6d      	ldr	r2, [pc, #436]	; (8012260 <ip4_input+0x240>)
 80120ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80120ae:	4b6c      	ldr	r3, [pc, #432]	; (8012260 <ip4_input+0x240>)
 80120b0:	695b      	ldr	r3, [r3, #20]
 80120b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120b6:	2be0      	cmp	r3, #224	; 0xe0
 80120b8:	d112      	bne.n	80120e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120c0:	f003 0301 	and.w	r3, r3, #1
 80120c4:	b2db      	uxtb	r3, r3
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d007      	beq.n	80120da <ip4_input+0xba>
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	3304      	adds	r3, #4
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d002      	beq.n	80120da <ip4_input+0xba>
      netif = inp;
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	613b      	str	r3, [r7, #16]
 80120d8:	e02a      	b.n	8012130 <ip4_input+0x110>
    } else {
      netif = NULL;
 80120da:	2300      	movs	r3, #0
 80120dc:	613b      	str	r3, [r7, #16]
 80120de:	e027      	b.n	8012130 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80120e0:	6838      	ldr	r0, [r7, #0]
 80120e2:	f7ff ff73 	bl	8011fcc <ip4_input_accept>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <ip4_input+0xd2>
      netif = inp;
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	613b      	str	r3, [r7, #16]
 80120f0:	e01e      	b.n	8012130 <ip4_input+0x110>
    } else {
      netif = NULL;
 80120f2:	2300      	movs	r3, #0
 80120f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80120f6:	4b5a      	ldr	r3, [pc, #360]	; (8012260 <ip4_input+0x240>)
 80120f8:	695b      	ldr	r3, [r3, #20]
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	2b7f      	cmp	r3, #127	; 0x7f
 80120fe:	d017      	beq.n	8012130 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012100:	4b58      	ldr	r3, [pc, #352]	; (8012264 <ip4_input+0x244>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	613b      	str	r3, [r7, #16]
 8012106:	e00e      	b.n	8012126 <ip4_input+0x106>
          if (netif == inp) {
 8012108:	693a      	ldr	r2, [r7, #16]
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	429a      	cmp	r2, r3
 801210e:	d006      	beq.n	801211e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012110:	6938      	ldr	r0, [r7, #16]
 8012112:	f7ff ff5b 	bl	8011fcc <ip4_input_accept>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d108      	bne.n	801212e <ip4_input+0x10e>
 801211c:	e000      	b.n	8012120 <ip4_input+0x100>
            continue;
 801211e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	613b      	str	r3, [r7, #16]
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1ed      	bne.n	8012108 <ip4_input+0xe8>
 801212c:	e000      	b.n	8012130 <ip4_input+0x110>
            break;
 801212e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012130:	4b4b      	ldr	r3, [pc, #300]	; (8012260 <ip4_input+0x240>)
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	6839      	ldr	r1, [r7, #0]
 8012136:	4618      	mov	r0, r3
 8012138:	f000 f96e 	bl	8012418 <ip4_addr_isbroadcast_u32>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d105      	bne.n	801214e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012142:	4b47      	ldr	r3, [pc, #284]	; (8012260 <ip4_input+0x240>)
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801214a:	2be0      	cmp	r3, #224	; 0xe0
 801214c:	d104      	bne.n	8012158 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7f8 fec8 	bl	800aee4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012154:	2300      	movs	r3, #0
 8012156:	e07e      	b.n	8012256 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d104      	bne.n	8012168 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7f8 fec0 	bl	800aee4 <pbuf_free>
    return ERR_OK;
 8012164:	2300      	movs	r3, #0
 8012166:	e076      	b.n	8012256 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	88db      	ldrh	r3, [r3, #6]
 801216c:	b29b      	uxth	r3, r3
 801216e:	461a      	mov	r2, r3
 8012170:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012174:	4013      	ands	r3, r2
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00b      	beq.n	8012192 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fc92 	bl	8012aa4 <ip4_reass>
 8012180:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d101      	bne.n	801218c <ip4_input+0x16c>
      return ERR_OK;
 8012188:	2300      	movs	r3, #0
 801218a:	e064      	b.n	8012256 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012192:	4a33      	ldr	r2, [pc, #204]	; (8012260 <ip4_input+0x240>)
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012198:	4a31      	ldr	r2, [pc, #196]	; (8012260 <ip4_input+0x240>)
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801219e:	4a30      	ldr	r2, [pc, #192]	; (8012260 <ip4_input+0x240>)
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	f003 030f 	and.w	r3, r3, #15
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	b2db      	uxtb	r3, r3
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	4b2a      	ldr	r3, [pc, #168]	; (8012260 <ip4_input+0x240>)
 80121b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80121b8:	89fb      	ldrh	r3, [r7, #14]
 80121ba:	4619      	mov	r1, r3
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7f8 fe0b 	bl	800add8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	7a5b      	ldrb	r3, [r3, #9]
 80121c6:	2b11      	cmp	r3, #17
 80121c8:	d006      	beq.n	80121d8 <ip4_input+0x1b8>
 80121ca:	2b11      	cmp	r3, #17
 80121cc:	dc13      	bgt.n	80121f6 <ip4_input+0x1d6>
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d00c      	beq.n	80121ec <ip4_input+0x1cc>
 80121d2:	2b06      	cmp	r3, #6
 80121d4:	d005      	beq.n	80121e2 <ip4_input+0x1c2>
 80121d6:	e00e      	b.n	80121f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80121d8:	6839      	ldr	r1, [r7, #0]
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7fe fc68 	bl	8010ab0 <udp_input>
        break;
 80121e0:	e026      	b.n	8012230 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80121e2:	6839      	ldr	r1, [r7, #0]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7fa fcb1 	bl	800cb4c <tcp_input>
        break;
 80121ea:	e021      	b.n	8012230 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80121ec:	6839      	ldr	r1, [r7, #0]
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7ff fcee 	bl	8011bd0 <icmp_input>
        break;
 80121f4:	e01c      	b.n	8012230 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80121f6:	4b1a      	ldr	r3, [pc, #104]	; (8012260 <ip4_input+0x240>)
 80121f8:	695b      	ldr	r3, [r3, #20]
 80121fa:	6939      	ldr	r1, [r7, #16]
 80121fc:	4618      	mov	r0, r3
 80121fe:	f000 f90b 	bl	8012418 <ip4_addr_isbroadcast_u32>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d10f      	bne.n	8012228 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012208:	4b15      	ldr	r3, [pc, #84]	; (8012260 <ip4_input+0x240>)
 801220a:	695b      	ldr	r3, [r3, #20]
 801220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012210:	2be0      	cmp	r3, #224	; 0xe0
 8012212:	d009      	beq.n	8012228 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012218:	4619      	mov	r1, r3
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7f8 fe4f 	bl	800aebe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012220:	2102      	movs	r1, #2
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7ff fdd8 	bl	8011dd8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7f8 fe5b 	bl	800aee4 <pbuf_free>
        break;
 801222e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012230:	4b0b      	ldr	r3, [pc, #44]	; (8012260 <ip4_input+0x240>)
 8012232:	2200      	movs	r2, #0
 8012234:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012236:	4b0a      	ldr	r3, [pc, #40]	; (8012260 <ip4_input+0x240>)
 8012238:	2200      	movs	r2, #0
 801223a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801223c:	4b08      	ldr	r3, [pc, #32]	; (8012260 <ip4_input+0x240>)
 801223e:	2200      	movs	r2, #0
 8012240:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012242:	4b07      	ldr	r3, [pc, #28]	; (8012260 <ip4_input+0x240>)
 8012244:	2200      	movs	r2, #0
 8012246:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012248:	4b05      	ldr	r3, [pc, #20]	; (8012260 <ip4_input+0x240>)
 801224a:	2200      	movs	r2, #0
 801224c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801224e:	4b04      	ldr	r3, [pc, #16]	; (8012260 <ip4_input+0x240>)
 8012250:	2200      	movs	r2, #0
 8012252:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012254:	2300      	movs	r3, #0
}
 8012256:	4618      	mov	r0, r3
 8012258:	3718      	adds	r7, #24
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	20009470 	.word	0x20009470
 8012264:	20010560 	.word	0x20010560

08012268 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b08a      	sub	sp, #40	; 0x28
 801226c:	af04      	add	r7, sp, #16
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	60b9      	str	r1, [r7, #8]
 8012272:	607a      	str	r2, [r7, #4]
 8012274:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d009      	beq.n	8012294 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d003      	beq.n	801228e <ip4_output_if+0x26>
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d102      	bne.n	8012294 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012290:	3304      	adds	r3, #4
 8012292:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012294:	78fa      	ldrb	r2, [r7, #3]
 8012296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012298:	9302      	str	r3, [sp, #8]
 801229a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801229e:	9301      	str	r3, [sp, #4]
 80122a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	4613      	mov	r3, r2
 80122a8:	687a      	ldr	r2, [r7, #4]
 80122aa:	6979      	ldr	r1, [r7, #20]
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	f000 f805 	bl	80122bc <ip4_output_if_src>
 80122b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3718      	adds	r7, #24
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b088      	sub	sp, #32
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	607a      	str	r2, [r7, #4]
 80122c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	7b9b      	ldrb	r3, [r3, #14]
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d006      	beq.n	80122e0 <ip4_output_if_src+0x24>
 80122d2:	4b4b      	ldr	r3, [pc, #300]	; (8012400 <ip4_output_if_src+0x144>)
 80122d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80122d8:	494a      	ldr	r1, [pc, #296]	; (8012404 <ip4_output_if_src+0x148>)
 80122da:	484b      	ldr	r0, [pc, #300]	; (8012408 <ip4_output_if_src+0x14c>)
 80122dc:	f001 f952 	bl	8013584 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d060      	beq.n	80123a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80122e6:	2314      	movs	r3, #20
 80122e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80122ea:	2114      	movs	r1, #20
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f7f8 fd63 	bl	800adb8 <pbuf_add_header>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80122f8:	f06f 0301 	mvn.w	r3, #1
 80122fc:	e07c      	b.n	80123f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	895b      	ldrh	r3, [r3, #10]
 8012308:	2b13      	cmp	r3, #19
 801230a:	d806      	bhi.n	801231a <ip4_output_if_src+0x5e>
 801230c:	4b3c      	ldr	r3, [pc, #240]	; (8012400 <ip4_output_if_src+0x144>)
 801230e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012312:	493e      	ldr	r1, [pc, #248]	; (801240c <ip4_output_if_src+0x150>)
 8012314:	483c      	ldr	r0, [pc, #240]	; (8012408 <ip4_output_if_src+0x14c>)
 8012316:	f001 f935 	bl	8013584 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	78fa      	ldrb	r2, [r7, #3]
 801231e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012326:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012330:	8b7b      	ldrh	r3, [r7, #26]
 8012332:	089b      	lsrs	r3, r3, #2
 8012334:	b29b      	uxth	r3, r3
 8012336:	b2db      	uxtb	r3, r3
 8012338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801233c:	b2da      	uxtb	r2, r3
 801233e:	69fb      	ldr	r3, [r7, #28]
 8012340:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012342:	69fb      	ldr	r3, [r7, #28]
 8012344:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012348:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	891b      	ldrh	r3, [r3, #8]
 801234e:	4618      	mov	r0, r3
 8012350:	f7f7 f9c6 	bl	80096e0 <lwip_htons>
 8012354:	4603      	mov	r3, r0
 8012356:	461a      	mov	r2, r3
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	2200      	movs	r2, #0
 8012360:	719a      	strb	r2, [r3, #6]
 8012362:	2200      	movs	r2, #0
 8012364:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012366:	4b2a      	ldr	r3, [pc, #168]	; (8012410 <ip4_output_if_src+0x154>)
 8012368:	881b      	ldrh	r3, [r3, #0]
 801236a:	4618      	mov	r0, r3
 801236c:	f7f7 f9b8 	bl	80096e0 <lwip_htons>
 8012370:	4603      	mov	r3, r0
 8012372:	461a      	mov	r2, r3
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012378:	4b25      	ldr	r3, [pc, #148]	; (8012410 <ip4_output_if_src+0x154>)
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	3301      	adds	r3, #1
 801237e:	b29a      	uxth	r2, r3
 8012380:	4b23      	ldr	r3, [pc, #140]	; (8012410 <ip4_output_if_src+0x154>)
 8012382:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d104      	bne.n	8012394 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801238a:	4b22      	ldr	r3, [pc, #136]	; (8012414 <ip4_output_if_src+0x158>)
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	60da      	str	r2, [r3, #12]
 8012392:	e003      	b.n	801239c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	2200      	movs	r2, #0
 80123a0:	729a      	strb	r2, [r3, #10]
 80123a2:	2200      	movs	r2, #0
 80123a4:	72da      	strb	r2, [r3, #11]
 80123a6:	e00f      	b.n	80123c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	895b      	ldrh	r3, [r3, #10]
 80123ac:	2b13      	cmp	r3, #19
 80123ae:	d802      	bhi.n	80123b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80123b0:	f06f 0301 	mvn.w	r3, #1
 80123b4:	e020      	b.n	80123f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	691b      	ldr	r3, [r3, #16]
 80123c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80123c2:	f107 0314 	add.w	r3, r7, #20
 80123c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80123c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00c      	beq.n	80123ea <ip4_output_if_src+0x12e>
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	891a      	ldrh	r2, [r3, #8]
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123d8:	429a      	cmp	r2, r3
 80123da:	d906      	bls.n	80123ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	f000 fd53 	bl	8012e8c <ip4_frag>
 80123e6:	4603      	mov	r3, r0
 80123e8:	e006      	b.n	80123f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	695b      	ldr	r3, [r3, #20]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	68f9      	ldr	r1, [r7, #12]
 80123f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123f4:	4798      	blx	r3
 80123f6:	4603      	mov	r3, r0
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3720      	adds	r7, #32
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	08016e3c 	.word	0x08016e3c
 8012404:	08016e70 	.word	0x08016e70
 8012408:	08016e7c 	.word	0x08016e7c
 801240c:	08016ea4 	.word	0x08016ea4
 8012410:	200106be 	.word	0x200106be
 8012414:	080172c4 	.word	0x080172c4

08012418 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012418:	b480      	push	{r7}
 801241a:	b085      	sub	sp, #20
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801242c:	d002      	beq.n	8012434 <ip4_addr_isbroadcast_u32+0x1c>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d101      	bne.n	8012438 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012434:	2301      	movs	r3, #1
 8012436:	e02a      	b.n	801248e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801243e:	f003 0302 	and.w	r3, r3, #2
 8012442:	2b00      	cmp	r3, #0
 8012444:	d101      	bne.n	801244a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012446:	2300      	movs	r3, #0
 8012448:	e021      	b.n	801248e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	3304      	adds	r3, #4
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	429a      	cmp	r2, r3
 8012454:	d101      	bne.n	801245a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012456:	2300      	movs	r3, #0
 8012458:	e019      	b.n	801248e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801245a:	68fa      	ldr	r2, [r7, #12]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	3304      	adds	r3, #4
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	405a      	eors	r2, r3
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	3308      	adds	r3, #8
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	4013      	ands	r3, r2
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10d      	bne.n	801248c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	3308      	adds	r3, #8
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	43da      	mvns	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	3308      	adds	r3, #8
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012484:	429a      	cmp	r2, r3
 8012486:	d101      	bne.n	801248c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012488:	2301      	movs	r3, #1
 801248a:	e000      	b.n	801248e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801248c:	2300      	movs	r3, #0
  }
}
 801248e:	4618      	mov	r0, r3
 8012490:	3714      	adds	r7, #20
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr
	...

0801249c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80124a2:	2300      	movs	r3, #0
 80124a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80124a6:	4b12      	ldr	r3, [pc, #72]	; (80124f0 <ip_reass_tmr+0x54>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80124ac:	e018      	b.n	80124e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	7fdb      	ldrb	r3, [r3, #31]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d00b      	beq.n	80124ce <ip_reass_tmr+0x32>
      r->timer--;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	7fdb      	ldrb	r3, [r3, #31]
 80124ba:	3b01      	subs	r3, #1
 80124bc:	b2da      	uxtb	r2, r3
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	60fb      	str	r3, [r7, #12]
 80124cc:	e008      	b.n	80124e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80124d8:	68b9      	ldr	r1, [r7, #8]
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f000 f80a 	bl	80124f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d1e3      	bne.n	80124ae <ip_reass_tmr+0x12>
    }
  }
}
 80124e6:	bf00      	nop
 80124e8:	bf00      	nop
 80124ea:	3710      	adds	r7, #16
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	200106c0 	.word	0x200106c0

080124f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b088      	sub	sp, #32
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80124fe:	2300      	movs	r3, #0
 8012500:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012502:	683a      	ldr	r2, [r7, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	429a      	cmp	r2, r3
 8012508:	d105      	bne.n	8012516 <ip_reass_free_complete_datagram+0x22>
 801250a:	4b45      	ldr	r3, [pc, #276]	; (8012620 <ip_reass_free_complete_datagram+0x12c>)
 801250c:	22ab      	movs	r2, #171	; 0xab
 801250e:	4945      	ldr	r1, [pc, #276]	; (8012624 <ip_reass_free_complete_datagram+0x130>)
 8012510:	4845      	ldr	r0, [pc, #276]	; (8012628 <ip_reass_free_complete_datagram+0x134>)
 8012512:	f001 f837 	bl	8013584 <iprintf>
  if (prev != NULL) {
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d00a      	beq.n	8012532 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	429a      	cmp	r2, r3
 8012524:	d005      	beq.n	8012532 <ip_reass_free_complete_datagram+0x3e>
 8012526:	4b3e      	ldr	r3, [pc, #248]	; (8012620 <ip_reass_free_complete_datagram+0x12c>)
 8012528:	22ad      	movs	r2, #173	; 0xad
 801252a:	4940      	ldr	r1, [pc, #256]	; (801262c <ip_reass_free_complete_datagram+0x138>)
 801252c:	483e      	ldr	r0, [pc, #248]	; (8012628 <ip_reass_free_complete_datagram+0x134>)
 801252e:	f001 f829 	bl	8013584 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	889b      	ldrh	r3, [r3, #4]
 801253e:	b29b      	uxth	r3, r3
 8012540:	2b00      	cmp	r3, #0
 8012542:	d12a      	bne.n	801259a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	6858      	ldr	r0, [r3, #4]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	3308      	adds	r3, #8
 801255a:	2214      	movs	r2, #20
 801255c:	4619      	mov	r1, r3
 801255e:	f000 fffb 	bl	8013558 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012562:	2101      	movs	r1, #1
 8012564:	69b8      	ldr	r0, [r7, #24]
 8012566:	f7ff fc47 	bl	8011df8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801256a:	69b8      	ldr	r0, [r7, #24]
 801256c:	f7f8 fd48 	bl	800b000 <pbuf_clen>
 8012570:	4603      	mov	r3, r0
 8012572:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012574:	8bfa      	ldrh	r2, [r7, #30]
 8012576:	8a7b      	ldrh	r3, [r7, #18]
 8012578:	4413      	add	r3, r2
 801257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801257e:	db05      	blt.n	801258c <ip_reass_free_complete_datagram+0x98>
 8012580:	4b27      	ldr	r3, [pc, #156]	; (8012620 <ip_reass_free_complete_datagram+0x12c>)
 8012582:	22bc      	movs	r2, #188	; 0xbc
 8012584:	492a      	ldr	r1, [pc, #168]	; (8012630 <ip_reass_free_complete_datagram+0x13c>)
 8012586:	4828      	ldr	r0, [pc, #160]	; (8012628 <ip_reass_free_complete_datagram+0x134>)
 8012588:	f000 fffc 	bl	8013584 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801258c:	8bfa      	ldrh	r2, [r7, #30]
 801258e:	8a7b      	ldrh	r3, [r7, #18]
 8012590:	4413      	add	r3, r2
 8012592:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012594:	69b8      	ldr	r0, [r7, #24]
 8012596:	f7f8 fca5 	bl	800aee4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80125a0:	e01f      	b.n	80125e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f7f8 fd24 	bl	800b000 <pbuf_clen>
 80125b8:	4603      	mov	r3, r0
 80125ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80125bc:	8bfa      	ldrh	r2, [r7, #30]
 80125be:	8a7b      	ldrh	r3, [r7, #18]
 80125c0:	4413      	add	r3, r2
 80125c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125c6:	db05      	blt.n	80125d4 <ip_reass_free_complete_datagram+0xe0>
 80125c8:	4b15      	ldr	r3, [pc, #84]	; (8012620 <ip_reass_free_complete_datagram+0x12c>)
 80125ca:	22cc      	movs	r2, #204	; 0xcc
 80125cc:	4918      	ldr	r1, [pc, #96]	; (8012630 <ip_reass_free_complete_datagram+0x13c>)
 80125ce:	4816      	ldr	r0, [pc, #88]	; (8012628 <ip_reass_free_complete_datagram+0x134>)
 80125d0:	f000 ffd8 	bl	8013584 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80125d4:	8bfa      	ldrh	r2, [r7, #30]
 80125d6:	8a7b      	ldrh	r3, [r7, #18]
 80125d8:	4413      	add	r3, r2
 80125da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f7f8 fc81 	bl	800aee4 <pbuf_free>
  while (p != NULL) {
 80125e2:	69bb      	ldr	r3, [r7, #24]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d1dc      	bne.n	80125a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80125e8:	6839      	ldr	r1, [r7, #0]
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f000 f8c2 	bl	8012774 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80125f0:	4b10      	ldr	r3, [pc, #64]	; (8012634 <ip_reass_free_complete_datagram+0x140>)
 80125f2:	881b      	ldrh	r3, [r3, #0]
 80125f4:	8bfa      	ldrh	r2, [r7, #30]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d905      	bls.n	8012606 <ip_reass_free_complete_datagram+0x112>
 80125fa:	4b09      	ldr	r3, [pc, #36]	; (8012620 <ip_reass_free_complete_datagram+0x12c>)
 80125fc:	22d2      	movs	r2, #210	; 0xd2
 80125fe:	490e      	ldr	r1, [pc, #56]	; (8012638 <ip_reass_free_complete_datagram+0x144>)
 8012600:	4809      	ldr	r0, [pc, #36]	; (8012628 <ip_reass_free_complete_datagram+0x134>)
 8012602:	f000 ffbf 	bl	8013584 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012606:	4b0b      	ldr	r3, [pc, #44]	; (8012634 <ip_reass_free_complete_datagram+0x140>)
 8012608:	881a      	ldrh	r2, [r3, #0]
 801260a:	8bfb      	ldrh	r3, [r7, #30]
 801260c:	1ad3      	subs	r3, r2, r3
 801260e:	b29a      	uxth	r2, r3
 8012610:	4b08      	ldr	r3, [pc, #32]	; (8012634 <ip_reass_free_complete_datagram+0x140>)
 8012612:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012614:	8bfb      	ldrh	r3, [r7, #30]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3720      	adds	r7, #32
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	08016ed4 	.word	0x08016ed4
 8012624:	08016f10 	.word	0x08016f10
 8012628:	08016f1c 	.word	0x08016f1c
 801262c:	08016f44 	.word	0x08016f44
 8012630:	08016f58 	.word	0x08016f58
 8012634:	200106c4 	.word	0x200106c4
 8012638:	08016f78 	.word	0x08016f78

0801263c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b08a      	sub	sp, #40	; 0x28
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012646:	2300      	movs	r3, #0
 8012648:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801264a:	2300      	movs	r3, #0
 801264c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801264e:	2300      	movs	r3, #0
 8012650:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012652:	2300      	movs	r3, #0
 8012654:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012656:	2300      	movs	r3, #0
 8012658:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801265a:	4b28      	ldr	r3, [pc, #160]	; (80126fc <ip_reass_remove_oldest_datagram+0xc0>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012660:	e030      	b.n	80126c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012664:	695a      	ldr	r2, [r3, #20]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	429a      	cmp	r2, r3
 801266c:	d10c      	bne.n	8012688 <ip_reass_remove_oldest_datagram+0x4c>
 801266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012670:	699a      	ldr	r2, [r3, #24]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	691b      	ldr	r3, [r3, #16]
 8012676:	429a      	cmp	r2, r3
 8012678:	d106      	bne.n	8012688 <ip_reass_remove_oldest_datagram+0x4c>
 801267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267c:	899a      	ldrh	r2, [r3, #12]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	889b      	ldrh	r3, [r3, #4]
 8012682:	b29b      	uxth	r3, r3
 8012684:	429a      	cmp	r2, r3
 8012686:	d014      	beq.n	80126b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	3301      	adds	r3, #1
 801268c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801268e:	6a3b      	ldr	r3, [r7, #32]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d104      	bne.n	801269e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012696:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	61bb      	str	r3, [r7, #24]
 801269c:	e009      	b.n	80126b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a0:	7fda      	ldrb	r2, [r3, #31]
 80126a2:	6a3b      	ldr	r3, [r7, #32]
 80126a4:	7fdb      	ldrb	r3, [r3, #31]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d803      	bhi.n	80126b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80126aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d001      	beq.n	80126be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80126ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80126be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80126c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d1cb      	bne.n	8012662 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80126ca:	6a3b      	ldr	r3, [r7, #32]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d008      	beq.n	80126e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80126d0:	69b9      	ldr	r1, [r7, #24]
 80126d2:	6a38      	ldr	r0, [r7, #32]
 80126d4:	f7ff ff0e 	bl	80124f4 <ip_reass_free_complete_datagram>
 80126d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80126da:	697a      	ldr	r2, [r7, #20]
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	4413      	add	r3, r2
 80126e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80126e2:	697a      	ldr	r2, [r7, #20]
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	da02      	bge.n	80126f0 <ip_reass_remove_oldest_datagram+0xb4>
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	dcac      	bgt.n	801264a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80126f0:	697b      	ldr	r3, [r7, #20]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3728      	adds	r7, #40	; 0x28
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	200106c0 	.word	0x200106c0

08012700 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801270a:	2004      	movs	r0, #4
 801270c:	f7f7 fcd0 	bl	800a0b0 <memp_malloc>
 8012710:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d110      	bne.n	801273a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7ff ff8e 	bl	801263c <ip_reass_remove_oldest_datagram>
 8012720:	4602      	mov	r2, r0
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	4293      	cmp	r3, r2
 8012726:	dc03      	bgt.n	8012730 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012728:	2004      	movs	r0, #4
 801272a:	f7f7 fcc1 	bl	800a0b0 <memp_malloc>
 801272e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d101      	bne.n	801273a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012736:	2300      	movs	r3, #0
 8012738:	e016      	b.n	8012768 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801273a:	2220      	movs	r2, #32
 801273c:	2100      	movs	r1, #0
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f000 ff18 	bl	8013574 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	220f      	movs	r2, #15
 8012748:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801274a:	4b09      	ldr	r3, [pc, #36]	; (8012770 <ip_reass_enqueue_new_datagram+0x70>)
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012752:	4a07      	ldr	r2, [pc, #28]	; (8012770 <ip_reass_enqueue_new_datagram+0x70>)
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	3308      	adds	r3, #8
 801275c:	2214      	movs	r2, #20
 801275e:	6879      	ldr	r1, [r7, #4]
 8012760:	4618      	mov	r0, r3
 8012762:	f000 fef9 	bl	8013558 <memcpy>
  return ipr;
 8012766:	68fb      	ldr	r3, [r7, #12]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3710      	adds	r7, #16
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	200106c0 	.word	0x200106c0

08012774 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801277e:	4b10      	ldr	r3, [pc, #64]	; (80127c0 <ip_reass_dequeue_datagram+0x4c>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	687a      	ldr	r2, [r7, #4]
 8012784:	429a      	cmp	r2, r3
 8012786:	d104      	bne.n	8012792 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4a0c      	ldr	r2, [pc, #48]	; (80127c0 <ip_reass_dequeue_datagram+0x4c>)
 801278e:	6013      	str	r3, [r2, #0]
 8012790:	e00d      	b.n	80127ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d106      	bne.n	80127a6 <ip_reass_dequeue_datagram+0x32>
 8012798:	4b0a      	ldr	r3, [pc, #40]	; (80127c4 <ip_reass_dequeue_datagram+0x50>)
 801279a:	f240 1245 	movw	r2, #325	; 0x145
 801279e:	490a      	ldr	r1, [pc, #40]	; (80127c8 <ip_reass_dequeue_datagram+0x54>)
 80127a0:	480a      	ldr	r0, [pc, #40]	; (80127cc <ip_reass_dequeue_datagram+0x58>)
 80127a2:	f000 feef 	bl	8013584 <iprintf>
    prev->next = ipr->next;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80127ae:	6879      	ldr	r1, [r7, #4]
 80127b0:	2004      	movs	r0, #4
 80127b2:	f7f7 fcf3 	bl	800a19c <memp_free>
}
 80127b6:	bf00      	nop
 80127b8:	3708      	adds	r7, #8
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	200106c0 	.word	0x200106c0
 80127c4:	08016ed4 	.word	0x08016ed4
 80127c8:	08016f9c 	.word	0x08016f9c
 80127cc:	08016f1c 	.word	0x08016f1c

080127d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b08c      	sub	sp, #48	; 0x30
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80127dc:	2300      	movs	r3, #0
 80127de:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80127e0:	2301      	movs	r3, #1
 80127e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	885b      	ldrh	r3, [r3, #2]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7f6 ff75 	bl	80096e0 <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	f003 030f 	and.w	r3, r3, #15
 8012802:	b2db      	uxtb	r3, r3
 8012804:	009b      	lsls	r3, r3, #2
 8012806:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012808:	7e7b      	ldrb	r3, [r7, #25]
 801280a:	b29b      	uxth	r3, r3
 801280c:	8b7a      	ldrh	r2, [r7, #26]
 801280e:	429a      	cmp	r2, r3
 8012810:	d202      	bcs.n	8012818 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012816:	e135      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012818:	7e7b      	ldrb	r3, [r7, #25]
 801281a:	b29b      	uxth	r3, r3
 801281c:	8b7a      	ldrh	r2, [r7, #26]
 801281e:	1ad3      	subs	r3, r2, r3
 8012820:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	88db      	ldrh	r3, [r3, #6]
 8012826:	b29b      	uxth	r3, r3
 8012828:	4618      	mov	r0, r3
 801282a:	f7f6 ff59 	bl	80096e0 <lwip_htons>
 801282e:	4603      	mov	r3, r0
 8012830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012834:	b29b      	uxth	r3, r3
 8012836:	00db      	lsls	r3, r3, #3
 8012838:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	2200      	movs	r2, #0
 8012844:	701a      	strb	r2, [r3, #0]
 8012846:	2200      	movs	r2, #0
 8012848:	705a      	strb	r2, [r3, #1]
 801284a:	2200      	movs	r2, #0
 801284c:	709a      	strb	r2, [r3, #2]
 801284e:	2200      	movs	r2, #0
 8012850:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012854:	8afa      	ldrh	r2, [r7, #22]
 8012856:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012858:	8afa      	ldrh	r2, [r7, #22]
 801285a:	8b7b      	ldrh	r3, [r7, #26]
 801285c:	4413      	add	r3, r2
 801285e:	b29a      	uxth	r2, r3
 8012860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012862:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012866:	88db      	ldrh	r3, [r3, #6]
 8012868:	b29b      	uxth	r3, r3
 801286a:	8afa      	ldrh	r2, [r7, #22]
 801286c:	429a      	cmp	r2, r3
 801286e:	d902      	bls.n	8012876 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012874:	e106      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	627b      	str	r3, [r7, #36]	; 0x24
 801287c:	e068      	b.n	8012950 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012886:	889b      	ldrh	r3, [r3, #4]
 8012888:	b29a      	uxth	r2, r3
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	889b      	ldrh	r3, [r3, #4]
 801288e:	b29b      	uxth	r3, r3
 8012890:	429a      	cmp	r2, r3
 8012892:	d235      	bcs.n	8012900 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012898:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801289c:	2b00      	cmp	r3, #0
 801289e:	d020      	beq.n	80128e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	889b      	ldrh	r3, [r3, #4]
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a8:	88db      	ldrh	r3, [r3, #6]
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d307      	bcc.n	80128c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80128b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b2:	88db      	ldrh	r3, [r3, #6]
 80128b4:	b29a      	uxth	r2, r3
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	889b      	ldrh	r3, [r3, #4]
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	429a      	cmp	r2, r3
 80128be:	d902      	bls.n	80128c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128c4:	e0de      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80128c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80128cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ce:	88db      	ldrh	r3, [r3, #6]
 80128d0:	b29a      	uxth	r2, r3
 80128d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d4:	889b      	ldrh	r3, [r3, #4]
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	429a      	cmp	r2, r3
 80128da:	d03d      	beq.n	8012958 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80128dc:	2300      	movs	r3, #0
 80128de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80128e0:	e03a      	b.n	8012958 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80128e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e4:	88db      	ldrh	r3, [r3, #6]
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	889b      	ldrh	r3, [r3, #4]
 80128ec:	b29b      	uxth	r3, r3
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d902      	bls.n	80128f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80128f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128f6:	e0c5      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	68ba      	ldr	r2, [r7, #8]
 80128fc:	605a      	str	r2, [r3, #4]
      break;
 80128fe:	e02b      	b.n	8012958 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012902:	889b      	ldrh	r3, [r3, #4]
 8012904:	b29a      	uxth	r2, r3
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	889b      	ldrh	r3, [r3, #4]
 801290a:	b29b      	uxth	r3, r3
 801290c:	429a      	cmp	r2, r3
 801290e:	d102      	bne.n	8012916 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012914:	e0b6      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012918:	889b      	ldrh	r3, [r3, #4]
 801291a:	b29a      	uxth	r2, r3
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	88db      	ldrh	r3, [r3, #6]
 8012920:	b29b      	uxth	r3, r3
 8012922:	429a      	cmp	r2, r3
 8012924:	d202      	bcs.n	801292c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801292a:	e0ab      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292e:	2b00      	cmp	r3, #0
 8012930:	d009      	beq.n	8012946 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012934:	88db      	ldrh	r3, [r3, #6]
 8012936:	b29a      	uxth	r2, r3
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	889b      	ldrh	r3, [r3, #4]
 801293c:	b29b      	uxth	r3, r3
 801293e:	429a      	cmp	r2, r3
 8012940:	d001      	beq.n	8012946 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012942:	2300      	movs	r3, #0
 8012944:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012952:	2b00      	cmp	r3, #0
 8012954:	d193      	bne.n	801287e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012956:	e000      	b.n	801295a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012958:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295c:	2b00      	cmp	r3, #0
 801295e:	d12d      	bne.n	80129bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012962:	2b00      	cmp	r3, #0
 8012964:	d01c      	beq.n	80129a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012968:	88db      	ldrh	r3, [r3, #6]
 801296a:	b29a      	uxth	r2, r3
 801296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296e:	889b      	ldrh	r3, [r3, #4]
 8012970:	b29b      	uxth	r3, r3
 8012972:	429a      	cmp	r2, r3
 8012974:	d906      	bls.n	8012984 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012976:	4b45      	ldr	r3, [pc, #276]	; (8012a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012978:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801297c:	4944      	ldr	r1, [pc, #272]	; (8012a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801297e:	4845      	ldr	r0, [pc, #276]	; (8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012980:	f000 fe00 	bl	8013584 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012986:	68ba      	ldr	r2, [r7, #8]
 8012988:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298c:	88db      	ldrh	r3, [r3, #6]
 801298e:	b29a      	uxth	r2, r3
 8012990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012992:	889b      	ldrh	r3, [r3, #4]
 8012994:	b29b      	uxth	r3, r3
 8012996:	429a      	cmp	r2, r3
 8012998:	d010      	beq.n	80129bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801299a:	2300      	movs	r3, #0
 801299c:	623b      	str	r3, [r7, #32]
 801299e:	e00d      	b.n	80129bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d006      	beq.n	80129b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80129a8:	4b38      	ldr	r3, [pc, #224]	; (8012a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80129aa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80129ae:	493a      	ldr	r1, [pc, #232]	; (8012a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80129b0:	4838      	ldr	r0, [pc, #224]	; (8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80129b2:	f000 fde7 	bl	8013584 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	68ba      	ldr	r2, [r7, #8]
 80129ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d105      	bne.n	80129ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	7f9b      	ldrb	r3, [r3, #30]
 80129c6:	f003 0301 	and.w	r3, r3, #1
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d059      	beq.n	8012a82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80129ce:	6a3b      	ldr	r3, [r7, #32]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d04f      	beq.n	8012a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d006      	beq.n	80129ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	889b      	ldrh	r3, [r3, #4]
 80129e4:	b29b      	uxth	r3, r3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d002      	beq.n	80129f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80129ea:	2300      	movs	r3, #0
 80129ec:	623b      	str	r3, [r7, #32]
 80129ee:	e041      	b.n	8012a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80129f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80129fa:	e012      	b.n	8012a22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a04:	88db      	ldrh	r3, [r3, #6]
 8012a06:	b29a      	uxth	r2, r3
 8012a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0a:	889b      	ldrh	r3, [r3, #4]
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d002      	beq.n	8012a18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012a12:	2300      	movs	r3, #0
 8012a14:	623b      	str	r3, [r7, #32]
            break;
 8012a16:	e007      	b.n	8012a28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d1e9      	bne.n	80129fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012a28:	6a3b      	ldr	r3, [r7, #32]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d022      	beq.n	8012a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d106      	bne.n	8012a44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012a36:	4b15      	ldr	r3, [pc, #84]	; (8012a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a38:	f240 12df 	movw	r2, #479	; 0x1df
 8012a3c:	4917      	ldr	r1, [pc, #92]	; (8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012a3e:	4815      	ldr	r0, [pc, #84]	; (8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a40:	f000 fda0 	bl	8013584 <iprintf>
          LWIP_ASSERT("sanity check",
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d106      	bne.n	8012a5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012a50:	4b0e      	ldr	r3, [pc, #56]	; (8012a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012a56:	4911      	ldr	r1, [pc, #68]	; (8012a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012a58:	480e      	ldr	r0, [pc, #56]	; (8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a5a:	f000 fd93 	bl	8013584 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d006      	beq.n	8012a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012a66:	4b09      	ldr	r3, [pc, #36]	; (8012a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012a68:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012a6c:	490c      	ldr	r1, [pc, #48]	; (8012aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012a6e:	4809      	ldr	r0, [pc, #36]	; (8012a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012a70:	f000 fd88 	bl	8013584 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012a74:	6a3b      	ldr	r3, [r7, #32]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	bf14      	ite	ne
 8012a7a:	2301      	movne	r3, #1
 8012a7c:	2300      	moveq	r3, #0
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	e000      	b.n	8012a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012a82:	2300      	movs	r3, #0
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3730      	adds	r7, #48	; 0x30
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	08016ed4 	.word	0x08016ed4
 8012a90:	08016fb8 	.word	0x08016fb8
 8012a94:	08016f1c 	.word	0x08016f1c
 8012a98:	08016fd8 	.word	0x08016fd8
 8012a9c:	08017010 	.word	0x08017010
 8012aa0:	08017020 	.word	0x08017020

08012aa4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b08e      	sub	sp, #56	; 0x38
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	f003 030f 	and.w	r3, r3, #15
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	009b      	lsls	r3, r3, #2
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	2b14      	cmp	r3, #20
 8012ac2:	f040 8171 	bne.w	8012da8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac8:	88db      	ldrh	r3, [r3, #6]
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f6 fe07 	bl	80096e0 <lwip_htons>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	00db      	lsls	r3, r3, #3
 8012adc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae0:	885b      	ldrh	r3, [r3, #2]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f6 fdfb 	bl	80096e0 <lwip_htons>
 8012aea:	4603      	mov	r3, r0
 8012aec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	f003 030f 	and.w	r3, r3, #15
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	009b      	lsls	r3, r3, #2
 8012afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b02:	b29b      	uxth	r3, r3
 8012b04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b06:	429a      	cmp	r2, r3
 8012b08:	f0c0 8150 	bcc.w	8012dac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b14:	1ad3      	subs	r3, r2, r3
 8012b16:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f7f8 fa71 	bl	800b000 <pbuf_clen>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012b22:	4b8c      	ldr	r3, [pc, #560]	; (8012d54 <ip4_reass+0x2b0>)
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	461a      	mov	r2, r3
 8012b28:	8c3b      	ldrh	r3, [r7, #32]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	2b0a      	cmp	r3, #10
 8012b2e:	dd10      	ble.n	8012b52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b30:	8c3b      	ldrh	r3, [r7, #32]
 8012b32:	4619      	mov	r1, r3
 8012b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b36:	f7ff fd81 	bl	801263c <ip_reass_remove_oldest_datagram>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f000 8137 	beq.w	8012db0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012b42:	4b84      	ldr	r3, [pc, #528]	; (8012d54 <ip4_reass+0x2b0>)
 8012b44:	881b      	ldrh	r3, [r3, #0]
 8012b46:	461a      	mov	r2, r3
 8012b48:	8c3b      	ldrh	r3, [r7, #32]
 8012b4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012b4c:	2b0a      	cmp	r3, #10
 8012b4e:	f300 812f 	bgt.w	8012db0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b52:	4b81      	ldr	r3, [pc, #516]	; (8012d58 <ip4_reass+0x2b4>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	633b      	str	r3, [r7, #48]	; 0x30
 8012b58:	e015      	b.n	8012b86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5c:	695a      	ldr	r2, [r3, #20]
 8012b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d10c      	bne.n	8012b80 <ip4_reass+0xdc>
 8012b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b68:	699a      	ldr	r2, [r3, #24]
 8012b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6c:	691b      	ldr	r3, [r3, #16]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d106      	bne.n	8012b80 <ip4_reass+0xdc>
 8012b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b74:	899a      	ldrh	r2, [r3, #12]
 8012b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b78:	889b      	ldrh	r3, [r3, #4]
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d006      	beq.n	8012b8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	633b      	str	r3, [r7, #48]	; 0x30
 8012b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1e6      	bne.n	8012b5a <ip4_reass+0xb6>
 8012b8c:	e000      	b.n	8012b90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012b8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d109      	bne.n	8012baa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012b96:	8c3b      	ldrh	r3, [r7, #32]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b9c:	f7ff fdb0 	bl	8012700 <ip_reass_enqueue_new_datagram>
 8012ba0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d11c      	bne.n	8012be2 <ip4_reass+0x13e>
      goto nullreturn;
 8012ba8:	e105      	b.n	8012db6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bac:	88db      	ldrh	r3, [r3, #6]
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7f6 fd95 	bl	80096e0 <lwip_htons>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d110      	bne.n	8012be2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc2:	89db      	ldrh	r3, [r3, #14]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7f6 fd8b 	bl	80096e0 <lwip_htons>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d006      	beq.n	8012be2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd6:	3308      	adds	r3, #8
 8012bd8:	2214      	movs	r2, #20
 8012bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f000 fcbb 	bl	8013558 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	88db      	ldrh	r3, [r3, #6]
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	f003 0320 	and.w	r3, r3, #32
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	bf0c      	ite	eq
 8012bf0:	2301      	moveq	r3, #1
 8012bf2:	2300      	movne	r3, #0
 8012bf4:	b2db      	uxtb	r3, r3
 8012bf6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d00e      	beq.n	8012c1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012bfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c02:	4413      	add	r3, r2
 8012c04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012c06:	8b7a      	ldrh	r2, [r7, #26]
 8012c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	f0c0 80a0 	bcc.w	8012d50 <ip4_reass+0x2ac>
 8012c10:	8b7b      	ldrh	r3, [r7, #26]
 8012c12:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012c16:	4293      	cmp	r3, r2
 8012c18:	f200 809a 	bhi.w	8012d50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012c1c:	69fa      	ldr	r2, [r7, #28]
 8012c1e:	6879      	ldr	r1, [r7, #4]
 8012c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c22:	f7ff fdd5 	bl	80127d0 <ip_reass_chain_frag_into_datagram_and_validate>
 8012c26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c2e:	f000 809b 	beq.w	8012d68 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012c32:	4b48      	ldr	r3, [pc, #288]	; (8012d54 <ip4_reass+0x2b0>)
 8012c34:	881a      	ldrh	r2, [r3, #0]
 8012c36:	8c3b      	ldrh	r3, [r7, #32]
 8012c38:	4413      	add	r3, r2
 8012c3a:	b29a      	uxth	r2, r3
 8012c3c:	4b45      	ldr	r3, [pc, #276]	; (8012d54 <ip4_reass+0x2b0>)
 8012c3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00d      	beq.n	8012c62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012c46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012c4a:	4413      	add	r3, r2
 8012c4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c50:	8a7a      	ldrh	r2, [r7, #18]
 8012c52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c56:	7f9b      	ldrb	r3, [r3, #30]
 8012c58:	f043 0301 	orr.w	r3, r3, #1
 8012c5c:	b2da      	uxtb	r2, r3
 8012c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d171      	bne.n	8012d4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6a:	8b9b      	ldrh	r3, [r3, #28]
 8012c6c:	3314      	adds	r3, #20
 8012c6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c84:	3308      	adds	r3, #8
 8012c86:	2214      	movs	r2, #20
 8012c88:	4619      	mov	r1, r3
 8012c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c8c:	f000 fc64 	bl	8013558 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012c90:	8a3b      	ldrh	r3, [r7, #16]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7f6 fd24 	bl	80096e0 <lwip_htons>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	719a      	strb	r2, [r3, #6]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cac:	2200      	movs	r2, #0
 8012cae:	729a      	strb	r2, [r3, #10]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012cba:	e00d      	b.n	8012cd8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012cc2:	2114      	movs	r1, #20
 8012cc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012cc6:	f7f8 f887 	bl	800add8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012cca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7f8 f9d7 	bl	800b080 <pbuf_cat>
      r = iprh->next_pbuf;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d1ee      	bne.n	8012cbc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012cde:	4b1e      	ldr	r3, [pc, #120]	; (8012d58 <ip4_reass+0x2b4>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d102      	bne.n	8012cee <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cec:	e010      	b.n	8012d10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012cee:	4b1a      	ldr	r3, [pc, #104]	; (8012d58 <ip4_reass+0x2b4>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cf4:	e007      	b.n	8012d06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d006      	beq.n	8012d0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d1f4      	bne.n	8012cf6 <ip4_reass+0x252>
 8012d0c:	e000      	b.n	8012d10 <ip4_reass+0x26c>
          break;
 8012d0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d14:	f7ff fd2e 	bl	8012774 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7f8 f971 	bl	800b000 <pbuf_clen>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012d22:	4b0c      	ldr	r3, [pc, #48]	; (8012d54 <ip4_reass+0x2b0>)
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	8c3a      	ldrh	r2, [r7, #32]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d906      	bls.n	8012d3a <ip4_reass+0x296>
 8012d2c:	4b0b      	ldr	r3, [pc, #44]	; (8012d5c <ip4_reass+0x2b8>)
 8012d2e:	f240 229b 	movw	r2, #667	; 0x29b
 8012d32:	490b      	ldr	r1, [pc, #44]	; (8012d60 <ip4_reass+0x2bc>)
 8012d34:	480b      	ldr	r0, [pc, #44]	; (8012d64 <ip4_reass+0x2c0>)
 8012d36:	f000 fc25 	bl	8013584 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012d3a:	4b06      	ldr	r3, [pc, #24]	; (8012d54 <ip4_reass+0x2b0>)
 8012d3c:	881a      	ldrh	r2, [r3, #0]
 8012d3e:	8c3b      	ldrh	r3, [r7, #32]
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	b29a      	uxth	r2, r3
 8012d44:	4b03      	ldr	r3, [pc, #12]	; (8012d54 <ip4_reass+0x2b0>)
 8012d46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	e038      	b.n	8012dbe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	e036      	b.n	8012dbe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012d50:	bf00      	nop
 8012d52:	e00a      	b.n	8012d6a <ip4_reass+0x2c6>
 8012d54:	200106c4 	.word	0x200106c4
 8012d58:	200106c0 	.word	0x200106c0
 8012d5c:	08016ed4 	.word	0x08016ed4
 8012d60:	08017044 	.word	0x08017044
 8012d64:	08016f1c 	.word	0x08016f1c
    goto nullreturn_ipr;
 8012d68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d106      	bne.n	8012d7e <ip4_reass+0x2da>
 8012d70:	4b15      	ldr	r3, [pc, #84]	; (8012dc8 <ip4_reass+0x324>)
 8012d72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012d76:	4915      	ldr	r1, [pc, #84]	; (8012dcc <ip4_reass+0x328>)
 8012d78:	4815      	ldr	r0, [pc, #84]	; (8012dd0 <ip4_reass+0x32c>)
 8012d7a:	f000 fc03 	bl	8013584 <iprintf>
  if (ipr->p == NULL) {
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d116      	bne.n	8012db4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012d86:	4b13      	ldr	r3, [pc, #76]	; (8012dd4 <ip4_reass+0x330>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d006      	beq.n	8012d9e <ip4_reass+0x2fa>
 8012d90:	4b0d      	ldr	r3, [pc, #52]	; (8012dc8 <ip4_reass+0x324>)
 8012d92:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d96:	4910      	ldr	r1, [pc, #64]	; (8012dd8 <ip4_reass+0x334>)
 8012d98:	480d      	ldr	r0, [pc, #52]	; (8012dd0 <ip4_reass+0x32c>)
 8012d9a:	f000 fbf3 	bl	8013584 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012d9e:	2100      	movs	r1, #0
 8012da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012da2:	f7ff fce7 	bl	8012774 <ip_reass_dequeue_datagram>
 8012da6:	e006      	b.n	8012db6 <ip4_reass+0x312>
    goto nullreturn;
 8012da8:	bf00      	nop
 8012daa:	e004      	b.n	8012db6 <ip4_reass+0x312>
    goto nullreturn;
 8012dac:	bf00      	nop
 8012dae:	e002      	b.n	8012db6 <ip4_reass+0x312>
      goto nullreturn;
 8012db0:	bf00      	nop
 8012db2:	e000      	b.n	8012db6 <ip4_reass+0x312>
  }

nullreturn:
 8012db4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7f8 f894 	bl	800aee4 <pbuf_free>
  return NULL;
 8012dbc:	2300      	movs	r3, #0
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3738      	adds	r7, #56	; 0x38
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	08016ed4 	.word	0x08016ed4
 8012dcc:	08017060 	.word	0x08017060
 8012dd0:	08016f1c 	.word	0x08016f1c
 8012dd4:	200106c0 	.word	0x200106c0
 8012dd8:	0801706c 	.word	0x0801706c

08012ddc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012de0:	2005      	movs	r0, #5
 8012de2:	f7f7 f965 	bl	800a0b0 <memp_malloc>
 8012de6:	4603      	mov	r3, r0
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	bd80      	pop	{r7, pc}

08012dec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d106      	bne.n	8012e08 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012dfa:	4b07      	ldr	r3, [pc, #28]	; (8012e18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012dfc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012e00:	4906      	ldr	r1, [pc, #24]	; (8012e1c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012e02:	4807      	ldr	r0, [pc, #28]	; (8012e20 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012e04:	f000 fbbe 	bl	8013584 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012e08:	6879      	ldr	r1, [r7, #4]
 8012e0a:	2005      	movs	r0, #5
 8012e0c:	f7f7 f9c6 	bl	800a19c <memp_free>
}
 8012e10:	bf00      	nop
 8012e12:	3708      	adds	r7, #8
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	08016ed4 	.word	0x08016ed4
 8012e1c:	0801708c 	.word	0x0801708c
 8012e20:	08016f1c 	.word	0x08016f1c

08012e24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d106      	bne.n	8012e44 <ipfrag_free_pbuf_custom+0x20>
 8012e36:	4b11      	ldr	r3, [pc, #68]	; (8012e7c <ipfrag_free_pbuf_custom+0x58>)
 8012e38:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012e3c:	4910      	ldr	r1, [pc, #64]	; (8012e80 <ipfrag_free_pbuf_custom+0x5c>)
 8012e3e:	4811      	ldr	r0, [pc, #68]	; (8012e84 <ipfrag_free_pbuf_custom+0x60>)
 8012e40:	f000 fba0 	bl	8013584 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d006      	beq.n	8012e5a <ipfrag_free_pbuf_custom+0x36>
 8012e4c:	4b0b      	ldr	r3, [pc, #44]	; (8012e7c <ipfrag_free_pbuf_custom+0x58>)
 8012e4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012e52:	490d      	ldr	r1, [pc, #52]	; (8012e88 <ipfrag_free_pbuf_custom+0x64>)
 8012e54:	480b      	ldr	r0, [pc, #44]	; (8012e84 <ipfrag_free_pbuf_custom+0x60>)
 8012e56:	f000 fb95 	bl	8013584 <iprintf>
  if (pcr->original != NULL) {
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	695b      	ldr	r3, [r3, #20]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d004      	beq.n	8012e6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	695b      	ldr	r3, [r3, #20]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7f8 f83c 	bl	800aee4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012e6c:	68f8      	ldr	r0, [r7, #12]
 8012e6e:	f7ff ffbd 	bl	8012dec <ip_frag_free_pbuf_custom_ref>
}
 8012e72:	bf00      	nop
 8012e74:	3710      	adds	r7, #16
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	08016ed4 	.word	0x08016ed4
 8012e80:	08017098 	.word	0x08017098
 8012e84:	08016f1c 	.word	0x08016f1c
 8012e88:	080170a4 	.word	0x080170a4

08012e8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b094      	sub	sp, #80	; 0x50
 8012e90:	af02      	add	r7, sp, #8
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012ea2:	3b14      	subs	r3, #20
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	da00      	bge.n	8012eaa <ip4_frag+0x1e>
 8012ea8:	3307      	adds	r3, #7
 8012eaa:	10db      	asrs	r3, r3, #3
 8012eac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012eae:	2314      	movs	r3, #20
 8012eb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	f003 030f 	and.w	r3, r3, #15
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	009b      	lsls	r3, r3, #2
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b14      	cmp	r3, #20
 8012ecc:	d002      	beq.n	8012ed4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012ece:	f06f 0305 	mvn.w	r3, #5
 8012ed2:	e110      	b.n	80130f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	895b      	ldrh	r3, [r3, #10]
 8012ed8:	2b13      	cmp	r3, #19
 8012eda:	d809      	bhi.n	8012ef0 <ip4_frag+0x64>
 8012edc:	4b88      	ldr	r3, [pc, #544]	; (8013100 <ip4_frag+0x274>)
 8012ede:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012ee2:	4988      	ldr	r1, [pc, #544]	; (8013104 <ip4_frag+0x278>)
 8012ee4:	4888      	ldr	r0, [pc, #544]	; (8013108 <ip4_frag+0x27c>)
 8012ee6:	f000 fb4d 	bl	8013584 <iprintf>
 8012eea:	f06f 0305 	mvn.w	r3, #5
 8012eee:	e102      	b.n	80130f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef2:	88db      	ldrh	r3, [r3, #6]
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7f6 fbf2 	bl	80096e0 <lwip_htons>
 8012efc:	4603      	mov	r3, r0
 8012efe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012f00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012f0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012f10:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	891b      	ldrh	r3, [r3, #8]
 8012f16:	3b14      	subs	r3, #20
 8012f18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012f1c:	e0e1      	b.n	80130e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012f1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012f20:	00db      	lsls	r3, r3, #3
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	bf28      	it	cs
 8012f2c:	4613      	movcs	r3, r2
 8012f2e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012f30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f34:	2114      	movs	r1, #20
 8012f36:	200e      	movs	r0, #14
 8012f38:	f7f7 fcf0 	bl	800a91c <pbuf_alloc>
 8012f3c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 80d5 	beq.w	80130f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f48:	895b      	ldrh	r3, [r3, #10]
 8012f4a:	2b13      	cmp	r3, #19
 8012f4c:	d806      	bhi.n	8012f5c <ip4_frag+0xd0>
 8012f4e:	4b6c      	ldr	r3, [pc, #432]	; (8013100 <ip4_frag+0x274>)
 8012f50:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012f54:	496d      	ldr	r1, [pc, #436]	; (801310c <ip4_frag+0x280>)
 8012f56:	486c      	ldr	r0, [pc, #432]	; (8013108 <ip4_frag+0x27c>)
 8012f58:	f000 fb14 	bl	8013584 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	2214      	movs	r2, #20
 8012f62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012f64:	4618      	mov	r0, r3
 8012f66:	f000 faf7 	bl	8013558 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012f70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012f72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012f76:	e064      	b.n	8013042 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	895a      	ldrh	r2, [r3, #10]
 8012f7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f7e:	1ad3      	subs	r3, r2, r3
 8012f80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	895b      	ldrh	r3, [r3, #10]
 8012f86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d906      	bls.n	8012f9a <ip4_frag+0x10e>
 8012f8c:	4b5c      	ldr	r3, [pc, #368]	; (8013100 <ip4_frag+0x274>)
 8012f8e:	f240 322d 	movw	r2, #813	; 0x32d
 8012f92:	495f      	ldr	r1, [pc, #380]	; (8013110 <ip4_frag+0x284>)
 8012f94:	485c      	ldr	r0, [pc, #368]	; (8013108 <ip4_frag+0x27c>)
 8012f96:	f000 faf5 	bl	8013584 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012f9a:	8bfa      	ldrh	r2, [r7, #30]
 8012f9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	bf28      	it	cs
 8012fa4:	4613      	movcs	r3, r2
 8012fa6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012faa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d105      	bne.n	8012fbe <ip4_frag+0x132>
        poff = 0;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	60fb      	str	r3, [r7, #12]
        continue;
 8012fbc:	e041      	b.n	8013042 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012fbe:	f7ff ff0d 	bl	8012ddc <ip_frag_alloc_pbuf_custom_ref>
 8012fc2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012fc4:	69bb      	ldr	r3, [r7, #24]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d103      	bne.n	8012fd2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012fca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fcc:	f7f7 ff8a 	bl	800aee4 <pbuf_free>
        goto memerr;
 8012fd0:	e08f      	b.n	80130f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012fd2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012fd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012fda:	4413      	add	r3, r2
 8012fdc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012fe0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012fe4:	9201      	str	r2, [sp, #4]
 8012fe6:	9300      	str	r3, [sp, #0]
 8012fe8:	4603      	mov	r3, r0
 8012fea:	2241      	movs	r2, #65	; 0x41
 8012fec:	2000      	movs	r0, #0
 8012fee:	f7f7 fdbf 	bl	800ab70 <pbuf_alloced_custom>
 8012ff2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d106      	bne.n	8013008 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012ffa:	69b8      	ldr	r0, [r7, #24]
 8012ffc:	f7ff fef6 	bl	8012dec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013002:	f7f7 ff6f 	bl	800aee4 <pbuf_free>
        goto memerr;
 8013006:	e074      	b.n	80130f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f7f8 f811 	bl	800b030 <pbuf_ref>
      pcr->original = p;
 801300e:	69bb      	ldr	r3, [r7, #24]
 8013010:	68fa      	ldr	r2, [r7, #12]
 8013012:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	4a3f      	ldr	r2, [pc, #252]	; (8013114 <ip4_frag+0x288>)
 8013018:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801301a:	6979      	ldr	r1, [r7, #20]
 801301c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801301e:	f7f8 f82f 	bl	800b080 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013022:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013026:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013030:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013034:	2b00      	cmp	r3, #0
 8013036:	d004      	beq.n	8013042 <ip4_frag+0x1b6>
        poff = 0;
 8013038:	2300      	movs	r3, #0
 801303a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013042:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013046:	2b00      	cmp	r3, #0
 8013048:	d196      	bne.n	8012f78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801304a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801304c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013050:	4413      	add	r3, r2
 8013052:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013058:	f1a3 0213 	sub.w	r2, r3, #19
 801305c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013060:	429a      	cmp	r2, r3
 8013062:	bfcc      	ite	gt
 8013064:	2301      	movgt	r3, #1
 8013066:	2300      	movle	r3, #0
 8013068:	b2db      	uxtb	r3, r3
 801306a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801306c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013074:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013076:	6a3b      	ldr	r3, [r7, #32]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <ip4_frag+0x1f6>
 801307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307e:	2b00      	cmp	r3, #0
 8013080:	d003      	beq.n	801308a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013084:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013088:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801308a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801308c:	4618      	mov	r0, r3
 801308e:	f7f6 fb27 	bl	80096e0 <lwip_htons>
 8013092:	4603      	mov	r3, r0
 8013094:	461a      	mov	r2, r3
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801309a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801309c:	3314      	adds	r3, #20
 801309e:	b29b      	uxth	r3, r3
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7f6 fb1d 	bl	80096e0 <lwip_htons>
 80130a6:	4603      	mov	r3, r0
 80130a8:	461a      	mov	r2, r3
 80130aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	2200      	movs	r2, #0
 80130b2:	729a      	strb	r2, [r3, #10]
 80130b4:	2200      	movs	r2, #0
 80130b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	695b      	ldr	r3, [r3, #20]
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130c0:	68b8      	ldr	r0, [r7, #8]
 80130c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80130c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130c6:	f7f7 ff0d 	bl	800aee4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80130ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80130d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80130da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130dc:	4413      	add	r3, r2
 80130de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80130e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f47f af19 	bne.w	8012f1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80130ec:	2300      	movs	r3, #0
 80130ee:	e002      	b.n	80130f6 <ip4_frag+0x26a>
      goto memerr;
 80130f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80130f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3748      	adds	r7, #72	; 0x48
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	08016ed4 	.word	0x08016ed4
 8013104:	080170b0 	.word	0x080170b0
 8013108:	08016f1c 	.word	0x08016f1c
 801310c:	080170cc 	.word	0x080170cc
 8013110:	080170ec 	.word	0x080170ec
 8013114:	08012e25 	.word	0x08012e25

08013118 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b086      	sub	sp, #24
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013122:	230e      	movs	r3, #14
 8013124:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	895b      	ldrh	r3, [r3, #10]
 801312a:	2b0e      	cmp	r3, #14
 801312c:	d96e      	bls.n	801320c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	7bdb      	ldrb	r3, [r3, #15]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d106      	bne.n	8013144 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801313c:	3301      	adds	r3, #1
 801313e:	b2da      	uxtb	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	7b1a      	ldrb	r2, [r3, #12]
 801314e:	7b5b      	ldrb	r3, [r3, #13]
 8013150:	021b      	lsls	r3, r3, #8
 8013152:	4313      	orrs	r3, r2
 8013154:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	f003 0301 	and.w	r3, r3, #1
 801315e:	2b00      	cmp	r3, #0
 8013160:	d023      	beq.n	80131aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	2b01      	cmp	r3, #1
 8013168:	d10f      	bne.n	801318a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	785b      	ldrb	r3, [r3, #1]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d11b      	bne.n	80131aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013176:	2b5e      	cmp	r3, #94	; 0x5e
 8013178:	d117      	bne.n	80131aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	7b5b      	ldrb	r3, [r3, #13]
 801317e:	f043 0310 	orr.w	r3, r3, #16
 8013182:	b2da      	uxtb	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	735a      	strb	r2, [r3, #13]
 8013188:	e00f      	b.n	80131aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	2206      	movs	r2, #6
 801318e:	4928      	ldr	r1, [pc, #160]	; (8013230 <ethernet_input+0x118>)
 8013190:	4618      	mov	r0, r3
 8013192:	f000 f9d1 	bl	8013538 <memcmp>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d106      	bne.n	80131aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	7b5b      	ldrb	r3, [r3, #13]
 80131a0:	f043 0308 	orr.w	r3, r3, #8
 80131a4:	b2da      	uxtb	r2, r3
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80131aa:	89fb      	ldrh	r3, [r7, #14]
 80131ac:	2b08      	cmp	r3, #8
 80131ae:	d003      	beq.n	80131b8 <ethernet_input+0xa0>
 80131b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80131b4:	d014      	beq.n	80131e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80131b6:	e032      	b.n	801321e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131be:	f003 0308 	and.w	r3, r3, #8
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d024      	beq.n	8013210 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80131c6:	8afb      	ldrh	r3, [r7, #22]
 80131c8:	4619      	mov	r1, r3
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7f7 fe04 	bl	800add8 <pbuf_remove_header>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d11e      	bne.n	8013214 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80131d6:	6839      	ldr	r1, [r7, #0]
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7fe ff21 	bl	8012020 <ip4_input>
      break;
 80131de:	e013      	b.n	8013208 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131e6:	f003 0308 	and.w	r3, r3, #8
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d014      	beq.n	8013218 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80131ee:	8afb      	ldrh	r3, [r7, #22]
 80131f0:	4619      	mov	r1, r3
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f7f7 fdf0 	bl	800add8 <pbuf_remove_header>
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d10e      	bne.n	801321c <ethernet_input+0x104>
        etharp_input(p, netif);
 80131fe:	6839      	ldr	r1, [r7, #0]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7fe f8c1 	bl	8011388 <etharp_input>
      break;
 8013206:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013208:	2300      	movs	r3, #0
 801320a:	e00c      	b.n	8013226 <ethernet_input+0x10e>
    goto free_and_return;
 801320c:	bf00      	nop
 801320e:	e006      	b.n	801321e <ethernet_input+0x106>
        goto free_and_return;
 8013210:	bf00      	nop
 8013212:	e004      	b.n	801321e <ethernet_input+0x106>
        goto free_and_return;
 8013214:	bf00      	nop
 8013216:	e002      	b.n	801321e <ethernet_input+0x106>
        goto free_and_return;
 8013218:	bf00      	nop
 801321a:	e000      	b.n	801321e <ethernet_input+0x106>
        goto free_and_return;
 801321c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f7f7 fe60 	bl	800aee4 <pbuf_free>
  return ERR_OK;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3718      	adds	r7, #24
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	080172c8 	.word	0x080172c8

08013234 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013234:	b580      	push	{r7, lr}
 8013236:	b086      	sub	sp, #24
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
 8013240:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013242:	8c3b      	ldrh	r3, [r7, #32]
 8013244:	4618      	mov	r0, r3
 8013246:	f7f6 fa4b 	bl	80096e0 <lwip_htons>
 801324a:	4603      	mov	r3, r0
 801324c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801324e:	210e      	movs	r1, #14
 8013250:	68b8      	ldr	r0, [r7, #8]
 8013252:	f7f7 fdb1 	bl	800adb8 <pbuf_add_header>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d125      	bne.n	80132a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	8afa      	ldrh	r2, [r7, #22]
 8013266:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	2206      	movs	r2, #6
 801326c:	6839      	ldr	r1, [r7, #0]
 801326e:	4618      	mov	r0, r3
 8013270:	f000 f972 	bl	8013558 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	3306      	adds	r3, #6
 8013278:	2206      	movs	r2, #6
 801327a:	6879      	ldr	r1, [r7, #4]
 801327c:	4618      	mov	r0, r3
 801327e:	f000 f96b 	bl	8013558 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013288:	2b06      	cmp	r3, #6
 801328a:	d006      	beq.n	801329a <ethernet_output+0x66>
 801328c:	4b0a      	ldr	r3, [pc, #40]	; (80132b8 <ethernet_output+0x84>)
 801328e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013292:	490a      	ldr	r1, [pc, #40]	; (80132bc <ethernet_output+0x88>)
 8013294:	480a      	ldr	r0, [pc, #40]	; (80132c0 <ethernet_output+0x8c>)
 8013296:	f000 f975 	bl	8013584 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	699b      	ldr	r3, [r3, #24]
 801329e:	68b9      	ldr	r1, [r7, #8]
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	4798      	blx	r3
 80132a4:	4603      	mov	r3, r0
 80132a6:	e002      	b.n	80132ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80132a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80132aa:	f06f 0301 	mvn.w	r3, #1
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	080170fc 	.word	0x080170fc
 80132bc:	08017134 	.word	0x08017134
 80132c0:	08017168 	.word	0x08017168

080132c4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	60bb      	str	r3, [r7, #8]
 80132d2:	2304      	movs	r3, #4
 80132d4:	60fb      	str	r3, [r7, #12]
 80132d6:	2300      	movs	r3, #0
 80132d8:	613b      	str	r3, [r7, #16]
 80132da:	2300      	movs	r3, #0
 80132dc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80132de:	f107 0308 	add.w	r3, r7, #8
 80132e2:	2100      	movs	r1, #0
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7f3 fae5 	bl	80068b4 <osMessageCreate>
 80132ea:	4602      	mov	r2, r0
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d102      	bne.n	80132fe <sys_mbox_new+0x3a>
    return ERR_MEM;
 80132f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132fc:	e000      	b.n	8013300 <sys_mbox_new+0x3c>

  return ERR_OK;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3718      	adds	r7, #24
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	6839      	ldr	r1, [r7, #0]
 8013318:	2200      	movs	r2, #0
 801331a:	4618      	mov	r0, r3
 801331c:	f7f3 faf2 	bl	8006904 <osMessagePut>
 8013320:	4603      	mov	r3, r0
 8013322:	2b00      	cmp	r3, #0
 8013324:	d102      	bne.n	801332c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013326:	2300      	movs	r3, #0
 8013328:	73fb      	strb	r3, [r7, #15]
 801332a:	e001      	b.n	8013330 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801332c:	23ff      	movs	r3, #255	; 0xff
 801332e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013334:	4618      	mov	r0, r3
 8013336:	3710      	adds	r7, #16
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b08c      	sub	sp, #48	; 0x30
 8013340:	af00      	add	r7, sp, #0
 8013342:	61f8      	str	r0, [r7, #28]
 8013344:	61b9      	str	r1, [r7, #24]
 8013346:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013348:	f7f3 f924 	bl	8006594 <osKernelSysTick>
 801334c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d017      	beq.n	8013384 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	6819      	ldr	r1, [r3, #0]
 8013358:	f107 0320 	add.w	r3, r7, #32
 801335c:	697a      	ldr	r2, [r7, #20]
 801335e:	4618      	mov	r0, r3
 8013360:	f7f3 fb10 	bl	8006984 <osMessageGet>

    if(event.status == osEventMessage)
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	2b10      	cmp	r3, #16
 8013368:	d109      	bne.n	801337e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336c:	461a      	mov	r2, r3
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013372:	f7f3 f90f 	bl	8006594 <osKernelSysTick>
 8013376:	4602      	mov	r2, r0
 8013378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	e019      	b.n	80133b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801337e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013382:	e016      	b.n	80133b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013384:	69fb      	ldr	r3, [r7, #28]
 8013386:	6819      	ldr	r1, [r3, #0]
 8013388:	463b      	mov	r3, r7
 801338a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801338e:	4618      	mov	r0, r3
 8013390:	f7f3 faf8 	bl	8006984 <osMessageGet>
 8013394:	f107 0320 	add.w	r3, r7, #32
 8013398:	463a      	mov	r2, r7
 801339a:	ca07      	ldmia	r2, {r0, r1, r2}
 801339c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80133a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a2:	461a      	mov	r2, r3
 80133a4:	69bb      	ldr	r3, [r7, #24]
 80133a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80133a8:	f7f3 f8f4 	bl	8006594 <osKernelSysTick>
 80133ac:	4602      	mov	r2, r0
 80133ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3730      	adds	r7, #48	; 0x30
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}

080133ba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80133ba:	b480      	push	{r7}
 80133bc:	b083      	sub	sp, #12
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d101      	bne.n	80133ce <sys_mbox_valid+0x14>
    return 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	e000      	b.n	80133d0 <sys_mbox_valid+0x16>
  else
    return 1;
 80133ce:	2301      	movs	r3, #1
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80133e0:	4803      	ldr	r0, [pc, #12]	; (80133f0 <sys_init+0x14>)
 80133e2:	f7f3 f947 	bl	8006674 <osMutexCreate>
 80133e6:	4603      	mov	r3, r0
 80133e8:	4a02      	ldr	r2, [pc, #8]	; (80133f4 <sys_init+0x18>)
 80133ea:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80133ec:	bf00      	nop
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	080172d8 	.word	0x080172d8
 80133f4:	200106c8 	.word	0x200106c8

080133f8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013400:	2300      	movs	r3, #0
 8013402:	60bb      	str	r3, [r7, #8]
 8013404:	2300      	movs	r3, #0
 8013406:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013408:	f107 0308 	add.w	r3, r7, #8
 801340c:	4618      	mov	r0, r3
 801340e:	f7f3 f931 	bl	8006674 <osMutexCreate>
 8013412:	4602      	mov	r2, r0
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d102      	bne.n	8013426 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013424:	e000      	b.n	8013428 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013426:	2300      	movs	r3, #0
}
 8013428:	4618      	mov	r0, r3
 801342a:	3710      	adds	r7, #16
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013440:	4618      	mov	r0, r3
 8013442:	f7f3 f92f 	bl	80066a4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013446:	bf00      	nop
 8013448:	3708      	adds	r7, #8
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}

0801344e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801344e:	b580      	push	{r7, lr}
 8013450:	b082      	sub	sp, #8
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4618      	mov	r0, r3
 801345c:	f7f3 f970 	bl	8006740 <osMutexRelease>
}
 8013460:	bf00      	nop
 8013462:	3708      	adds	r7, #8
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b08c      	sub	sp, #48	; 0x30
 801346c:	af00      	add	r7, sp, #0
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	607a      	str	r2, [r7, #4]
 8013474:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013476:	f107 0314 	add.w	r3, r7, #20
 801347a:	2200      	movs	r2, #0
 801347c:	601a      	str	r2, [r3, #0]
 801347e:	605a      	str	r2, [r3, #4]
 8013480:	609a      	str	r2, [r3, #8]
 8013482:	60da      	str	r2, [r3, #12]
 8013484:	611a      	str	r2, [r3, #16]
 8013486:	615a      	str	r2, [r3, #20]
 8013488:	619a      	str	r2, [r3, #24]
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	617b      	str	r3, [r7, #20]
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	61bb      	str	r3, [r7, #24]
 8013492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013494:	b21b      	sxth	r3, r3
 8013496:	83bb      	strh	r3, [r7, #28]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801349c:	f107 0314 	add.w	r3, r7, #20
 80134a0:	6879      	ldr	r1, [r7, #4]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7f3 f886 	bl	80065b4 <osThreadCreate>
 80134a8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3730      	adds	r7, #48	; 0x30
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
	...

080134b4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80134b8:	4b04      	ldr	r3, [pc, #16]	; (80134cc <sys_arch_protect+0x18>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f3 f8ef 	bl	80066a4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80134c6:	2301      	movs	r3, #1
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	200106c8 	.word	0x200106c8

080134d0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80134d8:	4b04      	ldr	r3, [pc, #16]	; (80134ec <sys_arch_unprotect+0x1c>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f3 f92f 	bl	8006740 <osMutexRelease>
}
 80134e2:	bf00      	nop
 80134e4:	3708      	adds	r7, #8
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	200106c8 	.word	0x200106c8

080134f0 <__libc_init_array>:
 80134f0:	b570      	push	{r4, r5, r6, lr}
 80134f2:	4d0d      	ldr	r5, [pc, #52]	; (8013528 <__libc_init_array+0x38>)
 80134f4:	4c0d      	ldr	r4, [pc, #52]	; (801352c <__libc_init_array+0x3c>)
 80134f6:	1b64      	subs	r4, r4, r5
 80134f8:	10a4      	asrs	r4, r4, #2
 80134fa:	2600      	movs	r6, #0
 80134fc:	42a6      	cmp	r6, r4
 80134fe:	d109      	bne.n	8013514 <__libc_init_array+0x24>
 8013500:	4d0b      	ldr	r5, [pc, #44]	; (8013530 <__libc_init_array+0x40>)
 8013502:	4c0c      	ldr	r4, [pc, #48]	; (8013534 <__libc_init_array+0x44>)
 8013504:	f001 f88e 	bl	8014624 <_init>
 8013508:	1b64      	subs	r4, r4, r5
 801350a:	10a4      	asrs	r4, r4, #2
 801350c:	2600      	movs	r6, #0
 801350e:	42a6      	cmp	r6, r4
 8013510:	d105      	bne.n	801351e <__libc_init_array+0x2e>
 8013512:	bd70      	pop	{r4, r5, r6, pc}
 8013514:	f855 3b04 	ldr.w	r3, [r5], #4
 8013518:	4798      	blx	r3
 801351a:	3601      	adds	r6, #1
 801351c:	e7ee      	b.n	80134fc <__libc_init_array+0xc>
 801351e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013522:	4798      	blx	r3
 8013524:	3601      	adds	r6, #1
 8013526:	e7f2      	b.n	801350e <__libc_init_array+0x1e>
 8013528:	08017430 	.word	0x08017430
 801352c:	08017430 	.word	0x08017430
 8013530:	08017430 	.word	0x08017430
 8013534:	08017434 	.word	0x08017434

08013538 <memcmp>:
 8013538:	b510      	push	{r4, lr}
 801353a:	3901      	subs	r1, #1
 801353c:	4402      	add	r2, r0
 801353e:	4290      	cmp	r0, r2
 8013540:	d101      	bne.n	8013546 <memcmp+0xe>
 8013542:	2000      	movs	r0, #0
 8013544:	e005      	b.n	8013552 <memcmp+0x1a>
 8013546:	7803      	ldrb	r3, [r0, #0]
 8013548:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801354c:	42a3      	cmp	r3, r4
 801354e:	d001      	beq.n	8013554 <memcmp+0x1c>
 8013550:	1b18      	subs	r0, r3, r4
 8013552:	bd10      	pop	{r4, pc}
 8013554:	3001      	adds	r0, #1
 8013556:	e7f2      	b.n	801353e <memcmp+0x6>

08013558 <memcpy>:
 8013558:	440a      	add	r2, r1
 801355a:	4291      	cmp	r1, r2
 801355c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013560:	d100      	bne.n	8013564 <memcpy+0xc>
 8013562:	4770      	bx	lr
 8013564:	b510      	push	{r4, lr}
 8013566:	f811 4b01 	ldrb.w	r4, [r1], #1
 801356a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801356e:	4291      	cmp	r1, r2
 8013570:	d1f9      	bne.n	8013566 <memcpy+0xe>
 8013572:	bd10      	pop	{r4, pc}

08013574 <memset>:
 8013574:	4402      	add	r2, r0
 8013576:	4603      	mov	r3, r0
 8013578:	4293      	cmp	r3, r2
 801357a:	d100      	bne.n	801357e <memset+0xa>
 801357c:	4770      	bx	lr
 801357e:	f803 1b01 	strb.w	r1, [r3], #1
 8013582:	e7f9      	b.n	8013578 <memset+0x4>

08013584 <iprintf>:
 8013584:	b40f      	push	{r0, r1, r2, r3}
 8013586:	4b0a      	ldr	r3, [pc, #40]	; (80135b0 <iprintf+0x2c>)
 8013588:	b513      	push	{r0, r1, r4, lr}
 801358a:	681c      	ldr	r4, [r3, #0]
 801358c:	b124      	cbz	r4, 8013598 <iprintf+0x14>
 801358e:	69a3      	ldr	r3, [r4, #24]
 8013590:	b913      	cbnz	r3, 8013598 <iprintf+0x14>
 8013592:	4620      	mov	r0, r4
 8013594:	f000 f8c2 	bl	801371c <__sinit>
 8013598:	ab05      	add	r3, sp, #20
 801359a:	9a04      	ldr	r2, [sp, #16]
 801359c:	68a1      	ldr	r1, [r4, #8]
 801359e:	9301      	str	r3, [sp, #4]
 80135a0:	4620      	mov	r0, r4
 80135a2:	f000 fa7f 	bl	8013aa4 <_vfiprintf_r>
 80135a6:	b002      	add	sp, #8
 80135a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135ac:	b004      	add	sp, #16
 80135ae:	4770      	bx	lr
 80135b0:	20000030 	.word	0x20000030

080135b4 <rand>:
 80135b4:	4b16      	ldr	r3, [pc, #88]	; (8013610 <rand+0x5c>)
 80135b6:	b510      	push	{r4, lr}
 80135b8:	681c      	ldr	r4, [r3, #0]
 80135ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135bc:	b9b3      	cbnz	r3, 80135ec <rand+0x38>
 80135be:	2018      	movs	r0, #24
 80135c0:	f000 f95e 	bl	8013880 <malloc>
 80135c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80135c6:	b928      	cbnz	r0, 80135d4 <rand+0x20>
 80135c8:	4602      	mov	r2, r0
 80135ca:	4b12      	ldr	r3, [pc, #72]	; (8013614 <rand+0x60>)
 80135cc:	4812      	ldr	r0, [pc, #72]	; (8013618 <rand+0x64>)
 80135ce:	214e      	movs	r1, #78	; 0x4e
 80135d0:	f000 f82e 	bl	8013630 <__assert_func>
 80135d4:	4a11      	ldr	r2, [pc, #68]	; (801361c <rand+0x68>)
 80135d6:	4b12      	ldr	r3, [pc, #72]	; (8013620 <rand+0x6c>)
 80135d8:	e9c0 2300 	strd	r2, r3, [r0]
 80135dc:	4b11      	ldr	r3, [pc, #68]	; (8013624 <rand+0x70>)
 80135de:	6083      	str	r3, [r0, #8]
 80135e0:	230b      	movs	r3, #11
 80135e2:	8183      	strh	r3, [r0, #12]
 80135e4:	2201      	movs	r2, #1
 80135e6:	2300      	movs	r3, #0
 80135e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80135ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80135ee:	4a0e      	ldr	r2, [pc, #56]	; (8013628 <rand+0x74>)
 80135f0:	6920      	ldr	r0, [r4, #16]
 80135f2:	6963      	ldr	r3, [r4, #20]
 80135f4:	490d      	ldr	r1, [pc, #52]	; (801362c <rand+0x78>)
 80135f6:	4342      	muls	r2, r0
 80135f8:	fb01 2203 	mla	r2, r1, r3, r2
 80135fc:	fba0 0101 	umull	r0, r1, r0, r1
 8013600:	1c43      	adds	r3, r0, #1
 8013602:	eb42 0001 	adc.w	r0, r2, r1
 8013606:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801360a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801360e:	bd10      	pop	{r4, pc}
 8013610:	20000030 	.word	0x20000030
 8013614:	080172e4 	.word	0x080172e4
 8013618:	080172fb 	.word	0x080172fb
 801361c:	abcd330e 	.word	0xabcd330e
 8013620:	e66d1234 	.word	0xe66d1234
 8013624:	0005deec 	.word	0x0005deec
 8013628:	5851f42d 	.word	0x5851f42d
 801362c:	4c957f2d 	.word	0x4c957f2d

08013630 <__assert_func>:
 8013630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013632:	4614      	mov	r4, r2
 8013634:	461a      	mov	r2, r3
 8013636:	4b09      	ldr	r3, [pc, #36]	; (801365c <__assert_func+0x2c>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	4605      	mov	r5, r0
 801363c:	68d8      	ldr	r0, [r3, #12]
 801363e:	b14c      	cbz	r4, 8013654 <__assert_func+0x24>
 8013640:	4b07      	ldr	r3, [pc, #28]	; (8013660 <__assert_func+0x30>)
 8013642:	9100      	str	r1, [sp, #0]
 8013644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013648:	4906      	ldr	r1, [pc, #24]	; (8013664 <__assert_func+0x34>)
 801364a:	462b      	mov	r3, r5
 801364c:	f000 f8e4 	bl	8013818 <fiprintf>
 8013650:	f000 fe12 	bl	8014278 <abort>
 8013654:	4b04      	ldr	r3, [pc, #16]	; (8013668 <__assert_func+0x38>)
 8013656:	461c      	mov	r4, r3
 8013658:	e7f3      	b.n	8013642 <__assert_func+0x12>
 801365a:	bf00      	nop
 801365c:	20000030 	.word	0x20000030
 8013660:	08017356 	.word	0x08017356
 8013664:	08017363 	.word	0x08017363
 8013668:	08017391 	.word	0x08017391

0801366c <std>:
 801366c:	2300      	movs	r3, #0
 801366e:	b510      	push	{r4, lr}
 8013670:	4604      	mov	r4, r0
 8013672:	e9c0 3300 	strd	r3, r3, [r0]
 8013676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801367a:	6083      	str	r3, [r0, #8]
 801367c:	8181      	strh	r1, [r0, #12]
 801367e:	6643      	str	r3, [r0, #100]	; 0x64
 8013680:	81c2      	strh	r2, [r0, #14]
 8013682:	6183      	str	r3, [r0, #24]
 8013684:	4619      	mov	r1, r3
 8013686:	2208      	movs	r2, #8
 8013688:	305c      	adds	r0, #92	; 0x5c
 801368a:	f7ff ff73 	bl	8013574 <memset>
 801368e:	4b05      	ldr	r3, [pc, #20]	; (80136a4 <std+0x38>)
 8013690:	6263      	str	r3, [r4, #36]	; 0x24
 8013692:	4b05      	ldr	r3, [pc, #20]	; (80136a8 <std+0x3c>)
 8013694:	62a3      	str	r3, [r4, #40]	; 0x28
 8013696:	4b05      	ldr	r3, [pc, #20]	; (80136ac <std+0x40>)
 8013698:	62e3      	str	r3, [r4, #44]	; 0x2c
 801369a:	4b05      	ldr	r3, [pc, #20]	; (80136b0 <std+0x44>)
 801369c:	6224      	str	r4, [r4, #32]
 801369e:	6323      	str	r3, [r4, #48]	; 0x30
 80136a0:	bd10      	pop	{r4, pc}
 80136a2:	bf00      	nop
 80136a4:	0801404d 	.word	0x0801404d
 80136a8:	0801406f 	.word	0x0801406f
 80136ac:	080140a7 	.word	0x080140a7
 80136b0:	080140cb 	.word	0x080140cb

080136b4 <_cleanup_r>:
 80136b4:	4901      	ldr	r1, [pc, #4]	; (80136bc <_cleanup_r+0x8>)
 80136b6:	f000 b8c1 	b.w	801383c <_fwalk_reent>
 80136ba:	bf00      	nop
 80136bc:	080143b5 	.word	0x080143b5

080136c0 <__sfmoreglue>:
 80136c0:	b570      	push	{r4, r5, r6, lr}
 80136c2:	2268      	movs	r2, #104	; 0x68
 80136c4:	1e4d      	subs	r5, r1, #1
 80136c6:	4355      	muls	r5, r2
 80136c8:	460e      	mov	r6, r1
 80136ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80136ce:	f000 f94b 	bl	8013968 <_malloc_r>
 80136d2:	4604      	mov	r4, r0
 80136d4:	b140      	cbz	r0, 80136e8 <__sfmoreglue+0x28>
 80136d6:	2100      	movs	r1, #0
 80136d8:	e9c0 1600 	strd	r1, r6, [r0]
 80136dc:	300c      	adds	r0, #12
 80136de:	60a0      	str	r0, [r4, #8]
 80136e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80136e4:	f7ff ff46 	bl	8013574 <memset>
 80136e8:	4620      	mov	r0, r4
 80136ea:	bd70      	pop	{r4, r5, r6, pc}

080136ec <__sfp_lock_acquire>:
 80136ec:	4801      	ldr	r0, [pc, #4]	; (80136f4 <__sfp_lock_acquire+0x8>)
 80136ee:	f000 b8c5 	b.w	801387c <__retarget_lock_acquire_recursive>
 80136f2:	bf00      	nop
 80136f4:	200106d1 	.word	0x200106d1

080136f8 <__sfp_lock_release>:
 80136f8:	4801      	ldr	r0, [pc, #4]	; (8013700 <__sfp_lock_release+0x8>)
 80136fa:	f000 b8c0 	b.w	801387e <__retarget_lock_release_recursive>
 80136fe:	bf00      	nop
 8013700:	200106d1 	.word	0x200106d1

08013704 <__sinit_lock_acquire>:
 8013704:	4801      	ldr	r0, [pc, #4]	; (801370c <__sinit_lock_acquire+0x8>)
 8013706:	f000 b8b9 	b.w	801387c <__retarget_lock_acquire_recursive>
 801370a:	bf00      	nop
 801370c:	200106d2 	.word	0x200106d2

08013710 <__sinit_lock_release>:
 8013710:	4801      	ldr	r0, [pc, #4]	; (8013718 <__sinit_lock_release+0x8>)
 8013712:	f000 b8b4 	b.w	801387e <__retarget_lock_release_recursive>
 8013716:	bf00      	nop
 8013718:	200106d2 	.word	0x200106d2

0801371c <__sinit>:
 801371c:	b510      	push	{r4, lr}
 801371e:	4604      	mov	r4, r0
 8013720:	f7ff fff0 	bl	8013704 <__sinit_lock_acquire>
 8013724:	69a3      	ldr	r3, [r4, #24]
 8013726:	b11b      	cbz	r3, 8013730 <__sinit+0x14>
 8013728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801372c:	f7ff bff0 	b.w	8013710 <__sinit_lock_release>
 8013730:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013734:	6523      	str	r3, [r4, #80]	; 0x50
 8013736:	4b13      	ldr	r3, [pc, #76]	; (8013784 <__sinit+0x68>)
 8013738:	4a13      	ldr	r2, [pc, #76]	; (8013788 <__sinit+0x6c>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	62a2      	str	r2, [r4, #40]	; 0x28
 801373e:	42a3      	cmp	r3, r4
 8013740:	bf04      	itt	eq
 8013742:	2301      	moveq	r3, #1
 8013744:	61a3      	streq	r3, [r4, #24]
 8013746:	4620      	mov	r0, r4
 8013748:	f000 f820 	bl	801378c <__sfp>
 801374c:	6060      	str	r0, [r4, #4]
 801374e:	4620      	mov	r0, r4
 8013750:	f000 f81c 	bl	801378c <__sfp>
 8013754:	60a0      	str	r0, [r4, #8]
 8013756:	4620      	mov	r0, r4
 8013758:	f000 f818 	bl	801378c <__sfp>
 801375c:	2200      	movs	r2, #0
 801375e:	60e0      	str	r0, [r4, #12]
 8013760:	2104      	movs	r1, #4
 8013762:	6860      	ldr	r0, [r4, #4]
 8013764:	f7ff ff82 	bl	801366c <std>
 8013768:	68a0      	ldr	r0, [r4, #8]
 801376a:	2201      	movs	r2, #1
 801376c:	2109      	movs	r1, #9
 801376e:	f7ff ff7d 	bl	801366c <std>
 8013772:	68e0      	ldr	r0, [r4, #12]
 8013774:	2202      	movs	r2, #2
 8013776:	2112      	movs	r1, #18
 8013778:	f7ff ff78 	bl	801366c <std>
 801377c:	2301      	movs	r3, #1
 801377e:	61a3      	str	r3, [r4, #24]
 8013780:	e7d2      	b.n	8013728 <__sinit+0xc>
 8013782:	bf00      	nop
 8013784:	080172e0 	.word	0x080172e0
 8013788:	080136b5 	.word	0x080136b5

0801378c <__sfp>:
 801378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378e:	4607      	mov	r7, r0
 8013790:	f7ff ffac 	bl	80136ec <__sfp_lock_acquire>
 8013794:	4b1e      	ldr	r3, [pc, #120]	; (8013810 <__sfp+0x84>)
 8013796:	681e      	ldr	r6, [r3, #0]
 8013798:	69b3      	ldr	r3, [r6, #24]
 801379a:	b913      	cbnz	r3, 80137a2 <__sfp+0x16>
 801379c:	4630      	mov	r0, r6
 801379e:	f7ff ffbd 	bl	801371c <__sinit>
 80137a2:	3648      	adds	r6, #72	; 0x48
 80137a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137a8:	3b01      	subs	r3, #1
 80137aa:	d503      	bpl.n	80137b4 <__sfp+0x28>
 80137ac:	6833      	ldr	r3, [r6, #0]
 80137ae:	b30b      	cbz	r3, 80137f4 <__sfp+0x68>
 80137b0:	6836      	ldr	r6, [r6, #0]
 80137b2:	e7f7      	b.n	80137a4 <__sfp+0x18>
 80137b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137b8:	b9d5      	cbnz	r5, 80137f0 <__sfp+0x64>
 80137ba:	4b16      	ldr	r3, [pc, #88]	; (8013814 <__sfp+0x88>)
 80137bc:	60e3      	str	r3, [r4, #12]
 80137be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80137c2:	6665      	str	r5, [r4, #100]	; 0x64
 80137c4:	f000 f859 	bl	801387a <__retarget_lock_init_recursive>
 80137c8:	f7ff ff96 	bl	80136f8 <__sfp_lock_release>
 80137cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80137d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80137d4:	6025      	str	r5, [r4, #0]
 80137d6:	61a5      	str	r5, [r4, #24]
 80137d8:	2208      	movs	r2, #8
 80137da:	4629      	mov	r1, r5
 80137dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80137e0:	f7ff fec8 	bl	8013574 <memset>
 80137e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80137e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80137ec:	4620      	mov	r0, r4
 80137ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137f0:	3468      	adds	r4, #104	; 0x68
 80137f2:	e7d9      	b.n	80137a8 <__sfp+0x1c>
 80137f4:	2104      	movs	r1, #4
 80137f6:	4638      	mov	r0, r7
 80137f8:	f7ff ff62 	bl	80136c0 <__sfmoreglue>
 80137fc:	4604      	mov	r4, r0
 80137fe:	6030      	str	r0, [r6, #0]
 8013800:	2800      	cmp	r0, #0
 8013802:	d1d5      	bne.n	80137b0 <__sfp+0x24>
 8013804:	f7ff ff78 	bl	80136f8 <__sfp_lock_release>
 8013808:	230c      	movs	r3, #12
 801380a:	603b      	str	r3, [r7, #0]
 801380c:	e7ee      	b.n	80137ec <__sfp+0x60>
 801380e:	bf00      	nop
 8013810:	080172e0 	.word	0x080172e0
 8013814:	ffff0001 	.word	0xffff0001

08013818 <fiprintf>:
 8013818:	b40e      	push	{r1, r2, r3}
 801381a:	b503      	push	{r0, r1, lr}
 801381c:	4601      	mov	r1, r0
 801381e:	ab03      	add	r3, sp, #12
 8013820:	4805      	ldr	r0, [pc, #20]	; (8013838 <fiprintf+0x20>)
 8013822:	f853 2b04 	ldr.w	r2, [r3], #4
 8013826:	6800      	ldr	r0, [r0, #0]
 8013828:	9301      	str	r3, [sp, #4]
 801382a:	f000 f93b 	bl	8013aa4 <_vfiprintf_r>
 801382e:	b002      	add	sp, #8
 8013830:	f85d eb04 	ldr.w	lr, [sp], #4
 8013834:	b003      	add	sp, #12
 8013836:	4770      	bx	lr
 8013838:	20000030 	.word	0x20000030

0801383c <_fwalk_reent>:
 801383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013840:	4606      	mov	r6, r0
 8013842:	4688      	mov	r8, r1
 8013844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013848:	2700      	movs	r7, #0
 801384a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801384e:	f1b9 0901 	subs.w	r9, r9, #1
 8013852:	d505      	bpl.n	8013860 <_fwalk_reent+0x24>
 8013854:	6824      	ldr	r4, [r4, #0]
 8013856:	2c00      	cmp	r4, #0
 8013858:	d1f7      	bne.n	801384a <_fwalk_reent+0xe>
 801385a:	4638      	mov	r0, r7
 801385c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013860:	89ab      	ldrh	r3, [r5, #12]
 8013862:	2b01      	cmp	r3, #1
 8013864:	d907      	bls.n	8013876 <_fwalk_reent+0x3a>
 8013866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801386a:	3301      	adds	r3, #1
 801386c:	d003      	beq.n	8013876 <_fwalk_reent+0x3a>
 801386e:	4629      	mov	r1, r5
 8013870:	4630      	mov	r0, r6
 8013872:	47c0      	blx	r8
 8013874:	4307      	orrs	r7, r0
 8013876:	3568      	adds	r5, #104	; 0x68
 8013878:	e7e9      	b.n	801384e <_fwalk_reent+0x12>

0801387a <__retarget_lock_init_recursive>:
 801387a:	4770      	bx	lr

0801387c <__retarget_lock_acquire_recursive>:
 801387c:	4770      	bx	lr

0801387e <__retarget_lock_release_recursive>:
 801387e:	4770      	bx	lr

08013880 <malloc>:
 8013880:	4b02      	ldr	r3, [pc, #8]	; (801388c <malloc+0xc>)
 8013882:	4601      	mov	r1, r0
 8013884:	6818      	ldr	r0, [r3, #0]
 8013886:	f000 b86f 	b.w	8013968 <_malloc_r>
 801388a:	bf00      	nop
 801388c:	20000030 	.word	0x20000030

08013890 <_free_r>:
 8013890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013892:	2900      	cmp	r1, #0
 8013894:	d044      	beq.n	8013920 <_free_r+0x90>
 8013896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801389a:	9001      	str	r0, [sp, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	f1a1 0404 	sub.w	r4, r1, #4
 80138a2:	bfb8      	it	lt
 80138a4:	18e4      	addlt	r4, r4, r3
 80138a6:	f000 fe39 	bl	801451c <__malloc_lock>
 80138aa:	4a1e      	ldr	r2, [pc, #120]	; (8013924 <_free_r+0x94>)
 80138ac:	9801      	ldr	r0, [sp, #4]
 80138ae:	6813      	ldr	r3, [r2, #0]
 80138b0:	b933      	cbnz	r3, 80138c0 <_free_r+0x30>
 80138b2:	6063      	str	r3, [r4, #4]
 80138b4:	6014      	str	r4, [r2, #0]
 80138b6:	b003      	add	sp, #12
 80138b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138bc:	f000 be34 	b.w	8014528 <__malloc_unlock>
 80138c0:	42a3      	cmp	r3, r4
 80138c2:	d908      	bls.n	80138d6 <_free_r+0x46>
 80138c4:	6825      	ldr	r5, [r4, #0]
 80138c6:	1961      	adds	r1, r4, r5
 80138c8:	428b      	cmp	r3, r1
 80138ca:	bf01      	itttt	eq
 80138cc:	6819      	ldreq	r1, [r3, #0]
 80138ce:	685b      	ldreq	r3, [r3, #4]
 80138d0:	1949      	addeq	r1, r1, r5
 80138d2:	6021      	streq	r1, [r4, #0]
 80138d4:	e7ed      	b.n	80138b2 <_free_r+0x22>
 80138d6:	461a      	mov	r2, r3
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	b10b      	cbz	r3, 80138e0 <_free_r+0x50>
 80138dc:	42a3      	cmp	r3, r4
 80138de:	d9fa      	bls.n	80138d6 <_free_r+0x46>
 80138e0:	6811      	ldr	r1, [r2, #0]
 80138e2:	1855      	adds	r5, r2, r1
 80138e4:	42a5      	cmp	r5, r4
 80138e6:	d10b      	bne.n	8013900 <_free_r+0x70>
 80138e8:	6824      	ldr	r4, [r4, #0]
 80138ea:	4421      	add	r1, r4
 80138ec:	1854      	adds	r4, r2, r1
 80138ee:	42a3      	cmp	r3, r4
 80138f0:	6011      	str	r1, [r2, #0]
 80138f2:	d1e0      	bne.n	80138b6 <_free_r+0x26>
 80138f4:	681c      	ldr	r4, [r3, #0]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	6053      	str	r3, [r2, #4]
 80138fa:	4421      	add	r1, r4
 80138fc:	6011      	str	r1, [r2, #0]
 80138fe:	e7da      	b.n	80138b6 <_free_r+0x26>
 8013900:	d902      	bls.n	8013908 <_free_r+0x78>
 8013902:	230c      	movs	r3, #12
 8013904:	6003      	str	r3, [r0, #0]
 8013906:	e7d6      	b.n	80138b6 <_free_r+0x26>
 8013908:	6825      	ldr	r5, [r4, #0]
 801390a:	1961      	adds	r1, r4, r5
 801390c:	428b      	cmp	r3, r1
 801390e:	bf04      	itt	eq
 8013910:	6819      	ldreq	r1, [r3, #0]
 8013912:	685b      	ldreq	r3, [r3, #4]
 8013914:	6063      	str	r3, [r4, #4]
 8013916:	bf04      	itt	eq
 8013918:	1949      	addeq	r1, r1, r5
 801391a:	6021      	streq	r1, [r4, #0]
 801391c:	6054      	str	r4, [r2, #4]
 801391e:	e7ca      	b.n	80138b6 <_free_r+0x26>
 8013920:	b003      	add	sp, #12
 8013922:	bd30      	pop	{r4, r5, pc}
 8013924:	200106d4 	.word	0x200106d4

08013928 <sbrk_aligned>:
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	4e0e      	ldr	r6, [pc, #56]	; (8013964 <sbrk_aligned+0x3c>)
 801392c:	460c      	mov	r4, r1
 801392e:	6831      	ldr	r1, [r6, #0]
 8013930:	4605      	mov	r5, r0
 8013932:	b911      	cbnz	r1, 801393a <sbrk_aligned+0x12>
 8013934:	f000 fb7a 	bl	801402c <_sbrk_r>
 8013938:	6030      	str	r0, [r6, #0]
 801393a:	4621      	mov	r1, r4
 801393c:	4628      	mov	r0, r5
 801393e:	f000 fb75 	bl	801402c <_sbrk_r>
 8013942:	1c43      	adds	r3, r0, #1
 8013944:	d00a      	beq.n	801395c <sbrk_aligned+0x34>
 8013946:	1cc4      	adds	r4, r0, #3
 8013948:	f024 0403 	bic.w	r4, r4, #3
 801394c:	42a0      	cmp	r0, r4
 801394e:	d007      	beq.n	8013960 <sbrk_aligned+0x38>
 8013950:	1a21      	subs	r1, r4, r0
 8013952:	4628      	mov	r0, r5
 8013954:	f000 fb6a 	bl	801402c <_sbrk_r>
 8013958:	3001      	adds	r0, #1
 801395a:	d101      	bne.n	8013960 <sbrk_aligned+0x38>
 801395c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013960:	4620      	mov	r0, r4
 8013962:	bd70      	pop	{r4, r5, r6, pc}
 8013964:	200106d8 	.word	0x200106d8

08013968 <_malloc_r>:
 8013968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801396c:	1ccd      	adds	r5, r1, #3
 801396e:	f025 0503 	bic.w	r5, r5, #3
 8013972:	3508      	adds	r5, #8
 8013974:	2d0c      	cmp	r5, #12
 8013976:	bf38      	it	cc
 8013978:	250c      	movcc	r5, #12
 801397a:	2d00      	cmp	r5, #0
 801397c:	4607      	mov	r7, r0
 801397e:	db01      	blt.n	8013984 <_malloc_r+0x1c>
 8013980:	42a9      	cmp	r1, r5
 8013982:	d905      	bls.n	8013990 <_malloc_r+0x28>
 8013984:	230c      	movs	r3, #12
 8013986:	603b      	str	r3, [r7, #0]
 8013988:	2600      	movs	r6, #0
 801398a:	4630      	mov	r0, r6
 801398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013990:	4e2e      	ldr	r6, [pc, #184]	; (8013a4c <_malloc_r+0xe4>)
 8013992:	f000 fdc3 	bl	801451c <__malloc_lock>
 8013996:	6833      	ldr	r3, [r6, #0]
 8013998:	461c      	mov	r4, r3
 801399a:	bb34      	cbnz	r4, 80139ea <_malloc_r+0x82>
 801399c:	4629      	mov	r1, r5
 801399e:	4638      	mov	r0, r7
 80139a0:	f7ff ffc2 	bl	8013928 <sbrk_aligned>
 80139a4:	1c43      	adds	r3, r0, #1
 80139a6:	4604      	mov	r4, r0
 80139a8:	d14d      	bne.n	8013a46 <_malloc_r+0xde>
 80139aa:	6834      	ldr	r4, [r6, #0]
 80139ac:	4626      	mov	r6, r4
 80139ae:	2e00      	cmp	r6, #0
 80139b0:	d140      	bne.n	8013a34 <_malloc_r+0xcc>
 80139b2:	6823      	ldr	r3, [r4, #0]
 80139b4:	4631      	mov	r1, r6
 80139b6:	4638      	mov	r0, r7
 80139b8:	eb04 0803 	add.w	r8, r4, r3
 80139bc:	f000 fb36 	bl	801402c <_sbrk_r>
 80139c0:	4580      	cmp	r8, r0
 80139c2:	d13a      	bne.n	8013a3a <_malloc_r+0xd2>
 80139c4:	6821      	ldr	r1, [r4, #0]
 80139c6:	3503      	adds	r5, #3
 80139c8:	1a6d      	subs	r5, r5, r1
 80139ca:	f025 0503 	bic.w	r5, r5, #3
 80139ce:	3508      	adds	r5, #8
 80139d0:	2d0c      	cmp	r5, #12
 80139d2:	bf38      	it	cc
 80139d4:	250c      	movcc	r5, #12
 80139d6:	4629      	mov	r1, r5
 80139d8:	4638      	mov	r0, r7
 80139da:	f7ff ffa5 	bl	8013928 <sbrk_aligned>
 80139de:	3001      	adds	r0, #1
 80139e0:	d02b      	beq.n	8013a3a <_malloc_r+0xd2>
 80139e2:	6823      	ldr	r3, [r4, #0]
 80139e4:	442b      	add	r3, r5
 80139e6:	6023      	str	r3, [r4, #0]
 80139e8:	e00e      	b.n	8013a08 <_malloc_r+0xa0>
 80139ea:	6822      	ldr	r2, [r4, #0]
 80139ec:	1b52      	subs	r2, r2, r5
 80139ee:	d41e      	bmi.n	8013a2e <_malloc_r+0xc6>
 80139f0:	2a0b      	cmp	r2, #11
 80139f2:	d916      	bls.n	8013a22 <_malloc_r+0xba>
 80139f4:	1961      	adds	r1, r4, r5
 80139f6:	42a3      	cmp	r3, r4
 80139f8:	6025      	str	r5, [r4, #0]
 80139fa:	bf18      	it	ne
 80139fc:	6059      	strne	r1, [r3, #4]
 80139fe:	6863      	ldr	r3, [r4, #4]
 8013a00:	bf08      	it	eq
 8013a02:	6031      	streq	r1, [r6, #0]
 8013a04:	5162      	str	r2, [r4, r5]
 8013a06:	604b      	str	r3, [r1, #4]
 8013a08:	4638      	mov	r0, r7
 8013a0a:	f104 060b 	add.w	r6, r4, #11
 8013a0e:	f000 fd8b 	bl	8014528 <__malloc_unlock>
 8013a12:	f026 0607 	bic.w	r6, r6, #7
 8013a16:	1d23      	adds	r3, r4, #4
 8013a18:	1af2      	subs	r2, r6, r3
 8013a1a:	d0b6      	beq.n	801398a <_malloc_r+0x22>
 8013a1c:	1b9b      	subs	r3, r3, r6
 8013a1e:	50a3      	str	r3, [r4, r2]
 8013a20:	e7b3      	b.n	801398a <_malloc_r+0x22>
 8013a22:	6862      	ldr	r2, [r4, #4]
 8013a24:	42a3      	cmp	r3, r4
 8013a26:	bf0c      	ite	eq
 8013a28:	6032      	streq	r2, [r6, #0]
 8013a2a:	605a      	strne	r2, [r3, #4]
 8013a2c:	e7ec      	b.n	8013a08 <_malloc_r+0xa0>
 8013a2e:	4623      	mov	r3, r4
 8013a30:	6864      	ldr	r4, [r4, #4]
 8013a32:	e7b2      	b.n	801399a <_malloc_r+0x32>
 8013a34:	4634      	mov	r4, r6
 8013a36:	6876      	ldr	r6, [r6, #4]
 8013a38:	e7b9      	b.n	80139ae <_malloc_r+0x46>
 8013a3a:	230c      	movs	r3, #12
 8013a3c:	603b      	str	r3, [r7, #0]
 8013a3e:	4638      	mov	r0, r7
 8013a40:	f000 fd72 	bl	8014528 <__malloc_unlock>
 8013a44:	e7a1      	b.n	801398a <_malloc_r+0x22>
 8013a46:	6025      	str	r5, [r4, #0]
 8013a48:	e7de      	b.n	8013a08 <_malloc_r+0xa0>
 8013a4a:	bf00      	nop
 8013a4c:	200106d4 	.word	0x200106d4

08013a50 <__sfputc_r>:
 8013a50:	6893      	ldr	r3, [r2, #8]
 8013a52:	3b01      	subs	r3, #1
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	b410      	push	{r4}
 8013a58:	6093      	str	r3, [r2, #8]
 8013a5a:	da08      	bge.n	8013a6e <__sfputc_r+0x1e>
 8013a5c:	6994      	ldr	r4, [r2, #24]
 8013a5e:	42a3      	cmp	r3, r4
 8013a60:	db01      	blt.n	8013a66 <__sfputc_r+0x16>
 8013a62:	290a      	cmp	r1, #10
 8013a64:	d103      	bne.n	8013a6e <__sfputc_r+0x1e>
 8013a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a6a:	f000 bb33 	b.w	80140d4 <__swbuf_r>
 8013a6e:	6813      	ldr	r3, [r2, #0]
 8013a70:	1c58      	adds	r0, r3, #1
 8013a72:	6010      	str	r0, [r2, #0]
 8013a74:	7019      	strb	r1, [r3, #0]
 8013a76:	4608      	mov	r0, r1
 8013a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a7c:	4770      	bx	lr

08013a7e <__sfputs_r>:
 8013a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a80:	4606      	mov	r6, r0
 8013a82:	460f      	mov	r7, r1
 8013a84:	4614      	mov	r4, r2
 8013a86:	18d5      	adds	r5, r2, r3
 8013a88:	42ac      	cmp	r4, r5
 8013a8a:	d101      	bne.n	8013a90 <__sfputs_r+0x12>
 8013a8c:	2000      	movs	r0, #0
 8013a8e:	e007      	b.n	8013aa0 <__sfputs_r+0x22>
 8013a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a94:	463a      	mov	r2, r7
 8013a96:	4630      	mov	r0, r6
 8013a98:	f7ff ffda 	bl	8013a50 <__sfputc_r>
 8013a9c:	1c43      	adds	r3, r0, #1
 8013a9e:	d1f3      	bne.n	8013a88 <__sfputs_r+0xa>
 8013aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013aa4 <_vfiprintf_r>:
 8013aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa8:	460d      	mov	r5, r1
 8013aaa:	b09d      	sub	sp, #116	; 0x74
 8013aac:	4614      	mov	r4, r2
 8013aae:	4698      	mov	r8, r3
 8013ab0:	4606      	mov	r6, r0
 8013ab2:	b118      	cbz	r0, 8013abc <_vfiprintf_r+0x18>
 8013ab4:	6983      	ldr	r3, [r0, #24]
 8013ab6:	b90b      	cbnz	r3, 8013abc <_vfiprintf_r+0x18>
 8013ab8:	f7ff fe30 	bl	801371c <__sinit>
 8013abc:	4b89      	ldr	r3, [pc, #548]	; (8013ce4 <_vfiprintf_r+0x240>)
 8013abe:	429d      	cmp	r5, r3
 8013ac0:	d11b      	bne.n	8013afa <_vfiprintf_r+0x56>
 8013ac2:	6875      	ldr	r5, [r6, #4]
 8013ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ac6:	07d9      	lsls	r1, r3, #31
 8013ac8:	d405      	bmi.n	8013ad6 <_vfiprintf_r+0x32>
 8013aca:	89ab      	ldrh	r3, [r5, #12]
 8013acc:	059a      	lsls	r2, r3, #22
 8013ace:	d402      	bmi.n	8013ad6 <_vfiprintf_r+0x32>
 8013ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ad2:	f7ff fed3 	bl	801387c <__retarget_lock_acquire_recursive>
 8013ad6:	89ab      	ldrh	r3, [r5, #12]
 8013ad8:	071b      	lsls	r3, r3, #28
 8013ada:	d501      	bpl.n	8013ae0 <_vfiprintf_r+0x3c>
 8013adc:	692b      	ldr	r3, [r5, #16]
 8013ade:	b9eb      	cbnz	r3, 8013b1c <_vfiprintf_r+0x78>
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	f000 fb5a 	bl	801419c <__swsetup_r>
 8013ae8:	b1c0      	cbz	r0, 8013b1c <_vfiprintf_r+0x78>
 8013aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013aec:	07dc      	lsls	r4, r3, #31
 8013aee:	d50e      	bpl.n	8013b0e <_vfiprintf_r+0x6a>
 8013af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013af4:	b01d      	add	sp, #116	; 0x74
 8013af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afa:	4b7b      	ldr	r3, [pc, #492]	; (8013ce8 <_vfiprintf_r+0x244>)
 8013afc:	429d      	cmp	r5, r3
 8013afe:	d101      	bne.n	8013b04 <_vfiprintf_r+0x60>
 8013b00:	68b5      	ldr	r5, [r6, #8]
 8013b02:	e7df      	b.n	8013ac4 <_vfiprintf_r+0x20>
 8013b04:	4b79      	ldr	r3, [pc, #484]	; (8013cec <_vfiprintf_r+0x248>)
 8013b06:	429d      	cmp	r5, r3
 8013b08:	bf08      	it	eq
 8013b0a:	68f5      	ldreq	r5, [r6, #12]
 8013b0c:	e7da      	b.n	8013ac4 <_vfiprintf_r+0x20>
 8013b0e:	89ab      	ldrh	r3, [r5, #12]
 8013b10:	0598      	lsls	r0, r3, #22
 8013b12:	d4ed      	bmi.n	8013af0 <_vfiprintf_r+0x4c>
 8013b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b16:	f7ff feb2 	bl	801387e <__retarget_lock_release_recursive>
 8013b1a:	e7e9      	b.n	8013af0 <_vfiprintf_r+0x4c>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b20:	2320      	movs	r3, #32
 8013b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b2a:	2330      	movs	r3, #48	; 0x30
 8013b2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013cf0 <_vfiprintf_r+0x24c>
 8013b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b34:	f04f 0901 	mov.w	r9, #1
 8013b38:	4623      	mov	r3, r4
 8013b3a:	469a      	mov	sl, r3
 8013b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b40:	b10a      	cbz	r2, 8013b46 <_vfiprintf_r+0xa2>
 8013b42:	2a25      	cmp	r2, #37	; 0x25
 8013b44:	d1f9      	bne.n	8013b3a <_vfiprintf_r+0x96>
 8013b46:	ebba 0b04 	subs.w	fp, sl, r4
 8013b4a:	d00b      	beq.n	8013b64 <_vfiprintf_r+0xc0>
 8013b4c:	465b      	mov	r3, fp
 8013b4e:	4622      	mov	r2, r4
 8013b50:	4629      	mov	r1, r5
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7ff ff93 	bl	8013a7e <__sfputs_r>
 8013b58:	3001      	adds	r0, #1
 8013b5a:	f000 80aa 	beq.w	8013cb2 <_vfiprintf_r+0x20e>
 8013b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b60:	445a      	add	r2, fp
 8013b62:	9209      	str	r2, [sp, #36]	; 0x24
 8013b64:	f89a 3000 	ldrb.w	r3, [sl]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	f000 80a2 	beq.w	8013cb2 <_vfiprintf_r+0x20e>
 8013b6e:	2300      	movs	r3, #0
 8013b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b78:	f10a 0a01 	add.w	sl, sl, #1
 8013b7c:	9304      	str	r3, [sp, #16]
 8013b7e:	9307      	str	r3, [sp, #28]
 8013b80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b84:	931a      	str	r3, [sp, #104]	; 0x68
 8013b86:	4654      	mov	r4, sl
 8013b88:	2205      	movs	r2, #5
 8013b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b8e:	4858      	ldr	r0, [pc, #352]	; (8013cf0 <_vfiprintf_r+0x24c>)
 8013b90:	f7ec fb56 	bl	8000240 <memchr>
 8013b94:	9a04      	ldr	r2, [sp, #16]
 8013b96:	b9d8      	cbnz	r0, 8013bd0 <_vfiprintf_r+0x12c>
 8013b98:	06d1      	lsls	r1, r2, #27
 8013b9a:	bf44      	itt	mi
 8013b9c:	2320      	movmi	r3, #32
 8013b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ba2:	0713      	lsls	r3, r2, #28
 8013ba4:	bf44      	itt	mi
 8013ba6:	232b      	movmi	r3, #43	; 0x2b
 8013ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bac:	f89a 3000 	ldrb.w	r3, [sl]
 8013bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb2:	d015      	beq.n	8013be0 <_vfiprintf_r+0x13c>
 8013bb4:	9a07      	ldr	r2, [sp, #28]
 8013bb6:	4654      	mov	r4, sl
 8013bb8:	2000      	movs	r0, #0
 8013bba:	f04f 0c0a 	mov.w	ip, #10
 8013bbe:	4621      	mov	r1, r4
 8013bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bc4:	3b30      	subs	r3, #48	; 0x30
 8013bc6:	2b09      	cmp	r3, #9
 8013bc8:	d94e      	bls.n	8013c68 <_vfiprintf_r+0x1c4>
 8013bca:	b1b0      	cbz	r0, 8013bfa <_vfiprintf_r+0x156>
 8013bcc:	9207      	str	r2, [sp, #28]
 8013bce:	e014      	b.n	8013bfa <_vfiprintf_r+0x156>
 8013bd0:	eba0 0308 	sub.w	r3, r0, r8
 8013bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	9304      	str	r3, [sp, #16]
 8013bdc:	46a2      	mov	sl, r4
 8013bde:	e7d2      	b.n	8013b86 <_vfiprintf_r+0xe2>
 8013be0:	9b03      	ldr	r3, [sp, #12]
 8013be2:	1d19      	adds	r1, r3, #4
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	9103      	str	r1, [sp, #12]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	bfbb      	ittet	lt
 8013bec:	425b      	neglt	r3, r3
 8013bee:	f042 0202 	orrlt.w	r2, r2, #2
 8013bf2:	9307      	strge	r3, [sp, #28]
 8013bf4:	9307      	strlt	r3, [sp, #28]
 8013bf6:	bfb8      	it	lt
 8013bf8:	9204      	strlt	r2, [sp, #16]
 8013bfa:	7823      	ldrb	r3, [r4, #0]
 8013bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8013bfe:	d10c      	bne.n	8013c1a <_vfiprintf_r+0x176>
 8013c00:	7863      	ldrb	r3, [r4, #1]
 8013c02:	2b2a      	cmp	r3, #42	; 0x2a
 8013c04:	d135      	bne.n	8013c72 <_vfiprintf_r+0x1ce>
 8013c06:	9b03      	ldr	r3, [sp, #12]
 8013c08:	1d1a      	adds	r2, r3, #4
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	9203      	str	r2, [sp, #12]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	bfb8      	it	lt
 8013c12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013c16:	3402      	adds	r4, #2
 8013c18:	9305      	str	r3, [sp, #20]
 8013c1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d00 <_vfiprintf_r+0x25c>
 8013c1e:	7821      	ldrb	r1, [r4, #0]
 8013c20:	2203      	movs	r2, #3
 8013c22:	4650      	mov	r0, sl
 8013c24:	f7ec fb0c 	bl	8000240 <memchr>
 8013c28:	b140      	cbz	r0, 8013c3c <_vfiprintf_r+0x198>
 8013c2a:	2340      	movs	r3, #64	; 0x40
 8013c2c:	eba0 000a 	sub.w	r0, r0, sl
 8013c30:	fa03 f000 	lsl.w	r0, r3, r0
 8013c34:	9b04      	ldr	r3, [sp, #16]
 8013c36:	4303      	orrs	r3, r0
 8013c38:	3401      	adds	r4, #1
 8013c3a:	9304      	str	r3, [sp, #16]
 8013c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c40:	482c      	ldr	r0, [pc, #176]	; (8013cf4 <_vfiprintf_r+0x250>)
 8013c42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c46:	2206      	movs	r2, #6
 8013c48:	f7ec fafa 	bl	8000240 <memchr>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	d03f      	beq.n	8013cd0 <_vfiprintf_r+0x22c>
 8013c50:	4b29      	ldr	r3, [pc, #164]	; (8013cf8 <_vfiprintf_r+0x254>)
 8013c52:	bb1b      	cbnz	r3, 8013c9c <_vfiprintf_r+0x1f8>
 8013c54:	9b03      	ldr	r3, [sp, #12]
 8013c56:	3307      	adds	r3, #7
 8013c58:	f023 0307 	bic.w	r3, r3, #7
 8013c5c:	3308      	adds	r3, #8
 8013c5e:	9303      	str	r3, [sp, #12]
 8013c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c62:	443b      	add	r3, r7
 8013c64:	9309      	str	r3, [sp, #36]	; 0x24
 8013c66:	e767      	b.n	8013b38 <_vfiprintf_r+0x94>
 8013c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c6c:	460c      	mov	r4, r1
 8013c6e:	2001      	movs	r0, #1
 8013c70:	e7a5      	b.n	8013bbe <_vfiprintf_r+0x11a>
 8013c72:	2300      	movs	r3, #0
 8013c74:	3401      	adds	r4, #1
 8013c76:	9305      	str	r3, [sp, #20]
 8013c78:	4619      	mov	r1, r3
 8013c7a:	f04f 0c0a 	mov.w	ip, #10
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c84:	3a30      	subs	r2, #48	; 0x30
 8013c86:	2a09      	cmp	r2, #9
 8013c88:	d903      	bls.n	8013c92 <_vfiprintf_r+0x1ee>
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d0c5      	beq.n	8013c1a <_vfiprintf_r+0x176>
 8013c8e:	9105      	str	r1, [sp, #20]
 8013c90:	e7c3      	b.n	8013c1a <_vfiprintf_r+0x176>
 8013c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c96:	4604      	mov	r4, r0
 8013c98:	2301      	movs	r3, #1
 8013c9a:	e7f0      	b.n	8013c7e <_vfiprintf_r+0x1da>
 8013c9c:	ab03      	add	r3, sp, #12
 8013c9e:	9300      	str	r3, [sp, #0]
 8013ca0:	462a      	mov	r2, r5
 8013ca2:	4b16      	ldr	r3, [pc, #88]	; (8013cfc <_vfiprintf_r+0x258>)
 8013ca4:	a904      	add	r1, sp, #16
 8013ca6:	4630      	mov	r0, r6
 8013ca8:	f3af 8000 	nop.w
 8013cac:	4607      	mov	r7, r0
 8013cae:	1c78      	adds	r0, r7, #1
 8013cb0:	d1d6      	bne.n	8013c60 <_vfiprintf_r+0x1bc>
 8013cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013cb4:	07d9      	lsls	r1, r3, #31
 8013cb6:	d405      	bmi.n	8013cc4 <_vfiprintf_r+0x220>
 8013cb8:	89ab      	ldrh	r3, [r5, #12]
 8013cba:	059a      	lsls	r2, r3, #22
 8013cbc:	d402      	bmi.n	8013cc4 <_vfiprintf_r+0x220>
 8013cbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cc0:	f7ff fddd 	bl	801387e <__retarget_lock_release_recursive>
 8013cc4:	89ab      	ldrh	r3, [r5, #12]
 8013cc6:	065b      	lsls	r3, r3, #25
 8013cc8:	f53f af12 	bmi.w	8013af0 <_vfiprintf_r+0x4c>
 8013ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cce:	e711      	b.n	8013af4 <_vfiprintf_r+0x50>
 8013cd0:	ab03      	add	r3, sp, #12
 8013cd2:	9300      	str	r3, [sp, #0]
 8013cd4:	462a      	mov	r2, r5
 8013cd6:	4b09      	ldr	r3, [pc, #36]	; (8013cfc <_vfiprintf_r+0x258>)
 8013cd8:	a904      	add	r1, sp, #16
 8013cda:	4630      	mov	r0, r6
 8013cdc:	f000 f880 	bl	8013de0 <_printf_i>
 8013ce0:	e7e4      	b.n	8013cac <_vfiprintf_r+0x208>
 8013ce2:	bf00      	nop
 8013ce4:	080173b4 	.word	0x080173b4
 8013ce8:	080173d4 	.word	0x080173d4
 8013cec:	08017394 	.word	0x08017394
 8013cf0:	080173f4 	.word	0x080173f4
 8013cf4:	080173fe 	.word	0x080173fe
 8013cf8:	00000000 	.word	0x00000000
 8013cfc:	08013a7f 	.word	0x08013a7f
 8013d00:	080173fa 	.word	0x080173fa

08013d04 <_printf_common>:
 8013d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d08:	4616      	mov	r6, r2
 8013d0a:	4699      	mov	r9, r3
 8013d0c:	688a      	ldr	r2, [r1, #8]
 8013d0e:	690b      	ldr	r3, [r1, #16]
 8013d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d14:	4293      	cmp	r3, r2
 8013d16:	bfb8      	it	lt
 8013d18:	4613      	movlt	r3, r2
 8013d1a:	6033      	str	r3, [r6, #0]
 8013d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d20:	4607      	mov	r7, r0
 8013d22:	460c      	mov	r4, r1
 8013d24:	b10a      	cbz	r2, 8013d2a <_printf_common+0x26>
 8013d26:	3301      	adds	r3, #1
 8013d28:	6033      	str	r3, [r6, #0]
 8013d2a:	6823      	ldr	r3, [r4, #0]
 8013d2c:	0699      	lsls	r1, r3, #26
 8013d2e:	bf42      	ittt	mi
 8013d30:	6833      	ldrmi	r3, [r6, #0]
 8013d32:	3302      	addmi	r3, #2
 8013d34:	6033      	strmi	r3, [r6, #0]
 8013d36:	6825      	ldr	r5, [r4, #0]
 8013d38:	f015 0506 	ands.w	r5, r5, #6
 8013d3c:	d106      	bne.n	8013d4c <_printf_common+0x48>
 8013d3e:	f104 0a19 	add.w	sl, r4, #25
 8013d42:	68e3      	ldr	r3, [r4, #12]
 8013d44:	6832      	ldr	r2, [r6, #0]
 8013d46:	1a9b      	subs	r3, r3, r2
 8013d48:	42ab      	cmp	r3, r5
 8013d4a:	dc26      	bgt.n	8013d9a <_printf_common+0x96>
 8013d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d50:	1e13      	subs	r3, r2, #0
 8013d52:	6822      	ldr	r2, [r4, #0]
 8013d54:	bf18      	it	ne
 8013d56:	2301      	movne	r3, #1
 8013d58:	0692      	lsls	r2, r2, #26
 8013d5a:	d42b      	bmi.n	8013db4 <_printf_common+0xb0>
 8013d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d60:	4649      	mov	r1, r9
 8013d62:	4638      	mov	r0, r7
 8013d64:	47c0      	blx	r8
 8013d66:	3001      	adds	r0, #1
 8013d68:	d01e      	beq.n	8013da8 <_printf_common+0xa4>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	68e5      	ldr	r5, [r4, #12]
 8013d6e:	6832      	ldr	r2, [r6, #0]
 8013d70:	f003 0306 	and.w	r3, r3, #6
 8013d74:	2b04      	cmp	r3, #4
 8013d76:	bf08      	it	eq
 8013d78:	1aad      	subeq	r5, r5, r2
 8013d7a:	68a3      	ldr	r3, [r4, #8]
 8013d7c:	6922      	ldr	r2, [r4, #16]
 8013d7e:	bf0c      	ite	eq
 8013d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d84:	2500      	movne	r5, #0
 8013d86:	4293      	cmp	r3, r2
 8013d88:	bfc4      	itt	gt
 8013d8a:	1a9b      	subgt	r3, r3, r2
 8013d8c:	18ed      	addgt	r5, r5, r3
 8013d8e:	2600      	movs	r6, #0
 8013d90:	341a      	adds	r4, #26
 8013d92:	42b5      	cmp	r5, r6
 8013d94:	d11a      	bne.n	8013dcc <_printf_common+0xc8>
 8013d96:	2000      	movs	r0, #0
 8013d98:	e008      	b.n	8013dac <_printf_common+0xa8>
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	4652      	mov	r2, sl
 8013d9e:	4649      	mov	r1, r9
 8013da0:	4638      	mov	r0, r7
 8013da2:	47c0      	blx	r8
 8013da4:	3001      	adds	r0, #1
 8013da6:	d103      	bne.n	8013db0 <_printf_common+0xac>
 8013da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db0:	3501      	adds	r5, #1
 8013db2:	e7c6      	b.n	8013d42 <_printf_common+0x3e>
 8013db4:	18e1      	adds	r1, r4, r3
 8013db6:	1c5a      	adds	r2, r3, #1
 8013db8:	2030      	movs	r0, #48	; 0x30
 8013dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013dbe:	4422      	add	r2, r4
 8013dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013dc8:	3302      	adds	r3, #2
 8013dca:	e7c7      	b.n	8013d5c <_printf_common+0x58>
 8013dcc:	2301      	movs	r3, #1
 8013dce:	4622      	mov	r2, r4
 8013dd0:	4649      	mov	r1, r9
 8013dd2:	4638      	mov	r0, r7
 8013dd4:	47c0      	blx	r8
 8013dd6:	3001      	adds	r0, #1
 8013dd8:	d0e6      	beq.n	8013da8 <_printf_common+0xa4>
 8013dda:	3601      	adds	r6, #1
 8013ddc:	e7d9      	b.n	8013d92 <_printf_common+0x8e>
	...

08013de0 <_printf_i>:
 8013de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013de4:	7e0f      	ldrb	r7, [r1, #24]
 8013de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013de8:	2f78      	cmp	r7, #120	; 0x78
 8013dea:	4691      	mov	r9, r2
 8013dec:	4680      	mov	r8, r0
 8013dee:	460c      	mov	r4, r1
 8013df0:	469a      	mov	sl, r3
 8013df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013df6:	d807      	bhi.n	8013e08 <_printf_i+0x28>
 8013df8:	2f62      	cmp	r7, #98	; 0x62
 8013dfa:	d80a      	bhi.n	8013e12 <_printf_i+0x32>
 8013dfc:	2f00      	cmp	r7, #0
 8013dfe:	f000 80d8 	beq.w	8013fb2 <_printf_i+0x1d2>
 8013e02:	2f58      	cmp	r7, #88	; 0x58
 8013e04:	f000 80a3 	beq.w	8013f4e <_printf_i+0x16e>
 8013e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e10:	e03a      	b.n	8013e88 <_printf_i+0xa8>
 8013e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e16:	2b15      	cmp	r3, #21
 8013e18:	d8f6      	bhi.n	8013e08 <_printf_i+0x28>
 8013e1a:	a101      	add	r1, pc, #4	; (adr r1, 8013e20 <_printf_i+0x40>)
 8013e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e20:	08013e79 	.word	0x08013e79
 8013e24:	08013e8d 	.word	0x08013e8d
 8013e28:	08013e09 	.word	0x08013e09
 8013e2c:	08013e09 	.word	0x08013e09
 8013e30:	08013e09 	.word	0x08013e09
 8013e34:	08013e09 	.word	0x08013e09
 8013e38:	08013e8d 	.word	0x08013e8d
 8013e3c:	08013e09 	.word	0x08013e09
 8013e40:	08013e09 	.word	0x08013e09
 8013e44:	08013e09 	.word	0x08013e09
 8013e48:	08013e09 	.word	0x08013e09
 8013e4c:	08013f99 	.word	0x08013f99
 8013e50:	08013ebd 	.word	0x08013ebd
 8013e54:	08013f7b 	.word	0x08013f7b
 8013e58:	08013e09 	.word	0x08013e09
 8013e5c:	08013e09 	.word	0x08013e09
 8013e60:	08013fbb 	.word	0x08013fbb
 8013e64:	08013e09 	.word	0x08013e09
 8013e68:	08013ebd 	.word	0x08013ebd
 8013e6c:	08013e09 	.word	0x08013e09
 8013e70:	08013e09 	.word	0x08013e09
 8013e74:	08013f83 	.word	0x08013f83
 8013e78:	682b      	ldr	r3, [r5, #0]
 8013e7a:	1d1a      	adds	r2, r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	602a      	str	r2, [r5, #0]
 8013e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e88:	2301      	movs	r3, #1
 8013e8a:	e0a3      	b.n	8013fd4 <_printf_i+0x1f4>
 8013e8c:	6820      	ldr	r0, [r4, #0]
 8013e8e:	6829      	ldr	r1, [r5, #0]
 8013e90:	0606      	lsls	r6, r0, #24
 8013e92:	f101 0304 	add.w	r3, r1, #4
 8013e96:	d50a      	bpl.n	8013eae <_printf_i+0xce>
 8013e98:	680e      	ldr	r6, [r1, #0]
 8013e9a:	602b      	str	r3, [r5, #0]
 8013e9c:	2e00      	cmp	r6, #0
 8013e9e:	da03      	bge.n	8013ea8 <_printf_i+0xc8>
 8013ea0:	232d      	movs	r3, #45	; 0x2d
 8013ea2:	4276      	negs	r6, r6
 8013ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ea8:	485e      	ldr	r0, [pc, #376]	; (8014024 <_printf_i+0x244>)
 8013eaa:	230a      	movs	r3, #10
 8013eac:	e019      	b.n	8013ee2 <_printf_i+0x102>
 8013eae:	680e      	ldr	r6, [r1, #0]
 8013eb0:	602b      	str	r3, [r5, #0]
 8013eb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013eb6:	bf18      	it	ne
 8013eb8:	b236      	sxthne	r6, r6
 8013eba:	e7ef      	b.n	8013e9c <_printf_i+0xbc>
 8013ebc:	682b      	ldr	r3, [r5, #0]
 8013ebe:	6820      	ldr	r0, [r4, #0]
 8013ec0:	1d19      	adds	r1, r3, #4
 8013ec2:	6029      	str	r1, [r5, #0]
 8013ec4:	0601      	lsls	r1, r0, #24
 8013ec6:	d501      	bpl.n	8013ecc <_printf_i+0xec>
 8013ec8:	681e      	ldr	r6, [r3, #0]
 8013eca:	e002      	b.n	8013ed2 <_printf_i+0xf2>
 8013ecc:	0646      	lsls	r6, r0, #25
 8013ece:	d5fb      	bpl.n	8013ec8 <_printf_i+0xe8>
 8013ed0:	881e      	ldrh	r6, [r3, #0]
 8013ed2:	4854      	ldr	r0, [pc, #336]	; (8014024 <_printf_i+0x244>)
 8013ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8013ed6:	bf0c      	ite	eq
 8013ed8:	2308      	moveq	r3, #8
 8013eda:	230a      	movne	r3, #10
 8013edc:	2100      	movs	r1, #0
 8013ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ee2:	6865      	ldr	r5, [r4, #4]
 8013ee4:	60a5      	str	r5, [r4, #8]
 8013ee6:	2d00      	cmp	r5, #0
 8013ee8:	bfa2      	ittt	ge
 8013eea:	6821      	ldrge	r1, [r4, #0]
 8013eec:	f021 0104 	bicge.w	r1, r1, #4
 8013ef0:	6021      	strge	r1, [r4, #0]
 8013ef2:	b90e      	cbnz	r6, 8013ef8 <_printf_i+0x118>
 8013ef4:	2d00      	cmp	r5, #0
 8013ef6:	d04d      	beq.n	8013f94 <_printf_i+0x1b4>
 8013ef8:	4615      	mov	r5, r2
 8013efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8013efe:	fb03 6711 	mls	r7, r3, r1, r6
 8013f02:	5dc7      	ldrb	r7, [r0, r7]
 8013f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013f08:	4637      	mov	r7, r6
 8013f0a:	42bb      	cmp	r3, r7
 8013f0c:	460e      	mov	r6, r1
 8013f0e:	d9f4      	bls.n	8013efa <_printf_i+0x11a>
 8013f10:	2b08      	cmp	r3, #8
 8013f12:	d10b      	bne.n	8013f2c <_printf_i+0x14c>
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	07de      	lsls	r6, r3, #31
 8013f18:	d508      	bpl.n	8013f2c <_printf_i+0x14c>
 8013f1a:	6923      	ldr	r3, [r4, #16]
 8013f1c:	6861      	ldr	r1, [r4, #4]
 8013f1e:	4299      	cmp	r1, r3
 8013f20:	bfde      	ittt	le
 8013f22:	2330      	movle	r3, #48	; 0x30
 8013f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013f2c:	1b52      	subs	r2, r2, r5
 8013f2e:	6122      	str	r2, [r4, #16]
 8013f30:	f8cd a000 	str.w	sl, [sp]
 8013f34:	464b      	mov	r3, r9
 8013f36:	aa03      	add	r2, sp, #12
 8013f38:	4621      	mov	r1, r4
 8013f3a:	4640      	mov	r0, r8
 8013f3c:	f7ff fee2 	bl	8013d04 <_printf_common>
 8013f40:	3001      	adds	r0, #1
 8013f42:	d14c      	bne.n	8013fde <_printf_i+0x1fe>
 8013f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f48:	b004      	add	sp, #16
 8013f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f4e:	4835      	ldr	r0, [pc, #212]	; (8014024 <_printf_i+0x244>)
 8013f50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013f54:	6829      	ldr	r1, [r5, #0]
 8013f56:	6823      	ldr	r3, [r4, #0]
 8013f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8013f5c:	6029      	str	r1, [r5, #0]
 8013f5e:	061d      	lsls	r5, r3, #24
 8013f60:	d514      	bpl.n	8013f8c <_printf_i+0x1ac>
 8013f62:	07df      	lsls	r7, r3, #31
 8013f64:	bf44      	itt	mi
 8013f66:	f043 0320 	orrmi.w	r3, r3, #32
 8013f6a:	6023      	strmi	r3, [r4, #0]
 8013f6c:	b91e      	cbnz	r6, 8013f76 <_printf_i+0x196>
 8013f6e:	6823      	ldr	r3, [r4, #0]
 8013f70:	f023 0320 	bic.w	r3, r3, #32
 8013f74:	6023      	str	r3, [r4, #0]
 8013f76:	2310      	movs	r3, #16
 8013f78:	e7b0      	b.n	8013edc <_printf_i+0xfc>
 8013f7a:	6823      	ldr	r3, [r4, #0]
 8013f7c:	f043 0320 	orr.w	r3, r3, #32
 8013f80:	6023      	str	r3, [r4, #0]
 8013f82:	2378      	movs	r3, #120	; 0x78
 8013f84:	4828      	ldr	r0, [pc, #160]	; (8014028 <_printf_i+0x248>)
 8013f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f8a:	e7e3      	b.n	8013f54 <_printf_i+0x174>
 8013f8c:	0659      	lsls	r1, r3, #25
 8013f8e:	bf48      	it	mi
 8013f90:	b2b6      	uxthmi	r6, r6
 8013f92:	e7e6      	b.n	8013f62 <_printf_i+0x182>
 8013f94:	4615      	mov	r5, r2
 8013f96:	e7bb      	b.n	8013f10 <_printf_i+0x130>
 8013f98:	682b      	ldr	r3, [r5, #0]
 8013f9a:	6826      	ldr	r6, [r4, #0]
 8013f9c:	6961      	ldr	r1, [r4, #20]
 8013f9e:	1d18      	adds	r0, r3, #4
 8013fa0:	6028      	str	r0, [r5, #0]
 8013fa2:	0635      	lsls	r5, r6, #24
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	d501      	bpl.n	8013fac <_printf_i+0x1cc>
 8013fa8:	6019      	str	r1, [r3, #0]
 8013faa:	e002      	b.n	8013fb2 <_printf_i+0x1d2>
 8013fac:	0670      	lsls	r0, r6, #25
 8013fae:	d5fb      	bpl.n	8013fa8 <_printf_i+0x1c8>
 8013fb0:	8019      	strh	r1, [r3, #0]
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	6123      	str	r3, [r4, #16]
 8013fb6:	4615      	mov	r5, r2
 8013fb8:	e7ba      	b.n	8013f30 <_printf_i+0x150>
 8013fba:	682b      	ldr	r3, [r5, #0]
 8013fbc:	1d1a      	adds	r2, r3, #4
 8013fbe:	602a      	str	r2, [r5, #0]
 8013fc0:	681d      	ldr	r5, [r3, #0]
 8013fc2:	6862      	ldr	r2, [r4, #4]
 8013fc4:	2100      	movs	r1, #0
 8013fc6:	4628      	mov	r0, r5
 8013fc8:	f7ec f93a 	bl	8000240 <memchr>
 8013fcc:	b108      	cbz	r0, 8013fd2 <_printf_i+0x1f2>
 8013fce:	1b40      	subs	r0, r0, r5
 8013fd0:	6060      	str	r0, [r4, #4]
 8013fd2:	6863      	ldr	r3, [r4, #4]
 8013fd4:	6123      	str	r3, [r4, #16]
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fdc:	e7a8      	b.n	8013f30 <_printf_i+0x150>
 8013fde:	6923      	ldr	r3, [r4, #16]
 8013fe0:	462a      	mov	r2, r5
 8013fe2:	4649      	mov	r1, r9
 8013fe4:	4640      	mov	r0, r8
 8013fe6:	47d0      	blx	sl
 8013fe8:	3001      	adds	r0, #1
 8013fea:	d0ab      	beq.n	8013f44 <_printf_i+0x164>
 8013fec:	6823      	ldr	r3, [r4, #0]
 8013fee:	079b      	lsls	r3, r3, #30
 8013ff0:	d413      	bmi.n	801401a <_printf_i+0x23a>
 8013ff2:	68e0      	ldr	r0, [r4, #12]
 8013ff4:	9b03      	ldr	r3, [sp, #12]
 8013ff6:	4298      	cmp	r0, r3
 8013ff8:	bfb8      	it	lt
 8013ffa:	4618      	movlt	r0, r3
 8013ffc:	e7a4      	b.n	8013f48 <_printf_i+0x168>
 8013ffe:	2301      	movs	r3, #1
 8014000:	4632      	mov	r2, r6
 8014002:	4649      	mov	r1, r9
 8014004:	4640      	mov	r0, r8
 8014006:	47d0      	blx	sl
 8014008:	3001      	adds	r0, #1
 801400a:	d09b      	beq.n	8013f44 <_printf_i+0x164>
 801400c:	3501      	adds	r5, #1
 801400e:	68e3      	ldr	r3, [r4, #12]
 8014010:	9903      	ldr	r1, [sp, #12]
 8014012:	1a5b      	subs	r3, r3, r1
 8014014:	42ab      	cmp	r3, r5
 8014016:	dcf2      	bgt.n	8013ffe <_printf_i+0x21e>
 8014018:	e7eb      	b.n	8013ff2 <_printf_i+0x212>
 801401a:	2500      	movs	r5, #0
 801401c:	f104 0619 	add.w	r6, r4, #25
 8014020:	e7f5      	b.n	801400e <_printf_i+0x22e>
 8014022:	bf00      	nop
 8014024:	08017405 	.word	0x08017405
 8014028:	08017416 	.word	0x08017416

0801402c <_sbrk_r>:
 801402c:	b538      	push	{r3, r4, r5, lr}
 801402e:	4d06      	ldr	r5, [pc, #24]	; (8014048 <_sbrk_r+0x1c>)
 8014030:	2300      	movs	r3, #0
 8014032:	4604      	mov	r4, r0
 8014034:	4608      	mov	r0, r1
 8014036:	602b      	str	r3, [r5, #0]
 8014038:	f7ec ffa0 	bl	8000f7c <_sbrk>
 801403c:	1c43      	adds	r3, r0, #1
 801403e:	d102      	bne.n	8014046 <_sbrk_r+0x1a>
 8014040:	682b      	ldr	r3, [r5, #0]
 8014042:	b103      	cbz	r3, 8014046 <_sbrk_r+0x1a>
 8014044:	6023      	str	r3, [r4, #0]
 8014046:	bd38      	pop	{r3, r4, r5, pc}
 8014048:	200106cc 	.word	0x200106cc

0801404c <__sread>:
 801404c:	b510      	push	{r4, lr}
 801404e:	460c      	mov	r4, r1
 8014050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014054:	f000 fa6e 	bl	8014534 <_read_r>
 8014058:	2800      	cmp	r0, #0
 801405a:	bfab      	itete	ge
 801405c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801405e:	89a3      	ldrhlt	r3, [r4, #12]
 8014060:	181b      	addge	r3, r3, r0
 8014062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014066:	bfac      	ite	ge
 8014068:	6563      	strge	r3, [r4, #84]	; 0x54
 801406a:	81a3      	strhlt	r3, [r4, #12]
 801406c:	bd10      	pop	{r4, pc}

0801406e <__swrite>:
 801406e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014072:	461f      	mov	r7, r3
 8014074:	898b      	ldrh	r3, [r1, #12]
 8014076:	05db      	lsls	r3, r3, #23
 8014078:	4605      	mov	r5, r0
 801407a:	460c      	mov	r4, r1
 801407c:	4616      	mov	r6, r2
 801407e:	d505      	bpl.n	801408c <__swrite+0x1e>
 8014080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014084:	2302      	movs	r3, #2
 8014086:	2200      	movs	r2, #0
 8014088:	f000 f9d0 	bl	801442c <_lseek_r>
 801408c:	89a3      	ldrh	r3, [r4, #12]
 801408e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014096:	81a3      	strh	r3, [r4, #12]
 8014098:	4632      	mov	r2, r6
 801409a:	463b      	mov	r3, r7
 801409c:	4628      	mov	r0, r5
 801409e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140a2:	f000 b869 	b.w	8014178 <_write_r>

080140a6 <__sseek>:
 80140a6:	b510      	push	{r4, lr}
 80140a8:	460c      	mov	r4, r1
 80140aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ae:	f000 f9bd 	bl	801442c <_lseek_r>
 80140b2:	1c43      	adds	r3, r0, #1
 80140b4:	89a3      	ldrh	r3, [r4, #12]
 80140b6:	bf15      	itete	ne
 80140b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80140ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80140be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80140c2:	81a3      	strheq	r3, [r4, #12]
 80140c4:	bf18      	it	ne
 80140c6:	81a3      	strhne	r3, [r4, #12]
 80140c8:	bd10      	pop	{r4, pc}

080140ca <__sclose>:
 80140ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ce:	f000 b8db 	b.w	8014288 <_close_r>
	...

080140d4 <__swbuf_r>:
 80140d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140d6:	460e      	mov	r6, r1
 80140d8:	4614      	mov	r4, r2
 80140da:	4605      	mov	r5, r0
 80140dc:	b118      	cbz	r0, 80140e6 <__swbuf_r+0x12>
 80140de:	6983      	ldr	r3, [r0, #24]
 80140e0:	b90b      	cbnz	r3, 80140e6 <__swbuf_r+0x12>
 80140e2:	f7ff fb1b 	bl	801371c <__sinit>
 80140e6:	4b21      	ldr	r3, [pc, #132]	; (801416c <__swbuf_r+0x98>)
 80140e8:	429c      	cmp	r4, r3
 80140ea:	d12b      	bne.n	8014144 <__swbuf_r+0x70>
 80140ec:	686c      	ldr	r4, [r5, #4]
 80140ee:	69a3      	ldr	r3, [r4, #24]
 80140f0:	60a3      	str	r3, [r4, #8]
 80140f2:	89a3      	ldrh	r3, [r4, #12]
 80140f4:	071a      	lsls	r2, r3, #28
 80140f6:	d52f      	bpl.n	8014158 <__swbuf_r+0x84>
 80140f8:	6923      	ldr	r3, [r4, #16]
 80140fa:	b36b      	cbz	r3, 8014158 <__swbuf_r+0x84>
 80140fc:	6923      	ldr	r3, [r4, #16]
 80140fe:	6820      	ldr	r0, [r4, #0]
 8014100:	1ac0      	subs	r0, r0, r3
 8014102:	6963      	ldr	r3, [r4, #20]
 8014104:	b2f6      	uxtb	r6, r6
 8014106:	4283      	cmp	r3, r0
 8014108:	4637      	mov	r7, r6
 801410a:	dc04      	bgt.n	8014116 <__swbuf_r+0x42>
 801410c:	4621      	mov	r1, r4
 801410e:	4628      	mov	r0, r5
 8014110:	f000 f950 	bl	80143b4 <_fflush_r>
 8014114:	bb30      	cbnz	r0, 8014164 <__swbuf_r+0x90>
 8014116:	68a3      	ldr	r3, [r4, #8]
 8014118:	3b01      	subs	r3, #1
 801411a:	60a3      	str	r3, [r4, #8]
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	1c5a      	adds	r2, r3, #1
 8014120:	6022      	str	r2, [r4, #0]
 8014122:	701e      	strb	r6, [r3, #0]
 8014124:	6963      	ldr	r3, [r4, #20]
 8014126:	3001      	adds	r0, #1
 8014128:	4283      	cmp	r3, r0
 801412a:	d004      	beq.n	8014136 <__swbuf_r+0x62>
 801412c:	89a3      	ldrh	r3, [r4, #12]
 801412e:	07db      	lsls	r3, r3, #31
 8014130:	d506      	bpl.n	8014140 <__swbuf_r+0x6c>
 8014132:	2e0a      	cmp	r6, #10
 8014134:	d104      	bne.n	8014140 <__swbuf_r+0x6c>
 8014136:	4621      	mov	r1, r4
 8014138:	4628      	mov	r0, r5
 801413a:	f000 f93b 	bl	80143b4 <_fflush_r>
 801413e:	b988      	cbnz	r0, 8014164 <__swbuf_r+0x90>
 8014140:	4638      	mov	r0, r7
 8014142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014144:	4b0a      	ldr	r3, [pc, #40]	; (8014170 <__swbuf_r+0x9c>)
 8014146:	429c      	cmp	r4, r3
 8014148:	d101      	bne.n	801414e <__swbuf_r+0x7a>
 801414a:	68ac      	ldr	r4, [r5, #8]
 801414c:	e7cf      	b.n	80140ee <__swbuf_r+0x1a>
 801414e:	4b09      	ldr	r3, [pc, #36]	; (8014174 <__swbuf_r+0xa0>)
 8014150:	429c      	cmp	r4, r3
 8014152:	bf08      	it	eq
 8014154:	68ec      	ldreq	r4, [r5, #12]
 8014156:	e7ca      	b.n	80140ee <__swbuf_r+0x1a>
 8014158:	4621      	mov	r1, r4
 801415a:	4628      	mov	r0, r5
 801415c:	f000 f81e 	bl	801419c <__swsetup_r>
 8014160:	2800      	cmp	r0, #0
 8014162:	d0cb      	beq.n	80140fc <__swbuf_r+0x28>
 8014164:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014168:	e7ea      	b.n	8014140 <__swbuf_r+0x6c>
 801416a:	bf00      	nop
 801416c:	080173b4 	.word	0x080173b4
 8014170:	080173d4 	.word	0x080173d4
 8014174:	08017394 	.word	0x08017394

08014178 <_write_r>:
 8014178:	b538      	push	{r3, r4, r5, lr}
 801417a:	4d07      	ldr	r5, [pc, #28]	; (8014198 <_write_r+0x20>)
 801417c:	4604      	mov	r4, r0
 801417e:	4608      	mov	r0, r1
 8014180:	4611      	mov	r1, r2
 8014182:	2200      	movs	r2, #0
 8014184:	602a      	str	r2, [r5, #0]
 8014186:	461a      	mov	r2, r3
 8014188:	f7ec fea7 	bl	8000eda <_write>
 801418c:	1c43      	adds	r3, r0, #1
 801418e:	d102      	bne.n	8014196 <_write_r+0x1e>
 8014190:	682b      	ldr	r3, [r5, #0]
 8014192:	b103      	cbz	r3, 8014196 <_write_r+0x1e>
 8014194:	6023      	str	r3, [r4, #0]
 8014196:	bd38      	pop	{r3, r4, r5, pc}
 8014198:	200106cc 	.word	0x200106cc

0801419c <__swsetup_r>:
 801419c:	4b32      	ldr	r3, [pc, #200]	; (8014268 <__swsetup_r+0xcc>)
 801419e:	b570      	push	{r4, r5, r6, lr}
 80141a0:	681d      	ldr	r5, [r3, #0]
 80141a2:	4606      	mov	r6, r0
 80141a4:	460c      	mov	r4, r1
 80141a6:	b125      	cbz	r5, 80141b2 <__swsetup_r+0x16>
 80141a8:	69ab      	ldr	r3, [r5, #24]
 80141aa:	b913      	cbnz	r3, 80141b2 <__swsetup_r+0x16>
 80141ac:	4628      	mov	r0, r5
 80141ae:	f7ff fab5 	bl	801371c <__sinit>
 80141b2:	4b2e      	ldr	r3, [pc, #184]	; (801426c <__swsetup_r+0xd0>)
 80141b4:	429c      	cmp	r4, r3
 80141b6:	d10f      	bne.n	80141d8 <__swsetup_r+0x3c>
 80141b8:	686c      	ldr	r4, [r5, #4]
 80141ba:	89a3      	ldrh	r3, [r4, #12]
 80141bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80141c0:	0719      	lsls	r1, r3, #28
 80141c2:	d42c      	bmi.n	801421e <__swsetup_r+0x82>
 80141c4:	06dd      	lsls	r5, r3, #27
 80141c6:	d411      	bmi.n	80141ec <__swsetup_r+0x50>
 80141c8:	2309      	movs	r3, #9
 80141ca:	6033      	str	r3, [r6, #0]
 80141cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80141d0:	81a3      	strh	r3, [r4, #12]
 80141d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141d6:	e03e      	b.n	8014256 <__swsetup_r+0xba>
 80141d8:	4b25      	ldr	r3, [pc, #148]	; (8014270 <__swsetup_r+0xd4>)
 80141da:	429c      	cmp	r4, r3
 80141dc:	d101      	bne.n	80141e2 <__swsetup_r+0x46>
 80141de:	68ac      	ldr	r4, [r5, #8]
 80141e0:	e7eb      	b.n	80141ba <__swsetup_r+0x1e>
 80141e2:	4b24      	ldr	r3, [pc, #144]	; (8014274 <__swsetup_r+0xd8>)
 80141e4:	429c      	cmp	r4, r3
 80141e6:	bf08      	it	eq
 80141e8:	68ec      	ldreq	r4, [r5, #12]
 80141ea:	e7e6      	b.n	80141ba <__swsetup_r+0x1e>
 80141ec:	0758      	lsls	r0, r3, #29
 80141ee:	d512      	bpl.n	8014216 <__swsetup_r+0x7a>
 80141f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141f2:	b141      	cbz	r1, 8014206 <__swsetup_r+0x6a>
 80141f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141f8:	4299      	cmp	r1, r3
 80141fa:	d002      	beq.n	8014202 <__swsetup_r+0x66>
 80141fc:	4630      	mov	r0, r6
 80141fe:	f7ff fb47 	bl	8013890 <_free_r>
 8014202:	2300      	movs	r3, #0
 8014204:	6363      	str	r3, [r4, #52]	; 0x34
 8014206:	89a3      	ldrh	r3, [r4, #12]
 8014208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801420c:	81a3      	strh	r3, [r4, #12]
 801420e:	2300      	movs	r3, #0
 8014210:	6063      	str	r3, [r4, #4]
 8014212:	6923      	ldr	r3, [r4, #16]
 8014214:	6023      	str	r3, [r4, #0]
 8014216:	89a3      	ldrh	r3, [r4, #12]
 8014218:	f043 0308 	orr.w	r3, r3, #8
 801421c:	81a3      	strh	r3, [r4, #12]
 801421e:	6923      	ldr	r3, [r4, #16]
 8014220:	b94b      	cbnz	r3, 8014236 <__swsetup_r+0x9a>
 8014222:	89a3      	ldrh	r3, [r4, #12]
 8014224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801422c:	d003      	beq.n	8014236 <__swsetup_r+0x9a>
 801422e:	4621      	mov	r1, r4
 8014230:	4630      	mov	r0, r6
 8014232:	f000 f933 	bl	801449c <__smakebuf_r>
 8014236:	89a0      	ldrh	r0, [r4, #12]
 8014238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801423c:	f010 0301 	ands.w	r3, r0, #1
 8014240:	d00a      	beq.n	8014258 <__swsetup_r+0xbc>
 8014242:	2300      	movs	r3, #0
 8014244:	60a3      	str	r3, [r4, #8]
 8014246:	6963      	ldr	r3, [r4, #20]
 8014248:	425b      	negs	r3, r3
 801424a:	61a3      	str	r3, [r4, #24]
 801424c:	6923      	ldr	r3, [r4, #16]
 801424e:	b943      	cbnz	r3, 8014262 <__swsetup_r+0xc6>
 8014250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014254:	d1ba      	bne.n	80141cc <__swsetup_r+0x30>
 8014256:	bd70      	pop	{r4, r5, r6, pc}
 8014258:	0781      	lsls	r1, r0, #30
 801425a:	bf58      	it	pl
 801425c:	6963      	ldrpl	r3, [r4, #20]
 801425e:	60a3      	str	r3, [r4, #8]
 8014260:	e7f4      	b.n	801424c <__swsetup_r+0xb0>
 8014262:	2000      	movs	r0, #0
 8014264:	e7f7      	b.n	8014256 <__swsetup_r+0xba>
 8014266:	bf00      	nop
 8014268:	20000030 	.word	0x20000030
 801426c:	080173b4 	.word	0x080173b4
 8014270:	080173d4 	.word	0x080173d4
 8014274:	08017394 	.word	0x08017394

08014278 <abort>:
 8014278:	b508      	push	{r3, lr}
 801427a:	2006      	movs	r0, #6
 801427c:	f000 f994 	bl	80145a8 <raise>
 8014280:	2001      	movs	r0, #1
 8014282:	f7ec fe03 	bl	8000e8c <_exit>
	...

08014288 <_close_r>:
 8014288:	b538      	push	{r3, r4, r5, lr}
 801428a:	4d06      	ldr	r5, [pc, #24]	; (80142a4 <_close_r+0x1c>)
 801428c:	2300      	movs	r3, #0
 801428e:	4604      	mov	r4, r0
 8014290:	4608      	mov	r0, r1
 8014292:	602b      	str	r3, [r5, #0]
 8014294:	f7ec fe3d 	bl	8000f12 <_close>
 8014298:	1c43      	adds	r3, r0, #1
 801429a:	d102      	bne.n	80142a2 <_close_r+0x1a>
 801429c:	682b      	ldr	r3, [r5, #0]
 801429e:	b103      	cbz	r3, 80142a2 <_close_r+0x1a>
 80142a0:	6023      	str	r3, [r4, #0]
 80142a2:	bd38      	pop	{r3, r4, r5, pc}
 80142a4:	200106cc 	.word	0x200106cc

080142a8 <__sflush_r>:
 80142a8:	898a      	ldrh	r2, [r1, #12]
 80142aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ae:	4605      	mov	r5, r0
 80142b0:	0710      	lsls	r0, r2, #28
 80142b2:	460c      	mov	r4, r1
 80142b4:	d458      	bmi.n	8014368 <__sflush_r+0xc0>
 80142b6:	684b      	ldr	r3, [r1, #4]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	dc05      	bgt.n	80142c8 <__sflush_r+0x20>
 80142bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142be:	2b00      	cmp	r3, #0
 80142c0:	dc02      	bgt.n	80142c8 <__sflush_r+0x20>
 80142c2:	2000      	movs	r0, #0
 80142c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ca:	2e00      	cmp	r6, #0
 80142cc:	d0f9      	beq.n	80142c2 <__sflush_r+0x1a>
 80142ce:	2300      	movs	r3, #0
 80142d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142d4:	682f      	ldr	r7, [r5, #0]
 80142d6:	602b      	str	r3, [r5, #0]
 80142d8:	d032      	beq.n	8014340 <__sflush_r+0x98>
 80142da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80142dc:	89a3      	ldrh	r3, [r4, #12]
 80142de:	075a      	lsls	r2, r3, #29
 80142e0:	d505      	bpl.n	80142ee <__sflush_r+0x46>
 80142e2:	6863      	ldr	r3, [r4, #4]
 80142e4:	1ac0      	subs	r0, r0, r3
 80142e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142e8:	b10b      	cbz	r3, 80142ee <__sflush_r+0x46>
 80142ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142ec:	1ac0      	subs	r0, r0, r3
 80142ee:	2300      	movs	r3, #0
 80142f0:	4602      	mov	r2, r0
 80142f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142f4:	6a21      	ldr	r1, [r4, #32]
 80142f6:	4628      	mov	r0, r5
 80142f8:	47b0      	blx	r6
 80142fa:	1c43      	adds	r3, r0, #1
 80142fc:	89a3      	ldrh	r3, [r4, #12]
 80142fe:	d106      	bne.n	801430e <__sflush_r+0x66>
 8014300:	6829      	ldr	r1, [r5, #0]
 8014302:	291d      	cmp	r1, #29
 8014304:	d82c      	bhi.n	8014360 <__sflush_r+0xb8>
 8014306:	4a2a      	ldr	r2, [pc, #168]	; (80143b0 <__sflush_r+0x108>)
 8014308:	40ca      	lsrs	r2, r1
 801430a:	07d6      	lsls	r6, r2, #31
 801430c:	d528      	bpl.n	8014360 <__sflush_r+0xb8>
 801430e:	2200      	movs	r2, #0
 8014310:	6062      	str	r2, [r4, #4]
 8014312:	04d9      	lsls	r1, r3, #19
 8014314:	6922      	ldr	r2, [r4, #16]
 8014316:	6022      	str	r2, [r4, #0]
 8014318:	d504      	bpl.n	8014324 <__sflush_r+0x7c>
 801431a:	1c42      	adds	r2, r0, #1
 801431c:	d101      	bne.n	8014322 <__sflush_r+0x7a>
 801431e:	682b      	ldr	r3, [r5, #0]
 8014320:	b903      	cbnz	r3, 8014324 <__sflush_r+0x7c>
 8014322:	6560      	str	r0, [r4, #84]	; 0x54
 8014324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014326:	602f      	str	r7, [r5, #0]
 8014328:	2900      	cmp	r1, #0
 801432a:	d0ca      	beq.n	80142c2 <__sflush_r+0x1a>
 801432c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014330:	4299      	cmp	r1, r3
 8014332:	d002      	beq.n	801433a <__sflush_r+0x92>
 8014334:	4628      	mov	r0, r5
 8014336:	f7ff faab 	bl	8013890 <_free_r>
 801433a:	2000      	movs	r0, #0
 801433c:	6360      	str	r0, [r4, #52]	; 0x34
 801433e:	e7c1      	b.n	80142c4 <__sflush_r+0x1c>
 8014340:	6a21      	ldr	r1, [r4, #32]
 8014342:	2301      	movs	r3, #1
 8014344:	4628      	mov	r0, r5
 8014346:	47b0      	blx	r6
 8014348:	1c41      	adds	r1, r0, #1
 801434a:	d1c7      	bne.n	80142dc <__sflush_r+0x34>
 801434c:	682b      	ldr	r3, [r5, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d0c4      	beq.n	80142dc <__sflush_r+0x34>
 8014352:	2b1d      	cmp	r3, #29
 8014354:	d001      	beq.n	801435a <__sflush_r+0xb2>
 8014356:	2b16      	cmp	r3, #22
 8014358:	d101      	bne.n	801435e <__sflush_r+0xb6>
 801435a:	602f      	str	r7, [r5, #0]
 801435c:	e7b1      	b.n	80142c2 <__sflush_r+0x1a>
 801435e:	89a3      	ldrh	r3, [r4, #12]
 8014360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014364:	81a3      	strh	r3, [r4, #12]
 8014366:	e7ad      	b.n	80142c4 <__sflush_r+0x1c>
 8014368:	690f      	ldr	r7, [r1, #16]
 801436a:	2f00      	cmp	r7, #0
 801436c:	d0a9      	beq.n	80142c2 <__sflush_r+0x1a>
 801436e:	0793      	lsls	r3, r2, #30
 8014370:	680e      	ldr	r6, [r1, #0]
 8014372:	bf08      	it	eq
 8014374:	694b      	ldreq	r3, [r1, #20]
 8014376:	600f      	str	r7, [r1, #0]
 8014378:	bf18      	it	ne
 801437a:	2300      	movne	r3, #0
 801437c:	eba6 0807 	sub.w	r8, r6, r7
 8014380:	608b      	str	r3, [r1, #8]
 8014382:	f1b8 0f00 	cmp.w	r8, #0
 8014386:	dd9c      	ble.n	80142c2 <__sflush_r+0x1a>
 8014388:	6a21      	ldr	r1, [r4, #32]
 801438a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801438c:	4643      	mov	r3, r8
 801438e:	463a      	mov	r2, r7
 8014390:	4628      	mov	r0, r5
 8014392:	47b0      	blx	r6
 8014394:	2800      	cmp	r0, #0
 8014396:	dc06      	bgt.n	80143a6 <__sflush_r+0xfe>
 8014398:	89a3      	ldrh	r3, [r4, #12]
 801439a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801439e:	81a3      	strh	r3, [r4, #12]
 80143a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143a4:	e78e      	b.n	80142c4 <__sflush_r+0x1c>
 80143a6:	4407      	add	r7, r0
 80143a8:	eba8 0800 	sub.w	r8, r8, r0
 80143ac:	e7e9      	b.n	8014382 <__sflush_r+0xda>
 80143ae:	bf00      	nop
 80143b0:	20400001 	.word	0x20400001

080143b4 <_fflush_r>:
 80143b4:	b538      	push	{r3, r4, r5, lr}
 80143b6:	690b      	ldr	r3, [r1, #16]
 80143b8:	4605      	mov	r5, r0
 80143ba:	460c      	mov	r4, r1
 80143bc:	b913      	cbnz	r3, 80143c4 <_fflush_r+0x10>
 80143be:	2500      	movs	r5, #0
 80143c0:	4628      	mov	r0, r5
 80143c2:	bd38      	pop	{r3, r4, r5, pc}
 80143c4:	b118      	cbz	r0, 80143ce <_fflush_r+0x1a>
 80143c6:	6983      	ldr	r3, [r0, #24]
 80143c8:	b90b      	cbnz	r3, 80143ce <_fflush_r+0x1a>
 80143ca:	f7ff f9a7 	bl	801371c <__sinit>
 80143ce:	4b14      	ldr	r3, [pc, #80]	; (8014420 <_fflush_r+0x6c>)
 80143d0:	429c      	cmp	r4, r3
 80143d2:	d11b      	bne.n	801440c <_fflush_r+0x58>
 80143d4:	686c      	ldr	r4, [r5, #4]
 80143d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d0ef      	beq.n	80143be <_fflush_r+0xa>
 80143de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80143e0:	07d0      	lsls	r0, r2, #31
 80143e2:	d404      	bmi.n	80143ee <_fflush_r+0x3a>
 80143e4:	0599      	lsls	r1, r3, #22
 80143e6:	d402      	bmi.n	80143ee <_fflush_r+0x3a>
 80143e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143ea:	f7ff fa47 	bl	801387c <__retarget_lock_acquire_recursive>
 80143ee:	4628      	mov	r0, r5
 80143f0:	4621      	mov	r1, r4
 80143f2:	f7ff ff59 	bl	80142a8 <__sflush_r>
 80143f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143f8:	07da      	lsls	r2, r3, #31
 80143fa:	4605      	mov	r5, r0
 80143fc:	d4e0      	bmi.n	80143c0 <_fflush_r+0xc>
 80143fe:	89a3      	ldrh	r3, [r4, #12]
 8014400:	059b      	lsls	r3, r3, #22
 8014402:	d4dd      	bmi.n	80143c0 <_fflush_r+0xc>
 8014404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014406:	f7ff fa3a 	bl	801387e <__retarget_lock_release_recursive>
 801440a:	e7d9      	b.n	80143c0 <_fflush_r+0xc>
 801440c:	4b05      	ldr	r3, [pc, #20]	; (8014424 <_fflush_r+0x70>)
 801440e:	429c      	cmp	r4, r3
 8014410:	d101      	bne.n	8014416 <_fflush_r+0x62>
 8014412:	68ac      	ldr	r4, [r5, #8]
 8014414:	e7df      	b.n	80143d6 <_fflush_r+0x22>
 8014416:	4b04      	ldr	r3, [pc, #16]	; (8014428 <_fflush_r+0x74>)
 8014418:	429c      	cmp	r4, r3
 801441a:	bf08      	it	eq
 801441c:	68ec      	ldreq	r4, [r5, #12]
 801441e:	e7da      	b.n	80143d6 <_fflush_r+0x22>
 8014420:	080173b4 	.word	0x080173b4
 8014424:	080173d4 	.word	0x080173d4
 8014428:	08017394 	.word	0x08017394

0801442c <_lseek_r>:
 801442c:	b538      	push	{r3, r4, r5, lr}
 801442e:	4d07      	ldr	r5, [pc, #28]	; (801444c <_lseek_r+0x20>)
 8014430:	4604      	mov	r4, r0
 8014432:	4608      	mov	r0, r1
 8014434:	4611      	mov	r1, r2
 8014436:	2200      	movs	r2, #0
 8014438:	602a      	str	r2, [r5, #0]
 801443a:	461a      	mov	r2, r3
 801443c:	f7ec fd90 	bl	8000f60 <_lseek>
 8014440:	1c43      	adds	r3, r0, #1
 8014442:	d102      	bne.n	801444a <_lseek_r+0x1e>
 8014444:	682b      	ldr	r3, [r5, #0]
 8014446:	b103      	cbz	r3, 801444a <_lseek_r+0x1e>
 8014448:	6023      	str	r3, [r4, #0]
 801444a:	bd38      	pop	{r3, r4, r5, pc}
 801444c:	200106cc 	.word	0x200106cc

08014450 <__swhatbuf_r>:
 8014450:	b570      	push	{r4, r5, r6, lr}
 8014452:	460e      	mov	r6, r1
 8014454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014458:	2900      	cmp	r1, #0
 801445a:	b096      	sub	sp, #88	; 0x58
 801445c:	4614      	mov	r4, r2
 801445e:	461d      	mov	r5, r3
 8014460:	da08      	bge.n	8014474 <__swhatbuf_r+0x24>
 8014462:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014466:	2200      	movs	r2, #0
 8014468:	602a      	str	r2, [r5, #0]
 801446a:	061a      	lsls	r2, r3, #24
 801446c:	d410      	bmi.n	8014490 <__swhatbuf_r+0x40>
 801446e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014472:	e00e      	b.n	8014492 <__swhatbuf_r+0x42>
 8014474:	466a      	mov	r2, sp
 8014476:	f000 f8b3 	bl	80145e0 <_fstat_r>
 801447a:	2800      	cmp	r0, #0
 801447c:	dbf1      	blt.n	8014462 <__swhatbuf_r+0x12>
 801447e:	9a01      	ldr	r2, [sp, #4]
 8014480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014488:	425a      	negs	r2, r3
 801448a:	415a      	adcs	r2, r3
 801448c:	602a      	str	r2, [r5, #0]
 801448e:	e7ee      	b.n	801446e <__swhatbuf_r+0x1e>
 8014490:	2340      	movs	r3, #64	; 0x40
 8014492:	2000      	movs	r0, #0
 8014494:	6023      	str	r3, [r4, #0]
 8014496:	b016      	add	sp, #88	; 0x58
 8014498:	bd70      	pop	{r4, r5, r6, pc}
	...

0801449c <__smakebuf_r>:
 801449c:	898b      	ldrh	r3, [r1, #12]
 801449e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80144a0:	079d      	lsls	r5, r3, #30
 80144a2:	4606      	mov	r6, r0
 80144a4:	460c      	mov	r4, r1
 80144a6:	d507      	bpl.n	80144b8 <__smakebuf_r+0x1c>
 80144a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80144ac:	6023      	str	r3, [r4, #0]
 80144ae:	6123      	str	r3, [r4, #16]
 80144b0:	2301      	movs	r3, #1
 80144b2:	6163      	str	r3, [r4, #20]
 80144b4:	b002      	add	sp, #8
 80144b6:	bd70      	pop	{r4, r5, r6, pc}
 80144b8:	ab01      	add	r3, sp, #4
 80144ba:	466a      	mov	r2, sp
 80144bc:	f7ff ffc8 	bl	8014450 <__swhatbuf_r>
 80144c0:	9900      	ldr	r1, [sp, #0]
 80144c2:	4605      	mov	r5, r0
 80144c4:	4630      	mov	r0, r6
 80144c6:	f7ff fa4f 	bl	8013968 <_malloc_r>
 80144ca:	b948      	cbnz	r0, 80144e0 <__smakebuf_r+0x44>
 80144cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144d0:	059a      	lsls	r2, r3, #22
 80144d2:	d4ef      	bmi.n	80144b4 <__smakebuf_r+0x18>
 80144d4:	f023 0303 	bic.w	r3, r3, #3
 80144d8:	f043 0302 	orr.w	r3, r3, #2
 80144dc:	81a3      	strh	r3, [r4, #12]
 80144de:	e7e3      	b.n	80144a8 <__smakebuf_r+0xc>
 80144e0:	4b0d      	ldr	r3, [pc, #52]	; (8014518 <__smakebuf_r+0x7c>)
 80144e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80144e4:	89a3      	ldrh	r3, [r4, #12]
 80144e6:	6020      	str	r0, [r4, #0]
 80144e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144ec:	81a3      	strh	r3, [r4, #12]
 80144ee:	9b00      	ldr	r3, [sp, #0]
 80144f0:	6163      	str	r3, [r4, #20]
 80144f2:	9b01      	ldr	r3, [sp, #4]
 80144f4:	6120      	str	r0, [r4, #16]
 80144f6:	b15b      	cbz	r3, 8014510 <__smakebuf_r+0x74>
 80144f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144fc:	4630      	mov	r0, r6
 80144fe:	f000 f881 	bl	8014604 <_isatty_r>
 8014502:	b128      	cbz	r0, 8014510 <__smakebuf_r+0x74>
 8014504:	89a3      	ldrh	r3, [r4, #12]
 8014506:	f023 0303 	bic.w	r3, r3, #3
 801450a:	f043 0301 	orr.w	r3, r3, #1
 801450e:	81a3      	strh	r3, [r4, #12]
 8014510:	89a0      	ldrh	r0, [r4, #12]
 8014512:	4305      	orrs	r5, r0
 8014514:	81a5      	strh	r5, [r4, #12]
 8014516:	e7cd      	b.n	80144b4 <__smakebuf_r+0x18>
 8014518:	080136b5 	.word	0x080136b5

0801451c <__malloc_lock>:
 801451c:	4801      	ldr	r0, [pc, #4]	; (8014524 <__malloc_lock+0x8>)
 801451e:	f7ff b9ad 	b.w	801387c <__retarget_lock_acquire_recursive>
 8014522:	bf00      	nop
 8014524:	200106d0 	.word	0x200106d0

08014528 <__malloc_unlock>:
 8014528:	4801      	ldr	r0, [pc, #4]	; (8014530 <__malloc_unlock+0x8>)
 801452a:	f7ff b9a8 	b.w	801387e <__retarget_lock_release_recursive>
 801452e:	bf00      	nop
 8014530:	200106d0 	.word	0x200106d0

08014534 <_read_r>:
 8014534:	b538      	push	{r3, r4, r5, lr}
 8014536:	4d07      	ldr	r5, [pc, #28]	; (8014554 <_read_r+0x20>)
 8014538:	4604      	mov	r4, r0
 801453a:	4608      	mov	r0, r1
 801453c:	4611      	mov	r1, r2
 801453e:	2200      	movs	r2, #0
 8014540:	602a      	str	r2, [r5, #0]
 8014542:	461a      	mov	r2, r3
 8014544:	f7ec fcac 	bl	8000ea0 <_read>
 8014548:	1c43      	adds	r3, r0, #1
 801454a:	d102      	bne.n	8014552 <_read_r+0x1e>
 801454c:	682b      	ldr	r3, [r5, #0]
 801454e:	b103      	cbz	r3, 8014552 <_read_r+0x1e>
 8014550:	6023      	str	r3, [r4, #0]
 8014552:	bd38      	pop	{r3, r4, r5, pc}
 8014554:	200106cc 	.word	0x200106cc

08014558 <_raise_r>:
 8014558:	291f      	cmp	r1, #31
 801455a:	b538      	push	{r3, r4, r5, lr}
 801455c:	4604      	mov	r4, r0
 801455e:	460d      	mov	r5, r1
 8014560:	d904      	bls.n	801456c <_raise_r+0x14>
 8014562:	2316      	movs	r3, #22
 8014564:	6003      	str	r3, [r0, #0]
 8014566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801456a:	bd38      	pop	{r3, r4, r5, pc}
 801456c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801456e:	b112      	cbz	r2, 8014576 <_raise_r+0x1e>
 8014570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014574:	b94b      	cbnz	r3, 801458a <_raise_r+0x32>
 8014576:	4620      	mov	r0, r4
 8014578:	f000 f830 	bl	80145dc <_getpid_r>
 801457c:	462a      	mov	r2, r5
 801457e:	4601      	mov	r1, r0
 8014580:	4620      	mov	r0, r4
 8014582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014586:	f000 b817 	b.w	80145b8 <_kill_r>
 801458a:	2b01      	cmp	r3, #1
 801458c:	d00a      	beq.n	80145a4 <_raise_r+0x4c>
 801458e:	1c59      	adds	r1, r3, #1
 8014590:	d103      	bne.n	801459a <_raise_r+0x42>
 8014592:	2316      	movs	r3, #22
 8014594:	6003      	str	r3, [r0, #0]
 8014596:	2001      	movs	r0, #1
 8014598:	e7e7      	b.n	801456a <_raise_r+0x12>
 801459a:	2400      	movs	r4, #0
 801459c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80145a0:	4628      	mov	r0, r5
 80145a2:	4798      	blx	r3
 80145a4:	2000      	movs	r0, #0
 80145a6:	e7e0      	b.n	801456a <_raise_r+0x12>

080145a8 <raise>:
 80145a8:	4b02      	ldr	r3, [pc, #8]	; (80145b4 <raise+0xc>)
 80145aa:	4601      	mov	r1, r0
 80145ac:	6818      	ldr	r0, [r3, #0]
 80145ae:	f7ff bfd3 	b.w	8014558 <_raise_r>
 80145b2:	bf00      	nop
 80145b4:	20000030 	.word	0x20000030

080145b8 <_kill_r>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	4d07      	ldr	r5, [pc, #28]	; (80145d8 <_kill_r+0x20>)
 80145bc:	2300      	movs	r3, #0
 80145be:	4604      	mov	r4, r0
 80145c0:	4608      	mov	r0, r1
 80145c2:	4611      	mov	r1, r2
 80145c4:	602b      	str	r3, [r5, #0]
 80145c6:	f7ec fc4f 	bl	8000e68 <_kill>
 80145ca:	1c43      	adds	r3, r0, #1
 80145cc:	d102      	bne.n	80145d4 <_kill_r+0x1c>
 80145ce:	682b      	ldr	r3, [r5, #0]
 80145d0:	b103      	cbz	r3, 80145d4 <_kill_r+0x1c>
 80145d2:	6023      	str	r3, [r4, #0]
 80145d4:	bd38      	pop	{r3, r4, r5, pc}
 80145d6:	bf00      	nop
 80145d8:	200106cc 	.word	0x200106cc

080145dc <_getpid_r>:
 80145dc:	f7ec bc3c 	b.w	8000e58 <_getpid>

080145e0 <_fstat_r>:
 80145e0:	b538      	push	{r3, r4, r5, lr}
 80145e2:	4d07      	ldr	r5, [pc, #28]	; (8014600 <_fstat_r+0x20>)
 80145e4:	2300      	movs	r3, #0
 80145e6:	4604      	mov	r4, r0
 80145e8:	4608      	mov	r0, r1
 80145ea:	4611      	mov	r1, r2
 80145ec:	602b      	str	r3, [r5, #0]
 80145ee:	f7ec fc9c 	bl	8000f2a <_fstat>
 80145f2:	1c43      	adds	r3, r0, #1
 80145f4:	d102      	bne.n	80145fc <_fstat_r+0x1c>
 80145f6:	682b      	ldr	r3, [r5, #0]
 80145f8:	b103      	cbz	r3, 80145fc <_fstat_r+0x1c>
 80145fa:	6023      	str	r3, [r4, #0]
 80145fc:	bd38      	pop	{r3, r4, r5, pc}
 80145fe:	bf00      	nop
 8014600:	200106cc 	.word	0x200106cc

08014604 <_isatty_r>:
 8014604:	b538      	push	{r3, r4, r5, lr}
 8014606:	4d06      	ldr	r5, [pc, #24]	; (8014620 <_isatty_r+0x1c>)
 8014608:	2300      	movs	r3, #0
 801460a:	4604      	mov	r4, r0
 801460c:	4608      	mov	r0, r1
 801460e:	602b      	str	r3, [r5, #0]
 8014610:	f7ec fc9b 	bl	8000f4a <_isatty>
 8014614:	1c43      	adds	r3, r0, #1
 8014616:	d102      	bne.n	801461e <_isatty_r+0x1a>
 8014618:	682b      	ldr	r3, [r5, #0]
 801461a:	b103      	cbz	r3, 801461e <_isatty_r+0x1a>
 801461c:	6023      	str	r3, [r4, #0]
 801461e:	bd38      	pop	{r3, r4, r5, pc}
 8014620:	200106cc 	.word	0x200106cc

08014624 <_init>:
 8014624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014626:	bf00      	nop
 8014628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801462a:	bc08      	pop	{r3}
 801462c:	469e      	mov	lr, r3
 801462e:	4770      	bx	lr

08014630 <_fini>:
 8014630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014632:	bf00      	nop
 8014634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014636:	bc08      	pop	{r3}
 8014638:	469e      	mov	lr, r3
 801463a:	4770      	bx	lr
