
Trial_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e6ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cdc  0801e8ac  0801e8ac  0002e8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022588  08022588  000401d4  2**0
                  CONTENTS
  4 .ARM          00000008  08022588  08022588  00032588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022590  08022590  000401d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022590  08022590  00032590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022594  08022594  00032594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08022598  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0802262c  00040094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  080226cc  00040134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011360  200001d4  0802276c  000401d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20011534  0802276c  00041534  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000435ad  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a53e  00000000  00000000  000837af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030d8  00000000  00000000  0008dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002ef8  00000000  00000000  00090dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e789  00000000  00000000  00093cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a55b  00000000  00000000  000d2449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012cbeb  00000000  00000000  0011c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0024958f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d368  00000000  00000000  002495e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e894 	.word	0x0801e894

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0801e894 	.word	0x0801e894

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <vApplicationGetIdleTaskMemory+0x2c>)
 8000624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vApplicationGetIdleTaskMemory+0x30>)
 800062a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000ec0 	.word	0x20000ec0
 8000644:	20000f14 	.word	0x20000f14

08000648 <MqttClientSubTask>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MqttClientSubTask+0x64>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MqttClientSubTask+0x64>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MqttClientSubTask+0x64>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f007 fc70 	bl	8007f50 <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000670:	e7ee      	b.n	8000650 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 8000672:	480f      	ldr	r0, [pc, #60]	; (80006b0 <MqttClientSubTask+0x68>)
 8000674:	f01d f8b2 	bl	801d7dc <puts>
			break;
 8000678:	bf00      	nop
//	MqttConnectBroker();
//				osDelay(1000);

	while(1)
	{
		if(!mqttClient.isconnected)
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MqttClientSubTask+0x6c>)
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MqttClientSubTask+0x6c>)
 8000684:	f018 fdd4 	bl	8019230 <MQTTDisconnect>
			MqttConnectBroker();
 8000688:	f000 f884 	bl	8000794 <MqttConnectBroker>
//			osDelay(1000);
			vTaskDelay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f009 f93c 	bl	800990c <vTaskDelay>
 8000694:	e7f1      	b.n	800067a <MqttClientSubTask+0x32>
		}
		else
		{
//			EngagePin1();
			MQTTYield(&mqttClient, 1000); //handle timer
 8000696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MqttClientSubTask+0x6c>)
 800069c:	f018 fb02 	bl	8018ca4 <MQTTYield>
//			osDelay(100);
			vTaskDelay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a4:	f009 f932 	bl	800990c <vTaskDelay>
		if(!mqttClient.isconnected)
 80006a8:	e7e7      	b.n	800067a <MqttClientSubTask+0x32>
 80006aa:	bf00      	nop
 80006ac:	20001a3c 	.word	0x20001a3c
 80006b0:	0801e8ac 	.word	0x0801e8ac
 80006b4:	20000210 	.word	0x20000210

080006b8 <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b0ac      	sub	sp, #176	; 0xb0
 80006bc:	af00      	add	r7, sp, #0
 80006be:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint8_t obuffer[pb_SensorData_size];
	sensorData sd = {.sensorName="",.sensorID=0,.sensorVal=0,.timeStamp=0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
 80006c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	751a      	strb	r2, [r3, #20]
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80006dc:	2300      	movs	r3, #0
 80006de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
//	const char* str = "MQTT message from STM32";
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MqttClientPubTask+0xc8>)
 80006e8:	6a1b      	ldr	r3, [r3, #32]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d043      	beq.n	8000776 <MqttClientPubTask+0xbe>
		{
			if (xSemaphoreTake(bufsemHandle, portMAX_DELAY)) {
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MqttClientPubTask+0xcc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f6:	4618      	mov	r0, r3
 80006f8:	f008 fc1a 	bl	8008f30 <xQueueSemaphoreTake>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00f      	beq.n	8000722 <MqttClientPubTask+0x6a>

				sd = sensorDataBuf.front(&sensorDataBuf);
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MqttClientPubTask+0xd0>)
 8000704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000708:	463a      	mov	r2, r7
 800070a:	491f      	ldr	r1, [pc, #124]	; (8000788 <MqttClientPubTask+0xd0>)
 800070c:	4610      	mov	r0, r2
 800070e:	4798      	blx	r3
 8000710:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000714:	463d      	mov	r5, r7
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	682b      	ldr	r3, [r5, #0]
 8000720:	6023      	str	r3, [r4, #0]

			//		copy_(&tmp, &sd);
			}
				//	copy_(&sd, &sd1);
			bool res=sensor_data_to_pbuf(&sd,obuffer,sizeof(obuffer));
 8000722:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800072a:	224a      	movs	r2, #74	; 0x4a
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fc29 	bl	8000f84 <sensor_data_to_pbuf>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			if (res) {
 8000738:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800073c:	2b00      	cmp	r3, #0
 800073e:	d01a      	beq.n	8000776 <MqttClientPubTask+0xbe>
				if (strlen((const char*)sd.sensorName)) {
 8000740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d015      	beq.n	8000776 <MqttClientPubTask+0xbe>
					sd5=sd;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MqttClientPubTask+0xd4>)
 800074c:	461d      	mov	r5, r3
 800074e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	602b      	str	r3, [r5, #0]
//					copy_(&sd, &sd1);
					message.payload = (void*)obuffer;
 800075e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
					message.payloadlen = sizeof(obuffer);
 8000764:	234a      	movs	r3, #74	; 0x4a
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
					MQTTPublish(&mqttClient, "test", &message); //publish a message
 8000768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076c:	461a      	mov	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <MqttClientPubTask+0xd8>)
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <MqttClientPubTask+0xc8>)
 8000772:	f018 fc97 	bl	80190a4 <MQTTPublish>
//				MQTTPublish(&mqttClient, "test", &message); //publish a message
			}
		}

//		osDelay(1000);
		vTaskDelay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f009 f8c7 	bl	800990c <vTaskDelay>
		if(mqttClient.isconnected)
 800077e:	e7b2      	b.n	80006e6 <MqttClientPubTask+0x2e>
 8000780:	20000210 	.word	0x20000210
 8000784:	2000190c 	.word	0x2000190c
 8000788:	20001934 	.word	0x20001934
 800078c:	20000e78 	.word	0x20000e78
 8000790:	0801e8c0 	.word	0x0801e8c0

08000794 <MqttConnectBroker>:
	}
}

int MqttConnectBroker()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 800079a:	4832      	ldr	r0, [pc, #200]	; (8000864 <MqttConnectBroker+0xd0>)
 800079c:	f018 fde0 	bl	8019360 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 80007a0:	f240 725b 	movw	r2, #1883	; 0x75b
 80007a4:	4930      	ldr	r1, [pc, #192]	; (8000868 <MqttConnectBroker+0xd4>)
 80007a6:	482f      	ldr	r0, [pc, #188]	; (8000864 <MqttConnectBroker+0xd0>)
 80007a8:	f018 fdfc 	bl	80193a4 <ConnectNetwork>
 80007ac:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 80007b4:	482d      	ldr	r0, [pc, #180]	; (800086c <MqttConnectBroker+0xd8>)
 80007b6:	f01d f811 	bl	801d7dc <puts>
		return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007be:	e04c      	b.n	800085a <MqttConnectBroker+0xc6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <MqttConnectBroker+0xdc>)
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MqttConnectBroker+0xe0>)
 80007d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d6:	4923      	ldr	r1, [pc, #140]	; (8000864 <MqttConnectBroker+0xd0>)
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <MqttConnectBroker+0xe4>)
 80007da:	f017 ff03 	bl	80185e4 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 80007de:	4a27      	ldr	r2, [pc, #156]	; (800087c <MqttConnectBroker+0xe8>)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4611      	mov	r1, r2
 80007e4:	2258      	movs	r2, #88	; 0x58
 80007e6:	4618      	mov	r0, r3
 80007e8:	f01c ff5c 	bl	801d6a4 <memcpy>
	data.willFlag = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F4";
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MqttConnectBroker+0xec>)
 80007f6:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F4";
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MqttConnectBroker+0xec>)
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MqttConnectBroker+0xf0>)
 80007fe:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 8000800:	233c      	movs	r3, #60	; 0x3c
 8000802:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <MqttConnectBroker+0xe4>)
 800080e:	f018 fb2b 	bl	8018e68 <MQTTConnect>
 8000812:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MqttConnectBroker+0xf4>)
 800081c:	f01c ffde 	bl	801d7dc <puts>
		return ret;
 8000820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000822:	e01a      	b.n	800085a <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000828:	f007 fb92 	bl	8007f50 <osDelay>

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MqttConnectBroker+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	4917      	ldr	r1, [pc, #92]	; (8000890 <MqttConnectBroker+0xfc>)
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <MqttConnectBroker+0xe4>)
 8000834:	f018 fc20 	bl	8019078 <MQTTSubscribe>
 8000838:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 800083a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800083c:	2b00      	cmp	r3, #0
 800083e:	d004      	beq.n	800084a <MqttConnectBroker+0xb6>
	{
		printf("MQTTSubscribe failed.\n");
 8000840:	4814      	ldr	r0, [pc, #80]	; (8000894 <MqttConnectBroker+0x100>)
 8000842:	f01c ffcb 	bl	801d7dc <puts>
		return ret;
 8000846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000848:	e007      	b.n	800085a <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 800084a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084e:	f007 fb7f 	bl	8007f50 <osDelay>

	printf("MQTT_ConnectBroker O.K.\n");
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <MqttConnectBroker+0x104>)
 8000854:	f01c ffc2 	bl	801d7dc <puts>
	return MQTT_SUCCESS;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3760      	adds	r7, #96	; 0x60
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001f8 	.word	0x200001f8
 8000868:	0801e8c8 	.word	0x0801e8c8
 800086c:	0801e8d4 	.word	0x0801e8d4
 8000870:	20000678 	.word	0x20000678
 8000874:	20000278 	.word	0x20000278
 8000878:	20000210 	.word	0x20000210
 800087c:	0801e93c 	.word	0x0801e93c
 8000880:	0801e8ec 	.word	0x0801e8ec
 8000884:	0801e8f4 	.word	0x0801e8f4
 8000888:	0801e8f8 	.word	0x0801e8f8
 800088c:	0800089d 	.word	0x0800089d
 8000890:	0801e8c0 	.word	0x0801e8c0
 8000894:	0801e90c 	.word	0x0801e90c
 8000898:	0801e924 	.word	0x0801e924

0800089c <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b09a      	sub	sp, #104	; 0x68
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin); //toggle pin when new message arrived
 80008a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a8:	482d      	ldr	r0, [pc, #180]	; (8000960 <MqttMessageArrived+0xc4>)
 80008aa:	f003 f9e4 	bl	8003c76 <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	667b      	str	r3, [r7, #100]	; 0x64
	memset(msgBuffer, 0, sizeof(msgBuffer));
 80008b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b8:	2100      	movs	r1, #0
 80008ba:	482a      	ldr	r0, [pc, #168]	; (8000964 <MqttMessageArrived+0xc8>)
 80008bc:	f01c ff00 	bl	801d6c0 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 80008c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c2:	6899      	ldr	r1, [r3, #8]
 80008c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4826      	ldr	r0, [pc, #152]	; (8000964 <MqttMessageArrived+0xc8>)
 80008cc:	f01c feea 	bl	801d6a4 <memcpy>

	pb_SensorData pb_recv_obj= pb_SensorData_init_zero;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
 80008d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d8:	2224      	movs	r2, #36	; 0x24
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f01c feef 	bl	801d6c0 <memset>
 80008e2:	2300      	movs	r3, #0
 80008e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80008e6:	2300      	movs	r3, #0
 80008e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008ea:	2300      	movs	r3, #0
 80008ec:	663b      	str	r3, [r7, #96]	; 0x60
	sensorData sd2 = {.sensorID=0,.sensorName="",.sensorVal=0,.timeStamp=0};
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	751a      	strb	r2, [r3, #20]
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
 800090e:	2300      	movs	r3, #0
 8000910:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	message_to_pb_obj(&pb_recv_obj,msgBuffer,sizeof(msgBuffer));
 8000914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091c:	4911      	ldr	r1, [pc, #68]	; (8000964 <MqttMessageArrived+0xc8>)
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fb80 	bl	8001024 <message_to_pb_obj>
	pbuf_to_sensor_data(&pb_recv_obj,&sd2);
 8000924:	f107 020c 	add.w	r2, r7, #12
 8000928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fba0 	bl	8001074 <pbuf_to_sensor_data>
	sd6=sd2;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MqttMessageArrived+0xcc>)
 8000936:	461d      	mov	r5, r3
 8000938:	f107 040c 	add.w	r4, r7, #12
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	6823      	ldr	r3, [r4, #0]
 8000946:	602b      	str	r3, [r5, #0]
//	copy_(&sd2, &sd1);

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 8000948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <MqttMessageArrived+0xc8>)
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <MqttMessageArrived+0xd0>)
 8000952:	f01c febd 	bl	801d6d0 <iprintf>
}
 8000956:	bf00      	nop
 8000958:	3768      	adds	r7, #104	; 0x68
 800095a:	46bd      	mov	sp, r7
 800095c:	bdb0      	pop	{r4, r5, r7, pc}
 800095e:	bf00      	nop
 8000960:	40020400 	.word	0x40020400
 8000964:	20000a78 	.word	0x20000a78
 8000968:	20000e9c 	.word	0x20000e9c
 800096c:	0801e994 	.word	0x0801e994

08000970 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000974:	f3bf 8f4f 	dsb	sy
}
 8000978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097a:	f3bf 8f6f 	isb	sy
}
 800097e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <SCB_EnableICache+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <SCB_EnableICache+0x48>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <SCB_EnableICache+0x48>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a0:	f3bf 8f4f 	dsb	sy
}
 80009a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a6:	f3bf 8f6f 	isb	sy
}
 80009aa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009d6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	0b5b      	lsrs	r3, r3, #13
 80009dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	015a      	lsls	r2, r3, #5
 80009f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009fa:	4911      	ldr	r1, [pc, #68]	; (8000a40 <SCB_EnableDCache+0x84>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	60ba      	str	r2, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1ef      	bne.n	80009ec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	60fa      	str	r2, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1e5      	bne.n	80009e2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a16:	f3bf 8f4f 	dsb	sy
}
 8000a1a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <SCB_EnableDCache+0x84>)
 8000a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a28:	f3bf 8f4f 	dsb	sy
}
 8000a2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a2e:	f3bf 8f6f 	isb	sy
}
 8000a32:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b5b0      	push	{r4, r5, r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a4a:	f000 fa31 	bl	8000eb0 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a4e:	f7ff ff8f 	bl	8000970 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a52:	f7ff ffb3 	bl	80009bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f001 f9eb 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f839 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 f943 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a62:	f000 f8e3 	bl	8000c2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a66:	f000 f911 	bl	8000c8c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000a6a:	f000 f8a1 	bl	8000bb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_spi(&spi_obj);
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <main+0x78>)
 8000a70:	f000 fc84 	bl	800137c <init_spi>
  init_sensor_buffer_obj(&sensorDataBuf);
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <main+0x7c>)
 8000a76:	f000 fb63 	bl	8001140 <init_sensor_buffer_obj>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of bufsem */
  osSemaphoreDef(bufsem);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  bufsemHandle = osSemaphoreCreate(osSemaphore(bufsem), 1);
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f007 fb11 	bl	80080b0 <osSemaphoreCreate>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <main+0x80>)
 8000a92:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <main+0x84>)
 8000a96:	1d3c      	adds	r4, r7, #4
 8000a98:	461d      	mov	r5, r3
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 fa04 	bl	8007eb8 <osThreadCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <main+0x88>)
 8000ab4:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ab6:	f007 f9e8 	bl	8007e8a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <main+0x76>
 8000abc:	200019dc 	.word	0x200019dc
 8000ac0:	20001934 	.word	0x20001934
 8000ac4:	2000190c 	.word	0x2000190c
 8000ac8:	0801e9dc 	.word	0x0801e9dc
 8000acc:	20001908 	.word	0x20001908

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2234      	movs	r2, #52	; 0x34
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f01c fdee 	bl	801d6c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af4:	f003 fa22 	bl	8003f3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <SystemClock_Config+0xd8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a2a      	ldr	r2, [pc, #168]	; (8000ba8 <SystemClock_Config+0xd8>)
 8000afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <SystemClock_Config+0xd8>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <SystemClock_Config+0xdc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a25      	ldr	r2, [pc, #148]	; (8000bac <SystemClock_Config+0xdc>)
 8000b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <SystemClock_Config+0xdc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b40:	23d8      	movs	r3, #216	; 0xd8
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b48:	2309      	movs	r3, #9
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fa51 	bl	8003ffc <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b60:	f000 fa0a 	bl	8000f78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b64:	f003 f9fa 	bl	8003f5c <HAL_PWREx_EnableOverDrive>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b6e:	f000 fa03 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	230f      	movs	r3, #15
 8000b74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2107      	movs	r1, #7
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fce1 	bl	8004558 <HAL_RCC_ClockConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b9c:	f000 f9ec 	bl	8000f78 <Error_Handler>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3750      	adds	r7, #80	; 0x50
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <MX_SPI1_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000be6:	2238      	movs	r2, #56	; 0x38
 8000be8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000bfe:	2207      	movs	r2, #7
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_SPI1_Init+0x74>)
 8000c10:	f004 fb22 	bl	8005258 <HAL_SPI_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f9ad 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20001314 	.word	0x20001314
 8000c28:	40013000 	.word	0x40013000

08000c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART3_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART3_UART_Init+0x58>)
 8000c70:	f005 fb54 	bl	800631c <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f97d 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20001378 	.word	0x20001378
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd0:	f002 ffeb 	bl	8003caa <HAL_PCD_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 f94d 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20001400 	.word	0x20001400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a40      	ldr	r2, [pc, #256]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a3a      	ldr	r2, [pc, #232]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a34      	ldr	r2, [pc, #208]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a2e      	ldr	r2, [pc, #184]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_GPIO_Init+0x134>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d94:	4822      	ldr	r0, [pc, #136]	; (8000e20 <MX_GPIO_Init+0x138>)
 8000d96:	f002 ff55 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	4821      	ldr	r0, [pc, #132]	; (8000e24 <MX_GPIO_Init+0x13c>)
 8000da0:	f002 ff50 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000daa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	481b      	ldr	r0, [pc, #108]	; (8000e28 <MX_GPIO_Init+0x140>)
 8000dbc:	f002 fc8a 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <MX_GPIO_Init+0x138>)
 8000dda:	f002 fc7b 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dde:	2340      	movs	r3, #64	; 0x40
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <MX_GPIO_Init+0x13c>)
 8000df6:	f002 fc6d 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_GPIO_Init+0x13c>)
 8000e0e:	f002 fc61 	bl	80036d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40020800 	.word	0x40020800

08000e2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b090      	sub	sp, #64	; 0x40
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e34:	f006 f9ce 	bl	80071d4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //subscribe task
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <StartDefaultTask+0x6c>)
 8000e3a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //publish task
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <StartDefaultTask+0x70>)
 8000e4e:	f107 0408 	add.w	r4, r7, #8
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 f826 	bl	8007eb8 <osThreadCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <StartDefaultTask+0x74>)
 8000e70:	6013      	str	r3, [r2, #0]
  	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f007 f81d 	bl	8007eb8 <osThreadCreate>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <StartDefaultTask+0x78>)
 8000e82:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
//	  IRSENSOR1
//	  spi_obj.spi_read(buffer_tx[0],buffer_rx,&hspi1);
	  spi_obj.spi_read(IRSENSOR1,spi_obj.rx_buf,&hspi1);
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <StartDefaultTask+0x7c>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4a08      	ldr	r2, [pc, #32]	; (8000eac <StartDefaultTask+0x80>)
 8000e8a:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <StartDefaultTask+0x7c>)
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	4798      	blx	r3


    osDelay(20);
 8000e90:	2014      	movs	r0, #20
 8000e92:	f007 f85d 	bl	8007f50 <osDelay>
	  spi_obj.spi_read(IRSENSOR1,spi_obj.rx_buf,&hspi1);
 8000e96:	e7f5      	b.n	8000e84 <StartDefaultTask+0x58>
 8000e98:	0801e9f8 	.word	0x0801e9f8
 8000e9c:	0801ea14 	.word	0x0801ea14
 8000ea0:	200001f0 	.word	0x200001f0
 8000ea4:	200001f4 	.word	0x200001f4
 8000ea8:	200019dc 	.word	0x200019dc
 8000eac:	20001314 	.word	0x20001314

08000eb0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ec2:	f001 f91b 	bl	80020fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ed2:	231f      	movs	r3, #31
 8000ed4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ed6:	2387      	movs	r3, #135	; 0x87
 8000ed8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 f939 	bl	800216c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000efe:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000f02:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000f04:	2310      	movs	r3, #16
 8000f06:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f10:	2303      	movs	r3, #3
 8000f12:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f926 	bl	800216c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <MPU_Config+0xa0>)
 8000f26:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 f916 	bl	800216c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f40:	2004      	movs	r0, #4
 8000f42:	f001 f8f3 	bl	800212c <HAL_MPU_Enable>

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24020000 	.word	0x24020000

08000f54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f66:	f000 ff71 	bl	8001e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40001000 	.word	0x40001000

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <sensor_data_to_pbuf>:

//static bool decode_timestamp(pb_istream_t *stream, const pb_field_t *field, void **arg);
//static bool encode_timestamp(pb_ostream_t *stream, const pb_field_t *field, void * const *arg);

//pb_SensorData sensor_data_to_pbuf(sensorData* sd,uint8_t *msg_buf,uint32_t* len) {
bool sensor_data_to_pbuf(sensorData* sd,uint8_t *msg_buf,uint32_t len) {
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b09e      	sub	sp, #120	; 0x78
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6278      	str	r0, [r7, #36]	; 0x24
 8000f8c:	6239      	str	r1, [r7, #32]
 8000f8e:	61fa      	str	r2, [r7, #28]
	copy_(sd, &sd1);
 8000f90:	4922      	ldr	r1, [pc, #136]	; (800101c <sensor_data_to_pbuf+0x98>)
 8000f92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f94:	f000 f892 	bl	80010bc <copy_>
//	pb_SensorData_fields
	pb_SensorData pb_obj= pb_SensorData_init_zero;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8000f9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fa0:	2224      	movs	r2, #36	; 0x24
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f01c fb8b 	bl	801d6c0 <memset>
 8000faa:	2300      	movs	r3, #0
 8000fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fae:	2300      	movs	r3, #0
 8000fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	673b      	str	r3, [r7, #112]	; 0x70
	pb_ostream_t ostream_sname;

//	uint8_t sensor_name_buf[strlen(((const char*)sd->sensorName)+1)];
	strcpy(pb_obj.sensorName,(const char*)sd->sensorName);
 8000fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f01c fc52 	bl	801d868 <strcpy>
//	pb_obj.sensorName.funcs.encode = &encode_sensorName;

	pb_obj.sensorID = sd->sensorID;
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	7e5b      	ldrb	r3, [r3, #25]
 8000fc8:	66bb      	str	r3, [r7, #104]	; 0x68
	pb_obj.timeStamp = sd->timeStamp;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	66fb      	str	r3, [r7, #108]	; 0x6c

	pb_obj.sensorValue = sd->sensorVal;
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd6:	673b      	str	r3, [r7, #112]	; 0x70


//	ostream_sname = pb_ostream_from_buffer(sensor_name_buf, sizeof(sensor_name_buf));
	ostream_sname = pb_ostream_from_buffer(msg_buf, len);
 8000fd8:	463b      	mov	r3, r7
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	6a39      	ldr	r1, [r7, #32]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f01b fa68 	bl	801c4b4 <pb_ostream_from_buffer>
 8000fe4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000fe8:	463d      	mov	r5, r7
 8000fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fee:	682b      	ldr	r3, [r5, #0]
 8000ff0:	6023      	str	r3, [r4, #0]
	bool res=0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	res=pb_encode(&ostream_sname, pb_SensorData_fields, &pb_obj);
 8000ff8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <sensor_data_to_pbuf+0x9c>)
 8001002:	4618      	mov	r0, r3
 8001004:	f01b fec3 	bl	801cd8e <pb_encode>
 8001008:	4603      	mov	r3, r0
 800100a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	return res;
 800100e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001012:	4618      	mov	r0, r3
 8001014:	3778      	adds	r7, #120	; 0x78
 8001016:	46bd      	mov	sp, r7
 8001018:	bdb0      	pop	{r4, r5, r7, pc}
 800101a:	bf00      	nop
 800101c:	20001910 	.word	0x20001910
 8001020:	08022324 	.word	0x08022324

08001024 <message_to_pb_obj>:
//	sd.sensorVal = pb_data->sensorValue;
//
//
//	return sd;
//}
bool message_to_pb_obj(pb_SensorData* pb_data,uint8_t *msg_buf,uint32_t len) {
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b08d      	sub	sp, #52	; 0x34
 8001028:	af00      	add	r7, sp, #0
 800102a:	61f8      	str	r0, [r7, #28]
 800102c:	61b9      	str	r1, [r7, #24]
 800102e:	617a      	str	r2, [r7, #20]
	pb_istream_t stream;

	stream = pb_istream_from_buffer(msg_buf, len);
 8001030:	463b      	mov	r3, r7
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	69b9      	ldr	r1, [r7, #24]
 8001036:	4618      	mov	r0, r3
 8001038:	f019 fd30 	bl	801aa9c <pb_istream_from_buffer>
 800103c:	f107 0420 	add.w	r4, r7, #32
 8001040:	463b      	mov	r3, r7
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!pb_decode(&stream, pb_SensorData_fields, pb_data)) {
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <message_to_pb_obj+0x4c>)
 8001050:	4618      	mov	r0, r3
 8001052:	f01a fe5d 	bl	801bd10 <pb_decode>
 8001056:	4603      	mov	r3, r0
 8001058:	f083 0301 	eor.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <message_to_pb_obj+0x42>
		return false;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <message_to_pb_obj+0x44>
	}

	return true;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3734      	adds	r7, #52	; 0x34
 800106c:	46bd      	mov	sp, r7
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	08022324 	.word	0x08022324

08001074 <pbuf_to_sensor_data>:
bool pbuf_to_sensor_data(pb_SensorData* pb_data,sensorData* sd) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
	if (strlen((const char*)pb_data->sensorName)) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <pbuf_to_sensor_data+0x1e>
		strcpy((char*)sd->sensorName,pb_data->sensorName);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f01c fbeb 	bl	801d868 <strcpy>
	}
	sd->sensorID = pb_data->sensorID;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	b2da      	uxtb	r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	765a      	strb	r2, [r3, #25]
	sd->sensorVal = pb_data->sensorValue;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]
	sd->timeStamp = pb_data->timeStamp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	461a      	mov	r2, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	61da      	str	r2, [r3, #28]
	return true;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <copy_>:
sensorData sensor_buffer_front(volatile sensorData_buf* sb);

sensorData sensorDataObj;
sensorData_buf sensorDataBuf;

bool copy_(sensorData* from,sensorData* to) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	strcpy((char*)to->sensorName,(const char*)from->sensorName);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f01c fbcb 	bl	801d868 <strcpy>
	to->sensorID = from->sensorID;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7e5a      	ldrb	r2, [r3, #25]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	765a      	strb	r2, [r3, #25]
	to->timeStamp = from ->timeStamp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	61da      	str	r2, [r3, #28]
	to->sensorVal = from->sensorVal;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]


	return true;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <init_sensor_data_obj>:

void update_timestamp(sensorData* sd) {
	sd->timeStamp = HAL_GetTick();
}

void init_sensor_data_obj(uint8_t* sname,uint8_t sensorID,uint8_t sensorVal,sensorData* sd) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	72fb      	strb	r3, [r7, #11]
 8001106:	4613      	mov	r3, r2
 8001108:	72bb      	strb	r3, [r7, #10]
	memcpy(sd->sensorName,sname,strlen((const char*)sname)+1);
 800110a:	687c      	ldr	r4, [r7, #4]
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff f8a1 	bl	8000254 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	3301      	adds	r3, #1
 8001116:	461a      	mov	r2, r3
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	4620      	mov	r0, r4
 800111c:	f01c fac2 	bl	801d6a4 <memcpy>
	sd->sensorID=sensorID;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7afa      	ldrb	r2, [r7, #11]
 8001124:	765a      	strb	r2, [r3, #25]
	sd->timeStamp = HAL_GetTick();
 8001126:	f000 fea5 	bl	8001e74 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	61da      	str	r2, [r3, #28]
	sd->sensorVal = sensorVal;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7aba      	ldrb	r2, [r7, #10]
 8001134:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}

08001140 <init_sensor_buffer_obj>:


void init_sensor_buffer_obj(volatile sensorData_buf* sb) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	sb->count=0;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	sb->first=0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sb->last=0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	sb->front = sensor_buffer_front;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a06      	ldr	r2, [pc, #24]	; (800117c <init_sensor_buffer_obj+0x3c>)
 8001164:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	sb->update = update_sensor_buffer;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <init_sensor_buffer_obj+0x40>)
 800116c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	0800128d 	.word	0x0800128d
 8001180:	08001185 	.word	0x08001185

08001184 <update_sensor_buffer>:

void update_sensor_buffer(volatile sensorData_buf* sb,sensorData sd) {
 8001184:	b084      	sub	sp, #16
 8001186:	b4b0      	push	{r4, r5, r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	f107 001c 	add.w	r0, r7, #28
 8001192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	}
//	else if (sb->last>4) {
//		sb->last %=3;
//	}
//	sb->last %=3;
	if (sb->first==4) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119c:	2b04      	cmp	r3, #4
 800119e:	d104      	bne.n	80011aa <update_sensor_buffer+0x26>
		sb->first =0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80011a8:	e012      	b.n	80011d0 <update_sensor_buffer+0x4c>
	}
	else if (sb->first>4) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d90d      	bls.n	80011d0 <update_sensor_buffer+0x4c>
		sb->first %=3;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <update_sensor_buffer+0x104>)
 80011bc:	fba3 2301 	umull	r2, r3, r3, r1
 80011c0:	085a      	lsrs	r2, r3, #1
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	1aca      	subs	r2, r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
//	sb->first %=3;
	sb->sensor_buffer[sb->last++] = sd;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80011d6:	1c51      	adds	r1, r2, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	461d      	mov	r5, r3
 80011ec:	f107 041c 	add.w	r4, r7, #28
 80011f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	602b      	str	r3, [r5, #0]
	if (sb->last==4) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001202:	2b04      	cmp	r3, #4
 8001204:	d104      	bne.n	8001210 <update_sensor_buffer+0x8c>
		sb->last =0;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800120e:	e012      	b.n	8001236 <update_sensor_buffer+0xb2>
	}
	else if (sb->last>4) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	2b04      	cmp	r3, #4
 8001218:	d90d      	bls.n	8001236 <update_sensor_buffer+0xb2>
		sb->last %=3;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <update_sensor_buffer+0x104>)
 8001222:	fba3 2301 	umull	r2, r3, r3, r1
 8001226:	085a      	lsrs	r2, r3, #1
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	1aca      	subs	r2, r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
//	sb->count = (sb->count<(uint32_t)SENSORBUFFERSIZE) ? sb->count+1 : sb->count;
	if (sb->count<4) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800123c:	2b03      	cmp	r3, #3
 800123e:	d806      	bhi.n	800124e <update_sensor_buffer+0xca>
		sb->count++;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
//	if (sb->count==4 && sb->last!=3) {
//
//		sb->first++;
//	}

	if (sb->count==4 ) {
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001254:	2b04      	cmp	r3, #4
 8001256:	d110      	bne.n	800127a <update_sensor_buffer+0xf6>
		if (sb->last==3) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125e:	2b03      	cmp	r3, #3
 8001260:	d104      	bne.n	800126c <update_sensor_buffer+0xe8>
			sb->first=0;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
//			sb->last=0;
//		}
//	}

//	sb->first = (sb->count==4 && sb->last!=4) ? sb->first+1 : sb->first;
}
 800126a:	e006      	b.n	800127a <update_sensor_buffer+0xf6>
			sb->first++;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bcb0      	pop	{r4, r5, r7}
 8001282:	b004      	add	sp, #16
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	aaaaaaab 	.word	0xaaaaaaab

0800128c <sensor_buffer_front>:


sensorData sensor_buffer_front(volatile sensorData_buf* sb) {
 800128c:	b5b0      	push	{r4, r5, r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	if (sb->count--) {
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800129c:	1e59      	subs	r1, r3, #1
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d024      	beq.n	80012f2 <sensor_buffer_front+0x66>
		sb->first%=3;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <sensor_buffer_front+0xac>)
 80012b0:	fba3 2301 	umull	r2, r3, r3, r1
 80012b4:	085a      	lsrs	r2, r3, #1
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	1aca      	subs	r2, r1, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return sb->sensor_buffer[sb->first++];
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012ca:	1c51      	adds	r1, r2, #1
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	4604      	mov	r4, r0
 80012e2:	461d      	mov	r5, r3
 80012e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	6023      	str	r3, [r4, #0]
 80012f0:	e01e      	b.n	8001330 <sensor_buffer_front+0xa4>
	}
	sensorData obj = {.sensorName="",.sensorID=0,.timeStamp=HAL_GetTick(),.sensorVal=0};
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	751a      	strb	r2, [r3, #20]
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800130e:	f000 fdb1 	bl	8001e74 <HAL_GetTick>
 8001312:	4603      	mov	r3, r0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
 8001316:	2300      	movs	r3, #0
 8001318:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	    return obj;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	461d      	mov	r5, r3
 8001320:	f107 040c 	add.w	r4, r7, #12
 8001324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	602b      	str	r3, [r5, #0]
}
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bdb0      	pop	{r4, r5, r7, pc}
 8001338:	aaaaaaab 	.word	0xaaaaaaab

0800133c <extract_sensor_address>:

uint8_t extract_sensor_address(uint8_t sensor_msg) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]

    return sensor_msg>>4;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	b2db      	uxtb	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <extract_sensor_value>:

uint8_t extract_sensor_value(uint8_t sensor_msg) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
    uint8_t mask = (1<<4)-1;
 8001362:	230f      	movs	r3, #15
 8001364:	73fb      	strb	r3, [r7, #15]
    return sensor_msg&mask;
 8001366:	79fa      	ldrb	r2, [r7, #7]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	4013      	ands	r3, r2
 800136c:	b2db      	uxtb	r3, r3
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <init_spi>:
extern volatile sensorData_buf sensorDataBuf;
extern uint8_t extract_sensor_address(uint8_t sensor_msg);
extern uint8_t extract_sensor_value(uint8_t sensor_msg);
extern osSemaphoreId bufsemHandle;

void init_spi(spi_* s) {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	s->reset=resetSPI;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <init_spi+0x28>)
 8001388:	609a      	str	r2, [r3, #8]
	s->spi_read=ReadPeripheral;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <init_spi+0x2c>)
 800138e:	605a      	str	r2, [r3, #4]
	s->rx_buf[0] = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]

}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	080013e7 	.word	0x080013e7
 80013a8:	080013ad 	.word	0x080013ad

080013ac <ReadPeripheral>:




HAL_StatusTypeDef ReadPeripheral(uint8_t addr, uint8_t *buffer_rx,SPI_HandleTypeDef* hspi1) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef hal_status;
	uint8_t buffer_tx[1] = {addr};
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	753b      	strb	r3, [r7, #20]

	hal_status = HAL_SPI_TransmitReceive_IT(hspi1, buffer_tx, buffer_rx, 1);
 80013be:	f107 0114 	add.w	r1, r7, #20
 80013c2:	2301      	movs	r3, #1
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f004 f81a 	bl	8005400 <HAL_SPI_TransmitReceive_IT>
 80013cc:	4603      	mov	r3, r0
 80013ce:	75fb      	strb	r3, [r7, #23]

	if (hal_status!=HAL_OK) {
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <ReadPeripheral+0x30>
		resetSPI(hspi1);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f805 	bl	80013e6 <resetSPI>
	}

	return hal_status;
 80013dc:	7dfb      	ldrb	r3, [r7, #23]

}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <resetSPI>:



void resetSPI(SPI_HandleTypeDef* ht_spi) {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	HAL_SPI_DeInit(ht_spi);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f003 ffdd 	bl	80053ae <HAL_SPI_DeInit>
	HAL_SPI_Init(ht_spi);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f003 ff2f 	bl	8005258 <HAL_SPI_Init>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	b095      	sub	sp, #84	; 0x54
 8001408:	af06      	add	r7, sp, #24
 800140a:	6078      	str	r0, [r7, #4]
	success=1;
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_SPI_TxRxCpltCallback+0xc4>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]

	uint8_t sensor_val =  extract_sensor_value(spi_obj.rx_buf[0]);
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <HAL_SPI_TxRxCpltCallback+0xc8>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff9e 	bl	8001358 <extract_sensor_value>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t sensor_addr = extract_sensor_address(spi_obj.rx_buf[0]);
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <HAL_SPI_TxRxCpltCallback+0xc8>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff88 	bl	800133c <extract_sensor_address>
 800142c:	4603      	mov	r3, r0
 800142e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	if (sensor_addr==IRSENSOR1) {
 8001432:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001436:	2b02      	cmp	r3, #2
 8001438:	d132      	bne.n	80014a0 <HAL_SPI_TxRxCpltCallback+0x9c>
//		const char* sensor_name = IRSENSOR1NAME;
		sensorData sensorDataObj1;
		init_sensor_data_obj((uint8_t*)IRSENSOR1NAME, sensor_addr, sensor_val, &sensorDataObj1);
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001442:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8001446:	4822      	ldr	r0, [pc, #136]	; (80014d0 <HAL_SPI_TxRxCpltCallback+0xcc>)
 8001448:	f7ff fe56 	bl	80010f8 <init_sensor_data_obj>

		int txStatus = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
		BaseType_t xHigherPriorityTaskWoken;
		sensorDataBuf.update(&sensorDataBuf, sensorDataObj1);
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_SPI_TxRxCpltCallback+0xd0>)
 8001452:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8001456:	466d      	mov	r5, sp
 8001458:	f107 0414 	add.w	r4, r7, #20
 800145c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001460:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001464:	e885 0003 	stmia.w	r5, {r0, r1}
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146e:	4819      	ldr	r0, [pc, #100]	; (80014d4 <HAL_SPI_TxRxCpltCallback+0xd0>)
 8001470:	47b0      	blx	r6
		txStatus = xSemaphoreGiveFromISR(bufsemHandle, &xHigherPriorityTaskWoken);
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_SPI_TxRxCpltCallback+0xd4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f007 fbdb 	bl	8008c38 <xQueueGiveFromISR>
 8001482:	6338      	str	r0, [r7, #48]	; 0x30
		 if (pdPASS == txStatus) {
 8001484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10a      	bne.n	80014a0 <HAL_SPI_TxRxCpltCallback+0x9c>
		      portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <HAL_SPI_TxRxCpltCallback+0x9c>
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_SPI_TxRxCpltCallback+0xd8>)
 8001492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f3bf 8f4f 	dsb	sy
 800149c:	f3bf 8f6f 	isb	sy
//		osDelay(5);
	}



	if (sensor_val==1) {
 80014a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_SPI_TxRxCpltCallback+0xb0>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2101      	movs	r1, #1
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <HAL_SPI_TxRxCpltCallback+0xdc>)
 80014ae:	f002 fbc9 	bl	8003c44 <HAL_GPIO_WritePin>

	else {
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	}

}
 80014b2:	e004      	b.n	80014be <HAL_SPI_TxRxCpltCallback+0xba>
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2101      	movs	r1, #1
 80014b8:	4809      	ldr	r0, [pc, #36]	; (80014e0 <HAL_SPI_TxRxCpltCallback+0xdc>)
 80014ba:	f002 fbc3 	bl	8003c44 <HAL_GPIO_WritePin>
}
 80014be:	bf00      	nop
 80014c0:	373c      	adds	r7, #60	; 0x3c
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200019d8 	.word	0x200019d8
 80014cc:	200019dc 	.word	0x200019dc
 80014d0:	0801ea30 	.word	0x0801ea30
 80014d4:	20001934 	.word	0x20001934
 80014d8:	2000190c 	.word	0x2000190c
 80014dc:	e000ed04 	.word	0xe000ed04
 80014e0:	40020400 	.word	0x40020400

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_MspInit+0x4c>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	210f      	movs	r1, #15
 800151e:	f06f 0001 	mvn.w	r0, #1
 8001522:	f000 fdb3 	bl	800208c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a29      	ldr	r2, [pc, #164]	; (80015f8 <HAL_SPI_MspInit+0xc4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d14b      	bne.n	80015ee <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 800155c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a22      	ldr	r2, [pc, #136]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_SPI_MspInit+0xc8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800159e:	2360      	movs	r3, #96	; 0x60
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ae:	2305      	movs	r3, #5
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <HAL_SPI_MspInit+0xcc>)
 80015ba:	f002 f88b 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ce:	2305      	movs	r3, #5
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <HAL_SPI_MspInit+0xd0>)
 80015da:	f002 f87b 	bl	80036d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2105      	movs	r1, #5
 80015e2:	2023      	movs	r0, #35	; 0x23
 80015e4:	f000 fd52 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015e8:	2023      	movs	r0, #35	; 0x23
 80015ea:	f000 fd6b 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020c00 	.word	0x40020c00

08001608 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_SPI_MspDeInit+0x3c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d110      	bne.n	800163c <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_SPI_MspDeInit+0x40>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_SPI_MspDeInit+0x40>)
 8001620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 8001626:	2160      	movs	r1, #96	; 0x60
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_SPI_MspDeInit+0x44>)
 800162a:	f002 f9ff 	bl	8003a2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7);
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <HAL_SPI_MspDeInit+0x48>)
 8001632:	f002 f9fb 	bl	8003a2c <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001636:	2023      	movs	r0, #35	; 0x23
 8001638:	f000 fd52 	bl	80020e0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013000 	.word	0x40013000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020c00 	.word	0x40020c00

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0ae      	sub	sp, #184	; 0xb8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2290      	movs	r2, #144	; 0x90
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f01c f823 	bl	801d6c0 <memset>
  if(huart->Instance==USART3)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_UART_MspInit+0xb4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13c      	bne.n	80016fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001688:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800168a:	2300      	movs	r3, #0
 800168c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4618      	mov	r0, r3
 8001694:	f003 f9b8 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800169e:	f7ff fc6b 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_UART_MspInit+0xb8>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_UART_MspInit+0xb8>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_UART_MspInit+0xb8>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_UART_MspInit+0xb8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <HAL_UART_MspInit+0xb8>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_UART_MspInit+0xb8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0xbc>)
 80016fa:	f001 ffeb 	bl	80036d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	37b8      	adds	r7, #184	; 0xb8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004800 	.word	0x40004800
 800170c:	40023800 	.word	0x40023800
 8001710:	40020c00 	.word	0x40020c00

08001714 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0ae      	sub	sp, #184	; 0xb8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2290      	movs	r2, #144	; 0x90
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f01b ffc3 	bl	801d6c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001742:	d159      	bne.n	80017f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001744:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001748:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4618      	mov	r0, r3
 8001756:	f003 f957 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001760:	f7ff fc0a 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_PCD_MspInit+0xec>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4a25      	ldr	r2, [pc, #148]	; (8001800 <HAL_PCD_MspInit+0xec>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_PCD_MspInit+0xec>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800177c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001796:	230a      	movs	r3, #10
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <HAL_PCD_MspInit+0xf0>)
 80017a4:	f001 ff96 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4810      	ldr	r0, [pc, #64]	; (8001804 <HAL_PCD_MspInit+0xf0>)
 80017c4:	f001 ff86 	bl	80036d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d2:	6353      	str	r3, [r2, #52]	; 0x34
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	6453      	str	r3, [r2, #68]	; 0x44
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_PCD_MspInit+0xec>)
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	37b8      	adds	r7, #184	; 0xb8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	; 0x38
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <HAL_InitTick+0xe0>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <HAL_InitTick+0xe0>)
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	6413      	str	r3, [r2, #64]	; 0x40
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_InitTick+0xe0>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001830:	f107 0210 	add.w	r2, r7, #16
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f003 f8b2 	bl	80049a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800184a:	f003 f883 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 800184e:	6378      	str	r0, [r7, #52]	; 0x34
 8001850:	e004      	b.n	800185c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001852:	f003 f87f 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8001856:	4603      	mov	r3, r0
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185e:	4a23      	ldr	r2, [pc, #140]	; (80018ec <HAL_InitTick+0xe4>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	0c9b      	lsrs	r3, r3, #18
 8001866:	3b01      	subs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_InitTick+0xe8>)
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <HAL_InitTick+0xec>)
 800186e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_InitTick+0xe8>)
 8001872:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001876:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_InitTick+0xe8>)
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_InitTick+0xe8>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_InitTick+0xe8>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_InitTick+0xe8>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001890:	4817      	ldr	r0, [pc, #92]	; (80018f0 <HAL_InitTick+0xe8>)
 8001892:	f004 fa63 	bl	8005d5c <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800189c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11b      	bne.n	80018dc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018a4:	4812      	ldr	r0, [pc, #72]	; (80018f0 <HAL_InitTick+0xe8>)
 80018a6:	f004 fabb 	bl	8005e20 <HAL_TIM_Base_Start_IT>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d111      	bne.n	80018dc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018b8:	2036      	movs	r0, #54	; 0x36
 80018ba:	f000 fc03 	bl	80020c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d808      	bhi.n	80018d6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	2036      	movs	r0, #54	; 0x36
 80018ca:	f000 fbdf 	bl	800208c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_InitTick+0xf0>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e002      	b.n	80018dc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3738      	adds	r7, #56	; 0x38
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	200019e8 	.word	0x200019e8
 80018f4:	40001000 	.word	0x40001000
 80018f8:	20000004 	.word	0x20000004

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <NMI_Handler+0x4>

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <SPI1_IRQHandler+0x10>)
 800192e:	f003 fe17 	bl	8005560 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20001314 	.word	0x20001314

0800193c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <TIM6_DAC_IRQHandler+0x10>)
 8001942:	f004 fae5 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200019e8 	.word	0x200019e8

08001950 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <ETH_IRQHandler+0x10>)
 8001956:	f000 ffe9 	bl	800292c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000641c 	.word	0x2000641c

08001964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_kill>:

int _kill(int pid, int sig)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <_kill+0x20>)
 8001980:	2216      	movs	r2, #22
 8001982:	601a      	str	r2, [r3, #0]
  return -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	20011524 	.word	0x20011524

08001998 <_exit>:

void _exit (int status)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ffe5 	bl	8001974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019aa:	e7fe      	b.n	80019aa <_exit+0x12>

080019ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e00a      	b.n	80019d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019be:	f3af 8000 	nop.w
 80019c2:	4601      	mov	r1, r0
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dbf0      	blt.n	80019be <_read+0x12>
  }

  return len;
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e009      	b.n	8001a0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf1      	blt.n	80019f8 <_write+0x12>
  }
  return len;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_close>:

int _close(int file)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a46:	605a      	str	r2, [r3, #4]
  return 0;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_isatty>:

int _isatty(int file)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d205      	bcs.n	8001ac4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <_sbrk+0x6c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a06      	ldr	r2, [pc, #24]	; (8001aec <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20080000 	.word	0x20080000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20001a34 	.word	0x20001a34
 8001af0:	20011538 	.word	0x20011538
 8001af4:	20011524 	.word	0x20011524

08001af8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b46:	f7ff ffd7 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f01b fd77 	bl	801d63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7fe ff79 	bl	8000a44 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001b60:	08022598 	.word	0x08022598
  ldr r2, =_sbss
 8001b64:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b68:	20011534 	.word	0x20011534

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>

08001b6e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <LAN8742_RegisterBusIO+0x28>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <LAN8742_RegisterBusIO+0x28>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <LAN8742_RegisterBusIO+0x28>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9a:	e014      	b.n	8001bc6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d17c      	bne.n	8001cec <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e01c      	b.n	8001c46 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f107 0208 	add.w	r2, r7, #8
 8001c14:	2112      	movs	r1, #18
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	4798      	blx	r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	da03      	bge.n	8001c28 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001c20:	f06f 0304 	mvn.w	r3, #4
 8001c24:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001c26:	e00b      	b.n	8001c40 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d105      	bne.n	8001c40 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
         break;
 8001c3e:	e005      	b.n	8001c4c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b1f      	cmp	r3, #31
 8001c4a:	d9df      	bls.n	8001c0c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b1f      	cmp	r3, #31
 8001c52:	d902      	bls.n	8001c5a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001c54:	f06f 0302 	mvn.w	r3, #2
 8001c58:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d145      	bne.n	8001cec <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6810      	ldr	r0, [r2, #0]
 8001c68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4798      	blx	r3
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db37      	blt.n	8001ce6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6810      	ldr	r0, [r2, #0]
 8001c7e:	f107 0208 	add.w	r2, r7, #8
 8001c82:	2100      	movs	r1, #0
 8001c84:	4798      	blx	r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db28      	blt.n	8001cde <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4798      	blx	r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001c96:	e01c      	b.n	8001cd2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4798      	blx	r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001caa:	d80e      	bhi.n	8001cca <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6810      	ldr	r0, [r2, #0]
 8001cb4:	f107 0208 	add.w	r2, r7, #8
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4798      	blx	r3
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da07      	bge.n	8001cd2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001cc2:	f06f 0304 	mvn.w	r3, #4
 8001cc6:	613b      	str	r3, [r7, #16]
                 break;
 8001cc8:	e010      	b.n	8001cec <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001cca:	f06f 0301 	mvn.w	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
               break;
 8001cd0:	e00c      	b.n	8001cec <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1dd      	bne.n	8001c98 <LAN8742_Init+0xc6>
 8001cdc:	e006      	b.n	8001cec <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001cde:	f06f 0304 	mvn.w	r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e002      	b.n	8001cec <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001ce6:	f06f 0303 	mvn.w	r3, #3
 8001cea:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d112      	bne.n	8001d18 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4798      	blx	r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001cfc:	bf00      	nop
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4798      	blx	r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d10:	d9f5      	bls.n	8001cfe <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001d18:	693b      	ldr	r3, [r7, #16]
 }
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6810      	ldr	r0, [r2, #0]
 8001d36:	f107 020c 	add.w	r2, r7, #12
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4798      	blx	r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da02      	bge.n	8001d4a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d44:	f06f 0304 	mvn.w	r3, #4
 8001d48:	e06e      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6810      	ldr	r0, [r2, #0]
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	2101      	movs	r1, #1
 8001d58:	4798      	blx	r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da02      	bge.n	8001d66 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d60:	f06f 0304 	mvn.w	r3, #4
 8001d64:	e060      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001d70:	2301      	movs	r3, #1
 8001d72:	e059      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6810      	ldr	r0, [r2, #0]
 8001d7c:	f107 020c 	add.w	r2, r7, #12
 8001d80:	2100      	movs	r1, #0
 8001d82:	4798      	blx	r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da02      	bge.n	8001d90 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d8a:	f06f 0304 	mvn.w	r3, #4
 8001d8e:	e04b      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d11b      	bne.n	8001dd2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <LAN8742_GetLinkState+0x90>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001dae:	2302      	movs	r3, #2
 8001db0:	e03a      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e033      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e02c      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e02a      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6810      	ldr	r0, [r2, #0]
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	211f      	movs	r1, #31
 8001de0:	4798      	blx	r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da02      	bge.n	8001dee <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001de8:	f06f 0304 	mvn.w	r3, #4
 8001dec:	e01c      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001df8:	2306      	movs	r3, #6
 8001dfa:	e015      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 031c 	and.w	r3, r3, #28
 8001e02:	2b18      	cmp	r3, #24
 8001e04:	d101      	bne.n	8001e0a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e06:	2302      	movs	r3, #2
 8001e08:	e00e      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 031c 	and.w	r3, r3, #28
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e007      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 031c 	and.w	r3, r3, #28
 8001e1e:	2b14      	cmp	r3, #20
 8001e20:	d101      	bne.n	8001e26 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e22:	2304      	movs	r3, #4
 8001e24:	e000      	b.n	8001e28 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e26:	2305      	movs	r3, #5
    }				
  }
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 f91e 	bl	8002076 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f7ff fce4 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fb50 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20001a38 	.word	0x20001a38

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20001a38 	.word	0x20001a38

08001e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff ffee 	bl	8001e74 <HAL_GetTick>
 8001e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea4:	d005      	beq.n	8001eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_Delay+0x44>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb2:	bf00      	nop
 8001eb4:	f7ff ffde 	bl	8001e74 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d8f7      	bhi.n	8001eb4 <HAL_Delay+0x28>
  {
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <__NVIC_SetPriorityGrouping>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x40>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00
 8001f18:	05fa0000 	.word	0x05fa0000

08001f1c <__NVIC_GetPriorityGrouping>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <__NVIC_EnableIRQ+0x38>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_DisableIRQ>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db12      	blt.n	8001fac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <__NVIC_DisableIRQ+0x44>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	3320      	adds	r3, #32
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fa0:	f3bf 8f4f 	dsb	sy
}
 8001fa4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fa6:	f3bf 8f6f 	isb	sy
}
 8001faa:	bf00      	nop
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff28 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209e:	f7ff ff3d 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 80020a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	6978      	ldr	r0, [r7, #20]
 80020aa:	f7ff ffb1 	bl	8002010 <NVIC_EncodePriority>
 80020ae:	4602      	mov	r2, r0
 80020b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff80 	bl	8001fbc <__NVIC_SetPriority>
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff30 	bl	8001f38 <__NVIC_EnableIRQ>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff40 	bl	8001f74 <__NVIC_DisableIRQ>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002100:	f3bf 8f5f 	dmb	sy
}
 8002104:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_MPU_Disable+0x28>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	4a06      	ldr	r2, [pc, #24]	; (8002124 <HAL_MPU_Disable+0x28>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_MPU_Disable+0x2c>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00
 8002128:	e000ed90 	.word	0xe000ed90

0800212c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002134:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_MPU_Enable+0x38>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_MPU_Enable+0x3c>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_MPU_Enable+0x3c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800214a:	f3bf 8f4f 	dsb	sy
}
 800214e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002150:	f3bf 8f6f 	isb	sy
}
 8002154:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed90 	.word	0xe000ed90
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	785a      	ldrb	r2, [r3, #1]
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_MPU_ConfigRegion+0x84>)
 800217a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d029      	beq.n	80021d8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_MPU_ConfigRegion+0x84>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7b1b      	ldrb	r3, [r3, #12]
 8002190:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7adb      	ldrb	r3, [r3, #11]
 8002196:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002198:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7a9b      	ldrb	r3, [r3, #10]
 800219e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7b5b      	ldrb	r3, [r3, #13]
 80021a6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7b9b      	ldrb	r3, [r3, #14]
 80021ae:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7bdb      	ldrb	r3, [r3, #15]
 80021b6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7a5b      	ldrb	r3, [r3, #9]
 80021be:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7a1b      	ldrb	r3, [r3, #8]
 80021c6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021c8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021d2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021d4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80021d6:	e005      	b.n	80021e4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_MPU_ConfigRegion+0x84>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_MPU_ConfigRegion+0x84>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed90 	.word	0xe000ed90

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00c      	b.n	800222c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06a      	b.n	8002320 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2223      	movs	r2, #35	; 0x23
 8002258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f005 fbd1 	bl	8007a04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_ETH_Init+0xf0>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_ETH_Init+0xf0>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <HAL_ETH_Init+0xf0>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800227a:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_ETH_Init+0xf4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a2b      	ldr	r2, [pc, #172]	; (800232c <HAL_ETH_Init+0xf4>)
 8002280:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002284:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_ETH_Init+0xf4>)
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_ETH_Init+0xf4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_ETH_Init+0xf4>)
 8002296:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b0:	f7ff fde0 	bl	8001e74 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022b6:	e011      	b.n	80022dc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80022b8:	f7ff fddc 	bl	8001e74 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022c6:	d909      	bls.n	80022dc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2204      	movs	r2, #4
 80022cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	22e0      	movs	r2, #224	; 0xe0
 80022d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e021      	b.n	8002320 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1e4      	bne.n	80022b8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 ff4c 	bl	800318c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fff3 	bl	80032e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f001 f849 	bl	8003392 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	461a      	mov	r2, r3
 8002306:	2100      	movs	r1, #0
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 ffb1 	bl	8003270 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2210      	movs	r2, #16
 800231a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	40013800 	.word	0x40013800

08002330 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233e:	2b10      	cmp	r3, #16
 8002340:	d17b      	bne.n	800243a <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2223      	movs	r2, #35	; 0x23
 8002346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_ETH_Start_IT+0x114>)
 800236e:	430b      	orrs	r3, r1
 8002370:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002384:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2204      	movs	r2, #4
 800238c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9fc 	bl	800278c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0208 	orr.w	r2, r2, #8
 80023a2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff fd6d 	bl	8001e8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff fd5a 	bl	8001e8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fd74 	bl	8002ece <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023fc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002414:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241e:	69d9      	ldr	r1, [r3, #28]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_ETH_Start_IT+0x118>)
 8002426:	430b      	orrs	r3, r1
 8002428:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800242c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2223      	movs	r2, #35	; 0x23
 8002432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	00020060 	.word	0x00020060
 8002448:	0001a0c1 	.word	0x0001a0c1

0800244c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245a:	2b23      	cmp	r3, #35	; 0x23
 800245c:	d16e      	bne.n	800253c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2223      	movs	r2, #35	; 0x23
 8002462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_ETH_Stop_IT+0xfc>)
 8002476:	400b      	ands	r3, r1
 8002478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002494:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f023 0302 	bic.w	r3, r3, #2
 80024a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ac:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0204 	bic.w	r2, r2, #4
 80024bc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7ff fce0 	bl	8001e8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fcfa 	bl	8002ece <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff fcca 	bl	8001e8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00e      	b.n	8002524 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	3212      	adds	r2, #18
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d9ed      	bls.n	8002506 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2210      	movs	r2, #16
 8002534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	fffe5f3e 	.word	0xfffe5f3e

0800254c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e045      	b.n	80025fc <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002576:	2b23      	cmp	r3, #35	; 0x23
 8002578:	d13f      	bne.n	80025fa <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002582:	2201      	movs	r2, #1
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 ff70 	bl	800346c <ETH_Prepare_Tx_Descriptors>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e02a      	b.n	80025fc <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80025a6:	f3bf 8f4f 	dsb	sy
}
 80025aa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d904      	bls.n	80025c8 <HAL_ETH_Transmit_IT+0x7c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	1f1a      	subs	r2, r3, #4
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	461a      	mov	r2, r3
 80025e4:	2304      	movs	r3, #4
 80025e6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f0:	461a      	mov	r2, r3
 80025f2:	2300      	movs	r3, #0
 80025f4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0a8      	b.n	8002782 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002636:	2b23      	cmp	r3, #35	; 0x23
 8002638:	d001      	beq.n	800263e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0a1      	b.n	8002782 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	3212      	adds	r2, #18
 800264a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002654:	f1c3 0304 	rsb	r3, r3, #4
 8002658:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800265a:	e06a      	b.n	8002732 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <HAL_ETH_ReadData+0x88>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d040      	beq.n	800270e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80026c0:	3b04      	subs	r3, #4
 80026c2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026e8:	461a      	mov	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f005 fb55 	bl	8007d9c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	441a      	add	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d902      	bls.n	8002720 <HAL_ETH_ReadData+0x11c>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b04      	subs	r3, #4
 800271e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	3212      	adds	r2, #18
 8002726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db06      	blt.n	8002748 <HAL_ETH_ReadData+0x144>
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d202      	bcs.n	8002748 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d089      	beq.n	800265c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	441a      	add	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f815 	bl	800278c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002798:	2301      	movs	r3, #1
 800279a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	3212      	adds	r2, #18
 80027a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80027b4:	e040      	b.n	8002838 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d112      	bne.n	80027e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	4618      	mov	r0, r3
 80027c4:	f005 faba 	bl	8007d3c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	74fb      	strb	r3, [r7, #19]
 80027d2:	e007      	b.n	80027e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	461a      	mov	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d026      	beq.n	8002838 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <ETH_UpdateDescriptor+0xe4>)
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	e003      	b.n	8002802 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002800:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8002802:	f3bf 8f5f 	dmb	sy
}
 8002806:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3301      	adds	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d902      	bls.n	8002826 <ETH_UpdateDescriptor+0x9a>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	3b04      	subs	r3, #4
 8002824:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	3212      	adds	r2, #18
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	617b      	str	r3, [r7, #20]
      desccount--;
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	3b01      	subs	r3, #1
 8002836:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <ETH_UpdateDescriptor+0xb8>
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1b8      	bne.n	80027b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	429a      	cmp	r2, r3
 800284c:	d00c      	beq.n	8002868 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002856:	461a      	mov	r2, r3
 8002858:	2300      	movs	r3, #0
 800285a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002868:	bf00      	nop
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	80004600 	.word	0x80004600

08002874 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3318      	adds	r3, #24
 8002880:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002892:	e03f      	b.n	8002914 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002894:	2301      	movs	r3, #1
 8002896:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3b01      	subs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	3304      	adds	r3, #4
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	3301      	adds	r3, #1
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80028bc:	7bbb      	ldrb	r3, [r7, #14]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68d9      	ldr	r1, [r3, #12]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db1b      	blt.n	8002910 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	3304      	adds	r3, #4
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f005 fa9b 	bl	8007e20 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	3304      	adds	r3, #4
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	2200      	movs	r2, #0
 80028f6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c
 800290e:	e001      	b.n	8002914 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_ETH_ReleaseTxPacket+0xac>
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1b9      	bne.n	8002894 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d112      	bne.n	800296c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d109      	bne.n	800296c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002960:	461a      	mov	r2, r3
 8002962:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_ETH_IRQHandler+0x178>)
 8002964:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f004 fdb0 	bl	80074cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d113      	bne.n	80029a6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d10a      	bne.n	80029a6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002998:	461a      	mov	r2, r3
 800299a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800299e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f004 fda3 	bl	80074ec <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b8:	d14c      	bne.n	8002a54 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029cc:	d142      	bne.n	8002a54 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f043 0208 	orr.w	r2, r3, #8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f0:	d11a      	bne.n	8002a28 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_ETH_IRQHandler+0x17c>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002a18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a1c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	22e0      	movs	r2, #224	; 0xe0
 8002a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002a26:	e012      	b.n	8002a4e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	f248 6380 	movw	r3, #34432	; 0x8680
 8002a36:	4013      	ands	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a46:	461a      	mov	r2, r3
 8002a48:	f248 6380 	movw	r3, #34432	; 0x8680
 8002a4c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f004 fd5c 	bl	800750c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d10e      	bne.n	8002a80 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f81c 	bl	8002ab0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_ETH_IRQHandler+0x180>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_ETH_IRQHandler+0x180>)
 8002a8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a92:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f815 	bl	8002ac4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	00010040 	.word	0x00010040
 8002aa8:	007e2000 	.word	0x007e2000
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 031c 	and.w	r3, r3, #28
 8002af4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	02db      	lsls	r3, r3, #11
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0302 	bic.w	r3, r3, #2
 8002b16:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002b28:	f7ff f9a4 	bl	8001e74 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b2e:	e00d      	b.n	8002b4c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002b30:	f7ff f9a0 	bl	8001e74 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3e:	d301      	bcc.n	8002b44 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e010      	b.n	8002b66 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ec      	bne.n	8002b30 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 031c 	and.w	r3, r3, #28
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	02db      	lsls	r3, r3, #11
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	019b      	lsls	r3, r3, #6
 8002b9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc8:	f7ff f954 	bl	8001e74 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bce:	e00d      	b.n	8002bec <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002bd0:	f7ff f950 	bl	8001e74 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d301      	bcc.n	8002be4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e009      	b.n	8002bf8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ec      	bne.n	8002bd0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0d9      	b.n	8002dc8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e00b      	b.n	8002e00 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d105      	bne.n	8002dfe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002df2:	6839      	ldr	r1, [r7, #0]
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f88f 	bl	8002f18 <ETH_SetMACConfig>

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 031c 	bic.w	r3, r3, #28
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e20:	f001 fd8c 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8002e24:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d908      	bls.n	8002e40 <HAL_ETH_SetMDIOClockRange+0x38>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d804      	bhi.n	8002e40 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e027      	b.n	8002e90 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d908      	bls.n	8002e5a <HAL_ETH_SetMDIOClockRange+0x52>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d204      	bcs.n	8002e5a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f043 030c 	orr.w	r3, r3, #12
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e01a      	b.n	8002e90 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d303      	bcc.n	8002e6a <HAL_ETH_SetMDIOClockRange+0x62>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d911      	bls.n	8002e8e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d908      	bls.n	8002e84 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d804      	bhi.n	8002e84 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e005      	b.n	8002e90 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f043 0310 	orr.w	r3, r3, #16
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e000      	b.n	8002e90 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e8e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	611a      	str	r2, [r3, #16]
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	01312cff 	.word	0x01312cff
 8002ea4:	02160ebf 	.word	0x02160ebf
 8002ea8:	03938700 	.word	0x03938700
 8002eac:	05f5e0ff 	.word	0x05f5e0ff
 8002eb0:	08f0d17f 	.word	0x08f0d17f

08002eb4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ef0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fe ffc4 	bl	8001e8c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f0e:	6193      	str	r3, [r2, #24]
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4b51      	ldr	r3, [pc, #324]	; (8003074 <ETH_SetMACConfig+0x15c>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	7c1b      	ldrb	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <ETH_SetMACConfig+0x28>
 8002f3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f3e:	e000      	b.n	8002f42 <ETH_SetMACConfig+0x2a>
 8002f40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7c5b      	ldrb	r3, [r3, #17]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <ETH_SetMACConfig+0x38>
 8002f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f4e:	e000      	b.n	8002f52 <ETH_SetMACConfig+0x3a>
 8002f50:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	7fdb      	ldrb	r3, [r3, #31]
 8002f5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	7f92      	ldrb	r2, [r2, #30]
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	d102      	bne.n	8002f76 <ETH_SetMACConfig+0x5e>
 8002f70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f74:	e000      	b.n	8002f78 <ETH_SetMACConfig+0x60>
 8002f76:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	7f1b      	ldrb	r3, [r3, #28]
 8002f7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	791b      	ldrb	r3, [r3, #4]
 8002f8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f96:	2a00      	cmp	r2, #0
 8002f98:	d102      	bne.n	8002fa0 <ETH_SetMACConfig+0x88>
 8002f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9e:	e000      	b.n	8002fa2 <ETH_SetMACConfig+0x8a>
 8002fa0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002fa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	7bdb      	ldrb	r3, [r3, #15]
 8002fa8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002faa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fb8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f7fe ff5a 	bl	8001e8c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002fee:	4013      	ands	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	d101      	bne.n	8003006 <ETH_SetMACConfig+0xee>
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	e000      	b.n	8003008 <ETH_SetMACConfig+0xf0>
 8003006:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003008:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800300e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003016:	2a01      	cmp	r2, #1
 8003018:	d101      	bne.n	800301e <ETH_SetMACConfig+0x106>
 800301a:	2208      	movs	r2, #8
 800301c:	e000      	b.n	8003020 <ETH_SetMACConfig+0x108>
 800301e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003020:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003028:	2a01      	cmp	r2, #1
 800302a:	d101      	bne.n	8003030 <ETH_SetMACConfig+0x118>
 800302c:	2204      	movs	r2, #4
 800302e:	e000      	b.n	8003032 <ETH_SetMACConfig+0x11a>
 8003030:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800303a:	2a01      	cmp	r2, #1
 800303c:	d101      	bne.n	8003042 <ETH_SetMACConfig+0x12a>
 800303e:	2202      	movs	r2, #2
 8003040:	e000      	b.n	8003044 <ETH_SetMACConfig+0x12c>
 8003042:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003044:	4313      	orrs	r3, r2
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800305c:	2001      	movs	r0, #1
 800305e:	f7fe ff15 	bl	8001e8c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	619a      	str	r2, [r3, #24]
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	ff20810f 	.word	0xff20810f

08003078 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <ETH_SetDMAConfig+0x110>)
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	7b1b      	ldrb	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <ETH_SetDMAConfig+0x2c>
 800309e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030a2:	e000      	b.n	80030a6 <ETH_SetDMAConfig+0x2e>
 80030a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	7b5b      	ldrb	r3, [r3, #13]
 80030aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	7f52      	ldrb	r2, [r2, #29]
 80030b2:	2a00      	cmp	r2, #0
 80030b4:	d102      	bne.n	80030bc <ETH_SetDMAConfig+0x44>
 80030b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030ba:	e000      	b.n	80030be <ETH_SetDMAConfig+0x46>
 80030bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80030be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	7b9b      	ldrb	r3, [r3, #14]
 80030c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80030c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	7f1b      	ldrb	r3, [r3, #28]
 80030d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	7f9b      	ldrb	r3, [r3, #30]
 80030da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030ec:	4313      	orrs	r3, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fc:	461a      	mov	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800310e:	2001      	movs	r0, #1
 8003110:	f7fe febc 	bl	8001e8c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	791b      	ldrb	r3, [r3, #4]
 8003126:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800312c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003132:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003138:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003140:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003142:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800314a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003150:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800315a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800315e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800316c:	2001      	movs	r0, #1
 800316e:	f7fe fe8d 	bl	8001e8c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6013      	str	r3, [r2, #0]
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f8de3f23 	.word	0xf8de3f23

0800318c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b0a6      	sub	sp, #152	; 0x98
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031c8:	2300      	movs	r3, #0
 80031ca:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031f2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fe86 	bl	8002f18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800320c:	2301      	movs	r3, #1
 800320e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003210:	2301      	movs	r3, #1
 8003212:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800321a:	2301      	movs	r3, #1
 800321c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800322e:	2300      	movs	r3, #0
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003238:	2301      	movs	r3, #1
 800323a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800323c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003240:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003246:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800324c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003254:	2300      	movs	r3, #0
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800325c:	f107 0308 	add.w	r3, r7, #8
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff08 	bl	8003078 <ETH_SetDMAConfig>
}
 8003268:	bf00      	nop
 800326a:	3798      	adds	r7, #152	; 0x98
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3305      	adds	r3, #5
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	3204      	adds	r2, #4
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <ETH_MACAddressConfig+0x68>)
 8003292:	4413      	add	r3, r2
 8003294:	461a      	mov	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3303      	adds	r3, #3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	061a      	lsls	r2, r3, #24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3302      	adds	r3, #2
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3301      	adds	r3, #1
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	4313      	orrs	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <ETH_MACAddressConfig+0x6c>)
 80032c2:	4413      	add	r3, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	6013      	str	r3, [r2, #0]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40028040 	.word	0x40028040
 80032dc:	40028044 	.word	0x40028044

080032e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e03e      	b.n	800336c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68d9      	ldr	r1, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	3206      	adds	r2, #6
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d80c      	bhi.n	8003350 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68d9      	ldr	r1, [r3, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	e004      	b.n	800335a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3301      	adds	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d9bd      	bls.n	80032ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003384:	611a      	str	r2, [r3, #16]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e046      	b.n	800342e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6919      	ldr	r1, [r3, #16]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2200      	movs	r2, #0
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80033e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	3212      	adds	r2, #18
 80033fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d80c      	bhi.n	800341e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6919      	ldr	r1, [r3, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	e004      	b.n	8003428 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3301      	adds	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d9b5      	bls.n	80033a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345e:	60da      	str	r2, [r3, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800346c:	b480      	push	{r7}
 800346e:	b08d      	sub	sp, #52	; 0x34
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3318      	adds	r3, #24
 800347c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ae:	d007      	beq.n	80034c0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	3304      	adds	r3, #4
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0ff      	b.n	80036c4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	3301      	adds	r3, #1
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4b7d      	ldr	r3, [pc, #500]	; (80036d0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80034da:	4013      	ands	r3, r2
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	6852      	ldr	r2, [r2, #4]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	431a      	orrs	r2, r3
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	431a      	orrs	r2, r3
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003546:	f3bf 8f5f 	dmb	sy
}
 800354a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003558:	e082      	b.n	8003660 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e005      	b.n	8003586 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	3301      	adds	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	2b03      	cmp	r3, #3
 8003590:	d902      	bls.n	8003598 <ETH_Prepare_Tx_Descriptors+0x12c>
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	3b04      	subs	r3, #4
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ba:	d007      	beq.n	80035cc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	3304      	adds	r3, #4
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d029      	beq.n	8003620 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80035da:	2300      	movs	r3, #0
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	e019      	b.n	8003614 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80035e0:	f3bf 8f5f 	dmb	sy
}
 80035e4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	3301      	adds	r3, #1
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d902      	bls.n	8003604 <ETH_Prepare_Tx_Descriptors+0x198>
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	3b04      	subs	r3, #4
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	3301      	adds	r3, #1
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
 8003614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	429a      	cmp	r2, r3
 800361a:	d3e1      	bcc.n	80035e0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	e051      	b.n	80036c4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	3301      	adds	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800363c:	4013      	ands	r3, r2
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	6852      	ldr	r2, [r2, #4]
 8003642:	431a      	orrs	r2, r3
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	3301      	adds	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800364e:	f3bf 8f5f 	dmb	sy
}
 8003652:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f af78 	bne.w	800355a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e005      	b.n	800368a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369a:	6979      	ldr	r1, [r7, #20]
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	3304      	adds	r3, #4
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036aa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80036be:	b662      	cpsie	i
}
 80036c0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3734      	adds	r7, #52	; 0x34
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	ffffe000 	.word	0xffffe000

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e175      	b.n	80039e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	f040 8164 	bne.w	80039da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d005      	beq.n	800372a <HAL_GPIO_Init+0x56>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d130      	bne.n	800378c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	2203      	movs	r2, #3
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003760:	2201      	movs	r2, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 0201 	and.w	r2, r3, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b03      	cmp	r3, #3
 8003796:	d017      	beq.n	80037c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d123      	bne.n	800381c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	08da      	lsrs	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3208      	adds	r2, #8
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	220f      	movs	r2, #15
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80be 	beq.w	80039da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_GPIO_Init+0x324>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <HAL_GPIO_Init+0x324>)
 8003864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_GPIO_Init+0x324>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003876:	4a61      	ldr	r2, [pc, #388]	; (80039fc <HAL_GPIO_Init+0x328>)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_GPIO_Init+0x32c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d037      	beq.n	8003912 <HAL_GPIO_Init+0x23e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a57      	ldr	r2, [pc, #348]	; (8003a04 <HAL_GPIO_Init+0x330>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_GPIO_Init+0x23a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a56      	ldr	r2, [pc, #344]	; (8003a08 <HAL_GPIO_Init+0x334>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02b      	beq.n	800390a <HAL_GPIO_Init+0x236>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a55      	ldr	r2, [pc, #340]	; (8003a0c <HAL_GPIO_Init+0x338>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d025      	beq.n	8003906 <HAL_GPIO_Init+0x232>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a54      	ldr	r2, [pc, #336]	; (8003a10 <HAL_GPIO_Init+0x33c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <HAL_GPIO_Init+0x22e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a53      	ldr	r2, [pc, #332]	; (8003a14 <HAL_GPIO_Init+0x340>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d019      	beq.n	80038fe <HAL_GPIO_Init+0x22a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_GPIO_Init+0x344>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0x226>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a51      	ldr	r2, [pc, #324]	; (8003a1c <HAL_GPIO_Init+0x348>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00d      	beq.n	80038f6 <HAL_GPIO_Init+0x222>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a50      	ldr	r2, [pc, #320]	; (8003a20 <HAL_GPIO_Init+0x34c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x21e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4f      	ldr	r2, [pc, #316]	; (8003a24 <HAL_GPIO_Init+0x350>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_GPIO_Init+0x21a>
 80038ea:	2309      	movs	r3, #9
 80038ec:	e012      	b.n	8003914 <HAL_GPIO_Init+0x240>
 80038ee:	230a      	movs	r3, #10
 80038f0:	e010      	b.n	8003914 <HAL_GPIO_Init+0x240>
 80038f2:	2308      	movs	r3, #8
 80038f4:	e00e      	b.n	8003914 <HAL_GPIO_Init+0x240>
 80038f6:	2307      	movs	r3, #7
 80038f8:	e00c      	b.n	8003914 <HAL_GPIO_Init+0x240>
 80038fa:	2306      	movs	r3, #6
 80038fc:	e00a      	b.n	8003914 <HAL_GPIO_Init+0x240>
 80038fe:	2305      	movs	r3, #5
 8003900:	e008      	b.n	8003914 <HAL_GPIO_Init+0x240>
 8003902:	2304      	movs	r3, #4
 8003904:	e006      	b.n	8003914 <HAL_GPIO_Init+0x240>
 8003906:	2303      	movs	r3, #3
 8003908:	e004      	b.n	8003914 <HAL_GPIO_Init+0x240>
 800390a:	2302      	movs	r3, #2
 800390c:	e002      	b.n	8003914 <HAL_GPIO_Init+0x240>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_GPIO_Init+0x240>
 8003912:	2300      	movs	r3, #0
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	f002 0203 	and.w	r2, r2, #3
 800391a:	0092      	lsls	r2, r2, #2
 800391c:	4093      	lsls	r3, r2
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003924:	4935      	ldr	r1, [pc, #212]	; (80039fc <HAL_GPIO_Init+0x328>)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_GPIO_Init+0x354>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003956:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <HAL_GPIO_Init+0x354>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <HAL_GPIO_Init+0x354>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003980:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <HAL_GPIO_Init+0x354>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003986:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_GPIO_Init+0x354>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039aa:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <HAL_GPIO_Init+0x354>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b0:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_GPIO_Init+0x354>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <HAL_GPIO_Init+0x354>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3301      	adds	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	f67f ae86 	bls.w	80036f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40013800 	.word	0x40013800
 8003a00:	40020000 	.word	0x40020000
 8003a04:	40020400 	.word	0x40020400
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	40020c00 	.word	0x40020c00
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40021400 	.word	0x40021400
 8003a18:	40021800 	.word	0x40021800
 8003a1c:	40021c00 	.word	0x40021c00
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40022400 	.word	0x40022400
 8003a28:	40013c00 	.word	0x40013c00

08003a2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e0d9      	b.n	8003bfc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	f040 80c9 	bne.w	8003bf6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003a64:	4a6b      	ldr	r2, [pc, #428]	; (8003c14 <HAL_GPIO_DeInit+0x1e8>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_GPIO_DeInit+0x1ec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d037      	beq.n	8003afe <HAL_GPIO_DeInit+0xd2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a62      	ldr	r2, [pc, #392]	; (8003c1c <HAL_GPIO_DeInit+0x1f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_GPIO_DeInit+0xce>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a61      	ldr	r2, [pc, #388]	; (8003c20 <HAL_GPIO_DeInit+0x1f4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02b      	beq.n	8003af6 <HAL_GPIO_DeInit+0xca>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a60      	ldr	r2, [pc, #384]	; (8003c24 <HAL_GPIO_DeInit+0x1f8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d025      	beq.n	8003af2 <HAL_GPIO_DeInit+0xc6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a5f      	ldr	r2, [pc, #380]	; (8003c28 <HAL_GPIO_DeInit+0x1fc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01f      	beq.n	8003aee <HAL_GPIO_DeInit+0xc2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a5e      	ldr	r2, [pc, #376]	; (8003c2c <HAL_GPIO_DeInit+0x200>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d019      	beq.n	8003aea <HAL_GPIO_DeInit+0xbe>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a5d      	ldr	r2, [pc, #372]	; (8003c30 <HAL_GPIO_DeInit+0x204>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_GPIO_DeInit+0xba>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a5c      	ldr	r2, [pc, #368]	; (8003c34 <HAL_GPIO_DeInit+0x208>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_GPIO_DeInit+0xb6>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a5b      	ldr	r2, [pc, #364]	; (8003c38 <HAL_GPIO_DeInit+0x20c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_DeInit+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a5a      	ldr	r2, [pc, #360]	; (8003c3c <HAL_GPIO_DeInit+0x210>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_GPIO_DeInit+0xae>
 8003ad6:	2309      	movs	r3, #9
 8003ad8:	e012      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003ada:	230a      	movs	r3, #10
 8003adc:	e010      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	e00e      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003ae2:	2307      	movs	r3, #7
 8003ae4:	e00c      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003ae6:	2306      	movs	r3, #6
 8003ae8:	e00a      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e008      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003aee:	2304      	movs	r3, #4
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003af2:	2303      	movs	r3, #3
 8003af4:	e004      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e002      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_GPIO_DeInit+0xd4>
 8003afe:	2300      	movs	r3, #0
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	f002 0203 	and.w	r2, r2, #3
 8003b06:	0092      	lsls	r2, r2, #2
 8003b08:	4093      	lsls	r3, r2
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d132      	bne.n	8003b76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	4949      	ldr	r1, [pc, #292]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b1e:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	4946      	ldr	r1, [pc, #280]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b2c:	4b44      	ldr	r3, [pc, #272]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	4942      	ldr	r1, [pc, #264]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	493f      	ldr	r1, [pc, #252]	; (8003c40 <HAL_GPIO_DeInit+0x214>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003b58:	4a2e      	ldr	r2, [pc, #184]	; (8003c14 <HAL_GPIO_DeInit+0x1e8>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	43da      	mvns	r2, r3
 8003b68:	482a      	ldr	r0, [pc, #168]	; (8003c14 <HAL_GPIO_DeInit+0x1e8>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	400a      	ands	r2, r1
 8003b70:	3302      	adds	r3, #2
 8003b72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2103      	movs	r1, #3
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	401a      	ands	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	08da      	lsrs	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3208      	adds	r2, #8
 8003b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	08d2      	lsrs	r2, r2, #3
 8003bac:	4019      	ands	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	401a      	ands	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	2103      	movs	r1, #3
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	f67f af22 	bls.w	8003a48 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40013800 	.word	0x40013800
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40020c00 	.word	0x40020c00
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40021400 	.word	0x40021400
 8003c30:	40021800 	.word	0x40021800
 8003c34:	40021c00 	.word	0x40021c00
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	40022400 	.word	0x40022400
 8003c40:	40013c00 	.word	0x40013c00

08003c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c54:	787b      	ldrb	r3, [r7, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c60:	e003      	b.n	8003c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	619a      	str	r2, [r3, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c88:	887a      	ldrh	r2, [r7, #2]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	041a      	lsls	r2, r3, #16
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43d9      	mvns	r1, r3
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	400b      	ands	r3, r1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cac:	b08f      	sub	sp, #60	; 0x3c
 8003cae:	af0a      	add	r7, sp, #40	; 0x28
 8003cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e116      	b.n	8003eea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fd1c 	bl	8001714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 ffce 	bl	8006c9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	687e      	ldr	r6, [r7, #4]
 8003d08:	466d      	mov	r5, sp
 8003d0a:	f106 0410 	add.w	r4, r6, #16
 8003d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d1e:	1d33      	adds	r3, r6, #4
 8003d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d22:	6838      	ldr	r0, [r7, #0]
 8003d24:	f002 ff62 	bl	8006bec <USB_CoreInit>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0d7      	b.n	8003eea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f002 ffbc 	bl	8006cbe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e04a      	b.n	8003de2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	333d      	adds	r3, #61	; 0x3d
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	333c      	adds	r3, #60	; 0x3c
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	b298      	uxth	r0, r3
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3344      	adds	r3, #68	; 0x44
 8003d88:	4602      	mov	r2, r0
 8003d8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3340      	adds	r3, #64	; 0x40
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3348      	adds	r3, #72	; 0x48
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	334c      	adds	r3, #76	; 0x4c
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3354      	adds	r3, #84	; 0x54
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	3301      	adds	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d3af      	bcc.n	8003d4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e044      	b.n	8003e7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e60:	7bfa      	ldrb	r2, [r7, #15]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d3b5      	bcc.n	8003df2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	687e      	ldr	r6, [r7, #4]
 8003e8e:	466d      	mov	r5, sp
 8003e90:	f106 0410 	add.w	r4, r6, #16
 8003e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ea0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ea4:	1d33      	adds	r3, r6, #4
 8003ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	f002 ff55 	bl	8006d58 <USB_DevInit>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e014      	b.n	8003eea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d102      	bne.n	8003ede <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f80b 	bl	8003ef4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f003 f913 	bl	800710e <USB_DevDisconnect>

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003ef4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	10000003 	.word	0x10000003

08003f3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40007000 	.word	0x40007000

08003f5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f8a:	f7fd ff73 	bl	8001e74 <HAL_GetTick>
 8003f8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f90:	e009      	b.n	8003fa6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f92:	f7fd ff6f 	bl	8001e74 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa0:	d901      	bls.n	8003fa6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e022      	b.n	8003fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d1ee      	bne.n	8003f92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc0:	f7fd ff58 	bl	8001e74 <HAL_GetTick>
 8003fc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fc6:	e009      	b.n	8003fdc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fc8:	f7fd ff54 	bl	8001e74 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd6:	d901      	bls.n	8003fdc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e007      	b.n	8003fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe8:	d1ee      	bne.n	8003fc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40007000 	.word	0x40007000

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e29b      	b.n	800454a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8087 	beq.w	800412e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004020:	4b96      	ldr	r3, [pc, #600]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b04      	cmp	r3, #4
 800402a:	d00c      	beq.n	8004046 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402c:	4b93      	ldr	r3, [pc, #588]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b08      	cmp	r3, #8
 8004036:	d112      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
 8004038:	4b90      	ldr	r3, [pc, #576]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004044:	d10b      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004046:	4b8d      	ldr	r3, [pc, #564]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d06c      	beq.n	800412c <HAL_RCC_OscConfig+0x130>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d168      	bne.n	800412c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e275      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x7a>
 8004068:	4b84      	ldr	r3, [pc, #528]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a83      	ldr	r2, [pc, #524]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e02e      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x9c>
 800407e:	4b7f      	ldr	r3, [pc, #508]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7e      	ldr	r2, [pc, #504]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b7c      	ldr	r3, [pc, #496]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a7b      	ldr	r2, [pc, #492]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e01d      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80040a2:	4b76      	ldr	r3, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a75      	ldr	r2, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a72      	ldr	r2, [pc, #456]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 80040bc:	4b6f      	ldr	r3, [pc, #444]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6e      	ldr	r2, [pc, #440]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b6c      	ldr	r3, [pc, #432]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6b      	ldr	r2, [pc, #428]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd feca 	bl	8001e74 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd fec6 	bl	8001e74 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e229      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0xe8>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd feb6 	bl	8001e74 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd feb2 	bl	8001e74 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e215      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411e:	4b57      	ldr	r3, [pc, #348]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x110>
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d069      	beq.n	800420e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800413a:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004146:	4b4d      	ldr	r3, [pc, #308]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b08      	cmp	r3, #8
 8004150:	d11c      	bne.n	800418c <HAL_RCC_OscConfig+0x190>
 8004152:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_RCC_OscConfig+0x17a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d001      	beq.n	8004176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e1e9      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004176:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	493d      	ldr	r1, [pc, #244]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	e040      	b.n	800420e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d023      	beq.n	80041dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004194:	4b39      	ldr	r3, [pc, #228]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a38      	ldr	r2, [pc, #224]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fd fe68 	bl	8001e74 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a8:	f7fd fe64 	bl	8001e74 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1c7      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4929      	ldr	r1, [pc, #164]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]
 80041da:	e018      	b.n	800420e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041dc:	4b27      	ldr	r3, [pc, #156]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_RCC_OscConfig+0x280>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd fe44 	bl	8001e74 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f0:	f7fd fe40 	bl	8001e74 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1a3      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d038      	beq.n	800428c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d019      	beq.n	8004256 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fd fe21 	bl	8001e74 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004236:	f7fd fe1d 	bl	8001e74 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e180      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x23a>
 8004254:	e01a      	b.n	800428c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_RCC_OscConfig+0x280>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <HAL_RCC_OscConfig+0x280>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004262:	f7fd fe07 	bl	8001e74 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004268:	e00a      	b.n	8004280 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426a:	f7fd fe03 	bl	8001e74 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d903      	bls.n	8004280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e166      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
 800427c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004280:	4b92      	ldr	r3, [pc, #584]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ee      	bne.n	800426a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80a4 	beq.w	80043e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429a:	4b8c      	ldr	r3, [pc, #560]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10d      	bne.n	80042c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	4b89      	ldr	r3, [pc, #548]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a88      	ldr	r2, [pc, #544]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	4b86      	ldr	r3, [pc, #536]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c2:	4b83      	ldr	r3, [pc, #524]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d118      	bne.n	8004300 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042ce:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7f      	ldr	r2, [pc, #508]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042da:	f7fd fdcb 	bl	8001e74 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e2:	f7fd fdc7 	bl	8001e74 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b64      	cmp	r3, #100	; 0x64
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e12a      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f4:	4b76      	ldr	r3, [pc, #472]	; (80044d0 <HAL_RCC_OscConfig+0x4d4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x31a>
 8004308:	4b70      	ldr	r3, [pc, #448]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a6f      	ldr	r2, [pc, #444]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	e02d      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x33c>
 800431e:	4b6b      	ldr	r3, [pc, #428]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a6a      	ldr	r2, [pc, #424]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
 800432a:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a67      	ldr	r2, [pc, #412]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	e01c      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b05      	cmp	r3, #5
 800433e:	d10c      	bne.n	800435a <HAL_RCC_OscConfig+0x35e>
 8004340:	4b62      	ldr	r3, [pc, #392]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a61      	ldr	r2, [pc, #388]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
 800434c:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
 8004358:	e00b      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
 800435a:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	4b59      	ldr	r3, [pc, #356]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a58      	ldr	r2, [pc, #352]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d015      	beq.n	80043a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fd fd7b 	bl	8001e74 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fd fd77 	bl	8001e74 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e0d8      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	4b4c      	ldr	r3, [pc, #304]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ee      	beq.n	8004382 <HAL_RCC_OscConfig+0x386>
 80043a4:	e014      	b.n	80043d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fd fd65 	bl	8001e74 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	e00a      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fd fd61 	bl	8001e74 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0c2      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1ee      	bne.n	80043ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d6:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a3c      	ldr	r2, [pc, #240]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80ae 	beq.w	8004548 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ec:	4b37      	ldr	r3, [pc, #220]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d06d      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d14b      	bne.n	8004498 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004400:	4b32      	ldr	r3, [pc, #200]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a31      	ldr	r2, [pc, #196]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd fd32 	bl	8001e74 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fd fd2e 	bl	8001e74 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e091      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b29      	ldr	r3, [pc, #164]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	3b01      	subs	r3, #1
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	071b      	lsls	r3, r3, #28
 800445e:	491b      	ldr	r1, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd fd00 	bl	8001e74 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd fcfc 	bl	8001e74 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e05f      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x47c>
 8004496:	e057      	b.n	8004548 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 800449e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fd fce6 	bl	8001e74 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fd fce2 	bl	8001e74 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e045      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_OscConfig+0x4d0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x4b0>
 80044ca:	e03d      	b.n	8004548 <HAL_RCC_OscConfig+0x54c>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_RCC_OscConfig+0x558>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d030      	beq.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d129      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d122      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800450a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800450c:	4293      	cmp	r3, r2
 800450e:	d119      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	3b01      	subs	r3, #1
 800451e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d10f      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800

08004558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0d0      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b67      	ldr	r3, [pc, #412]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 020f 	bic.w	r2, r3, #15
 8004586:	4965      	ldr	r1, [pc, #404]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b63      	ldr	r3, [pc, #396]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0b8      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b8:	4b59      	ldr	r3, [pc, #356]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a58      	ldr	r2, [pc, #352]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d0:	4b53      	ldr	r3, [pc, #332]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a52      	ldr	r2, [pc, #328]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045dc:	4b50      	ldr	r3, [pc, #320]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	494d      	ldr	r1, [pc, #308]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d040      	beq.n	800467c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d115      	bne.n	800463a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07f      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e073      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06b      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4936      	ldr	r1, [pc, #216]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464c:	f7fd fc12 	bl	8001e74 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fd fc0e 	bl	8001e74 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e053      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b27      	ldr	r3, [pc, #156]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d210      	bcs.n	80046ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 020f 	bic.w	r2, r3, #15
 8004692:	4922      	ldr	r1, [pc, #136]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e032      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4916      	ldr	r1, [pc, #88]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	490e      	ldr	r1, [pc, #56]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ea:	f000 f821 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	490a      	ldr	r1, [pc, #40]	; (8004724 <HAL_RCC_ClockConfig+0x1cc>)
 80046fc:	5ccb      	ldrb	r3, [r1, r3]
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	4a09      	ldr	r2, [pc, #36]	; (8004728 <HAL_RCC_ClockConfig+0x1d0>)
 8004704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1d4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd f87c 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40023c00 	.word	0x40023c00
 8004720:	40023800 	.word	0x40023800
 8004724:	080221b4 	.word	0x080221b4
 8004728:	20000000 	.word	0x20000000
 800472c:	20000004 	.word	0x20000004

08004730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b094      	sub	sp, #80	; 0x50
 8004736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	647b      	str	r3, [r7, #68]	; 0x44
 800473c:	2300      	movs	r3, #0
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	2300      	movs	r3, #0
 8004742:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004748:	4b79      	ldr	r3, [pc, #484]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b08      	cmp	r3, #8
 8004752:	d00d      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x40>
 8004754:	2b08      	cmp	r3, #8
 8004756:	f200 80e1 	bhi.w	800491c <HAL_RCC_GetSysClockFreq+0x1ec>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x34>
 800475e:	2b04      	cmp	r3, #4
 8004760:	d003      	beq.n	800476a <HAL_RCC_GetSysClockFreq+0x3a>
 8004762:	e0db      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_GetSysClockFreq+0x204>)
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004768:	e0db      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800476a:	4b73      	ldr	r3, [pc, #460]	; (8004938 <HAL_RCC_GetSysClockFreq+0x208>)
 800476c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800476e:	e0d8      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004770:	4b6f      	ldr	r3, [pc, #444]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800477a:	4b6d      	ldr	r3, [pc, #436]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d063      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004786:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	099b      	lsrs	r3, r3, #6
 800478c:	2200      	movs	r2, #0
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004790:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047a2:	4622      	mov	r2, r4
 80047a4:	462b      	mov	r3, r5
 80047a6:	f04f 0000 	mov.w	r0, #0
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	0159      	lsls	r1, r3, #5
 80047b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b4:	0150      	lsls	r0, r2, #5
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4621      	mov	r1, r4
 80047bc:	1a51      	subs	r1, r2, r1
 80047be:	6139      	str	r1, [r7, #16]
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb63 0301 	sbc.w	r3, r3, r1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d4:	4659      	mov	r1, fp
 80047d6:	018b      	lsls	r3, r1, #6
 80047d8:	4651      	mov	r1, sl
 80047da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047de:	4651      	mov	r1, sl
 80047e0:	018a      	lsls	r2, r1, #6
 80047e2:	4651      	mov	r1, sl
 80047e4:	ebb2 0801 	subs.w	r8, r2, r1
 80047e8:	4659      	mov	r1, fp
 80047ea:	eb63 0901 	sbc.w	r9, r3, r1
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004802:	4690      	mov	r8, r2
 8004804:	4699      	mov	r9, r3
 8004806:	4623      	mov	r3, r4
 8004808:	eb18 0303 	adds.w	r3, r8, r3
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	462b      	mov	r3, r5
 8004810:	eb49 0303 	adc.w	r3, r9, r3
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004822:	4629      	mov	r1, r5
 8004824:	024b      	lsls	r3, r1, #9
 8004826:	4621      	mov	r1, r4
 8004828:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800482c:	4621      	mov	r1, r4
 800482e:	024a      	lsls	r2, r1, #9
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004836:	2200      	movs	r2, #0
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
 800483a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800483c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004840:	f7fb fd66 	bl	8000310 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	e058      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484e:	4b38      	ldr	r3, [pc, #224]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	2200      	movs	r2, #0
 8004856:	4618      	mov	r0, r3
 8004858:	4611      	mov	r1, r2
 800485a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	2300      	movs	r3, #0
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
 8004864:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	f04f 0000 	mov.w	r0, #0
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	0159      	lsls	r1, r3, #5
 8004876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800487a:	0150      	lsls	r0, r2, #5
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4641      	mov	r1, r8
 8004882:	ebb2 0a01 	subs.w	sl, r2, r1
 8004886:	4649      	mov	r1, r9
 8004888:	eb63 0b01 	sbc.w	fp, r3, r1
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004898:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800489c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048a0:	ebb2 040a 	subs.w	r4, r2, sl
 80048a4:	eb63 050b 	sbc.w	r5, r3, fp
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	00eb      	lsls	r3, r5, #3
 80048b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b6:	00e2      	lsls	r2, r4, #3
 80048b8:	4614      	mov	r4, r2
 80048ba:	461d      	mov	r5, r3
 80048bc:	4643      	mov	r3, r8
 80048be:	18e3      	adds	r3, r4, r3
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	464b      	mov	r3, r9
 80048c4:	eb45 0303 	adc.w	r3, r5, r3
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048d6:	4629      	mov	r1, r5
 80048d8:	028b      	lsls	r3, r1, #10
 80048da:	4621      	mov	r1, r4
 80048dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e0:	4621      	mov	r1, r4
 80048e2:	028a      	lsls	r2, r1, #10
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ea:	2200      	movs	r2, #0
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	61fa      	str	r2, [r7, #28]
 80048f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f4:	f7fb fd0c 	bl	8000310 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4613      	mov	r3, r2
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_GetSysClockFreq+0x200>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	3301      	adds	r3, #1
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800491a:	e002      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetSysClockFreq+0x204>)
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004924:	4618      	mov	r0, r3
 8004926:	3750      	adds	r7, #80	; 0x50
 8004928:	46bd      	mov	sp, r7
 800492a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800
 8004934:	00f42400 	.word	0x00f42400
 8004938:	007a1200 	.word	0x007a1200

0800493c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <HAL_RCC_GetHCLKFreq+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000000 	.word	0x20000000

08004954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004958:	f7ff fff0 	bl	800493c <HAL_RCC_GetHCLKFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4903      	ldr	r1, [pc, #12]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	080221c4 	.word	0x080221c4

0800497c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004980:	f7ff ffdc 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0b5b      	lsrs	r3, r3, #13
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	080221c4 	.word	0x080221c4

080049a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	220f      	movs	r2, #15
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0203 	and.w	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	08db      	lsrs	r3, r3, #3
 80049de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_RCC_GetClockConfig+0x60>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 020f 	and.w	r2, r3, #15
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40023c00 	.word	0x40023c00

08004a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d012      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a30:	4b69      	ldr	r3, [pc, #420]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a68      	ldr	r2, [pc, #416]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a3a:	6093      	str	r3, [r2, #8]
 8004a3c:	4b66      	ldr	r3, [pc, #408]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	4964      	ldr	r1, [pc, #400]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d017      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a62:	4b5d      	ldr	r3, [pc, #372]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a70:	4959      	ldr	r1, [pc, #356]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a80:	d101      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d017      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a9e:	4b4e      	ldr	r3, [pc, #312]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	494a      	ldr	r1, [pc, #296]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 808b 	beq.w	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aec:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	4a39      	ldr	r2, [pc, #228]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af6:	6413      	str	r3, [r2, #64]	; 0x40
 8004af8:	4b37      	ldr	r3, [pc, #220]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b04:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b10:	f7fd f9b0 	bl	8001e74 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b18:	f7fd f9ac 	bl	8001e74 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e38f      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b2a:	4b2c      	ldr	r3, [pc, #176]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b36:	4b28      	ldr	r3, [pc, #160]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d035      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d02e      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b54:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b7c:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d114      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fd f974 	bl	8001e74 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8e:	e00a      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b90:	f7fd f970 	bl	8001e74 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e351      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ee      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bce:	400b      	ands	r3, r1
 8004bd0:	4901      	ldr	r1, [pc, #4]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	0ffffcff 	.word	0x0ffffcff
 8004be4:	4bac      	ldr	r3, [pc, #688]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4aab      	ldr	r2, [pc, #684]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bee:	6093      	str	r3, [r2, #8]
 8004bf0:	4ba9      	ldr	r3, [pc, #676]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	49a6      	ldr	r1, [pc, #664]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c0e:	4ba2      	ldr	r3, [pc, #648]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c14:	4aa0      	ldr	r2, [pc, #640]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c1e:	4b9e      	ldr	r3, [pc, #632]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	499b      	ldr	r1, [pc, #620]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c3c:	4b96      	ldr	r3, [pc, #600]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c4a:	4993      	ldr	r1, [pc, #588]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5e:	4b8e      	ldr	r3, [pc, #568]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c6c:	498a      	ldr	r1, [pc, #552]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c80:	4b85      	ldr	r3, [pc, #532]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8e:	4982      	ldr	r1, [pc, #520]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ca2:	4b7d      	ldr	r3, [pc, #500]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4979      	ldr	r1, [pc, #484]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc4:	4b74      	ldr	r3, [pc, #464]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f023 0203 	bic.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	4971      	ldr	r1, [pc, #452]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce6:	4b6c      	ldr	r3, [pc, #432]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f023 020c 	bic.w	r2, r3, #12
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf4:	4968      	ldr	r1, [pc, #416]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d08:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	4960      	ldr	r1, [pc, #384]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d2a:	4b5b      	ldr	r3, [pc, #364]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	4957      	ldr	r1, [pc, #348]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d4c:	4b52      	ldr	r3, [pc, #328]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	494f      	ldr	r1, [pc, #316]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d6e:	4b4a      	ldr	r3, [pc, #296]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	4946      	ldr	r1, [pc, #280]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d90:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	493e      	ldr	r1, [pc, #248]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004db2:	4b39      	ldr	r3, [pc, #228]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	4935      	ldr	r1, [pc, #212]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd4:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de2:	492d      	ldr	r1, [pc, #180]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d011      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004df6:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e04:	4924      	ldr	r1, [pc, #144]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e14:	d101      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e44:	4914      	ldr	r1, [pc, #80]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e68:	490b      	ldr	r1, [pc, #44]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00f      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8c:	4902      	ldr	r1, [pc, #8]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e94:	e002      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ea8:	4b8a      	ldr	r3, [pc, #552]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	4986      	ldr	r1, [pc, #536]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ecc:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004edc:	497d      	ldr	r1, [pc, #500]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d006      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80d6 	beq.w	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ef8:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a75      	ldr	r2, [pc, #468]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f04:	f7fc ffb6 	bl	8001e74 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f0c:	f7fc ffb2 	bl	8001e74 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	; 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e195      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d021      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11d      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f3e:	4b65      	ldr	r3, [pc, #404]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f4c:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f52:	0e1b      	lsrs	r3, r3, #24
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	019a      	lsls	r2, r3, #6
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	431a      	orrs	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	061b      	lsls	r3, r3, #24
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	071b      	lsls	r3, r3, #28
 8004f72:	4958      	ldr	r1, [pc, #352]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d02e      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa4:	d129      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fb4:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fba:	0f1b      	lsrs	r3, r3, #28
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	019a      	lsls	r2, r3, #6
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	071b      	lsls	r3, r3, #28
 8004fda:	493e      	ldr	r1, [pc, #248]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fe2:	4b3c      	ldr	r3, [pc, #240]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe8:	f023 021f 	bic.w	r2, r3, #31
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	4938      	ldr	r1, [pc, #224]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01d      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005006:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	0e1b      	lsrs	r3, r3, #24
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005014:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501a:	0f1b      	lsrs	r3, r3, #28
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	019a      	lsls	r2, r3, #6
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	071b      	lsls	r3, r3, #28
 800503a:	4926      	ldr	r1, [pc, #152]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d011      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	019a      	lsls	r2, r3, #6
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	041b      	lsls	r3, r3, #16
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	061b      	lsls	r3, r3, #24
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	071b      	lsls	r3, r3, #28
 800506a:	491a      	ldr	r1, [pc, #104]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005072:	4b18      	ldr	r3, [pc, #96]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800507c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507e:	f7fc fef9 	bl	8001e74 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005086:	f7fc fef5 	bl	8001e74 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b64      	cmp	r3, #100	; 0x64
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0d8      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005098:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	f040 80ce 	bne.w	8005248 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b8:	f7fc fedc 	bl	8001e74 <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050be:	e00b      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050c0:	f7fc fed8 	bl	8001e74 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	; 0x64
 80050cc:	d904      	bls.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0bb      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d8:	4b5e      	ldr	r3, [pc, #376]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e4:	d0ec      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02e      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d12a      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800510e:	4b51      	ldr	r3, [pc, #324]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800511c:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	0f1b      	lsrs	r3, r3, #28
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	019a      	lsls	r2, r3, #6
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	061b      	lsls	r3, r3, #24
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	071b      	lsls	r3, r3, #28
 8005142:	4944      	ldr	r1, [pc, #272]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800514a:	4b42      	ldr	r3, [pc, #264]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005150:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	493d      	ldr	r1, [pc, #244]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d022      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005178:	d11d      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800517a:	4b36      	ldr	r3, [pc, #216]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	0e1b      	lsrs	r3, r3, #24
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005188:	4b32      	ldr	r3, [pc, #200]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	0f1b      	lsrs	r3, r3, #28
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	019a      	lsls	r2, r3, #6
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	431a      	orrs	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	061b      	lsls	r3, r3, #24
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	071b      	lsls	r3, r3, #28
 80051ae:	4929      	ldr	r1, [pc, #164]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d028      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	0e1b      	lsrs	r3, r3, #24
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	0c1b      	lsrs	r3, r3, #16
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	019a      	lsls	r2, r3, #6
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	431a      	orrs	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	071b      	lsls	r3, r3, #28
 80051f6:	4917      	ldr	r1, [pc, #92]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4911      	ldr	r1, [pc, #68]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0e      	ldr	r2, [pc, #56]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800521a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005220:	f7fc fe28 	bl	8001e74 <HAL_GetTick>
 8005224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005226:	e008      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005228:	f7fc fe24 	bl	8001e74 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	; 0x64
 8005234:	d901      	bls.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e007      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005246:	d1ef      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800

08005258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e09d      	b.n	80053a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527a:	d009      	beq.n	8005290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	61da      	str	r2, [r3, #28]
 8005282:	e005      	b.n	8005290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc f942 	bl	8001534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d0:	d902      	bls.n	80052d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e002      	b.n	80052de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052e6:	d007      	beq.n	80052f8 <HAL_SPI_Init+0xa0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	ea42 0103 	orr.w	r1, r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	f003 0204 	and.w	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005374:	ea42 0103 	orr.w	r1, r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e01a      	b.n	80053f6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fc f915 	bl	8001608 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_SPI_TransmitReceive_IT+0x20>
 800541c:	2302      	movs	r3, #2
 800541e:	e091      	b.n	8005544 <HAL_SPI_TransmitReceive_IT+0x144>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800542e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005436:	7dbb      	ldrb	r3, [r7, #22]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d00d      	beq.n	8005458 <HAL_SPI_TransmitReceive_IT+0x58>
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005442:	d106      	bne.n	8005452 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <HAL_SPI_TransmitReceive_IT+0x52>
 800544c:	7dbb      	ldrb	r3, [r7, #22]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d002      	beq.n	8005458 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005452:	2302      	movs	r3, #2
 8005454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005456:	e070      	b.n	800553a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_SPI_TransmitReceive_IT+0x6a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005464:	887b      	ldrh	r3, [r7, #2]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800546e:	e064      	b.n	800553a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b04      	cmp	r3, #4
 800547a:	d003      	beq.n	8005484 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2205      	movs	r2, #5
 8005480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	887a      	ldrh	r2, [r7, #2]
 8005494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	887a      	ldrh	r2, [r7, #2]
 800549a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	887a      	ldrh	r2, [r7, #2]
 80054a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	887a      	ldrh	r2, [r7, #2]
 80054ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054ba:	d906      	bls.n	80054ca <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a24      	ldr	r2, [pc, #144]	; (8005550 <HAL_SPI_TransmitReceive_IT+0x150>)
 80054c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a23      	ldr	r2, [pc, #140]	; (8005554 <HAL_SPI_TransmitReceive_IT+0x154>)
 80054c6:	651a      	str	r2, [r3, #80]	; 0x50
 80054c8:	e005      	b.n	80054d6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_SPI_TransmitReceive_IT+0x158>)
 80054ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a22      	ldr	r2, [pc, #136]	; (800555c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054de:	d802      	bhi.n	80054e6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80054e0:	887b      	ldrh	r3, [r7, #2]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d908      	bls.n	80054f8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	e007      	b.n	8005508 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005506:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005516:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d008      	beq.n	8005538 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e000      	b.n	800553a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005538:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
}
 8005544:	4618      	mov	r0, r3
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	08005903 	.word	0x08005903
 8005554:	08005969 	.word	0x08005969
 8005558:	080057b3 	.word	0x080057b3
 800555c:	08005871 	.word	0x08005871

08005560 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10f      	bne.n	80055a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	099b      	lsrs	r3, r3, #6
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
    return;
 80055a2:	e0d7      	b.n	8005754 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_SPI_IRQHandler+0x66>
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	09db      	lsrs	r3, r3, #7
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
    return;
 80055c4:	e0c6      	b.n	8005754 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <HAL_SPI_IRQHandler+0x8c>
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	0a1b      	lsrs	r3, r3, #8
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80b4 	beq.w	8005754 <HAL_SPI_IRQHandler+0x1f4>
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80ad 	beq.w	8005754 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	099b      	lsrs	r3, r3, #6
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d023      	beq.n	800564e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d011      	beq.n	8005636 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	f043 0204 	orr.w	r2, r3, #4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	e00b      	b.n	800564e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	693b      	ldr	r3, [r7, #16]
        return;
 800564c:	e082      	b.n	8005754 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d014      	beq.n	8005684 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00c      	beq.n	80056aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005694:	f043 0208 	orr.w	r2, r3, #8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04f      	beq.n	8005752 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <HAL_SPI_IRQHandler+0x17e>
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d034      	beq.n	8005748 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0203 	bic.w	r2, r2, #3
 80056ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_SPI_IRQHandler+0x1fc>)
 80056fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc fd76 	bl	80021f4 <HAL_DMA_Abort_IT>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	4a0d      	ldr	r2, [pc, #52]	; (800575c <HAL_SPI_IRQHandler+0x1fc>)
 8005728:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	4618      	mov	r0, r3
 8005730:	f7fc fd60 	bl	80021f4 <HAL_DMA_Abort_IT>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005746:	e003      	b.n	8005750 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f813 	bl	8005774 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800574e:	e000      	b.n	8005752 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005750:	bf00      	nop
    return;
 8005752:	bf00      	nop
  }
}
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	08005789 	.word	0x08005789

08005760 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff ffe5 	bl	8005774 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d923      	bls.n	800580e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	b292      	uxth	r2, r2
 80057d2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b02      	subs	r3, #2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d11f      	bne.n	800583c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	e016      	b.n	800583c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f103 020c 	add.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10f      	bne.n	8005868 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005856:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa38 	bl	8005cd8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d912      	bls.n	80058a8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	1c9a      	adds	r2, r3, #2
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b02      	subs	r3, #2
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a6:	e012      	b.n	80058ce <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d110      	bne.n	80058fa <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f9ef 	bl	8005cd8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	b292      	uxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10f      	bne.n	8005960 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f9bc 	bl	8005cd8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d110      	bne.n	80059c0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f98c 	bl	8005cd8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	4613      	mov	r3, r2
 80059d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059d8:	f7fc fa4c 	bl	8001e74 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059e8:	f7fc fa44 	bl	8001e74 <HAL_GetTick>
 80059ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ee:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	0d1b      	lsrs	r3, r3, #20
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	fb02 f303 	mul.w	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059fe:	e054      	b.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a06:	d050      	beq.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a08:	f7fc fa34 	bl	8001e74 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d902      	bls.n	8005a1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d13d      	bne.n	8005a9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a36:	d111      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a40:	d004      	beq.n	8005a4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4a:	d107      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a64:	d10f      	bne.n	8005a86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e017      	b.n	8005aca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	bf0c      	ite	eq
 8005aba:	2301      	moveq	r3, #1
 8005abc:	2300      	movne	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d19b      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000000 	.word	0x20000000

08005ad8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005aea:	f7fc f9c3 	bl	8001e74 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	4413      	add	r3, r2
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005afa:	f7fc f9bb 	bl	8001e74 <HAL_GetTick>
 8005afe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b08:	4b3d      	ldr	r3, [pc, #244]	; (8005c00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	00da      	lsls	r2, r3, #3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	0d1b      	lsrs	r3, r3, #20
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b20:	e060      	b.n	8005be4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b28:	d107      	bne.n	8005b3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b40:	d050      	beq.n	8005be4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b42:	f7fc f997 	bl	8001e74 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d902      	bls.n	8005b58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d13d      	bne.n	8005bd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b70:	d111      	bne.n	8005b96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7a:	d004      	beq.n	8005b86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b84:	d107      	bne.n	8005b96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9e:	d10f      	bne.n	8005bc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e010      	b.n	8005bf6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d196      	bne.n	8005b22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000000 	.word	0x20000000

08005c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff ff5b 	bl	8005ad8 <SPI_WaitFifoStateUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e046      	b.n	8005cc6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <SPI_EndRxTxTransaction+0xcc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <SPI_EndRxTxTransaction+0xd0>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	0d5b      	lsrs	r3, r3, #21
 8005c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c56:	d112      	bne.n	8005c7e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff feb0 	bl	80059c8 <SPI_WaitFlagStateUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e023      	b.n	8005cc6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c94:	2b80      	cmp	r3, #128	; 0x80
 8005c96:	d0f2      	beq.n	8005c7e <SPI_EndRxTxTransaction+0x7a>
 8005c98:	e000      	b.n	8005c9c <SPI_EndRxTxTransaction+0x98>
        break;
 8005c9a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff ff15 	bl	8005ad8 <SPI_WaitFifoStateUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e000      	b.n	8005cc6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000000 	.word	0x20000000
 8005cd4:	165e9f81 	.word	0x165e9f81

08005cd8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce0:	f7fc f8c8 	bl	8001e74 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0220 	bic.w	r2, r2, #32
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	2164      	movs	r1, #100	; 0x64
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff ff82 	bl	8005c04 <SPI_EndRxTxTransaction>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d115      	bne.n	8005d46 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fd16 	bl	8005760 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005d34:	e00e      	b.n	8005d54 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fb fb60 	bl	8001404 <HAL_SPI_TxRxCpltCallback>
}
 8005d44:	e006      	b.n	8005d54 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fd10 	bl	8005774 <HAL_SPI_ErrorCallback>
}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e049      	b.n	8005e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f841 	bl	8005e0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f000 fa00 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d001      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e054      	b.n	8005ee2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d01d      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a22      	ldr	r2, [pc, #136]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a21      	ldr	r2, [pc, #132]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <HAL_TIM_Base_Start_IT+0xdc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1e      	ldr	r2, [pc, #120]	; (8005f00 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1c      	ldr	r2, [pc, #112]	; (8005f04 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d115      	bne.n	8005ecc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <HAL_TIM_Base_Start_IT+0xec>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b06      	cmp	r3, #6
 8005eb0:	d015      	beq.n	8005ede <HAL_TIM_Base_Start_IT+0xbe>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	d011      	beq.n	8005ede <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eca:	e008      	b.n	8005ede <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e000      	b.n	8005ee0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800
 8005f0c:	00010007 	.word	0x00010007

08005f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0202 	mvn.w	r2, #2
 8005f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f905 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f8f7 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f908 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0204 	mvn.w	r2, #4
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f8db 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8cd 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8de 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0208 	mvn.w	r2, #8
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8b1 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8a3 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f8b4 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b10      	cmp	r3, #16
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b10      	cmp	r3, #16
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0210 	mvn.w	r2, #16
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2208      	movs	r2, #8
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f887 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f879 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f88a 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10e      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0201 	mvn.w	r2, #1
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fa ff60 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b80      	cmp	r3, #128	; 0x80
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f91a 	bl	80062f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ce:	d10e      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d107      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f90d 	bl	8006308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d10e      	bne.n	800611a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d107      	bne.n	800611a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f838 	bl	800618a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b20      	cmp	r3, #32
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b20      	cmp	r3, #32
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0220 	mvn.w	r2, #32
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f8cd 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d00f      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a3d      	ldr	r2, [pc, #244]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00b      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3c      	ldr	r2, [pc, #240]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3b      	ldr	r2, [pc, #236]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d02b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006200:	d027      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d023      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2b      	ldr	r2, [pc, #172]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d017      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <TIM_Base_SetConfig+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a27      	ldr	r2, [pc, #156]	; (80062cc <TIM_Base_SetConfig+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <TIM_Base_SetConfig+0x130>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <TIM_Base_SetConfig+0x134>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <TIM_Base_SetConfig+0x138>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a23      	ldr	r2, [pc, #140]	; (80062dc <TIM_Base_SetConfig+0x13c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d108      	bne.n	8006264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	40001800 	.word	0x40001800
 80062d8:	40001c00 	.word	0x40001c00
 80062dc:	40002000 	.word	0x40002000

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e040      	b.n	80063b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fb f988 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	; 0x24
 8006348:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f82c 	bl	80063b8 <UART_SetConfig>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e022      	b.n	80063b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa84 	bl	8006880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb0b 	bl	80069c4 <UART_CheckIdleState>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4ba6      	ldr	r3, [pc, #664]	; (800667c <UART_SetConfig+0x2c4>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	430a      	orrs	r2, r1
 8006428:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a94      	ldr	r2, [pc, #592]	; (8006680 <UART_SetConfig+0x2c8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d120      	bne.n	8006476 <UART_SetConfig+0xbe>
 8006434:	4b93      	ldr	r3, [pc, #588]	; (8006684 <UART_SetConfig+0x2cc>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	2b03      	cmp	r3, #3
 8006440:	d816      	bhi.n	8006470 <UART_SetConfig+0xb8>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x90>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006459 	.word	0x08006459
 800644c:	08006465 	.word	0x08006465
 8006450:	0800645f 	.word	0x0800645f
 8006454:	0800646b 	.word	0x0800646b
 8006458:	2301      	movs	r3, #1
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e150      	b.n	8006700 <UART_SetConfig+0x348>
 800645e:	2302      	movs	r3, #2
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e14d      	b.n	8006700 <UART_SetConfig+0x348>
 8006464:	2304      	movs	r3, #4
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e14a      	b.n	8006700 <UART_SetConfig+0x348>
 800646a:	2308      	movs	r3, #8
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e147      	b.n	8006700 <UART_SetConfig+0x348>
 8006470:	2310      	movs	r3, #16
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e144      	b.n	8006700 <UART_SetConfig+0x348>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a83      	ldr	r2, [pc, #524]	; (8006688 <UART_SetConfig+0x2d0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d132      	bne.n	80064e6 <UART_SetConfig+0x12e>
 8006480:	4b80      	ldr	r3, [pc, #512]	; (8006684 <UART_SetConfig+0x2cc>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b0c      	cmp	r3, #12
 800648c:	d828      	bhi.n	80064e0 <UART_SetConfig+0x128>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0xdc>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080064e1 	.word	0x080064e1
 800649c:	080064e1 	.word	0x080064e1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064d5 	.word	0x080064d5
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064cf 	.word	0x080064cf
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e1 	.word	0x080064e1
 80064c4:	080064db 	.word	0x080064db
 80064c8:	2300      	movs	r3, #0
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e118      	b.n	8006700 <UART_SetConfig+0x348>
 80064ce:	2302      	movs	r3, #2
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e115      	b.n	8006700 <UART_SetConfig+0x348>
 80064d4:	2304      	movs	r3, #4
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e112      	b.n	8006700 <UART_SetConfig+0x348>
 80064da:	2308      	movs	r3, #8
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e10f      	b.n	8006700 <UART_SetConfig+0x348>
 80064e0:	2310      	movs	r3, #16
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e10c      	b.n	8006700 <UART_SetConfig+0x348>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a68      	ldr	r2, [pc, #416]	; (800668c <UART_SetConfig+0x2d4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d120      	bne.n	8006532 <UART_SetConfig+0x17a>
 80064f0:	4b64      	ldr	r3, [pc, #400]	; (8006684 <UART_SetConfig+0x2cc>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064fa:	2b30      	cmp	r3, #48	; 0x30
 80064fc:	d013      	beq.n	8006526 <UART_SetConfig+0x16e>
 80064fe:	2b30      	cmp	r3, #48	; 0x30
 8006500:	d814      	bhi.n	800652c <UART_SetConfig+0x174>
 8006502:	2b20      	cmp	r3, #32
 8006504:	d009      	beq.n	800651a <UART_SetConfig+0x162>
 8006506:	2b20      	cmp	r3, #32
 8006508:	d810      	bhi.n	800652c <UART_SetConfig+0x174>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <UART_SetConfig+0x15c>
 800650e:	2b10      	cmp	r3, #16
 8006510:	d006      	beq.n	8006520 <UART_SetConfig+0x168>
 8006512:	e00b      	b.n	800652c <UART_SetConfig+0x174>
 8006514:	2300      	movs	r3, #0
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e0f2      	b.n	8006700 <UART_SetConfig+0x348>
 800651a:	2302      	movs	r3, #2
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e0ef      	b.n	8006700 <UART_SetConfig+0x348>
 8006520:	2304      	movs	r3, #4
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e0ec      	b.n	8006700 <UART_SetConfig+0x348>
 8006526:	2308      	movs	r3, #8
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e0e9      	b.n	8006700 <UART_SetConfig+0x348>
 800652c:	2310      	movs	r3, #16
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e0e6      	b.n	8006700 <UART_SetConfig+0x348>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a56      	ldr	r2, [pc, #344]	; (8006690 <UART_SetConfig+0x2d8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d120      	bne.n	800657e <UART_SetConfig+0x1c6>
 800653c:	4b51      	ldr	r3, [pc, #324]	; (8006684 <UART_SetConfig+0x2cc>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006546:	2bc0      	cmp	r3, #192	; 0xc0
 8006548:	d013      	beq.n	8006572 <UART_SetConfig+0x1ba>
 800654a:	2bc0      	cmp	r3, #192	; 0xc0
 800654c:	d814      	bhi.n	8006578 <UART_SetConfig+0x1c0>
 800654e:	2b80      	cmp	r3, #128	; 0x80
 8006550:	d009      	beq.n	8006566 <UART_SetConfig+0x1ae>
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d810      	bhi.n	8006578 <UART_SetConfig+0x1c0>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <UART_SetConfig+0x1a8>
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d006      	beq.n	800656c <UART_SetConfig+0x1b4>
 800655e:	e00b      	b.n	8006578 <UART_SetConfig+0x1c0>
 8006560:	2300      	movs	r3, #0
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e0cc      	b.n	8006700 <UART_SetConfig+0x348>
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e0c9      	b.n	8006700 <UART_SetConfig+0x348>
 800656c:	2304      	movs	r3, #4
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e0c6      	b.n	8006700 <UART_SetConfig+0x348>
 8006572:	2308      	movs	r3, #8
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e0c3      	b.n	8006700 <UART_SetConfig+0x348>
 8006578:	2310      	movs	r3, #16
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e0c0      	b.n	8006700 <UART_SetConfig+0x348>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a44      	ldr	r2, [pc, #272]	; (8006694 <UART_SetConfig+0x2dc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d125      	bne.n	80065d4 <UART_SetConfig+0x21c>
 8006588:	4b3e      	ldr	r3, [pc, #248]	; (8006684 <UART_SetConfig+0x2cc>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006596:	d017      	beq.n	80065c8 <UART_SetConfig+0x210>
 8006598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659c:	d817      	bhi.n	80065ce <UART_SetConfig+0x216>
 800659e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a2:	d00b      	beq.n	80065bc <UART_SetConfig+0x204>
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a8:	d811      	bhi.n	80065ce <UART_SetConfig+0x216>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <UART_SetConfig+0x1fe>
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d006      	beq.n	80065c2 <UART_SetConfig+0x20a>
 80065b4:	e00b      	b.n	80065ce <UART_SetConfig+0x216>
 80065b6:	2300      	movs	r3, #0
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e0a1      	b.n	8006700 <UART_SetConfig+0x348>
 80065bc:	2302      	movs	r3, #2
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e09e      	b.n	8006700 <UART_SetConfig+0x348>
 80065c2:	2304      	movs	r3, #4
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e09b      	b.n	8006700 <UART_SetConfig+0x348>
 80065c8:	2308      	movs	r3, #8
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e098      	b.n	8006700 <UART_SetConfig+0x348>
 80065ce:	2310      	movs	r3, #16
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e095      	b.n	8006700 <UART_SetConfig+0x348>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2f      	ldr	r2, [pc, #188]	; (8006698 <UART_SetConfig+0x2e0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d125      	bne.n	800662a <UART_SetConfig+0x272>
 80065de:	4b29      	ldr	r3, [pc, #164]	; (8006684 <UART_SetConfig+0x2cc>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ec:	d017      	beq.n	800661e <UART_SetConfig+0x266>
 80065ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065f2:	d817      	bhi.n	8006624 <UART_SetConfig+0x26c>
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d00b      	beq.n	8006612 <UART_SetConfig+0x25a>
 80065fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fe:	d811      	bhi.n	8006624 <UART_SetConfig+0x26c>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <UART_SetConfig+0x254>
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006608:	d006      	beq.n	8006618 <UART_SetConfig+0x260>
 800660a:	e00b      	b.n	8006624 <UART_SetConfig+0x26c>
 800660c:	2301      	movs	r3, #1
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e076      	b.n	8006700 <UART_SetConfig+0x348>
 8006612:	2302      	movs	r3, #2
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e073      	b.n	8006700 <UART_SetConfig+0x348>
 8006618:	2304      	movs	r3, #4
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e070      	b.n	8006700 <UART_SetConfig+0x348>
 800661e:	2308      	movs	r3, #8
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e06d      	b.n	8006700 <UART_SetConfig+0x348>
 8006624:	2310      	movs	r3, #16
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e06a      	b.n	8006700 <UART_SetConfig+0x348>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1b      	ldr	r2, [pc, #108]	; (800669c <UART_SetConfig+0x2e4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d138      	bne.n	80066a6 <UART_SetConfig+0x2ee>
 8006634:	4b13      	ldr	r3, [pc, #76]	; (8006684 <UART_SetConfig+0x2cc>)
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800663e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006642:	d017      	beq.n	8006674 <UART_SetConfig+0x2bc>
 8006644:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006648:	d82a      	bhi.n	80066a0 <UART_SetConfig+0x2e8>
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664e:	d00b      	beq.n	8006668 <UART_SetConfig+0x2b0>
 8006650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006654:	d824      	bhi.n	80066a0 <UART_SetConfig+0x2e8>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <UART_SetConfig+0x2aa>
 800665a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665e:	d006      	beq.n	800666e <UART_SetConfig+0x2b6>
 8006660:	e01e      	b.n	80066a0 <UART_SetConfig+0x2e8>
 8006662:	2300      	movs	r3, #0
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e04b      	b.n	8006700 <UART_SetConfig+0x348>
 8006668:	2302      	movs	r3, #2
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e048      	b.n	8006700 <UART_SetConfig+0x348>
 800666e:	2304      	movs	r3, #4
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e045      	b.n	8006700 <UART_SetConfig+0x348>
 8006674:	2308      	movs	r3, #8
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e042      	b.n	8006700 <UART_SetConfig+0x348>
 800667a:	bf00      	nop
 800667c:	efff69f3 	.word	0xefff69f3
 8006680:	40011000 	.word	0x40011000
 8006684:	40023800 	.word	0x40023800
 8006688:	40004400 	.word	0x40004400
 800668c:	40004800 	.word	0x40004800
 8006690:	40004c00 	.word	0x40004c00
 8006694:	40005000 	.word	0x40005000
 8006698:	40011400 	.word	0x40011400
 800669c:	40007800 	.word	0x40007800
 80066a0:	2310      	movs	r3, #16
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e02c      	b.n	8006700 <UART_SetConfig+0x348>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a72      	ldr	r2, [pc, #456]	; (8006874 <UART_SetConfig+0x4bc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d125      	bne.n	80066fc <UART_SetConfig+0x344>
 80066b0:	4b71      	ldr	r3, [pc, #452]	; (8006878 <UART_SetConfig+0x4c0>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066be:	d017      	beq.n	80066f0 <UART_SetConfig+0x338>
 80066c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066c4:	d817      	bhi.n	80066f6 <UART_SetConfig+0x33e>
 80066c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ca:	d00b      	beq.n	80066e4 <UART_SetConfig+0x32c>
 80066cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d0:	d811      	bhi.n	80066f6 <UART_SetConfig+0x33e>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <UART_SetConfig+0x326>
 80066d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066da:	d006      	beq.n	80066ea <UART_SetConfig+0x332>
 80066dc:	e00b      	b.n	80066f6 <UART_SetConfig+0x33e>
 80066de:	2300      	movs	r3, #0
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e00d      	b.n	8006700 <UART_SetConfig+0x348>
 80066e4:	2302      	movs	r3, #2
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e00a      	b.n	8006700 <UART_SetConfig+0x348>
 80066ea:	2304      	movs	r3, #4
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e007      	b.n	8006700 <UART_SetConfig+0x348>
 80066f0:	2308      	movs	r3, #8
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e004      	b.n	8006700 <UART_SetConfig+0x348>
 80066f6:	2310      	movs	r3, #16
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e001      	b.n	8006700 <UART_SetConfig+0x348>
 80066fc:	2310      	movs	r3, #16
 80066fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006708:	d15b      	bne.n	80067c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800670a:	7ffb      	ldrb	r3, [r7, #31]
 800670c:	2b08      	cmp	r3, #8
 800670e:	d828      	bhi.n	8006762 <UART_SetConfig+0x3aa>
 8006710:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <UART_SetConfig+0x360>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006745 	.word	0x08006745
 8006720:	0800674d 	.word	0x0800674d
 8006724:	08006763 	.word	0x08006763
 8006728:	08006753 	.word	0x08006753
 800672c:	08006763 	.word	0x08006763
 8006730:	08006763 	.word	0x08006763
 8006734:	08006763 	.word	0x08006763
 8006738:	0800675b 	.word	0x0800675b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fe f90a 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8006740:	61b8      	str	r0, [r7, #24]
        break;
 8006742:	e013      	b.n	800676c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fe f91a 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8006748:	61b8      	str	r0, [r7, #24]
        break;
 800674a:	e00f      	b.n	800676c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800674c:	4b4b      	ldr	r3, [pc, #300]	; (800687c <UART_SetConfig+0x4c4>)
 800674e:	61bb      	str	r3, [r7, #24]
        break;
 8006750:	e00c      	b.n	800676c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006752:	f7fd ffed 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8006756:	61b8      	str	r0, [r7, #24]
        break;
 8006758:	e008      	b.n	800676c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675e:	61bb      	str	r3, [r7, #24]
        break;
 8006760:	e004      	b.n	800676c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	77bb      	strb	r3, [r7, #30]
        break;
 800676a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d074      	beq.n	800685c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	005a      	lsls	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	441a      	add	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b0f      	cmp	r3, #15
 800678c:	d916      	bls.n	80067bc <UART_SetConfig+0x404>
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006794:	d212      	bcs.n	80067bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f023 030f 	bic.w	r3, r3, #15
 800679e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	89fb      	ldrh	r3, [r7, #14]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	89fa      	ldrh	r2, [r7, #14]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	e04f      	b.n	800685c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	77bb      	strb	r3, [r7, #30]
 80067c0:	e04c      	b.n	800685c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067c2:	7ffb      	ldrb	r3, [r7, #31]
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d828      	bhi.n	800681a <UART_SetConfig+0x462>
 80067c8:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <UART_SetConfig+0x418>)
 80067ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ce:	bf00      	nop
 80067d0:	080067f5 	.word	0x080067f5
 80067d4:	080067fd 	.word	0x080067fd
 80067d8:	08006805 	.word	0x08006805
 80067dc:	0800681b 	.word	0x0800681b
 80067e0:	0800680b 	.word	0x0800680b
 80067e4:	0800681b 	.word	0x0800681b
 80067e8:	0800681b 	.word	0x0800681b
 80067ec:	0800681b 	.word	0x0800681b
 80067f0:	08006813 	.word	0x08006813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f4:	f7fe f8ae 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 80067f8:	61b8      	str	r0, [r7, #24]
        break;
 80067fa:	e013      	b.n	8006824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067fc:	f7fe f8be 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 8006800:	61b8      	str	r0, [r7, #24]
        break;
 8006802:	e00f      	b.n	8006824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006804:	4b1d      	ldr	r3, [pc, #116]	; (800687c <UART_SetConfig+0x4c4>)
 8006806:	61bb      	str	r3, [r7, #24]
        break;
 8006808:	e00c      	b.n	8006824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800680a:	f7fd ff91 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 800680e:	61b8      	str	r0, [r7, #24]
        break;
 8006810:	e008      	b.n	8006824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006816:	61bb      	str	r3, [r7, #24]
        break;
 8006818:	e004      	b.n	8006824 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	77bb      	strb	r3, [r7, #30]
        break;
 8006822:	bf00      	nop
    }

    if (pclk != 0U)
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d018      	beq.n	800685c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	085a      	lsrs	r2, r3, #1
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	441a      	add	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d909      	bls.n	8006858 <UART_SetConfig+0x4a0>
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800684a:	d205      	bcs.n	8006858 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	b29a      	uxth	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	e001      	b.n	800685c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006868:	7fbb      	ldrb	r3, [r7, #30]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40007c00 	.word	0x40007c00
 8006878:	40023800 	.word	0x40023800
 800687c:	00f42400 	.word	0x00f42400

08006880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01a      	beq.n	8006996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697e:	d10a      	bne.n	8006996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	605a      	str	r2, [r3, #4]
  }
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d4:	f7fb fa4e 	bl	8001e74 <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d10e      	bne.n	8006a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f831 	bl	8006a5e <UART_WaitOnFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e027      	b.n	8006a56 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d10e      	bne.n	8006a32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f81b 	bl	8006a5e <UART_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e011      	b.n	8006a56 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b09c      	sub	sp, #112	; 0x70
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6e:	e0a7      	b.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a76:	f000 80a3 	beq.w	8006bc0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fb f9fb 	bl	8001e74 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d13f      	bne.n	8006b10 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ae2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e068      	b.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d050      	beq.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b2c:	d148      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
 8006b58:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e6      	bne.n	8006b38 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3308      	adds	r3, #8
 8006b88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b8a:	623a      	str	r2, [r7, #32]
 8006b8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	69f9      	ldr	r1, [r7, #28]
 8006b90:	6a3a      	ldr	r2, [r7, #32]
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e010      	b.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	bf0c      	ite	eq
 8006bd0:	2301      	moveq	r3, #1
 8006bd2:	2300      	movne	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	79fb      	ldrb	r3, [r7, #7]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	f43f af48 	beq.w	8006a70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3770      	adds	r7, #112	; 0x70
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 001c 	add.w	r0, r7, #28
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d120      	bne.n	8006c46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <USB_CoreInit+0xac>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d105      	bne.n	8006c3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa96 	bl	800716c <USB_CoreReset>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
 8006c44:	e010      	b.n	8006c68 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa8a 	bl	800716c <USB_CoreReset>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10b      	bne.n	8006c86 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f043 0206 	orr.w	r2, r3, #6
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f043 0220 	orr.w	r2, r3, #32
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c92:	b004      	add	sp, #16
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	ffbdffbf 	.word	0xffbdffbf

08006c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 0201 	bic.w	r2, r3, #1
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d115      	bne.n	8006d0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cec:	2001      	movs	r0, #1
 8006cee:	f7fb f8cd 	bl	8001e8c <HAL_Delay>
      ms++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fa29 	bl	8007150 <USB_GetMode>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d01e      	beq.n	8006d42 <USB_SetCurrentMode+0x84>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b31      	cmp	r3, #49	; 0x31
 8006d08:	d9f0      	bls.n	8006cec <USB_SetCurrentMode+0x2e>
 8006d0a:	e01a      	b.n	8006d42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d115      	bne.n	8006d3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d1e:	2001      	movs	r0, #1
 8006d20:	f7fb f8b4 	bl	8001e8c <HAL_Delay>
      ms++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa10 	bl	8007150 <USB_GetMode>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <USB_SetCurrentMode+0x84>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b31      	cmp	r3, #49	; 0x31
 8006d3a:	d9f0      	bls.n	8006d1e <USB_SetCurrentMode+0x60>
 8006d3c:	e001      	b.n	8006d42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e005      	b.n	8006d4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b32      	cmp	r3, #50	; 0x32
 8006d46:	d101      	bne.n	8006d4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d58:	b084      	sub	sp, #16
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	e009      	b.n	8006d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3340      	adds	r3, #64	; 0x40
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b0e      	cmp	r3, #14
 8006d90:	d9f2      	bls.n	8006d78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11c      	bne.n	8006dd2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006da6:	f043 0302 	orr.w	r3, r3, #2
 8006daa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e005      	b.n	8006dde <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006de4:	461a      	mov	r2, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df0:	4619      	mov	r1, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df8:	461a      	mov	r2, r3
 8006dfa:	680b      	ldr	r3, [r1, #0]
 8006dfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10c      	bne.n	8006e1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f965 	bl	80070dc <USB_SetDevSpeed>
 8006e12:	e008      	b.n	8006e26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f960 	bl	80070dc <USB_SetDevSpeed>
 8006e1c:	e003      	b.n	8006e26 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e1e:	2103      	movs	r1, #3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f95b 	bl	80070dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e26:	2110      	movs	r1, #16
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8f3 	bl	8007014 <USB_FlushTxFifo>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f91f 	bl	800707c <USB_FlushRxFifo>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	461a      	mov	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	e043      	b.n	8006efa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e88:	d118      	bne.n	8006ebc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	e013      	b.n	8006ece <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	e008      	b.n	8006ece <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eda:	461a      	mov	r2, r3
 8006edc:	2300      	movs	r3, #0
 8006ede:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	461a      	mov	r2, r3
 8006eee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ef2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d3b7      	bcc.n	8006e72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e043      	b.n	8006f90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1e:	d118      	bne.n	8006f52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	461a      	mov	r2, r3
 8006f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e013      	b.n	8006f64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e008      	b.n	8006f64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2300      	movs	r3, #0
 8006f62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3b7      	bcc.n	8006f08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006faa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f043 0210 	orr.w	r2, r3, #16
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	4b0e      	ldr	r3, [pc, #56]	; (800700c <USB_DevInit+0x2b4>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f043 0208 	orr.w	r2, r3, #8
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d105      	bne.n	8006ffc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <USB_DevInit+0x2b8>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007008:	b004      	add	sp, #16
 800700a:	4770      	bx	lr
 800700c:	803c3800 	.word	0x803c3800
 8007010:	40000004 	.word	0x40000004

08007014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <USB_FlushTxFifo+0x64>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d901      	bls.n	8007034 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e01b      	b.n	800706c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	daf2      	bge.n	8007022 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	019b      	lsls	r3, r3, #6
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a08      	ldr	r2, [pc, #32]	; (8007078 <USB_FlushTxFifo+0x64>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e006      	b.n	800706c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b20      	cmp	r3, #32
 8007068:	d0f0      	beq.n	800704c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	00030d40 	.word	0x00030d40

0800707c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a11      	ldr	r2, [pc, #68]	; (80070d8 <USB_FlushRxFifo+0x5c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d901      	bls.n	800709a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e018      	b.n	80070cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	daf2      	bge.n	8007088 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2210      	movs	r2, #16
 80070aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a08      	ldr	r2, [pc, #32]	; (80070d8 <USB_FlushRxFifo+0x5c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e006      	b.n	80070cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	d0f0      	beq.n	80070ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	00030d40 	.word	0x00030d40

080070dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fc:	4313      	orrs	r3, r2
 80070fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007128:	f023 0303 	bic.w	r3, r3, #3
 800712c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713c:	f043 0302 	orr.w	r3, r3, #2
 8007140:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	f003 0301 	and.w	r3, r3, #1
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <USB_CoreReset+0x64>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d901      	bls.n	800718a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e01b      	b.n	80071c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	daf2      	bge.n	8007178 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f043 0201 	orr.w	r2, r3, #1
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <USB_CoreReset+0x64>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d901      	bls.n	80071b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e006      	b.n	80071c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d0f0      	beq.n	80071a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	00030d40 	.word	0x00030d40

080071d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80071d4:	b5b0      	push	{r4, r5, r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 80071da:	4b96      	ldr	r3, [pc, #600]	; (8007434 <MX_LWIP_Init+0x260>)
 80071dc:	220a      	movs	r2, #10
 80071de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 80071e0:	4b94      	ldr	r3, [pc, #592]	; (8007434 <MX_LWIP_Init+0x260>)
 80071e2:	222a      	movs	r2, #42	; 0x2a
 80071e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80071e6:	4b93      	ldr	r3, [pc, #588]	; (8007434 <MX_LWIP_Init+0x260>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 80071ec:	4b91      	ldr	r3, [pc, #580]	; (8007434 <MX_LWIP_Init+0x260>)
 80071ee:	220f      	movs	r2, #15
 80071f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80071f2:	4b91      	ldr	r3, [pc, #580]	; (8007438 <MX_LWIP_Init+0x264>)
 80071f4:	22ff      	movs	r2, #255	; 0xff
 80071f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80071f8:	4b8f      	ldr	r3, [pc, #572]	; (8007438 <MX_LWIP_Init+0x264>)
 80071fa:	22ff      	movs	r2, #255	; 0xff
 80071fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80071fe:	4b8e      	ldr	r3, [pc, #568]	; (8007438 <MX_LWIP_Init+0x264>)
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007204:	4b8c      	ldr	r3, [pc, #560]	; (8007438 <MX_LWIP_Init+0x264>)
 8007206:	2200      	movs	r2, #0
 8007208:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800720a:	4b8c      	ldr	r3, [pc, #560]	; (800743c <MX_LWIP_Init+0x268>)
 800720c:	220a      	movs	r2, #10
 800720e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8007210:	4b8a      	ldr	r3, [pc, #552]	; (800743c <MX_LWIP_Init+0x268>)
 8007212:	222a      	movs	r2, #42	; 0x2a
 8007214:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007216:	4b89      	ldr	r3, [pc, #548]	; (800743c <MX_LWIP_Init+0x268>)
 8007218:	2200      	movs	r2, #0
 800721a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800721c:	4b87      	ldr	r3, [pc, #540]	; (800743c <MX_LWIP_Init+0x268>)
 800721e:	2201      	movs	r2, #1
 8007220:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007222:	2100      	movs	r1, #0
 8007224:	2000      	movs	r0, #0
 8007226:	f005 ff8d 	bl	800d144 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800722a:	4b82      	ldr	r3, [pc, #520]	; (8007434 <MX_LWIP_Init+0x260>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	061a      	lsls	r2, r3, #24
 8007230:	4b80      	ldr	r3, [pc, #512]	; (8007434 <MX_LWIP_Init+0x260>)
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	431a      	orrs	r2, r3
 8007238:	4b7e      	ldr	r3, [pc, #504]	; (8007434 <MX_LWIP_Init+0x260>)
 800723a:	789b      	ldrb	r3, [r3, #2]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	4313      	orrs	r3, r2
 8007240:	4a7c      	ldr	r2, [pc, #496]	; (8007434 <MX_LWIP_Init+0x260>)
 8007242:	78d2      	ldrb	r2, [r2, #3]
 8007244:	4313      	orrs	r3, r2
 8007246:	061a      	lsls	r2, r3, #24
 8007248:	4b7a      	ldr	r3, [pc, #488]	; (8007434 <MX_LWIP_Init+0x260>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	0619      	lsls	r1, r3, #24
 800724e:	4b79      	ldr	r3, [pc, #484]	; (8007434 <MX_LWIP_Init+0x260>)
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	4319      	orrs	r1, r3
 8007256:	4b77      	ldr	r3, [pc, #476]	; (8007434 <MX_LWIP_Init+0x260>)
 8007258:	789b      	ldrb	r3, [r3, #2]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	430b      	orrs	r3, r1
 800725e:	4975      	ldr	r1, [pc, #468]	; (8007434 <MX_LWIP_Init+0x260>)
 8007260:	78c9      	ldrb	r1, [r1, #3]
 8007262:	430b      	orrs	r3, r1
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800726a:	431a      	orrs	r2, r3
 800726c:	4b71      	ldr	r3, [pc, #452]	; (8007434 <MX_LWIP_Init+0x260>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	0619      	lsls	r1, r3, #24
 8007272:	4b70      	ldr	r3, [pc, #448]	; (8007434 <MX_LWIP_Init+0x260>)
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	041b      	lsls	r3, r3, #16
 8007278:	4319      	orrs	r1, r3
 800727a:	4b6e      	ldr	r3, [pc, #440]	; (8007434 <MX_LWIP_Init+0x260>)
 800727c:	789b      	ldrb	r3, [r3, #2]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	430b      	orrs	r3, r1
 8007282:	496c      	ldr	r1, [pc, #432]	; (8007434 <MX_LWIP_Init+0x260>)
 8007284:	78c9      	ldrb	r1, [r1, #3]
 8007286:	430b      	orrs	r3, r1
 8007288:	0a1b      	lsrs	r3, r3, #8
 800728a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800728e:	431a      	orrs	r2, r3
 8007290:	4b68      	ldr	r3, [pc, #416]	; (8007434 <MX_LWIP_Init+0x260>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	0619      	lsls	r1, r3, #24
 8007296:	4b67      	ldr	r3, [pc, #412]	; (8007434 <MX_LWIP_Init+0x260>)
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	4319      	orrs	r1, r3
 800729e:	4b65      	ldr	r3, [pc, #404]	; (8007434 <MX_LWIP_Init+0x260>)
 80072a0:	789b      	ldrb	r3, [r3, #2]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	430b      	orrs	r3, r1
 80072a6:	4963      	ldr	r1, [pc, #396]	; (8007434 <MX_LWIP_Init+0x260>)
 80072a8:	78c9      	ldrb	r1, [r1, #3]
 80072aa:	430b      	orrs	r3, r1
 80072ac:	0e1b      	lsrs	r3, r3, #24
 80072ae:	4313      	orrs	r3, r2
 80072b0:	4a63      	ldr	r2, [pc, #396]	; (8007440 <MX_LWIP_Init+0x26c>)
 80072b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80072b4:	4b60      	ldr	r3, [pc, #384]	; (8007438 <MX_LWIP_Init+0x264>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	061a      	lsls	r2, r3, #24
 80072ba:	4b5f      	ldr	r3, [pc, #380]	; (8007438 <MX_LWIP_Init+0x264>)
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	431a      	orrs	r2, r3
 80072c2:	4b5d      	ldr	r3, [pc, #372]	; (8007438 <MX_LWIP_Init+0x264>)
 80072c4:	789b      	ldrb	r3, [r3, #2]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	4313      	orrs	r3, r2
 80072ca:	4a5b      	ldr	r2, [pc, #364]	; (8007438 <MX_LWIP_Init+0x264>)
 80072cc:	78d2      	ldrb	r2, [r2, #3]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	061a      	lsls	r2, r3, #24
 80072d2:	4b59      	ldr	r3, [pc, #356]	; (8007438 <MX_LWIP_Init+0x264>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	0619      	lsls	r1, r3, #24
 80072d8:	4b57      	ldr	r3, [pc, #348]	; (8007438 <MX_LWIP_Init+0x264>)
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	4319      	orrs	r1, r3
 80072e0:	4b55      	ldr	r3, [pc, #340]	; (8007438 <MX_LWIP_Init+0x264>)
 80072e2:	789b      	ldrb	r3, [r3, #2]
 80072e4:	021b      	lsls	r3, r3, #8
 80072e6:	430b      	orrs	r3, r1
 80072e8:	4953      	ldr	r1, [pc, #332]	; (8007438 <MX_LWIP_Init+0x264>)
 80072ea:	78c9      	ldrb	r1, [r1, #3]
 80072ec:	430b      	orrs	r3, r1
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072f4:	431a      	orrs	r2, r3
 80072f6:	4b50      	ldr	r3, [pc, #320]	; (8007438 <MX_LWIP_Init+0x264>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	0619      	lsls	r1, r3, #24
 80072fc:	4b4e      	ldr	r3, [pc, #312]	; (8007438 <MX_LWIP_Init+0x264>)
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	041b      	lsls	r3, r3, #16
 8007302:	4319      	orrs	r1, r3
 8007304:	4b4c      	ldr	r3, [pc, #304]	; (8007438 <MX_LWIP_Init+0x264>)
 8007306:	789b      	ldrb	r3, [r3, #2]
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	430b      	orrs	r3, r1
 800730c:	494a      	ldr	r1, [pc, #296]	; (8007438 <MX_LWIP_Init+0x264>)
 800730e:	78c9      	ldrb	r1, [r1, #3]
 8007310:	430b      	orrs	r3, r1
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007318:	431a      	orrs	r2, r3
 800731a:	4b47      	ldr	r3, [pc, #284]	; (8007438 <MX_LWIP_Init+0x264>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	0619      	lsls	r1, r3, #24
 8007320:	4b45      	ldr	r3, [pc, #276]	; (8007438 <MX_LWIP_Init+0x264>)
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	041b      	lsls	r3, r3, #16
 8007326:	4319      	orrs	r1, r3
 8007328:	4b43      	ldr	r3, [pc, #268]	; (8007438 <MX_LWIP_Init+0x264>)
 800732a:	789b      	ldrb	r3, [r3, #2]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	430b      	orrs	r3, r1
 8007330:	4941      	ldr	r1, [pc, #260]	; (8007438 <MX_LWIP_Init+0x264>)
 8007332:	78c9      	ldrb	r1, [r1, #3]
 8007334:	430b      	orrs	r3, r1
 8007336:	0e1b      	lsrs	r3, r3, #24
 8007338:	4313      	orrs	r3, r2
 800733a:	4a42      	ldr	r2, [pc, #264]	; (8007444 <MX_LWIP_Init+0x270>)
 800733c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800733e:	4b3f      	ldr	r3, [pc, #252]	; (800743c <MX_LWIP_Init+0x268>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	061a      	lsls	r2, r3, #24
 8007344:	4b3d      	ldr	r3, [pc, #244]	; (800743c <MX_LWIP_Init+0x268>)
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	041b      	lsls	r3, r3, #16
 800734a:	431a      	orrs	r2, r3
 800734c:	4b3b      	ldr	r3, [pc, #236]	; (800743c <MX_LWIP_Init+0x268>)
 800734e:	789b      	ldrb	r3, [r3, #2]
 8007350:	021b      	lsls	r3, r3, #8
 8007352:	4313      	orrs	r3, r2
 8007354:	4a39      	ldr	r2, [pc, #228]	; (800743c <MX_LWIP_Init+0x268>)
 8007356:	78d2      	ldrb	r2, [r2, #3]
 8007358:	4313      	orrs	r3, r2
 800735a:	061a      	lsls	r2, r3, #24
 800735c:	4b37      	ldr	r3, [pc, #220]	; (800743c <MX_LWIP_Init+0x268>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	0619      	lsls	r1, r3, #24
 8007362:	4b36      	ldr	r3, [pc, #216]	; (800743c <MX_LWIP_Init+0x268>)
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	4319      	orrs	r1, r3
 800736a:	4b34      	ldr	r3, [pc, #208]	; (800743c <MX_LWIP_Init+0x268>)
 800736c:	789b      	ldrb	r3, [r3, #2]
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	430b      	orrs	r3, r1
 8007372:	4932      	ldr	r1, [pc, #200]	; (800743c <MX_LWIP_Init+0x268>)
 8007374:	78c9      	ldrb	r1, [r1, #3]
 8007376:	430b      	orrs	r3, r1
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800737e:	431a      	orrs	r2, r3
 8007380:	4b2e      	ldr	r3, [pc, #184]	; (800743c <MX_LWIP_Init+0x268>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	0619      	lsls	r1, r3, #24
 8007386:	4b2d      	ldr	r3, [pc, #180]	; (800743c <MX_LWIP_Init+0x268>)
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	041b      	lsls	r3, r3, #16
 800738c:	4319      	orrs	r1, r3
 800738e:	4b2b      	ldr	r3, [pc, #172]	; (800743c <MX_LWIP_Init+0x268>)
 8007390:	789b      	ldrb	r3, [r3, #2]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	430b      	orrs	r3, r1
 8007396:	4929      	ldr	r1, [pc, #164]	; (800743c <MX_LWIP_Init+0x268>)
 8007398:	78c9      	ldrb	r1, [r1, #3]
 800739a:	430b      	orrs	r3, r1
 800739c:	0a1b      	lsrs	r3, r3, #8
 800739e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073a2:	431a      	orrs	r2, r3
 80073a4:	4b25      	ldr	r3, [pc, #148]	; (800743c <MX_LWIP_Init+0x268>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	0619      	lsls	r1, r3, #24
 80073aa:	4b24      	ldr	r3, [pc, #144]	; (800743c <MX_LWIP_Init+0x268>)
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	4319      	orrs	r1, r3
 80073b2:	4b22      	ldr	r3, [pc, #136]	; (800743c <MX_LWIP_Init+0x268>)
 80073b4:	789b      	ldrb	r3, [r3, #2]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	430b      	orrs	r3, r1
 80073ba:	4920      	ldr	r1, [pc, #128]	; (800743c <MX_LWIP_Init+0x268>)
 80073bc:	78c9      	ldrb	r1, [r1, #3]
 80073be:	430b      	orrs	r3, r1
 80073c0:	0e1b      	lsrs	r3, r3, #24
 80073c2:	4313      	orrs	r3, r2
 80073c4:	4a20      	ldr	r2, [pc, #128]	; (8007448 <MX_LWIP_Init+0x274>)
 80073c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80073c8:	4b20      	ldr	r3, [pc, #128]	; (800744c <MX_LWIP_Init+0x278>)
 80073ca:	9302      	str	r3, [sp, #8]
 80073cc:	4b20      	ldr	r3, [pc, #128]	; (8007450 <MX_LWIP_Init+0x27c>)
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	2300      	movs	r3, #0
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <MX_LWIP_Init+0x274>)
 80073d6:	4a1b      	ldr	r2, [pc, #108]	; (8007444 <MX_LWIP_Init+0x270>)
 80073d8:	4919      	ldr	r1, [pc, #100]	; (8007440 <MX_LWIP_Init+0x26c>)
 80073da:	481e      	ldr	r0, [pc, #120]	; (8007454 <MX_LWIP_Init+0x280>)
 80073dc:	f006 fc8c 	bl	800dcf8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80073e0:	481c      	ldr	r0, [pc, #112]	; (8007454 <MX_LWIP_Init+0x280>)
 80073e2:	f006 fe3b 	bl	800e05c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80073e6:	4b1b      	ldr	r3, [pc, #108]	; (8007454 <MX_LWIP_Init+0x280>)
 80073e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073ec:	089b      	lsrs	r3, r3, #2
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80073f8:	4816      	ldr	r0, [pc, #88]	; (8007454 <MX_LWIP_Init+0x280>)
 80073fa:	f006 fe3f 	bl	800e07c <netif_set_up>
 80073fe:	e002      	b.n	8007406 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007400:	4814      	ldr	r0, [pc, #80]	; (8007454 <MX_LWIP_Init+0x280>)
 8007402:	f006 fea7 	bl	800e154 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007406:	4914      	ldr	r1, [pc, #80]	; (8007458 <MX_LWIP_Init+0x284>)
 8007408:	4812      	ldr	r0, [pc, #72]	; (8007454 <MX_LWIP_Init+0x280>)
 800740a:	f006 ff39 	bl	800e280 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <MX_LWIP_Init+0x288>)
 8007410:	1d3c      	adds	r4, r7, #4
 8007412:	461d      	mov	r5, r3
 8007414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007418:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800741c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007420:	1d3b      	adds	r3, r7, #4
 8007422:	490c      	ldr	r1, [pc, #48]	; (8007454 <MX_LWIP_Init+0x280>)
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fd47 	bl	8007eb8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800742a:	bf00      	nop
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bdb0      	pop	{r4, r5, r7, pc}
 8007432:	bf00      	nop
 8007434:	20001a7c 	.word	0x20001a7c
 8007438:	20001a80 	.word	0x20001a80
 800743c:	20001a84 	.word	0x20001a84
 8007440:	20001a70 	.word	0x20001a70
 8007444:	20001a74 	.word	0x20001a74
 8007448:	20001a78 	.word	0x20001a78
 800744c:	0800d055 	.word	0x0800d055
 8007450:	08007959 	.word	0x08007959
 8007454:	20001a3c 	.word	0x20001a3c
 8007458:	08007461 	.word	0x08007461
 800745c:	0801ea44 	.word	0x0801ea44

08007460 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007486:	2320      	movs	r3, #32
 8007488:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800748a:	f3bf 8f4f 	dsb	sy
}
 800748e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007490:	e00b      	b.n	80074aa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007492:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dcf0      	bgt.n	8007492 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80074b0:	f3bf 8f4f 	dsb	sy
}
 80074b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80074b6:	f3bf 8f6f 	isb	sy
}
 80074ba:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	e000ed00 	.word	0xe000ed00

080074cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fe69 	bl	80081b0 <osSemaphoreRelease>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20006414 	.word	0x20006414

080074ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <HAL_ETH_TxCpltCallback+0x1c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fe59 	bl	80081b0 <osSemaphoreRelease>
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20006418 	.word	0x20006418

0800750c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7fb fccd 	bl	8002eb4 <HAL_ETH_GetDMAError>
 800751a:	4603      	mov	r3, r0
 800751c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007520:	2b80      	cmp	r3, #128	; 0x80
 8007522:	d104      	bne.n	800752e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007524:	4b04      	ldr	r3, [pc, #16]	; (8007538 <HAL_ETH_ErrorCallback+0x2c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fe41 	bl	80081b0 <osSemaphoreRelease>
  }
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20006414 	.word	0x20006414

0800753c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800753c:	b5b0      	push	{r4, r5, r7, lr}
 800753e:	b0a8      	sub	sp, #160	; 0xa0
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8007556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800755a:	2264      	movs	r2, #100	; 0x64
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f016 f8ae 	bl	801d6c0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007564:	4b85      	ldr	r3, [pc, #532]	; (800777c <low_level_init+0x240>)
 8007566:	4a86      	ldr	r2, [pc, #536]	; (8007780 <low_level_init+0x244>)
 8007568:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800756a:	2300      	movs	r3, #0
 800756c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8007576:	23e1      	movs	r3, #225	; 0xe1
 8007578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800757c:	2300      	movs	r3, #0
 800757e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800758e:	4a7b      	ldr	r2, [pc, #492]	; (800777c <low_level_init+0x240>)
 8007590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007594:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007596:	4b79      	ldr	r3, [pc, #484]	; (800777c <low_level_init+0x240>)
 8007598:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800759c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800759e:	4b77      	ldr	r3, [pc, #476]	; (800777c <low_level_init+0x240>)
 80075a0:	4a78      	ldr	r2, [pc, #480]	; (8007784 <low_level_init+0x248>)
 80075a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80075a4:	4b75      	ldr	r3, [pc, #468]	; (800777c <low_level_init+0x240>)
 80075a6:	4a78      	ldr	r2, [pc, #480]	; (8007788 <low_level_init+0x24c>)
 80075a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80075aa:	4b74      	ldr	r3, [pc, #464]	; (800777c <low_level_init+0x240>)
 80075ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80075b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80075b2:	4872      	ldr	r0, [pc, #456]	; (800777c <low_level_init+0x240>)
 80075b4:	f7fa fe40 	bl	8002238 <HAL_ETH_Init>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80075be:	2238      	movs	r2, #56	; 0x38
 80075c0:	2100      	movs	r1, #0
 80075c2:	4872      	ldr	r0, [pc, #456]	; (800778c <low_level_init+0x250>)
 80075c4:	f016 f87c 	bl	801d6c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80075c8:	4b70      	ldr	r3, [pc, #448]	; (800778c <low_level_init+0x250>)
 80075ca:	2221      	movs	r2, #33	; 0x21
 80075cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80075ce:	4b6f      	ldr	r3, [pc, #444]	; (800778c <low_level_init+0x250>)
 80075d0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80075d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80075d6:	4b6d      	ldr	r3, [pc, #436]	; (800778c <low_level_init+0x250>)
 80075d8:	2200      	movs	r2, #0
 80075da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80075dc:	486c      	ldr	r0, [pc, #432]	; (8007790 <low_level_init+0x254>)
 80075de:	f006 fa45 	bl	800da6c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2206      	movs	r2, #6
 80075e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80075ea:	4b64      	ldr	r3, [pc, #400]	; (800777c <low_level_init+0x240>)
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80075f6:	4b61      	ldr	r3, [pc, #388]	; (800777c <low_level_init+0x240>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	785a      	ldrb	r2, [r3, #1]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007602:	4b5e      	ldr	r3, [pc, #376]	; (800777c <low_level_init+0x240>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	789a      	ldrb	r2, [r3, #2]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800760e:	4b5b      	ldr	r3, [pc, #364]	; (800777c <low_level_init+0x240>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	78da      	ldrb	r2, [r3, #3]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800761a:	4b58      	ldr	r3, [pc, #352]	; (800777c <low_level_init+0x240>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	791a      	ldrb	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007626:	4b55      	ldr	r3, [pc, #340]	; (800777c <low_level_init+0x240>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	795a      	ldrb	r2, [r3, #5]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007638:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007640:	f043 030a 	orr.w	r3, r3, #10
 8007644:	b2da      	uxtb	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800764c:	2203      	movs	r2, #3
 800764e:	2100      	movs	r1, #0
 8007650:	2001      	movs	r0, #1
 8007652:	f001 f89d 	bl	8008790 <xQueueGenericCreate>
 8007656:	4603      	mov	r3, r0
 8007658:	4a4e      	ldr	r2, [pc, #312]	; (8007794 <low_level_init+0x258>)
 800765a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800765c:	2203      	movs	r2, #3
 800765e:	2100      	movs	r1, #0
 8007660:	2001      	movs	r0, #1
 8007662:	f001 f895 	bl	8008790 <xQueueGenericCreate>
 8007666:	4603      	mov	r3, r0
 8007668:	4a4b      	ldr	r2, [pc, #300]	; (8007798 <low_level_init+0x25c>)
 800766a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800766c:	4b4b      	ldr	r3, [pc, #300]	; (800779c <low_level_init+0x260>)
 800766e:	f107 0408 	add.w	r4, r7, #8
 8007672:	461d      	mov	r5, r3
 8007674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800767c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fc16 	bl	8007eb8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800768c:	4944      	ldr	r1, [pc, #272]	; (80077a0 <low_level_init+0x264>)
 800768e:	4845      	ldr	r0, [pc, #276]	; (80077a4 <low_level_init+0x268>)
 8007690:	f7fa fa6d 	bl	8001b6e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007694:	4843      	ldr	r0, [pc, #268]	; (80077a4 <low_level_init+0x268>)
 8007696:	f7fa fa9c 	bl	8001bd2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800769a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d165      	bne.n	800776e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80076a2:	4840      	ldr	r0, [pc, #256]	; (80077a4 <low_level_init+0x268>)
 80076a4:	f7fa fb3d 	bl	8001d22 <LAN8742_GetLinkState>
 80076a8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80076ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	dc06      	bgt.n	80076c2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f006 fdb3 	bl	800e220 <netif_set_link_down>
      netif_set_down(netif);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f006 fd4a 	bl	800e154 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80076c0:	e057      	b.n	8007772 <low_level_init+0x236>
      switch (PHYLinkState)
 80076c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076c6:	3b02      	subs	r3, #2
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d82b      	bhi.n	8007724 <low_level_init+0x1e8>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <low_level_init+0x198>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	080076f7 	.word	0x080076f7
 80076dc:	08007707 	.word	0x08007707
 80076e0:	08007717 	.word	0x08007717
        duplex = ETH_FULLDUPLEX_MODE;
 80076e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80076ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80076f4:	e01f      	b.n	8007736 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80076fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007704:	e017      	b.n	8007736 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007706:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800770a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800770e:	2300      	movs	r3, #0
 8007710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007714:	e00f      	b.n	8007736 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007716:	2300      	movs	r3, #0
 8007718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007722:	e008      	b.n	8007736 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800772c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007734:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800773a:	4619      	mov	r1, r3
 800773c:	480f      	ldr	r0, [pc, #60]	; (800777c <low_level_init+0x240>)
 800773e:	f7fb fa5f 	bl	8002c00 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007746:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8007748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800774c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800774e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007752:	4619      	mov	r1, r3
 8007754:	4809      	ldr	r0, [pc, #36]	; (800777c <low_level_init+0x240>)
 8007756:	f7fb fb3d 	bl	8002dd4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800775a:	4808      	ldr	r0, [pc, #32]	; (800777c <low_level_init+0x240>)
 800775c:	f7fa fde8 	bl	8002330 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f006 fc8b 	bl	800e07c <netif_set_up>
    netif_set_link_up(netif);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f006 fd26 	bl	800e1b8 <netif_set_link_up>
}
 800776c:	e001      	b.n	8007772 <low_level_init+0x236>
    Error_Handler();
 800776e:	f7f9 fc03 	bl	8000f78 <Error_Handler>
}
 8007772:	bf00      	nop
 8007774:	37a0      	adds	r7, #160	; 0xa0
 8007776:	46bd      	mov	sp, r7
 8007778:	bdb0      	pop	{r4, r5, r7, pc}
 800777a:	bf00      	nop
 800777c:	2000641c 	.word	0x2000641c
 8007780:	40028000 	.word	0x40028000
 8007784:	20000134 	.word	0x20000134
 8007788:	20000094 	.word	0x20000094
 800778c:	200064cc 	.word	0x200064cc
 8007790:	080221cc 	.word	0x080221cc
 8007794:	20006414 	.word	0x20006414
 8007798:	20006418 	.word	0x20006418
 800779c:	0801ea68 	.word	0x0801ea68
 80077a0:	2000000c 	.word	0x2000000c
 80077a4:	20006504 	.word	0x20006504

080077a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b092      	sub	sp, #72	; 0x48
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80077c0:	f107 030c 	add.w	r3, r7, #12
 80077c4:	2230      	movs	r2, #48	; 0x30
 80077c6:	2100      	movs	r1, #0
 80077c8:	4618      	mov	r0, r3
 80077ca:	f015 ff79 	bl	801d6c0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	2230      	movs	r2, #48	; 0x30
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f015 ff72 	bl	801d6c0 <memset>

  for(q = p; q != NULL; q = q->next)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	643b      	str	r3, [r7, #64]	; 0x40
 80077e0:	e045      	b.n	800786e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80077e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d902      	bls.n	80077ee <low_level_output+0x46>
      return ERR_IF;
 80077e8:	f06f 030b 	mvn.w	r3, #11
 80077ec:	e065      	b.n	80078ba <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80077ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f0:	6859      	ldr	r1, [r3, #4]
 80077f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077f4:	4613      	mov	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	3348      	adds	r3, #72	; 0x48
 80077fe:	443b      	add	r3, r7
 8007800:	3b3c      	subs	r3, #60	; 0x3c
 8007802:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007806:	895b      	ldrh	r3, [r3, #10]
 8007808:	4619      	mov	r1, r3
 800780a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	3348      	adds	r3, #72	; 0x48
 8007816:	443b      	add	r3, r7
 8007818:	3b38      	subs	r3, #56	; 0x38
 800781a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800781c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800781e:	2b00      	cmp	r3, #0
 8007820:	d011      	beq.n	8007846 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007824:	1e5a      	subs	r2, r3, #1
 8007826:	f107 000c 	add.w	r0, r7, #12
 800782a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800782c:	460b      	mov	r3, r1
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	440b      	add	r3, r1
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	18c1      	adds	r1, r0, r3
 8007836:	4613      	mov	r3, r2
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	3348      	adds	r3, #72	; 0x48
 8007840:	443b      	add	r3, r7
 8007842:	3b34      	subs	r3, #52	; 0x34
 8007844:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d109      	bne.n	8007862 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800784e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007850:	4613      	mov	r3, r2
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	3348      	adds	r3, #72	; 0x48
 800785a:	443b      	add	r3, r7
 800785c:	3b34      	subs	r3, #52	; 0x34
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007864:	3301      	adds	r3, #1
 8007866:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	643b      	str	r3, [r7, #64]	; 0x40
 800786e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1b6      	bne.n	80077e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	891b      	ldrh	r3, [r3, #8]
 8007878:	461a      	mov	r2, r3
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <low_level_output+0x11c>)
 800787c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800787e:	4a11      	ldr	r2, [pc, #68]	; (80078c4 <low_level_output+0x11c>)
 8007880:	f107 030c 	add.w	r3, r7, #12
 8007884:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007886:	4a0f      	ldr	r2, [pc, #60]	; (80078c4 <low_level_output+0x11c>)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800788c:	6838      	ldr	r0, [r7, #0]
 800788e:	f007 f94b 	bl	800eb28 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8007892:	490c      	ldr	r1, [pc, #48]	; (80078c4 <low_level_output+0x11c>)
 8007894:	480c      	ldr	r0, [pc, #48]	; (80078c8 <low_level_output+0x120>)
 8007896:	f7fa fe59 	bl	800254c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800789a:	bf00      	nop
 800789c:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <low_level_output+0x124>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fc35 	bl	8008114 <osSemaphoreWait>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f5      	bne.n	800789c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80078b0:	4805      	ldr	r0, [pc, #20]	; (80078c8 <low_level_output+0x120>)
 80078b2:	f7fa ffdf 	bl	8002874 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80078b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3748      	adds	r7, #72	; 0x48
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	200064cc 	.word	0x200064cc
 80078c8:	2000641c 	.word	0x2000641c
 80078cc:	20006418 	.word	0x20006418

080078d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <low_level_input+0x2c>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d105      	bne.n	80078f0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80078e4:	f107 030c 	add.w	r3, r7, #12
 80078e8:	4619      	mov	r1, r3
 80078ea:	4805      	ldr	r0, [pc, #20]	; (8007900 <low_level_input+0x30>)
 80078ec:	f7fa fe8a 	bl	8002604 <HAL_ETH_ReadData>
  }

  return p;
 80078f0:	68fb      	ldr	r3, [r7, #12]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20006410 	.word	0x20006410
 8007900:	2000641c 	.word	0x2000641c

08007904 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800790c:	2300      	movs	r3, #0
 800790e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007914:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <ethernetif_input+0x50>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fbf9 	bl	8008114 <osSemaphoreWait>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f5      	bne.n	8007914 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007928:	68b8      	ldr	r0, [r7, #8]
 800792a:	f7ff ffd1 	bl	80078d0 <low_level_input>
 800792e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	4798      	blx	r3
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f007 f848 	bl	800e9dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1ea      	bne.n	8007928 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007952:	e7df      	b.n	8007914 <ethernetif_input+0x10>
 8007954:	20006414 	.word	0x20006414

08007958 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <ethernetif_init+0x1c>
 8007966:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <ethernetif_init+0x48>)
 8007968:	f240 12ef 	movw	r2, #495	; 0x1ef
 800796c:	490d      	ldr	r1, [pc, #52]	; (80079a4 <ethernetif_init+0x4c>)
 800796e:	480e      	ldr	r0, [pc, #56]	; (80079a8 <ethernetif_init+0x50>)
 8007970:	f015 feae 	bl	801d6d0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2273      	movs	r2, #115	; 0x73
 8007978:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2274      	movs	r2, #116	; 0x74
 8007980:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <ethernetif_init+0x54>)
 8007988:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <ethernetif_init+0x58>)
 800798e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fdd3 	bl	800753c <low_level_init>

  return ERR_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	0801ea84 	.word	0x0801ea84
 80079a4:	0801eaa0 	.word	0x0801eaa0
 80079a8:	0801eab0 	.word	0x0801eab0
 80079ac:	080161f1 	.word	0x080161f1
 80079b0:	080077a9 	.word	0x080077a9

080079b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	4809      	ldr	r0, [pc, #36]	; (80079e8 <pbuf_free_custom+0x34>)
 80079c4:	f006 f942 	bl	800dc4c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <pbuf_free_custom+0x38>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d107      	bne.n	80079e0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80079d0:	4b06      	ldr	r3, [pc, #24]	; (80079ec <pbuf_free_custom+0x38>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80079d6:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <pbuf_free_custom+0x3c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fbe8 	bl	80081b0 <osSemaphoreRelease>
  }
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	080221cc 	.word	0x080221cc
 80079ec:	20006410 	.word	0x20006410
 80079f0:	20006414 	.word	0x20006414

080079f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80079f8:	f7fa fa3c 	bl	8001e74 <HAL_GetTick>
 80079fc:	4603      	mov	r3, r0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08e      	sub	sp, #56	; 0x38
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	609a      	str	r2, [r3, #8]
 8007a18:	60da      	str	r2, [r3, #12]
 8007a1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a52      	ldr	r2, [pc, #328]	; (8007b6c <HAL_ETH_MspInit+0x168>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	f040 809e 	bne.w	8007b64 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007a28:	4b51      	ldr	r3, [pc, #324]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	4a50      	ldr	r2, [pc, #320]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a32:	6313      	str	r3, [r2, #48]	; 0x30
 8007a34:	4b4e      	ldr	r3, [pc, #312]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3c:	623b      	str	r3, [r7, #32]
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	4b4b      	ldr	r3, [pc, #300]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	4a4a      	ldr	r2, [pc, #296]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8007a4c:	4b48      	ldr	r3, [pc, #288]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	4b45      	ldr	r3, [pc, #276]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	4a44      	ldr	r2, [pc, #272]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a62:	6313      	str	r3, [r2, #48]	; 0x30
 8007a64:	4b42      	ldr	r3, [pc, #264]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a70:	4b3f      	ldr	r3, [pc, #252]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	4a3e      	ldr	r2, [pc, #248]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a76:	f043 0304 	orr.w	r3, r3, #4
 8007a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8007a7c:	4b3c      	ldr	r3, [pc, #240]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a88:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	4a38      	ldr	r2, [pc, #224]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	6313      	str	r3, [r2, #48]	; 0x30
 8007a94:	4b36      	ldr	r3, [pc, #216]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	613b      	str	r3, [r7, #16]
 8007a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aa0:	4b33      	ldr	r3, [pc, #204]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa4:	4a32      	ldr	r2, [pc, #200]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007aa6:	f043 0302 	orr.w	r3, r3, #2
 8007aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8007aac:	4b30      	ldr	r3, [pc, #192]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ab8:	4b2d      	ldr	r3, [pc, #180]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	4a2c      	ldr	r2, [pc, #176]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ac4:	4b2a      	ldr	r3, [pc, #168]	; (8007b70 <HAL_ETH_MspInit+0x16c>)
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	60bb      	str	r3, [r7, #8]
 8007ace:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007ad0:	2332      	movs	r3, #50	; 0x32
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007adc:	2303      	movs	r3, #3
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ae0:	230b      	movs	r3, #11
 8007ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4822      	ldr	r0, [pc, #136]	; (8007b74 <HAL_ETH_MspInit+0x170>)
 8007aec:	f7fb fdf2 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007af0:	2386      	movs	r3, #134	; 0x86
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af4:	2302      	movs	r3, #2
 8007af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007afc:	2303      	movs	r3, #3
 8007afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b00:	230b      	movs	r3, #11
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b08:	4619      	mov	r1, r3
 8007b0a:	481b      	ldr	r0, [pc, #108]	; (8007b78 <HAL_ETH_MspInit+0x174>)
 8007b0c:	f7fb fde2 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b16:	2302      	movs	r3, #2
 8007b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b22:	230b      	movs	r3, #11
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4813      	ldr	r0, [pc, #76]	; (8007b7c <HAL_ETH_MspInit+0x178>)
 8007b2e:	f7fb fdd1 	bl	80036d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007b32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b40:	2303      	movs	r3, #3
 8007b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b44:	230b      	movs	r3, #11
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	480c      	ldr	r0, [pc, #48]	; (8007b80 <HAL_ETH_MspInit+0x17c>)
 8007b50:	f7fb fdc0 	bl	80036d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007b54:	2200      	movs	r2, #0
 8007b56:	2105      	movs	r1, #5
 8007b58:	203d      	movs	r0, #61	; 0x3d
 8007b5a:	f7fa fa97 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007b5e:	203d      	movs	r0, #61	; 0x3d
 8007b60:	f7fa fab0 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007b64:	bf00      	nop
 8007b66:	3738      	adds	r7, #56	; 0x38
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40028000 	.word	0x40028000
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40020800 	.word	0x40020800
 8007b78:	40020000 	.word	0x40020000
 8007b7c:	40020400 	.word	0x40020400
 8007b80:	40021800 	.word	0x40021800

08007b84 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007b88:	4802      	ldr	r0, [pc, #8]	; (8007b94 <ETH_PHY_IO_Init+0x10>)
 8007b8a:	f7fb f93d 	bl	8002e08 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	2000641c 	.word	0x2000641c

08007b98 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
  return 0;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	68f9      	ldr	r1, [r7, #12]
 8007bba:	4807      	ldr	r0, [pc, #28]	; (8007bd8 <ETH_PHY_IO_ReadReg+0x30>)
 8007bbc:	f7fa ff8c 	bl	8002ad8 <HAL_ETH_ReadPHYRegister>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bca:	e000      	b.n	8007bce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	2000641c 	.word	0x2000641c

08007bdc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	68f9      	ldr	r1, [r7, #12]
 8007bee:	4807      	ldr	r0, [pc, #28]	; (8007c0c <ETH_PHY_IO_WriteReg+0x30>)
 8007bf0:	f7fa ffbd 	bl	8002b6e <HAL_ETH_WritePHYRegister>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bfe:	e000      	b.n	8007c02 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000641c 	.word	0x2000641c

08007c10 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007c14:	f7fa f92e 	bl	8001e74 <HAL_GetTick>
 8007c18:	4603      	mov	r3, r0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b0a0      	sub	sp, #128	; 0x80
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007c28:	f107 0308 	add.w	r3, r7, #8
 8007c2c:	2264      	movs	r2, #100	; 0x64
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f015 fd45 	bl	801d6c0 <memset>
  int32_t PHYLinkState = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c3e:	2300      	movs	r3, #0
 8007c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c42:	2300      	movs	r3, #0
 8007c44:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007c4a:	483a      	ldr	r0, [pc, #232]	; (8007d34 <ethernet_link_thread+0x114>)
 8007c4c:	f7fa f869 	bl	8001d22 <LAN8742_GetLinkState>
 8007c50:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c58:	089b      	lsrs	r3, r3, #2
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00c      	beq.n	8007c7e <ethernet_link_thread+0x5e>
 8007c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	dc09      	bgt.n	8007c7e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007c6a:	4833      	ldr	r0, [pc, #204]	; (8007d38 <ethernet_link_thread+0x118>)
 8007c6c:	f7fa fbee 	bl	800244c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007c70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c72:	f006 fa6f 	bl	800e154 <netif_set_down>
    netif_set_link_down(netif);
 8007c76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c78:	f006 fad2 	bl	800e220 <netif_set_link_down>
 8007c7c:	e055      	b.n	8007d2a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d14e      	bne.n	8007d2a <ethernet_link_thread+0x10a>
 8007c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	dd4b      	ble.n	8007d2a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c94:	3b02      	subs	r3, #2
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d82a      	bhi.n	8007cf0 <ethernet_link_thread+0xd0>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <ethernet_link_thread+0x80>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cc3 	.word	0x08007cc3
 8007ca8:	08007cd3 	.word	0x08007cd3
 8007cac:	08007ce3 	.word	0x08007ce3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007cb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cb4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007cc0:	e017      	b.n	8007cf2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007cc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007cd0:	e00f      	b.n	8007cf2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cd6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007ce0:	e007      	b.n	8007cf2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007cea:	2301      	movs	r3, #1
 8007cec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007cee:	e000      	b.n	8007cf2 <ethernet_link_thread+0xd2>
    default:
      break;
 8007cf0:	bf00      	nop
    }

    if(linkchanged)
 8007cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d018      	beq.n	8007d2a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007cf8:	f107 0308 	add.w	r3, r7, #8
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	480e      	ldr	r0, [pc, #56]	; (8007d38 <ethernet_link_thread+0x118>)
 8007d00:	f7fa ff7e 	bl	8002c00 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d06:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d0a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007d0c:	f107 0308 	add.w	r3, r7, #8
 8007d10:	4619      	mov	r1, r3
 8007d12:	4809      	ldr	r0, [pc, #36]	; (8007d38 <ethernet_link_thread+0x118>)
 8007d14:	f7fb f85e 	bl	8002dd4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007d18:	4807      	ldr	r0, [pc, #28]	; (8007d38 <ethernet_link_thread+0x118>)
 8007d1a:	f7fa fb09 	bl	8002330 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007d1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d20:	f006 f9ac 	bl	800e07c <netif_set_up>
      netif_set_link_up(netif);
 8007d24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d26:	f006 fa47 	bl	800e1b8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007d2a:	2064      	movs	r0, #100	; 0x64
 8007d2c:	f000 f910 	bl	8007f50 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007d30:	e78b      	b.n	8007c4a <ethernet_link_thread+0x2a>
 8007d32:	bf00      	nop
 8007d34:	20006504 	.word	0x20006504
 8007d38:	2000641c 	.word	0x2000641c

08007d3c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007d44:	4812      	ldr	r0, [pc, #72]	; (8007d90 <HAL_ETH_RxAllocateCallback+0x54>)
 8007d46:	f005 ff0d 	bl	800db64 <memp_malloc_pool>
 8007d4a:	60f8      	str	r0, [r7, #12]
  if (p)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d014      	beq.n	8007d7c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f103 0220 	add.w	r2, r3, #32
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a0d      	ldr	r2, [pc, #52]	; (8007d94 <HAL_ETH_RxAllocateCallback+0x58>)
 8007d60:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007d6a:	9201      	str	r2, [sp, #4]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2241      	movs	r2, #65	; 0x41
 8007d72:	2100      	movs	r1, #0
 8007d74:	2000      	movs	r0, #0
 8007d76:	f006 fc77 	bl	800e668 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007d7a:	e005      	b.n	8007d88 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007d7c:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
}
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	080221cc 	.word	0x080221cc
 8007d94:	080079b5 	.word	0x080079b5
 8007d98:	20006410 	.word	0x20006410

08007d9c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3b20      	subs	r3, #32
 8007dba:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	887a      	ldrh	r2, [r7, #2]
 8007dcc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	e003      	b.n	8007de6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	e009      	b.n	8007e08 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	891a      	ldrh	r2, [r3, #8]
 8007df8:	887b      	ldrh	r3, [r7, #2]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f2      	bne.n	8007df4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fb2e 	bl	8007474 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007e18:	bf00      	nop
 8007e1a:	3720      	adds	r7, #32
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f006 fdd7 	bl	800e9dc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e48:	2b84      	cmp	r3, #132	; 0x84
 8007e4a:	d005      	beq.n	8007e58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	3303      	adds	r3, #3
 8007e56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e58:	68fb      	ldr	r3, [r7, #12]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e6c:	f3ef 8305 	mrs	r3, IPSR
 8007e70:	607b      	str	r3, [r7, #4]
  return(result);
 8007e72:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bf14      	ite	ne
 8007e78:	2301      	movne	r3, #1
 8007e7a:	2300      	moveq	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e8e:	f001 fd73 	bl	8009978 <vTaskStartScheduler>
  
  return osOK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007e9c:	f7ff ffe3 	bl	8007e66 <inHandlerMode>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007ea6:	f001 fe87 	bl	8009bb8 <xTaskGetTickCountFromISR>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	e002      	b.n	8007eb4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007eae:	f001 fe73 	bl	8009b98 <xTaskGetTickCount>
 8007eb2:	4603      	mov	r3, r0
  }
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eba:	b089      	sub	sp, #36	; 0x24
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d020      	beq.n	8007f0c <osThreadCreate+0x54>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01c      	beq.n	8007f0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685c      	ldr	r4, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681d      	ldr	r5, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691e      	ldr	r6, [r3, #16]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff ffa6 	bl	8007e36 <makeFreeRtosPriority>
 8007eea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ef4:	9202      	str	r2, [sp, #8]
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	9100      	str	r1, [sp, #0]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	4632      	mov	r2, r6
 8007efe:	4629      	mov	r1, r5
 8007f00:	4620      	mov	r0, r4
 8007f02:	f001 fb67 	bl	80095d4 <xTaskCreateStatic>
 8007f06:	4603      	mov	r3, r0
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	e01c      	b.n	8007f46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685c      	ldr	r4, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f18:	b29e      	uxth	r6, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff ff88 	bl	8007e36 <makeFreeRtosPriority>
 8007f26:	4602      	mov	r2, r0
 8007f28:	f107 030c 	add.w	r3, r7, #12
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	9200      	str	r2, [sp, #0]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	4632      	mov	r2, r6
 8007f34:	4629      	mov	r1, r5
 8007f36:	4620      	mov	r0, r4
 8007f38:	f001 fbaf 	bl	800969a <xTaskCreate>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d001      	beq.n	8007f46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	e000      	b.n	8007f48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f46:	68fb      	ldr	r3, [r7, #12]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <osDelay+0x16>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	e000      	b.n	8007f68 <osDelay+0x18>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f001 fccf 	bl	800990c <vTaskDelay>
  
  return osOK;
 8007f6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d007      	beq.n	8007f98 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	2001      	movs	r0, #1
 8007f90:	f000 fc91 	bl	80088b6 <xQueueCreateMutexStatic>
 8007f94:	4603      	mov	r3, r0
 8007f96:	e003      	b.n	8007fa0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f000 fc74 	bl	8008886 <xQueueCreateMutex>
 8007f9e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <osMutexWait+0x18>
    return osErrorParameter;
 8007fbc:	2380      	movs	r3, #128	; 0x80
 8007fbe:	e03a      	b.n	8008036 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fca:	d103      	bne.n	8007fd4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	e009      	b.n	8007fe8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d006      	beq.n	8007fe8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <osMutexWait+0x40>
      ticks = 1;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007fe8:	f7ff ff3d 	bl	8007e66 <inHandlerMode>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d017      	beq.n	8008022 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f8ac 	bl	8009158 <xQueueReceiveFromISR>
 8008000:	4603      	mov	r3, r0
 8008002:	2b01      	cmp	r3, #1
 8008004:	d001      	beq.n	800800a <osMutexWait+0x62>
      return osErrorOS;
 8008006:	23ff      	movs	r3, #255	; 0xff
 8008008:	e015      	b.n	8008036 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d011      	beq.n	8008034 <osMutexWait+0x8c>
 8008010:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <osMutexWait+0x98>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e008      	b.n	8008034 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 ff83 	bl	8008f30 <xQueueSemaphoreTake>
 800802a:	4603      	mov	r3, r0
 800802c:	2b01      	cmp	r3, #1
 800802e:	d001      	beq.n	8008034 <osMutexWait+0x8c>
    return osErrorOS;
 8008030:	23ff      	movs	r3, #255	; 0xff
 8008032:	e000      	b.n	8008036 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008050:	2300      	movs	r3, #0
 8008052:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008054:	f7ff ff07 	bl	8007e66 <inHandlerMode>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d016      	beq.n	800808c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800805e:	f107 0308 	add.w	r3, r7, #8
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fde7 	bl	8008c38 <xQueueGiveFromISR>
 800806a:	4603      	mov	r3, r0
 800806c:	2b01      	cmp	r3, #1
 800806e:	d001      	beq.n	8008074 <osMutexRelease+0x30>
      return osErrorOS;
 8008070:	23ff      	movs	r3, #255	; 0xff
 8008072:	e017      	b.n	80080a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d013      	beq.n	80080a2 <osMutexRelease+0x5e>
 800807a:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <osMutexRelease+0x68>)
 800807c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	e00a      	b.n	80080a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800808c:	2300      	movs	r3, #0
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fc2a 	bl	80088ec <xQueueGenericSend>
 8008098:	4603      	mov	r3, r0
 800809a:	2b01      	cmp	r3, #1
 800809c:	d001      	beq.n	80080a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800809e:	23ff      	movs	r3, #255	; 0xff
 80080a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80080a2:	68fb      	ldr	r3, [r7, #12]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00f      	beq.n	80080e2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d10a      	bne.n	80080de <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2203      	movs	r2, #3
 80080ce:	9200      	str	r2, [sp, #0]
 80080d0:	2200      	movs	r2, #0
 80080d2:	2100      	movs	r1, #0
 80080d4:	2001      	movs	r0, #1
 80080d6:	f000 fad9 	bl	800868c <xQueueGenericCreateStatic>
 80080da:	4603      	mov	r3, r0
 80080dc:	e016      	b.n	800810c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	e014      	b.n	800810c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d110      	bne.n	800810a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80080e8:	2203      	movs	r2, #3
 80080ea:	2100      	movs	r1, #0
 80080ec:	2001      	movs	r0, #1
 80080ee:	f000 fb4f 	bl	8008790 <xQueueGenericCreate>
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <osSemaphoreCreate+0x56>
 80080fa:	2300      	movs	r3, #0
 80080fc:	2200      	movs	r2, #0
 80080fe:	2100      	movs	r1, #0
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fbf3 	bl	80088ec <xQueueGenericSend>
      return sema;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	e000      	b.n	800810c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800810a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800811e:	2300      	movs	r3, #0
 8008120:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	e03a      	b.n	80081a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008136:	d103      	bne.n	8008140 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	e009      	b.n	8008154 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d006      	beq.n	8008154 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <osSemaphoreWait+0x40>
      ticks = 1;
 8008150:	2301      	movs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008154:	f7ff fe87 	bl	8007e66 <inHandlerMode>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d017      	beq.n	800818e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800815e:	f107 0308 	add.w	r3, r7, #8
 8008162:	461a      	mov	r2, r3
 8008164:	2100      	movs	r1, #0
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fff6 	bl	8009158 <xQueueReceiveFromISR>
 800816c:	4603      	mov	r3, r0
 800816e:	2b01      	cmp	r3, #1
 8008170:	d001      	beq.n	8008176 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008172:	23ff      	movs	r3, #255	; 0xff
 8008174:	e015      	b.n	80081a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d011      	beq.n	80081a0 <osSemaphoreWait+0x8c>
 800817c:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <osSemaphoreWait+0x98>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	e008      	b.n	80081a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fecd 	bl	8008f30 <xQueueSemaphoreTake>
 8008196:	4603      	mov	r3, r0
 8008198:	2b01      	cmp	r3, #1
 800819a:	d001      	beq.n	80081a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800819c:	23ff      	movs	r3, #255	; 0xff
 800819e:	e000      	b.n	80081a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	e000ed04 	.word	0xe000ed04

080081b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80081bc:	2300      	movs	r3, #0
 80081be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80081c0:	f7ff fe51 	bl	8007e66 <inHandlerMode>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d016      	beq.n	80081f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80081ca:	f107 0308 	add.w	r3, r7, #8
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fd31 	bl	8008c38 <xQueueGiveFromISR>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d001      	beq.n	80081e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80081dc:	23ff      	movs	r3, #255	; 0xff
 80081de:	e017      	b.n	8008210 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d013      	beq.n	800820e <osSemaphoreRelease+0x5e>
 80081e6:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <osSemaphoreRelease+0x68>)
 80081e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	e00a      	b.n	800820e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80081f8:	2300      	movs	r3, #0
 80081fa:	2200      	movs	r2, #0
 80081fc:	2100      	movs	r1, #0
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fb74 	bl	80088ec <xQueueGenericSend>
 8008204:	4603      	mov	r3, r0
 8008206:	2b01      	cmp	r3, #1
 8008208:	d001      	beq.n	800820e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800820a:	23ff      	movs	r3, #255	; 0xff
 800820c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008224:	f7ff fe1f 	bl	8007e66 <inHandlerMode>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800822e:	2382      	movs	r3, #130	; 0x82
 8008230:	e003      	b.n	800823a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f856 	bl	80092e4 <vQueueDelete>

  return osOK; 
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008242:	b590      	push	{r4, r7, lr}
 8008244:	b085      	sub	sp, #20
 8008246:	af02      	add	r7, sp, #8
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d011      	beq.n	8008278 <osMessageCreate+0x36>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00d      	beq.n	8008278 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6859      	ldr	r1, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	2400      	movs	r4, #0
 800826e:	9400      	str	r4, [sp, #0]
 8008270:	f000 fa0c 	bl	800868c <xQueueGenericCreateStatic>
 8008274:	4603      	mov	r3, r0
 8008276:	e008      	b.n	800828a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	4619      	mov	r1, r3
 8008284:	f000 fa84 	bl	8008790 <xQueueGenericCreate>
 8008288:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	bd90      	pop	{r4, r7, pc}
	...

08008294 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <osMessagePut+0x1e>
    ticks = 1;
 80082ae:	2301      	movs	r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80082b2:	f7ff fdd8 	bl	8007e66 <inHandlerMode>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d018      	beq.n	80082ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80082bc:	f107 0210 	add.w	r2, r7, #16
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	2300      	movs	r3, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fc16 	bl	8008af8 <xQueueGenericSendFromISR>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d001      	beq.n	80082d6 <osMessagePut+0x42>
      return osErrorOS;
 80082d2:	23ff      	movs	r3, #255	; 0xff
 80082d4:	e018      	b.n	8008308 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d014      	beq.n	8008306 <osMessagePut+0x72>
 80082dc:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <osMessagePut+0x7c>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	e00b      	b.n	8008306 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80082ee:	f107 0108 	add.w	r1, r7, #8
 80082f2:	2300      	movs	r3, #0
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 faf8 	bl	80088ec <xQueueGenericSend>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d001      	beq.n	8008306 <osMessagePut+0x72>
      return osErrorOS;
 8008302:	23ff      	movs	r3, #255	; 0xff
 8008304:	e000      	b.n	8008308 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b08b      	sub	sp, #44	; 0x2c
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800832e:	2380      	movs	r3, #128	; 0x80
 8008330:	617b      	str	r3, [r7, #20]
    return event;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	461c      	mov	r4, r3
 8008336:	f107 0314 	add.w	r3, r7, #20
 800833a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800833e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008342:	e054      	b.n	80083ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008352:	d103      	bne.n	800835c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
 800835a:	e009      	b.n	8008370 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d006      	beq.n	8008370 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <osMessageGet+0x5c>
      ticks = 1;
 800836c:	2301      	movs	r3, #1
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008370:	f7ff fd79 	bl	8007e66 <inHandlerMode>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01c      	beq.n	80083b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800837a:	f107 0220 	add.w	r2, r7, #32
 800837e:	f107 0314 	add.w	r3, r7, #20
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	68b8      	ldr	r0, [r7, #8]
 8008388:	f000 fee6 	bl	8009158 <xQueueReceiveFromISR>
 800838c:	4603      	mov	r3, r0
 800838e:	2b01      	cmp	r3, #1
 8008390:	d102      	bne.n	8008398 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008392:	2310      	movs	r3, #16
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	e001      	b.n	800839c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01d      	beq.n	80083de <osMessageGet+0xca>
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <osMessageGet+0xe4>)
 80083a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	e014      	b.n	80083de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80083b4:	f107 0314 	add.w	r3, r7, #20
 80083b8:	3304      	adds	r3, #4
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	4619      	mov	r1, r3
 80083be:	68b8      	ldr	r0, [r7, #8]
 80083c0:	f000 fcd0 	bl	8008d64 <xQueueReceive>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d102      	bne.n	80083d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80083ca:	2310      	movs	r3, #16
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	e006      	b.n	80083de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <osMessageGet+0xc6>
 80083d6:	2300      	movs	r3, #0
 80083d8:	e000      	b.n	80083dc <osMessageGet+0xc8>
 80083da:	2340      	movs	r3, #64	; 0x40
 80083dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	461c      	mov	r4, r3
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	372c      	adds	r7, #44	; 0x2c
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd90      	pop	{r4, r7, pc}
 80083f6:	bf00      	nop
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008404:	f7ff fd2f 	bl	8007e66 <inHandlerMode>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 ff48 	bl	80092a4 <uxQueueMessagesWaitingFromISR>
 8008414:	4603      	mov	r3, r0
 8008416:	e003      	b.n	8008420 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 ff23 	bl	8009264 <uxQueueMessagesWaiting>
 800841e:	4603      	mov	r3, r0
  }
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008430:	f7ff fd19 	bl	8007e66 <inHandlerMode>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <osMessageDelete+0x16>
    return osErrorISR;
 800843a:	2382      	movs	r3, #130	; 0x82
 800843c:	e003      	b.n	8008446 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 ff50 	bl	80092e4 <vQueueDelete>

  return osOK; 
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f103 0208 	add.w	r2, r3, #8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008466:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f103 0208 	add.w	r2, r3, #8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f103 0208 	add.w	r2, r3, #8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008506:	d103      	bne.n	8008510 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e00c      	b.n	800852a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3308      	adds	r3, #8
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	e002      	b.n	800851e <vListInsert+0x2e>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	429a      	cmp	r2, r3
 8008528:	d2f6      	bcs.n	8008518 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6892      	ldr	r2, [r2, #8]
 8008578:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	6852      	ldr	r2, [r2, #4]
 8008582:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	429a      	cmp	r2, r3
 800858c:	d103      	bne.n	8008596 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	1e5a      	subs	r2, r3, #1
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
	...

080085b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10c      	bne.n	80085e6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	b672      	cpsid	i
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	b662      	cpsie	i
 80085e0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80085e6:	f002 f949 	bl	800a87c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f2:	68f9      	ldr	r1, [r7, #12]
 80085f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085f6:	fb01 f303 	mul.w	r3, r1, r3
 80085fa:	441a      	add	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008616:	3b01      	subs	r3, #1
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800861c:	fb01 f303 	mul.w	r3, r1, r3
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	22ff      	movs	r2, #255	; 0xff
 800862a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	22ff      	movs	r2, #255	; 0xff
 8008632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d114      	bne.n	8008666 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01a      	beq.n	800867a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3310      	adds	r3, #16
 8008648:	4618      	mov	r0, r3
 800864a:	f001 fc05 	bl	8009e58 <xTaskRemoveFromEventList>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d012      	beq.n	800867a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <xQueueGenericReset+0xd0>)
 8008656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	e009      	b.n	800867a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3310      	adds	r3, #16
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff feef 	bl	800844e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3324      	adds	r3, #36	; 0x24
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff feea 	bl	800844e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800867a:	f002 f933 	bl	800a8e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800867e:	2301      	movs	r3, #1
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08e      	sub	sp, #56	; 0x38
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10c      	bne.n	80086ba <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	b672      	cpsid	i
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	b662      	cpsie	i
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10c      	bne.n	80086da <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	b672      	cpsid	i
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	b662      	cpsie	i
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <xQueueGenericCreateStatic+0x5a>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <xQueueGenericCreateStatic+0x5e>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueGenericCreateStatic+0x60>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10c      	bne.n	800870a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	623b      	str	r3, [r7, #32]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <xQueueGenericCreateStatic+0x8a>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <xQueueGenericCreateStatic+0x8e>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueGenericCreateStatic+0x90>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10c      	bne.n	800873a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	b672      	cpsid	i
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	b662      	cpsie	i
 8008734:	61fb      	str	r3, [r7, #28]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800873a:	2348      	movs	r3, #72	; 0x48
 800873c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b48      	cmp	r3, #72	; 0x48
 8008742:	d00c      	beq.n	800875e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	b672      	cpsid	i
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	b662      	cpsie	i
 8008758:	61bb      	str	r3, [r7, #24]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800875e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00d      	beq.n	8008786 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008772:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	4613      	mov	r3, r2
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 f847 	bl	8008814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008788:	4618      	mov	r0, r3
 800878a:	3730      	adds	r7, #48	; 0x30
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08a      	sub	sp, #40	; 0x28
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10c      	bne.n	80087be <xQueueGenericCreate+0x2e>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	b672      	cpsid	i
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	b662      	cpsie	i
 80087b8:	613b      	str	r3, [r7, #16]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	e004      	b.n	80087d4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	fb02 f303 	mul.w	r3, r2, r3
 80087d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	3348      	adds	r3, #72	; 0x48
 80087d8:	4618      	mov	r0, r3
 80087da:	f002 f97b 	bl	800aad4 <pvPortMalloc>
 80087de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d011      	beq.n	800880a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	3348      	adds	r3, #72	; 0x48
 80087ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087f8:	79fa      	ldrb	r2, [r7, #7]
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f805 	bl	8008814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800880a:	69bb      	ldr	r3, [r7, #24]
	}
 800880c:	4618      	mov	r0, r3
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	e002      	b.n	8008836 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008842:	2101      	movs	r1, #1
 8008844:	69b8      	ldr	r0, [r7, #24]
 8008846:	f7ff feb7 	bl	80085b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00e      	beq.n	800887e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008872:	2300      	movs	r3, #0
 8008874:	2200      	movs	r2, #0
 8008876:	2100      	movs	r1, #0
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f837 	bl	80088ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008886:	b580      	push	{r7, lr}
 8008888:	b086      	sub	sp, #24
 800888a:	af00      	add	r7, sp, #0
 800888c:	4603      	mov	r3, r0
 800888e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008890:	2301      	movs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	2300      	movs	r3, #0
 8008896:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	461a      	mov	r2, r3
 800889c:	6939      	ldr	r1, [r7, #16]
 800889e:	6978      	ldr	r0, [r7, #20]
 80088a0:	f7ff ff76 	bl	8008790 <xQueueGenericCreate>
 80088a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f7ff ffd3 	bl	8008852 <prvInitialiseMutex>

		return xNewQueue;
 80088ac:	68fb      	ldr	r3, [r7, #12]
	}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b088      	sub	sp, #32
 80088ba:	af02      	add	r7, sp, #8
 80088bc:	4603      	mov	r3, r0
 80088be:	6039      	str	r1, [r7, #0]
 80088c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088c2:	2301      	movs	r3, #1
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	2300      	movs	r3, #0
 80088c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	2200      	movs	r2, #0
 80088d2:	6939      	ldr	r1, [r7, #16]
 80088d4:	6978      	ldr	r0, [r7, #20]
 80088d6:	f7ff fed9 	bl	800868c <xQueueGenericCreateStatic>
 80088da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7ff ffb8 	bl	8008852 <prvInitialiseMutex>

		return xNewQueue;
 80088e2:	68fb      	ldr	r3, [r7, #12]
	}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08e      	sub	sp, #56	; 0x38
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088fa:	2300      	movs	r3, #0
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <xQueueGenericSend+0x36>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	b672      	cpsid	i
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	b662      	cpsie	i
 800891c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d103      	bne.n	8008930 <xQueueGenericSend+0x44>
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <xQueueGenericSend+0x48>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <xQueueGenericSend+0x4a>
 8008934:	2300      	movs	r3, #0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10c      	bne.n	8008954 <xQueueGenericSend+0x68>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	b672      	cpsid	i
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	b662      	cpsie	i
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d103      	bne.n	8008962 <xQueueGenericSend+0x76>
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <xQueueGenericSend+0x7a>
 8008962:	2301      	movs	r3, #1
 8008964:	e000      	b.n	8008968 <xQueueGenericSend+0x7c>
 8008966:	2300      	movs	r3, #0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10c      	bne.n	8008986 <xQueueGenericSend+0x9a>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	b672      	cpsid	i
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	b662      	cpsie	i
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008986:	f001 fc2b 	bl	800a1e0 <xTaskGetSchedulerState>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <xQueueGenericSend+0xaa>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <xQueueGenericSend+0xae>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <xQueueGenericSend+0xb0>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10c      	bne.n	80089ba <xQueueGenericSend+0xce>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	b672      	cpsid	i
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	b662      	cpsie	i
 80089b4:	61fb      	str	r3, [r7, #28]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ba:	f001 ff5f 	bl	800a87c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <xQueueGenericSend+0xe4>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d129      	bne.n	8008a24 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	68b9      	ldr	r1, [r7, #8]
 80089d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089d6:	f000 fcc2 	bl	800935e <prvCopyDataToQueue>
 80089da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d010      	beq.n	8008a06 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	3324      	adds	r3, #36	; 0x24
 80089e8:	4618      	mov	r0, r3
 80089ea:	f001 fa35 	bl	8009e58 <xTaskRemoveFromEventList>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d013      	beq.n	8008a1c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80089f4:	4b3f      	ldr	r3, [pc, #252]	; (8008af4 <xQueueGenericSend+0x208>)
 80089f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	e00a      	b.n	8008a1c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a0c:	4b39      	ldr	r3, [pc, #228]	; (8008af4 <xQueueGenericSend+0x208>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a1c:	f001 ff62 	bl	800a8e4 <vPortExitCritical>
				return pdPASS;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e063      	b.n	8008aec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a2a:	f001 ff5b 	bl	800a8e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e05c      	b.n	8008aec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d106      	bne.n	8008a46 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a38:	f107 0314 	add.w	r3, r7, #20
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 fa6f 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a46:	f001 ff4d 	bl	800a8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a4a:	f000 fff9 	bl	8009a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a4e:	f001 ff15 	bl	800a87c <vPortEnterCritical>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a58:	b25b      	sxtb	r3, r3
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a5e:	d103      	bne.n	8008a68 <xQueueGenericSend+0x17c>
 8008a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a74:	d103      	bne.n	8008a7e <xQueueGenericSend+0x192>
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a7e:	f001 ff31 	bl	800a8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a82:	1d3a      	adds	r2, r7, #4
 8008a84:	f107 0314 	add.w	r3, r7, #20
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 fa5e 	bl	8009f4c <xTaskCheckForTimeOut>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d124      	bne.n	8008ae0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a98:	f000 fd59 	bl	800954e <prvIsQueueFull>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d018      	beq.n	8008ad4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	3310      	adds	r3, #16
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 f9ae 	bl	8009e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ab2:	f000 fce4 	bl	800947e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ab6:	f000 ffd1 	bl	8009a5c <xTaskResumeAll>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f47f af7c 	bne.w	80089ba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <xQueueGenericSend+0x208>)
 8008ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	e772      	b.n	80089ba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ad6:	f000 fcd2 	bl	800947e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ada:	f000 ffbf 	bl	8009a5c <xTaskResumeAll>
 8008ade:	e76c      	b.n	80089ba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ae2:	f000 fccc 	bl	800947e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ae6:	f000 ffb9 	bl	8009a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008aea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3738      	adds	r7, #56	; 0x38
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	e000ed04 	.word	0xe000ed04

08008af8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08e      	sub	sp, #56	; 0x38
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10c      	bne.n	8008b2a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	b672      	cpsid	i
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	b662      	cpsie	i
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d103      	bne.n	8008b38 <xQueueGenericSendFromISR+0x40>
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <xQueueGenericSendFromISR+0x44>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <xQueueGenericSendFromISR+0x46>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10c      	bne.n	8008b5c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	b672      	cpsid	i
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	b662      	cpsie	i
 8008b56:	623b      	str	r3, [r7, #32]
}
 8008b58:	bf00      	nop
 8008b5a:	e7fe      	b.n	8008b5a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d103      	bne.n	8008b6a <xQueueGenericSendFromISR+0x72>
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <xQueueGenericSendFromISR+0x76>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <xQueueGenericSendFromISR+0x78>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10c      	bne.n	8008b8e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	b672      	cpsid	i
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	b662      	cpsie	i
 8008b88:	61fb      	str	r3, [r7, #28]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b8e:	f001 ff5d 	bl	800aa4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b92:	f3ef 8211 	mrs	r2, BASEPRI
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	b672      	cpsid	i
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	b662      	cpsie	i
 8008baa:	61ba      	str	r2, [r7, #24]
 8008bac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d302      	bcc.n	8008bc4 <xQueueGenericSendFromISR+0xcc>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d12c      	bne.n	8008c1e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bd4:	f000 fbc3 	bl	800935e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bd8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be0:	d112      	bne.n	8008c08 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d016      	beq.n	8008c18 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	3324      	adds	r3, #36	; 0x24
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f001 f932 	bl	8009e58 <xTaskRemoveFromEventList>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00e      	beq.n	8008c18 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	e007      	b.n	8008c18 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	b25a      	sxtb	r2, r3
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008c1c:	e001      	b.n	8008c22 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	637b      	str	r3, [r7, #52]	; 0x34
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3738      	adds	r7, #56	; 0x38
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	; 0x38
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10c      	bne.n	8008c66 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	b672      	cpsid	i
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	b662      	cpsie	i
 8008c60:	623b      	str	r3, [r7, #32]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	b672      	cpsid	i
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	b662      	cpsie	i
 8008c82:	61fb      	str	r3, [r7, #28]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d103      	bne.n	8008c98 <xQueueGiveFromISR+0x60>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <xQueueGiveFromISR+0x64>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <xQueueGiveFromISR+0x66>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10c      	bne.n	8008cbc <xQueueGiveFromISR+0x84>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	b672      	cpsid	i
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	b662      	cpsie	i
 8008cb6:	61bb      	str	r3, [r7, #24]
}
 8008cb8:	bf00      	nop
 8008cba:	e7fe      	b.n	8008cba <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cbc:	f001 fec6 	bl	800aa4c <vPortValidateInterruptPriority>
	__asm volatile
 8008cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	b672      	cpsid	i
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	b662      	cpsie	i
 8008cd8:	617a      	str	r2, [r7, #20]
 8008cda:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008cdc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d22b      	bcs.n	8008d48 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d0a:	d112      	bne.n	8008d32 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d016      	beq.n	8008d42 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	3324      	adds	r3, #36	; 0x24
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 f89d 	bl	8009e58 <xTaskRemoveFromEventList>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00e      	beq.n	8008d42 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00b      	beq.n	8008d42 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e007      	b.n	8008d42 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d36:	3301      	adds	r3, #1
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	b25a      	sxtb	r2, r3
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d42:	2301      	movs	r3, #1
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
 8008d46:	e001      	b.n	8008d4c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f383 8811 	msr	BASEPRI, r3
}
 8008d56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3738      	adds	r7, #56	; 0x38
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08c      	sub	sp, #48	; 0x30
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10c      	bne.n	8008d98 <xQueueReceive+0x34>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	b672      	cpsid	i
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	b662      	cpsie	i
 8008d92:	623b      	str	r3, [r7, #32]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d103      	bne.n	8008da6 <xQueueReceive+0x42>
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <xQueueReceive+0x46>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <xQueueReceive+0x48>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10c      	bne.n	8008dca <xQueueReceive+0x66>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	b672      	cpsid	i
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	b662      	cpsie	i
 8008dc4:	61fb      	str	r3, [r7, #28]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dca:	f001 fa09 	bl	800a1e0 <xTaskGetSchedulerState>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <xQueueReceive+0x76>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <xQueueReceive+0x7a>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueReceive+0x7c>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10c      	bne.n	8008dfe <xQueueReceive+0x9a>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	b672      	cpsid	i
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	b662      	cpsie	i
 8008df8:	61bb      	str	r3, [r7, #24]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dfe:	f001 fd3d 	bl	800a87c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d01f      	beq.n	8008e4e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e0e:	68b9      	ldr	r1, [r7, #8]
 8008e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e12:	f000 fb0e 	bl	8009432 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	1e5a      	subs	r2, r3, #1
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00f      	beq.n	8008e46 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	3310      	adds	r3, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 f814 	bl	8009e58 <xTaskRemoveFromEventList>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e36:	4b3d      	ldr	r3, [pc, #244]	; (8008f2c <xQueueReceive+0x1c8>)
 8008e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e46:	f001 fd4d 	bl	800a8e4 <vPortExitCritical>
				return pdPASS;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e069      	b.n	8008f22 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e54:	f001 fd46 	bl	800a8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	e062      	b.n	8008f22 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e62:	f107 0310 	add.w	r3, r7, #16
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 f85a 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e70:	f001 fd38 	bl	800a8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e74:	f000 fde4 	bl	8009a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e78:	f001 fd00 	bl	800a87c <vPortEnterCritical>
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e82:	b25b      	sxtb	r3, r3
 8008e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e88:	d103      	bne.n	8008e92 <xQueueReceive+0x12e>
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e98:	b25b      	sxtb	r3, r3
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e9e:	d103      	bne.n	8008ea8 <xQueueReceive+0x144>
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ea8:	f001 fd1c 	bl	800a8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eac:	1d3a      	adds	r2, r7, #4
 8008eae:	f107 0310 	add.w	r3, r7, #16
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f849 	bl	8009f4c <xTaskCheckForTimeOut>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d123      	bne.n	8008f08 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec2:	f000 fb2e 	bl	8009522 <prvIsQueueEmpty>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d017      	beq.n	8008efc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	3324      	adds	r3, #36	; 0x24
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 ff99 	bl	8009e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008edc:	f000 facf 	bl	800947e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ee0:	f000 fdbc 	bl	8009a5c <xTaskResumeAll>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d189      	bne.n	8008dfe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008eea:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <xQueueReceive+0x1c8>)
 8008eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	e780      	b.n	8008dfe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008efe:	f000 fabe 	bl	800947e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f02:	f000 fdab 	bl	8009a5c <xTaskResumeAll>
 8008f06:	e77a      	b.n	8008dfe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0a:	f000 fab8 	bl	800947e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f0e:	f000 fda5 	bl	8009a5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f14:	f000 fb05 	bl	8009522 <prvIsQueueEmpty>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f43f af6f 	beq.w	8008dfe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3730      	adds	r7, #48	; 0x30
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	; 0x38
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10c      	bne.n	8008f66 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	b672      	cpsid	i
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	b662      	cpsie	i
 8008f60:	623b      	str	r3, [r7, #32]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00c      	beq.n	8008f88 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	b672      	cpsid	i
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	b662      	cpsie	i
 8008f82:	61fb      	str	r3, [r7, #28]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f88:	f001 f92a 	bl	800a1e0 <xTaskGetSchedulerState>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <xQueueSemaphoreTake+0x68>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <xQueueSemaphoreTake+0x6c>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <xQueueSemaphoreTake+0x6e>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10c      	bne.n	8008fbc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	61bb      	str	r3, [r7, #24]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fbc:	f001 fc5e 	bl	800a87c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d024      	beq.n	8009016 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	1e5a      	subs	r2, r3, #1
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008fdc:	f001 fac6 	bl	800a56c <pvTaskIncrementMutexHeldCount>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00f      	beq.n	800900e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	3310      	adds	r3, #16
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 ff30 	bl	8009e58 <xTaskRemoveFromEventList>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d007      	beq.n	800900e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ffe:	4b55      	ldr	r3, [pc, #340]	; (8009154 <xQueueSemaphoreTake+0x224>)
 8009000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800900e:	f001 fc69 	bl	800a8e4 <vPortExitCritical>
				return pdPASS;
 8009012:	2301      	movs	r3, #1
 8009014:	e099      	b.n	800914a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d113      	bne.n	8009044 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00c      	beq.n	800903c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	b672      	cpsid	i
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	b662      	cpsie	i
 8009036:	617b      	str	r3, [r7, #20]
}
 8009038:	bf00      	nop
 800903a:	e7fe      	b.n	800903a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800903c:	f001 fc52 	bl	800a8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009040:	2300      	movs	r3, #0
 8009042:	e082      	b.n	800914a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009046:	2b00      	cmp	r3, #0
 8009048:	d106      	bne.n	8009058 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800904a:	f107 030c 	add.w	r3, r7, #12
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ff66 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009058:	f001 fc44 	bl	800a8e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800905c:	f000 fcf0 	bl	8009a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009060:	f001 fc0c 	bl	800a87c <vPortEnterCritical>
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800906a:	b25b      	sxtb	r3, r3
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009070:	d103      	bne.n	800907a <xQueueSemaphoreTake+0x14a>
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009080:	b25b      	sxtb	r3, r3
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009086:	d103      	bne.n	8009090 <xQueueSemaphoreTake+0x160>
 8009088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009090:	f001 fc28 	bl	800a8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009094:	463a      	mov	r2, r7
 8009096:	f107 030c 	add.w	r3, r7, #12
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f000 ff55 	bl	8009f4c <xTaskCheckForTimeOut>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d132      	bne.n	800910e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090aa:	f000 fa3a 	bl	8009522 <prvIsQueueEmpty>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d026      	beq.n	8009102 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80090bc:	f001 fbde 	bl	800a87c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f8a9 	bl	800a21c <xTaskPriorityInherit>
 80090ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80090cc:	f001 fc0a 	bl	800a8e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	3324      	adds	r3, #36	; 0x24
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fe97 	bl	8009e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090e0:	f000 f9cd 	bl	800947e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090e4:	f000 fcba 	bl	8009a5c <xTaskResumeAll>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f47f af66 	bne.w	8008fbc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80090f0:	4b18      	ldr	r3, [pc, #96]	; (8009154 <xQueueSemaphoreTake+0x224>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	e75c      	b.n	8008fbc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009104:	f000 f9bb 	bl	800947e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009108:	f000 fca8 	bl	8009a5c <xTaskResumeAll>
 800910c:	e756      	b.n	8008fbc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800910e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009110:	f000 f9b5 	bl	800947e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009114:	f000 fca2 	bl	8009a5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800911a:	f000 fa02 	bl	8009522 <prvIsQueueEmpty>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	f43f af4b 	beq.w	8008fbc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00d      	beq.n	8009148 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800912c:	f001 fba6 	bl	800a87c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009132:	f000 f8fc 	bl	800932e <prvGetDisinheritPriorityAfterTimeout>
 8009136:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800913e:	4618      	mov	r0, r3
 8009140:	f001 f976 	bl	800a430 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009144:	f001 fbce 	bl	800a8e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800914a:	4618      	mov	r0, r3
 800914c:	3738      	adds	r7, #56	; 0x38
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	e000ed04 	.word	0xe000ed04

08009158 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08e      	sub	sp, #56	; 0x38
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10c      	bne.n	8009188 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	b672      	cpsid	i
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	b662      	cpsie	i
 8009182:	623b      	str	r3, [r7, #32]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <xQueueReceiveFromISR+0x3e>
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <xQueueReceiveFromISR+0x42>
 8009196:	2301      	movs	r3, #1
 8009198:	e000      	b.n	800919c <xQueueReceiveFromISR+0x44>
 800919a:	2300      	movs	r3, #0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10c      	bne.n	80091ba <xQueueReceiveFromISR+0x62>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	b672      	cpsid	i
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	b662      	cpsie	i
 80091b4:	61fb      	str	r3, [r7, #28]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091ba:	f001 fc47 	bl	800aa4c <vPortValidateInterruptPriority>
	__asm volatile
 80091be:	f3ef 8211 	mrs	r2, BASEPRI
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	b672      	cpsid	i
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	b662      	cpsie	i
 80091d6:	61ba      	str	r2, [r7, #24]
 80091d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80091da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d02f      	beq.n	800924a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091f8:	f000 f91b 	bl	8009432 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	1e5a      	subs	r2, r3, #1
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800920c:	d112      	bne.n	8009234 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d016      	beq.n	8009244 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	3310      	adds	r3, #16
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fe1c 	bl	8009e58 <xTaskRemoveFromEventList>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00e      	beq.n	8009244 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e007      	b.n	8009244 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009238:	3301      	adds	r3, #1
 800923a:	b2db      	uxtb	r3, r3
 800923c:	b25a      	sxtb	r2, r3
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009244:	2301      	movs	r3, #1
 8009246:	637b      	str	r3, [r7, #52]	; 0x34
 8009248:	e001      	b.n	800924e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800924a:	2300      	movs	r3, #0
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
 800924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009250:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f383 8811 	msr	BASEPRI, r3
}
 8009258:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800925a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800925c:	4618      	mov	r0, r3
 800925e:	3738      	adds	r7, #56	; 0x38
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10c      	bne.n	800928c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	b672      	cpsid	i
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	b662      	cpsie	i
 8009286:	60bb      	str	r3, [r7, #8]
}
 8009288:	bf00      	nop
 800928a:	e7fe      	b.n	800928a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800928c:	f001 faf6 	bl	800a87c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009296:	f001 fb25 	bl	800a8e4 <vPortExitCritical>

	return uxReturn;
 800929a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10c      	bne.n	80092d0 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	b672      	cpsid	i
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	b662      	cpsie	i
 80092ca:	60fb      	str	r3, [r7, #12]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80092d6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80092d8:	4618      	mov	r0, r3
 80092da:	371c      	adds	r7, #28
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10c      	bne.n	8009310 <vQueueDelete+0x2c>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	b672      	cpsid	i
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	b662      	cpsie	i
 800930a:	60bb      	str	r3, [r7, #8]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 f935 	bl	8009580 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f001 fca1 	bl	800ac68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	2b00      	cmp	r3, #0
 800933c:	d006      	beq.n	800934c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f1c3 0307 	rsb	r3, r3, #7
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	e001      	b.n	8009350 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800934c:	2300      	movs	r3, #0
 800934e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009350:	68fb      	ldr	r3, [r7, #12]
	}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b086      	sub	sp, #24
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10d      	bne.n	8009398 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d14d      	bne.n	8009420 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 ffc7 	bl	800a31c <xTaskPriorityDisinherit>
 800938e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	609a      	str	r2, [r3, #8]
 8009396:	e043      	b.n	8009420 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d119      	bne.n	80093d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6858      	ldr	r0, [r3, #4]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	461a      	mov	r2, r3
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	f014 f97b 	bl	801d6a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	441a      	add	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d32b      	bcc.n	8009420 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	605a      	str	r2, [r3, #4]
 80093d0:	e026      	b.n	8009420 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	68d8      	ldr	r0, [r3, #12]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	461a      	mov	r2, r3
 80093dc:	68b9      	ldr	r1, [r7, #8]
 80093de:	f014 f961 	bl	801d6a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	425b      	negs	r3, r3
 80093ec:	441a      	add	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d207      	bcs.n	800940e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	425b      	negs	r3, r3
 8009408:	441a      	add	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d105      	bne.n	8009420 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	3b01      	subs	r3, #1
 800941e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009428:	697b      	ldr	r3, [r7, #20]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	d018      	beq.n	8009476 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944c:	441a      	add	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	429a      	cmp	r2, r3
 800945c:	d303      	bcc.n	8009466 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68d9      	ldr	r1, [r3, #12]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	461a      	mov	r2, r3
 8009470:	6838      	ldr	r0, [r7, #0]
 8009472:	f014 f917 	bl	801d6a4 <memcpy>
	}
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009486:	f001 f9f9 	bl	800a87c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009490:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009492:	e011      	b.n	80094b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d012      	beq.n	80094c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3324      	adds	r3, #36	; 0x24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fcd9 	bl	8009e58 <xTaskRemoveFromEventList>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094ac:	f000 fdb4 	bl	800a018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dce9      	bgt.n	8009494 <prvUnlockQueue+0x16>
 80094c0:	e000      	b.n	80094c4 <prvUnlockQueue+0x46>
					break;
 80094c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	22ff      	movs	r2, #255	; 0xff
 80094c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094cc:	f001 fa0a 	bl	800a8e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094d0:	f001 f9d4 	bl	800a87c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094dc:	e011      	b.n	8009502 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d012      	beq.n	800950c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3310      	adds	r3, #16
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fcb4 	bl	8009e58 <xTaskRemoveFromEventList>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094f6:	f000 fd8f 	bl	800a018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009506:	2b00      	cmp	r3, #0
 8009508:	dce9      	bgt.n	80094de <prvUnlockQueue+0x60>
 800950a:	e000      	b.n	800950e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800950c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	22ff      	movs	r2, #255	; 0xff
 8009512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009516:	f001 f9e5 	bl	800a8e4 <vPortExitCritical>
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800952a:	f001 f9a7 	bl	800a87c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	e001      	b.n	8009540 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800953c:	2300      	movs	r3, #0
 800953e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009540:	f001 f9d0 	bl	800a8e4 <vPortExitCritical>

	return xReturn;
 8009544:	68fb      	ldr	r3, [r7, #12]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009556:	f001 f991 	bl	800a87c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009562:	429a      	cmp	r2, r3
 8009564:	d102      	bne.n	800956c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009566:	2301      	movs	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	e001      	b.n	8009570 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009570:	f001 f9b8 	bl	800a8e4 <vPortExitCritical>

	return xReturn;
 8009574:	68fb      	ldr	r3, [r7, #12]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e016      	b.n	80095bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800958e:	4a10      	ldr	r2, [pc, #64]	; (80095d0 <vQueueUnregisterQueue+0x50>)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	4413      	add	r3, r2
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	429a      	cmp	r2, r3
 800959c:	d10b      	bne.n	80095b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800959e:	4a0c      	ldr	r2, [pc, #48]	; (80095d0 <vQueueUnregisterQueue+0x50>)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2100      	movs	r1, #0
 80095a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <vQueueUnregisterQueue+0x50>)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	4413      	add	r3, r2
 80095b0:	2200      	movs	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]
				break;
 80095b4:	e006      	b.n	80095c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b07      	cmp	r3, #7
 80095c0:	d9e5      	bls.n	800958e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20006524 	.word	0x20006524

080095d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08e      	sub	sp, #56	; 0x38
 80095d8:	af04      	add	r7, sp, #16
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10c      	bne.n	8009602 <xTaskCreateStatic+0x2e>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	b672      	cpsid	i
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	b662      	cpsie	i
 80095fc:	623b      	str	r3, [r7, #32]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10c      	bne.n	8009622 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	b672      	cpsid	i
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	b662      	cpsie	i
 800961c:	61fb      	str	r3, [r7, #28]
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009622:	2354      	movs	r3, #84	; 0x54
 8009624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2b54      	cmp	r3, #84	; 0x54
 800962a:	d00c      	beq.n	8009646 <xTaskCreateStatic+0x72>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	b672      	cpsid	i
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	b662      	cpsie	i
 8009640:	61bb      	str	r3, [r7, #24]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009646:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	2b00      	cmp	r3, #0
 800964c:	d01e      	beq.n	800968c <xTaskCreateStatic+0xb8>
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01b      	beq.n	800968c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800965c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	2202      	movs	r2, #2
 8009662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009666:	2300      	movs	r3, #0
 8009668:	9303      	str	r3, [sp, #12]
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	f107 0314 	add.w	r3, r7, #20
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	68b9      	ldr	r1, [r7, #8]
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 f850 	bl	8009724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009686:	f000 f8d7 	bl	8009838 <prvAddNewTaskToReadyList>
 800968a:	e001      	b.n	8009690 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800968c:	2300      	movs	r3, #0
 800968e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009690:	697b      	ldr	r3, [r7, #20]
	}
 8009692:	4618      	mov	r0, r3
 8009694:	3728      	adds	r7, #40	; 0x28
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800969a:	b580      	push	{r7, lr}
 800969c:	b08c      	sub	sp, #48	; 0x30
 800969e:	af04      	add	r7, sp, #16
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f001 fa10 	bl	800aad4 <pvPortMalloc>
 80096b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00e      	beq.n	80096da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096bc:	2054      	movs	r0, #84	; 0x54
 80096be:	f001 fa09 	bl	800aad4 <pvPortMalloc>
 80096c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	631a      	str	r2, [r3, #48]	; 0x30
 80096d0:	e005      	b.n	80096de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096d2:	6978      	ldr	r0, [r7, #20]
 80096d4:	f001 fac8 	bl	800ac68 <vPortFree>
 80096d8:	e001      	b.n	80096de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096da:	2300      	movs	r3, #0
 80096dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d017      	beq.n	8009714 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096ec:	88fa      	ldrh	r2, [r7, #6]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	9302      	str	r3, [sp, #8]
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f80e 	bl	8009724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009708:	69f8      	ldr	r0, [r7, #28]
 800970a:	f000 f895 	bl	8009838 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800970e:	2301      	movs	r3, #1
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	e002      	b.n	800971a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009718:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800971a:	69bb      	ldr	r3, [r7, #24]
	}
 800971c:	4618      	mov	r0, r3
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009736:	6879      	ldr	r1, [r7, #4]
 8009738:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800973c:	440b      	add	r3, r1
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00c      	beq.n	8009770 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	b672      	cpsid	i
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	b662      	cpsie	i
 800976a:	617b      	str	r3, [r7, #20]
}
 800976c:	bf00      	nop
 800976e:	e7fe      	b.n	800976e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01f      	beq.n	80097b6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
 800977a:	e012      	b.n	80097a2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	4413      	add	r3, r2
 8009782:	7819      	ldrb	r1, [r3, #0]
 8009784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	3334      	adds	r3, #52	; 0x34
 800978c:	460a      	mov	r2, r1
 800978e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d006      	beq.n	80097aa <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	3301      	adds	r3, #1
 80097a0:	61fb      	str	r3, [r7, #28]
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	2b0f      	cmp	r3, #15
 80097a6:	d9e9      	bls.n	800977c <prvInitialiseNewTask+0x58>
 80097a8:	e000      	b.n	80097ac <prvInitialiseNewTask+0x88>
			{
				break;
 80097aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b4:	e003      	b.n	80097be <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	2b06      	cmp	r3, #6
 80097c2:	d901      	bls.n	80097c8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097c4:	2306      	movs	r3, #6
 80097c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	2200      	movs	r2, #0
 80097d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	3304      	adds	r3, #4
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fe55 	bl	800848e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	3318      	adds	r3, #24
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fe fe50 	bl	800848e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	f1c3 0207 	rsb	r2, r3, #7
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009802:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	2200      	movs	r2, #0
 8009808:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	68f9      	ldr	r1, [r7, #12]
 8009816:	69b8      	ldr	r0, [r7, #24]
 8009818:	f000 ff22 	bl	800a660 <pxPortInitialiseStack>
 800981c:	4602      	mov	r2, r0
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800982c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800982e:	bf00      	nop
 8009830:	3720      	adds	r7, #32
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009840:	f001 f81c 	bl	800a87c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009844:	4b2a      	ldr	r3, [pc, #168]	; (80098f0 <prvAddNewTaskToReadyList+0xb8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3301      	adds	r3, #1
 800984a:	4a29      	ldr	r2, [pc, #164]	; (80098f0 <prvAddNewTaskToReadyList+0xb8>)
 800984c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800984e:	4b29      	ldr	r3, [pc, #164]	; (80098f4 <prvAddNewTaskToReadyList+0xbc>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d109      	bne.n	800986a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009856:	4a27      	ldr	r2, [pc, #156]	; (80098f4 <prvAddNewTaskToReadyList+0xbc>)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800985c:	4b24      	ldr	r3, [pc, #144]	; (80098f0 <prvAddNewTaskToReadyList+0xb8>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d110      	bne.n	8009886 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009864:	f000 fbfc 	bl	800a060 <prvInitialiseTaskLists>
 8009868:	e00d      	b.n	8009886 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800986a:	4b23      	ldr	r3, [pc, #140]	; (80098f8 <prvAddNewTaskToReadyList+0xc0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d109      	bne.n	8009886 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009872:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <prvAddNewTaskToReadyList+0xbc>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	429a      	cmp	r2, r3
 800987e:	d802      	bhi.n	8009886 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009880:	4a1c      	ldr	r2, [pc, #112]	; (80098f4 <prvAddNewTaskToReadyList+0xbc>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009886:	4b1d      	ldr	r3, [pc, #116]	; (80098fc <prvAddNewTaskToReadyList+0xc4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3301      	adds	r3, #1
 800988c:	4a1b      	ldr	r2, [pc, #108]	; (80098fc <prvAddNewTaskToReadyList+0xc4>)
 800988e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	2201      	movs	r2, #1
 8009896:	409a      	lsls	r2, r3
 8009898:	4b19      	ldr	r3, [pc, #100]	; (8009900 <prvAddNewTaskToReadyList+0xc8>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4313      	orrs	r3, r2
 800989e:	4a18      	ldr	r2, [pc, #96]	; (8009900 <prvAddNewTaskToReadyList+0xc8>)
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4a15      	ldr	r2, [pc, #84]	; (8009904 <prvAddNewTaskToReadyList+0xcc>)
 80098b0:	441a      	add	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f7fe fdf5 	bl	80084a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098be:	f001 f811 	bl	800a8e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098c2:	4b0d      	ldr	r3, [pc, #52]	; (80098f8 <prvAddNewTaskToReadyList+0xc0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00e      	beq.n	80098e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098ca:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <prvAddNewTaskToReadyList+0xbc>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d207      	bcs.n	80098e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098d8:	4b0b      	ldr	r3, [pc, #44]	; (8009908 <prvAddNewTaskToReadyList+0xd0>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20006664 	.word	0x20006664
 80098f4:	20006564 	.word	0x20006564
 80098f8:	20006670 	.word	0x20006670
 80098fc:	20006680 	.word	0x20006680
 8009900:	2000666c 	.word	0x2000666c
 8009904:	20006568 	.word	0x20006568
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009914:	2300      	movs	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d019      	beq.n	8009952 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800991e:	4b14      	ldr	r3, [pc, #80]	; (8009970 <vTaskDelay+0x64>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00c      	beq.n	8009940 <vTaskDelay+0x34>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	b672      	cpsid	i
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	b662      	cpsie	i
 800993a:	60bb      	str	r3, [r7, #8]
}
 800993c:	bf00      	nop
 800993e:	e7fe      	b.n	800993e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009940:	f000 f87e 	bl	8009a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009944:	2100      	movs	r1, #0
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fe24 	bl	800a594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800994c:	f000 f886 	bl	8009a5c <xTaskResumeAll>
 8009950:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d107      	bne.n	8009968 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <vTaskDelay+0x68>)
 800995a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	2000668c 	.word	0x2000668c
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b08a      	sub	sp, #40	; 0x28
 800997c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009986:	463a      	mov	r2, r7
 8009988:	1d39      	adds	r1, r7, #4
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	4618      	mov	r0, r3
 8009990:	f7f6 fe40 	bl	8000614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	9202      	str	r2, [sp, #8]
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	2300      	movs	r3, #0
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2300      	movs	r3, #0
 80099a4:	460a      	mov	r2, r1
 80099a6:	4920      	ldr	r1, [pc, #128]	; (8009a28 <vTaskStartScheduler+0xb0>)
 80099a8:	4820      	ldr	r0, [pc, #128]	; (8009a2c <vTaskStartScheduler+0xb4>)
 80099aa:	f7ff fe13 	bl	80095d4 <xTaskCreateStatic>
 80099ae:	4603      	mov	r3, r0
 80099b0:	4a1f      	ldr	r2, [pc, #124]	; (8009a30 <vTaskStartScheduler+0xb8>)
 80099b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099b4:	4b1e      	ldr	r3, [pc, #120]	; (8009a30 <vTaskStartScheduler+0xb8>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	e001      	b.n	80099c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d118      	bne.n	80099fe <vTaskStartScheduler+0x86>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	b672      	cpsid	i
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	b662      	cpsie	i
 80099e0:	613b      	str	r3, [r7, #16]
}
 80099e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099e4:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <vTaskStartScheduler+0xbc>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099ec:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <vTaskStartScheduler+0xc0>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <vTaskStartScheduler+0xc4>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099f8:	f000 fec2 	bl	800a780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099fc:	e010      	b.n	8009a20 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a04:	d10c      	bne.n	8009a20 <vTaskStartScheduler+0xa8>
	__asm volatile
 8009a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0a:	b672      	cpsid	i
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	b662      	cpsie	i
 8009a1a:	60fb      	str	r3, [r7, #12]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <vTaskStartScheduler+0xa6>
}
 8009a20:	bf00      	nop
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	0801ead8 	.word	0x0801ead8
 8009a2c:	0800a031 	.word	0x0800a031
 8009a30:	20006688 	.word	0x20006688
 8009a34:	20006684 	.word	0x20006684
 8009a38:	20006670 	.word	0x20006670
 8009a3c:	20006668 	.word	0x20006668

08009a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <vTaskSuspendAll+0x18>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	4a03      	ldr	r2, [pc, #12]	; (8009a58 <vTaskSuspendAll+0x18>)
 8009a4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009a4e:	bf00      	nop
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	2000668c 	.word	0x2000668c

08009a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a6a:	4b42      	ldr	r3, [pc, #264]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10c      	bne.n	8009a8c <xTaskResumeAll+0x30>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	b672      	cpsid	i
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	b662      	cpsie	i
 8009a86:	603b      	str	r3, [r7, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a8c:	f000 fef6 	bl	800a87c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a90:	4b38      	ldr	r3, [pc, #224]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	4a37      	ldr	r2, [pc, #220]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a9a:	4b36      	ldr	r3, [pc, #216]	; (8009b74 <xTaskResumeAll+0x118>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d161      	bne.n	8009b66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aa2:	4b35      	ldr	r3, [pc, #212]	; (8009b78 <xTaskResumeAll+0x11c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d05d      	beq.n	8009b66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aaa:	e02e      	b.n	8009b0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aac:	4b33      	ldr	r3, [pc, #204]	; (8009b7c <xTaskResumeAll+0x120>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3318      	adds	r3, #24
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe fd52 	bl	8008562 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fd4d 	bl	8008562 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	2201      	movs	r2, #1
 8009ace:	409a      	lsls	r2, r3
 8009ad0:	4b2b      	ldr	r3, [pc, #172]	; (8009b80 <xTaskResumeAll+0x124>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	4a2a      	ldr	r2, [pc, #168]	; (8009b80 <xTaskResumeAll+0x124>)
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4a27      	ldr	r2, [pc, #156]	; (8009b84 <xTaskResumeAll+0x128>)
 8009ae8:	441a      	add	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3304      	adds	r3, #4
 8009aee:	4619      	mov	r1, r3
 8009af0:	4610      	mov	r0, r2
 8009af2:	f7fe fcd9 	bl	80084a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afa:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <xTaskResumeAll+0x12c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d302      	bcc.n	8009b0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009b04:	4b21      	ldr	r3, [pc, #132]	; (8009b8c <xTaskResumeAll+0x130>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b0a:	4b1c      	ldr	r3, [pc, #112]	; (8009b7c <xTaskResumeAll+0x120>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1cc      	bne.n	8009aac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b18:	f000 fb42 	bl	800a1a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b1c:	4b1c      	ldr	r3, [pc, #112]	; (8009b90 <xTaskResumeAll+0x134>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d010      	beq.n	8009b4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b28:	f000 f858 	bl	8009bdc <xTaskIncrementTick>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009b32:	4b16      	ldr	r3, [pc, #88]	; (8009b8c <xTaskResumeAll+0x130>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1f1      	bne.n	8009b28 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009b44:	4b12      	ldr	r3, [pc, #72]	; (8009b90 <xTaskResumeAll+0x134>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b4a:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <xTaskResumeAll+0x130>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d009      	beq.n	8009b66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b52:	2301      	movs	r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b56:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <xTaskResumeAll+0x138>)
 8009b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b66:	f000 febd 	bl	800a8e4 <vPortExitCritical>

	return xAlreadyYielded;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	2000668c 	.word	0x2000668c
 8009b78:	20006664 	.word	0x20006664
 8009b7c:	20006624 	.word	0x20006624
 8009b80:	2000666c 	.word	0x2000666c
 8009b84:	20006568 	.word	0x20006568
 8009b88:	20006564 	.word	0x20006564
 8009b8c:	20006678 	.word	0x20006678
 8009b90:	20006674 	.word	0x20006674
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <xTaskGetTickCount+0x1c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ba4:	687b      	ldr	r3, [r7, #4]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20006668 	.word	0x20006668

08009bb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bbe:	f000 ff45 	bl	800aa4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009bc6:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <xTaskGetTickCountFromISR+0x20>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bcc:	683b      	ldr	r3, [r7, #0]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20006668 	.word	0x20006668

08009bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be6:	4b4f      	ldr	r3, [pc, #316]	; (8009d24 <xTaskIncrementTick+0x148>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 808a 	bne.w	8009d04 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bf0:	4b4d      	ldr	r3, [pc, #308]	; (8009d28 <xTaskIncrementTick+0x14c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bf8:	4a4b      	ldr	r2, [pc, #300]	; (8009d28 <xTaskIncrementTick+0x14c>)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d122      	bne.n	8009c4a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c04:	4b49      	ldr	r3, [pc, #292]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	b672      	cpsid	i
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	b662      	cpsie	i
 8009c22:	603b      	str	r3, [r7, #0]
}
 8009c24:	bf00      	nop
 8009c26:	e7fe      	b.n	8009c26 <xTaskIncrementTick+0x4a>
 8009c28:	4b40      	ldr	r3, [pc, #256]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	4b40      	ldr	r3, [pc, #256]	; (8009d30 <xTaskIncrementTick+0x154>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a3e      	ldr	r2, [pc, #248]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	4a3e      	ldr	r2, [pc, #248]	; (8009d30 <xTaskIncrementTick+0x154>)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	4b3d      	ldr	r3, [pc, #244]	; (8009d34 <xTaskIncrementTick+0x158>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	4a3c      	ldr	r2, [pc, #240]	; (8009d34 <xTaskIncrementTick+0x158>)
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	f000 faab 	bl	800a1a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c4a:	4b3b      	ldr	r3, [pc, #236]	; (8009d38 <xTaskIncrementTick+0x15c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d348      	bcc.n	8009ce6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c54:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d104      	bne.n	8009c68 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5e:	4b36      	ldr	r3, [pc, #216]	; (8009d38 <xTaskIncrementTick+0x15c>)
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c64:	601a      	str	r2, [r3, #0]
					break;
 8009c66:	e03e      	b.n	8009ce6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c68:	4b30      	ldr	r3, [pc, #192]	; (8009d2c <xTaskIncrementTick+0x150>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d203      	bcs.n	8009c88 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c80:	4a2d      	ldr	r2, [pc, #180]	; (8009d38 <xTaskIncrementTick+0x15c>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c86:	e02e      	b.n	8009ce6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fc68 	bl	8008562 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	3318      	adds	r3, #24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe fc5f 	bl	8008562 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	2201      	movs	r2, #1
 8009caa:	409a      	lsls	r2, r3
 8009cac:	4b23      	ldr	r3, [pc, #140]	; (8009d3c <xTaskIncrementTick+0x160>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	4a22      	ldr	r2, [pc, #136]	; (8009d3c <xTaskIncrementTick+0x160>)
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4a1f      	ldr	r2, [pc, #124]	; (8009d40 <xTaskIncrementTick+0x164>)
 8009cc4:	441a      	add	r2, r3
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f7fe fbeb 	bl	80084a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd6:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <xTaskIncrementTick+0x168>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d3b9      	bcc.n	8009c54 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ce4:	e7b6      	b.n	8009c54 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ce6:	4b17      	ldr	r3, [pc, #92]	; (8009d44 <xTaskIncrementTick+0x168>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4914      	ldr	r1, [pc, #80]	; (8009d40 <xTaskIncrementTick+0x164>)
 8009cee:	4613      	mov	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	440b      	add	r3, r1
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d907      	bls.n	8009d0e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	e004      	b.n	8009d0e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d04:	4b10      	ldr	r3, [pc, #64]	; (8009d48 <xTaskIncrementTick+0x16c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	4a0f      	ldr	r2, [pc, #60]	; (8009d48 <xTaskIncrementTick+0x16c>)
 8009d0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <xTaskIncrementTick+0x170>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009d16:	2301      	movs	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d1a:	697b      	ldr	r3, [r7, #20]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	2000668c 	.word	0x2000668c
 8009d28:	20006668 	.word	0x20006668
 8009d2c:	2000661c 	.word	0x2000661c
 8009d30:	20006620 	.word	0x20006620
 8009d34:	2000667c 	.word	0x2000667c
 8009d38:	20006684 	.word	0x20006684
 8009d3c:	2000666c 	.word	0x2000666c
 8009d40:	20006568 	.word	0x20006568
 8009d44:	20006564 	.word	0x20006564
 8009d48:	20006674 	.word	0x20006674
 8009d4c:	20006678 	.word	0x20006678

08009d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d56:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <vTaskSwitchContext+0xa8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d5e:	4b27      	ldr	r3, [pc, #156]	; (8009dfc <vTaskSwitchContext+0xac>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d64:	e041      	b.n	8009dea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009d66:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <vTaskSwitchContext+0xac>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6c:	4b24      	ldr	r3, [pc, #144]	; (8009e00 <vTaskSwitchContext+0xb0>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	fab3 f383 	clz	r3, r3
 8009d78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	f1c3 031f 	rsb	r3, r3, #31
 8009d80:	617b      	str	r3, [r7, #20]
 8009d82:	4920      	ldr	r1, [pc, #128]	; (8009e04 <vTaskSwitchContext+0xb4>)
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10c      	bne.n	8009db0 <vTaskSwitchContext+0x60>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	b672      	cpsid	i
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	b662      	cpsie	i
 8009daa:	607b      	str	r3, [r7, #4]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <vTaskSwitchContext+0x5e>
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4a12      	ldr	r2, [pc, #72]	; (8009e04 <vTaskSwitchContext+0xb4>)
 8009dbc:	4413      	add	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	605a      	str	r2, [r3, #4]
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d104      	bne.n	8009de0 <vTaskSwitchContext+0x90>
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	605a      	str	r2, [r3, #4]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	4a08      	ldr	r2, [pc, #32]	; (8009e08 <vTaskSwitchContext+0xb8>)
 8009de8:	6013      	str	r3, [r2, #0]
}
 8009dea:	bf00      	nop
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	2000668c 	.word	0x2000668c
 8009dfc:	20006678 	.word	0x20006678
 8009e00:	2000666c 	.word	0x2000666c
 8009e04:	20006568 	.word	0x20006568
 8009e08:	20006564 	.word	0x20006564

08009e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10c      	bne.n	8009e36 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	b672      	cpsid	i
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	b662      	cpsie	i
 8009e30:	60fb      	str	r3, [r7, #12]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e36:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <vTaskPlaceOnEventList+0x48>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3318      	adds	r3, #24
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7fe fb56 	bl	80084f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e44:	2101      	movs	r1, #1
 8009e46:	6838      	ldr	r0, [r7, #0]
 8009e48:	f000 fba4 	bl	800a594 <prvAddCurrentTaskToDelayedList>
}
 8009e4c:	bf00      	nop
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	20006564 	.word	0x20006564

08009e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10c      	bne.n	8009e88 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	b672      	cpsid	i
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	b662      	cpsie	i
 8009e82:	60fb      	str	r3, [r7, #12]
}
 8009e84:	bf00      	nop
 8009e86:	e7fe      	b.n	8009e86 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	3318      	adds	r3, #24
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fb68 	bl	8008562 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e92:	4b1d      	ldr	r3, [pc, #116]	; (8009f08 <xTaskRemoveFromEventList+0xb0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d11c      	bne.n	8009ed4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fb5f 	bl	8008562 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	409a      	lsls	r2, r3
 8009eac:	4b17      	ldr	r3, [pc, #92]	; (8009f0c <xTaskRemoveFromEventList+0xb4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	4a16      	ldr	r2, [pc, #88]	; (8009f0c <xTaskRemoveFromEventList+0xb4>)
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4a13      	ldr	r2, [pc, #76]	; (8009f10 <xTaskRemoveFromEventList+0xb8>)
 8009ec4:	441a      	add	r2, r3
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f7fe faeb 	bl	80084a8 <vListInsertEnd>
 8009ed2:	e005      	b.n	8009ee0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	3318      	adds	r3, #24
 8009ed8:	4619      	mov	r1, r3
 8009eda:	480e      	ldr	r0, [pc, #56]	; (8009f14 <xTaskRemoveFromEventList+0xbc>)
 8009edc:	f7fe fae4 	bl	80084a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee4:	4b0c      	ldr	r3, [pc, #48]	; (8009f18 <xTaskRemoveFromEventList+0xc0>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d905      	bls.n	8009efa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <xTaskRemoveFromEventList+0xc4>)
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	e001      	b.n	8009efe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009efe:	697b      	ldr	r3, [r7, #20]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	2000668c 	.word	0x2000668c
 8009f0c:	2000666c 	.word	0x2000666c
 8009f10:	20006568 	.word	0x20006568
 8009f14:	20006624 	.word	0x20006624
 8009f18:	20006564 	.word	0x20006564
 8009f1c:	20006678 	.word	0x20006678

08009f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f28:	4b06      	ldr	r3, [pc, #24]	; (8009f44 <vTaskInternalSetTimeOutState+0x24>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f30:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <vTaskInternalSetTimeOutState+0x28>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	605a      	str	r2, [r3, #4]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	2000667c 	.word	0x2000667c
 8009f48:	20006668 	.word	0x20006668

08009f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b088      	sub	sp, #32
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10c      	bne.n	8009f76 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	b672      	cpsid	i
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	b662      	cpsie	i
 8009f70:	613b      	str	r3, [r7, #16]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10c      	bne.n	8009f96 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	b672      	cpsid	i
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	b662      	cpsie	i
 8009f90:	60fb      	str	r3, [r7, #12]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009f96:	f000 fc71 	bl	800a87c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f9a:	4b1d      	ldr	r3, [pc, #116]	; (800a010 <xTaskCheckForTimeOut+0xc4>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb2:	d102      	bne.n	8009fba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61fb      	str	r3, [r7, #28]
 8009fb8:	e023      	b.n	800a002 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b15      	ldr	r3, [pc, #84]	; (800a014 <xTaskCheckForTimeOut+0xc8>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d007      	beq.n	8009fd6 <xTaskCheckForTimeOut+0x8a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d302      	bcc.n	8009fd6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	e015      	b.n	800a002 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d20b      	bcs.n	8009ff8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	1ad2      	subs	r2, r2, r3
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ff97 	bl	8009f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	e004      	b.n	800a002 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ffe:	2301      	movs	r3, #1
 800a000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a002:	f000 fc6f 	bl	800a8e4 <vPortExitCritical>

	return xReturn;
 800a006:	69fb      	ldr	r3, [r7, #28]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3720      	adds	r7, #32
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	20006668 	.word	0x20006668
 800a014:	2000667c 	.word	0x2000667c

0800a018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a01c:	4b03      	ldr	r3, [pc, #12]	; (800a02c <vTaskMissedYield+0x14>)
 800a01e:	2201      	movs	r2, #1
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bf00      	nop
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20006678 	.word	0x20006678

0800a030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a038:	f000 f852 	bl	800a0e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <prvIdleTask+0x28>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d9f9      	bls.n	800a038 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <prvIdleTask+0x2c>)
 800a046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a054:	e7f0      	b.n	800a038 <prvIdleTask+0x8>
 800a056:	bf00      	nop
 800a058:	20006568 	.word	0x20006568
 800a05c:	e000ed04 	.word	0xe000ed04

0800a060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a066:	2300      	movs	r3, #0
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	e00c      	b.n	800a086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4a12      	ldr	r2, [pc, #72]	; (800a0c0 <prvInitialiseTaskLists+0x60>)
 800a078:	4413      	add	r3, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe f9e7 	bl	800844e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3301      	adds	r3, #1
 800a084:	607b      	str	r3, [r7, #4]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b06      	cmp	r3, #6
 800a08a:	d9ef      	bls.n	800a06c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a08c:	480d      	ldr	r0, [pc, #52]	; (800a0c4 <prvInitialiseTaskLists+0x64>)
 800a08e:	f7fe f9de 	bl	800844e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a092:	480d      	ldr	r0, [pc, #52]	; (800a0c8 <prvInitialiseTaskLists+0x68>)
 800a094:	f7fe f9db 	bl	800844e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a098:	480c      	ldr	r0, [pc, #48]	; (800a0cc <prvInitialiseTaskLists+0x6c>)
 800a09a:	f7fe f9d8 	bl	800844e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a09e:	480c      	ldr	r0, [pc, #48]	; (800a0d0 <prvInitialiseTaskLists+0x70>)
 800a0a0:	f7fe f9d5 	bl	800844e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0a4:	480b      	ldr	r0, [pc, #44]	; (800a0d4 <prvInitialiseTaskLists+0x74>)
 800a0a6:	f7fe f9d2 	bl	800844e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	; (800a0d8 <prvInitialiseTaskLists+0x78>)
 800a0ac:	4a05      	ldr	r2, [pc, #20]	; (800a0c4 <prvInitialiseTaskLists+0x64>)
 800a0ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0b0:	4b0a      	ldr	r3, [pc, #40]	; (800a0dc <prvInitialiseTaskLists+0x7c>)
 800a0b2:	4a05      	ldr	r2, [pc, #20]	; (800a0c8 <prvInitialiseTaskLists+0x68>)
 800a0b4:	601a      	str	r2, [r3, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20006568 	.word	0x20006568
 800a0c4:	200065f4 	.word	0x200065f4
 800a0c8:	20006608 	.word	0x20006608
 800a0cc:	20006624 	.word	0x20006624
 800a0d0:	20006638 	.word	0x20006638
 800a0d4:	20006650 	.word	0x20006650
 800a0d8:	2000661c 	.word	0x2000661c
 800a0dc:	20006620 	.word	0x20006620

0800a0e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0e6:	e019      	b.n	800a11c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0e8:	f000 fbc8 	bl	800a87c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ec:	4b10      	ldr	r3, [pc, #64]	; (800a130 <prvCheckTasksWaitingTermination+0x50>)
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe fa32 	bl	8008562 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0fe:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <prvCheckTasksWaitingTermination+0x54>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3b01      	subs	r3, #1
 800a104:	4a0b      	ldr	r2, [pc, #44]	; (800a134 <prvCheckTasksWaitingTermination+0x54>)
 800a106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <prvCheckTasksWaitingTermination+0x58>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <prvCheckTasksWaitingTermination+0x58>)
 800a110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a112:	f000 fbe7 	bl	800a8e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f810 	bl	800a13c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a11c:	4b06      	ldr	r3, [pc, #24]	; (800a138 <prvCheckTasksWaitingTermination+0x58>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e1      	bne.n	800a0e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20006638 	.word	0x20006638
 800a134:	20006664 	.word	0x20006664
 800a138:	2000664c 	.word	0x2000664c

0800a13c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d108      	bne.n	800a160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fd88 	bl	800ac68 <vPortFree>
				vPortFree( pxTCB );
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fd85 	bl	800ac68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a15e:	e01a      	b.n	800a196 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a166:	2b01      	cmp	r3, #1
 800a168:	d103      	bne.n	800a172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fd7c 	bl	800ac68 <vPortFree>
	}
 800a170:	e011      	b.n	800a196 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d00c      	beq.n	800a196 <prvDeleteTCB+0x5a>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	b672      	cpsid	i
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	b662      	cpsie	i
 800a190:	60fb      	str	r3, [r7, #12]
}
 800a192:	bf00      	nop
 800a194:	e7fe      	b.n	800a194 <prvDeleteTCB+0x58>
	}
 800a196:	bf00      	nop
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <prvResetNextTaskUnblockTime+0x38>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1b0:	4b0a      	ldr	r3, [pc, #40]	; (800a1dc <prvResetNextTaskUnblockTime+0x3c>)
 800a1b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1b8:	e008      	b.n	800a1cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ba:	4b07      	ldr	r3, [pc, #28]	; (800a1d8 <prvResetNextTaskUnblockTime+0x38>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4a04      	ldr	r2, [pc, #16]	; (800a1dc <prvResetNextTaskUnblockTime+0x3c>)
 800a1ca:	6013      	str	r3, [r2, #0]
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	2000661c 	.word	0x2000661c
 800a1dc:	20006684 	.word	0x20006684

0800a1e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <xTaskGetSchedulerState+0x34>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	e008      	b.n	800a206 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f4:	4b08      	ldr	r3, [pc, #32]	; (800a218 <xTaskGetSchedulerState+0x38>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	607b      	str	r3, [r7, #4]
 800a200:	e001      	b.n	800a206 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a202:	2300      	movs	r3, #0
 800a204:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a206:	687b      	ldr	r3, [r7, #4]
	}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	20006670 	.word	0x20006670
 800a218:	2000668c 	.word	0x2000668c

0800a21c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d069      	beq.n	800a306 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a236:	4b36      	ldr	r3, [pc, #216]	; (800a310 <xTaskPriorityInherit+0xf4>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d259      	bcs.n	800a2f4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	2b00      	cmp	r3, #0
 800a246:	db06      	blt.n	800a256 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a248:	4b31      	ldr	r3, [pc, #196]	; (800a310 <xTaskPriorityInherit+0xf4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	f1c3 0207 	rsb	r2, r3, #7
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6959      	ldr	r1, [r3, #20]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4a2b      	ldr	r2, [pc, #172]	; (800a314 <xTaskPriorityInherit+0xf8>)
 800a268:	4413      	add	r3, r2
 800a26a:	4299      	cmp	r1, r3
 800a26c:	d13a      	bne.n	800a2e4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	3304      	adds	r3, #4
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe f975 	bl	8008562 <uxListRemove>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d115      	bne.n	800a2aa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a282:	4924      	ldr	r1, [pc, #144]	; (800a314 <xTaskPriorityInherit+0xf8>)
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <xTaskPriorityInherit+0x8e>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	2201      	movs	r2, #1
 800a29a:	fa02 f303 	lsl.w	r3, r2, r3
 800a29e:	43da      	mvns	r2, r3
 800a2a0:	4b1d      	ldr	r3, [pc, #116]	; (800a318 <xTaskPriorityInherit+0xfc>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	; (800a318 <xTaskPriorityInherit+0xfc>)
 800a2a8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2aa:	4b19      	ldr	r3, [pc, #100]	; (800a310 <xTaskPriorityInherit+0xf4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	409a      	lsls	r2, r3
 800a2bc:	4b16      	ldr	r3, [pc, #88]	; (800a318 <xTaskPriorityInherit+0xfc>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	4a15      	ldr	r2, [pc, #84]	; (800a318 <xTaskPriorityInherit+0xfc>)
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4a10      	ldr	r2, [pc, #64]	; (800a314 <xTaskPriorityInherit+0xf8>)
 800a2d4:	441a      	add	r2, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4610      	mov	r0, r2
 800a2de:	f7fe f8e3 	bl	80084a8 <vListInsertEnd>
 800a2e2:	e004      	b.n	800a2ee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <xTaskPriorityInherit+0xf4>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	e008      	b.n	800a306 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <xTaskPriorityInherit+0xf4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d201      	bcs.n	800a306 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a302:	2301      	movs	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a306:	68fb      	ldr	r3, [r7, #12]
	}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20006564 	.word	0x20006564
 800a314:	20006568 	.word	0x20006568
 800a318:	2000666c 	.word	0x2000666c

0800a31c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d072      	beq.n	800a418 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a332:	4b3c      	ldr	r3, [pc, #240]	; (800a424 <xTaskPriorityDisinherit+0x108>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d00c      	beq.n	800a356 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	b672      	cpsid	i
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	b662      	cpsie	i
 800a350:	60fb      	str	r3, [r7, #12]
}
 800a352:	bf00      	nop
 800a354:	e7fe      	b.n	800a354 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10c      	bne.n	800a378 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	b672      	cpsid	i
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	b662      	cpsie	i
 800a372:	60bb      	str	r3, [r7, #8]
}
 800a374:	bf00      	nop
 800a376:	e7fe      	b.n	800a376 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a37c:	1e5a      	subs	r2, r3, #1
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d044      	beq.n	800a418 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a392:	2b00      	cmp	r3, #0
 800a394:	d140      	bne.n	800a418 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	3304      	adds	r3, #4
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe f8e1 	bl	8008562 <uxListRemove>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d115      	bne.n	800a3d2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3aa:	491f      	ldr	r1, [pc, #124]	; (800a428 <xTaskPriorityDisinherit+0x10c>)
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	440b      	add	r3, r1
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <xTaskPriorityDisinherit+0xb6>
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c6:	43da      	mvns	r2, r3
 800a3c8:	4b18      	ldr	r3, [pc, #96]	; (800a42c <xTaskPriorityDisinherit+0x110>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	4a17      	ldr	r2, [pc, #92]	; (800a42c <xTaskPriorityDisinherit+0x110>)
 800a3d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	f1c3 0207 	rsb	r2, r3, #7
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	409a      	lsls	r2, r3
 800a3ee:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <xTaskPriorityDisinherit+0x110>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	4a0d      	ldr	r2, [pc, #52]	; (800a42c <xTaskPriorityDisinherit+0x110>)
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4a08      	ldr	r2, [pc, #32]	; (800a428 <xTaskPriorityDisinherit+0x10c>)
 800a406:	441a      	add	r2, r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4619      	mov	r1, r3
 800a40e:	4610      	mov	r0, r2
 800a410:	f7fe f84a 	bl	80084a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a418:	697b      	ldr	r3, [r7, #20]
	}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20006564 	.word	0x20006564
 800a428:	20006568 	.word	0x20006568
 800a42c:	2000666c 	.word	0x2000666c

0800a430 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a43e:	2301      	movs	r3, #1
 800a440:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8087 	beq.w	800a558 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10c      	bne.n	800a46c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	b672      	cpsid	i
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	b662      	cpsie	i
 800a466:	60fb      	str	r3, [r7, #12]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	429a      	cmp	r2, r3
 800a474:	d902      	bls.n	800a47c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	e002      	b.n	800a482 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a480:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d065      	beq.n	800a558 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	429a      	cmp	r2, r3
 800a494:	d160      	bne.n	800a558 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a496:	4b32      	ldr	r3, [pc, #200]	; (800a560 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d10c      	bne.n	800a4ba <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	b672      	cpsid	i
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	b662      	cpsie	i
 800a4b4:	60bb      	str	r3, [r7, #8]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	69fa      	ldr	r2, [r7, #28]
 800a4c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	db04      	blt.n	800a4d8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f1c3 0207 	rsb	r2, r3, #7
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	6959      	ldr	r1, [r3, #20]
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4413      	add	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4a1f      	ldr	r2, [pc, #124]	; (800a564 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a4e8:	4413      	add	r3, r2
 800a4ea:	4299      	cmp	r1, r3
 800a4ec:	d134      	bne.n	800a558 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe f835 	bl	8008562 <uxListRemove>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d115      	bne.n	800a52a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	4918      	ldr	r1, [pc, #96]	; (800a564 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a504:	4613      	mov	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a518:	2201      	movs	r2, #1
 800a51a:	fa02 f303 	lsl.w	r3, r2, r3
 800a51e:	43da      	mvns	r2, r3
 800a520:	4b11      	ldr	r3, [pc, #68]	; (800a568 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4013      	ands	r3, r2
 800a526:	4a10      	ldr	r2, [pc, #64]	; (800a568 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a528:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	2201      	movs	r2, #1
 800a530:	409a      	lsls	r2, r3
 800a532:	4b0d      	ldr	r3, [pc, #52]	; (800a568 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4313      	orrs	r3, r2
 800a538:	4a0b      	ldr	r2, [pc, #44]	; (800a568 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4a06      	ldr	r2, [pc, #24]	; (800a564 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a54a:	441a      	add	r2, r3
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fd ffa8 	bl	80084a8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a558:	bf00      	nop
 800a55a:	3720      	adds	r7, #32
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20006564 	.word	0x20006564
 800a564:	20006568 	.word	0x20006568
 800a568:	2000666c 	.word	0x2000666c

0800a56c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a570:	4b07      	ldr	r3, [pc, #28]	; (800a590 <pvTaskIncrementMutexHeldCount+0x24>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a578:	4b05      	ldr	r3, [pc, #20]	; (800a590 <pvTaskIncrementMutexHeldCount+0x24>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a57e:	3201      	adds	r2, #1
 800a580:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a582:	4b03      	ldr	r3, [pc, #12]	; (800a590 <pvTaskIncrementMutexHeldCount+0x24>)
 800a584:	681b      	ldr	r3, [r3, #0]
	}
 800a586:	4618      	mov	r0, r3
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	20006564 	.word	0x20006564

0800a594 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a59e:	4b29      	ldr	r3, [pc, #164]	; (800a644 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5a4:	4b28      	ldr	r3, [pc, #160]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fd ffd9 	bl	8008562 <uxListRemove>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10b      	bne.n	800a5ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a5b6:	4b24      	ldr	r3, [pc, #144]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	2201      	movs	r2, #1
 800a5be:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c2:	43da      	mvns	r2, r3
 800a5c4:	4b21      	ldr	r3, [pc, #132]	; (800a64c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	4a20      	ldr	r2, [pc, #128]	; (800a64c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a5cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5d4:	d10a      	bne.n	800a5ec <prvAddCurrentTaskToDelayedList+0x58>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d007      	beq.n	800a5ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5dc:	4b1a      	ldr	r3, [pc, #104]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	481a      	ldr	r0, [pc, #104]	; (800a650 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a5e6:	f7fd ff5f 	bl	80084a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5ea:	e026      	b.n	800a63a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5f4:	4b14      	ldr	r3, [pc, #80]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	429a      	cmp	r2, r3
 800a602:	d209      	bcs.n	800a618 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a604:	4b13      	ldr	r3, [pc, #76]	; (800a654 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7fd ff6d 	bl	80084f0 <vListInsert>
}
 800a616:	e010      	b.n	800a63a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a618:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3304      	adds	r3, #4
 800a622:	4619      	mov	r1, r3
 800a624:	4610      	mov	r0, r2
 800a626:	f7fd ff63 	bl	80084f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a62a:	4b0c      	ldr	r3, [pc, #48]	; (800a65c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	429a      	cmp	r2, r3
 800a632:	d202      	bcs.n	800a63a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a634:	4a09      	ldr	r2, [pc, #36]	; (800a65c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6013      	str	r3, [r2, #0]
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20006668 	.word	0x20006668
 800a648:	20006564 	.word	0x20006564
 800a64c:	2000666c 	.word	0x2000666c
 800a650:	20006650 	.word	0x20006650
 800a654:	20006620 	.word	0x20006620
 800a658:	2000661c 	.word	0x2000661c
 800a65c:	20006684 	.word	0x20006684

0800a660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3b04      	subs	r3, #4
 800a670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3b04      	subs	r3, #4
 800a67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f023 0201 	bic.w	r2, r3, #1
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3b04      	subs	r3, #4
 800a68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a690:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <pxPortInitialiseStack+0x64>)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3b14      	subs	r3, #20
 800a69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3b04      	subs	r3, #4
 800a6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f06f 0202 	mvn.w	r2, #2
 800a6ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3b20      	subs	r3, #32
 800a6b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	0800a6c9 	.word	0x0800a6c9

0800a6c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6d2:	4b14      	ldr	r3, [pc, #80]	; (800a724 <prvTaskExitError+0x5c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6da:	d00c      	beq.n	800a6f6 <prvTaskExitError+0x2e>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	b672      	cpsid	i
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	b662      	cpsie	i
 800a6f0:	60fb      	str	r3, [r7, #12]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <prvTaskExitError+0x2c>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fa:	b672      	cpsid	i
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	b662      	cpsie	i
 800a70a:	60bb      	str	r3, [r7, #8]
}
 800a70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a70e:	bf00      	nop
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0fc      	beq.n	800a710 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a716:	bf00      	nop
 800a718:	bf00      	nop
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	20000020 	.word	0x20000020
	...

0800a730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a730:	4b07      	ldr	r3, [pc, #28]	; (800a750 <pxCurrentTCBConst2>)
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	6808      	ldr	r0, [r1, #0]
 800a736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73a:	f380 8809 	msr	PSP, r0
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8811 	msr	BASEPRI, r0
 800a74a:	4770      	bx	lr
 800a74c:	f3af 8000 	nop.w

0800a750 <pxCurrentTCBConst2>:
 800a750:	20006564 	.word	0x20006564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop

0800a758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a758:	4808      	ldr	r0, [pc, #32]	; (800a77c <prvPortStartFirstTask+0x24>)
 800a75a:	6800      	ldr	r0, [r0, #0]
 800a75c:	6800      	ldr	r0, [r0, #0]
 800a75e:	f380 8808 	msr	MSP, r0
 800a762:	f04f 0000 	mov.w	r0, #0
 800a766:	f380 8814 	msr	CONTROL, r0
 800a76a:	b662      	cpsie	i
 800a76c:	b661      	cpsie	f
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	df00      	svc	0
 800a778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a77a:	bf00      	nop
 800a77c:	e000ed08 	.word	0xe000ed08

0800a780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a786:	4b37      	ldr	r3, [pc, #220]	; (800a864 <xPortStartScheduler+0xe4>)
 800a788:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	22ff      	movs	r2, #255	; 0xff
 800a796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	4b2f      	ldr	r3, [pc, #188]	; (800a868 <xPortStartScheduler+0xe8>)
 800a7ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7ae:	4b2f      	ldr	r3, [pc, #188]	; (800a86c <xPortStartScheduler+0xec>)
 800a7b0:	2207      	movs	r2, #7
 800a7b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7b4:	e009      	b.n	800a7ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a7b6:	4b2d      	ldr	r3, [pc, #180]	; (800a86c <xPortStartScheduler+0xec>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	4a2b      	ldr	r2, [pc, #172]	; (800a86c <xPortStartScheduler+0xec>)
 800a7be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d2:	2b80      	cmp	r3, #128	; 0x80
 800a7d4:	d0ef      	beq.n	800a7b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7d6:	4b25      	ldr	r3, [pc, #148]	; (800a86c <xPortStartScheduler+0xec>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f1c3 0307 	rsb	r3, r3, #7
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d00c      	beq.n	800a7fc <xPortStartScheduler+0x7c>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	b672      	cpsid	i
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	b662      	cpsie	i
 800a7f6:	60bb      	str	r3, [r7, #8]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <xPortStartScheduler+0xec>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	021b      	lsls	r3, r3, #8
 800a802:	4a1a      	ldr	r2, [pc, #104]	; (800a86c <xPortStartScheduler+0xec>)
 800a804:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a806:	4b19      	ldr	r3, [pc, #100]	; (800a86c <xPortStartScheduler+0xec>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a80e:	4a17      	ldr	r2, [pc, #92]	; (800a86c <xPortStartScheduler+0xec>)
 800a810:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	b2da      	uxtb	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a81a:	4b15      	ldr	r3, [pc, #84]	; (800a870 <xPortStartScheduler+0xf0>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a14      	ldr	r2, [pc, #80]	; (800a870 <xPortStartScheduler+0xf0>)
 800a820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a824:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a826:	4b12      	ldr	r3, [pc, #72]	; (800a870 <xPortStartScheduler+0xf0>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a11      	ldr	r2, [pc, #68]	; (800a870 <xPortStartScheduler+0xf0>)
 800a82c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a830:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a832:	f000 f8dd 	bl	800a9f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a836:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <xPortStartScheduler+0xf4>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a83c:	f000 f8fc 	bl	800aa38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a840:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <xPortStartScheduler+0xf8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a0c      	ldr	r2, [pc, #48]	; (800a878 <xPortStartScheduler+0xf8>)
 800a846:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a84a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a84c:	f7ff ff84 	bl	800a758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a850:	f7ff fa7e 	bl	8009d50 <vTaskSwitchContext>
	prvTaskExitError();
 800a854:	f7ff ff38 	bl	800a6c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	e000e400 	.word	0xe000e400
 800a868:	20006690 	.word	0x20006690
 800a86c:	20006694 	.word	0x20006694
 800a870:	e000ed20 	.word	0xe000ed20
 800a874:	20000020 	.word	0x20000020
 800a878:	e000ef34 	.word	0xe000ef34

0800a87c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	b672      	cpsid	i
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	b662      	cpsie	i
 800a896:	607b      	str	r3, [r7, #4]
}
 800a898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a89a:	4b10      	ldr	r3, [pc, #64]	; (800a8dc <vPortEnterCritical+0x60>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	4a0e      	ldr	r2, [pc, #56]	; (800a8dc <vPortEnterCritical+0x60>)
 800a8a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8a4:	4b0d      	ldr	r3, [pc, #52]	; (800a8dc <vPortEnterCritical+0x60>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d111      	bne.n	800a8d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <vPortEnterCritical+0x64>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00c      	beq.n	800a8d0 <vPortEnterCritical+0x54>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	b672      	cpsid	i
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	b662      	cpsie	i
 800a8ca:	603b      	str	r3, [r7, #0]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <vPortEnterCritical+0x52>
	}
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20000020 	.word	0x20000020
 800a8e0:	e000ed04 	.word	0xe000ed04

0800a8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8ea:	4b13      	ldr	r3, [pc, #76]	; (800a938 <vPortExitCritical+0x54>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10c      	bne.n	800a90c <vPortExitCritical+0x28>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	b672      	cpsid	i
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	b662      	cpsie	i
 800a906:	607b      	str	r3, [r7, #4]
}
 800a908:	bf00      	nop
 800a90a:	e7fe      	b.n	800a90a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <vPortExitCritical+0x54>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3b01      	subs	r3, #1
 800a912:	4a09      	ldr	r2, [pc, #36]	; (800a938 <vPortExitCritical+0x54>)
 800a914:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a916:	4b08      	ldr	r3, [pc, #32]	; (800a938 <vPortExitCritical+0x54>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d105      	bne.n	800a92a <vPortExitCritical+0x46>
 800a91e:	2300      	movs	r3, #0
 800a920:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	f383 8811 	msr	BASEPRI, r3
}
 800a928:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20000020 	.word	0x20000020
 800a93c:	00000000 	.word	0x00000000

0800a940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a940:	f3ef 8009 	mrs	r0, PSP
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <pxCurrentTCBConst>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	f01e 0f10 	tst.w	lr, #16
 800a950:	bf08      	it	eq
 800a952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95a:	6010      	str	r0, [r2, #0]
 800a95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a960:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a964:	b672      	cpsid	i
 800a966:	f380 8811 	msr	BASEPRI, r0
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	b662      	cpsie	i
 800a974:	f7ff f9ec 	bl	8009d50 <vTaskSwitchContext>
 800a978:	f04f 0000 	mov.w	r0, #0
 800a97c:	f380 8811 	msr	BASEPRI, r0
 800a980:	bc09      	pop	{r0, r3}
 800a982:	6819      	ldr	r1, [r3, #0]
 800a984:	6808      	ldr	r0, [r1, #0]
 800a986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98a:	f01e 0f10 	tst.w	lr, #16
 800a98e:	bf08      	it	eq
 800a990:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a994:	f380 8809 	msr	PSP, r0
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop

0800a9a0 <pxCurrentTCBConst>:
 800a9a0:	20006564 	.word	0x20006564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop

0800a9a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	b672      	cpsid	i
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	b662      	cpsie	i
 800a9c2:	607b      	str	r3, [r7, #4]
}
 800a9c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9c6:	f7ff f909 	bl	8009bdc <xTaskIncrementTick>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <SysTick_Handler+0x44>)
 800a9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	f383 8811 	msr	BASEPRI, r3
}
 800a9e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9e4:	bf00      	nop
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	e000ed04 	.word	0xe000ed04

0800a9f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <vPortSetupTimerInterrupt+0x34>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9fa:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <vPortSetupTimerInterrupt+0x38>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <vPortSetupTimerInterrupt+0x3c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a0a      	ldr	r2, [pc, #40]	; (800aa30 <vPortSetupTimerInterrupt+0x40>)
 800aa06:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0a:	099b      	lsrs	r3, r3, #6
 800aa0c:	4a09      	ldr	r2, [pc, #36]	; (800aa34 <vPortSetupTimerInterrupt+0x44>)
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa12:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <vPortSetupTimerInterrupt+0x34>)
 800aa14:	2207      	movs	r2, #7
 800aa16:	601a      	str	r2, [r3, #0]
}
 800aa18:	bf00      	nop
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	e000e010 	.word	0xe000e010
 800aa28:	e000e018 	.word	0xe000e018
 800aa2c:	20000000 	.word	0x20000000
 800aa30:	10624dd3 	.word	0x10624dd3
 800aa34:	e000e014 	.word	0xe000e014

0800aa38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa48 <vPortEnableVFP+0x10>
 800aa3c:	6801      	ldr	r1, [r0, #0]
 800aa3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa42:	6001      	str	r1, [r0, #0]
 800aa44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa46:	bf00      	nop
 800aa48:	e000ed88 	.word	0xe000ed88

0800aa4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa52:	f3ef 8305 	mrs	r3, IPSR
 800aa56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b0f      	cmp	r3, #15
 800aa5c:	d916      	bls.n	800aa8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa5e:	4a19      	ldr	r2, [pc, #100]	; (800aac4 <vPortValidateInterruptPriority+0x78>)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa68:	4b17      	ldr	r3, [pc, #92]	; (800aac8 <vPortValidateInterruptPriority+0x7c>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	7afa      	ldrb	r2, [r7, #11]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d20c      	bcs.n	800aa8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	b672      	cpsid	i
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	b662      	cpsie	i
 800aa86:	607b      	str	r3, [r7, #4]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa8c:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <vPortValidateInterruptPriority+0x80>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa94:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <vPortValidateInterruptPriority+0x84>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d90c      	bls.n	800aab6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa0:	b672      	cpsid	i
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	b662      	cpsie	i
 800aab0:	603b      	str	r3, [r7, #0]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <vPortValidateInterruptPriority+0x68>
	}
 800aab6:	bf00      	nop
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	e000e3f0 	.word	0xe000e3f0
 800aac8:	20006690 	.word	0x20006690
 800aacc:	e000ed0c 	.word	0xe000ed0c
 800aad0:	20006694 	.word	0x20006694

0800aad4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08a      	sub	sp, #40	; 0x28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aae0:	f7fe ffae 	bl	8009a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aae4:	4b5b      	ldr	r3, [pc, #364]	; (800ac54 <pvPortMalloc+0x180>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aaec:	f000 f91a 	bl	800ad24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aaf0:	4b59      	ldr	r3, [pc, #356]	; (800ac58 <pvPortMalloc+0x184>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f040 8092 	bne.w	800ac22 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01f      	beq.n	800ab44 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ab04:	2208      	movs	r2, #8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4413      	add	r3, r2
 800ab0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f003 0307 	and.w	r3, r3, #7
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d016      	beq.n	800ab44 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f023 0307 	bic.w	r3, r3, #7
 800ab1c:	3308      	adds	r3, #8
 800ab1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00c      	beq.n	800ab44 <pvPortMalloc+0x70>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	b672      	cpsid	i
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	b662      	cpsie	i
 800ab3e:	617b      	str	r3, [r7, #20]
}
 800ab40:	bf00      	nop
 800ab42:	e7fe      	b.n	800ab42 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d06b      	beq.n	800ac22 <pvPortMalloc+0x14e>
 800ab4a:	4b44      	ldr	r3, [pc, #272]	; (800ac5c <pvPortMalloc+0x188>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d866      	bhi.n	800ac22 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab54:	4b42      	ldr	r3, [pc, #264]	; (800ac60 <pvPortMalloc+0x18c>)
 800ab56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab58:	4b41      	ldr	r3, [pc, #260]	; (800ac60 <pvPortMalloc+0x18c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab5e:	e004      	b.n	800ab6a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d903      	bls.n	800ab7c <pvPortMalloc+0xa8>
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1f1      	bne.n	800ab60 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab7c:	4b35      	ldr	r3, [pc, #212]	; (800ac54 <pvPortMalloc+0x180>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d04d      	beq.n	800ac22 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2208      	movs	r2, #8
 800ab8c:	4413      	add	r3, r2
 800ab8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	2308      	movs	r3, #8
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d921      	bls.n	800abec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <pvPortMalloc+0x100>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	b672      	cpsid	i
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	b662      	cpsie	i
 800abce:	613b      	str	r3, [r7, #16]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	1ad2      	subs	r2, r2, r3
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abe6:	69b8      	ldr	r0, [r7, #24]
 800abe8:	f000 f8fe 	bl	800ade8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abec:	4b1b      	ldr	r3, [pc, #108]	; (800ac5c <pvPortMalloc+0x188>)
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	4a19      	ldr	r2, [pc, #100]	; (800ac5c <pvPortMalloc+0x188>)
 800abf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abfa:	4b18      	ldr	r3, [pc, #96]	; (800ac5c <pvPortMalloc+0x188>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <pvPortMalloc+0x190>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d203      	bcs.n	800ac0e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac06:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <pvPortMalloc+0x188>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a16      	ldr	r2, [pc, #88]	; (800ac64 <pvPortMalloc+0x190>)
 800ac0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <pvPortMalloc+0x184>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	431a      	orrs	r2, r3
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac22:	f7fe ff1b 	bl	8009a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00c      	beq.n	800ac4a <pvPortMalloc+0x176>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	b672      	cpsid	i
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	b662      	cpsie	i
 800ac44:	60fb      	str	r3, [r7, #12]
}
 800ac46:	bf00      	nop
 800ac48:	e7fe      	b.n	800ac48 <pvPortMalloc+0x174>
	return pvReturn;
 800ac4a:	69fb      	ldr	r3, [r7, #28]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3728      	adds	r7, #40	; 0x28
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	2000a2a0 	.word	0x2000a2a0
 800ac58:	2000a2ac 	.word	0x2000a2ac
 800ac5c:	2000a2a4 	.word	0x2000a2a4
 800ac60:	2000a298 	.word	0x2000a298
 800ac64:	2000a2a8 	.word	0x2000a2a8

0800ac68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d04c      	beq.n	800ad14 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac7a:	2308      	movs	r3, #8
 800ac7c:	425b      	negs	r3, r3
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4413      	add	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	4b23      	ldr	r3, [pc, #140]	; (800ad1c <vPortFree+0xb4>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4013      	ands	r3, r2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10c      	bne.n	800acb0 <vPortFree+0x48>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	b672      	cpsid	i
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	b662      	cpsie	i
 800acaa:	60fb      	str	r3, [r7, #12]
}
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00c      	beq.n	800acd2 <vPortFree+0x6a>
	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbc:	b672      	cpsid	i
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	b662      	cpsie	i
 800accc:	60bb      	str	r3, [r7, #8]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <vPortFree+0xb4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4013      	ands	r3, r2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d019      	beq.n	800ad14 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d115      	bne.n	800ad14 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	4b0b      	ldr	r3, [pc, #44]	; (800ad1c <vPortFree+0xb4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	43db      	mvns	r3, r3
 800acf2:	401a      	ands	r2, r3
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acf8:	f7fe fea2 	bl	8009a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <vPortFree+0xb8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4413      	add	r3, r2
 800ad06:	4a06      	ldr	r2, [pc, #24]	; (800ad20 <vPortFree+0xb8>)
 800ad08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad0a:	6938      	ldr	r0, [r7, #16]
 800ad0c:	f000 f86c 	bl	800ade8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ad10:	f7fe fea4 	bl	8009a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad14:	bf00      	nop
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	2000a2ac 	.word	0x2000a2ac
 800ad20:	2000a2a4 	.word	0x2000a2a4

0800ad24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad30:	4b27      	ldr	r3, [pc, #156]	; (800add0 <prvHeapInit+0xac>)
 800ad32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00c      	beq.n	800ad58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3307      	adds	r3, #7
 800ad42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 0307 	bic.w	r3, r3, #7
 800ad4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	4a1f      	ldr	r2, [pc, #124]	; (800add0 <prvHeapInit+0xac>)
 800ad54:	4413      	add	r3, r2
 800ad56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad5c:	4a1d      	ldr	r2, [pc, #116]	; (800add4 <prvHeapInit+0xb0>)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad62:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <prvHeapInit+0xb0>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad70:	2208      	movs	r2, #8
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	1a9b      	subs	r3, r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f023 0307 	bic.w	r3, r3, #7
 800ad7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4a15      	ldr	r2, [pc, #84]	; (800add8 <prvHeapInit+0xb4>)
 800ad84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad86:	4b14      	ldr	r3, [pc, #80]	; (800add8 <prvHeapInit+0xb4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad8e:	4b12      	ldr	r3, [pc, #72]	; (800add8 <prvHeapInit+0xb4>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ada4:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <prvHeapInit+0xb4>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4a0a      	ldr	r2, [pc, #40]	; (800addc <prvHeapInit+0xb8>)
 800adb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	4a09      	ldr	r2, [pc, #36]	; (800ade0 <prvHeapInit+0xbc>)
 800adba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adbc:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <prvHeapInit+0xc0>)
 800adbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800adc2:	601a      	str	r2, [r3, #0]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	20006698 	.word	0x20006698
 800add4:	2000a298 	.word	0x2000a298
 800add8:	2000a2a0 	.word	0x2000a2a0
 800addc:	2000a2a8 	.word	0x2000a2a8
 800ade0:	2000a2a4 	.word	0x2000a2a4
 800ade4:	2000a2ac 	.word	0x2000a2ac

0800ade8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adf0:	4b28      	ldr	r3, [pc, #160]	; (800ae94 <prvInsertBlockIntoFreeList+0xac>)
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	e002      	b.n	800adfc <prvInsertBlockIntoFreeList+0x14>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d8f7      	bhi.n	800adf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	4413      	add	r3, r2
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d108      	bne.n	800ae2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	441a      	add	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	441a      	add	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d118      	bne.n	800ae70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <prvInsertBlockIntoFreeList+0xb0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d00d      	beq.n	800ae66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	441a      	add	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	e008      	b.n	800ae78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae66:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <prvInsertBlockIntoFreeList+0xb0>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	e003      	b.n	800ae78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d002      	beq.n	800ae86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae86:	bf00      	nop
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	2000a298 	.word	0x2000a298
 800ae98:	2000a2a0 	.word	0x2000a2a0

0800ae9c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	330c      	adds	r3, #12
 800aeac:	461a      	mov	r2, r3
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f002 f931 	bl	800d118 <tcpip_send_msg_wait_sem>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800aeba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <netconn_apimsg+0x2e>
    return apimsg->err;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800aec8:	e001      	b.n	800aece <netconn_apimsg+0x32>
  }
  return err;
 800aeca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08c      	sub	sp, #48	; 0x30
 800aedc:	af00      	add	r7, sp, #0
 800aede:	4603      	mov	r3, r0
 800aee0:	603a      	str	r2, [r7, #0]
 800aee2:	71fb      	strb	r3, [r7, #7]
 800aee4:	460b      	mov	r3, r1
 800aee6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800aee8:	79fb      	ldrb	r3, [r7, #7]
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 ffaf 	bl	800be50 <netconn_alloc>
 800aef2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800aef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d054      	beq.n	800afa4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800aefa:	79bb      	ldrb	r3, [r7, #6]
 800aefc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800af02:	f107 0308 	add.w	r3, r7, #8
 800af06:	4619      	mov	r1, r3
 800af08:	4829      	ldr	r0, [pc, #164]	; (800afb0 <netconn_new_with_proto_and_callback+0xd8>)
 800af0a:	f7ff ffc7 	bl	800ae9c <netconn_apimsg>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800af14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d043      	beq.n	800afa4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <netconn_new_with_proto_and_callback+0x58>
 800af24:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <netconn_new_with_proto_and_callback+0xdc>)
 800af26:	22a3      	movs	r2, #163	; 0xa3
 800af28:	4923      	ldr	r1, [pc, #140]	; (800afb8 <netconn_new_with_proto_and_callback+0xe0>)
 800af2a:	4824      	ldr	r0, [pc, #144]	; (800afbc <netconn_new_with_proto_and_callback+0xe4>)
 800af2c:	f012 fbd0 	bl	801d6d0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	3310      	adds	r3, #16
 800af34:	4618      	mov	r0, r3
 800af36:	f00d f9a8 	bl	801828a <sys_mbox_valid>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d105      	bne.n	800af4c <netconn_new_with_proto_and_callback+0x74>
 800af40:	4b1c      	ldr	r3, [pc, #112]	; (800afb4 <netconn_new_with_proto_and_callback+0xdc>)
 800af42:	22a4      	movs	r2, #164	; 0xa4
 800af44:	491e      	ldr	r1, [pc, #120]	; (800afc0 <netconn_new_with_proto_and_callback+0xe8>)
 800af46:	481d      	ldr	r0, [pc, #116]	; (800afbc <netconn_new_with_proto_and_callback+0xe4>)
 800af48:	f012 fbc2 	bl	801d6d0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	3314      	adds	r3, #20
 800af50:	4618      	mov	r0, r3
 800af52:	f00d f99a 	bl	801828a <sys_mbox_valid>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <netconn_new_with_proto_and_callback+0x90>
 800af5c:	4b15      	ldr	r3, [pc, #84]	; (800afb4 <netconn_new_with_proto_and_callback+0xdc>)
 800af5e:	22a6      	movs	r2, #166	; 0xa6
 800af60:	4918      	ldr	r1, [pc, #96]	; (800afc4 <netconn_new_with_proto_and_callback+0xec>)
 800af62:	4816      	ldr	r0, [pc, #88]	; (800afbc <netconn_new_with_proto_and_callback+0xe4>)
 800af64:	f012 fbb4 	bl	801d6d0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6a:	330c      	adds	r3, #12
 800af6c:	4618      	mov	r0, r3
 800af6e:	f00d fa1d 	bl	80183ac <sys_sem_valid>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d105      	bne.n	800af84 <netconn_new_with_proto_and_callback+0xac>
 800af78:	4b0e      	ldr	r3, [pc, #56]	; (800afb4 <netconn_new_with_proto_and_callback+0xdc>)
 800af7a:	22a9      	movs	r2, #169	; 0xa9
 800af7c:	4912      	ldr	r1, [pc, #72]	; (800afc8 <netconn_new_with_proto_and_callback+0xf0>)
 800af7e:	480f      	ldr	r0, [pc, #60]	; (800afbc <netconn_new_with_proto_and_callback+0xe4>)
 800af80:	f012 fba6 	bl	801d6d0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	330c      	adds	r3, #12
 800af88:	4618      	mov	r0, r3
 800af8a:	f00d fa02 	bl	8018392 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	3310      	adds	r3, #16
 800af92:	4618      	mov	r0, r3
 800af94:	f00d f8f2 	bl	801817c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800af98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af9a:	2007      	movs	r0, #7
 800af9c:	f002 fe7a 	bl	800dc94 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e000      	b.n	800afa6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3730      	adds	r7, #48	; 0x30
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	0800be25 	.word	0x0800be25
 800afb4:	0801eae0 	.word	0x0801eae0
 800afb8:	0801eb14 	.word	0x0801eb14
 800afbc:	0801eb38 	.word	0x0801eb38
 800afc0:	0801eb60 	.word	0x0801eb60
 800afc4:	0801eb78 	.word	0x0801eb78
 800afc8:	0801eb9c 	.word	0x0801eb9c

0800afcc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08c      	sub	sp, #48	; 0x30
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <netconn_prepare_delete+0x12>
    return ERR_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	e014      	b.n	800b008 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800afe2:	2329      	movs	r3, #41	; 0x29
 800afe4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800afe6:	f107 030c 	add.w	r3, r7, #12
 800afea:	4619      	mov	r1, r3
 800afec:	4808      	ldr	r0, [pc, #32]	; (800b010 <netconn_prepare_delete+0x44>)
 800afee:	f7ff ff55 	bl	800ae9c <netconn_apimsg>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800aff8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <netconn_prepare_delete+0x3a>
    return err;
 800b000:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b004:	e000      	b.n	800b008 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3730      	adds	r7, #48	; 0x30
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	0800c391 	.word	0x0800c391

0800b014 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <netconn_delete+0x12>
    return ERR_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	e00d      	b.n	800b042 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff ffd0 	bl	800afcc <netconn_prepare_delete>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800b030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <netconn_delete+0x2a>
    netconn_free(conn);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 ff77 	bl	800bf2c <netconn_free>
  }
  return err;
 800b03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08e      	sub	sp, #56	; 0x38
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d109      	bne.n	800b074 <netconn_connect+0x28>
 800b060:	4b11      	ldr	r3, [pc, #68]	; (800b0a8 <netconn_connect+0x5c>)
 800b062:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800b066:	4911      	ldr	r1, [pc, #68]	; (800b0ac <netconn_connect+0x60>)
 800b068:	4811      	ldr	r0, [pc, #68]	; (800b0b0 <netconn_connect+0x64>)
 800b06a:	f012 fb31 	bl	801d6d0 <iprintf>
 800b06e:	f06f 030f 	mvn.w	r3, #15
 800b072:	e015      	b.n	800b0a0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800b07a:	4b0e      	ldr	r3, [pc, #56]	; (800b0b4 <netconn_connect+0x68>)
 800b07c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800b08a:	f107 0314 	add.w	r3, r7, #20
 800b08e:	4619      	mov	r1, r3
 800b090:	4809      	ldr	r0, [pc, #36]	; (800b0b8 <netconn_connect+0x6c>)
 800b092:	f7ff ff03 	bl	800ae9c <netconn_apimsg>
 800b096:	4603      	mov	r3, r0
 800b098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800b09c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3738      	adds	r7, #56	; 0x38
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	0801eae0 	.word	0x0801eae0
 800b0ac:	0801ec54 	.word	0x0801ec54
 800b0b0:	0801eb38 	.word	0x0801eb38
 800b0b4:	080222ec 	.word	0x080222ec
 800b0b8:	0800c679 	.word	0x0800c679

0800b0bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b088      	sub	sp, #32
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d109      	bne.n	800b0e8 <netconn_recv_data+0x2c>
 800b0d4:	4b58      	ldr	r3, [pc, #352]	; (800b238 <netconn_recv_data+0x17c>)
 800b0d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b0da:	4958      	ldr	r1, [pc, #352]	; (800b23c <netconn_recv_data+0x180>)
 800b0dc:	4858      	ldr	r0, [pc, #352]	; (800b240 <netconn_recv_data+0x184>)
 800b0de:	f012 faf7 	bl	801d6d0 <iprintf>
 800b0e2:	f06f 030f 	mvn.w	r3, #15
 800b0e6:	e0a2      	b.n	800b22e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d109      	bne.n	800b108 <netconn_recv_data+0x4c>
 800b0f4:	4b50      	ldr	r3, [pc, #320]	; (800b238 <netconn_recv_data+0x17c>)
 800b0f6:	f240 224a 	movw	r2, #586	; 0x24a
 800b0fa:	4952      	ldr	r1, [pc, #328]	; (800b244 <netconn_recv_data+0x188>)
 800b0fc:	4850      	ldr	r0, [pc, #320]	; (800b240 <netconn_recv_data+0x184>)
 800b0fe:	f012 fae7 	bl	801d6d0 <iprintf>
 800b102:	f06f 030f 	mvn.w	r3, #15
 800b106:	e092      	b.n	800b22e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3310      	adds	r3, #16
 800b10c:	4618      	mov	r0, r3
 800b10e:	f00d f8bc 	bl	801828a <sys_mbox_valid>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10e      	bne.n	800b136 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fad4 	bl	800b6c6 <netconn_err>
 800b11e:	4603      	mov	r3, r0
 800b120:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800b122:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800b12a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b12e:	e07e      	b.n	800b22e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800b130:	f06f 030a 	mvn.w	r3, #10
 800b134:	e07b      	b.n	800b22e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	7f1b      	ldrb	r3, [r3, #28]
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10f      	bne.n	800b162 <netconn_recv_data+0xa6>
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10a      	bne.n	800b162 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	7f1b      	ldrb	r3, [r3, #28]
 800b150:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800b154:	2b00      	cmp	r3, #0
 800b156:	d104      	bne.n	800b162 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d023      	beq.n	800b1aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3310      	adds	r3, #16
 800b166:	f107 0218 	add.w	r2, r7, #24
 800b16a:	4611      	mov	r1, r2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f00d f870 	bl	8018252 <sys_arch_mbox_tryfetch>
 800b172:	4603      	mov	r3, r0
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b178:	d11f      	bne.n	800b1ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 faa3 	bl	800b6c6 <netconn_err>
 800b180:	4603      	mov	r3, r0
 800b182:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800b184:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800b18c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b190:	e04d      	b.n	800b22e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	7f1b      	ldrb	r3, [r3, #28]
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800b19e:	f06f 030a 	mvn.w	r3, #10
 800b1a2:	e044      	b.n	800b22e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800b1a4:	f06f 0306 	mvn.w	r3, #6
 800b1a8:	e041      	b.n	800b22e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3310      	adds	r3, #16
 800b1ae:	f107 0118 	add.w	r1, r7, #24
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f00d f80d 	bl	80181d4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1c2:	2b10      	cmp	r3, #16
 800b1c4:	d117      	bne.n	800b1f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	f107 0217 	add.w	r2, r7, #23
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 faca 	bl	800b768 <lwip_netconn_is_err_msg>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d009      	beq.n	800b1ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800b1da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1de:	f113 0f0f 	cmn.w	r3, #15
 800b1e2:	d101      	bne.n	800b1e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e022      	b.n	800b22e <netconn_recv_data+0x172>
      }
      return err;
 800b1e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1ec:	e01f      	b.n	800b22e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	891b      	ldrh	r3, [r3, #8]
 800b1f2:	83fb      	strh	r3, [r7, #30]
 800b1f4:	e00d      	b.n	800b212 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d106      	bne.n	800b20a <netconn_recv_data+0x14e>
 800b1fc:	4b0e      	ldr	r3, [pc, #56]	; (800b238 <netconn_recv_data+0x17c>)
 800b1fe:	f240 2291 	movw	r2, #657	; 0x291
 800b202:	4911      	ldr	r1, [pc, #68]	; (800b248 <netconn_recv_data+0x18c>)
 800b204:	480e      	ldr	r0, [pc, #56]	; (800b240 <netconn_recv_data+0x184>)
 800b206:	f012 fa63 	bl	801d6d0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	891b      	ldrh	r3, [r3, #8]
 800b210:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <netconn_recv_data+0x16a>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	8bfa      	ldrh	r2, [r7, #30]
 800b220:	2101      	movs	r1, #1
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3720      	adds	r7, #32
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	0801eae0 	.word	0x0801eae0
 800b23c:	0801ecf8 	.word	0x0801ecf8
 800b240:	0801eb38 	.word	0x0801eb38
 800b244:	0801ed18 	.word	0x0801ed18
 800b248:	0801ed34 	.word	0x0801ed34

0800b24c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d005      	beq.n	800b26a <netconn_tcp_recvd_msg+0x1e>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b266:	2b10      	cmp	r3, #16
 800b268:	d009      	beq.n	800b27e <netconn_tcp_recvd_msg+0x32>
 800b26a:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <netconn_tcp_recvd_msg+0x50>)
 800b26c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800b270:	490b      	ldr	r1, [pc, #44]	; (800b2a0 <netconn_tcp_recvd_msg+0x54>)
 800b272:	480c      	ldr	r0, [pc, #48]	; (800b2a4 <netconn_tcp_recvd_msg+0x58>)
 800b274:	f012 fa2c 	bl	801d6d0 <iprintf>
 800b278:	f06f 030f 	mvn.w	r3, #15
 800b27c:	e00a      	b.n	800b294 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800b28a:	6879      	ldr	r1, [r7, #4]
 800b28c:	4806      	ldr	r0, [pc, #24]	; (800b2a8 <netconn_tcp_recvd_msg+0x5c>)
 800b28e:	f7ff fe05 	bl	800ae9c <netconn_apimsg>
 800b292:	4603      	mov	r3, r0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	0801eae0 	.word	0x0801eae0
 800b2a0:	0801ed40 	.word	0x0801ed40
 800b2a4:	0801eb38 	.word	0x0801eb38
 800b2a8:	0800c7f5 	.word	0x0800c7f5

0800b2ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b090      	sub	sp, #64	; 0x40
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3310      	adds	r3, #16
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f00c ffe3 	bl	801828a <sys_mbox_valid>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d102      	bne.n	800b2d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b2ca:	f06f 030a 	mvn.w	r3, #10
 800b2ce:	e06d      	b.n	800b3ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	7f1b      	ldrb	r3, [r3, #28]
 800b2d4:	b25b      	sxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	da07      	bge.n	800b2ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	7f1b      	ldrb	r3, [r3, #28]
 800b2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b2e8:	e039      	b.n	800b35e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	68b9      	ldr	r1, [r7, #8]
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f7ff fee3 	bl	800b0bc <netconn_recv_data>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b2fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b304:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b308:	e050      	b.n	800b3ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b310:	79fb      	ldrb	r3, [r7, #7]
 800b312:	f003 0308 	and.w	r3, r3, #8
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10e      	bne.n	800b338 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <netconn_recv_data_tcp+0x7a>
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	891b      	ldrh	r3, [r3, #8]
 800b324:	e000      	b.n	800b328 <netconn_recv_data_tcp+0x7c>
 800b326:	2301      	movs	r3, #1
 800b328:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b32a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b32c:	f107 0214 	add.w	r2, r7, #20
 800b330:	4619      	mov	r1, r3
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7ff ff8a 	bl	800b24c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d134      	bne.n	800b3a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	f003 0310 	and.w	r3, r3, #16
 800b344:	2b00      	cmp	r3, #0
 800b346:	d009      	beq.n	800b35c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	7f1b      	ldrb	r3, [r3, #28]
 800b34c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b350:	b2da      	uxtb	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b356:	f06f 0306 	mvn.w	r3, #6
 800b35a:	e027      	b.n	800b3ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b35c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <netconn_recv_data_tcp+0xc6>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	2200      	movs	r2, #0
 800b36c:	2101      	movs	r1, #1
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10f      	bne.n	800b39a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f9a3 	bl	800b6c6 <netconn_err>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b386:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d002      	beq.n	800b394 <netconn_recv_data_tcp+0xe8>
          return err;
 800b38e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b392:	e00b      	b.n	800b3ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b394:	f06f 030d 	mvn.w	r3, #13
 800b398:	e008      	b.n	800b3ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b39a:	2101      	movs	r1, #1
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 f955 	bl	800b64c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b3a2:	f06f 030e 	mvn.w	r3, #14
 800b3a6:	e001      	b.n	800b3ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b3a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3740      	adds	r7, #64	; 0x40
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <netconn_recv+0x28>
 800b3c8:	4b32      	ldr	r3, [pc, #200]	; (800b494 <netconn_recv+0xe0>)
 800b3ca:	f240 3263 	movw	r2, #867	; 0x363
 800b3ce:	4932      	ldr	r1, [pc, #200]	; (800b498 <netconn_recv+0xe4>)
 800b3d0:	4832      	ldr	r0, [pc, #200]	; (800b49c <netconn_recv+0xe8>)
 800b3d2:	f012 f97d 	bl	801d6d0 <iprintf>
 800b3d6:	f06f 030f 	mvn.w	r3, #15
 800b3da:	e056      	b.n	800b48a <netconn_recv+0xd6>
  *new_buf = NULL;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d109      	bne.n	800b3fc <netconn_recv+0x48>
 800b3e8:	4b2a      	ldr	r3, [pc, #168]	; (800b494 <netconn_recv+0xe0>)
 800b3ea:	f240 3265 	movw	r2, #869	; 0x365
 800b3ee:	492c      	ldr	r1, [pc, #176]	; (800b4a0 <netconn_recv+0xec>)
 800b3f0:	482a      	ldr	r0, [pc, #168]	; (800b49c <netconn_recv+0xe8>)
 800b3f2:	f012 f96d 	bl	801d6d0 <iprintf>
 800b3f6:	f06f 030f 	mvn.w	r3, #15
 800b3fa:	e046      	b.n	800b48a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b404:	2b10      	cmp	r3, #16
 800b406:	d13a      	bne.n	800b47e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b40c:	2006      	movs	r0, #6
 800b40e:	f002 fbcb 	bl	800dba8 <memp_malloc>
 800b412:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d102      	bne.n	800b420 <netconn_recv+0x6c>
      return ERR_MEM;
 800b41a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b41e:	e034      	b.n	800b48a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b420:	f107 030c 	add.w	r3, r7, #12
 800b424:	2200      	movs	r2, #0
 800b426:	4619      	mov	r1, r3
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff ff3f 	bl	800b2ac <netconn_recv_data_tcp>
 800b42e:	4603      	mov	r3, r0
 800b430:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b432:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d006      	beq.n	800b448 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800b43a:	6979      	ldr	r1, [r7, #20]
 800b43c:	2006      	movs	r0, #6
 800b43e:	f002 fc29 	bl	800dc94 <memp_free>
      return err;
 800b442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b446:	e020      	b.n	800b48a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <netconn_recv+0xa8>
 800b44e:	4b11      	ldr	r3, [pc, #68]	; (800b494 <netconn_recv+0xe0>)
 800b450:	f240 3279 	movw	r2, #889	; 0x379
 800b454:	4913      	ldr	r1, [pc, #76]	; (800b4a4 <netconn_recv+0xf0>)
 800b456:	4811      	ldr	r0, [pc, #68]	; (800b49c <netconn_recv+0xe8>)
 800b458:	f012 f93a 	bl	801d6d0 <iprintf>

    buf->p = p;
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	2200      	movs	r2, #0
 800b46c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2200      	movs	r2, #0
 800b472:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	e005      	b.n	800b48a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800b47e:	2200      	movs	r2, #0
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff fe1a 	bl	800b0bc <netconn_recv_data>
 800b488:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	0801eae0 	.word	0x0801eae0
 800b498:	0801ecf8 	.word	0x0801ecf8
 800b49c:	0801eb38 	.word	0x0801eb38
 800b4a0:	0801ed18 	.word	0x0801ed18
 800b4a4:	0801ed90 	.word	0x0801ed90

0800b4a8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b4be:	78fa      	ldrb	r2, [r7, #3]
 800b4c0:	f107 0110 	add.w	r1, r7, #16
 800b4c4:	6a3b      	ldr	r3, [r7, #32]
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 f805 	bl	800b4dc <netconn_write_vectors_partly>
 800b4d2:	4603      	mov	r3, r0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3718      	adds	r7, #24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b092      	sub	sp, #72	; 0x48
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	80fb      	strh	r3, [r7, #6]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d109      	bne.n	800b50c <netconn_write_vectors_partly+0x30>
 800b4f8:	4b4e      	ldr	r3, [pc, #312]	; (800b634 <netconn_write_vectors_partly+0x158>)
 800b4fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b4fe:	494e      	ldr	r1, [pc, #312]	; (800b638 <netconn_write_vectors_partly+0x15c>)
 800b500:	484e      	ldr	r0, [pc, #312]	; (800b63c <netconn_write_vectors_partly+0x160>)
 800b502:	f012 f8e5 	bl	801d6d0 <iprintf>
 800b506:	f06f 030f 	mvn.w	r3, #15
 800b50a:	e08e      	b.n	800b62a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b514:	2b10      	cmp	r3, #16
 800b516:	d009      	beq.n	800b52c <netconn_write_vectors_partly+0x50>
 800b518:	4b46      	ldr	r3, [pc, #280]	; (800b634 <netconn_write_vectors_partly+0x158>)
 800b51a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b51e:	4948      	ldr	r1, [pc, #288]	; (800b640 <netconn_write_vectors_partly+0x164>)
 800b520:	4846      	ldr	r0, [pc, #280]	; (800b63c <netconn_write_vectors_partly+0x160>)
 800b522:	f012 f8d5 	bl	801d6d0 <iprintf>
 800b526:	f06f 0305 	mvn.w	r3, #5
 800b52a:	e07e      	b.n	800b62a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	7f1b      	ldrb	r3, [r3, #28]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <netconn_write_vectors_partly+0x66>
 800b538:	797b      	ldrb	r3, [r7, #5]
 800b53a:	f003 0304 	and.w	r3, r3, #4
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <netconn_write_vectors_partly+0x6a>
 800b542:	2301      	movs	r3, #1
 800b544:	e000      	b.n	800b548 <netconn_write_vectors_partly+0x6c>
 800b546:	2300      	movs	r3, #0
 800b548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b54c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <netconn_write_vectors_partly+0x84>
 800b554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b55a:	f06f 0305 	mvn.w	r3, #5
 800b55e:	e064      	b.n	800b62a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b564:	2300      	movs	r3, #0
 800b566:	643b      	str	r3, [r7, #64]	; 0x40
 800b568:	e015      	b.n	800b596 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b56c:	00db      	lsls	r3, r3, #3
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	4413      	add	r3, r2
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b576:	4413      	add	r3, r2
 800b578:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	4413      	add	r3, r2
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b586:	429a      	cmp	r2, r3
 800b588:	d202      	bcs.n	800b590 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b58a:	f06f 0305 	mvn.w	r3, #5
 800b58e:	e04c      	b.n	800b62a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b592:	3301      	adds	r3, #1
 800b594:	643b      	str	r3, [r7, #64]	; 0x40
 800b596:	88fb      	ldrh	r3, [r7, #6]
 800b598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b59a:	429a      	cmp	r2, r3
 800b59c:	dbe5      	blt.n	800b56a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b59e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	e040      	b.n	800b62a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	da0a      	bge.n	800b5c4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d102      	bne.n	800b5ba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b5b4:	f06f 0305 	mvn.w	r3, #5
 800b5b8:	e037      	b.n	800b62a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b5ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b5be:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b5cc:	88fb      	ldrh	r3, [r7, #6]
 800b5ce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b5d4:	797b      	ldrb	r3, [r7, #5]
 800b5d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5dc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b5e2:	f107 0314 	add.w	r3, r7, #20
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4816      	ldr	r0, [pc, #88]	; (800b644 <netconn_write_vectors_partly+0x168>)
 800b5ea:	f7ff fc57 	bl	800ae9c <netconn_apimsg>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b5f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d114      	bne.n	800b626 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b606:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b608:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b614:	429a      	cmp	r2, r3
 800b616:	d006      	beq.n	800b626 <netconn_write_vectors_partly+0x14a>
 800b618:	4b06      	ldr	r3, [pc, #24]	; (800b634 <netconn_write_vectors_partly+0x158>)
 800b61a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b61e:	490a      	ldr	r1, [pc, #40]	; (800b648 <netconn_write_vectors_partly+0x16c>)
 800b620:	4806      	ldr	r0, [pc, #24]	; (800b63c <netconn_write_vectors_partly+0x160>)
 800b622:	f012 f855 	bl	801d6d0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b626:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3748      	adds	r7, #72	; 0x48
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	0801eae0 	.word	0x0801eae0
 800b638:	0801edb8 	.word	0x0801edb8
 800b63c:	0801eb38 	.word	0x0801eb38
 800b640:	0801edd4 	.word	0x0801edd4
 800b644:	0800cbf9 	.word	0x0800cbf9
 800b648:	0801edf8 	.word	0x0801edf8

0800b64c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08c      	sub	sp, #48	; 0x30
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	460b      	mov	r3, r1
 800b656:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d109      	bne.n	800b672 <netconn_close_shutdown+0x26>
 800b65e:	4b0f      	ldr	r3, [pc, #60]	; (800b69c <netconn_close_shutdown+0x50>)
 800b660:	f240 4247 	movw	r2, #1095	; 0x447
 800b664:	490e      	ldr	r1, [pc, #56]	; (800b6a0 <netconn_close_shutdown+0x54>)
 800b666:	480f      	ldr	r0, [pc, #60]	; (800b6a4 <netconn_close_shutdown+0x58>)
 800b668:	f012 f832 	bl	801d6d0 <iprintf>
 800b66c:	f06f 030f 	mvn.w	r3, #15
 800b670:	e010      	b.n	800b694 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b676:	78fb      	ldrb	r3, [r7, #3]
 800b678:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b67a:	2329      	movs	r3, #41	; 0x29
 800b67c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b67e:	f107 030c 	add.w	r3, r7, #12
 800b682:	4619      	mov	r1, r3
 800b684:	4808      	ldr	r0, [pc, #32]	; (800b6a8 <netconn_close_shutdown+0x5c>)
 800b686:	f7ff fc09 	bl	800ae9c <netconn_apimsg>
 800b68a:	4603      	mov	r3, r0
 800b68c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b690:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b694:	4618      	mov	r0, r3
 800b696:	3730      	adds	r7, #48	; 0x30
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	0801eae0 	.word	0x0801eae0
 800b6a0:	0801ee1c 	.word	0x0801ee1c
 800b6a4:	0801eb38 	.word	0x0801eb38
 800b6a8:	0800cd11 	.word	0x0800cd11

0800b6ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b6b4:	2103      	movs	r1, #3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff ffc8 	bl	800b64c <netconn_close_shutdown>
 800b6bc:	4603      	mov	r3, r0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <netconn_err+0x12>
    return ERR_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	e00d      	b.n	800b6f4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b6d8:	f00c fef2 	bl	80184c0 <sys_arch_protect>
 800b6dc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	7a1b      	ldrb	r3, [r3, #8]
 800b6e2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f00c fef6 	bl	80184dc <sys_arch_unprotect>
  return err;
 800b6f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b70a:	f113 0f0d 	cmn.w	r3, #13
 800b70e:	d009      	beq.n	800b724 <lwip_netconn_err_to_msg+0x28>
 800b710:	f113 0f0d 	cmn.w	r3, #13
 800b714:	dc0c      	bgt.n	800b730 <lwip_netconn_err_to_msg+0x34>
 800b716:	f113 0f0f 	cmn.w	r3, #15
 800b71a:	d007      	beq.n	800b72c <lwip_netconn_err_to_msg+0x30>
 800b71c:	f113 0f0e 	cmn.w	r3, #14
 800b720:	d002      	beq.n	800b728 <lwip_netconn_err_to_msg+0x2c>
 800b722:	e005      	b.n	800b730 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b724:	4b0a      	ldr	r3, [pc, #40]	; (800b750 <lwip_netconn_err_to_msg+0x54>)
 800b726:	e00e      	b.n	800b746 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b728:	4b0a      	ldr	r3, [pc, #40]	; (800b754 <lwip_netconn_err_to_msg+0x58>)
 800b72a:	e00c      	b.n	800b746 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b72c:	4b0a      	ldr	r3, [pc, #40]	; (800b758 <lwip_netconn_err_to_msg+0x5c>)
 800b72e:	e00a      	b.n	800b746 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d005      	beq.n	800b744 <lwip_netconn_err_to_msg+0x48>
 800b738:	4b08      	ldr	r3, [pc, #32]	; (800b75c <lwip_netconn_err_to_msg+0x60>)
 800b73a:	227d      	movs	r2, #125	; 0x7d
 800b73c:	4908      	ldr	r1, [pc, #32]	; (800b760 <lwip_netconn_err_to_msg+0x64>)
 800b73e:	4809      	ldr	r0, [pc, #36]	; (800b764 <lwip_netconn_err_to_msg+0x68>)
 800b740:	f011 ffc6 	bl	801d6d0 <iprintf>
      return NULL;
 800b744:	2300      	movs	r3, #0
  }
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	080221d8 	.word	0x080221d8
 800b754:	080221d9 	.word	0x080221d9
 800b758:	080221da 	.word	0x080221da
 800b75c:	0801ee38 	.word	0x0801ee38
 800b760:	0801ee6c 	.word	0x0801ee6c
 800b764:	0801ee7c 	.word	0x0801ee7c

0800b768 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d105      	bne.n	800b784 <lwip_netconn_is_err_msg+0x1c>
 800b778:	4b12      	ldr	r3, [pc, #72]	; (800b7c4 <lwip_netconn_is_err_msg+0x5c>)
 800b77a:	2285      	movs	r2, #133	; 0x85
 800b77c:	4912      	ldr	r1, [pc, #72]	; (800b7c8 <lwip_netconn_is_err_msg+0x60>)
 800b77e:	4813      	ldr	r0, [pc, #76]	; (800b7cc <lwip_netconn_is_err_msg+0x64>)
 800b780:	f011 ffa6 	bl	801d6d0 <iprintf>

  if (msg == &netconn_aborted) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a12      	ldr	r2, [pc, #72]	; (800b7d0 <lwip_netconn_is_err_msg+0x68>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d104      	bne.n	800b796 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	22f3      	movs	r2, #243	; 0xf3
 800b790:	701a      	strb	r2, [r3, #0]
    return 1;
 800b792:	2301      	movs	r3, #1
 800b794:	e012      	b.n	800b7bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a0e      	ldr	r2, [pc, #56]	; (800b7d4 <lwip_netconn_is_err_msg+0x6c>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d104      	bne.n	800b7a8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	22f2      	movs	r2, #242	; 0xf2
 800b7a2:	701a      	strb	r2, [r3, #0]
    return 1;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e009      	b.n	800b7bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a0b      	ldr	r2, [pc, #44]	; (800b7d8 <lwip_netconn_is_err_msg+0x70>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d104      	bne.n	800b7ba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	22f1      	movs	r2, #241	; 0xf1
 800b7b4:	701a      	strb	r2, [r3, #0]
    return 1;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e000      	b.n	800b7bc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	0801ee38 	.word	0x0801ee38
 800b7c8:	0801eea4 	.word	0x0801eea4
 800b7cc:	0801ee7c 	.word	0x0801ee7c
 800b7d0:	080221d8 	.word	0x080221d8
 800b7d4:	080221d9 	.word	0x080221d9
 800b7d8:	080221da 	.word	0x080221da

0800b7dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <recv_udp+0x20>
 800b7f0:	4b34      	ldr	r3, [pc, #208]	; (800b8c4 <recv_udp+0xe8>)
 800b7f2:	22e5      	movs	r2, #229	; 0xe5
 800b7f4:	4934      	ldr	r1, [pc, #208]	; (800b8c8 <recv_udp+0xec>)
 800b7f6:	4835      	ldr	r0, [pc, #212]	; (800b8cc <recv_udp+0xf0>)
 800b7f8:	f011 ff6a 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d105      	bne.n	800b80e <recv_udp+0x32>
 800b802:	4b30      	ldr	r3, [pc, #192]	; (800b8c4 <recv_udp+0xe8>)
 800b804:	22e6      	movs	r2, #230	; 0xe6
 800b806:	4932      	ldr	r1, [pc, #200]	; (800b8d0 <recv_udp+0xf4>)
 800b808:	4830      	ldr	r0, [pc, #192]	; (800b8cc <recv_udp+0xf0>)
 800b80a:	f011 ff61 	bl	801d6d0 <iprintf>
  conn = (struct netconn *)arg;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d103      	bne.n	800b820 <recv_udp+0x44>
    pbuf_free(p);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f003 f8df 	bl	800e9dc <pbuf_free>
    return;
 800b81e:	e04d      	b.n	800b8bc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	429a      	cmp	r2, r3
 800b828:	d005      	beq.n	800b836 <recv_udp+0x5a>
 800b82a:	4b26      	ldr	r3, [pc, #152]	; (800b8c4 <recv_udp+0xe8>)
 800b82c:	22ee      	movs	r2, #238	; 0xee
 800b82e:	4929      	ldr	r1, [pc, #164]	; (800b8d4 <recv_udp+0xf8>)
 800b830:	4826      	ldr	r0, [pc, #152]	; (800b8cc <recv_udp+0xf0>)
 800b832:	f011 ff4d 	bl	801d6d0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	3310      	adds	r3, #16
 800b83a:	4618      	mov	r0, r3
 800b83c:	f00c fd25 	bl	801828a <sys_mbox_valid>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d103      	bne.n	800b84e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f003 f8c8 	bl	800e9dc <pbuf_free>
    return;
 800b84c:	e036      	b.n	800b8bc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b84e:	2006      	movs	r0, #6
 800b850:	f002 f9aa 	bl	800dba8 <memp_malloc>
 800b854:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d103      	bne.n	800b864 <recv_udp+0x88>
    pbuf_free(p);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f003 f8bd 	bl	800e9dc <pbuf_free>
    return;
 800b862:	e02b      	b.n	800b8bc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <recv_udp+0xa0>
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	e000      	b.n	800b87e <recv_udp+0xa2>
 800b87c:	2300      	movs	r3, #0
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b886:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	891b      	ldrh	r3, [r3, #8]
 800b88c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	3310      	adds	r3, #16
 800b892:	69b9      	ldr	r1, [r7, #24]
 800b894:	4618      	mov	r0, r3
 800b896:	f00c fc83 	bl	80181a0 <sys_mbox_trypost>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800b8a0:	69b8      	ldr	r0, [r7, #24]
 800b8a2:	f001 fac1 	bl	800ce28 <netbuf_delete>
    return;
 800b8a6:	e009      	b.n	800b8bc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d005      	beq.n	800b8bc <recv_udp+0xe0>
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	8afa      	ldrh	r2, [r7, #22]
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	69f8      	ldr	r0, [r7, #28]
 800b8ba:	4798      	blx	r3
  }
}
 800b8bc:	3720      	adds	r7, #32
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0801ee38 	.word	0x0801ee38
 800b8c8:	0801eeb0 	.word	0x0801eeb0
 800b8cc:	0801ee7c 	.word	0x0801ee7c
 800b8d0:	0801eed4 	.word	0x0801eed4
 800b8d4:	0801eef4 	.word	0x0801eef4

0800b8d8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d106      	bne.n	800b8fa <recv_tcp+0x22>
 800b8ec:	4b36      	ldr	r3, [pc, #216]	; (800b9c8 <recv_tcp+0xf0>)
 800b8ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b8f2:	4936      	ldr	r1, [pc, #216]	; (800b9cc <recv_tcp+0xf4>)
 800b8f4:	4836      	ldr	r0, [pc, #216]	; (800b9d0 <recv_tcp+0xf8>)
 800b8f6:	f011 feeb 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <recv_tcp+0x36>
 800b900:	4b31      	ldr	r3, [pc, #196]	; (800b9c8 <recv_tcp+0xf0>)
 800b902:	f240 122d 	movw	r2, #301	; 0x12d
 800b906:	4933      	ldr	r1, [pc, #204]	; (800b9d4 <recv_tcp+0xfc>)
 800b908:	4831      	ldr	r0, [pc, #196]	; (800b9d0 <recv_tcp+0xf8>)
 800b90a:	f011 fee1 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b90e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d006      	beq.n	800b924 <recv_tcp+0x4c>
 800b916:	4b2c      	ldr	r3, [pc, #176]	; (800b9c8 <recv_tcp+0xf0>)
 800b918:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b91c:	492e      	ldr	r1, [pc, #184]	; (800b9d8 <recv_tcp+0x100>)
 800b91e:	482c      	ldr	r0, [pc, #176]	; (800b9d0 <recv_tcp+0xf8>)
 800b920:	f011 fed6 	bl	801d6d0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <recv_tcp+0x5c>
    return ERR_VAL;
 800b92e:	f06f 0305 	mvn.w	r3, #5
 800b932:	e045      	b.n	800b9c0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d006      	beq.n	800b94c <recv_tcp+0x74>
 800b93e:	4b22      	ldr	r3, [pc, #136]	; (800b9c8 <recv_tcp+0xf0>)
 800b940:	f240 1235 	movw	r2, #309	; 0x135
 800b944:	4925      	ldr	r1, [pc, #148]	; (800b9dc <recv_tcp+0x104>)
 800b946:	4822      	ldr	r0, [pc, #136]	; (800b9d0 <recv_tcp+0xf8>)
 800b948:	f011 fec2 	bl	801d6d0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	3310      	adds	r3, #16
 800b950:	4618      	mov	r0, r3
 800b952:	f00c fc9a 	bl	801828a <sys_mbox_valid>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10d      	bne.n	800b978 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	891b      	ldrh	r3, [r3, #8]
 800b966:	4619      	mov	r1, r3
 800b968:	68b8      	ldr	r0, [r7, #8]
 800b96a:	f003 fe8d 	bl	800f688 <tcp_recved>
      pbuf_free(p);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f003 f834 	bl	800e9dc <pbuf_free>
    }
    return ERR_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	e023      	b.n	800b9c0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d005      	beq.n	800b98a <recv_tcp+0xb2>
    msg = p;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	891b      	ldrh	r3, [r3, #8]
 800b986:	83fb      	strh	r3, [r7, #30]
 800b988:	e003      	b.n	800b992 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b98a:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <recv_tcp+0x108>)
 800b98c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	3310      	adds	r3, #16
 800b996:	69b9      	ldr	r1, [r7, #24]
 800b998:	4618      	mov	r0, r3
 800b99a:	f00c fc01 	bl	80181a0 <sys_mbox_trypost>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b9a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9a8:	e00a      	b.n	800b9c0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d005      	beq.n	800b9be <recv_tcp+0xe6>
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b6:	8bfa      	ldrh	r2, [r7, #30]
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6978      	ldr	r0, [r7, #20]
 800b9bc:	4798      	blx	r3
  }

  return ERR_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	0801ee38 	.word	0x0801ee38
 800b9cc:	0801ef14 	.word	0x0801ef14
 800b9d0:	0801ee7c 	.word	0x0801ee7c
 800b9d4:	0801ef38 	.word	0x0801ef38
 800b9d8:	0801ef58 	.word	0x0801ef58
 800b9dc:	0801ef70 	.word	0x0801ef70
 800b9e0:	080221da 	.word	0x080221da

0800b9e4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d106      	bne.n	800ba06 <poll_tcp+0x22>
 800b9f8:	4b29      	ldr	r3, [pc, #164]	; (800baa0 <poll_tcp+0xbc>)
 800b9fa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b9fe:	4929      	ldr	r1, [pc, #164]	; (800baa4 <poll_tcp+0xc0>)
 800ba00:	4829      	ldr	r0, [pc, #164]	; (800baa8 <poll_tcp+0xc4>)
 800ba02:	f011 fe65 	bl	801d6d0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	785b      	ldrb	r3, [r3, #1]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d104      	bne.n	800ba18 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ba0e:	2101      	movs	r1, #1
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 ff25 	bl	800c860 <lwip_netconn_do_writemore>
 800ba16:	e016      	b.n	800ba46 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	785b      	ldrb	r3, [r3, #1]
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d112      	bne.n	800ba46 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00a      	beq.n	800ba3e <poll_tcp+0x5a>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	7a5b      	ldrb	r3, [r3, #9]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d005      	beq.n	800ba3e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	7a5a      	ldrb	r2, [r3, #9]
 800ba38:	3a01      	subs	r2, #1
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ba3e:	2101      	movs	r1, #1
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 fb3b 	bl	800c0bc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	7f1b      	ldrb	r3, [r3, #28]
 800ba4a:	f003 0310 	and.w	r3, r3, #16
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d021      	beq.n	800ba96 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d01d      	beq.n	800ba96 <poll_tcp+0xb2>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba62:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ba66:	d316      	bcc.n	800ba96 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d810      	bhi.n	800ba96 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	7f1b      	ldrb	r3, [r3, #28]
 800ba78:	f023 0310 	bic.w	r3, r3, #16
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d005      	beq.n	800ba96 <poll_tcp+0xb2>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2102      	movs	r1, #2
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	0801ee38 	.word	0x0801ee38
 800baa4:	0801ef90 	.word	0x0801ef90
 800baa8:	0801ee7c 	.word	0x0801ee7c

0800baac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	4613      	mov	r3, r2
 800bab8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d106      	bne.n	800bad2 <sent_tcp+0x26>
 800bac4:	4b20      	ldr	r3, [pc, #128]	; (800bb48 <sent_tcp+0x9c>)
 800bac6:	f240 1293 	movw	r2, #403	; 0x193
 800baca:	4920      	ldr	r1, [pc, #128]	; (800bb4c <sent_tcp+0xa0>)
 800bacc:	4820      	ldr	r0, [pc, #128]	; (800bb50 <sent_tcp+0xa4>)
 800bace:	f011 fdff 	bl	801d6d0 <iprintf>

  if (conn) {
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d032      	beq.n	800bb3e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	785b      	ldrb	r3, [r3, #1]
 800badc:	2b01      	cmp	r3, #1
 800bade:	d104      	bne.n	800baea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bae0:	2101      	movs	r1, #1
 800bae2:	6978      	ldr	r0, [r7, #20]
 800bae4:	f000 febc 	bl	800c860 <lwip_netconn_do_writemore>
 800bae8:	e007      	b.n	800bafa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	2b04      	cmp	r3, #4
 800baf0:	d103      	bne.n	800bafa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800baf2:	2101      	movs	r1, #1
 800baf4:	6978      	ldr	r0, [r7, #20]
 800baf6:	f000 fae1 	bl	800c0bc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d01d      	beq.n	800bb3e <sent_tcp+0x92>
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bb0a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bb0e:	d316      	bcc.n	800bb3e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bb18:	2b04      	cmp	r3, #4
 800bb1a:	d810      	bhi.n	800bb3e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	7f1b      	ldrb	r3, [r3, #28]
 800bb20:	f023 0310 	bic.w	r3, r3, #16
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <sent_tcp+0x92>
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	88fa      	ldrh	r2, [r7, #6]
 800bb38:	2102      	movs	r1, #2
 800bb3a:	6978      	ldr	r0, [r7, #20]
 800bb3c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	0801ee38 	.word	0x0801ee38
 800bb4c:	0801ef90 	.word	0x0801ef90
 800bb50:	0801ee7c 	.word	0x0801ee7c

0800bb54 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b088      	sub	sp, #32
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <err_tcp+0x24>
 800bb6a:	4b5f      	ldr	r3, [pc, #380]	; (800bce8 <err_tcp+0x194>)
 800bb6c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800bb70:	495e      	ldr	r1, [pc, #376]	; (800bcec <err_tcp+0x198>)
 800bb72:	485f      	ldr	r0, [pc, #380]	; (800bcf0 <err_tcp+0x19c>)
 800bb74:	f011 fdac 	bl	801d6d0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800bb78:	f00c fca2 	bl	80184c0 <sys_arch_protect>
 800bb7c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	2200      	movs	r2, #0
 800bb82:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	7f1b      	ldrb	r3, [r3, #28]
 800bb8e:	f043 0301 	orr.w	r3, r3, #1
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	785b      	ldrb	r3, [r3, #1]
 800bb9c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	2200      	movs	r2, #0
 800bba2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800bba4:	69b8      	ldr	r0, [r7, #24]
 800bba6:	f00c fc99 	bl	80184dc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <err_tcp+0x6a>
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2104      	movs	r1, #4
 800bbba:	69f8      	ldr	r0, [r7, #28]
 800bbbc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d005      	beq.n	800bbd2 <err_tcp+0x7e>
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	69f8      	ldr	r0, [r7, #28]
 800bbd0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d005      	beq.n	800bbe6 <err_tcp+0x92>
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	69f8      	ldr	r0, [r7, #28]
 800bbe4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800bbe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff fd86 	bl	800b6fc <lwip_netconn_err_to_msg>
 800bbf0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	3310      	adds	r3, #16
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f00c fb47 	bl	801828a <sys_mbox_valid>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d005      	beq.n	800bc0e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	3310      	adds	r3, #16
 800bc06:	6939      	ldr	r1, [r7, #16]
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f00c fac9 	bl	80181a0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	3314      	adds	r3, #20
 800bc12:	4618      	mov	r0, r3
 800bc14:	f00c fb39 	bl	801828a <sys_mbox_valid>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d005      	beq.n	800bc2a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	3314      	adds	r3, #20
 800bc22:	6939      	ldr	r1, [r7, #16]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f00c fabb 	bl	80181a0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d005      	beq.n	800bc3c <err_tcp+0xe8>
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d002      	beq.n	800bc3c <err_tcp+0xe8>
 800bc36:	7dfb      	ldrb	r3, [r7, #23]
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d143      	bne.n	800bcc4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	7f1b      	ldrb	r3, [r3, #28]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bf14      	ite	ne
 800bc48:	2301      	movne	r3, #1
 800bc4a:	2300      	moveq	r3, #0
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	7f1b      	ldrb	r3, [r3, #28]
 800bc54:	f023 0304 	bic.w	r3, r3, #4
 800bc58:	b2da      	uxtb	r2, r3
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d13b      	bne.n	800bcdc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	6a1b      	ldr	r3, [r3, #32]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d106      	bne.n	800bc7a <err_tcp+0x126>
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <err_tcp+0x194>)
 800bc6e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bc72:	4920      	ldr	r1, [pc, #128]	; (800bcf4 <err_tcp+0x1a0>)
 800bc74:	481e      	ldr	r0, [pc, #120]	; (800bcf0 <err_tcp+0x19c>)
 800bc76:	f011 fd2b 	bl	801d6d0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	d104      	bne.n	800bc8a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	2200      	movs	r2, #0
 800bc86:	711a      	strb	r2, [r3, #4]
 800bc88:	e003      	b.n	800bc92 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	78fa      	ldrb	r2, [r7, #3]
 800bc90:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	330c      	adds	r3, #12
 800bc9a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800bc9c:	68b8      	ldr	r0, [r7, #8]
 800bc9e:	f00c fb85 	bl	80183ac <sys_sem_valid>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d106      	bne.n	800bcb6 <err_tcp+0x162>
 800bca8:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <err_tcp+0x194>)
 800bcaa:	f240 12ef 	movw	r2, #495	; 0x1ef
 800bcae:	4912      	ldr	r1, [pc, #72]	; (800bcf8 <err_tcp+0x1a4>)
 800bcb0:	480f      	ldr	r0, [pc, #60]	; (800bcf0 <err_tcp+0x19c>)
 800bcb2:	f011 fd0d 	bl	801d6d0 <iprintf>
      conn->current_msg = NULL;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800bcbc:	68b8      	ldr	r0, [r7, #8]
 800bcbe:	f00c fb5b 	bl	8018378 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800bcc2:	e00b      	b.n	800bcdc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d008      	beq.n	800bcde <err_tcp+0x18a>
 800bccc:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <err_tcp+0x194>)
 800bcce:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bcd2:	490a      	ldr	r1, [pc, #40]	; (800bcfc <err_tcp+0x1a8>)
 800bcd4:	4806      	ldr	r0, [pc, #24]	; (800bcf0 <err_tcp+0x19c>)
 800bcd6:	f011 fcfb 	bl	801d6d0 <iprintf>
  }
}
 800bcda:	e000      	b.n	800bcde <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800bcdc:	bf00      	nop
}
 800bcde:	bf00      	nop
 800bce0:	3720      	adds	r7, #32
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	0801ee38 	.word	0x0801ee38
 800bcec:	0801ef90 	.word	0x0801ef90
 800bcf0:	0801ee7c 	.word	0x0801ee7c
 800bcf4:	0801efa0 	.word	0x0801efa0
 800bcf8:	0801efbc 	.word	0x0801efbc
 800bcfc:	0801efd8 	.word	0x0801efd8

0800bd00 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f004 fc97 	bl	8010644 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800bd16:	490a      	ldr	r1, [pc, #40]	; (800bd40 <setup_tcp+0x40>)
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f004 fca5 	bl	8010668 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800bd1e:	4909      	ldr	r1, [pc, #36]	; (800bd44 <setup_tcp+0x44>)
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f004 fcc3 	bl	80106ac <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bd26:	2202      	movs	r2, #2
 800bd28:	4907      	ldr	r1, [pc, #28]	; (800bd48 <setup_tcp+0x48>)
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f004 fd1a 	bl	8010764 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bd30:	4906      	ldr	r1, [pc, #24]	; (800bd4c <setup_tcp+0x4c>)
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f004 fcdc 	bl	80106f0 <tcp_err>
}
 800bd38:	bf00      	nop
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	0800b8d9 	.word	0x0800b8d9
 800bd44:	0800baad 	.word	0x0800baad
 800bd48:	0800b9e5 	.word	0x0800b9e5
 800bd4c:	0800bb55 	.word	0x0800bb55

0800bd50 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bd50:	b590      	push	{r4, r7, lr}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d006      	beq.n	800bd74 <pcb_new+0x24>
 800bd66:	4b2b      	ldr	r3, [pc, #172]	; (800be14 <pcb_new+0xc4>)
 800bd68:	f240 2265 	movw	r2, #613	; 0x265
 800bd6c:	492a      	ldr	r1, [pc, #168]	; (800be18 <pcb_new+0xc8>)
 800bd6e:	482b      	ldr	r0, [pc, #172]	; (800be1c <pcb_new+0xcc>)
 800bd70:	f011 fcae 	bl	801d6d0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd7e:	2b10      	cmp	r3, #16
 800bd80:	d022      	beq.n	800bdc8 <pcb_new+0x78>
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	d133      	bne.n	800bdee <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681c      	ldr	r4, [r3, #0]
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f009 fda6 	bl	80158de <udp_new_ip_type>
 800bd92:	4603      	mov	r3, r0
 800bd94:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d02a      	beq.n	800bdf6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b22      	cmp	r3, #34	; 0x22
 800bda8:	d104      	bne.n	800bdb4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6858      	ldr	r0, [r3, #4]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	4917      	ldr	r1, [pc, #92]	; (800be20 <pcb_new+0xd0>)
 800bdc2:	f009 fd13 	bl	80157ec <udp_recv>
      }
      break;
 800bdc6:	e016      	b.n	800bdf6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681c      	ldr	r4, [r3, #0]
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f004 fc2a 	bl	8010628 <tcp_new_ip_type>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00b      	beq.n	800bdfa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff ff8a 	bl	800bd00 <setup_tcp>
      }
      break;
 800bdec:	e005      	b.n	800bdfa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	22fa      	movs	r2, #250	; 0xfa
 800bdf2:	711a      	strb	r2, [r3, #4]
      return;
 800bdf4:	e00a      	b.n	800be0c <pcb_new+0xbc>
      break;
 800bdf6:	bf00      	nop
 800bdf8:	e000      	b.n	800bdfc <pcb_new+0xac>
      break;
 800bdfa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d102      	bne.n	800be0c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	22ff      	movs	r2, #255	; 0xff
 800be0a:	711a      	strb	r2, [r3, #4]
  }
}
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd90      	pop	{r4, r7, pc}
 800be12:	bf00      	nop
 800be14:	0801ee38 	.word	0x0801ee38
 800be18:	0801f01c 	.word	0x0801f01c
 800be1c:	0801ee7c 	.word	0x0801ee7c
 800be20:	0800b7dd 	.word	0x0800b7dd

0800be24 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f7ff ff85 	bl	800bd50 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800be60:	2007      	movs	r0, #7
 800be62:	f001 fea1 	bl	800dba8 <memp_malloc>
 800be66:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <netconn_alloc+0x22>
    return NULL;
 800be6e:	2300      	movs	r3, #0
 800be70:	e052      	b.n	800bf18 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	79fa      	ldrb	r2, [r7, #7]
 800be7c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be8a:	2b10      	cmp	r3, #16
 800be8c:	d004      	beq.n	800be98 <netconn_alloc+0x48>
 800be8e:	2b20      	cmp	r3, #32
 800be90:	d105      	bne.n	800be9e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800be92:	2306      	movs	r3, #6
 800be94:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800be96:	e00a      	b.n	800beae <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800be98:	2306      	movs	r3, #6
 800be9a:	617b      	str	r3, [r7, #20]
      break;
 800be9c:	e007      	b.n	800beae <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800be9e:	4b20      	ldr	r3, [pc, #128]	; (800bf20 <netconn_alloc+0xd0>)
 800bea0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bea4:	491f      	ldr	r1, [pc, #124]	; (800bf24 <netconn_alloc+0xd4>)
 800bea6:	4820      	ldr	r0, [pc, #128]	; (800bf28 <netconn_alloc+0xd8>)
 800bea8:	f011 fc12 	bl	801d6d0 <iprintf>
      goto free_and_return;
 800beac:	e02f      	b.n	800bf0e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3310      	adds	r3, #16
 800beb2:	6979      	ldr	r1, [r7, #20]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f00c f93f 	bl	8018138 <sys_mbox_new>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d125      	bne.n	800bf0c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	330c      	adds	r3, #12
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f00c f9fd 	bl	80182c6 <sys_sem_new>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3310      	adds	r3, #16
 800bed6:	4618      	mov	r0, r3
 800bed8:	f00c f950 	bl	801817c <sys_mbox_free>
    goto free_and_return;
 800bedc:	e017      	b.n	800bf0e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3314      	adds	r3, #20
 800bee2:	4618      	mov	r0, r3
 800bee4:	f00c f9e2 	bl	80182ac <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bef4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	7cfa      	ldrb	r2, [r7, #19]
 800bf06:	771a      	strb	r2, [r3, #28]
  return conn;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	e005      	b.n	800bf18 <netconn_alloc+0xc8>
    goto free_and_return;
 800bf0c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800bf0e:	68f9      	ldr	r1, [r7, #12]
 800bf10:	2007      	movs	r0, #7
 800bf12:	f001 febf 	bl	800dc94 <memp_free>
  return NULL;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	0801ee38 	.word	0x0801ee38
 800bf24:	0801f03c 	.word	0x0801f03c
 800bf28:	0801ee7c 	.word	0x0801ee7c

0800bf2c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d006      	beq.n	800bf4a <netconn_free+0x1e>
 800bf3c:	4b1b      	ldr	r3, [pc, #108]	; (800bfac <netconn_free+0x80>)
 800bf3e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bf42:	491b      	ldr	r1, [pc, #108]	; (800bfb0 <netconn_free+0x84>)
 800bf44:	481b      	ldr	r0, [pc, #108]	; (800bfb4 <netconn_free+0x88>)
 800bf46:	f011 fbc3 	bl	801d6d0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3310      	adds	r3, #16
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f00c f99b 	bl	801828a <sys_mbox_valid>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d006      	beq.n	800bf68 <netconn_free+0x3c>
 800bf5a:	4b14      	ldr	r3, [pc, #80]	; (800bfac <netconn_free+0x80>)
 800bf5c:	f240 3223 	movw	r2, #803	; 0x323
 800bf60:	4915      	ldr	r1, [pc, #84]	; (800bfb8 <netconn_free+0x8c>)
 800bf62:	4814      	ldr	r0, [pc, #80]	; (800bfb4 <netconn_free+0x88>)
 800bf64:	f011 fbb4 	bl	801d6d0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3314      	adds	r3, #20
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f00c f98c 	bl	801828a <sys_mbox_valid>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <netconn_free+0x5a>
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <netconn_free+0x80>)
 800bf7a:	f240 3226 	movw	r2, #806	; 0x326
 800bf7e:	490f      	ldr	r1, [pc, #60]	; (800bfbc <netconn_free+0x90>)
 800bf80:	480c      	ldr	r0, [pc, #48]	; (800bfb4 <netconn_free+0x88>)
 800bf82:	f011 fba5 	bl	801d6d0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	330c      	adds	r3, #12
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f00c fa01 	bl	8018392 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	330c      	adds	r3, #12
 800bf94:	4618      	mov	r0, r3
 800bf96:	f00c fa1a 	bl	80183ce <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	2007      	movs	r0, #7
 800bf9e:	f001 fe79 	bl	800dc94 <memp_free>
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	0801ee38 	.word	0x0801ee38
 800bfb0:	0801f064 	.word	0x0801f064
 800bfb4:	0801ee7c 	.word	0x0801ee7c
 800bfb8:	0801f094 	.word	0x0801f094
 800bfbc:	0801f0d0 	.word	0x0801f0d0

0800bfc0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3310      	adds	r3, #16
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f00c f95c 	bl	801828a <sys_mbox_valid>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d02f      	beq.n	800c038 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bfd8:	e018      	b.n	800c00c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfe2:	2b10      	cmp	r3, #16
 800bfe4:	d10e      	bne.n	800c004 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	f107 020f 	add.w	r2, r7, #15
 800bfec:	4611      	mov	r1, r2
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7ff fbba 	bl	800b768 <lwip_netconn_is_err_msg>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d108      	bne.n	800c00c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f002 fced 	bl	800e9dc <pbuf_free>
 800c002:	e003      	b.n	800c00c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	4618      	mov	r0, r3
 800c008:	f000 ff0e 	bl	800ce28 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3310      	adds	r3, #16
 800c010:	f107 0210 	add.w	r2, r7, #16
 800c014:	4611      	mov	r1, r2
 800c016:	4618      	mov	r0, r3
 800c018:	f00c f91b 	bl	8018252 <sys_arch_mbox_tryfetch>
 800c01c:	4603      	mov	r3, r0
 800c01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c022:	d1da      	bne.n	800bfda <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3310      	adds	r3, #16
 800c028:	4618      	mov	r0, r3
 800c02a:	f00c f8a7 	bl	801817c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3310      	adds	r3, #16
 800c032:	4618      	mov	r0, r3
 800c034:	f00c f93a 	bl	80182ac <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3314      	adds	r3, #20
 800c03c:	4618      	mov	r0, r3
 800c03e:	f00c f924 	bl	801828a <sys_mbox_valid>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d034      	beq.n	800c0b2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c048:	e01d      	b.n	800c086 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	f107 020e 	add.w	r2, r7, #14
 800c050:	4611      	mov	r1, r2
 800c052:	4618      	mov	r0, r3
 800c054:	f7ff fb88 	bl	800b768 <lwip_netconn_is_err_msg>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d113      	bne.n	800c086 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c062:	6978      	ldr	r0, [r7, #20]
 800c064:	f7ff ffac 	bl	800bfc0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d007      	beq.n	800c080 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	4618      	mov	r0, r3
 800c076:	f003 faa1 	bl	800f5bc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2200      	movs	r2, #0
 800c07e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c080:	6978      	ldr	r0, [r7, #20]
 800c082:	f7ff ff53 	bl	800bf2c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3314      	adds	r3, #20
 800c08a:	f107 0210 	add.w	r2, r7, #16
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f00c f8de 	bl	8018252 <sys_arch_mbox_tryfetch>
 800c096:	4603      	mov	r3, r0
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c09c:	d1d5      	bne.n	800c04a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3314      	adds	r3, #20
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f00c f86a 	bl	801817c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3314      	adds	r3, #20
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f00c f8fd 	bl	80182ac <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c0b2:	bf00      	nop
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d106      	bne.n	800c0e0 <lwip_netconn_do_close_internal+0x24>
 800c0d2:	4b87      	ldr	r3, [pc, #540]	; (800c2f0 <lwip_netconn_do_close_internal+0x234>)
 800c0d4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c0d8:	4986      	ldr	r1, [pc, #536]	; (800c2f4 <lwip_netconn_do_close_internal+0x238>)
 800c0da:	4887      	ldr	r0, [pc, #540]	; (800c2f8 <lwip_netconn_do_close_internal+0x23c>)
 800c0dc:	f011 faf8 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0e8:	2b10      	cmp	r3, #16
 800c0ea:	d006      	beq.n	800c0fa <lwip_netconn_do_close_internal+0x3e>
 800c0ec:	4b80      	ldr	r3, [pc, #512]	; (800c2f0 <lwip_netconn_do_close_internal+0x234>)
 800c0ee:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c0f2:	4982      	ldr	r1, [pc, #520]	; (800c2fc <lwip_netconn_do_close_internal+0x240>)
 800c0f4:	4880      	ldr	r0, [pc, #512]	; (800c2f8 <lwip_netconn_do_close_internal+0x23c>)
 800c0f6:	f011 faeb 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	785b      	ldrb	r3, [r3, #1]
 800c0fe:	2b04      	cmp	r3, #4
 800c100:	d006      	beq.n	800c110 <lwip_netconn_do_close_internal+0x54>
 800c102:	4b7b      	ldr	r3, [pc, #492]	; (800c2f0 <lwip_netconn_do_close_internal+0x234>)
 800c104:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c108:	497d      	ldr	r1, [pc, #500]	; (800c300 <lwip_netconn_do_close_internal+0x244>)
 800c10a:	487b      	ldr	r0, [pc, #492]	; (800c2f8 <lwip_netconn_do_close_internal+0x23c>)
 800c10c:	f011 fae0 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d106      	bne.n	800c126 <lwip_netconn_do_close_internal+0x6a>
 800c118:	4b75      	ldr	r3, [pc, #468]	; (800c2f0 <lwip_netconn_do_close_internal+0x234>)
 800c11a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c11e:	4979      	ldr	r1, [pc, #484]	; (800c304 <lwip_netconn_do_close_internal+0x248>)
 800c120:	4875      	ldr	r0, [pc, #468]	; (800c2f8 <lwip_netconn_do_close_internal+0x23c>)
 800c122:	f011 fad5 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <lwip_netconn_do_close_internal+0x80>
 800c12e:	4b70      	ldr	r3, [pc, #448]	; (800c2f0 <lwip_netconn_do_close_internal+0x234>)
 800c130:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c134:	4974      	ldr	r1, [pc, #464]	; (800c308 <lwip_netconn_do_close_internal+0x24c>)
 800c136:	4870      	ldr	r0, [pc, #448]	; (800c2f8 <lwip_netconn_do_close_internal+0x23c>)
 800c138:	f011 faca 	bl	801d6d0 <iprintf>

  tpcb = conn->pcb.tcp;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	7a1b      	ldrb	r3, [r3, #8]
 800c148:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	f003 0302 	and.w	r3, r3, #2
 800c158:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
 800c15c:	2b03      	cmp	r3, #3
 800c15e:	d102      	bne.n	800c166 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c160:	2301      	movs	r3, #1
 800c162:	75bb      	strb	r3, [r7, #22]
 800c164:	e01f      	b.n	800c1a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c166:	7bbb      	ldrb	r3, [r7, #14]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00e      	beq.n	800c18a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c170:	2b05      	cmp	r3, #5
 800c172:	d007      	beq.n	800c184 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c178:	2b06      	cmp	r3, #6
 800c17a:	d003      	beq.n	800c184 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c180:	2b08      	cmp	r3, #8
 800c182:	d102      	bne.n	800c18a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c184:	2301      	movs	r3, #1
 800c186:	75bb      	strb	r3, [r7, #22]
 800c188:	e00d      	b.n	800c1a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c18a:	7b7b      	ldrb	r3, [r7, #13]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d008      	beq.n	800c1a2 <lwip_netconn_do_close_internal+0xe6>
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	8b5b      	ldrh	r3, [r3, #26]
 800c194:	f003 0310 	and.w	r3, r3, #16
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c19c:	2301      	movs	r3, #1
 800c19e:	75bb      	strb	r3, [r7, #22]
 800c1a0:	e001      	b.n	800c1a6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c1a6:	7dbb      	ldrb	r3, [r7, #22]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	6938      	ldr	r0, [r7, #16]
 800c1b0:	f004 fa48 	bl	8010644 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	7d1b      	ldrb	r3, [r3, #20]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d104      	bne.n	800c1c6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c1bc:	2100      	movs	r1, #0
 800c1be:	6938      	ldr	r0, [r7, #16]
 800c1c0:	f004 fab8 	bl	8010734 <tcp_accept>
 800c1c4:	e01d      	b.n	800c202 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	6938      	ldr	r0, [r7, #16]
 800c1d0:	f004 fa4a 	bl	8010668 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	6938      	ldr	r0, [r7, #16]
 800c1d8:	f004 faac 	bl	8010734 <tcp_accept>
    }
    if (shut_tx) {
 800c1dc:	7b7b      	ldrb	r3, [r7, #13]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	6938      	ldr	r0, [r7, #16]
 800c1e6:	f004 fa61 	bl	80106ac <tcp_sent>
    }
    if (shut_close) {
 800c1ea:	7dbb      	ldrb	r3, [r7, #22]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d008      	beq.n	800c202 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	6938      	ldr	r0, [r7, #16]
 800c1f6:	f004 fab5 	bl	8010764 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	6938      	ldr	r0, [r7, #16]
 800c1fe:	f004 fa77 	bl	80106f0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c202:	7dbb      	ldrb	r3, [r7, #22]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d005      	beq.n	800c214 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c208:	6938      	ldr	r0, [r7, #16]
 800c20a:	f003 f891 	bl	800f330 <tcp_close>
 800c20e:	4603      	mov	r3, r0
 800c210:	75fb      	strb	r3, [r7, #23]
 800c212:	e007      	b.n	800c224 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	7b7a      	ldrb	r2, [r7, #13]
 800c218:	4619      	mov	r1, r3
 800c21a:	6938      	ldr	r0, [r7, #16]
 800c21c:	f003 f8b4 	bl	800f388 <tcp_shutdown>
 800c220:	4603      	mov	r3, r0
 800c222:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d102      	bne.n	800c232 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c22c:	2301      	movs	r3, #1
 800c22e:	757b      	strb	r3, [r7, #21]
 800c230:	e016      	b.n	800c260 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c23a:	d10f      	bne.n	800c25c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	7a5b      	ldrb	r3, [r3, #9]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10c      	bne.n	800c260 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c246:	2301      	movs	r3, #1
 800c248:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c24a:	7dbb      	ldrb	r3, [r7, #22]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d007      	beq.n	800c260 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c250:	6938      	ldr	r0, [r7, #16]
 800c252:	f003 f9b3 	bl	800f5bc <tcp_abort>
          err = ERR_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	75fb      	strb	r3, [r7, #23]
 800c25a:	e001      	b.n	800c260 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c25c:	2301      	movs	r3, #1
 800c25e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c260:	7d7b      	ldrb	r3, [r7, #21]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d052      	beq.n	800c30c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	330c      	adds	r3, #12
 800c26e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	7dfa      	ldrb	r2, [r7, #23]
 800c276:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d129      	bne.n	800c2e0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c28c:	7dbb      	ldrb	r3, [r7, #22]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00c      	beq.n	800c2ac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <lwip_netconn_do_close_internal+0x1f0>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2104      	movs	r1, #4
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	4798      	blx	r3
      }
      if (shut_rx) {
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d009      	beq.n	800c2c6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d005      	beq.n	800c2c6 <lwip_netconn_do_close_internal+0x20a>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	4798      	blx	r3
      }
      if (shut_tx) {
 800c2c6:	7b7b      	ldrb	r3, [r7, #13]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d009      	beq.n	800c2e0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d005      	beq.n	800c2e0 <lwip_netconn_do_close_internal+0x224>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2102      	movs	r1, #2
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c2e0:	78fb      	ldrb	r3, [r7, #3]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d002      	beq.n	800c2ec <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c2e6:	68b8      	ldr	r0, [r7, #8]
 800c2e8:	f00c f846 	bl	8018378 <sys_sem_signal>
    }
    return ERR_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e03c      	b.n	800c36a <lwip_netconn_do_close_internal+0x2ae>
 800c2f0:	0801ee38 	.word	0x0801ee38
 800c2f4:	0801f10c 	.word	0x0801f10c
 800c2f8:	0801ee7c 	.word	0x0801ee7c
 800c2fc:	0801f11c 	.word	0x0801f11c
 800c300:	0801f13c 	.word	0x0801f13c
 800c304:	0801f160 	.word	0x0801f160
 800c308:	0801efa0 	.word	0x0801efa0
  }
  if (!close_finished) {
 800c30c:	7d7b      	ldrb	r3, [r7, #21]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d11e      	bne.n	800c350 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	7d1b      	ldrb	r3, [r3, #20]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d106      	bne.n	800c328 <lwip_netconn_do_close_internal+0x26c>
 800c31a:	4b16      	ldr	r3, [pc, #88]	; (800c374 <lwip_netconn_do_close_internal+0x2b8>)
 800c31c:	f240 4241 	movw	r2, #1089	; 0x441
 800c320:	4915      	ldr	r1, [pc, #84]	; (800c378 <lwip_netconn_do_close_internal+0x2bc>)
 800c322:	4816      	ldr	r0, [pc, #88]	; (800c37c <lwip_netconn_do_close_internal+0x2c0>)
 800c324:	f011 f9d4 	bl	801d6d0 <iprintf>
    if (shut_tx) {
 800c328:	7b7b      	ldrb	r3, [r7, #13]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800c32e:	4914      	ldr	r1, [pc, #80]	; (800c380 <lwip_netconn_do_close_internal+0x2c4>)
 800c330:	6938      	ldr	r0, [r7, #16]
 800c332:	f004 f9bb 	bl	80106ac <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c336:	2201      	movs	r2, #1
 800c338:	4912      	ldr	r1, [pc, #72]	; (800c384 <lwip_netconn_do_close_internal+0x2c8>)
 800c33a:	6938      	ldr	r0, [r7, #16]
 800c33c:	f004 fa12 	bl	8010764 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c340:	4911      	ldr	r1, [pc, #68]	; (800c388 <lwip_netconn_do_close_internal+0x2cc>)
 800c342:	6938      	ldr	r0, [r7, #16]
 800c344:	f004 f9d4 	bl	80106f0 <tcp_err>
    tcp_arg(tpcb, conn);
 800c348:	6879      	ldr	r1, [r7, #4]
 800c34a:	6938      	ldr	r0, [r7, #16]
 800c34c:	f004 f97a 	bl	8010644 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d106      	bne.n	800c366 <lwip_netconn_do_close_internal+0x2aa>
 800c358:	4b06      	ldr	r3, [pc, #24]	; (800c374 <lwip_netconn_do_close_internal+0x2b8>)
 800c35a:	f240 424d 	movw	r2, #1101	; 0x44d
 800c35e:	490b      	ldr	r1, [pc, #44]	; (800c38c <lwip_netconn_do_close_internal+0x2d0>)
 800c360:	4806      	ldr	r0, [pc, #24]	; (800c37c <lwip_netconn_do_close_internal+0x2c0>)
 800c362:	f011 f9b5 	bl	801d6d0 <iprintf>
  return err;
 800c366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	0801ee38 	.word	0x0801ee38
 800c378:	0801f174 	.word	0x0801f174
 800c37c:	0801ee7c 	.word	0x0801ee7c
 800c380:	0800baad 	.word	0x0800baad
 800c384:	0800b9e5 	.word	0x0800b9e5
 800c388:	0800bb55 	.word	0x0800bb55
 800c38c:	0801f198 	.word	0x0801f198

0800c390 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	785b      	ldrb	r3, [r3, #1]
 800c3a2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c3a4:	7afb      	ldrb	r3, [r7, #11]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00d      	beq.n	800c3c6 <lwip_netconn_do_delconn+0x36>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3b4:	2b10      	cmp	r3, #16
 800c3b6:	d006      	beq.n	800c3c6 <lwip_netconn_do_delconn+0x36>
 800c3b8:	4b60      	ldr	r3, [pc, #384]	; (800c53c <lwip_netconn_do_delconn+0x1ac>)
 800c3ba:	f240 425e 	movw	r2, #1118	; 0x45e
 800c3be:	4960      	ldr	r1, [pc, #384]	; (800c540 <lwip_netconn_do_delconn+0x1b0>)
 800c3c0:	4860      	ldr	r0, [pc, #384]	; (800c544 <lwip_netconn_do_delconn+0x1b4>)
 800c3c2:	f011 f985 	bl	801d6d0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c3c6:	7afb      	ldrb	r3, [r7, #11]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d005      	beq.n	800c3d8 <lwip_netconn_do_delconn+0x48>
 800c3cc:	7afb      	ldrb	r3, [r7, #11]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d002      	beq.n	800c3d8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c3d2:	7afb      	ldrb	r3, [r7, #11]
 800c3d4:	2b03      	cmp	r3, #3
 800c3d6:	d109      	bne.n	800c3ec <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c3d8:	7afb      	ldrb	r3, [r7, #11]
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d10a      	bne.n	800c3f4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	7f1b      	ldrb	r3, [r3, #28]
 800c3e4:	f003 0304 	and.w	r3, r3, #4
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d103      	bne.n	800c3f4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	22fb      	movs	r2, #251	; 0xfb
 800c3f0:	711a      	strb	r2, [r3, #4]
 800c3f2:	e097      	b.n	800c524 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c3f4:	7afb      	ldrb	r3, [r7, #11]
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d10d      	bne.n	800c416 <lwip_netconn_do_delconn+0x86>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	7f1b      	ldrb	r3, [r3, #28]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d106      	bne.n	800c416 <lwip_netconn_do_delconn+0x86>
 800c408:	4b4c      	ldr	r3, [pc, #304]	; (800c53c <lwip_netconn_do_delconn+0x1ac>)
 800c40a:	f240 427a 	movw	r2, #1146	; 0x47a
 800c40e:	494e      	ldr	r1, [pc, #312]	; (800c548 <lwip_netconn_do_delconn+0x1b8>)
 800c410:	484c      	ldr	r0, [pc, #304]	; (800c544 <lwip_netconn_do_delconn+0x1b4>)
 800c412:	f011 f95d 	bl	801d6d0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fdcd 	bl	800bfc0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d05f      	beq.n	800c4f0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c43a:	2b10      	cmp	r3, #16
 800c43c:	d00d      	beq.n	800c45a <lwip_netconn_do_delconn+0xca>
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d151      	bne.n	800c4e6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	4618      	mov	r0, r3
 800c454:	f009 f9ea 	bl	801582c <udp_remove>
          break;
 800c458:	e046      	b.n	800c4e8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6a1b      	ldr	r3, [r3, #32]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d006      	beq.n	800c472 <lwip_netconn_do_delconn+0xe2>
 800c464:	4b35      	ldr	r3, [pc, #212]	; (800c53c <lwip_netconn_do_delconn+0x1ac>)
 800c466:	f240 4294 	movw	r2, #1172	; 0x494
 800c46a:	4938      	ldr	r1, [pc, #224]	; (800c54c <lwip_netconn_do_delconn+0x1bc>)
 800c46c:	4835      	ldr	r0, [pc, #212]	; (800c544 <lwip_netconn_do_delconn+0x1b4>)
 800c46e:	f011 f92f 	bl	801d6d0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2204      	movs	r2, #4
 800c478:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2203      	movs	r2, #3
 800c47e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2100      	movs	r1, #0
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff fe14 	bl	800c0bc <lwip_netconn_do_close_internal>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d04b      	beq.n	800c532 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	785b      	ldrb	r3, [r3, #1]
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d006      	beq.n	800c4b2 <lwip_netconn_do_delconn+0x122>
 800c4a4:	4b25      	ldr	r3, [pc, #148]	; (800c53c <lwip_netconn_do_delconn+0x1ac>)
 800c4a6:	f240 429a 	movw	r2, #1178	; 0x49a
 800c4aa:	4929      	ldr	r1, [pc, #164]	; (800c550 <lwip_netconn_do_delconn+0x1c0>)
 800c4ac:	4825      	ldr	r0, [pc, #148]	; (800c544 <lwip_netconn_do_delconn+0x1b4>)
 800c4ae:	f011 f90f 	bl	801d6d0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c4b2:	4828      	ldr	r0, [pc, #160]	; (800c554 <lwip_netconn_do_delconn+0x1c4>)
 800c4b4:	f00b ffd1 	bl	801845a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	330c      	adds	r3, #12
 800c4be:	2100      	movs	r1, #0
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f00b ff28 	bl	8018316 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c4c6:	4823      	ldr	r0, [pc, #140]	; (800c554 <lwip_netconn_do_delconn+0x1c4>)
 800c4c8:	f00b ffb8 	bl	801843c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	785b      	ldrb	r3, [r3, #1]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d02d      	beq.n	800c532 <lwip_netconn_do_delconn+0x1a2>
 800c4d6:	4b19      	ldr	r3, [pc, #100]	; (800c53c <lwip_netconn_do_delconn+0x1ac>)
 800c4d8:	f240 429e 	movw	r2, #1182	; 0x49e
 800c4dc:	491c      	ldr	r1, [pc, #112]	; (800c550 <lwip_netconn_do_delconn+0x1c0>)
 800c4de:	4819      	ldr	r0, [pc, #100]	; (800c544 <lwip_netconn_do_delconn+0x1b4>)
 800c4e0:	f011 f8f6 	bl	801d6d0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c4e4:	e025      	b.n	800c532 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c4e6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d007      	beq.n	800c50a <lwip_netconn_do_delconn+0x17a>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	6810      	ldr	r0, [r2, #0]
 800c504:	2200      	movs	r2, #0
 800c506:	2100      	movs	r1, #0
 800c508:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c510:	2b00      	cmp	r3, #0
 800c512:	d007      	beq.n	800c524 <lwip_netconn_do_delconn+0x194>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	6810      	ldr	r0, [r2, #0]
 800c51e:	2200      	movs	r2, #0
 800c520:	2102      	movs	r1, #2
 800c522:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	330c      	adds	r3, #12
 800c52a:	4618      	mov	r0, r3
 800c52c:	f00b ff3e 	bl	80183ac <sys_sem_valid>
 800c530:	e000      	b.n	800c534 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c532:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	0801ee38 	.word	0x0801ee38
 800c540:	0801f1a8 	.word	0x0801f1a8
 800c544:	0801ee7c 	.word	0x0801ee7c
 800c548:	0801f1bc 	.word	0x0801f1bc
 800c54c:	0801f1dc 	.word	0x0801f1dc
 800c550:	0801f1f8 	.word	0x0801f1f8
 800c554:	2000a2bc 	.word	0x2000a2bc

0800c558 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	4613      	mov	r3, r2
 800c564:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800c566:	2300      	movs	r3, #0
 800c568:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800c574:	f06f 0305 	mvn.w	r3, #5
 800c578:	e070      	b.n	800c65c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	785b      	ldrb	r3, [r3, #1]
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d006      	beq.n	800c590 <lwip_netconn_do_connected+0x38>
 800c582:	4b38      	ldr	r3, [pc, #224]	; (800c664 <lwip_netconn_do_connected+0x10c>)
 800c584:	f240 5223 	movw	r2, #1315	; 0x523
 800c588:	4937      	ldr	r1, [pc, #220]	; (800c668 <lwip_netconn_do_connected+0x110>)
 800c58a:	4838      	ldr	r0, [pc, #224]	; (800c66c <lwip_netconn_do_connected+0x114>)
 800c58c:	f011 f8a0 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	6a1b      	ldr	r3, [r3, #32]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10c      	bne.n	800c5b2 <lwip_netconn_do_connected+0x5a>
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	7f1b      	ldrb	r3, [r3, #28]
 800c59c:	f003 0304 	and.w	r3, r3, #4
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <lwip_netconn_do_connected+0x5a>
 800c5a4:	4b2f      	ldr	r3, [pc, #188]	; (800c664 <lwip_netconn_do_connected+0x10c>)
 800c5a6:	f240 5224 	movw	r2, #1316	; 0x524
 800c5aa:	4931      	ldr	r1, [pc, #196]	; (800c670 <lwip_netconn_do_connected+0x118>)
 800c5ac:	482f      	ldr	r0, [pc, #188]	; (800c66c <lwip_netconn_do_connected+0x114>)
 800c5ae:	f011 f88f 	bl	801d6d0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d008      	beq.n	800c5cc <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	6a1b      	ldr	r3, [r3, #32]
 800c5be:	79fa      	ldrb	r2, [r7, #7]
 800c5c0:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	330c      	adds	r3, #12
 800c5ca:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5d4:	2b10      	cmp	r3, #16
 800c5d6:	d106      	bne.n	800c5e6 <lwip_netconn_do_connected+0x8e>
 800c5d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d102      	bne.n	800c5e6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800c5e0:	69b8      	ldr	r0, [r7, #24]
 800c5e2:	f7ff fb8d 	bl	800bd00 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	7f1b      	ldrb	r3, [r3, #28]
 800c5ea:	f003 0304 	and.w	r3, r3, #4
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	bf0c      	ite	eq
 800c5f2:	2301      	moveq	r3, #1
 800c5f4:	2300      	movne	r3, #0
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	7f1b      	ldrb	r3, [r3, #28]
 800c5fe:	f023 0304 	bic.w	r3, r3, #4
 800c602:	b2da      	uxtb	r2, r3
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <lwip_netconn_do_connected+0xbc>
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10c      	bne.n	800c62e <lwip_netconn_do_connected+0xd6>
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d102      	bne.n	800c620 <lwip_netconn_do_connected+0xc8>
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <lwip_netconn_do_connected+0xd6>
 800c620:	4b10      	ldr	r3, [pc, #64]	; (800c664 <lwip_netconn_do_connected+0x10c>)
 800c622:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800c626:	4913      	ldr	r1, [pc, #76]	; (800c674 <lwip_netconn_do_connected+0x11c>)
 800c628:	4810      	ldr	r0, [pc, #64]	; (800c66c <lwip_netconn_do_connected+0x114>)
 800c62a:	f011 f851 	bl	801d6d0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	2200      	movs	r2, #0
 800c632:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	2200      	movs	r2, #0
 800c638:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <lwip_netconn_do_connected+0xf6>
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c646:	2200      	movs	r2, #0
 800c648:	2102      	movs	r1, #2
 800c64a:	69b8      	ldr	r0, [r7, #24]
 800c64c:	4798      	blx	r3

  if (was_blocking) {
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c654:	69f8      	ldr	r0, [r7, #28]
 800c656:	f00b fe8f 	bl	8018378 <sys_sem_signal>
  }
  return ERR_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3720      	adds	r7, #32
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	0801ee38 	.word	0x0801ee38
 800c668:	0801f200 	.word	0x0801f200
 800c66c:	0801ee7c 	.word	0x0801ee7c
 800c670:	0801f220 	.word	0x0801f220
 800c674:	0801f260 	.word	0x0801f260

0800c678 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d102      	bne.n	800c694 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c68e:	23f1      	movs	r3, #241	; 0xf1
 800c690:	75fb      	strb	r3, [r7, #23]
 800c692:	e09b      	b.n	800c7cc <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c69e:	2b10      	cmp	r3, #16
 800c6a0:	d00f      	beq.n	800c6c2 <lwip_netconn_do_connect+0x4a>
 800c6a2:	2b20      	cmp	r3, #32
 800c6a4:	f040 8087 	bne.w	800c7b6 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6858      	ldr	r0, [r3, #4]
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	6899      	ldr	r1, [r3, #8]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	899b      	ldrh	r3, [r3, #12]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	f009 f82a 	bl	8015710 <udp_connect>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	75fb      	strb	r3, [r7, #23]
        break;
 800c6c0:	e084      	b.n	800c7cc <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	785b      	ldrb	r3, [r3, #1]
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d102      	bne.n	800c6d2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800c6cc:	23f7      	movs	r3, #247	; 0xf7
 800c6ce:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c6d0:	e07b      	b.n	800c7ca <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	785b      	ldrb	r3, [r3, #1]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800c6dc:	23f6      	movs	r3, #246	; 0xf6
 800c6de:	75fb      	strb	r3, [r7, #23]
        break;
 800c6e0:	e073      	b.n	800c7ca <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fb0a 	bl	800bd00 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	6858      	ldr	r0, [r3, #4]
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	6899      	ldr	r1, [r3, #8]
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	899a      	ldrh	r2, [r3, #12]
 800c6fa:	4b38      	ldr	r3, [pc, #224]	; (800c7dc <lwip_netconn_do_connect+0x164>)
 800c6fc:	f003 f85a 	bl	800f7b4 <tcp_connect>
 800c700:	4603      	mov	r3, r0
 800c702:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d15e      	bne.n	800c7ca <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	7f1b      	ldrb	r3, [r3, #28]
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b00      	cmp	r3, #0
 800c718:	bf14      	ite	ne
 800c71a:	2301      	movne	r3, #1
 800c71c:	2300      	moveq	r3, #0
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2203      	movs	r2, #3
 800c728:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d009      	beq.n	800c744 <lwip_netconn_do_connect+0xcc>
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	7f1a      	ldrb	r2, [r3, #28]
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f042 0204 	orr.w	r2, r2, #4
 800c73e:	b2d2      	uxtb	r2, r2
 800c740:	771a      	strb	r2, [r3, #28]
 800c742:	e008      	b.n	800c756 <lwip_netconn_do_connect+0xde>
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	7f1a      	ldrb	r2, [r3, #28]
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f022 0204 	bic.w	r2, r2, #4
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800c756:	7bfb      	ldrb	r3, [r7, #15]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800c75c:	23fb      	movs	r3, #251	; 0xfb
 800c75e:	75fb      	strb	r3, [r7, #23]
        break;
 800c760:	e033      	b.n	800c7ca <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	785b      	ldrb	r3, [r3, #1]
 800c770:	2b03      	cmp	r3, #3
 800c772:	d006      	beq.n	800c782 <lwip_netconn_do_connect+0x10a>
 800c774:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <lwip_netconn_do_connect+0x168>)
 800c776:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c77a:	491a      	ldr	r1, [pc, #104]	; (800c7e4 <lwip_netconn_do_connect+0x16c>)
 800c77c:	481a      	ldr	r0, [pc, #104]	; (800c7e8 <lwip_netconn_do_connect+0x170>)
 800c77e:	f010 ffa7 	bl	801d6d0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800c782:	481a      	ldr	r0, [pc, #104]	; (800c7ec <lwip_netconn_do_connect+0x174>)
 800c784:	f00b fe69 	bl	801845a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	330c      	adds	r3, #12
 800c78e:	2100      	movs	r1, #0
 800c790:	4618      	mov	r0, r3
 800c792:	f00b fdc0 	bl	8018316 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c796:	4815      	ldr	r0, [pc, #84]	; (800c7ec <lwip_netconn_do_connect+0x174>)
 800c798:	f00b fe50 	bl	801843c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	785b      	ldrb	r3, [r3, #1]
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d116      	bne.n	800c7d4 <lwip_netconn_do_connect+0x15c>
 800c7a6:	4b0e      	ldr	r3, [pc, #56]	; (800c7e0 <lwip_netconn_do_connect+0x168>)
 800c7a8:	f240 5274 	movw	r2, #1396	; 0x574
 800c7ac:	490d      	ldr	r1, [pc, #52]	; (800c7e4 <lwip_netconn_do_connect+0x16c>)
 800c7ae:	480e      	ldr	r0, [pc, #56]	; (800c7e8 <lwip_netconn_do_connect+0x170>)
 800c7b0:	f010 ff8e 	bl	801d6d0 <iprintf>
              return;
 800c7b4:	e00e      	b.n	800c7d4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c7b6:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <lwip_netconn_do_connect+0x168>)
 800c7b8:	f240 527d 	movw	r2, #1405	; 0x57d
 800c7bc:	490c      	ldr	r1, [pc, #48]	; (800c7f0 <lwip_netconn_do_connect+0x178>)
 800c7be:	480a      	ldr	r0, [pc, #40]	; (800c7e8 <lwip_netconn_do_connect+0x170>)
 800c7c0:	f010 ff86 	bl	801d6d0 <iprintf>
 800c7c4:	23fa      	movs	r3, #250	; 0xfa
 800c7c6:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c7c8:	e000      	b.n	800c7cc <lwip_netconn_do_connect+0x154>
        break;
 800c7ca:	bf00      	nop
    }
  }
  msg->err = err;
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	7dfa      	ldrb	r2, [r7, #23]
 800c7d0:	711a      	strb	r2, [r3, #4]
 800c7d2:	e000      	b.n	800c7d6 <lwip_netconn_do_connect+0x15e>
              return;
 800c7d4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	0800c559 	.word	0x0800c559
 800c7e0:	0801ee38 	.word	0x0801ee38
 800c7e4:	0801f1f8 	.word	0x0801f1f8
 800c7e8:	0801ee7c 	.word	0x0801ee7c
 800c7ec:	2000a2bc 	.word	0x2000a2bc
 800c7f0:	0801f280 	.word	0x0801f280

0800c7f4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	2200      	movs	r2, #0
 800c804:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d022      	beq.n	800c856 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c81a:	2b10      	cmp	r3, #16
 800c81c:	d11b      	bne.n	800c856 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c82a:	d202      	bcs.n	800c832 <lwip_netconn_do_recv+0x3e>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	e001      	b.n	800c836 <lwip_netconn_do_recv+0x42>
 800c832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c836:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	89fa      	ldrh	r2, [r7, #14]
 800c840:	4611      	mov	r1, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f002 ff20 	bl	800f688 <tcp_recved>
        remaining -= recved;
 800c848:	89fb      	ldrh	r3, [r7, #14]
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1e6      	bne.n	800c824 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c856:	bf00      	nop
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
	...

0800c860 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	460b      	mov	r3, r1
 800c86a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <lwip_netconn_do_writemore+0x24>
 800c876:	4b96      	ldr	r3, [pc, #600]	; (800cad0 <lwip_netconn_do_writemore+0x270>)
 800c878:	f240 6273 	movw	r2, #1651	; 0x673
 800c87c:	4995      	ldr	r1, [pc, #596]	; (800cad4 <lwip_netconn_do_writemore+0x274>)
 800c87e:	4896      	ldr	r0, [pc, #600]	; (800cad8 <lwip_netconn_do_writemore+0x278>)
 800c880:	f010 ff26 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	785b      	ldrb	r3, [r3, #1]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d006      	beq.n	800c89a <lwip_netconn_do_writemore+0x3a>
 800c88c:	4b90      	ldr	r3, [pc, #576]	; (800cad0 <lwip_netconn_do_writemore+0x270>)
 800c88e:	f240 6274 	movw	r2, #1652	; 0x674
 800c892:	4992      	ldr	r1, [pc, #584]	; (800cadc <lwip_netconn_do_writemore+0x27c>)
 800c894:	4890      	ldr	r0, [pc, #576]	; (800cad8 <lwip_netconn_do_writemore+0x278>)
 800c896:	f010 ff1b 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d106      	bne.n	800c8b0 <lwip_netconn_do_writemore+0x50>
 800c8a2:	4b8b      	ldr	r3, [pc, #556]	; (800cad0 <lwip_netconn_do_writemore+0x270>)
 800c8a4:	f240 6275 	movw	r2, #1653	; 0x675
 800c8a8:	498d      	ldr	r1, [pc, #564]	; (800cae0 <lwip_netconn_do_writemore+0x280>)
 800c8aa:	488b      	ldr	r0, [pc, #556]	; (800cad8 <lwip_netconn_do_writemore+0x278>)
 800c8ac:	f010 ff10 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d106      	bne.n	800c8c6 <lwip_netconn_do_writemore+0x66>
 800c8b8:	4b85      	ldr	r3, [pc, #532]	; (800cad0 <lwip_netconn_do_writemore+0x270>)
 800c8ba:	f240 6276 	movw	r2, #1654	; 0x676
 800c8be:	4989      	ldr	r1, [pc, #548]	; (800cae4 <lwip_netconn_do_writemore+0x284>)
 800c8c0:	4885      	ldr	r0, [pc, #532]	; (800cad8 <lwip_netconn_do_writemore+0x278>)
 800c8c2:	f010 ff05 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	699a      	ldr	r2, [r3, #24]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a1b      	ldr	r3, [r3, #32]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d306      	bcc.n	800c8e4 <lwip_netconn_do_writemore+0x84>
 800c8d6:	4b7e      	ldr	r3, [pc, #504]	; (800cad0 <lwip_netconn_do_writemore+0x270>)
 800c8d8:	f240 6277 	movw	r2, #1655	; 0x677
 800c8dc:	4982      	ldr	r1, [pc, #520]	; (800cae8 <lwip_netconn_do_writemore+0x288>)
 800c8de:	487e      	ldr	r0, [pc, #504]	; (800cad8 <lwip_netconn_do_writemore+0x278>)
 800c8e0:	f010 fef6 	bl	801d6d0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6a1b      	ldr	r3, [r3, #32]
 800c8e8:	899b      	ldrh	r3, [r3, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <lwip_netconn_do_writemore+0x9c>
 800c8ee:	4b78      	ldr	r3, [pc, #480]	; (800cad0 <lwip_netconn_do_writemore+0x270>)
 800c8f0:	f240 6279 	movw	r2, #1657	; 0x679
 800c8f4:	497d      	ldr	r1, [pc, #500]	; (800caec <lwip_netconn_do_writemore+0x28c>)
 800c8f6:	4878      	ldr	r0, [pc, #480]	; (800cad8 <lwip_netconn_do_writemore+0x278>)
 800c8f8:	f010 feea 	bl	801d6d0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	7f1b      	ldrb	r3, [r3, #28]
 800c902:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7f1b      	ldrb	r3, [r3, #28]
 800c908:	f003 0302 	and.w	r3, r3, #2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d104      	bne.n	800c91a <lwip_netconn_do_writemore+0xba>
 800c910:	7ebb      	ldrb	r3, [r7, #26]
 800c912:	f003 0304 	and.w	r3, r3, #4
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <lwip_netconn_do_writemore+0xbe>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <lwip_netconn_do_writemore+0xc0>
 800c91e:	2300      	movs	r3, #0
 800c920:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	4413      	add	r3, r2
 800c932:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6a1b      	ldr	r3, [r3, #32]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a1b      	ldr	r3, [r3, #32]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	1ad3      	subs	r3, r2, r3
 800c944:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c94c:	d307      	bcc.n	800c95e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c94e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c952:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c954:	7ebb      	ldrb	r3, [r7, #26]
 800c956:	f043 0302 	orr.w	r3, r3, #2
 800c95a:	76bb      	strb	r3, [r7, #26]
 800c95c:	e001      	b.n	800c962 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c96a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c96c:	89fa      	ldrh	r2, [r7, #14]
 800c96e:	8bbb      	ldrh	r3, [r7, #28]
 800c970:	429a      	cmp	r2, r3
 800c972:	d216      	bcs.n	800c9a2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c974:	89fb      	ldrh	r3, [r7, #14]
 800c976:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c978:	7e3b      	ldrb	r3, [r7, #24]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00d      	beq.n	800c99a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c97e:	8bbb      	ldrh	r3, [r7, #28]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10e      	bne.n	800c9a2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d102      	bne.n	800c994 <lwip_netconn_do_writemore+0x134>
 800c98e:	f06f 0306 	mvn.w	r3, #6
 800c992:	e000      	b.n	800c996 <lwip_netconn_do_writemore+0x136>
 800c994:	2300      	movs	r3, #0
 800c996:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c998:	e07d      	b.n	800ca96 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c99a:	7ebb      	ldrb	r3, [r7, #26]
 800c99c:	f043 0302 	orr.w	r3, r3, #2
 800c9a0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	691a      	ldr	r2, [r3, #16]
 800c9a8:	8bbb      	ldrh	r3, [r7, #28]
 800c9aa:	441a      	add	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	689b      	ldr	r3, [r3, #8]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d906      	bls.n	800c9c6 <lwip_netconn_do_writemore+0x166>
 800c9b8:	4b45      	ldr	r3, [pc, #276]	; (800cad0 <lwip_netconn_do_writemore+0x270>)
 800c9ba:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c9be:	494c      	ldr	r1, [pc, #304]	; (800caf0 <lwip_netconn_do_writemore+0x290>)
 800c9c0:	4845      	ldr	r0, [pc, #276]	; (800cad8 <lwip_netconn_do_writemore+0x278>)
 800c9c2:	f010 fe85 	bl	801d6d0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c9c6:	8bbb      	ldrh	r3, [r7, #28]
 800c9c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d103      	bne.n	800c9d8 <lwip_netconn_do_writemore+0x178>
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9d6:	d209      	bcs.n	800c9ec <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c9dc:	8bba      	ldrh	r2, [r7, #28]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d10b      	bne.n	800c9fa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	899b      	ldrh	r3, [r3, #12]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d906      	bls.n	800c9fa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c9f0:	7ebb      	ldrb	r3, [r7, #26]
 800c9f2:	f043 0302 	orr.w	r3, r3, #2
 800c9f6:	76bb      	strb	r3, [r7, #26]
 800c9f8:	e001      	b.n	800c9fe <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6858      	ldr	r0, [r3, #4]
 800ca02:	7ebb      	ldrb	r3, [r7, #26]
 800ca04:	8bba      	ldrh	r2, [r7, #28]
 800ca06:	6979      	ldr	r1, [r7, #20]
 800ca08:	f006 fd5e 	bl	80134c8 <tcp_write>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ca10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d12c      	bne.n	800ca72 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a1b      	ldr	r3, [r3, #32]
 800ca1c:	6999      	ldr	r1, [r3, #24]
 800ca1e:	8bba      	ldrh	r2, [r7, #28]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a1b      	ldr	r3, [r3, #32]
 800ca24:	440a      	add	r2, r1
 800ca26:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a1b      	ldr	r3, [r3, #32]
 800ca2c:	6919      	ldr	r1, [r3, #16]
 800ca2e:	8bba      	ldrh	r2, [r7, #28]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a1b      	ldr	r3, [r3, #32]
 800ca34:	440a      	add	r2, r1
 800ca36:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	691a      	ldr	r2, [r3, #16]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d113      	bne.n	800ca72 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6a1b      	ldr	r3, [r3, #32]
 800ca4e:	899a      	ldrh	r2, [r3, #12]
 800ca50:	3a01      	subs	r2, #1
 800ca52:	b292      	uxth	r2, r2
 800ca54:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	899b      	ldrh	r3, [r3, #12]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d008      	beq.n	800ca72 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	689a      	ldr	r2, [r3, #8]
 800ca66:	3208      	adds	r2, #8
 800ca68:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ca72:	7e7b      	ldrb	r3, [r7, #25]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d004      	beq.n	800ca82 <lwip_netconn_do_writemore+0x222>
 800ca78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f43f af50 	beq.w	800c922 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ca82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d004      	beq.n	800ca94 <lwip_netconn_do_writemore+0x234>
 800ca8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca92:	d146      	bne.n	800cb22 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ca94:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ca96:	7e3b      	ldrb	r3, [r7, #24]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d02b      	beq.n	800caf4 <lwip_netconn_do_writemore+0x294>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d223      	bcs.n	800caf4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <lwip_netconn_do_writemore+0x260>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	2200      	movs	r2, #0
 800caba:	2103      	movs	r1, #3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	7f1b      	ldrb	r3, [r3, #28]
 800cac4:	f043 0310 	orr.w	r3, r3, #16
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	771a      	strb	r2, [r3, #28]
 800cace:	e028      	b.n	800cb22 <lwip_netconn_do_writemore+0x2c2>
 800cad0:	0801ee38 	.word	0x0801ee38
 800cad4:	0801ef90 	.word	0x0801ef90
 800cad8:	0801ee7c 	.word	0x0801ee7c
 800cadc:	0801f298 	.word	0x0801f298
 800cae0:	0801efa0 	.word	0x0801efa0
 800cae4:	0801f2b8 	.word	0x0801f2b8
 800cae8:	0801f2d0 	.word	0x0801f2d0
 800caec:	0801f310 	.word	0x0801f310
 800caf0:	0801f338 	.word	0x0801f338
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cafc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cb00:	d305      	bcc.n	800cb0e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cb0a:	2b04      	cmp	r3, #4
 800cb0c:	d909      	bls.n	800cb22 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d005      	beq.n	800cb22 <lwip_netconn_do_writemore+0x2c2>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	2103      	movs	r1, #3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800cb22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d11d      	bne.n	800cb66 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	699a      	ldr	r2, [r3, #24]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d002      	beq.n	800cb40 <lwip_netconn_do_writemore+0x2e0>
 800cb3a:	7e3b      	ldrb	r3, [r7, #24]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800cb40:	2301      	movs	r3, #1
 800cb42:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f007 faa7 	bl	801409c <tcp_output>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800cb52:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cb56:	f113 0f04 	cmn.w	r3, #4
 800cb5a:	d12c      	bne.n	800cbb6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cb5c:	7b3b      	ldrb	r3, [r7, #12]
 800cb5e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cb60:	2301      	movs	r3, #1
 800cb62:	76fb      	strb	r3, [r7, #27]
 800cb64:	e027      	b.n	800cbb6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800cb66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb6e:	d120      	bne.n	800cbb2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f007 fa91 	bl	801409c <tcp_output>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cb7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cb82:	f113 0f04 	cmn.w	r3, #4
 800cb86:	d104      	bne.n	800cb92 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cb88:	7b7b      	ldrb	r3, [r7, #13]
 800cb8a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	76fb      	strb	r3, [r7, #27]
 800cb90:	e011      	b.n	800cbb6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cb92:	7e3b      	ldrb	r3, [r7, #24]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00e      	beq.n	800cbb6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6a1b      	ldr	r3, [r3, #32]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d102      	bne.n	800cba8 <lwip_netconn_do_writemore+0x348>
 800cba2:	f06f 0306 	mvn.w	r3, #6
 800cba6:	e000      	b.n	800cbaa <lwip_netconn_do_writemore+0x34a>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cbac:	2301      	movs	r3, #1
 800cbae:	76fb      	strb	r3, [r7, #27]
 800cbb0:	e001      	b.n	800cbb6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800cbb6:	7efb      	ldrb	r3, [r7, #27]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d015      	beq.n	800cbe8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	330c      	adds	r3, #12
 800cbc4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	7ffa      	ldrb	r2, [r7, #31]
 800cbcc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cbda:	78fb      	ldrb	r3, [r7, #3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d006      	beq.n	800cbee <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800cbe0:	68b8      	ldr	r0, [r7, #8]
 800cbe2:	f00b fbc9 	bl	8018378 <sys_sem_signal>
 800cbe6:	e002      	b.n	800cbee <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800cbe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbec:	e000      	b.n	800cbf0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3720      	adds	r7, #32
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe fd5c 	bl	800b6c6 <netconn_err>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cc12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d166      	bne.n	800cce8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc24:	2b10      	cmp	r3, #16
 800cc26:	d15d      	bne.n	800cce4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	785b      	ldrb	r3, [r3, #1]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800cc32:	23fb      	movs	r3, #251	; 0xfb
 800cc34:	73fb      	strb	r3, [r7, #15]
 800cc36:	e057      	b.n	800cce8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d04d      	beq.n	800ccde <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2201      	movs	r2, #1
 800cc48:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6a1b      	ldr	r3, [r3, #32]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d006      	beq.n	800cc62 <lwip_netconn_do_write+0x6a>
 800cc54:	4b28      	ldr	r3, [pc, #160]	; (800ccf8 <lwip_netconn_do_write+0x100>)
 800cc56:	f240 7223 	movw	r2, #1827	; 0x723
 800cc5a:	4928      	ldr	r1, [pc, #160]	; (800ccfc <lwip_netconn_do_write+0x104>)
 800cc5c:	4828      	ldr	r0, [pc, #160]	; (800cd00 <lwip_netconn_do_write+0x108>)
 800cc5e:	f010 fd37 	bl	801d6d0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <lwip_netconn_do_write+0x80>
 800cc6a:	4b23      	ldr	r3, [pc, #140]	; (800ccf8 <lwip_netconn_do_write+0x100>)
 800cc6c:	f240 7224 	movw	r2, #1828	; 0x724
 800cc70:	4924      	ldr	r1, [pc, #144]	; (800cd04 <lwip_netconn_do_write+0x10c>)
 800cc72:	4823      	ldr	r0, [pc, #140]	; (800cd00 <lwip_netconn_do_write+0x108>)
 800cc74:	f010 fd2c 	bl	801d6d0 <iprintf>
        msg->conn->current_msg = msg;
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2100      	movs	r1, #0
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7ff fdea 	bl	800c860 <lwip_netconn_do_writemore>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d02e      	beq.n	800ccf0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	785b      	ldrb	r3, [r3, #1]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d006      	beq.n	800ccaa <lwip_netconn_do_write+0xb2>
 800cc9c:	4b16      	ldr	r3, [pc, #88]	; (800ccf8 <lwip_netconn_do_write+0x100>)
 800cc9e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cca2:	4919      	ldr	r1, [pc, #100]	; (800cd08 <lwip_netconn_do_write+0x110>)
 800cca4:	4816      	ldr	r0, [pc, #88]	; (800cd00 <lwip_netconn_do_write+0x108>)
 800cca6:	f010 fd13 	bl	801d6d0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ccaa:	4818      	ldr	r0, [pc, #96]	; (800cd0c <lwip_netconn_do_write+0x114>)
 800ccac:	f00b fbd5 	bl	801845a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	330c      	adds	r3, #12
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f00b fb2c 	bl	8018316 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ccbe:	4813      	ldr	r0, [pc, #76]	; (800cd0c <lwip_netconn_do_write+0x114>)
 800ccc0:	f00b fbbc 	bl	801843c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	785b      	ldrb	r3, [r3, #1]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d110      	bne.n	800ccf0 <lwip_netconn_do_write+0xf8>
 800ccce:	4b0a      	ldr	r3, [pc, #40]	; (800ccf8 <lwip_netconn_do_write+0x100>)
 800ccd0:	f240 722c 	movw	r2, #1836	; 0x72c
 800ccd4:	490c      	ldr	r1, [pc, #48]	; (800cd08 <lwip_netconn_do_write+0x110>)
 800ccd6:	480a      	ldr	r0, [pc, #40]	; (800cd00 <lwip_netconn_do_write+0x108>)
 800ccd8:	f010 fcfa 	bl	801d6d0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ccdc:	e008      	b.n	800ccf0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ccde:	23f5      	movs	r3, #245	; 0xf5
 800cce0:	73fb      	strb	r3, [r7, #15]
 800cce2:	e001      	b.n	800cce8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800cce4:	23fa      	movs	r3, #250	; 0xfa
 800cce6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	7bfa      	ldrb	r2, [r7, #15]
 800ccec:	711a      	strb	r2, [r3, #4]
 800ccee:	e000      	b.n	800ccf2 <lwip_netconn_do_write+0xfa>
        return;
 800ccf0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	0801ee38 	.word	0x0801ee38
 800ccfc:	0801f1dc 	.word	0x0801f1dc
 800cd00:	0801ee7c 	.word	0x0801ee7c
 800cd04:	0801f364 	.word	0x0801f364
 800cd08:	0801f1f8 	.word	0x0801f1f8
 800cd0c:	2000a2bc 	.word	0x2000a2bc

0800cd10 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	785b      	ldrb	r3, [r3, #1]
 800cd22:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d069      	beq.n	800ce02 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800cd38:	2b10      	cmp	r3, #16
 800cd3a:	d162      	bne.n	800ce02 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cd40:	2b03      	cmp	r3, #3
 800cd42:	d002      	beq.n	800cd4a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cd44:	7afb      	ldrb	r3, [r7, #11]
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d05b      	beq.n	800ce02 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800cd4a:	7afb      	ldrb	r3, [r7, #11]
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	d103      	bne.n	800cd58 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	22f5      	movs	r2, #245	; 0xf5
 800cd54:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cd56:	e059      	b.n	800ce0c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800cd58:	7afb      	ldrb	r3, [r7, #11]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d103      	bne.n	800cd66 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	22fb      	movs	r2, #251	; 0xfb
 800cd62:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cd64:	e052      	b.n	800ce0c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	7a1b      	ldrb	r3, [r3, #8]
 800cd6a:	f003 0301 	and.w	r3, r3, #1
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d004      	beq.n	800cd7c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff f922 	bl	800bfc0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d006      	beq.n	800cd94 <lwip_netconn_do_close+0x84>
 800cd86:	4b23      	ldr	r3, [pc, #140]	; (800ce14 <lwip_netconn_do_close+0x104>)
 800cd88:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800cd8c:	4922      	ldr	r1, [pc, #136]	; (800ce18 <lwip_netconn_do_close+0x108>)
 800cd8e:	4823      	ldr	r0, [pc, #140]	; (800ce1c <lwip_netconn_do_close+0x10c>)
 800cd90:	f010 fc9e 	bl	801d6d0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2204      	movs	r2, #4
 800cd9a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2100      	movs	r1, #0
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff f986 	bl	800c0bc <lwip_netconn_do_close_internal>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d029      	beq.n	800ce0a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	785b      	ldrb	r3, [r3, #1]
 800cdbc:	2b04      	cmp	r3, #4
 800cdbe:	d006      	beq.n	800cdce <lwip_netconn_do_close+0xbe>
 800cdc0:	4b14      	ldr	r3, [pc, #80]	; (800ce14 <lwip_netconn_do_close+0x104>)
 800cdc2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800cdc6:	4916      	ldr	r1, [pc, #88]	; (800ce20 <lwip_netconn_do_close+0x110>)
 800cdc8:	4814      	ldr	r0, [pc, #80]	; (800ce1c <lwip_netconn_do_close+0x10c>)
 800cdca:	f010 fc81 	bl	801d6d0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800cdce:	4815      	ldr	r0, [pc, #84]	; (800ce24 <lwip_netconn_do_close+0x114>)
 800cdd0:	f00b fb43 	bl	801845a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	330c      	adds	r3, #12
 800cdda:	2100      	movs	r1, #0
 800cddc:	4618      	mov	r0, r3
 800cdde:	f00b fa9a 	bl	8018316 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cde2:	4810      	ldr	r0, [pc, #64]	; (800ce24 <lwip_netconn_do_close+0x114>)
 800cde4:	f00b fb2a 	bl	801843c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	785b      	ldrb	r3, [r3, #1]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00b      	beq.n	800ce0a <lwip_netconn_do_close+0xfa>
 800cdf2:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <lwip_netconn_do_close+0x104>)
 800cdf4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800cdf8:	4909      	ldr	r1, [pc, #36]	; (800ce20 <lwip_netconn_do_close+0x110>)
 800cdfa:	4808      	ldr	r0, [pc, #32]	; (800ce1c <lwip_netconn_do_close+0x10c>)
 800cdfc:	f010 fc68 	bl	801d6d0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ce00:	e003      	b.n	800ce0a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	22f5      	movs	r2, #245	; 0xf5
 800ce06:	711a      	strb	r2, [r3, #4]
 800ce08:	e000      	b.n	800ce0c <lwip_netconn_do_close+0xfc>
      return;
 800ce0a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	0801ee38 	.word	0x0801ee38
 800ce18:	0801f1dc 	.word	0x0801f1dc
 800ce1c:	0801ee7c 	.word	0x0801ee7c
 800ce20:	0801f1f8 	.word	0x0801f1f8
 800ce24:	2000a2bc 	.word	0x2000a2bc

0800ce28 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d013      	beq.n	800ce5e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00b      	beq.n	800ce56 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f001 fdca 	bl	800e9dc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	605a      	str	r2, [r3, #4]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ce56:	6879      	ldr	r1, [r7, #4]
 800ce58:	2006      	movs	r0, #6
 800ce5a:	f000 ff1b 	bl	800dc94 <memp_free>
  }
}
 800ce5e:	bf00      	nop
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
	...

0800ce68 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ce72:	f008 f9cb 	bl	801520c <sys_timeouts_sleeptime>
 800ce76:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce7e:	d10b      	bne.n	800ce98 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ce80:	4813      	ldr	r0, [pc, #76]	; (800ced0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce82:	f00b faea 	bl	801845a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ce86:	2200      	movs	r2, #0
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f00b f9a2 	bl	80181d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ce90:	480f      	ldr	r0, [pc, #60]	; (800ced0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ce92:	f00b fad3 	bl	801843c <sys_mutex_lock>
    return;
 800ce96:	e018      	b.n	800ceca <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d102      	bne.n	800cea4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ce9e:	f008 f97b 	bl	8015198 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cea2:	e7e6      	b.n	800ce72 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cea4:	480a      	ldr	r0, [pc, #40]	; (800ced0 <tcpip_timeouts_mbox_fetch+0x68>)
 800cea6:	f00b fad8 	bl	801845a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f00b f990 	bl	80181d4 <sys_arch_mbox_fetch>
 800ceb4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ceb6:	4806      	ldr	r0, [pc, #24]	; (800ced0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ceb8:	f00b fac0 	bl	801843c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec2:	d102      	bne.n	800ceca <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cec4:	f008 f968 	bl	8015198 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cec8:	e7d3      	b.n	800ce72 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	2000a2bc 	.word	0x2000a2bc

0800ced4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cedc:	4810      	ldr	r0, [pc, #64]	; (800cf20 <tcpip_thread+0x4c>)
 800cede:	f00b faad 	bl	801843c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cee2:	4b10      	ldr	r3, [pc, #64]	; (800cf24 <tcpip_thread+0x50>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d005      	beq.n	800cef6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ceea:	4b0e      	ldr	r3, [pc, #56]	; (800cf24 <tcpip_thread+0x50>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a0e      	ldr	r2, [pc, #56]	; (800cf28 <tcpip_thread+0x54>)
 800cef0:	6812      	ldr	r2, [r2, #0]
 800cef2:	4610      	mov	r0, r2
 800cef4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cef6:	f107 030c 	add.w	r3, r7, #12
 800cefa:	4619      	mov	r1, r3
 800cefc:	480b      	ldr	r0, [pc, #44]	; (800cf2c <tcpip_thread+0x58>)
 800cefe:	f7ff ffb3 	bl	800ce68 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d106      	bne.n	800cf16 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cf08:	4b09      	ldr	r3, [pc, #36]	; (800cf30 <tcpip_thread+0x5c>)
 800cf0a:	2291      	movs	r2, #145	; 0x91
 800cf0c:	4909      	ldr	r1, [pc, #36]	; (800cf34 <tcpip_thread+0x60>)
 800cf0e:	480a      	ldr	r0, [pc, #40]	; (800cf38 <tcpip_thread+0x64>)
 800cf10:	f010 fbde 	bl	801d6d0 <iprintf>
      continue;
 800cf14:	e003      	b.n	800cf1e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 f80f 	bl	800cf3c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf1e:	e7ea      	b.n	800cef6 <tcpip_thread+0x22>
 800cf20:	2000a2bc 	.word	0x2000a2bc
 800cf24:	2000a2b0 	.word	0x2000a2b0
 800cf28:	2000a2b4 	.word	0x2000a2b4
 800cf2c:	2000a2b8 	.word	0x2000a2b8
 800cf30:	0801f390 	.word	0x0801f390
 800cf34:	0801f3c0 	.word	0x0801f3c0
 800cf38:	0801f3e0 	.word	0x0801f3e0

0800cf3c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d026      	beq.n	800cf9a <tcpip_thread_handle_msg+0x5e>
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	dc2b      	bgt.n	800cfa8 <tcpip_thread_handle_msg+0x6c>
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d002      	beq.n	800cf5a <tcpip_thread_handle_msg+0x1e>
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d015      	beq.n	800cf84 <tcpip_thread_handle_msg+0x48>
 800cf58:	e026      	b.n	800cfa8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	6850      	ldr	r0, [r2, #4]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	6892      	ldr	r2, [r2, #8]
 800cf66:	4611      	mov	r1, r2
 800cf68:	4798      	blx	r3
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d004      	beq.n	800cf7a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f001 fd31 	bl	800e9dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	2009      	movs	r0, #9
 800cf7e:	f000 fe89 	bl	800dc94 <memp_free>
      break;
 800cf82:	e018      	b.n	800cfb6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	6892      	ldr	r2, [r2, #8]
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	2008      	movs	r0, #8
 800cf94:	f000 fe7e 	bl	800dc94 <memp_free>
      break;
 800cf98:	e00d      	b.n	800cfb6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6892      	ldr	r2, [r2, #8]
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	4798      	blx	r3
      break;
 800cfa6:	e006      	b.n	800cfb6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cfa8:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <tcpip_thread_handle_msg+0x84>)
 800cfaa:	22cf      	movs	r2, #207	; 0xcf
 800cfac:	4905      	ldr	r1, [pc, #20]	; (800cfc4 <tcpip_thread_handle_msg+0x88>)
 800cfae:	4806      	ldr	r0, [pc, #24]	; (800cfc8 <tcpip_thread_handle_msg+0x8c>)
 800cfb0:	f010 fb8e 	bl	801d6d0 <iprintf>
      break;
 800cfb4:	bf00      	nop
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	3708      	adds	r7, #8
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	0801f390 	.word	0x0801f390
 800cfc4:	0801f3c0 	.word	0x0801f3c0
 800cfc8:	0801f3e0 	.word	0x0801f3e0

0800cfcc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cfd8:	481a      	ldr	r0, [pc, #104]	; (800d044 <tcpip_inpkt+0x78>)
 800cfda:	f00b f956 	bl	801828a <sys_mbox_valid>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d105      	bne.n	800cff0 <tcpip_inpkt+0x24>
 800cfe4:	4b18      	ldr	r3, [pc, #96]	; (800d048 <tcpip_inpkt+0x7c>)
 800cfe6:	22fc      	movs	r2, #252	; 0xfc
 800cfe8:	4918      	ldr	r1, [pc, #96]	; (800d04c <tcpip_inpkt+0x80>)
 800cfea:	4819      	ldr	r0, [pc, #100]	; (800d050 <tcpip_inpkt+0x84>)
 800cfec:	f010 fb70 	bl	801d6d0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cff0:	2009      	movs	r0, #9
 800cff2:	f000 fdd9 	bl	800dba8 <memp_malloc>
 800cff6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d102      	bne.n	800d004 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d002:	e01a      	b.n	800d03a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d01c:	6979      	ldr	r1, [r7, #20]
 800d01e:	4809      	ldr	r0, [pc, #36]	; (800d044 <tcpip_inpkt+0x78>)
 800d020:	f00b f8be 	bl	80181a0 <sys_mbox_trypost>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d006      	beq.n	800d038 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d02a:	6979      	ldr	r1, [r7, #20]
 800d02c:	2009      	movs	r0, #9
 800d02e:	f000 fe31 	bl	800dc94 <memp_free>
    return ERR_MEM;
 800d032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d036:	e000      	b.n	800d03a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d038:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	2000a2b8 	.word	0x2000a2b8
 800d048:	0801f390 	.word	0x0801f390
 800d04c:	0801f408 	.word	0x0801f408
 800d050:	0801f3e0 	.word	0x0801f3e0

0800d054 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d064:	f003 0318 	and.w	r3, r3, #24
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d006      	beq.n	800d07a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d06c:	4a08      	ldr	r2, [pc, #32]	; (800d090 <tcpip_input+0x3c>)
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff ffab 	bl	800cfcc <tcpip_inpkt>
 800d076:	4603      	mov	r3, r0
 800d078:	e005      	b.n	800d086 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d07a:	4a06      	ldr	r2, [pc, #24]	; (800d094 <tcpip_input+0x40>)
 800d07c:	6839      	ldr	r1, [r7, #0]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff ffa4 	bl	800cfcc <tcpip_inpkt>
 800d084:	4603      	mov	r3, r0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	08017f8d 	.word	0x08017f8d
 800d094:	08016c41 	.word	0x08016c41

0800d098 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d0a2:	4819      	ldr	r0, [pc, #100]	; (800d108 <tcpip_try_callback+0x70>)
 800d0a4:	f00b f8f1 	bl	801828a <sys_mbox_valid>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <tcpip_try_callback+0x24>
 800d0ae:	4b17      	ldr	r3, [pc, #92]	; (800d10c <tcpip_try_callback+0x74>)
 800d0b0:	f240 125d 	movw	r2, #349	; 0x15d
 800d0b4:	4916      	ldr	r1, [pc, #88]	; (800d110 <tcpip_try_callback+0x78>)
 800d0b6:	4817      	ldr	r0, [pc, #92]	; (800d114 <tcpip_try_callback+0x7c>)
 800d0b8:	f010 fb0a 	bl	801d6d0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d0bc:	2008      	movs	r0, #8
 800d0be:	f000 fd73 	bl	800dba8 <memp_malloc>
 800d0c2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ce:	e017      	b.n	800d100 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d0e2:	68f9      	ldr	r1, [r7, #12]
 800d0e4:	4808      	ldr	r0, [pc, #32]	; (800d108 <tcpip_try_callback+0x70>)
 800d0e6:	f00b f85b 	bl	80181a0 <sys_mbox_trypost>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d006      	beq.n	800d0fe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d0f0:	68f9      	ldr	r1, [r7, #12]
 800d0f2:	2008      	movs	r0, #8
 800d0f4:	f000 fdce 	bl	800dc94 <memp_free>
    return ERR_MEM;
 800d0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0fc:	e000      	b.n	800d100 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	2000a2b8 	.word	0x2000a2b8
 800d10c:	0801f390 	.word	0x0801f390
 800d110:	0801f408 	.word	0x0801f408
 800d114:	0801f3e0 	.word	0x0801f3e0

0800d118 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d124:	4806      	ldr	r0, [pc, #24]	; (800d140 <tcpip_send_msg_wait_sem+0x28>)
 800d126:	f00b f989 	bl	801843c <sys_mutex_lock>
  fn(apimsg);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	68b8      	ldr	r0, [r7, #8]
 800d12e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d130:	4803      	ldr	r0, [pc, #12]	; (800d140 <tcpip_send_msg_wait_sem+0x28>)
 800d132:	f00b f992 	bl	801845a <sys_mutex_unlock>
  return ERR_OK;
 800d136:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2000a2bc 	.word	0x2000a2bc

0800d144 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af02      	add	r7, sp, #8
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d14e:	f000 f871 	bl	800d234 <lwip_init>

  tcpip_init_done = initfunc;
 800d152:	4a17      	ldr	r2, [pc, #92]	; (800d1b0 <tcpip_init+0x6c>)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d158:	4a16      	ldr	r2, [pc, #88]	; (800d1b4 <tcpip_init+0x70>)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d15e:	2106      	movs	r1, #6
 800d160:	4815      	ldr	r0, [pc, #84]	; (800d1b8 <tcpip_init+0x74>)
 800d162:	f00a ffe9 	bl	8018138 <sys_mbox_new>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d006      	beq.n	800d17a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d16c:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <tcpip_init+0x78>)
 800d16e:	f240 2261 	movw	r2, #609	; 0x261
 800d172:	4913      	ldr	r1, [pc, #76]	; (800d1c0 <tcpip_init+0x7c>)
 800d174:	4813      	ldr	r0, [pc, #76]	; (800d1c4 <tcpip_init+0x80>)
 800d176:	f010 faab 	bl	801d6d0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d17a:	4813      	ldr	r0, [pc, #76]	; (800d1c8 <tcpip_init+0x84>)
 800d17c:	f00b f942 	bl	8018404 <sys_mutex_new>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d006      	beq.n	800d194 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d186:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <tcpip_init+0x78>)
 800d188:	f240 2265 	movw	r2, #613	; 0x265
 800d18c:	490f      	ldr	r1, [pc, #60]	; (800d1cc <tcpip_init+0x88>)
 800d18e:	480d      	ldr	r0, [pc, #52]	; (800d1c4 <tcpip_init+0x80>)
 800d190:	f010 fa9e 	bl	801d6d0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d194:	2300      	movs	r3, #0
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d19c:	2200      	movs	r2, #0
 800d19e:	490c      	ldr	r1, [pc, #48]	; (800d1d0 <tcpip_init+0x8c>)
 800d1a0:	480c      	ldr	r0, [pc, #48]	; (800d1d4 <tcpip_init+0x90>)
 800d1a2:	f00b f967 	bl	8018474 <sys_thread_new>
}
 800d1a6:	bf00      	nop
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000a2b0 	.word	0x2000a2b0
 800d1b4:	2000a2b4 	.word	0x2000a2b4
 800d1b8:	2000a2b8 	.word	0x2000a2b8
 800d1bc:	0801f390 	.word	0x0801f390
 800d1c0:	0801f418 	.word	0x0801f418
 800d1c4:	0801f3e0 	.word	0x0801f3e0
 800d1c8:	2000a2bc 	.word	0x2000a2bc
 800d1cc:	0801f43c 	.word	0x0801f43c
 800d1d0:	0800ced5 	.word	0x0800ced5
 800d1d4:	0801f460 	.word	0x0801f460

0800d1d8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d1e2:	88fb      	ldrh	r3, [r7, #6]
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	b21a      	sxth	r2, r3
 800d1e8:	88fb      	ldrh	r3, [r7, #6]
 800d1ea:	0a1b      	lsrs	r3, r3, #8
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	b21b      	sxth	r3, r3
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	b21b      	sxth	r3, r3
 800d1f4:	b29b      	uxth	r3, r3
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d202:	b480      	push	{r7}
 800d204:	b083      	sub	sp, #12
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	061a      	lsls	r2, r3, #24
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	021b      	lsls	r3, r3, #8
 800d212:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d216:	431a      	orrs	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	0a1b      	lsrs	r3, r3, #8
 800d21c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d220:	431a      	orrs	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	0e1b      	lsrs	r3, r3, #24
 800d226:	4313      	orrs	r3, r2
}
 800d228:	4618      	mov	r0, r3
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d23e:	f00b f8d3 	bl	80183e8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d242:	f000 f8d9 	bl	800d3f8 <mem_init>
  memp_init();
 800d246:	f000 fc41 	bl	800dacc <memp_init>
  pbuf_init();
  netif_init();
 800d24a:	f000 fd4d 	bl	800dce8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d24e:	f008 f815 	bl	801527c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d252:	f001 fe5d 	bl	800ef10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d256:	f007 ff57 	bl	8015108 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	4603      	mov	r3, r0
 800d26c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d26e:	4b05      	ldr	r3, [pc, #20]	; (800d284 <ptr_to_mem+0x20>)
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	88fb      	ldrh	r3, [r7, #6]
 800d274:	4413      	add	r3, r2
}
 800d276:	4618      	mov	r0, r3
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	2000e2d4 	.word	0x2000e2d4

0800d288 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d290:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <mem_to_ptr+0x20>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	b29b      	uxth	r3, r3
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop
 800d2a8:	2000e2d4 	.word	0x2000e2d4

0800d2ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d2ac:	b590      	push	{r4, r7, lr}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d2b4:	4b47      	ldr	r3, [pc, #284]	; (800d3d4 <plug_holes+0x128>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d206      	bcs.n	800d2cc <plug_holes+0x20>
 800d2be:	4b46      	ldr	r3, [pc, #280]	; (800d3d8 <plug_holes+0x12c>)
 800d2c0:	f240 12df 	movw	r2, #479	; 0x1df
 800d2c4:	4945      	ldr	r1, [pc, #276]	; (800d3dc <plug_holes+0x130>)
 800d2c6:	4846      	ldr	r0, [pc, #280]	; (800d3e0 <plug_holes+0x134>)
 800d2c8:	f010 fa02 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d2cc:	4b45      	ldr	r3, [pc, #276]	; (800d3e4 <plug_holes+0x138>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d306      	bcc.n	800d2e4 <plug_holes+0x38>
 800d2d6:	4b40      	ldr	r3, [pc, #256]	; (800d3d8 <plug_holes+0x12c>)
 800d2d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d2dc:	4942      	ldr	r1, [pc, #264]	; (800d3e8 <plug_holes+0x13c>)
 800d2de:	4840      	ldr	r0, [pc, #256]	; (800d3e0 <plug_holes+0x134>)
 800d2e0:	f010 f9f6 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	791b      	ldrb	r3, [r3, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d006      	beq.n	800d2fa <plug_holes+0x4e>
 800d2ec:	4b3a      	ldr	r3, [pc, #232]	; (800d3d8 <plug_holes+0x12c>)
 800d2ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d2f2:	493e      	ldr	r1, [pc, #248]	; (800d3ec <plug_holes+0x140>)
 800d2f4:	483a      	ldr	r0, [pc, #232]	; (800d3e0 <plug_holes+0x134>)
 800d2f6:	f010 f9eb 	bl	801d6d0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d302:	4293      	cmp	r3, r2
 800d304:	d906      	bls.n	800d314 <plug_holes+0x68>
 800d306:	4b34      	ldr	r3, [pc, #208]	; (800d3d8 <plug_holes+0x12c>)
 800d308:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d30c:	4938      	ldr	r1, [pc, #224]	; (800d3f0 <plug_holes+0x144>)
 800d30e:	4834      	ldr	r0, [pc, #208]	; (800d3e0 <plug_holes+0x134>)
 800d310:	f010 f9de 	bl	801d6d0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	4618      	mov	r0, r3
 800d31a:	f7ff ffa3 	bl	800d264 <ptr_to_mem>
 800d31e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	429a      	cmp	r2, r3
 800d326:	d025      	beq.n	800d374 <plug_holes+0xc8>
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	791b      	ldrb	r3, [r3, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d121      	bne.n	800d374 <plug_holes+0xc8>
 800d330:	4b2c      	ldr	r3, [pc, #176]	; (800d3e4 <plug_holes+0x138>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	429a      	cmp	r2, r3
 800d338:	d01c      	beq.n	800d374 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d33a:	4b2e      	ldr	r3, [pc, #184]	; (800d3f4 <plug_holes+0x148>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	429a      	cmp	r2, r3
 800d342:	d102      	bne.n	800d34a <plug_holes+0x9e>
      lfree = mem;
 800d344:	4a2b      	ldr	r2, [pc, #172]	; (800d3f4 <plug_holes+0x148>)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	881a      	ldrh	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d00a      	beq.n	800d374 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff ff7e 	bl	800d264 <ptr_to_mem>
 800d368:	4604      	mov	r4, r0
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff ff8c 	bl	800d288 <mem_to_ptr>
 800d370:	4603      	mov	r3, r0
 800d372:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	885b      	ldrh	r3, [r3, #2]
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff ff73 	bl	800d264 <ptr_to_mem>
 800d37e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	429a      	cmp	r2, r3
 800d386:	d020      	beq.n	800d3ca <plug_holes+0x11e>
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	791b      	ldrb	r3, [r3, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d11c      	bne.n	800d3ca <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d390:	4b18      	ldr	r3, [pc, #96]	; (800d3f4 <plug_holes+0x148>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	429a      	cmp	r2, r3
 800d398:	d102      	bne.n	800d3a0 <plug_holes+0xf4>
      lfree = pmem;
 800d39a:	4a16      	ldr	r2, [pc, #88]	; (800d3f4 <plug_holes+0x148>)
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	881a      	ldrh	r2, [r3, #0]
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d00a      	beq.n	800d3ca <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff ff53 	bl	800d264 <ptr_to_mem>
 800d3be:	4604      	mov	r4, r0
 800d3c0:	68b8      	ldr	r0, [r7, #8]
 800d3c2:	f7ff ff61 	bl	800d288 <mem_to_ptr>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d3ca:	bf00      	nop
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd90      	pop	{r4, r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	2000e2d4 	.word	0x2000e2d4
 800d3d8:	0801f470 	.word	0x0801f470
 800d3dc:	0801f4a0 	.word	0x0801f4a0
 800d3e0:	0801f4b8 	.word	0x0801f4b8
 800d3e4:	2000e2d8 	.word	0x2000e2d8
 800d3e8:	0801f4e0 	.word	0x0801f4e0
 800d3ec:	0801f4fc 	.word	0x0801f4fc
 800d3f0:	0801f518 	.word	0x0801f518
 800d3f4:	2000e2e0 	.word	0x2000e2e0

0800d3f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d3fe:	4b1f      	ldr	r3, [pc, #124]	; (800d47c <mem_init+0x84>)
 800d400:	3303      	adds	r3, #3
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	461a      	mov	r2, r3
 800d408:	4b1d      	ldr	r3, [pc, #116]	; (800d480 <mem_init+0x88>)
 800d40a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d40c:	4b1c      	ldr	r3, [pc, #112]	; (800d480 <mem_init+0x88>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d418:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d426:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800d42a:	f7ff ff1b 	bl	800d264 <ptr_to_mem>
 800d42e:	4603      	mov	r3, r0
 800d430:	4a14      	ldr	r2, [pc, #80]	; (800d484 <mem_init+0x8c>)
 800d432:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d434:	4b13      	ldr	r3, [pc, #76]	; (800d484 <mem_init+0x8c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2201      	movs	r2, #1
 800d43a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d43c:	4b11      	ldr	r3, [pc, #68]	; (800d484 <mem_init+0x8c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d444:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d446:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <mem_init+0x8c>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d44e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d450:	4b0b      	ldr	r3, [pc, #44]	; (800d480 <mem_init+0x88>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a0c      	ldr	r2, [pc, #48]	; (800d488 <mem_init+0x90>)
 800d456:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d458:	480c      	ldr	r0, [pc, #48]	; (800d48c <mem_init+0x94>)
 800d45a:	f00a ffd3 	bl	8018404 <sys_mutex_new>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d006      	beq.n	800d472 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d464:	4b0a      	ldr	r3, [pc, #40]	; (800d490 <mem_init+0x98>)
 800d466:	f240 221f 	movw	r2, #543	; 0x21f
 800d46a:	490a      	ldr	r1, [pc, #40]	; (800d494 <mem_init+0x9c>)
 800d46c:	480a      	ldr	r0, [pc, #40]	; (800d498 <mem_init+0xa0>)
 800d46e:	f010 f92f 	bl	801d6d0 <iprintf>
  }
}
 800d472:	bf00      	nop
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	2000a2d8 	.word	0x2000a2d8
 800d480:	2000e2d4 	.word	0x2000e2d4
 800d484:	2000e2d8 	.word	0x2000e2d8
 800d488:	2000e2e0 	.word	0x2000e2e0
 800d48c:	2000e2dc 	.word	0x2000e2dc
 800d490:	0801f470 	.word	0x0801f470
 800d494:	0801f544 	.word	0x0801f544
 800d498:	0801f4b8 	.word	0x0801f4b8

0800d49c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff feef 	bl	800d288 <mem_to_ptr>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff fed6 	bl	800d264 <ptr_to_mem>
 800d4b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	885b      	ldrh	r3, [r3, #2]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fed0 	bl	800d264 <ptr_to_mem>
 800d4c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d819      	bhi.n	800d506 <mem_link_valid+0x6a>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	885b      	ldrh	r3, [r3, #2]
 800d4d6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d813      	bhi.n	800d506 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d4e2:	8afa      	ldrh	r2, [r7, #22]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d004      	beq.n	800d4f2 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	881b      	ldrh	r3, [r3, #0]
 800d4ec:	8afa      	ldrh	r2, [r7, #22]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d109      	bne.n	800d506 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d4f2:	4b08      	ldr	r3, [pc, #32]	; (800d514 <mem_link_valid+0x78>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d006      	beq.n	800d50a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	885b      	ldrh	r3, [r3, #2]
 800d500:	8afa      	ldrh	r2, [r7, #22]
 800d502:	429a      	cmp	r2, r3
 800d504:	d001      	beq.n	800d50a <mem_link_valid+0x6e>
    return 0;
 800d506:	2300      	movs	r3, #0
 800d508:	e000      	b.n	800d50c <mem_link_valid+0x70>
  }
  return 1;
 800d50a:	2301      	movs	r3, #1
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	2000e2d8 	.word	0x2000e2d8

0800d518 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b088      	sub	sp, #32
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d070      	beq.n	800d608 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f003 0303 	and.w	r3, r3, #3
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00d      	beq.n	800d54c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d530:	4b37      	ldr	r3, [pc, #220]	; (800d610 <mem_free+0xf8>)
 800d532:	f240 2273 	movw	r2, #627	; 0x273
 800d536:	4937      	ldr	r1, [pc, #220]	; (800d614 <mem_free+0xfc>)
 800d538:	4837      	ldr	r0, [pc, #220]	; (800d618 <mem_free+0x100>)
 800d53a:	f010 f8c9 	bl	801d6d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d53e:	f00a ffbf 	bl	80184c0 <sys_arch_protect>
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f00a ffc9 	bl	80184dc <sys_arch_unprotect>
    return;
 800d54a:	e05e      	b.n	800d60a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	3b08      	subs	r3, #8
 800d550:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d552:	4b32      	ldr	r3, [pc, #200]	; (800d61c <mem_free+0x104>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	69fa      	ldr	r2, [r7, #28]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d306      	bcc.n	800d56a <mem_free+0x52>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f103 020c 	add.w	r2, r3, #12
 800d562:	4b2f      	ldr	r3, [pc, #188]	; (800d620 <mem_free+0x108>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	429a      	cmp	r2, r3
 800d568:	d90d      	bls.n	800d586 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d56a:	4b29      	ldr	r3, [pc, #164]	; (800d610 <mem_free+0xf8>)
 800d56c:	f240 227f 	movw	r2, #639	; 0x27f
 800d570:	492c      	ldr	r1, [pc, #176]	; (800d624 <mem_free+0x10c>)
 800d572:	4829      	ldr	r0, [pc, #164]	; (800d618 <mem_free+0x100>)
 800d574:	f010 f8ac 	bl	801d6d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d578:	f00a ffa2 	bl	80184c0 <sys_arch_protect>
 800d57c:	6138      	str	r0, [r7, #16]
 800d57e:	6938      	ldr	r0, [r7, #16]
 800d580:	f00a ffac 	bl	80184dc <sys_arch_unprotect>
    return;
 800d584:	e041      	b.n	800d60a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d586:	4828      	ldr	r0, [pc, #160]	; (800d628 <mem_free+0x110>)
 800d588:	f00a ff58 	bl	801843c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	791b      	ldrb	r3, [r3, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d110      	bne.n	800d5b6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d594:	4b1e      	ldr	r3, [pc, #120]	; (800d610 <mem_free+0xf8>)
 800d596:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d59a:	4924      	ldr	r1, [pc, #144]	; (800d62c <mem_free+0x114>)
 800d59c:	481e      	ldr	r0, [pc, #120]	; (800d618 <mem_free+0x100>)
 800d59e:	f010 f897 	bl	801d6d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d5a2:	4821      	ldr	r0, [pc, #132]	; (800d628 <mem_free+0x110>)
 800d5a4:	f00a ff59 	bl	801845a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5a8:	f00a ff8a 	bl	80184c0 <sys_arch_protect>
 800d5ac:	6178      	str	r0, [r7, #20]
 800d5ae:	6978      	ldr	r0, [r7, #20]
 800d5b0:	f00a ff94 	bl	80184dc <sys_arch_unprotect>
    return;
 800d5b4:	e029      	b.n	800d60a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d5b6:	69f8      	ldr	r0, [r7, #28]
 800d5b8:	f7ff ff70 	bl	800d49c <mem_link_valid>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d110      	bne.n	800d5e4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d5c2:	4b13      	ldr	r3, [pc, #76]	; (800d610 <mem_free+0xf8>)
 800d5c4:	f240 2295 	movw	r2, #661	; 0x295
 800d5c8:	4919      	ldr	r1, [pc, #100]	; (800d630 <mem_free+0x118>)
 800d5ca:	4813      	ldr	r0, [pc, #76]	; (800d618 <mem_free+0x100>)
 800d5cc:	f010 f880 	bl	801d6d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d5d0:	4815      	ldr	r0, [pc, #84]	; (800d628 <mem_free+0x110>)
 800d5d2:	f00a ff42 	bl	801845a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5d6:	f00a ff73 	bl	80184c0 <sys_arch_protect>
 800d5da:	61b8      	str	r0, [r7, #24]
 800d5dc:	69b8      	ldr	r0, [r7, #24]
 800d5de:	f00a ff7d 	bl	80184dc <sys_arch_unprotect>
    return;
 800d5e2:	e012      	b.n	800d60a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d5ea:	4b12      	ldr	r3, [pc, #72]	; (800d634 <mem_free+0x11c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	69fa      	ldr	r2, [r7, #28]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d202      	bcs.n	800d5fa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d5f4:	4a0f      	ldr	r2, [pc, #60]	; (800d634 <mem_free+0x11c>)
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d5fa:	69f8      	ldr	r0, [r7, #28]
 800d5fc:	f7ff fe56 	bl	800d2ac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d600:	4809      	ldr	r0, [pc, #36]	; (800d628 <mem_free+0x110>)
 800d602:	f00a ff2a 	bl	801845a <sys_mutex_unlock>
 800d606:	e000      	b.n	800d60a <mem_free+0xf2>
    return;
 800d608:	bf00      	nop
}
 800d60a:	3720      	adds	r7, #32
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	0801f470 	.word	0x0801f470
 800d614:	0801f560 	.word	0x0801f560
 800d618:	0801f4b8 	.word	0x0801f4b8
 800d61c:	2000e2d4 	.word	0x2000e2d4
 800d620:	2000e2d8 	.word	0x2000e2d8
 800d624:	0801f584 	.word	0x0801f584
 800d628:	2000e2dc 	.word	0x2000e2dc
 800d62c:	0801f5a0 	.word	0x0801f5a0
 800d630:	0801f5c8 	.word	0x0801f5c8
 800d634:	2000e2e0 	.word	0x2000e2e0

0800d638 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b088      	sub	sp, #32
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d644:	887b      	ldrh	r3, [r7, #2]
 800d646:	3303      	adds	r3, #3
 800d648:	b29b      	uxth	r3, r3
 800d64a:	f023 0303 	bic.w	r3, r3, #3
 800d64e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d650:	8bfb      	ldrh	r3, [r7, #30]
 800d652:	2b0b      	cmp	r3, #11
 800d654:	d801      	bhi.n	800d65a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d656:	230c      	movs	r3, #12
 800d658:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d65a:	8bfb      	ldrh	r3, [r7, #30]
 800d65c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d660:	4293      	cmp	r3, r2
 800d662:	d803      	bhi.n	800d66c <mem_trim+0x34>
 800d664:	8bfa      	ldrh	r2, [r7, #30]
 800d666:	887b      	ldrh	r3, [r7, #2]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d201      	bcs.n	800d670 <mem_trim+0x38>
    return NULL;
 800d66c:	2300      	movs	r3, #0
 800d66e:	e0dc      	b.n	800d82a <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d670:	4b70      	ldr	r3, [pc, #448]	; (800d834 <mem_trim+0x1fc>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	429a      	cmp	r2, r3
 800d678:	d304      	bcc.n	800d684 <mem_trim+0x4c>
 800d67a:	4b6f      	ldr	r3, [pc, #444]	; (800d838 <mem_trim+0x200>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	d306      	bcc.n	800d692 <mem_trim+0x5a>
 800d684:	4b6d      	ldr	r3, [pc, #436]	; (800d83c <mem_trim+0x204>)
 800d686:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d68a:	496d      	ldr	r1, [pc, #436]	; (800d840 <mem_trim+0x208>)
 800d68c:	486d      	ldr	r0, [pc, #436]	; (800d844 <mem_trim+0x20c>)
 800d68e:	f010 f81f 	bl	801d6d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d692:	4b68      	ldr	r3, [pc, #416]	; (800d834 <mem_trim+0x1fc>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d304      	bcc.n	800d6a6 <mem_trim+0x6e>
 800d69c:	4b66      	ldr	r3, [pc, #408]	; (800d838 <mem_trim+0x200>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d307      	bcc.n	800d6b6 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d6a6:	f00a ff0b 	bl	80184c0 <sys_arch_protect>
 800d6aa:	60b8      	str	r0, [r7, #8]
 800d6ac:	68b8      	ldr	r0, [r7, #8]
 800d6ae:	f00a ff15 	bl	80184dc <sys_arch_unprotect>
    return rmem;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	e0b9      	b.n	800d82a <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3b08      	subs	r3, #8
 800d6ba:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d6bc:	69b8      	ldr	r0, [r7, #24]
 800d6be:	f7ff fde3 	bl	800d288 <mem_to_ptr>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	881a      	ldrh	r2, [r3, #0]
 800d6ca:	8afb      	ldrh	r3, [r7, #22]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	3b08      	subs	r3, #8
 800d6d2:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d6d4:	8bfa      	ldrh	r2, [r7, #30]
 800d6d6:	8abb      	ldrh	r3, [r7, #20]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d906      	bls.n	800d6ea <mem_trim+0xb2>
 800d6dc:	4b57      	ldr	r3, [pc, #348]	; (800d83c <mem_trim+0x204>)
 800d6de:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d6e2:	4959      	ldr	r1, [pc, #356]	; (800d848 <mem_trim+0x210>)
 800d6e4:	4857      	ldr	r0, [pc, #348]	; (800d844 <mem_trim+0x20c>)
 800d6e6:	f00f fff3 	bl	801d6d0 <iprintf>
  if (newsize > size) {
 800d6ea:	8bfa      	ldrh	r2, [r7, #30]
 800d6ec:	8abb      	ldrh	r3, [r7, #20]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d901      	bls.n	800d6f6 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e099      	b.n	800d82a <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800d6f6:	8bfa      	ldrh	r2, [r7, #30]
 800d6f8:	8abb      	ldrh	r3, [r7, #20]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d101      	bne.n	800d702 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	e093      	b.n	800d82a <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d702:	4852      	ldr	r0, [pc, #328]	; (800d84c <mem_trim+0x214>)
 800d704:	f00a fe9a 	bl	801843c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	881b      	ldrh	r3, [r3, #0]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7ff fda9 	bl	800d264 <ptr_to_mem>
 800d712:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	791b      	ldrb	r3, [r3, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d141      	bne.n	800d7a0 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d724:	4293      	cmp	r3, r2
 800d726:	d106      	bne.n	800d736 <mem_trim+0xfe>
 800d728:	4b44      	ldr	r3, [pc, #272]	; (800d83c <mem_trim+0x204>)
 800d72a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d72e:	4948      	ldr	r1, [pc, #288]	; (800d850 <mem_trim+0x218>)
 800d730:	4844      	ldr	r0, [pc, #272]	; (800d844 <mem_trim+0x20c>)
 800d732:	f00f ffcd 	bl	801d6d0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d73c:	8afa      	ldrh	r2, [r7, #22]
 800d73e:	8bfb      	ldrh	r3, [r7, #30]
 800d740:	4413      	add	r3, r2
 800d742:	b29b      	uxth	r3, r3
 800d744:	3308      	adds	r3, #8
 800d746:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d748:	4b42      	ldr	r3, [pc, #264]	; (800d854 <mem_trim+0x21c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d106      	bne.n	800d760 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800d752:	89fb      	ldrh	r3, [r7, #14]
 800d754:	4618      	mov	r0, r3
 800d756:	f7ff fd85 	bl	800d264 <ptr_to_mem>
 800d75a:	4603      	mov	r3, r0
 800d75c:	4a3d      	ldr	r2, [pc, #244]	; (800d854 <mem_trim+0x21c>)
 800d75e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d760:	89fb      	ldrh	r3, [r7, #14]
 800d762:	4618      	mov	r0, r3
 800d764:	f7ff fd7e 	bl	800d264 <ptr_to_mem>
 800d768:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	2200      	movs	r2, #0
 800d76e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	89ba      	ldrh	r2, [r7, #12]
 800d774:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	8afa      	ldrh	r2, [r7, #22]
 800d77a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	89fa      	ldrh	r2, [r7, #14]
 800d780:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d049      	beq.n	800d822 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fd66 	bl	800d264 <ptr_to_mem>
 800d798:	4602      	mov	r2, r0
 800d79a:	89fb      	ldrh	r3, [r7, #14]
 800d79c:	8053      	strh	r3, [r2, #2]
 800d79e:	e040      	b.n	800d822 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d7a0:	8bfb      	ldrh	r3, [r7, #30]
 800d7a2:	f103 0214 	add.w	r2, r3, #20
 800d7a6:	8abb      	ldrh	r3, [r7, #20]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d83a      	bhi.n	800d822 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d7ac:	8afa      	ldrh	r2, [r7, #22]
 800d7ae:	8bfb      	ldrh	r3, [r7, #30]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d106      	bne.n	800d7d2 <mem_trim+0x19a>
 800d7c4:	4b1d      	ldr	r3, [pc, #116]	; (800d83c <mem_trim+0x204>)
 800d7c6:	f240 3216 	movw	r2, #790	; 0x316
 800d7ca:	4921      	ldr	r1, [pc, #132]	; (800d850 <mem_trim+0x218>)
 800d7cc:	481d      	ldr	r0, [pc, #116]	; (800d844 <mem_trim+0x20c>)
 800d7ce:	f00f ff7f 	bl	801d6d0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d7d2:	89fb      	ldrh	r3, [r7, #14]
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7ff fd45 	bl	800d264 <ptr_to_mem>
 800d7da:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d7dc:	4b1d      	ldr	r3, [pc, #116]	; (800d854 <mem_trim+0x21c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	693a      	ldr	r2, [r7, #16]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d202      	bcs.n	800d7ec <mem_trim+0x1b4>
      lfree = mem2;
 800d7e6:	4a1b      	ldr	r2, [pc, #108]	; (800d854 <mem_trim+0x21c>)
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	881a      	ldrh	r2, [r3, #0]
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	8afa      	ldrh	r2, [r7, #22]
 800d7fe:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	89fa      	ldrh	r2, [r7, #14]
 800d804:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d80e:	4293      	cmp	r3, r2
 800d810:	d007      	beq.n	800d822 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff fd24 	bl	800d264 <ptr_to_mem>
 800d81c:	4602      	mov	r2, r0
 800d81e:	89fb      	ldrh	r3, [r7, #14]
 800d820:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d822:	480a      	ldr	r0, [pc, #40]	; (800d84c <mem_trim+0x214>)
 800d824:	f00a fe19 	bl	801845a <sys_mutex_unlock>
  return rmem;
 800d828:	687b      	ldr	r3, [r7, #4]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3720      	adds	r7, #32
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	2000e2d4 	.word	0x2000e2d4
 800d838:	2000e2d8 	.word	0x2000e2d8
 800d83c:	0801f470 	.word	0x0801f470
 800d840:	0801f5fc 	.word	0x0801f5fc
 800d844:	0801f4b8 	.word	0x0801f4b8
 800d848:	0801f614 	.word	0x0801f614
 800d84c:	2000e2dc 	.word	0x2000e2dc
 800d850:	0801f634 	.word	0x0801f634
 800d854:	2000e2e0 	.word	0x2000e2e0

0800d858 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b088      	sub	sp, #32
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d862:	88fb      	ldrh	r3, [r7, #6]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <mem_malloc+0x14>
    return NULL;
 800d868:	2300      	movs	r3, #0
 800d86a:	e0e6      	b.n	800da3a <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d86c:	88fb      	ldrh	r3, [r7, #6]
 800d86e:	3303      	adds	r3, #3
 800d870:	b29b      	uxth	r3, r3
 800d872:	f023 0303 	bic.w	r3, r3, #3
 800d876:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d878:	8bbb      	ldrh	r3, [r7, #28]
 800d87a:	2b0b      	cmp	r3, #11
 800d87c:	d801      	bhi.n	800d882 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d87e:	230c      	movs	r3, #12
 800d880:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d882:	8bbb      	ldrh	r3, [r7, #28]
 800d884:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d888:	4293      	cmp	r3, r2
 800d88a:	d803      	bhi.n	800d894 <mem_malloc+0x3c>
 800d88c:	8bba      	ldrh	r2, [r7, #28]
 800d88e:	88fb      	ldrh	r3, [r7, #6]
 800d890:	429a      	cmp	r2, r3
 800d892:	d201      	bcs.n	800d898 <mem_malloc+0x40>
    return NULL;
 800d894:	2300      	movs	r3, #0
 800d896:	e0d0      	b.n	800da3a <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d898:	486a      	ldr	r0, [pc, #424]	; (800da44 <mem_malloc+0x1ec>)
 800d89a:	f00a fdcf 	bl	801843c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d89e:	4b6a      	ldr	r3, [pc, #424]	; (800da48 <mem_malloc+0x1f0>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7ff fcf0 	bl	800d288 <mem_to_ptr>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	83fb      	strh	r3, [r7, #30]
 800d8ac:	e0b9      	b.n	800da22 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d8ae:	8bfb      	ldrh	r3, [r7, #30]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7ff fcd7 	bl	800d264 <ptr_to_mem>
 800d8b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	791b      	ldrb	r3, [r3, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f040 80a9 	bne.w	800da14 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	8bfb      	ldrh	r3, [r7, #30]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	f1a3 0208 	sub.w	r2, r3, #8
 800d8d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	f0c0 809e 	bcc.w	800da14 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	881b      	ldrh	r3, [r3, #0]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	8bfb      	ldrh	r3, [r7, #30]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	f1a3 0208 	sub.w	r2, r3, #8
 800d8e6:	8bbb      	ldrh	r3, [r7, #28]
 800d8e8:	3314      	adds	r3, #20
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d335      	bcc.n	800d95a <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d8ee:	8bfa      	ldrh	r2, [r7, #30]
 800d8f0:	8bbb      	ldrh	r3, [r7, #28]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	3308      	adds	r3, #8
 800d8f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d8fa:	8a7b      	ldrh	r3, [r7, #18]
 800d8fc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d900:	4293      	cmp	r3, r2
 800d902:	d106      	bne.n	800d912 <mem_malloc+0xba>
 800d904:	4b51      	ldr	r3, [pc, #324]	; (800da4c <mem_malloc+0x1f4>)
 800d906:	f240 3287 	movw	r2, #903	; 0x387
 800d90a:	4951      	ldr	r1, [pc, #324]	; (800da50 <mem_malloc+0x1f8>)
 800d90c:	4851      	ldr	r0, [pc, #324]	; (800da54 <mem_malloc+0x1fc>)
 800d90e:	f00f fedf 	bl	801d6d0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d912:	8a7b      	ldrh	r3, [r7, #18]
 800d914:	4618      	mov	r0, r3
 800d916:	f7ff fca5 	bl	800d264 <ptr_to_mem>
 800d91a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	881a      	ldrh	r2, [r3, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	8bfa      	ldrh	r2, [r7, #30]
 800d92e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	8a7a      	ldrh	r2, [r7, #18]
 800d934:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	2201      	movs	r2, #1
 800d93a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	881b      	ldrh	r3, [r3, #0]
 800d940:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800d944:	4293      	cmp	r3, r2
 800d946:	d00b      	beq.n	800d960 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff fc89 	bl	800d264 <ptr_to_mem>
 800d952:	4602      	mov	r2, r0
 800d954:	8a7b      	ldrh	r3, [r7, #18]
 800d956:	8053      	strh	r3, [r2, #2]
 800d958:	e002      	b.n	800d960 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2201      	movs	r2, #1
 800d95e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d960:	4b39      	ldr	r3, [pc, #228]	; (800da48 <mem_malloc+0x1f0>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	429a      	cmp	r2, r3
 800d968:	d127      	bne.n	800d9ba <mem_malloc+0x162>
          struct mem *cur = lfree;
 800d96a:	4b37      	ldr	r3, [pc, #220]	; (800da48 <mem_malloc+0x1f0>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d970:	e005      	b.n	800d97e <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff fc74 	bl	800d264 <ptr_to_mem>
 800d97c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	791b      	ldrb	r3, [r3, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d004      	beq.n	800d990 <mem_malloc+0x138>
 800d986:	4b34      	ldr	r3, [pc, #208]	; (800da58 <mem_malloc+0x200>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d1f0      	bne.n	800d972 <mem_malloc+0x11a>
          }
          lfree = cur;
 800d990:	4a2d      	ldr	r2, [pc, #180]	; (800da48 <mem_malloc+0x1f0>)
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d996:	4b2c      	ldr	r3, [pc, #176]	; (800da48 <mem_malloc+0x1f0>)
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	4b2f      	ldr	r3, [pc, #188]	; (800da58 <mem_malloc+0x200>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d00b      	beq.n	800d9ba <mem_malloc+0x162>
 800d9a2:	4b29      	ldr	r3, [pc, #164]	; (800da48 <mem_malloc+0x1f0>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	791b      	ldrb	r3, [r3, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d006      	beq.n	800d9ba <mem_malloc+0x162>
 800d9ac:	4b27      	ldr	r3, [pc, #156]	; (800da4c <mem_malloc+0x1f4>)
 800d9ae:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d9b2:	492a      	ldr	r1, [pc, #168]	; (800da5c <mem_malloc+0x204>)
 800d9b4:	4827      	ldr	r0, [pc, #156]	; (800da54 <mem_malloc+0x1fc>)
 800d9b6:	f00f fe8b 	bl	801d6d0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d9ba:	4822      	ldr	r0, [pc, #136]	; (800da44 <mem_malloc+0x1ec>)
 800d9bc:	f00a fd4d 	bl	801845a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d9c0:	8bba      	ldrh	r2, [r7, #28]
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	4a23      	ldr	r2, [pc, #140]	; (800da58 <mem_malloc+0x200>)
 800d9ca:	6812      	ldr	r2, [r2, #0]
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d906      	bls.n	800d9de <mem_malloc+0x186>
 800d9d0:	4b1e      	ldr	r3, [pc, #120]	; (800da4c <mem_malloc+0x1f4>)
 800d9d2:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d9d6:	4922      	ldr	r1, [pc, #136]	; (800da60 <mem_malloc+0x208>)
 800d9d8:	481e      	ldr	r0, [pc, #120]	; (800da54 <mem_malloc+0x1fc>)
 800d9da:	f00f fe79 	bl	801d6d0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f003 0303 	and.w	r3, r3, #3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <mem_malloc+0x19e>
 800d9e8:	4b18      	ldr	r3, [pc, #96]	; (800da4c <mem_malloc+0x1f4>)
 800d9ea:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d9ee:	491d      	ldr	r1, [pc, #116]	; (800da64 <mem_malloc+0x20c>)
 800d9f0:	4818      	ldr	r0, [pc, #96]	; (800da54 <mem_malloc+0x1fc>)
 800d9f2:	f00f fe6d 	bl	801d6d0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f003 0303 	and.w	r3, r3, #3
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d006      	beq.n	800da0e <mem_malloc+0x1b6>
 800da00:	4b12      	ldr	r3, [pc, #72]	; (800da4c <mem_malloc+0x1f4>)
 800da02:	f240 32bd 	movw	r2, #957	; 0x3bd
 800da06:	4918      	ldr	r1, [pc, #96]	; (800da68 <mem_malloc+0x210>)
 800da08:	4812      	ldr	r0, [pc, #72]	; (800da54 <mem_malloc+0x1fc>)
 800da0a:	f00f fe61 	bl	801d6d0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	3308      	adds	r3, #8
 800da12:	e012      	b.n	800da3a <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800da14:	8bfb      	ldrh	r3, [r7, #30]
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff fc24 	bl	800d264 <ptr_to_mem>
 800da1c:	4603      	mov	r3, r0
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800da22:	8bfa      	ldrh	r2, [r7, #30]
 800da24:	8bb9      	ldrh	r1, [r7, #28]
 800da26:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800da2a:	1a5b      	subs	r3, r3, r1
 800da2c:	429a      	cmp	r2, r3
 800da2e:	f4ff af3e 	bcc.w	800d8ae <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800da32:	4804      	ldr	r0, [pc, #16]	; (800da44 <mem_malloc+0x1ec>)
 800da34:	f00a fd11 	bl	801845a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3720      	adds	r7, #32
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	2000e2dc 	.word	0x2000e2dc
 800da48:	2000e2e0 	.word	0x2000e2e0
 800da4c:	0801f470 	.word	0x0801f470
 800da50:	0801f634 	.word	0x0801f634
 800da54:	0801f4b8 	.word	0x0801f4b8
 800da58:	2000e2d8 	.word	0x2000e2d8
 800da5c:	0801f648 	.word	0x0801f648
 800da60:	0801f664 	.word	0x0801f664
 800da64:	0801f694 	.word	0x0801f694
 800da68:	0801f6c4 	.word	0x0801f6c4

0800da6c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	3303      	adds	r3, #3
 800da82:	f023 0303 	bic.w	r3, r3, #3
 800da86:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800da88:	2300      	movs	r3, #0
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	e011      	b.n	800dab2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	881b      	ldrh	r3, [r3, #0]
 800daa4:	461a      	mov	r2, r3
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	4413      	add	r3, r2
 800daaa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3301      	adds	r3, #1
 800dab0:	60fb      	str	r3, [r7, #12]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	885b      	ldrh	r3, [r3, #2]
 800dab6:	461a      	mov	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4293      	cmp	r3, r2
 800dabc:	dbe7      	blt.n	800da8e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800dabe:	bf00      	nop
 800dac0:	bf00      	nop
 800dac2:	3714      	adds	r7, #20
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dad2:	2300      	movs	r3, #0
 800dad4:	80fb      	strh	r3, [r7, #6]
 800dad6:	e009      	b.n	800daec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800dad8:	88fb      	ldrh	r3, [r7, #6]
 800dada:	4a08      	ldr	r2, [pc, #32]	; (800dafc <memp_init+0x30>)
 800dadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff ffc3 	bl	800da6c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dae6:	88fb      	ldrh	r3, [r7, #6]
 800dae8:	3301      	adds	r3, #1
 800daea:	80fb      	strh	r3, [r7, #6]
 800daec:	88fb      	ldrh	r3, [r7, #6]
 800daee:	2b0c      	cmp	r3, #12
 800daf0:	d9f2      	bls.n	800dad8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800daf2:	bf00      	nop
 800daf4:	bf00      	nop
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	08022278 	.word	0x08022278

0800db00 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800db08:	f00a fcda 	bl	80184c0 <sys_arch_protect>
 800db0c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d015      	beq.n	800db48 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	68ba      	ldr	r2, [r7, #8]
 800db22:	6812      	ldr	r2, [r2, #0]
 800db24:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	f003 0303 	and.w	r3, r3, #3
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d006      	beq.n	800db3e <do_memp_malloc_pool+0x3e>
 800db30:	4b09      	ldr	r3, [pc, #36]	; (800db58 <do_memp_malloc_pool+0x58>)
 800db32:	f44f 728c 	mov.w	r2, #280	; 0x118
 800db36:	4909      	ldr	r1, [pc, #36]	; (800db5c <do_memp_malloc_pool+0x5c>)
 800db38:	4809      	ldr	r0, [pc, #36]	; (800db60 <do_memp_malloc_pool+0x60>)
 800db3a:	f00f fdc9 	bl	801d6d0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f00a fccc 	bl	80184dc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	e003      	b.n	800db50 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f00a fcc7 	bl	80184dc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	0801f6e8 	.word	0x0801f6e8
 800db5c:	0801f718 	.word	0x0801f718
 800db60:	0801f73c 	.word	0x0801f73c

0800db64 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <memp_malloc_pool+0x1c>
 800db72:	4b0a      	ldr	r3, [pc, #40]	; (800db9c <memp_malloc_pool+0x38>)
 800db74:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800db78:	4909      	ldr	r1, [pc, #36]	; (800dba0 <memp_malloc_pool+0x3c>)
 800db7a:	480a      	ldr	r0, [pc, #40]	; (800dba4 <memp_malloc_pool+0x40>)
 800db7c:	f00f fda8 	bl	801d6d0 <iprintf>
  if (desc == NULL) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <memp_malloc_pool+0x26>
    return NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	e003      	b.n	800db92 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff ffb8 	bl	800db00 <do_memp_malloc_pool>
 800db90:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	0801f6e8 	.word	0x0801f6e8
 800dba0:	0801f764 	.word	0x0801f764
 800dba4:	0801f73c 	.word	0x0801f73c

0800dba8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dbb2:	79fb      	ldrb	r3, [r7, #7]
 800dbb4:	2b0c      	cmp	r3, #12
 800dbb6:	d908      	bls.n	800dbca <memp_malloc+0x22>
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <memp_malloc+0x3c>)
 800dbba:	f240 1257 	movw	r2, #343	; 0x157
 800dbbe:	490a      	ldr	r1, [pc, #40]	; (800dbe8 <memp_malloc+0x40>)
 800dbc0:	480a      	ldr	r0, [pc, #40]	; (800dbec <memp_malloc+0x44>)
 800dbc2:	f00f fd85 	bl	801d6d0 <iprintf>
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	e008      	b.n	800dbdc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dbca:	79fb      	ldrb	r3, [r7, #7]
 800dbcc:	4a08      	ldr	r2, [pc, #32]	; (800dbf0 <memp_malloc+0x48>)
 800dbce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff ff94 	bl	800db00 <do_memp_malloc_pool>
 800dbd8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dbda:	68fb      	ldr	r3, [r7, #12]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3710      	adds	r7, #16
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	0801f6e8 	.word	0x0801f6e8
 800dbe8:	0801f778 	.word	0x0801f778
 800dbec:	0801f73c 	.word	0x0801f73c
 800dbf0:	08022278 	.word	0x08022278

0800dbf4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	f003 0303 	and.w	r3, r3, #3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d006      	beq.n	800dc16 <do_memp_free_pool+0x22>
 800dc08:	4b0d      	ldr	r3, [pc, #52]	; (800dc40 <do_memp_free_pool+0x4c>)
 800dc0a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dc0e:	490d      	ldr	r1, [pc, #52]	; (800dc44 <do_memp_free_pool+0x50>)
 800dc10:	480d      	ldr	r0, [pc, #52]	; (800dc48 <do_memp_free_pool+0x54>)
 800dc12:	f00f fd5d 	bl	801d6d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dc1a:	f00a fc51 	bl	80184c0 <sys_arch_protect>
 800dc1e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dc32:	68b8      	ldr	r0, [r7, #8]
 800dc34:	f00a fc52 	bl	80184dc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dc38:	bf00      	nop
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	0801f6e8 	.word	0x0801f6e8
 800dc44:	0801f798 	.word	0x0801f798
 800dc48:	0801f73c 	.word	0x0801f73c

0800dc4c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d106      	bne.n	800dc6a <memp_free_pool+0x1e>
 800dc5c:	4b0a      	ldr	r3, [pc, #40]	; (800dc88 <memp_free_pool+0x3c>)
 800dc5e:	f240 1295 	movw	r2, #405	; 0x195
 800dc62:	490a      	ldr	r1, [pc, #40]	; (800dc8c <memp_free_pool+0x40>)
 800dc64:	480a      	ldr	r0, [pc, #40]	; (800dc90 <memp_free_pool+0x44>)
 800dc66:	f00f fd33 	bl	801d6d0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d007      	beq.n	800dc80 <memp_free_pool+0x34>
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d004      	beq.n	800dc80 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff ffbb 	bl	800dbf4 <do_memp_free_pool>
 800dc7e:	e000      	b.n	800dc82 <memp_free_pool+0x36>
    return;
 800dc80:	bf00      	nop
}
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	0801f6e8 	.word	0x0801f6e8
 800dc8c:	0801f764 	.word	0x0801f764
 800dc90:	0801f73c 	.word	0x0801f73c

0800dc94 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	6039      	str	r1, [r7, #0]
 800dc9e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	2b0c      	cmp	r3, #12
 800dca4:	d907      	bls.n	800dcb6 <memp_free+0x22>
 800dca6:	4b0c      	ldr	r3, [pc, #48]	; (800dcd8 <memp_free+0x44>)
 800dca8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dcac:	490b      	ldr	r1, [pc, #44]	; (800dcdc <memp_free+0x48>)
 800dcae:	480c      	ldr	r0, [pc, #48]	; (800dce0 <memp_free+0x4c>)
 800dcb0:	f00f fd0e 	bl	801d6d0 <iprintf>
 800dcb4:	e00c      	b.n	800dcd0 <memp_free+0x3c>

  if (mem == NULL) {
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d008      	beq.n	800dcce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dcbc:	79fb      	ldrb	r3, [r7, #7]
 800dcbe:	4a09      	ldr	r2, [pc, #36]	; (800dce4 <memp_free+0x50>)
 800dcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7ff ff94 	bl	800dbf4 <do_memp_free_pool>
 800dccc:	e000      	b.n	800dcd0 <memp_free+0x3c>
    return;
 800dcce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	0801f6e8 	.word	0x0801f6e8
 800dcdc:	0801f7b8 	.word	0x0801f7b8
 800dce0:	0801f73c 	.word	0x0801f73c
 800dce4:	08022278 	.word	0x08022278

0800dce8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dcec:	bf00      	nop
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
 800dd04:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d108      	bne.n	800dd1e <netif_add+0x26>
 800dd0c:	4b57      	ldr	r3, [pc, #348]	; (800de6c <netif_add+0x174>)
 800dd0e:	f240 1227 	movw	r2, #295	; 0x127
 800dd12:	4957      	ldr	r1, [pc, #348]	; (800de70 <netif_add+0x178>)
 800dd14:	4857      	ldr	r0, [pc, #348]	; (800de74 <netif_add+0x17c>)
 800dd16:	f00f fcdb 	bl	801d6d0 <iprintf>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e0a2      	b.n	800de64 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d108      	bne.n	800dd36 <netif_add+0x3e>
 800dd24:	4b51      	ldr	r3, [pc, #324]	; (800de6c <netif_add+0x174>)
 800dd26:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dd2a:	4953      	ldr	r1, [pc, #332]	; (800de78 <netif_add+0x180>)
 800dd2c:	4851      	ldr	r0, [pc, #324]	; (800de74 <netif_add+0x17c>)
 800dd2e:	f00f fccf 	bl	801d6d0 <iprintf>
 800dd32:	2300      	movs	r3, #0
 800dd34:	e096      	b.n	800de64 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d101      	bne.n	800dd40 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dd3c:	4b4f      	ldr	r3, [pc, #316]	; (800de7c <netif_add+0x184>)
 800dd3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d101      	bne.n	800dd4a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dd46:	4b4d      	ldr	r3, [pc, #308]	; (800de7c <netif_add+0x184>)
 800dd48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dd50:	4b4a      	ldr	r3, [pc, #296]	; (800de7c <netif_add+0x184>)
 800dd52:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	4a45      	ldr	r2, [pc, #276]	; (800de80 <netif_add+0x188>)
 800dd6a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6a3a      	ldr	r2, [r7, #32]
 800dd84:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dd86:	4b3f      	ldr	r3, [pc, #252]	; (800de84 <netif_add+0x18c>)
 800dd88:	781a      	ldrb	r2, [r3, #0]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd94:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	f000 f913 	bl	800dfc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	4798      	blx	r3
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <netif_add+0xba>
    return NULL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e058      	b.n	800de64 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddb8:	2bff      	cmp	r3, #255	; 0xff
 800ddba:	d103      	bne.n	800ddc4 <netif_add+0xcc>
        netif->num = 0;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ddc8:	4b2f      	ldr	r3, [pc, #188]	; (800de88 <netif_add+0x190>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	617b      	str	r3, [r7, #20]
 800ddce:	e02b      	b.n	800de28 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ddd0:	697a      	ldr	r2, [r7, #20]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d106      	bne.n	800dde6 <netif_add+0xee>
 800ddd8:	4b24      	ldr	r3, [pc, #144]	; (800de6c <netif_add+0x174>)
 800ddda:	f240 128b 	movw	r2, #395	; 0x18b
 800ddde:	492b      	ldr	r1, [pc, #172]	; (800de8c <netif_add+0x194>)
 800dde0:	4824      	ldr	r0, [pc, #144]	; (800de74 <netif_add+0x17c>)
 800dde2:	f00f fc75 	bl	801d6d0 <iprintf>
        num_netifs++;
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	3301      	adds	r3, #1
 800ddea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	2bff      	cmp	r3, #255	; 0xff
 800ddf0:	dd06      	ble.n	800de00 <netif_add+0x108>
 800ddf2:	4b1e      	ldr	r3, [pc, #120]	; (800de6c <netif_add+0x174>)
 800ddf4:	f240 128d 	movw	r2, #397	; 0x18d
 800ddf8:	4925      	ldr	r1, [pc, #148]	; (800de90 <netif_add+0x198>)
 800ddfa:	481e      	ldr	r0, [pc, #120]	; (800de74 <netif_add+0x17c>)
 800ddfc:	f00f fc68 	bl	801d6d0 <iprintf>
        if (netif2->num == netif->num) {
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d108      	bne.n	800de22 <netif_add+0x12a>
          netif->num++;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de16:	3301      	adds	r3, #1
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800de20:	e005      	b.n	800de2e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	617b      	str	r3, [r7, #20]
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1d0      	bne.n	800ddd0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1be      	bne.n	800ddb2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de3a:	2bfe      	cmp	r3, #254	; 0xfe
 800de3c:	d103      	bne.n	800de46 <netif_add+0x14e>
    netif_num = 0;
 800de3e:	4b11      	ldr	r3, [pc, #68]	; (800de84 <netif_add+0x18c>)
 800de40:	2200      	movs	r2, #0
 800de42:	701a      	strb	r2, [r3, #0]
 800de44:	e006      	b.n	800de54 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de4c:	3301      	adds	r3, #1
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	4b0c      	ldr	r3, [pc, #48]	; (800de84 <netif_add+0x18c>)
 800de52:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800de54:	4b0c      	ldr	r3, [pc, #48]	; (800de88 <netif_add+0x190>)
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800de5c:	4a0a      	ldr	r2, [pc, #40]	; (800de88 <netif_add+0x190>)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800de62:	68fb      	ldr	r3, [r7, #12]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	0801f7d4 	.word	0x0801f7d4
 800de70:	0801f868 	.word	0x0801f868
 800de74:	0801f824 	.word	0x0801f824
 800de78:	0801f884 	.word	0x0801f884
 800de7c:	080222ec 	.word	0x080222ec
 800de80:	0800e2a3 	.word	0x0800e2a3
 800de84:	200113b8 	.word	0x200113b8
 800de88:	200113b0 	.word	0x200113b0
 800de8c:	0801f8a8 	.word	0x0801f8a8
 800de90:	0801f8bc 	.word	0x0801f8bc

0800de94 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800de9e:	6839      	ldr	r1, [r7, #0]
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f002 fe05 	bl	8010ab0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f007 fd25 	bl	80158f8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800deae:	bf00      	nop
 800deb0:	3708      	adds	r7, #8
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
	...

0800deb8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b086      	sub	sp, #24
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <netif_do_set_ipaddr+0x20>
 800deca:	4b1d      	ldr	r3, [pc, #116]	; (800df40 <netif_do_set_ipaddr+0x88>)
 800decc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ded0:	491c      	ldr	r1, [pc, #112]	; (800df44 <netif_do_set_ipaddr+0x8c>)
 800ded2:	481d      	ldr	r0, [pc, #116]	; (800df48 <netif_do_set_ipaddr+0x90>)
 800ded4:	f00f fbfc 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d106      	bne.n	800deec <netif_do_set_ipaddr+0x34>
 800dede:	4b18      	ldr	r3, [pc, #96]	; (800df40 <netif_do_set_ipaddr+0x88>)
 800dee0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dee4:	4917      	ldr	r1, [pc, #92]	; (800df44 <netif_do_set_ipaddr+0x8c>)
 800dee6:	4818      	ldr	r0, [pc, #96]	; (800df48 <netif_do_set_ipaddr+0x90>)
 800dee8:	f00f fbf2 	bl	801d6d0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	3304      	adds	r3, #4
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	429a      	cmp	r2, r3
 800def8:	d01c      	beq.n	800df34 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3304      	adds	r3, #4
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800df0a:	f107 0314 	add.w	r3, r7, #20
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff ffbf 	bl	800de94 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <netif_do_set_ipaddr+0x6a>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	e000      	b.n	800df24 <netif_do_set_ipaddr+0x6c>
 800df22:	2300      	movs	r3, #0
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800df28:	2101      	movs	r1, #1
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f000 f8d2 	bl	800e0d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800df30:	2301      	movs	r3, #1
 800df32:	e000      	b.n	800df36 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3718      	adds	r7, #24
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	0801f7d4 	.word	0x0801f7d4
 800df44:	0801f8ec 	.word	0x0801f8ec
 800df48:	0801f824 	.word	0x0801f824

0800df4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	681a      	ldr	r2, [r3, #0]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	3308      	adds	r3, #8
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	429a      	cmp	r2, r3
 800df64:	d00a      	beq.n	800df7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <netif_do_set_netmask+0x26>
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	e000      	b.n	800df74 <netif_do_set_netmask+0x28>
 800df72:	2300      	movs	r3, #0
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800df78:	2301      	movs	r3, #1
 800df7a:	e000      	b.n	800df7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800df8a:	b480      	push	{r7}
 800df8c:	b085      	sub	sp, #20
 800df8e:	af00      	add	r7, sp, #0
 800df90:	60f8      	str	r0, [r7, #12]
 800df92:	60b9      	str	r1, [r7, #8]
 800df94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	330c      	adds	r3, #12
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d00a      	beq.n	800dfba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <netif_do_set_gw+0x26>
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	e000      	b.n	800dfb2 <netif_do_set_gw+0x28>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e000      	b.n	800dfbc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3714      	adds	r7, #20
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b088      	sub	sp, #32
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dfe4:	4b1c      	ldr	r3, [pc, #112]	; (800e058 <netif_set_addr+0x90>)
 800dfe6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dfee:	4b1a      	ldr	r3, [pc, #104]	; (800e058 <netif_set_addr+0x90>)
 800dff0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dff8:	4b17      	ldr	r3, [pc, #92]	; (800e058 <netif_set_addr+0x90>)
 800dffa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d003      	beq.n	800e00a <netif_set_addr+0x42>
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <netif_set_addr+0x46>
 800e00a:	2301      	movs	r3, #1
 800e00c:	e000      	b.n	800e010 <netif_set_addr+0x48>
 800e00e:	2300      	movs	r3, #0
 800e010:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d006      	beq.n	800e026 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e018:	f107 0310 	add.w	r3, r7, #16
 800e01c:	461a      	mov	r2, r3
 800e01e:	68b9      	ldr	r1, [r7, #8]
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff ff49 	bl	800deb8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e026:	69fa      	ldr	r2, [r7, #28]
 800e028:	6879      	ldr	r1, [r7, #4]
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f7ff ff8e 	bl	800df4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e030:	69ba      	ldr	r2, [r7, #24]
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f7ff ffa8 	bl	800df8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d106      	bne.n	800e04e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e040:	f107 0310 	add.w	r3, r7, #16
 800e044:	461a      	mov	r2, r3
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f7ff ff35 	bl	800deb8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e04e:	bf00      	nop
 800e050:	3720      	adds	r7, #32
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	080222ec 	.word	0x080222ec

0800e05c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e064:	4a04      	ldr	r2, [pc, #16]	; (800e078 <netif_set_default+0x1c>)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e06a:	bf00      	nop
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	200113b4 	.word	0x200113b4

0800e07c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d107      	bne.n	800e09a <netif_set_up+0x1e>
 800e08a:	4b0f      	ldr	r3, [pc, #60]	; (800e0c8 <netif_set_up+0x4c>)
 800e08c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e090:	490e      	ldr	r1, [pc, #56]	; (800e0cc <netif_set_up+0x50>)
 800e092:	480f      	ldr	r0, [pc, #60]	; (800e0d0 <netif_set_up+0x54>)
 800e094:	f00f fb1c 	bl	801d6d0 <iprintf>
 800e098:	e013      	b.n	800e0c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0a0:	f003 0301 	and.w	r3, r3, #1
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10c      	bne.n	800e0c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0ae:	f043 0301 	orr.w	r3, r3, #1
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e0ba:	2103      	movs	r1, #3
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 f809 	bl	800e0d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	0801f7d4 	.word	0x0801f7d4
 800e0cc:	0801f95c 	.word	0x0801f95c
 800e0d0:	0801f824 	.word	0x0801f824

0800e0d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d106      	bne.n	800e0f4 <netif_issue_reports+0x20>
 800e0e6:	4b18      	ldr	r3, [pc, #96]	; (800e148 <netif_issue_reports+0x74>)
 800e0e8:	f240 326d 	movw	r2, #877	; 0x36d
 800e0ec:	4917      	ldr	r1, [pc, #92]	; (800e14c <netif_issue_reports+0x78>)
 800e0ee:	4818      	ldr	r0, [pc, #96]	; (800e150 <netif_issue_reports+0x7c>)
 800e0f0:	f00f faee 	bl	801d6d0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0fa:	f003 0304 	and.w	r3, r3, #4
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d01e      	beq.n	800e140 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e108:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d017      	beq.n	800e140 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e110:	78fb      	ldrb	r3, [r7, #3]
 800e112:	f003 0301 	and.w	r3, r3, #1
 800e116:	2b00      	cmp	r3, #0
 800e118:	d013      	beq.n	800e142 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	3304      	adds	r3, #4
 800e11e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00e      	beq.n	800e142 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e12a:	f003 0308 	and.w	r3, r3, #8
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d007      	beq.n	800e142 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	3304      	adds	r3, #4
 800e136:	4619      	mov	r1, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f008 fb47 	bl	80167cc <etharp_request>
 800e13e:	e000      	b.n	800e142 <netif_issue_reports+0x6e>
    return;
 800e140:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	0801f7d4 	.word	0x0801f7d4
 800e14c:	0801f978 	.word	0x0801f978
 800e150:	0801f824 	.word	0x0801f824

0800e154 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d107      	bne.n	800e172 <netif_set_down+0x1e>
 800e162:	4b12      	ldr	r3, [pc, #72]	; (800e1ac <netif_set_down+0x58>)
 800e164:	f240 329b 	movw	r2, #923	; 0x39b
 800e168:	4911      	ldr	r1, [pc, #68]	; (800e1b0 <netif_set_down+0x5c>)
 800e16a:	4812      	ldr	r0, [pc, #72]	; (800e1b4 <netif_set_down+0x60>)
 800e16c:	f00f fab0 	bl	801d6d0 <iprintf>
 800e170:	e019      	b.n	800e1a6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e178:	f003 0301 	and.w	r3, r3, #1
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d012      	beq.n	800e1a6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e186:	f023 0301 	bic.w	r3, r3, #1
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e198:	f003 0308 	and.w	r3, r3, #8
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d002      	beq.n	800e1a6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f007 fed1 	bl	8015f48 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	0801f7d4 	.word	0x0801f7d4
 800e1b0:	0801f99c 	.word	0x0801f99c
 800e1b4:	0801f824 	.word	0x0801f824

0800e1b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d107      	bne.n	800e1d6 <netif_set_link_up+0x1e>
 800e1c6:	4b13      	ldr	r3, [pc, #76]	; (800e214 <netif_set_link_up+0x5c>)
 800e1c8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e1cc:	4912      	ldr	r1, [pc, #72]	; (800e218 <netif_set_link_up+0x60>)
 800e1ce:	4813      	ldr	r0, [pc, #76]	; (800e21c <netif_set_link_up+0x64>)
 800e1d0:	f00f fa7e 	bl	801d6d0 <iprintf>
 800e1d4:	e01b      	b.n	800e20e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1dc:	f003 0304 	and.w	r3, r3, #4
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d114      	bne.n	800e20e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1ea:	f043 0304 	orr.w	r3, r3, #4
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e1f6:	2103      	movs	r1, #3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff ff6b 	bl	800e0d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	69db      	ldr	r3, [r3, #28]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <netif_set_link_up+0x56>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	69db      	ldr	r3, [r3, #28]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	0801f7d4 	.word	0x0801f7d4
 800e218:	0801f9bc 	.word	0x0801f9bc
 800e21c:	0801f824 	.word	0x0801f824

0800e220 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d107      	bne.n	800e23e <netif_set_link_down+0x1e>
 800e22e:	4b11      	ldr	r3, [pc, #68]	; (800e274 <netif_set_link_down+0x54>)
 800e230:	f240 4206 	movw	r2, #1030	; 0x406
 800e234:	4910      	ldr	r1, [pc, #64]	; (800e278 <netif_set_link_down+0x58>)
 800e236:	4811      	ldr	r0, [pc, #68]	; (800e27c <netif_set_link_down+0x5c>)
 800e238:	f00f fa4a 	bl	801d6d0 <iprintf>
 800e23c:	e017      	b.n	800e26e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e244:	f003 0304 	and.w	r3, r3, #4
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d010      	beq.n	800e26e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e252:	f023 0304 	bic.w	r3, r3, #4
 800e256:	b2da      	uxtb	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <netif_set_link_down+0x4e>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	69db      	ldr	r3, [r3, #28]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	0801f7d4 	.word	0x0801f7d4
 800e278:	0801f9e0 	.word	0x0801f9e0
 800e27c:	0801f824 	.word	0x0801f824

0800e280 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	683a      	ldr	r2, [r7, #0]
 800e294:	61da      	str	r2, [r3, #28]
  }
}
 800e296:	bf00      	nop
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e2a2:	b480      	push	{r7}
 800e2a4:	b085      	sub	sp, #20
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	60f8      	str	r0, [r7, #12]
 800e2aa:	60b9      	str	r1, [r7, #8]
 800e2ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e2ae:	f06f 030b 	mvn.w	r3, #11
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
	...

0800e2c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e2ca:	79fb      	ldrb	r3, [r7, #7]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d013      	beq.n	800e2f8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e2d0:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <netif_get_by_index+0x48>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	60fb      	str	r3, [r7, #12]
 800e2d6:	e00c      	b.n	800e2f2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2de:	3301      	adds	r3, #1
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	79fa      	ldrb	r2, [r7, #7]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d101      	bne.n	800e2ec <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	e006      	b.n	800e2fa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	60fb      	str	r3, [r7, #12]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1ef      	bne.n	800e2d8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	200113b0 	.word	0x200113b0

0800e30c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e312:	f00a f8d5 	bl	80184c0 <sys_arch_protect>
 800e316:	6038      	str	r0, [r7, #0]
 800e318:	4b0d      	ldr	r3, [pc, #52]	; (800e350 <pbuf_free_ooseq+0x44>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	701a      	strb	r2, [r3, #0]
 800e31e:	6838      	ldr	r0, [r7, #0]
 800e320:	f00a f8dc 	bl	80184dc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e324:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <pbuf_free_ooseq+0x48>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	607b      	str	r3, [r7, #4]
 800e32a:	e00a      	b.n	800e342 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e330:	2b00      	cmp	r3, #0
 800e332:	d003      	beq.n	800e33c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f002 fbf9 	bl	8010b2c <tcp_free_ooseq>
      return;
 800e33a:	e005      	b.n	800e348 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	607b      	str	r3, [r7, #4]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1f1      	bne.n	800e32c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	200113b9 	.word	0x200113b9
 800e354:	200113c8 	.word	0x200113c8

0800e358 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e360:	f7ff ffd4 	bl	800e30c <pbuf_free_ooseq>
}
 800e364:	bf00      	nop
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e372:	f00a f8a5 	bl	80184c0 <sys_arch_protect>
 800e376:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e378:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <pbuf_pool_is_empty+0x4c>)
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e37e:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <pbuf_pool_is_empty+0x4c>)
 800e380:	2201      	movs	r2, #1
 800e382:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f00a f8a9 	bl	80184dc <sys_arch_unprotect>

  if (!queued) {
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10f      	bne.n	800e3b0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e390:	2100      	movs	r1, #0
 800e392:	480a      	ldr	r0, [pc, #40]	; (800e3bc <pbuf_pool_is_empty+0x50>)
 800e394:	f7fe fe80 	bl	800d098 <tcpip_try_callback>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d008      	beq.n	800e3b0 <pbuf_pool_is_empty+0x44>
 800e39e:	f00a f88f 	bl	80184c0 <sys_arch_protect>
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	4b04      	ldr	r3, [pc, #16]	; (800e3b8 <pbuf_pool_is_empty+0x4c>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	701a      	strb	r2, [r3, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f00a f896 	bl	80184dc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e3b0:	bf00      	nop
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	200113b9 	.word	0x200113b9
 800e3bc:	0800e359 	.word	0x0800e359

0800e3c0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	80fb      	strh	r3, [r7, #6]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	68ba      	ldr	r2, [r7, #8]
 800e3e0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	88fa      	ldrh	r2, [r7, #6]
 800e3e6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	88ba      	ldrh	r2, [r7, #4]
 800e3ec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e3ee:	8b3b      	ldrh	r3, [r7, #24]
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	7f3a      	ldrb	r2, [r7, #28]
 800e3fa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2201      	movs	r2, #1
 800e400:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	73da      	strb	r2, [r3, #15]
}
 800e408:	bf00      	nop
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08c      	sub	sp, #48	; 0x30
 800e418:	af02      	add	r7, sp, #8
 800e41a:	4603      	mov	r3, r0
 800e41c:	71fb      	strb	r3, [r7, #7]
 800e41e:	460b      	mov	r3, r1
 800e420:	80bb      	strh	r3, [r7, #4]
 800e422:	4613      	mov	r3, r2
 800e424:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e426:	79fb      	ldrb	r3, [r7, #7]
 800e428:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e42a:	887b      	ldrh	r3, [r7, #2]
 800e42c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e430:	d07f      	beq.n	800e532 <pbuf_alloc+0x11e>
 800e432:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e436:	f300 80c8 	bgt.w	800e5ca <pbuf_alloc+0x1b6>
 800e43a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e43e:	d010      	beq.n	800e462 <pbuf_alloc+0x4e>
 800e440:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e444:	f300 80c1 	bgt.w	800e5ca <pbuf_alloc+0x1b6>
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d002      	beq.n	800e452 <pbuf_alloc+0x3e>
 800e44c:	2b41      	cmp	r3, #65	; 0x41
 800e44e:	f040 80bc 	bne.w	800e5ca <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e452:	887a      	ldrh	r2, [r7, #2]
 800e454:	88bb      	ldrh	r3, [r7, #4]
 800e456:	4619      	mov	r1, r3
 800e458:	2000      	movs	r0, #0
 800e45a:	f000 f8d1 	bl	800e600 <pbuf_alloc_reference>
 800e45e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e460:	e0bd      	b.n	800e5de <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e462:	2300      	movs	r3, #0
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e466:	2300      	movs	r3, #0
 800e468:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e46a:	88bb      	ldrh	r3, [r7, #4]
 800e46c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e46e:	200c      	movs	r0, #12
 800e470:	f7ff fb9a 	bl	800dba8 <memp_malloc>
 800e474:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d109      	bne.n	800e490 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e47c:	f7ff ff76 	bl	800e36c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <pbuf_alloc+0x78>
            pbuf_free(p);
 800e486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e488:	f000 faa8 	bl	800e9dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e0a7      	b.n	800e5e0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e490:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e492:	3303      	adds	r3, #3
 800e494:	b29b      	uxth	r3, r3
 800e496:	f023 0303 	bic.w	r3, r3, #3
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	8b7a      	ldrh	r2, [r7, #26]
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	bf28      	it	cs
 800e4a8:	4613      	movcs	r3, r2
 800e4aa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e4ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4ae:	3310      	adds	r3, #16
 800e4b0:	693a      	ldr	r2, [r7, #16]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	3303      	adds	r3, #3
 800e4b6:	f023 0303 	bic.w	r3, r3, #3
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	89f9      	ldrh	r1, [r7, #14]
 800e4be:	8b7a      	ldrh	r2, [r7, #26]
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	9301      	str	r3, [sp, #4]
 800e4c4:	887b      	ldrh	r3, [r7, #2]
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	4601      	mov	r1, r0
 800e4cc:	6938      	ldr	r0, [r7, #16]
 800e4ce:	f7ff ff77 	bl	800e3c0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	f003 0303 	and.w	r3, r3, #3
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d006      	beq.n	800e4ec <pbuf_alloc+0xd8>
 800e4de:	4b42      	ldr	r3, [pc, #264]	; (800e5e8 <pbuf_alloc+0x1d4>)
 800e4e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4e4:	4941      	ldr	r1, [pc, #260]	; (800e5ec <pbuf_alloc+0x1d8>)
 800e4e6:	4842      	ldr	r0, [pc, #264]	; (800e5f0 <pbuf_alloc+0x1dc>)
 800e4e8:	f00f f8f2 	bl	801d6d0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e4ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4ee:	3303      	adds	r3, #3
 800e4f0:	f023 0303 	bic.w	r3, r3, #3
 800e4f4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e4f8:	d106      	bne.n	800e508 <pbuf_alloc+0xf4>
 800e4fa:	4b3b      	ldr	r3, [pc, #236]	; (800e5e8 <pbuf_alloc+0x1d4>)
 800e4fc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e500:	493c      	ldr	r1, [pc, #240]	; (800e5f4 <pbuf_alloc+0x1e0>)
 800e502:	483b      	ldr	r0, [pc, #236]	; (800e5f0 <pbuf_alloc+0x1dc>)
 800e504:	f00f f8e4 	bl	801d6d0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d102      	bne.n	800e514 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	627b      	str	r3, [r7, #36]	; 0x24
 800e512:	e002      	b.n	800e51a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	693a      	ldr	r2, [r7, #16]
 800e518:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e51e:	8b7a      	ldrh	r2, [r7, #26]
 800e520:	89fb      	ldrh	r3, [r7, #14]
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e526:	2300      	movs	r3, #0
 800e528:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e52a:	8b7b      	ldrh	r3, [r7, #26]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d19e      	bne.n	800e46e <pbuf_alloc+0x5a>
      break;
 800e530:	e055      	b.n	800e5de <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e534:	3303      	adds	r3, #3
 800e536:	b29b      	uxth	r3, r3
 800e538:	f023 0303 	bic.w	r3, r3, #3
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	88bb      	ldrh	r3, [r7, #4]
 800e540:	3303      	adds	r3, #3
 800e542:	b29b      	uxth	r3, r3
 800e544:	f023 0303 	bic.w	r3, r3, #3
 800e548:	b29b      	uxth	r3, r3
 800e54a:	4413      	add	r3, r2
 800e54c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e54e:	8b3b      	ldrh	r3, [r7, #24]
 800e550:	3310      	adds	r3, #16
 800e552:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e554:	8b3a      	ldrh	r2, [r7, #24]
 800e556:	88bb      	ldrh	r3, [r7, #4]
 800e558:	3303      	adds	r3, #3
 800e55a:	f023 0303 	bic.w	r3, r3, #3
 800e55e:	429a      	cmp	r2, r3
 800e560:	d306      	bcc.n	800e570 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e562:	8afa      	ldrh	r2, [r7, #22]
 800e564:	88bb      	ldrh	r3, [r7, #4]
 800e566:	3303      	adds	r3, #3
 800e568:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d201      	bcs.n	800e574 <pbuf_alloc+0x160>
        return NULL;
 800e570:	2300      	movs	r3, #0
 800e572:	e035      	b.n	800e5e0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e574:	8afb      	ldrh	r3, [r7, #22]
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff f96e 	bl	800d858 <mem_malloc>
 800e57c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <pbuf_alloc+0x174>
        return NULL;
 800e584:	2300      	movs	r3, #0
 800e586:	e02b      	b.n	800e5e0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e58a:	3310      	adds	r3, #16
 800e58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e58e:	4413      	add	r3, r2
 800e590:	3303      	adds	r3, #3
 800e592:	f023 0303 	bic.w	r3, r3, #3
 800e596:	4618      	mov	r0, r3
 800e598:	88b9      	ldrh	r1, [r7, #4]
 800e59a:	88ba      	ldrh	r2, [r7, #4]
 800e59c:	2300      	movs	r3, #0
 800e59e:	9301      	str	r3, [sp, #4]
 800e5a0:	887b      	ldrh	r3, [r7, #2]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5aa:	f7ff ff09 	bl	800e3c0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	f003 0303 	and.w	r3, r3, #3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d010      	beq.n	800e5dc <pbuf_alloc+0x1c8>
 800e5ba:	4b0b      	ldr	r3, [pc, #44]	; (800e5e8 <pbuf_alloc+0x1d4>)
 800e5bc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e5c0:	490d      	ldr	r1, [pc, #52]	; (800e5f8 <pbuf_alloc+0x1e4>)
 800e5c2:	480b      	ldr	r0, [pc, #44]	; (800e5f0 <pbuf_alloc+0x1dc>)
 800e5c4:	f00f f884 	bl	801d6d0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e5c8:	e008      	b.n	800e5dc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e5ca:	4b07      	ldr	r3, [pc, #28]	; (800e5e8 <pbuf_alloc+0x1d4>)
 800e5cc:	f240 1227 	movw	r2, #295	; 0x127
 800e5d0:	490a      	ldr	r1, [pc, #40]	; (800e5fc <pbuf_alloc+0x1e8>)
 800e5d2:	4807      	ldr	r0, [pc, #28]	; (800e5f0 <pbuf_alloc+0x1dc>)
 800e5d4:	f00f f87c 	bl	801d6d0 <iprintf>
      return NULL;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	e001      	b.n	800e5e0 <pbuf_alloc+0x1cc>
      break;
 800e5dc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3728      	adds	r7, #40	; 0x28
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	0801fa04 	.word	0x0801fa04
 800e5ec:	0801fa34 	.word	0x0801fa34
 800e5f0:	0801fa64 	.word	0x0801fa64
 800e5f4:	0801fa8c 	.word	0x0801fa8c
 800e5f8:	0801fac0 	.word	0x0801fac0
 800e5fc:	0801faec 	.word	0x0801faec

0800e600 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af02      	add	r7, sp, #8
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	807b      	strh	r3, [r7, #2]
 800e60c:	4613      	mov	r3, r2
 800e60e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e610:	883b      	ldrh	r3, [r7, #0]
 800e612:	2b41      	cmp	r3, #65	; 0x41
 800e614:	d009      	beq.n	800e62a <pbuf_alloc_reference+0x2a>
 800e616:	883b      	ldrh	r3, [r7, #0]
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d006      	beq.n	800e62a <pbuf_alloc_reference+0x2a>
 800e61c:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <pbuf_alloc_reference+0x5c>)
 800e61e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e622:	490f      	ldr	r1, [pc, #60]	; (800e660 <pbuf_alloc_reference+0x60>)
 800e624:	480f      	ldr	r0, [pc, #60]	; (800e664 <pbuf_alloc_reference+0x64>)
 800e626:	f00f f853 	bl	801d6d0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e62a:	200b      	movs	r0, #11
 800e62c:	f7ff fabc 	bl	800dba8 <memp_malloc>
 800e630:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e638:	2300      	movs	r3, #0
 800e63a:	e00b      	b.n	800e654 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e63c:	8879      	ldrh	r1, [r7, #2]
 800e63e:	887a      	ldrh	r2, [r7, #2]
 800e640:	2300      	movs	r3, #0
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	883b      	ldrh	r3, [r7, #0]
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	460b      	mov	r3, r1
 800e64a:	6879      	ldr	r1, [r7, #4]
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f7ff feb7 	bl	800e3c0 <pbuf_init_alloced_pbuf>
  return p;
 800e652:	68fb      	ldr	r3, [r7, #12]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	0801fa04 	.word	0x0801fa04
 800e660:	0801fb08 	.word	0x0801fb08
 800e664:	0801fa64 	.word	0x0801fa64

0800e668 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b088      	sub	sp, #32
 800e66c:	af02      	add	r7, sp, #8
 800e66e:	607b      	str	r3, [r7, #4]
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]
 800e674:	460b      	mov	r3, r1
 800e676:	81bb      	strh	r3, [r7, #12]
 800e678:	4613      	mov	r3, r2
 800e67a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e67c:	7bfb      	ldrb	r3, [r7, #15]
 800e67e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e680:	8a7b      	ldrh	r3, [r7, #18]
 800e682:	3303      	adds	r3, #3
 800e684:	f023 0203 	bic.w	r2, r3, #3
 800e688:	89bb      	ldrh	r3, [r7, #12]
 800e68a:	441a      	add	r2, r3
 800e68c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e68e:	429a      	cmp	r2, r3
 800e690:	d901      	bls.n	800e696 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e692:	2300      	movs	r3, #0
 800e694:	e018      	b.n	800e6c8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d007      	beq.n	800e6ac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e69c:	8a7b      	ldrh	r3, [r7, #18]
 800e69e:	3303      	adds	r3, #3
 800e6a0:	f023 0303 	bic.w	r3, r3, #3
 800e6a4:	6a3a      	ldr	r2, [r7, #32]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	617b      	str	r3, [r7, #20]
 800e6aa:	e001      	b.n	800e6b0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	89b9      	ldrh	r1, [r7, #12]
 800e6b4:	89ba      	ldrh	r2, [r7, #12]
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	9301      	str	r3, [sp, #4]
 800e6ba:	897b      	ldrh	r3, [r7, #10]
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	460b      	mov	r3, r1
 800e6c0:	6979      	ldr	r1, [r7, #20]
 800e6c2:	f7ff fe7d 	bl	800e3c0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e6c6:	687b      	ldr	r3, [r7, #4]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d106      	bne.n	800e6f0 <pbuf_realloc+0x20>
 800e6e2:	4b3a      	ldr	r3, [pc, #232]	; (800e7cc <pbuf_realloc+0xfc>)
 800e6e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e6e8:	4939      	ldr	r1, [pc, #228]	; (800e7d0 <pbuf_realloc+0x100>)
 800e6ea:	483a      	ldr	r0, [pc, #232]	; (800e7d4 <pbuf_realloc+0x104>)
 800e6ec:	f00e fff0 	bl	801d6d0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	891b      	ldrh	r3, [r3, #8]
 800e6f4:	887a      	ldrh	r2, [r7, #2]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d263      	bcs.n	800e7c2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	891a      	ldrh	r2, [r3, #8]
 800e6fe:	887b      	ldrh	r3, [r7, #2]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e704:	887b      	ldrh	r3, [r7, #2]
 800e706:	817b      	strh	r3, [r7, #10]
  q = p;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e70c:	e018      	b.n	800e740 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	895b      	ldrh	r3, [r3, #10]
 800e712:	897a      	ldrh	r2, [r7, #10]
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	891a      	ldrh	r2, [r3, #8]
 800e71c:	893b      	ldrh	r3, [r7, #8]
 800e71e:	1ad3      	subs	r3, r2, r3
 800e720:	b29a      	uxth	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d106      	bne.n	800e740 <pbuf_realloc+0x70>
 800e732:	4b26      	ldr	r3, [pc, #152]	; (800e7cc <pbuf_realloc+0xfc>)
 800e734:	f240 12af 	movw	r2, #431	; 0x1af
 800e738:	4927      	ldr	r1, [pc, #156]	; (800e7d8 <pbuf_realloc+0x108>)
 800e73a:	4826      	ldr	r0, [pc, #152]	; (800e7d4 <pbuf_realloc+0x104>)
 800e73c:	f00e ffc8 	bl	801d6d0 <iprintf>
  while (rem_len > q->len) {
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	895b      	ldrh	r3, [r3, #10]
 800e744:	897a      	ldrh	r2, [r7, #10]
 800e746:	429a      	cmp	r2, r3
 800e748:	d8e1      	bhi.n	800e70e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	7b1b      	ldrb	r3, [r3, #12]
 800e74e:	f003 030f 	and.w	r3, r3, #15
 800e752:	2b00      	cmp	r3, #0
 800e754:	d121      	bne.n	800e79a <pbuf_realloc+0xca>
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	895b      	ldrh	r3, [r3, #10]
 800e75a:	897a      	ldrh	r2, [r7, #10]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d01c      	beq.n	800e79a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	7b5b      	ldrb	r3, [r3, #13]
 800e764:	f003 0302 	and.w	r3, r3, #2
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d116      	bne.n	800e79a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	b29a      	uxth	r2, r3
 800e776:	897b      	ldrh	r3, [r7, #10]
 800e778:	4413      	add	r3, r2
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	4619      	mov	r1, r3
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f7fe ff5a 	bl	800d638 <mem_trim>
 800e784:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d106      	bne.n	800e79a <pbuf_realloc+0xca>
 800e78c:	4b0f      	ldr	r3, [pc, #60]	; (800e7cc <pbuf_realloc+0xfc>)
 800e78e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e792:	4912      	ldr	r1, [pc, #72]	; (800e7dc <pbuf_realloc+0x10c>)
 800e794:	480f      	ldr	r0, [pc, #60]	; (800e7d4 <pbuf_realloc+0x104>)
 800e796:	f00e ff9b 	bl	801d6d0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	897a      	ldrh	r2, [r7, #10]
 800e79e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	895a      	ldrh	r2, [r3, #10]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d004      	beq.n	800e7ba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f000 f911 	bl	800e9dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	601a      	str	r2, [r3, #0]
 800e7c0:	e000      	b.n	800e7c4 <pbuf_realloc+0xf4>
    return;
 800e7c2:	bf00      	nop

}
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	0801fa04 	.word	0x0801fa04
 800e7d0:	0801fb1c 	.word	0x0801fb1c
 800e7d4:	0801fa64 	.word	0x0801fa64
 800e7d8:	0801fb34 	.word	0x0801fb34
 800e7dc:	0801fb4c 	.word	0x0801fb4c

0800e7e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d106      	bne.n	800e802 <pbuf_add_header_impl+0x22>
 800e7f4:	4b2b      	ldr	r3, [pc, #172]	; (800e8a4 <pbuf_add_header_impl+0xc4>)
 800e7f6:	f240 12df 	movw	r2, #479	; 0x1df
 800e7fa:	492b      	ldr	r1, [pc, #172]	; (800e8a8 <pbuf_add_header_impl+0xc8>)
 800e7fc:	482b      	ldr	r0, [pc, #172]	; (800e8ac <pbuf_add_header_impl+0xcc>)
 800e7fe:	f00e ff67 	bl	801d6d0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <pbuf_add_header_impl+0x30>
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e80e:	d301      	bcc.n	800e814 <pbuf_add_header_impl+0x34>
    return 1;
 800e810:	2301      	movs	r3, #1
 800e812:	e043      	b.n	800e89c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d101      	bne.n	800e81e <pbuf_add_header_impl+0x3e>
    return 0;
 800e81a:	2300      	movs	r3, #0
 800e81c:	e03e      	b.n	800e89c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	891a      	ldrh	r2, [r3, #8]
 800e826:	8a7b      	ldrh	r3, [r7, #18]
 800e828:	4413      	add	r3, r2
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	8a7a      	ldrh	r2, [r7, #18]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d901      	bls.n	800e836 <pbuf_add_header_impl+0x56>
    return 1;
 800e832:	2301      	movs	r3, #1
 800e834:	e032      	b.n	800e89c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	7b1b      	ldrb	r3, [r3, #12]
 800e83a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e83c:	8a3b      	ldrh	r3, [r7, #16]
 800e83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00c      	beq.n	800e860 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	425b      	negs	r3, r3
 800e84e:	4413      	add	r3, r2
 800e850:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3310      	adds	r3, #16
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d20d      	bcs.n	800e878 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e85c:	2301      	movs	r3, #1
 800e85e:	e01d      	b.n	800e89c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e860:	79fb      	ldrb	r3, [r7, #7]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d006      	beq.n	800e874 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	685a      	ldr	r2, [r3, #4]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	425b      	negs	r3, r3
 800e86e:	4413      	add	r3, r2
 800e870:	617b      	str	r3, [r7, #20]
 800e872:	e001      	b.n	800e878 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e874:	2301      	movs	r3, #1
 800e876:	e011      	b.n	800e89c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	697a      	ldr	r2, [r7, #20]
 800e87c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	895a      	ldrh	r2, [r3, #10]
 800e882:	8a7b      	ldrh	r3, [r7, #18]
 800e884:	4413      	add	r3, r2
 800e886:	b29a      	uxth	r2, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	891a      	ldrh	r2, [r3, #8]
 800e890:	8a7b      	ldrh	r3, [r7, #18]
 800e892:	4413      	add	r3, r2
 800e894:	b29a      	uxth	r2, r3
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	811a      	strh	r2, [r3, #8]


  return 0;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3718      	adds	r7, #24
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	0801fa04 	.word	0x0801fa04
 800e8a8:	0801fb68 	.word	0x0801fb68
 800e8ac:	0801fa64 	.word	0x0801fa64

0800e8b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7ff ff8e 	bl	800e7e0 <pbuf_add_header_impl>
 800e8c4:	4603      	mov	r3, r0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
	...

0800e8d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d106      	bne.n	800e8ee <pbuf_remove_header+0x1e>
 800e8e0:	4b20      	ldr	r3, [pc, #128]	; (800e964 <pbuf_remove_header+0x94>)
 800e8e2:	f240 224b 	movw	r2, #587	; 0x24b
 800e8e6:	4920      	ldr	r1, [pc, #128]	; (800e968 <pbuf_remove_header+0x98>)
 800e8e8:	4820      	ldr	r0, [pc, #128]	; (800e96c <pbuf_remove_header+0x9c>)
 800e8ea:	f00e fef1 	bl	801d6d0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d003      	beq.n	800e8fc <pbuf_remove_header+0x2c>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8fa:	d301      	bcc.n	800e900 <pbuf_remove_header+0x30>
    return 1;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	e02c      	b.n	800e95a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <pbuf_remove_header+0x3a>
    return 0;
 800e906:	2300      	movs	r3, #0
 800e908:	e027      	b.n	800e95a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	895b      	ldrh	r3, [r3, #10]
 800e912:	89fa      	ldrh	r2, [r7, #14]
 800e914:	429a      	cmp	r2, r3
 800e916:	d908      	bls.n	800e92a <pbuf_remove_header+0x5a>
 800e918:	4b12      	ldr	r3, [pc, #72]	; (800e964 <pbuf_remove_header+0x94>)
 800e91a:	f240 2255 	movw	r2, #597	; 0x255
 800e91e:	4914      	ldr	r1, [pc, #80]	; (800e970 <pbuf_remove_header+0xa0>)
 800e920:	4812      	ldr	r0, [pc, #72]	; (800e96c <pbuf_remove_header+0x9c>)
 800e922:	f00e fed5 	bl	801d6d0 <iprintf>
 800e926:	2301      	movs	r3, #1
 800e928:	e017      	b.n	800e95a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	685a      	ldr	r2, [r3, #4]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	441a      	add	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	895a      	ldrh	r2, [r3, #10]
 800e940:	89fb      	ldrh	r3, [r7, #14]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	b29a      	uxth	r2, r3
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	891a      	ldrh	r2, [r3, #8]
 800e94e:	89fb      	ldrh	r3, [r7, #14]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	b29a      	uxth	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	0801fa04 	.word	0x0801fa04
 800e968:	0801fb68 	.word	0x0801fb68
 800e96c:	0801fa64 	.word	0x0801fa64
 800e970:	0801fb74 	.word	0x0801fb74

0800e974 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	807b      	strh	r3, [r7, #2]
 800e980:	4613      	mov	r3, r2
 800e982:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	da08      	bge.n	800e99e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e98c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e990:	425b      	negs	r3, r3
 800e992:	4619      	mov	r1, r3
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7ff ff9b 	bl	800e8d0 <pbuf_remove_header>
 800e99a:	4603      	mov	r3, r0
 800e99c:	e007      	b.n	800e9ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e99e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9a2:	787a      	ldrb	r2, [r7, #1]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f7ff ff1a 	bl	800e7e0 <pbuf_add_header_impl>
 800e9ac:	4603      	mov	r3, r0
  }
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3708      	adds	r7, #8
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e9c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f7ff ffd2 	bl	800e974 <pbuf_header_impl>
 800e9d0:	4603      	mov	r3, r0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
	...

0800e9dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b088      	sub	sp, #32
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10b      	bne.n	800ea02 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d106      	bne.n	800e9fe <pbuf_free+0x22>
 800e9f0:	4b3b      	ldr	r3, [pc, #236]	; (800eae0 <pbuf_free+0x104>)
 800e9f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e9f6:	493b      	ldr	r1, [pc, #236]	; (800eae4 <pbuf_free+0x108>)
 800e9f8:	483b      	ldr	r0, [pc, #236]	; (800eae8 <pbuf_free+0x10c>)
 800e9fa:	f00e fe69 	bl	801d6d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	e069      	b.n	800ead6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ea06:	e062      	b.n	800eace <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ea08:	f009 fd5a 	bl	80184c0 <sys_arch_protect>
 800ea0c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	7b9b      	ldrb	r3, [r3, #14]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <pbuf_free+0x48>
 800ea16:	4b32      	ldr	r3, [pc, #200]	; (800eae0 <pbuf_free+0x104>)
 800ea18:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ea1c:	4933      	ldr	r1, [pc, #204]	; (800eaec <pbuf_free+0x110>)
 800ea1e:	4832      	ldr	r0, [pc, #200]	; (800eae8 <pbuf_free+0x10c>)
 800ea20:	f00e fe56 	bl	801d6d0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	7b9b      	ldrb	r3, [r3, #14]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	739a      	strb	r2, [r3, #14]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7b9b      	ldrb	r3, [r3, #14]
 800ea34:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ea36:	69b8      	ldr	r0, [r7, #24]
 800ea38:	f009 fd50 	bl	80184dc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ea3c:	7dfb      	ldrb	r3, [r7, #23]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d143      	bne.n	800eaca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	7b1b      	ldrb	r3, [r3, #12]
 800ea4c:	f003 030f 	and.w	r3, r3, #15
 800ea50:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7b5b      	ldrb	r3, [r3, #13]
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d011      	beq.n	800ea82 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	691b      	ldr	r3, [r3, #16]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d106      	bne.n	800ea78 <pbuf_free+0x9c>
 800ea6a:	4b1d      	ldr	r3, [pc, #116]	; (800eae0 <pbuf_free+0x104>)
 800ea6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ea70:	491f      	ldr	r1, [pc, #124]	; (800eaf0 <pbuf_free+0x114>)
 800ea72:	481d      	ldr	r0, [pc, #116]	; (800eae8 <pbuf_free+0x10c>)
 800ea74:	f00e fe2c 	bl	801d6d0 <iprintf>
        pc->custom_free_function(p);
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	691b      	ldr	r3, [r3, #16]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	4798      	blx	r3
 800ea80:	e01d      	b.n	800eabe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d104      	bne.n	800ea92 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ea88:	6879      	ldr	r1, [r7, #4]
 800ea8a:	200c      	movs	r0, #12
 800ea8c:	f7ff f902 	bl	800dc94 <memp_free>
 800ea90:	e015      	b.n	800eabe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ea92:	7bfb      	ldrb	r3, [r7, #15]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d104      	bne.n	800eaa2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	200b      	movs	r0, #11
 800ea9c:	f7ff f8fa 	bl	800dc94 <memp_free>
 800eaa0:	e00d      	b.n	800eabe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800eaa2:	7bfb      	ldrb	r3, [r7, #15]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d103      	bne.n	800eab0 <pbuf_free+0xd4>
          mem_free(p);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7fe fd35 	bl	800d518 <mem_free>
 800eaae:	e006      	b.n	800eabe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800eab0:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <pbuf_free+0x104>)
 800eab2:	f240 320f 	movw	r2, #783	; 0x30f
 800eab6:	490f      	ldr	r1, [pc, #60]	; (800eaf4 <pbuf_free+0x118>)
 800eab8:	480b      	ldr	r0, [pc, #44]	; (800eae8 <pbuf_free+0x10c>)
 800eaba:	f00e fe09 	bl	801d6d0 <iprintf>
        }
      }
      count++;
 800eabe:	7ffb      	ldrb	r3, [r7, #31]
 800eac0:	3301      	adds	r3, #1
 800eac2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	607b      	str	r3, [r7, #4]
 800eac8:	e001      	b.n	800eace <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d199      	bne.n	800ea08 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ead4:	7ffb      	ldrb	r3, [r7, #31]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3720      	adds	r7, #32
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	0801fa04 	.word	0x0801fa04
 800eae4:	0801fb68 	.word	0x0801fb68
 800eae8:	0801fa64 	.word	0x0801fa64
 800eaec:	0801fb94 	.word	0x0801fb94
 800eaf0:	0801fbac 	.word	0x0801fbac
 800eaf4:	0801fbd0 	.word	0x0801fbd0

0800eaf8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eb00:	2300      	movs	r3, #0
 800eb02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eb04:	e005      	b.n	800eb12 <pbuf_clen+0x1a>
    ++len;
 800eb06:	89fb      	ldrh	r3, [r7, #14]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1f6      	bne.n	800eb06 <pbuf_clen+0xe>
  }
  return len;
 800eb18:	89fb      	ldrh	r3, [r7, #14]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3714      	adds	r7, #20
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr
	...

0800eb28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d016      	beq.n	800eb64 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800eb36:	f009 fcc3 	bl	80184c0 <sys_arch_protect>
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	7b9b      	ldrb	r3, [r3, #14]
 800eb40:	3301      	adds	r3, #1
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	739a      	strb	r2, [r3, #14]
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f009 fcc7 	bl	80184dc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	7b9b      	ldrb	r3, [r3, #14]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d106      	bne.n	800eb64 <pbuf_ref+0x3c>
 800eb56:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <pbuf_ref+0x44>)
 800eb58:	f240 3242 	movw	r2, #834	; 0x342
 800eb5c:	4904      	ldr	r1, [pc, #16]	; (800eb70 <pbuf_ref+0x48>)
 800eb5e:	4805      	ldr	r0, [pc, #20]	; (800eb74 <pbuf_ref+0x4c>)
 800eb60:	f00e fdb6 	bl	801d6d0 <iprintf>
  }
}
 800eb64:	bf00      	nop
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	0801fa04 	.word	0x0801fa04
 800eb70:	0801fbe4 	.word	0x0801fbe4
 800eb74:	0801fa64 	.word	0x0801fa64

0800eb78 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <pbuf_cat+0x16>
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d107      	bne.n	800eb9e <pbuf_cat+0x26>
 800eb8e:	4b20      	ldr	r3, [pc, #128]	; (800ec10 <pbuf_cat+0x98>)
 800eb90:	f240 3259 	movw	r2, #857	; 0x359
 800eb94:	491f      	ldr	r1, [pc, #124]	; (800ec14 <pbuf_cat+0x9c>)
 800eb96:	4820      	ldr	r0, [pc, #128]	; (800ec18 <pbuf_cat+0xa0>)
 800eb98:	f00e fd9a 	bl	801d6d0 <iprintf>
 800eb9c:	e034      	b.n	800ec08 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	e00a      	b.n	800ebba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	891a      	ldrh	r2, [r3, #8]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	891b      	ldrh	r3, [r3, #8]
 800ebac:	4413      	add	r3, r2
 800ebae:	b29a      	uxth	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	60fb      	str	r3, [r7, #12]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1f0      	bne.n	800eba4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	891a      	ldrh	r2, [r3, #8]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	895b      	ldrh	r3, [r3, #10]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d006      	beq.n	800ebdc <pbuf_cat+0x64>
 800ebce:	4b10      	ldr	r3, [pc, #64]	; (800ec10 <pbuf_cat+0x98>)
 800ebd0:	f240 3262 	movw	r2, #866	; 0x362
 800ebd4:	4911      	ldr	r1, [pc, #68]	; (800ec1c <pbuf_cat+0xa4>)
 800ebd6:	4810      	ldr	r0, [pc, #64]	; (800ec18 <pbuf_cat+0xa0>)
 800ebd8:	f00e fd7a 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d006      	beq.n	800ebf2 <pbuf_cat+0x7a>
 800ebe4:	4b0a      	ldr	r3, [pc, #40]	; (800ec10 <pbuf_cat+0x98>)
 800ebe6:	f240 3263 	movw	r2, #867	; 0x363
 800ebea:	490d      	ldr	r1, [pc, #52]	; (800ec20 <pbuf_cat+0xa8>)
 800ebec:	480a      	ldr	r0, [pc, #40]	; (800ec18 <pbuf_cat+0xa0>)
 800ebee:	f00e fd6f 	bl	801d6d0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	891a      	ldrh	r2, [r3, #8]
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	891b      	ldrh	r3, [r3, #8]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	0801fa04 	.word	0x0801fa04
 800ec14:	0801fbf8 	.word	0x0801fbf8
 800ec18:	0801fa64 	.word	0x0801fa64
 800ec1c:	0801fc30 	.word	0x0801fc30
 800ec20:	0801fc60 	.word	0x0801fc60

0800ec24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b086      	sub	sp, #24
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	2300      	movs	r3, #0
 800ec34:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d008      	beq.n	800ec4e <pbuf_copy+0x2a>
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d005      	beq.n	800ec4e <pbuf_copy+0x2a>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	891a      	ldrh	r2, [r3, #8]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	891b      	ldrh	r3, [r3, #8]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d209      	bcs.n	800ec62 <pbuf_copy+0x3e>
 800ec4e:	4b57      	ldr	r3, [pc, #348]	; (800edac <pbuf_copy+0x188>)
 800ec50:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ec54:	4956      	ldr	r1, [pc, #344]	; (800edb0 <pbuf_copy+0x18c>)
 800ec56:	4857      	ldr	r0, [pc, #348]	; (800edb4 <pbuf_copy+0x190>)
 800ec58:	f00e fd3a 	bl	801d6d0 <iprintf>
 800ec5c:	f06f 030f 	mvn.w	r3, #15
 800ec60:	e09f      	b.n	800eda2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	895b      	ldrh	r3, [r3, #10]
 800ec66:	461a      	mov	r2, r3
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	1ad2      	subs	r2, r2, r3
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	895b      	ldrh	r3, [r3, #10]
 800ec70:	4619      	mov	r1, r3
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	1acb      	subs	r3, r1, r3
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d306      	bcc.n	800ec88 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	895b      	ldrh	r3, [r3, #10]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	e005      	b.n	800ec94 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	895b      	ldrh	r3, [r3, #10]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	18d0      	adds	r0, r2, r3
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	685a      	ldr	r2, [r3, #4]
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	4413      	add	r3, r2
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	4619      	mov	r1, r3
 800eca8:	f00e fcfc 	bl	801d6a4 <memcpy>
    offset_to += len;
 800ecac:	697a      	ldr	r2, [r7, #20]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	4413      	add	r3, r2
 800ecba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	895b      	ldrh	r3, [r3, #10]
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d906      	bls.n	800ecd6 <pbuf_copy+0xb2>
 800ecc8:	4b38      	ldr	r3, [pc, #224]	; (800edac <pbuf_copy+0x188>)
 800ecca:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ecce:	493a      	ldr	r1, [pc, #232]	; (800edb8 <pbuf_copy+0x194>)
 800ecd0:	4838      	ldr	r0, [pc, #224]	; (800edb4 <pbuf_copy+0x190>)
 800ecd2:	f00e fcfd 	bl	801d6d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	895b      	ldrh	r3, [r3, #10]
 800ecda:	461a      	mov	r2, r3
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d906      	bls.n	800ecf0 <pbuf_copy+0xcc>
 800ece2:	4b32      	ldr	r3, [pc, #200]	; (800edac <pbuf_copy+0x188>)
 800ece4:	f240 32da 	movw	r2, #986	; 0x3da
 800ece8:	4934      	ldr	r1, [pc, #208]	; (800edbc <pbuf_copy+0x198>)
 800ecea:	4832      	ldr	r0, [pc, #200]	; (800edb4 <pbuf_copy+0x190>)
 800ecec:	f00e fcf0 	bl	801d6d0 <iprintf>
    if (offset_from >= p_from->len) {
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	895b      	ldrh	r3, [r3, #10]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d304      	bcc.n	800ed06 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	895b      	ldrh	r3, [r3, #10]
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d114      	bne.n	800ed3c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10c      	bne.n	800ed3c <pbuf_copy+0x118>
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d009      	beq.n	800ed3c <pbuf_copy+0x118>
 800ed28:	4b20      	ldr	r3, [pc, #128]	; (800edac <pbuf_copy+0x188>)
 800ed2a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ed2e:	4924      	ldr	r1, [pc, #144]	; (800edc0 <pbuf_copy+0x19c>)
 800ed30:	4820      	ldr	r0, [pc, #128]	; (800edb4 <pbuf_copy+0x190>)
 800ed32:	f00e fccd 	bl	801d6d0 <iprintf>
 800ed36:	f06f 030f 	mvn.w	r3, #15
 800ed3a:	e032      	b.n	800eda2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d013      	beq.n	800ed6a <pbuf_copy+0x146>
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	895a      	ldrh	r2, [r3, #10]
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d10d      	bne.n	800ed6a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d009      	beq.n	800ed6a <pbuf_copy+0x146>
 800ed56:	4b15      	ldr	r3, [pc, #84]	; (800edac <pbuf_copy+0x188>)
 800ed58:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ed5c:	4919      	ldr	r1, [pc, #100]	; (800edc4 <pbuf_copy+0x1a0>)
 800ed5e:	4815      	ldr	r0, [pc, #84]	; (800edb4 <pbuf_copy+0x190>)
 800ed60:	f00e fcb6 	bl	801d6d0 <iprintf>
 800ed64:	f06f 0305 	mvn.w	r3, #5
 800ed68:	e01b      	b.n	800eda2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d013      	beq.n	800ed98 <pbuf_copy+0x174>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	895a      	ldrh	r2, [r3, #10]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	891b      	ldrh	r3, [r3, #8]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d10d      	bne.n	800ed98 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d009      	beq.n	800ed98 <pbuf_copy+0x174>
 800ed84:	4b09      	ldr	r3, [pc, #36]	; (800edac <pbuf_copy+0x188>)
 800ed86:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ed8a:	490e      	ldr	r1, [pc, #56]	; (800edc4 <pbuf_copy+0x1a0>)
 800ed8c:	4809      	ldr	r0, [pc, #36]	; (800edb4 <pbuf_copy+0x190>)
 800ed8e:	f00e fc9f 	bl	801d6d0 <iprintf>
 800ed92:	f06f 0305 	mvn.w	r3, #5
 800ed96:	e004      	b.n	800eda2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f47f af61 	bne.w	800ec62 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3718      	adds	r7, #24
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	0801fa04 	.word	0x0801fa04
 800edb0:	0801fcac 	.word	0x0801fcac
 800edb4:	0801fa64 	.word	0x0801fa64
 800edb8:	0801fcdc 	.word	0x0801fcdc
 800edbc:	0801fcf4 	.word	0x0801fcf4
 800edc0:	0801fd10 	.word	0x0801fd10
 800edc4:	0801fd20 	.word	0x0801fd20

0800edc8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	4611      	mov	r1, r2
 800edd4:	461a      	mov	r2, r3
 800edd6:	460b      	mov	r3, r1
 800edd8:	80fb      	strh	r3, [r7, #6]
 800edda:	4613      	mov	r3, r2
 800eddc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d108      	bne.n	800edfe <pbuf_copy_partial+0x36>
 800edec:	4b2b      	ldr	r3, [pc, #172]	; (800ee9c <pbuf_copy_partial+0xd4>)
 800edee:	f240 420a 	movw	r2, #1034	; 0x40a
 800edf2:	492b      	ldr	r1, [pc, #172]	; (800eea0 <pbuf_copy_partial+0xd8>)
 800edf4:	482b      	ldr	r0, [pc, #172]	; (800eea4 <pbuf_copy_partial+0xdc>)
 800edf6:	f00e fc6b 	bl	801d6d0 <iprintf>
 800edfa:	2300      	movs	r3, #0
 800edfc:	e04a      	b.n	800ee94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d108      	bne.n	800ee16 <pbuf_copy_partial+0x4e>
 800ee04:	4b25      	ldr	r3, [pc, #148]	; (800ee9c <pbuf_copy_partial+0xd4>)
 800ee06:	f240 420b 	movw	r2, #1035	; 0x40b
 800ee0a:	4927      	ldr	r1, [pc, #156]	; (800eea8 <pbuf_copy_partial+0xe0>)
 800ee0c:	4825      	ldr	r0, [pc, #148]	; (800eea4 <pbuf_copy_partial+0xdc>)
 800ee0e:	f00e fc5f 	bl	801d6d0 <iprintf>
 800ee12:	2300      	movs	r3, #0
 800ee14:	e03e      	b.n	800ee94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	61fb      	str	r3, [r7, #28]
 800ee1a:	e034      	b.n	800ee86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ee1c:	88bb      	ldrh	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00a      	beq.n	800ee38 <pbuf_copy_partial+0x70>
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	895b      	ldrh	r3, [r3, #10]
 800ee26:	88ba      	ldrh	r2, [r7, #4]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d305      	bcc.n	800ee38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	895b      	ldrh	r3, [r3, #10]
 800ee30:	88ba      	ldrh	r2, [r7, #4]
 800ee32:	1ad3      	subs	r3, r2, r3
 800ee34:	80bb      	strh	r3, [r7, #4]
 800ee36:	e023      	b.n	800ee80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	895a      	ldrh	r2, [r3, #10]
 800ee3c:	88bb      	ldrh	r3, [r7, #4]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ee42:	8b3a      	ldrh	r2, [r7, #24]
 800ee44:	88fb      	ldrh	r3, [r7, #6]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d901      	bls.n	800ee4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ee4a:	88fb      	ldrh	r3, [r7, #6]
 800ee4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ee4e:	8b7b      	ldrh	r3, [r7, #26]
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	18d0      	adds	r0, r2, r3
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	88bb      	ldrh	r3, [r7, #4]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	8b3a      	ldrh	r2, [r7, #24]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	f00e fc20 	bl	801d6a4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ee64:	8afa      	ldrh	r2, [r7, #22]
 800ee66:	8b3b      	ldrh	r3, [r7, #24]
 800ee68:	4413      	add	r3, r2
 800ee6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ee6c:	8b7a      	ldrh	r2, [r7, #26]
 800ee6e:	8b3b      	ldrh	r3, [r7, #24]
 800ee70:	4413      	add	r3, r2
 800ee72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ee74:	88fa      	ldrh	r2, [r7, #6]
 800ee76:	8b3b      	ldrh	r3, [r7, #24]
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	61fb      	str	r3, [r7, #28]
 800ee86:	88fb      	ldrh	r3, [r7, #6]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <pbuf_copy_partial+0xca>
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1c4      	bne.n	800ee1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ee92:	8afb      	ldrh	r3, [r7, #22]
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3720      	adds	r7, #32
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	0801fa04 	.word	0x0801fa04
 800eea0:	0801fd4c 	.word	0x0801fd4c
 800eea4:	0801fa64 	.word	0x0801fa64
 800eea8:	0801fd6c 	.word	0x0801fd6c

0800eeac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	603a      	str	r2, [r7, #0]
 800eeb6:	71fb      	strb	r3, [r7, #7]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	8919      	ldrh	r1, [r3, #8]
 800eec0:	88ba      	ldrh	r2, [r7, #4]
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff faa5 	bl	800e414 <pbuf_alloc>
 800eeca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d101      	bne.n	800eed6 <pbuf_clone+0x2a>
    return NULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e011      	b.n	800eefa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eed6:	6839      	ldr	r1, [r7, #0]
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f7ff fea3 	bl	800ec24 <pbuf_copy>
 800eede:	4603      	mov	r3, r0
 800eee0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eee2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d006      	beq.n	800eef8 <pbuf_clone+0x4c>
 800eeea:	4b06      	ldr	r3, [pc, #24]	; (800ef04 <pbuf_clone+0x58>)
 800eeec:	f240 5224 	movw	r2, #1316	; 0x524
 800eef0:	4905      	ldr	r1, [pc, #20]	; (800ef08 <pbuf_clone+0x5c>)
 800eef2:	4806      	ldr	r0, [pc, #24]	; (800ef0c <pbuf_clone+0x60>)
 800eef4:	f00e fbec 	bl	801d6d0 <iprintf>
  return q;
 800eef8:	68fb      	ldr	r3, [r7, #12]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	0801fa04 	.word	0x0801fa04
 800ef08:	0801fe78 	.word	0x0801fe78
 800ef0c:	0801fa64 	.word	0x0801fa64

0800ef10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ef14:	f00e fc6a 	bl	801d7ec <rand>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	4b01      	ldr	r3, [pc, #4]	; (800ef30 <tcp_init+0x20>)
 800ef2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ef2c:	bf00      	nop
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20000024 	.word	0x20000024

0800ef34 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	7d1b      	ldrb	r3, [r3, #20]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d105      	bne.n	800ef50 <tcp_free+0x1c>
 800ef44:	4b06      	ldr	r3, [pc, #24]	; (800ef60 <tcp_free+0x2c>)
 800ef46:	22d4      	movs	r2, #212	; 0xd4
 800ef48:	4906      	ldr	r1, [pc, #24]	; (800ef64 <tcp_free+0x30>)
 800ef4a:	4807      	ldr	r0, [pc, #28]	; (800ef68 <tcp_free+0x34>)
 800ef4c:	f00e fbc0 	bl	801d6d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ef50:	6879      	ldr	r1, [r7, #4]
 800ef52:	2001      	movs	r0, #1
 800ef54:	f7fe fe9e 	bl	800dc94 <memp_free>
}
 800ef58:	bf00      	nop
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	0801ff04 	.word	0x0801ff04
 800ef64:	0801ff34 	.word	0x0801ff34
 800ef68:	0801ff48 	.word	0x0801ff48

0800ef6c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7d1b      	ldrb	r3, [r3, #20]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d105      	bne.n	800ef88 <tcp_free_listen+0x1c>
 800ef7c:	4b06      	ldr	r3, [pc, #24]	; (800ef98 <tcp_free_listen+0x2c>)
 800ef7e:	22df      	movs	r2, #223	; 0xdf
 800ef80:	4906      	ldr	r1, [pc, #24]	; (800ef9c <tcp_free_listen+0x30>)
 800ef82:	4807      	ldr	r0, [pc, #28]	; (800efa0 <tcp_free_listen+0x34>)
 800ef84:	f00e fba4 	bl	801d6d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	2002      	movs	r0, #2
 800ef8c:	f7fe fe82 	bl	800dc94 <memp_free>
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	0801ff04 	.word	0x0801ff04
 800ef9c:	0801ff70 	.word	0x0801ff70
 800efa0:	0801ff48 	.word	0x0801ff48

0800efa4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800efa8:	f001 f85c 	bl	8010064 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800efac:	4b07      	ldr	r3, [pc, #28]	; (800efcc <tcp_tmr+0x28>)
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	3301      	adds	r3, #1
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	4b05      	ldr	r3, [pc, #20]	; (800efcc <tcp_tmr+0x28>)
 800efb6:	701a      	strb	r2, [r3, #0]
 800efb8:	4b04      	ldr	r3, [pc, #16]	; (800efcc <tcp_tmr+0x28>)
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	f003 0301 	and.w	r3, r3, #1
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d001      	beq.n	800efc8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800efc4:	f000 fd0e 	bl	800f9e4 <tcp_slowtmr>
  }
}
 800efc8:	bf00      	nop
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	200113d1 	.word	0x200113d1

0800efd0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d105      	bne.n	800efec <tcp_remove_listener+0x1c>
 800efe0:	4b0d      	ldr	r3, [pc, #52]	; (800f018 <tcp_remove_listener+0x48>)
 800efe2:	22ff      	movs	r2, #255	; 0xff
 800efe4:	490d      	ldr	r1, [pc, #52]	; (800f01c <tcp_remove_listener+0x4c>)
 800efe6:	480e      	ldr	r0, [pc, #56]	; (800f020 <tcp_remove_listener+0x50>)
 800efe8:	f00e fb72 	bl	801d6d0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	60fb      	str	r3, [r7, #12]
 800eff0:	e00a      	b.n	800f008 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d102      	bne.n	800f002 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2200      	movs	r2, #0
 800f000:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	60fb      	str	r3, [r7, #12]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1f1      	bne.n	800eff2 <tcp_remove_listener+0x22>
    }
  }
}
 800f00e:	bf00      	nop
 800f010:	bf00      	nop
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	0801ff04 	.word	0x0801ff04
 800f01c:	0801ff8c 	.word	0x0801ff8c
 800f020:	0801ff48 	.word	0x0801ff48

0800f024 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d106      	bne.n	800f040 <tcp_listen_closed+0x1c>
 800f032:	4b14      	ldr	r3, [pc, #80]	; (800f084 <tcp_listen_closed+0x60>)
 800f034:	f240 1211 	movw	r2, #273	; 0x111
 800f038:	4913      	ldr	r1, [pc, #76]	; (800f088 <tcp_listen_closed+0x64>)
 800f03a:	4814      	ldr	r0, [pc, #80]	; (800f08c <tcp_listen_closed+0x68>)
 800f03c:	f00e fb48 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	7d1b      	ldrb	r3, [r3, #20]
 800f044:	2b01      	cmp	r3, #1
 800f046:	d006      	beq.n	800f056 <tcp_listen_closed+0x32>
 800f048:	4b0e      	ldr	r3, [pc, #56]	; (800f084 <tcp_listen_closed+0x60>)
 800f04a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f04e:	4910      	ldr	r1, [pc, #64]	; (800f090 <tcp_listen_closed+0x6c>)
 800f050:	480e      	ldr	r0, [pc, #56]	; (800f08c <tcp_listen_closed+0x68>)
 800f052:	f00e fb3d 	bl	801d6d0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f056:	2301      	movs	r3, #1
 800f058:	60fb      	str	r3, [r7, #12]
 800f05a:	e00b      	b.n	800f074 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f05c:	4a0d      	ldr	r2, [pc, #52]	; (800f094 <tcp_listen_closed+0x70>)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6879      	ldr	r1, [r7, #4]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff ffb1 	bl	800efd0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3301      	adds	r3, #1
 800f072:	60fb      	str	r3, [r7, #12]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b03      	cmp	r3, #3
 800f078:	d9f0      	bls.n	800f05c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f07a:	bf00      	nop
 800f07c:	bf00      	nop
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	0801ff04 	.word	0x0801ff04
 800f088:	0801ffb4 	.word	0x0801ffb4
 800f08c:	0801ff48 	.word	0x0801ff48
 800f090:	0801ffc0 	.word	0x0801ffc0
 800f094:	080222c4 	.word	0x080222c4

0800f098 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f098:	b5b0      	push	{r4, r5, r7, lr}
 800f09a:	b088      	sub	sp, #32
 800f09c:	af04      	add	r7, sp, #16
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d106      	bne.n	800f0b8 <tcp_close_shutdown+0x20>
 800f0aa:	4b63      	ldr	r3, [pc, #396]	; (800f238 <tcp_close_shutdown+0x1a0>)
 800f0ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f0b0:	4962      	ldr	r1, [pc, #392]	; (800f23c <tcp_close_shutdown+0x1a4>)
 800f0b2:	4863      	ldr	r0, [pc, #396]	; (800f240 <tcp_close_shutdown+0x1a8>)
 800f0b4:	f00e fb0c 	bl	801d6d0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f0b8:	78fb      	ldrb	r3, [r7, #3]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d066      	beq.n	800f18c <tcp_close_shutdown+0xf4>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	7d1b      	ldrb	r3, [r3, #20]
 800f0c2:	2b04      	cmp	r3, #4
 800f0c4:	d003      	beq.n	800f0ce <tcp_close_shutdown+0x36>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	7d1b      	ldrb	r3, [r3, #20]
 800f0ca:	2b07      	cmp	r3, #7
 800f0cc:	d15e      	bne.n	800f18c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d104      	bne.n	800f0e0 <tcp_close_shutdown+0x48>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f0de:	d055      	beq.n	800f18c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	8b5b      	ldrh	r3, [r3, #26]
 800f0e4:	f003 0310 	and.w	r3, r3, #16
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d106      	bne.n	800f0fa <tcp_close_shutdown+0x62>
 800f0ec:	4b52      	ldr	r3, [pc, #328]	; (800f238 <tcp_close_shutdown+0x1a0>)
 800f0ee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f0f2:	4954      	ldr	r1, [pc, #336]	; (800f244 <tcp_close_shutdown+0x1ac>)
 800f0f4:	4852      	ldr	r0, [pc, #328]	; (800f240 <tcp_close_shutdown+0x1a8>)
 800f0f6:	f00e faeb 	bl	801d6d0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f102:	687d      	ldr	r5, [r7, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3304      	adds	r3, #4
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	8ad2      	ldrh	r2, [r2, #22]
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	8b09      	ldrh	r1, [r1, #24]
 800f110:	9102      	str	r1, [sp, #8]
 800f112:	9201      	str	r2, [sp, #4]
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	462b      	mov	r3, r5
 800f118:	4622      	mov	r2, r4
 800f11a:	4601      	mov	r1, r0
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f005 fd71 	bl	8014c04 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f001 fb4e 	bl	80107c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f128:	4b47      	ldr	r3, [pc, #284]	; (800f248 <tcp_close_shutdown+0x1b0>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d105      	bne.n	800f13e <tcp_close_shutdown+0xa6>
 800f132:	4b45      	ldr	r3, [pc, #276]	; (800f248 <tcp_close_shutdown+0x1b0>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	4a43      	ldr	r2, [pc, #268]	; (800f248 <tcp_close_shutdown+0x1b0>)
 800f13a:	6013      	str	r3, [r2, #0]
 800f13c:	e013      	b.n	800f166 <tcp_close_shutdown+0xce>
 800f13e:	4b42      	ldr	r3, [pc, #264]	; (800f248 <tcp_close_shutdown+0x1b0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	e00c      	b.n	800f160 <tcp_close_shutdown+0xc8>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d104      	bne.n	800f15a <tcp_close_shutdown+0xc2>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	68da      	ldr	r2, [r3, #12]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	60da      	str	r2, [r3, #12]
 800f158:	e005      	b.n	800f166 <tcp_close_shutdown+0xce>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	60fb      	str	r3, [r7, #12]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1ef      	bne.n	800f146 <tcp_close_shutdown+0xae>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	60da      	str	r2, [r3, #12]
 800f16c:	4b37      	ldr	r3, [pc, #220]	; (800f24c <tcp_close_shutdown+0x1b4>)
 800f16e:	2201      	movs	r2, #1
 800f170:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f172:	4b37      	ldr	r3, [pc, #220]	; (800f250 <tcp_close_shutdown+0x1b8>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d102      	bne.n	800f182 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f17c:	f003 ffe6 	bl	801314c <tcp_trigger_input_pcb_close>
 800f180:	e002      	b.n	800f188 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7ff fed6 	bl	800ef34 <tcp_free>
      }
      return ERR_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	e050      	b.n	800f22e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	7d1b      	ldrb	r3, [r3, #20]
 800f190:	2b02      	cmp	r3, #2
 800f192:	d03b      	beq.n	800f20c <tcp_close_shutdown+0x174>
 800f194:	2b02      	cmp	r3, #2
 800f196:	dc44      	bgt.n	800f222 <tcp_close_shutdown+0x18a>
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d002      	beq.n	800f1a2 <tcp_close_shutdown+0x10a>
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d02a      	beq.n	800f1f6 <tcp_close_shutdown+0x15e>
 800f1a0:	e03f      	b.n	800f222 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	8adb      	ldrh	r3, [r3, #22]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d021      	beq.n	800f1ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f1aa:	4b2a      	ldr	r3, [pc, #168]	; (800f254 <tcp_close_shutdown+0x1bc>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d105      	bne.n	800f1c0 <tcp_close_shutdown+0x128>
 800f1b4:	4b27      	ldr	r3, [pc, #156]	; (800f254 <tcp_close_shutdown+0x1bc>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	4a26      	ldr	r2, [pc, #152]	; (800f254 <tcp_close_shutdown+0x1bc>)
 800f1bc:	6013      	str	r3, [r2, #0]
 800f1be:	e013      	b.n	800f1e8 <tcp_close_shutdown+0x150>
 800f1c0:	4b24      	ldr	r3, [pc, #144]	; (800f254 <tcp_close_shutdown+0x1bc>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	60bb      	str	r3, [r7, #8]
 800f1c6:	e00c      	b.n	800f1e2 <tcp_close_shutdown+0x14a>
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d104      	bne.n	800f1dc <tcp_close_shutdown+0x144>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68da      	ldr	r2, [r3, #12]
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	60da      	str	r2, [r3, #12]
 800f1da:	e005      	b.n	800f1e8 <tcp_close_shutdown+0x150>
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	60bb      	str	r3, [r7, #8]
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d1ef      	bne.n	800f1c8 <tcp_close_shutdown+0x130>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7ff fea0 	bl	800ef34 <tcp_free>
      break;
 800f1f4:	e01a      	b.n	800f22c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff ff14 	bl	800f024 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f1fc:	6879      	ldr	r1, [r7, #4]
 800f1fe:	4816      	ldr	r0, [pc, #88]	; (800f258 <tcp_close_shutdown+0x1c0>)
 800f200:	f001 fb30 	bl	8010864 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7ff feb1 	bl	800ef6c <tcp_free_listen>
      break;
 800f20a:	e00f      	b.n	800f22c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f20c:	6879      	ldr	r1, [r7, #4]
 800f20e:	480e      	ldr	r0, [pc, #56]	; (800f248 <tcp_close_shutdown+0x1b0>)
 800f210:	f001 fb28 	bl	8010864 <tcp_pcb_remove>
 800f214:	4b0d      	ldr	r3, [pc, #52]	; (800f24c <tcp_close_shutdown+0x1b4>)
 800f216:	2201      	movs	r2, #1
 800f218:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff fe8a 	bl	800ef34 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f220:	e004      	b.n	800f22c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f81a 	bl	800f25c <tcp_close_shutdown_fin>
 800f228:	4603      	mov	r3, r0
 800f22a:	e000      	b.n	800f22e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bdb0      	pop	{r4, r5, r7, pc}
 800f236:	bf00      	nop
 800f238:	0801ff04 	.word	0x0801ff04
 800f23c:	0801ffd8 	.word	0x0801ffd8
 800f240:	0801ff48 	.word	0x0801ff48
 800f244:	0801fff8 	.word	0x0801fff8
 800f248:	200113c8 	.word	0x200113c8
 800f24c:	200113d0 	.word	0x200113d0
 800f250:	20011408 	.word	0x20011408
 800f254:	200113c0 	.word	0x200113c0
 800f258:	200113c4 	.word	0x200113c4

0800f25c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d106      	bne.n	800f278 <tcp_close_shutdown_fin+0x1c>
 800f26a:	4b2e      	ldr	r3, [pc, #184]	; (800f324 <tcp_close_shutdown_fin+0xc8>)
 800f26c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f270:	492d      	ldr	r1, [pc, #180]	; (800f328 <tcp_close_shutdown_fin+0xcc>)
 800f272:	482e      	ldr	r0, [pc, #184]	; (800f32c <tcp_close_shutdown_fin+0xd0>)
 800f274:	f00e fa2c 	bl	801d6d0 <iprintf>

  switch (pcb->state) {
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	7d1b      	ldrb	r3, [r3, #20]
 800f27c:	2b07      	cmp	r3, #7
 800f27e:	d020      	beq.n	800f2c2 <tcp_close_shutdown_fin+0x66>
 800f280:	2b07      	cmp	r3, #7
 800f282:	dc2b      	bgt.n	800f2dc <tcp_close_shutdown_fin+0x80>
 800f284:	2b03      	cmp	r3, #3
 800f286:	d002      	beq.n	800f28e <tcp_close_shutdown_fin+0x32>
 800f288:	2b04      	cmp	r3, #4
 800f28a:	d00d      	beq.n	800f2a8 <tcp_close_shutdown_fin+0x4c>
 800f28c:	e026      	b.n	800f2dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f004 fdc6 	bl	8013e20 <tcp_send_fin>
 800f294:	4603      	mov	r3, r0
 800f296:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d11f      	bne.n	800f2e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2205      	movs	r2, #5
 800f2a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f2a6:	e01b      	b.n	800f2e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f004 fdb9 	bl	8013e20 <tcp_send_fin>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d114      	bne.n	800f2e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2205      	movs	r2, #5
 800f2be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f2c0:	e010      	b.n	800f2e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f004 fdac 	bl	8013e20 <tcp_send_fin>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d109      	bne.n	800f2e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2209      	movs	r2, #9
 800f2d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f2da:	e005      	b.n	800f2e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e01c      	b.n	800f31a <tcp_close_shutdown_fin+0xbe>
      break;
 800f2e0:	bf00      	nop
 800f2e2:	e002      	b.n	800f2ea <tcp_close_shutdown_fin+0x8e>
      break;
 800f2e4:	bf00      	nop
 800f2e6:	e000      	b.n	800f2ea <tcp_close_shutdown_fin+0x8e>
      break;
 800f2e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d103      	bne.n	800f2fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f004 fed2 	bl	801409c <tcp_output>
 800f2f8:	e00d      	b.n	800f316 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f302:	d108      	bne.n	800f316 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	8b5b      	ldrh	r3, [r3, #26]
 800f308:	f043 0308 	orr.w	r3, r3, #8
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	e001      	b.n	800f31a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	0801ff04 	.word	0x0801ff04
 800f328:	0801ffb4 	.word	0x0801ffb4
 800f32c:	0801ff48 	.word	0x0801ff48

0800f330 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d109      	bne.n	800f352 <tcp_close+0x22>
 800f33e:	4b0f      	ldr	r3, [pc, #60]	; (800f37c <tcp_close+0x4c>)
 800f340:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f344:	490e      	ldr	r1, [pc, #56]	; (800f380 <tcp_close+0x50>)
 800f346:	480f      	ldr	r0, [pc, #60]	; (800f384 <tcp_close+0x54>)
 800f348:	f00e f9c2 	bl	801d6d0 <iprintf>
 800f34c:	f06f 030f 	mvn.w	r3, #15
 800f350:	e00f      	b.n	800f372 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	7d1b      	ldrb	r3, [r3, #20]
 800f356:	2b01      	cmp	r3, #1
 800f358:	d006      	beq.n	800f368 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	8b5b      	ldrh	r3, [r3, #26]
 800f35e:	f043 0310 	orr.w	r3, r3, #16
 800f362:	b29a      	uxth	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f368:	2101      	movs	r1, #1
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7ff fe94 	bl	800f098 <tcp_close_shutdown>
 800f370:	4603      	mov	r3, r0
}
 800f372:	4618      	mov	r0, r3
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	0801ff04 	.word	0x0801ff04
 800f380:	08020014 	.word	0x08020014
 800f384:	0801ff48 	.word	0x0801ff48

0800f388 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d109      	bne.n	800f3ae <tcp_shutdown+0x26>
 800f39a:	4b26      	ldr	r3, [pc, #152]	; (800f434 <tcp_shutdown+0xac>)
 800f39c:	f240 2207 	movw	r2, #519	; 0x207
 800f3a0:	4925      	ldr	r1, [pc, #148]	; (800f438 <tcp_shutdown+0xb0>)
 800f3a2:	4826      	ldr	r0, [pc, #152]	; (800f43c <tcp_shutdown+0xb4>)
 800f3a4:	f00e f994 	bl	801d6d0 <iprintf>
 800f3a8:	f06f 030f 	mvn.w	r3, #15
 800f3ac:	e03d      	b.n	800f42a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	7d1b      	ldrb	r3, [r3, #20]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d102      	bne.n	800f3bc <tcp_shutdown+0x34>
    return ERR_CONN;
 800f3b6:	f06f 030a 	mvn.w	r3, #10
 800f3ba:	e036      	b.n	800f42a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d01b      	beq.n	800f3fa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	8b5b      	ldrh	r3, [r3, #26]
 800f3c6:	f043 0310 	orr.w	r3, r3, #16
 800f3ca:	b29a      	uxth	r2, r3
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d005      	beq.n	800f3e2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f7ff fe5d 	bl	800f098 <tcp_close_shutdown>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	e023      	b.n	800f42a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d007      	beq.n	800f3fa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7ff faf4 	bl	800e9dc <pbuf_free>
      pcb->refused_data = NULL;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d013      	beq.n	800f428 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	7d1b      	ldrb	r3, [r3, #20]
 800f404:	2b04      	cmp	r3, #4
 800f406:	dc02      	bgt.n	800f40e <tcp_shutdown+0x86>
 800f408:	2b03      	cmp	r3, #3
 800f40a:	da02      	bge.n	800f412 <tcp_shutdown+0x8a>
 800f40c:	e009      	b.n	800f422 <tcp_shutdown+0x9a>
 800f40e:	2b07      	cmp	r3, #7
 800f410:	d107      	bne.n	800f422 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	b2db      	uxtb	r3, r3
 800f416:	4619      	mov	r1, r3
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f7ff fe3d 	bl	800f098 <tcp_close_shutdown>
 800f41e:	4603      	mov	r3, r0
 800f420:	e003      	b.n	800f42a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f422:	f06f 030a 	mvn.w	r3, #10
 800f426:	e000      	b.n	800f42a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	0801ff04 	.word	0x0801ff04
 800f438:	0802002c 	.word	0x0802002c
 800f43c:	0801ff48 	.word	0x0801ff48

0800f440 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08e      	sub	sp, #56	; 0x38
 800f444:	af04      	add	r7, sp, #16
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d107      	bne.n	800f460 <tcp_abandon+0x20>
 800f450:	4b52      	ldr	r3, [pc, #328]	; (800f59c <tcp_abandon+0x15c>)
 800f452:	f240 223d 	movw	r2, #573	; 0x23d
 800f456:	4952      	ldr	r1, [pc, #328]	; (800f5a0 <tcp_abandon+0x160>)
 800f458:	4852      	ldr	r0, [pc, #328]	; (800f5a4 <tcp_abandon+0x164>)
 800f45a:	f00e f939 	bl	801d6d0 <iprintf>
 800f45e:	e099      	b.n	800f594 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	7d1b      	ldrb	r3, [r3, #20]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d106      	bne.n	800f476 <tcp_abandon+0x36>
 800f468:	4b4c      	ldr	r3, [pc, #304]	; (800f59c <tcp_abandon+0x15c>)
 800f46a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f46e:	494e      	ldr	r1, [pc, #312]	; (800f5a8 <tcp_abandon+0x168>)
 800f470:	484c      	ldr	r0, [pc, #304]	; (800f5a4 <tcp_abandon+0x164>)
 800f472:	f00e f92d 	bl	801d6d0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	7d1b      	ldrb	r3, [r3, #20]
 800f47a:	2b0a      	cmp	r3, #10
 800f47c:	d107      	bne.n	800f48e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f47e:	6879      	ldr	r1, [r7, #4]
 800f480:	484a      	ldr	r0, [pc, #296]	; (800f5ac <tcp_abandon+0x16c>)
 800f482:	f001 f9ef 	bl	8010864 <tcp_pcb_remove>
    tcp_free(pcb);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f7ff fd54 	bl	800ef34 <tcp_free>
 800f48c:	e082      	b.n	800f594 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f48e:	2300      	movs	r3, #0
 800f490:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f49a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d126      	bne.n	800f506 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	8adb      	ldrh	r3, [r3, #22]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d02e      	beq.n	800f51e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f4c0:	4b3b      	ldr	r3, [pc, #236]	; (800f5b0 <tcp_abandon+0x170>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d105      	bne.n	800f4d6 <tcp_abandon+0x96>
 800f4ca:	4b39      	ldr	r3, [pc, #228]	; (800f5b0 <tcp_abandon+0x170>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	4a37      	ldr	r2, [pc, #220]	; (800f5b0 <tcp_abandon+0x170>)
 800f4d2:	6013      	str	r3, [r2, #0]
 800f4d4:	e013      	b.n	800f4fe <tcp_abandon+0xbe>
 800f4d6:	4b36      	ldr	r3, [pc, #216]	; (800f5b0 <tcp_abandon+0x170>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	61fb      	str	r3, [r7, #28]
 800f4dc:	e00c      	b.n	800f4f8 <tcp_abandon+0xb8>
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d104      	bne.n	800f4f2 <tcp_abandon+0xb2>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68da      	ldr	r2, [r3, #12]
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	60da      	str	r2, [r3, #12]
 800f4f0:	e005      	b.n	800f4fe <tcp_abandon+0xbe>
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	61fb      	str	r3, [r7, #28]
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1ef      	bne.n	800f4de <tcp_abandon+0x9e>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	60da      	str	r2, [r3, #12]
 800f504:	e00b      	b.n	800f51e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	8adb      	ldrh	r3, [r3, #22]
 800f50e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f510:	6879      	ldr	r1, [r7, #4]
 800f512:	4828      	ldr	r0, [pc, #160]	; (800f5b4 <tcp_abandon+0x174>)
 800f514:	f001 f9a6 	bl	8010864 <tcp_pcb_remove>
 800f518:	4b27      	ldr	r3, [pc, #156]	; (800f5b8 <tcp_abandon+0x178>)
 800f51a:	2201      	movs	r2, #1
 800f51c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f522:	2b00      	cmp	r3, #0
 800f524:	d004      	beq.n	800f530 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 fe7a 	bl	8010224 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d004      	beq.n	800f542 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f53c:	4618      	mov	r0, r3
 800f53e:	f000 fe71 	bl	8010224 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f546:	2b00      	cmp	r3, #0
 800f548:	d004      	beq.n	800f554 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f54e:	4618      	mov	r0, r3
 800f550:	f000 fe68 	bl	8010224 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00e      	beq.n	800f578 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f55a:	6879      	ldr	r1, [r7, #4]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	3304      	adds	r3, #4
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	8b12      	ldrh	r2, [r2, #24]
 800f564:	9202      	str	r2, [sp, #8]
 800f566:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f568:	9201      	str	r2, [sp, #4]
 800f56a:	9300      	str	r3, [sp, #0]
 800f56c:	460b      	mov	r3, r1
 800f56e:	697a      	ldr	r2, [r7, #20]
 800f570:	69b9      	ldr	r1, [r7, #24]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f005 fb46 	bl	8014c04 <tcp_rst>
    }
    last_state = pcb->state;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	7d1b      	ldrb	r3, [r3, #20]
 800f57c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff fcd8 	bl	800ef34 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d004      	beq.n	800f594 <tcp_abandon+0x154>
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	f06f 010c 	mvn.w	r1, #12
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	4798      	blx	r3
  }
}
 800f594:	3728      	adds	r7, #40	; 0x28
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	0801ff04 	.word	0x0801ff04
 800f5a0:	08020048 	.word	0x08020048
 800f5a4:	0801ff48 	.word	0x0801ff48
 800f5a8:	08020064 	.word	0x08020064
 800f5ac:	200113cc 	.word	0x200113cc
 800f5b0:	200113c0 	.word	0x200113c0
 800f5b4:	200113c8 	.word	0x200113c8
 800f5b8:	200113d0 	.word	0x200113d0

0800f5bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7ff ff3a 	bl	800f440 <tcp_abandon>
}
 800f5cc:	bf00      	nop
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d106      	bne.n	800f5f0 <tcp_update_rcv_ann_wnd+0x1c>
 800f5e2:	4b25      	ldr	r3, [pc, #148]	; (800f678 <tcp_update_rcv_ann_wnd+0xa4>)
 800f5e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f5e8:	4924      	ldr	r1, [pc, #144]	; (800f67c <tcp_update_rcv_ann_wnd+0xa8>)
 800f5ea:	4825      	ldr	r0, [pc, #148]	; (800f680 <tcp_update_rcv_ann_wnd+0xac>)
 800f5ec:	f00e f870 	bl	801d6d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f5f8:	4413      	add	r3, r2
 800f5fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f604:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f608:	bf28      	it	cs
 800f60a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f60e:	b292      	uxth	r2, r2
 800f610:	4413      	add	r3, r2
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	db08      	blt.n	800f62c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	e020      	b.n	800f66e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	2b00      	cmp	r3, #0
 800f638:	dd03      	ble.n	800f642 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f640:	e014      	b.n	800f66c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f654:	d306      	bcc.n	800f664 <tcp_update_rcv_ann_wnd+0x90>
 800f656:	4b08      	ldr	r3, [pc, #32]	; (800f678 <tcp_update_rcv_ann_wnd+0xa4>)
 800f658:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f65c:	4909      	ldr	r1, [pc, #36]	; (800f684 <tcp_update_rcv_ann_wnd+0xb0>)
 800f65e:	4808      	ldr	r0, [pc, #32]	; (800f680 <tcp_update_rcv_ann_wnd+0xac>)
 800f660:	f00e f836 	bl	801d6d0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	b29a      	uxth	r2, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f66c:	2300      	movs	r3, #0
  }
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3710      	adds	r7, #16
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	0801ff04 	.word	0x0801ff04
 800f67c:	08020160 	.word	0x08020160
 800f680:	0801ff48 	.word	0x0801ff48
 800f684:	08020184 	.word	0x08020184

0800f688 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	460b      	mov	r3, r1
 800f692:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d107      	bne.n	800f6aa <tcp_recved+0x22>
 800f69a:	4b1f      	ldr	r3, [pc, #124]	; (800f718 <tcp_recved+0x90>)
 800f69c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f6a0:	491e      	ldr	r1, [pc, #120]	; (800f71c <tcp_recved+0x94>)
 800f6a2:	481f      	ldr	r0, [pc, #124]	; (800f720 <tcp_recved+0x98>)
 800f6a4:	f00e f814 	bl	801d6d0 <iprintf>
 800f6a8:	e032      	b.n	800f710 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	7d1b      	ldrb	r3, [r3, #20]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d106      	bne.n	800f6c0 <tcp_recved+0x38>
 800f6b2:	4b19      	ldr	r3, [pc, #100]	; (800f718 <tcp_recved+0x90>)
 800f6b4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f6b8:	491a      	ldr	r1, [pc, #104]	; (800f724 <tcp_recved+0x9c>)
 800f6ba:	4819      	ldr	r0, [pc, #100]	; (800f720 <tcp_recved+0x98>)
 800f6bc:	f00e f808 	bl	801d6d0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6c4:	887b      	ldrh	r3, [r7, #2]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f6ca:	89fb      	ldrh	r3, [r7, #14]
 800f6cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f6d0:	d804      	bhi.n	800f6dc <tcp_recved+0x54>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6d6:	89fa      	ldrh	r2, [r7, #14]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d204      	bcs.n	800f6e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f6e2:	851a      	strh	r2, [r3, #40]	; 0x28
 800f6e4:	e002      	b.n	800f6ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	89fa      	ldrh	r2, [r7, #14]
 800f6ea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7ff ff71 	bl	800f5d4 <tcp_update_rcv_ann_wnd>
 800f6f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f6fa:	d309      	bcc.n	800f710 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	8b5b      	ldrh	r3, [r3, #26]
 800f700:	f043 0302 	orr.w	r3, r3, #2
 800f704:	b29a      	uxth	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f004 fcc6 	bl	801409c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	0801ff04 	.word	0x0801ff04
 800f71c:	080201a0 	.word	0x080201a0
 800f720:	0801ff48 	.word	0x0801ff48
 800f724:	080201b8 	.word	0x080201b8

0800f728 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f732:	4b1e      	ldr	r3, [pc, #120]	; (800f7ac <tcp_new_port+0x84>)
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	3301      	adds	r3, #1
 800f738:	b29a      	uxth	r2, r3
 800f73a:	4b1c      	ldr	r3, [pc, #112]	; (800f7ac <tcp_new_port+0x84>)
 800f73c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f73e:	4b1b      	ldr	r3, [pc, #108]	; (800f7ac <tcp_new_port+0x84>)
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f746:	4293      	cmp	r3, r2
 800f748:	d103      	bne.n	800f752 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f74a:	4b18      	ldr	r3, [pc, #96]	; (800f7ac <tcp_new_port+0x84>)
 800f74c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f750:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f752:	2300      	movs	r3, #0
 800f754:	71fb      	strb	r3, [r7, #7]
 800f756:	e01e      	b.n	800f796 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	4a15      	ldr	r2, [pc, #84]	; (800f7b0 <tcp_new_port+0x88>)
 800f75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	603b      	str	r3, [r7, #0]
 800f764:	e011      	b.n	800f78a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	8ada      	ldrh	r2, [r3, #22]
 800f76a:	4b10      	ldr	r3, [pc, #64]	; (800f7ac <tcp_new_port+0x84>)
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d108      	bne.n	800f784 <tcp_new_port+0x5c>
        n++;
 800f772:	88bb      	ldrh	r3, [r7, #4]
 800f774:	3301      	adds	r3, #1
 800f776:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f778:	88bb      	ldrh	r3, [r7, #4]
 800f77a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f77e:	d3d8      	bcc.n	800f732 <tcp_new_port+0xa>
          return 0;
 800f780:	2300      	movs	r3, #0
 800f782:	e00d      	b.n	800f7a0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	603b      	str	r3, [r7, #0]
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d1ea      	bne.n	800f766 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f790:	79fb      	ldrb	r3, [r7, #7]
 800f792:	3301      	adds	r3, #1
 800f794:	71fb      	strb	r3, [r7, #7]
 800f796:	79fb      	ldrb	r3, [r7, #7]
 800f798:	2b03      	cmp	r3, #3
 800f79a:	d9dd      	bls.n	800f758 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f79c:	4b03      	ldr	r3, [pc, #12]	; (800f7ac <tcp_new_port+0x84>)
 800f79e:	881b      	ldrh	r3, [r3, #0]
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	20000024 	.word	0x20000024
 800f7b0:	080222c4 	.word	0x080222c4

0800f7b4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08a      	sub	sp, #40	; 0x28
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	603b      	str	r3, [r7, #0]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d109      	bne.n	800f7e2 <tcp_connect+0x2e>
 800f7ce:	4b7d      	ldr	r3, [pc, #500]	; (800f9c4 <tcp_connect+0x210>)
 800f7d0:	f240 4235 	movw	r2, #1077	; 0x435
 800f7d4:	497c      	ldr	r1, [pc, #496]	; (800f9c8 <tcp_connect+0x214>)
 800f7d6:	487d      	ldr	r0, [pc, #500]	; (800f9cc <tcp_connect+0x218>)
 800f7d8:	f00d ff7a 	bl	801d6d0 <iprintf>
 800f7dc:	f06f 030f 	mvn.w	r3, #15
 800f7e0:	e0ec      	b.n	800f9bc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d109      	bne.n	800f7fc <tcp_connect+0x48>
 800f7e8:	4b76      	ldr	r3, [pc, #472]	; (800f9c4 <tcp_connect+0x210>)
 800f7ea:	f240 4236 	movw	r2, #1078	; 0x436
 800f7ee:	4978      	ldr	r1, [pc, #480]	; (800f9d0 <tcp_connect+0x21c>)
 800f7f0:	4876      	ldr	r0, [pc, #472]	; (800f9cc <tcp_connect+0x218>)
 800f7f2:	f00d ff6d 	bl	801d6d0 <iprintf>
 800f7f6:	f06f 030f 	mvn.w	r3, #15
 800f7fa:	e0df      	b.n	800f9bc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	7d1b      	ldrb	r3, [r3, #20]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d009      	beq.n	800f818 <tcp_connect+0x64>
 800f804:	4b6f      	ldr	r3, [pc, #444]	; (800f9c4 <tcp_connect+0x210>)
 800f806:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f80a:	4972      	ldr	r1, [pc, #456]	; (800f9d4 <tcp_connect+0x220>)
 800f80c:	486f      	ldr	r0, [pc, #444]	; (800f9cc <tcp_connect+0x218>)
 800f80e:	f00d ff5f 	bl	801d6d0 <iprintf>
 800f812:	f06f 0309 	mvn.w	r3, #9
 800f816:	e0d1      	b.n	800f9bc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d002      	beq.n	800f824 <tcp_connect+0x70>
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	e000      	b.n	800f826 <tcp_connect+0x72>
 800f824:	2300      	movs	r3, #0
 800f826:	68fa      	ldr	r2, [r7, #12]
 800f828:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	88fa      	ldrh	r2, [r7, #6]
 800f82e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	7a1b      	ldrb	r3, [r3, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d006      	beq.n	800f846 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	7a1b      	ldrb	r3, [r3, #8]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7fe fd3f 	bl	800e2c0 <netif_get_by_index>
 800f842:	6278      	str	r0, [r7, #36]	; 0x24
 800f844:	e005      	b.n	800f852 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3304      	adds	r3, #4
 800f84a:	4618      	mov	r0, r3
 800f84c:	f007 f95e 	bl	8016b0c <ip4_route>
 800f850:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	2b00      	cmp	r3, #0
 800f856:	d102      	bne.n	800f85e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f858:	f06f 0303 	mvn.w	r3, #3
 800f85c:	e0ae      	b.n	800f9bc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d003      	beq.n	800f86c <tcp_connect+0xb8>
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d111      	bne.n	800f890 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d002      	beq.n	800f878 <tcp_connect+0xc4>
 800f872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f874:	3304      	adds	r3, #4
 800f876:	e000      	b.n	800f87a <tcp_connect+0xc6>
 800f878:	2300      	movs	r3, #0
 800f87a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d102      	bne.n	800f888 <tcp_connect+0xd4>
      return ERR_RTE;
 800f882:	f06f 0303 	mvn.w	r3, #3
 800f886:	e099      	b.n	800f9bc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	8adb      	ldrh	r3, [r3, #22]
 800f894:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	8adb      	ldrh	r3, [r3, #22]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d10c      	bne.n	800f8b8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f89e:	f7ff ff43 	bl	800f728 <tcp_new_port>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	8adb      	ldrh	r3, [r3, #22]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d102      	bne.n	800f8b8 <tcp_connect+0x104>
      return ERR_BUF;
 800f8b2:	f06f 0301 	mvn.w	r3, #1
 800f8b6:	e081      	b.n	800f9bc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	f001 f867 	bl	801098c <tcp_next_iss>
 800f8be:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	697a      	ldr	r2, [r7, #20]
 800f8ca:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	1e5a      	subs	r2, r3, #1
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	1e5a      	subs	r2, r3, #1
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	1e5a      	subs	r2, r3, #1
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f8ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f902:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f90c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3304      	adds	r3, #4
 800f916:	461a      	mov	r2, r3
 800f918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f91a:	f001 f85d 	bl	80109d8 <tcp_eff_send_mss_netif>
 800f91e:	4603      	mov	r3, r0
 800f920:	461a      	mov	r2, r3
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2201      	movs	r2, #1
 800f92a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	683a      	ldr	r2, [r7, #0]
 800f932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f936:	2102      	movs	r1, #2
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	f004 fac1 	bl	8013ec0 <tcp_enqueue_flags>
 800f93e:	4603      	mov	r3, r0
 800f940:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f942:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d136      	bne.n	800f9b8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2202      	movs	r2, #2
 800f94e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f950:	8b7b      	ldrh	r3, [r7, #26]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d021      	beq.n	800f99a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f956:	4b20      	ldr	r3, [pc, #128]	; (800f9d8 <tcp_connect+0x224>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d105      	bne.n	800f96c <tcp_connect+0x1b8>
 800f960:	4b1d      	ldr	r3, [pc, #116]	; (800f9d8 <tcp_connect+0x224>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	4a1c      	ldr	r2, [pc, #112]	; (800f9d8 <tcp_connect+0x224>)
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	e013      	b.n	800f994 <tcp_connect+0x1e0>
 800f96c:	4b1a      	ldr	r3, [pc, #104]	; (800f9d8 <tcp_connect+0x224>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	623b      	str	r3, [r7, #32]
 800f972:	e00c      	b.n	800f98e <tcp_connect+0x1da>
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d104      	bne.n	800f988 <tcp_connect+0x1d4>
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	68da      	ldr	r2, [r3, #12]
 800f982:	6a3b      	ldr	r3, [r7, #32]
 800f984:	60da      	str	r2, [r3, #12]
 800f986:	e005      	b.n	800f994 <tcp_connect+0x1e0>
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	623b      	str	r3, [r7, #32]
 800f98e:	6a3b      	ldr	r3, [r7, #32]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1ef      	bne.n	800f974 <tcp_connect+0x1c0>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2200      	movs	r2, #0
 800f998:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f99a:	4b10      	ldr	r3, [pc, #64]	; (800f9dc <tcp_connect+0x228>)
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	60da      	str	r2, [r3, #12]
 800f9a2:	4a0e      	ldr	r2, [pc, #56]	; (800f9dc <tcp_connect+0x228>)
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6013      	str	r3, [r2, #0]
 800f9a8:	f005 faee 	bl	8014f88 <tcp_timer_needed>
 800f9ac:	4b0c      	ldr	r3, [pc, #48]	; (800f9e0 <tcp_connect+0x22c>)
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f004 fb72 	bl	801409c <tcp_output>
  }
  return ret;
 800f9b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3728      	adds	r7, #40	; 0x28
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0801ff04 	.word	0x0801ff04
 800f9c8:	080201e0 	.word	0x080201e0
 800f9cc:	0801ff48 	.word	0x0801ff48
 800f9d0:	080201fc 	.word	0x080201fc
 800f9d4:	08020218 	.word	0x08020218
 800f9d8:	200113c0 	.word	0x200113c0
 800f9dc:	200113c8 	.word	0x200113c8
 800f9e0:	200113d0 	.word	0x200113d0

0800f9e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f9e4:	b5b0      	push	{r4, r5, r7, lr}
 800f9e6:	b090      	sub	sp, #64	; 0x40
 800f9e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f9f0:	4b94      	ldr	r3, [pc, #592]	; (800fc44 <tcp_slowtmr+0x260>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	4a93      	ldr	r2, [pc, #588]	; (800fc44 <tcp_slowtmr+0x260>)
 800f9f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f9fa:	4b93      	ldr	r3, [pc, #588]	; (800fc48 <tcp_slowtmr+0x264>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	b2da      	uxtb	r2, r3
 800fa02:	4b91      	ldr	r3, [pc, #580]	; (800fc48 <tcp_slowtmr+0x264>)
 800fa04:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fa0a:	4b90      	ldr	r3, [pc, #576]	; (800fc4c <tcp_slowtmr+0x268>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fa10:	e29d      	b.n	800ff4e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa14:	7d1b      	ldrb	r3, [r3, #20]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d106      	bne.n	800fa28 <tcp_slowtmr+0x44>
 800fa1a:	4b8d      	ldr	r3, [pc, #564]	; (800fc50 <tcp_slowtmr+0x26c>)
 800fa1c:	f240 42be 	movw	r2, #1214	; 0x4be
 800fa20:	498c      	ldr	r1, [pc, #560]	; (800fc54 <tcp_slowtmr+0x270>)
 800fa22:	488d      	ldr	r0, [pc, #564]	; (800fc58 <tcp_slowtmr+0x274>)
 800fa24:	f00d fe54 	bl	801d6d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	7d1b      	ldrb	r3, [r3, #20]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d106      	bne.n	800fa3e <tcp_slowtmr+0x5a>
 800fa30:	4b87      	ldr	r3, [pc, #540]	; (800fc50 <tcp_slowtmr+0x26c>)
 800fa32:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fa36:	4989      	ldr	r1, [pc, #548]	; (800fc5c <tcp_slowtmr+0x278>)
 800fa38:	4887      	ldr	r0, [pc, #540]	; (800fc58 <tcp_slowtmr+0x274>)
 800fa3a:	f00d fe49 	bl	801d6d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	7d1b      	ldrb	r3, [r3, #20]
 800fa42:	2b0a      	cmp	r3, #10
 800fa44:	d106      	bne.n	800fa54 <tcp_slowtmr+0x70>
 800fa46:	4b82      	ldr	r3, [pc, #520]	; (800fc50 <tcp_slowtmr+0x26c>)
 800fa48:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fa4c:	4984      	ldr	r1, [pc, #528]	; (800fc60 <tcp_slowtmr+0x27c>)
 800fa4e:	4882      	ldr	r0, [pc, #520]	; (800fc58 <tcp_slowtmr+0x274>)
 800fa50:	f00d fe3e 	bl	801d6d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	7f9a      	ldrb	r2, [r3, #30]
 800fa58:	4b7b      	ldr	r3, [pc, #492]	; (800fc48 <tcp_slowtmr+0x264>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d105      	bne.n	800fa6c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fa6a:	e270      	b.n	800ff4e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fa6c:	4b76      	ldr	r3, [pc, #472]	; (800fc48 <tcp_slowtmr+0x264>)
 800fa6e:	781a      	ldrb	r2, [r3, #0]
 800fa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa72:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	7d1b      	ldrb	r3, [r3, #20]
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	d10a      	bne.n	800fa9e <tcp_slowtmr+0xba>
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa8e:	2b05      	cmp	r3, #5
 800fa90:	d905      	bls.n	800fa9e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fa92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa96:	3301      	adds	r3, #1
 800fa98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa9c:	e11e      	b.n	800fcdc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800faa4:	2b0b      	cmp	r3, #11
 800faa6:	d905      	bls.n	800fab4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800faa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faac:	3301      	adds	r3, #1
 800faae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fab2:	e113      	b.n	800fcdc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d075      	beq.n	800fbaa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d006      	beq.n	800fad4 <tcp_slowtmr+0xf0>
 800fac6:	4b62      	ldr	r3, [pc, #392]	; (800fc50 <tcp_slowtmr+0x26c>)
 800fac8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800facc:	4965      	ldr	r1, [pc, #404]	; (800fc64 <tcp_slowtmr+0x280>)
 800face:	4862      	ldr	r0, [pc, #392]	; (800fc58 <tcp_slowtmr+0x274>)
 800fad0:	f00d fdfe 	bl	801d6d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d106      	bne.n	800faea <tcp_slowtmr+0x106>
 800fadc:	4b5c      	ldr	r3, [pc, #368]	; (800fc50 <tcp_slowtmr+0x26c>)
 800fade:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fae2:	4961      	ldr	r1, [pc, #388]	; (800fc68 <tcp_slowtmr+0x284>)
 800fae4:	485c      	ldr	r0, [pc, #368]	; (800fc58 <tcp_slowtmr+0x274>)
 800fae6:	f00d fdf3 	bl	801d6d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800faea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800faf0:	2b0b      	cmp	r3, #11
 800faf2:	d905      	bls.n	800fb00 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800faf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faf8:	3301      	adds	r3, #1
 800fafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fafe:	e0ed      	b.n	800fcdc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb06:	3b01      	subs	r3, #1
 800fb08:	4a58      	ldr	r2, [pc, #352]	; (800fc6c <tcp_slowtmr+0x288>)
 800fb0a:	5cd3      	ldrb	r3, [r2, r3]
 800fb0c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb14:	7c7a      	ldrb	r2, [r7, #17]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d907      	bls.n	800fb2a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb20:	3301      	adds	r3, #1
 800fb22:	b2da      	uxtb	r2, r3
 800fb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb30:	7c7a      	ldrb	r2, [r7, #17]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	f200 80d2 	bhi.w	800fcdc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fb38:	2301      	movs	r3, #1
 800fb3a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d108      	bne.n	800fb58 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fb46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb48:	f005 f950 	bl	8014dec <tcp_zero_window_probe>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d014      	beq.n	800fb7c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fb52:	2300      	movs	r3, #0
 800fb54:	623b      	str	r3, [r7, #32]
 800fb56:	e011      	b.n	800fb7c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb5e:	4619      	mov	r1, r3
 800fb60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb62:	f004 f815 	bl	8013b90 <tcp_split_unsent_seg>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d107      	bne.n	800fb7c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fb6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb6e:	f004 fa95 	bl	801409c <tcp_output>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d101      	bne.n	800fb7c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fb7c:	6a3b      	ldr	r3, [r7, #32]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f000 80ac 	beq.w	800fcdc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	2200      	movs	r2, #0
 800fb88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb92:	2b06      	cmp	r3, #6
 800fb94:	f200 80a2 	bhi.w	800fcdc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb9e:	3301      	adds	r3, #1
 800fba0:	b2da      	uxtb	r2, r3
 800fba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fba8:	e098      	b.n	800fcdc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	db0f      	blt.n	800fbd4 <tcp_slowtmr+0x1f0>
 800fbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d008      	beq.n	800fbd4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	3301      	adds	r3, #1
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	b21a      	sxth	r2, r3
 800fbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbdc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	db7b      	blt.n	800fcdc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fbe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbe6:	f004 fd4b 	bl	8014680 <tcp_rexmit_rto_prepare>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d007      	beq.n	800fc00 <tcp_slowtmr+0x21c>
 800fbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d171      	bne.n	800fcdc <tcp_slowtmr+0x2f8>
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d06d      	beq.n	800fcdc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	7d1b      	ldrb	r3, [r3, #20]
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	d03a      	beq.n	800fc7e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc0e:	2b0c      	cmp	r3, #12
 800fc10:	bf28      	it	cs
 800fc12:	230c      	movcs	r3, #12
 800fc14:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc1c:	10db      	asrs	r3, r3, #3
 800fc1e:	b21b      	sxth	r3, r3
 800fc20:	461a      	mov	r2, r3
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc28:	4413      	add	r3, r2
 800fc2a:	7efa      	ldrb	r2, [r7, #27]
 800fc2c:	4910      	ldr	r1, [pc, #64]	; (800fc70 <tcp_slowtmr+0x28c>)
 800fc2e:	5c8a      	ldrb	r2, [r1, r2]
 800fc30:	4093      	lsls	r3, r2
 800fc32:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	dc1a      	bgt.n	800fc74 <tcp_slowtmr+0x290>
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	b21a      	sxth	r2, r3
 800fc42:	e019      	b.n	800fc78 <tcp_slowtmr+0x294>
 800fc44:	200113bc 	.word	0x200113bc
 800fc48:	200113d2 	.word	0x200113d2
 800fc4c:	200113c8 	.word	0x200113c8
 800fc50:	0801ff04 	.word	0x0801ff04
 800fc54:	08020248 	.word	0x08020248
 800fc58:	0801ff48 	.word	0x0801ff48
 800fc5c:	08020274 	.word	0x08020274
 800fc60:	080202a0 	.word	0x080202a0
 800fc64:	080202d0 	.word	0x080202d0
 800fc68:	08020304 	.word	0x08020304
 800fc6c:	080222bc 	.word	0x080222bc
 800fc70:	080222ac 	.word	0x080222ac
 800fc74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc80:	2200      	movs	r2, #0
 800fc82:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc90:	4293      	cmp	r3, r2
 800fc92:	bf28      	it	cs
 800fc94:	4613      	movcs	r3, r2
 800fc96:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fc98:	8a7b      	ldrh	r3, [r7, #18]
 800fc9a:	085b      	lsrs	r3, r3, #1
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcae:	005b      	lsls	r3, r3, #1
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d206      	bcs.n	800fcc4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcba:	005b      	lsls	r3, r3, #1
 800fcbc:	b29a      	uxth	r2, r3
 800fcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fcd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcd8:	f004 fd42 	bl	8014760 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcde:	7d1b      	ldrb	r3, [r3, #20]
 800fce0:	2b06      	cmp	r3, #6
 800fce2:	d111      	bne.n	800fd08 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce6:	8b5b      	ldrh	r3, [r3, #26]
 800fce8:	f003 0310 	and.w	r3, r3, #16
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d00b      	beq.n	800fd08 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcf0:	4b9c      	ldr	r3, [pc, #624]	; (800ff64 <tcp_slowtmr+0x580>)
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf6:	6a1b      	ldr	r3, [r3, #32]
 800fcf8:	1ad3      	subs	r3, r2, r3
 800fcfa:	2b28      	cmp	r3, #40	; 0x28
 800fcfc:	d904      	bls.n	800fd08 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fcfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd02:	3301      	adds	r3, #1
 800fd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0a:	7a5b      	ldrb	r3, [r3, #9]
 800fd0c:	f003 0308 	and.w	r3, r3, #8
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d04a      	beq.n	800fdaa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd16:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fd18:	2b04      	cmp	r3, #4
 800fd1a:	d003      	beq.n	800fd24 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fd20:	2b07      	cmp	r3, #7
 800fd22:	d142      	bne.n	800fdaa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd24:	4b8f      	ldr	r3, [pc, #572]	; (800ff64 <tcp_slowtmr+0x580>)
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2a:	6a1b      	ldr	r3, [r3, #32]
 800fd2c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd30:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fd34:	4b8c      	ldr	r3, [pc, #560]	; (800ff68 <tcp_slowtmr+0x584>)
 800fd36:	440b      	add	r3, r1
 800fd38:	498c      	ldr	r1, [pc, #560]	; (800ff6c <tcp_slowtmr+0x588>)
 800fd3a:	fba1 1303 	umull	r1, r3, r1, r3
 800fd3e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d90a      	bls.n	800fd5a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fd44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd48:	3301      	adds	r3, #1
 800fd4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fd4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd52:	3301      	adds	r3, #1
 800fd54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd58:	e027      	b.n	800fdaa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd5a:	4b82      	ldr	r3, [pc, #520]	; (800ff64 <tcp_slowtmr+0x580>)
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd60:	6a1b      	ldr	r3, [r3, #32]
 800fd62:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd66:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd70:	4618      	mov	r0, r3
 800fd72:	4b7f      	ldr	r3, [pc, #508]	; (800ff70 <tcp_slowtmr+0x58c>)
 800fd74:	fb00 f303 	mul.w	r3, r0, r3
 800fd78:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fd7a:	497c      	ldr	r1, [pc, #496]	; (800ff6c <tcp_slowtmr+0x588>)
 800fd7c:	fba1 1303 	umull	r1, r3, r1, r3
 800fd80:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d911      	bls.n	800fdaa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fd86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd88:	f004 fff0 	bl	8014d6c <tcp_keepalive>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fd92:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d107      	bne.n	800fdaa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fda0:	3301      	adds	r3, #1
 800fda2:	b2da      	uxtb	r2, r3
 800fda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d011      	beq.n	800fdd6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fdb2:	4b6c      	ldr	r3, [pc, #432]	; (800ff64 <tcp_slowtmr+0x580>)
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb8:	6a1b      	ldr	r3, [r3, #32]
 800fdba:	1ad2      	subs	r2, r2, r3
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	005b      	lsls	r3, r3, #1
 800fdc8:	440b      	add	r3, r1
 800fdca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d302      	bcc.n	800fdd6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fdd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdd2:	f000 feab 	bl	8010b2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd8:	7d1b      	ldrb	r3, [r3, #20]
 800fdda:	2b03      	cmp	r3, #3
 800fddc:	d10b      	bne.n	800fdf6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fdde:	4b61      	ldr	r3, [pc, #388]	; (800ff64 <tcp_slowtmr+0x580>)
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde4:	6a1b      	ldr	r3, [r3, #32]
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	2b28      	cmp	r3, #40	; 0x28
 800fdea:	d904      	bls.n	800fdf6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fdec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	7d1b      	ldrb	r3, [r3, #20]
 800fdfa:	2b09      	cmp	r3, #9
 800fdfc:	d10b      	bne.n	800fe16 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fdfe:	4b59      	ldr	r3, [pc, #356]	; (800ff64 <tcp_slowtmr+0x580>)
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe04:	6a1b      	ldr	r3, [r3, #32]
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	2bf0      	cmp	r3, #240	; 0xf0
 800fe0a:	d904      	bls.n	800fe16 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fe0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe10:	3301      	adds	r3, #1
 800fe12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d060      	beq.n	800fee0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fe1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe24:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fe26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe28:	f000 fccc 	bl	80107c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fe2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d010      	beq.n	800fe54 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fe32:	4b50      	ldr	r3, [pc, #320]	; (800ff74 <tcp_slowtmr+0x590>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d106      	bne.n	800fe4a <tcp_slowtmr+0x466>
 800fe3c:	4b4e      	ldr	r3, [pc, #312]	; (800ff78 <tcp_slowtmr+0x594>)
 800fe3e:	f240 526d 	movw	r2, #1389	; 0x56d
 800fe42:	494e      	ldr	r1, [pc, #312]	; (800ff7c <tcp_slowtmr+0x598>)
 800fe44:	484e      	ldr	r0, [pc, #312]	; (800ff80 <tcp_slowtmr+0x59c>)
 800fe46:	f00d fc43 	bl	801d6d0 <iprintf>
        prev->next = pcb->next;
 800fe4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4c:	68da      	ldr	r2, [r3, #12]
 800fe4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe50:	60da      	str	r2, [r3, #12]
 800fe52:	e00f      	b.n	800fe74 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fe54:	4b47      	ldr	r3, [pc, #284]	; (800ff74 <tcp_slowtmr+0x590>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d006      	beq.n	800fe6c <tcp_slowtmr+0x488>
 800fe5e:	4b46      	ldr	r3, [pc, #280]	; (800ff78 <tcp_slowtmr+0x594>)
 800fe60:	f240 5271 	movw	r2, #1393	; 0x571
 800fe64:	4947      	ldr	r1, [pc, #284]	; (800ff84 <tcp_slowtmr+0x5a0>)
 800fe66:	4846      	ldr	r0, [pc, #280]	; (800ff80 <tcp_slowtmr+0x59c>)
 800fe68:	f00d fc32 	bl	801d6d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fe6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	4a40      	ldr	r2, [pc, #256]	; (800ff74 <tcp_slowtmr+0x590>)
 800fe72:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fe74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d013      	beq.n	800fea4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fe80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe82:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fe84:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fe86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe88:	3304      	adds	r3, #4
 800fe8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe8c:	8ad2      	ldrh	r2, [r2, #22]
 800fe8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe90:	8b09      	ldrh	r1, [r1, #24]
 800fe92:	9102      	str	r1, [sp, #8]
 800fe94:	9201      	str	r2, [sp, #4]
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	462b      	mov	r3, r5
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	4601      	mov	r1, r0
 800fe9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fea0:	f004 feb0 	bl	8014c04 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea6:	691b      	ldr	r3, [r3, #16]
 800fea8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800feaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feac:	7d1b      	ldrb	r3, [r3, #20]
 800feae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800feb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800feb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800feba:	6838      	ldr	r0, [r7, #0]
 800febc:	f7ff f83a 	bl	800ef34 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fec0:	4b31      	ldr	r3, [pc, #196]	; (800ff88 <tcp_slowtmr+0x5a4>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d004      	beq.n	800fed6 <tcp_slowtmr+0x4f2>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f06f 010c 	mvn.w	r1, #12
 800fed2:	68b8      	ldr	r0, [r7, #8]
 800fed4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fed6:	4b2c      	ldr	r3, [pc, #176]	; (800ff88 <tcp_slowtmr+0x5a4>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d037      	beq.n	800ff4e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fede:	e592      	b.n	800fa06 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800feea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feec:	7f1b      	ldrb	r3, [r3, #28]
 800feee:	3301      	adds	r3, #1
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef8:	7f1a      	ldrb	r2, [r3, #28]
 800fefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefc:	7f5b      	ldrb	r3, [r3, #29]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d325      	bcc.n	800ff4e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ff02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff04:	2200      	movs	r2, #0
 800ff06:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ff08:	4b1f      	ldr	r3, [pc, #124]	; (800ff88 <tcp_slowtmr+0x5a4>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ff0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00b      	beq.n	800ff30 <tcp_slowtmr+0x54c>
 800ff18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff20:	6912      	ldr	r2, [r2, #16]
 800ff22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff24:	4610      	mov	r0, r2
 800ff26:	4798      	blx	r3
 800ff28:	4603      	mov	r3, r0
 800ff2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ff2e:	e002      	b.n	800ff36 <tcp_slowtmr+0x552>
 800ff30:	2300      	movs	r3, #0
 800ff32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ff36:	4b14      	ldr	r3, [pc, #80]	; (800ff88 <tcp_slowtmr+0x5a4>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d000      	beq.n	800ff40 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ff3e:	e562      	b.n	800fa06 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ff40:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d102      	bne.n	800ff4e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ff48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff4a:	f004 f8a7 	bl	801409c <tcp_output>
  while (pcb != NULL) {
 800ff4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f47f ad5e 	bne.w	800fa12 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ff56:	2300      	movs	r3, #0
 800ff58:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ff5a:	4b0c      	ldr	r3, [pc, #48]	; (800ff8c <tcp_slowtmr+0x5a8>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ff60:	e069      	b.n	8010036 <tcp_slowtmr+0x652>
 800ff62:	bf00      	nop
 800ff64:	200113bc 	.word	0x200113bc
 800ff68:	000a4cb8 	.word	0x000a4cb8
 800ff6c:	10624dd3 	.word	0x10624dd3
 800ff70:	000124f8 	.word	0x000124f8
 800ff74:	200113c8 	.word	0x200113c8
 800ff78:	0801ff04 	.word	0x0801ff04
 800ff7c:	0802033c 	.word	0x0802033c
 800ff80:	0801ff48 	.word	0x0801ff48
 800ff84:	08020368 	.word	0x08020368
 800ff88:	200113d0 	.word	0x200113d0
 800ff8c:	200113cc 	.word	0x200113cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	7d1b      	ldrb	r3, [r3, #20]
 800ff94:	2b0a      	cmp	r3, #10
 800ff96:	d006      	beq.n	800ffa6 <tcp_slowtmr+0x5c2>
 800ff98:	4b2b      	ldr	r3, [pc, #172]	; (8010048 <tcp_slowtmr+0x664>)
 800ff9a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ff9e:	492b      	ldr	r1, [pc, #172]	; (801004c <tcp_slowtmr+0x668>)
 800ffa0:	482b      	ldr	r0, [pc, #172]	; (8010050 <tcp_slowtmr+0x66c>)
 800ffa2:	f00d fb95 	bl	801d6d0 <iprintf>
    pcb_remove = 0;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ffac:	4b29      	ldr	r3, [pc, #164]	; (8010054 <tcp_slowtmr+0x670>)
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb2:	6a1b      	ldr	r3, [r3, #32]
 800ffb4:	1ad3      	subs	r3, r2, r3
 800ffb6:	2bf0      	cmp	r3, #240	; 0xf0
 800ffb8:	d904      	bls.n	800ffc4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ffba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ffc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d02f      	beq.n	801002c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ffcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffce:	f000 fbf9 	bl	80107c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ffd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d010      	beq.n	800fffa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ffd8:	4b1f      	ldr	r3, [pc, #124]	; (8010058 <tcp_slowtmr+0x674>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d106      	bne.n	800fff0 <tcp_slowtmr+0x60c>
 800ffe2:	4b19      	ldr	r3, [pc, #100]	; (8010048 <tcp_slowtmr+0x664>)
 800ffe4:	f240 52af 	movw	r2, #1455	; 0x5af
 800ffe8:	491c      	ldr	r1, [pc, #112]	; (801005c <tcp_slowtmr+0x678>)
 800ffea:	4819      	ldr	r0, [pc, #100]	; (8010050 <tcp_slowtmr+0x66c>)
 800ffec:	f00d fb70 	bl	801d6d0 <iprintf>
        prev->next = pcb->next;
 800fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff2:	68da      	ldr	r2, [r3, #12]
 800fff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff6:	60da      	str	r2, [r3, #12]
 800fff8:	e00f      	b.n	801001a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fffa:	4b17      	ldr	r3, [pc, #92]	; (8010058 <tcp_slowtmr+0x674>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010000:	429a      	cmp	r2, r3
 8010002:	d006      	beq.n	8010012 <tcp_slowtmr+0x62e>
 8010004:	4b10      	ldr	r3, [pc, #64]	; (8010048 <tcp_slowtmr+0x664>)
 8010006:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801000a:	4915      	ldr	r1, [pc, #84]	; (8010060 <tcp_slowtmr+0x67c>)
 801000c:	4810      	ldr	r0, [pc, #64]	; (8010050 <tcp_slowtmr+0x66c>)
 801000e:	f00d fb5f 	bl	801d6d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	4a10      	ldr	r2, [pc, #64]	; (8010058 <tcp_slowtmr+0x674>)
 8010018:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801001a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801001e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010024:	69f8      	ldr	r0, [r7, #28]
 8010026:	f7fe ff85 	bl	800ef34 <tcp_free>
 801002a:	e004      	b.n	8010036 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1a9      	bne.n	800ff90 <tcp_slowtmr+0x5ac>
    }
  }
}
 801003c:	bf00      	nop
 801003e:	bf00      	nop
 8010040:	3730      	adds	r7, #48	; 0x30
 8010042:	46bd      	mov	sp, r7
 8010044:	bdb0      	pop	{r4, r5, r7, pc}
 8010046:	bf00      	nop
 8010048:	0801ff04 	.word	0x0801ff04
 801004c:	08020394 	.word	0x08020394
 8010050:	0801ff48 	.word	0x0801ff48
 8010054:	200113bc 	.word	0x200113bc
 8010058:	200113cc 	.word	0x200113cc
 801005c:	080203c4 	.word	0x080203c4
 8010060:	080203ec 	.word	0x080203ec

08010064 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801006a:	4b2d      	ldr	r3, [pc, #180]	; (8010120 <tcp_fasttmr+0xbc>)
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	3301      	adds	r3, #1
 8010070:	b2da      	uxtb	r2, r3
 8010072:	4b2b      	ldr	r3, [pc, #172]	; (8010120 <tcp_fasttmr+0xbc>)
 8010074:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010076:	4b2b      	ldr	r3, [pc, #172]	; (8010124 <tcp_fasttmr+0xc0>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801007c:	e048      	b.n	8010110 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	7f9a      	ldrb	r2, [r3, #30]
 8010082:	4b27      	ldr	r3, [pc, #156]	; (8010120 <tcp_fasttmr+0xbc>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	429a      	cmp	r2, r3
 8010088:	d03f      	beq.n	801010a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801008a:	4b25      	ldr	r3, [pc, #148]	; (8010120 <tcp_fasttmr+0xbc>)
 801008c:	781a      	ldrb	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	8b5b      	ldrh	r3, [r3, #26]
 8010096:	f003 0301 	and.w	r3, r3, #1
 801009a:	2b00      	cmp	r3, #0
 801009c:	d010      	beq.n	80100c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	8b5b      	ldrh	r3, [r3, #26]
 80100a2:	f043 0302 	orr.w	r3, r3, #2
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f003 fff5 	bl	801409c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	8b5b      	ldrh	r3, [r3, #26]
 80100b6:	f023 0303 	bic.w	r3, r3, #3
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	8b5b      	ldrh	r3, [r3, #26]
 80100c4:	f003 0308 	and.w	r3, r3, #8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d009      	beq.n	80100e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	8b5b      	ldrh	r3, [r3, #26]
 80100d0:	f023 0308 	bic.w	r3, r3, #8
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f7ff f8be 	bl	800f25c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d00a      	beq.n	8010104 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80100ee:	4b0e      	ldr	r3, [pc, #56]	; (8010128 <tcp_fasttmr+0xc4>)
 80100f0:	2200      	movs	r2, #0
 80100f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f819 	bl	801012c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80100fa:	4b0b      	ldr	r3, [pc, #44]	; (8010128 <tcp_fasttmr+0xc4>)
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d000      	beq.n	8010104 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010102:	e7b8      	b.n	8010076 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	607b      	str	r3, [r7, #4]
 8010108:	e002      	b.n	8010110 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d1b3      	bne.n	801007e <tcp_fasttmr+0x1a>
    }
  }
}
 8010116:	bf00      	nop
 8010118:	bf00      	nop
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	200113d2 	.word	0x200113d2
 8010124:	200113c8 	.word	0x200113c8
 8010128:	200113d0 	.word	0x200113d0

0801012c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801012c:	b590      	push	{r4, r7, lr}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d109      	bne.n	801014e <tcp_process_refused_data+0x22>
 801013a:	4b37      	ldr	r3, [pc, #220]	; (8010218 <tcp_process_refused_data+0xec>)
 801013c:	f240 6209 	movw	r2, #1545	; 0x609
 8010140:	4936      	ldr	r1, [pc, #216]	; (801021c <tcp_process_refused_data+0xf0>)
 8010142:	4837      	ldr	r0, [pc, #220]	; (8010220 <tcp_process_refused_data+0xf4>)
 8010144:	f00d fac4 	bl	801d6d0 <iprintf>
 8010148:	f06f 030f 	mvn.w	r3, #15
 801014c:	e060      	b.n	8010210 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010152:	7b5b      	ldrb	r3, [r3, #13]
 8010154:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801015a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2200      	movs	r2, #0
 8010160:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00b      	beq.n	8010184 <tcp_process_refused_data+0x58>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6918      	ldr	r0, [r3, #16]
 8010176:	2300      	movs	r3, #0
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	6879      	ldr	r1, [r7, #4]
 801017c:	47a0      	blx	r4
 801017e:	4603      	mov	r3, r0
 8010180:	73fb      	strb	r3, [r7, #15]
 8010182:	e007      	b.n	8010194 <tcp_process_refused_data+0x68>
 8010184:	2300      	movs	r3, #0
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	6879      	ldr	r1, [r7, #4]
 801018a:	2000      	movs	r0, #0
 801018c:	f000 f8a4 	bl	80102d8 <tcp_recv_null>
 8010190:	4603      	mov	r3, r0
 8010192:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d12a      	bne.n	80101f2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801019c:	7bbb      	ldrb	r3, [r7, #14]
 801019e:	f003 0320 	and.w	r3, r3, #32
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d033      	beq.n	801020e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80101ae:	d005      	beq.n	80101bc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101b4:	3301      	adds	r3, #1
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00b      	beq.n	80101de <tcp_process_refused_data+0xb2>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6918      	ldr	r0, [r3, #16]
 80101d0:	2300      	movs	r3, #0
 80101d2:	2200      	movs	r2, #0
 80101d4:	6879      	ldr	r1, [r7, #4]
 80101d6:	47a0      	blx	r4
 80101d8:	4603      	mov	r3, r0
 80101da:	73fb      	strb	r3, [r7, #15]
 80101dc:	e001      	b.n	80101e2 <tcp_process_refused_data+0xb6>
 80101de:	2300      	movs	r3, #0
 80101e0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80101e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101e6:	f113 0f0d 	cmn.w	r3, #13
 80101ea:	d110      	bne.n	801020e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80101ec:	f06f 030c 	mvn.w	r3, #12
 80101f0:	e00e      	b.n	8010210 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80101f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101f6:	f113 0f0d 	cmn.w	r3, #13
 80101fa:	d102      	bne.n	8010202 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80101fc:	f06f 030c 	mvn.w	r3, #12
 8010200:	e006      	b.n	8010210 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010208:	f06f 0304 	mvn.w	r3, #4
 801020c:	e000      	b.n	8010210 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	bd90      	pop	{r4, r7, pc}
 8010218:	0801ff04 	.word	0x0801ff04
 801021c:	08020414 	.word	0x08020414
 8010220:	0801ff48 	.word	0x0801ff48

08010224 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801022c:	e007      	b.n	801023e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 f80a 	bl	801024e <tcp_seg_free>
    seg = next;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d1f4      	bne.n	801022e <tcp_segs_free+0xa>
  }
}
 8010244:	bf00      	nop
 8010246:	bf00      	nop
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b082      	sub	sp, #8
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00c      	beq.n	8010276 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d004      	beq.n	801026e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe fbb7 	bl	800e9dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801026e:	6879      	ldr	r1, [r7, #4]
 8010270:	2003      	movs	r0, #3
 8010272:	f7fd fd0f 	bl	800dc94 <memp_free>
  }
}
 8010276:	bf00      	nop
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
	...

08010280 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b084      	sub	sp, #16
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d106      	bne.n	801029c <tcp_seg_copy+0x1c>
 801028e:	4b0f      	ldr	r3, [pc, #60]	; (80102cc <tcp_seg_copy+0x4c>)
 8010290:	f240 6282 	movw	r2, #1666	; 0x682
 8010294:	490e      	ldr	r1, [pc, #56]	; (80102d0 <tcp_seg_copy+0x50>)
 8010296:	480f      	ldr	r0, [pc, #60]	; (80102d4 <tcp_seg_copy+0x54>)
 8010298:	f00d fa1a 	bl	801d6d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801029c:	2003      	movs	r0, #3
 801029e:	f7fd fc83 	bl	800dba8 <memp_malloc>
 80102a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <tcp_seg_copy+0x2e>
    return NULL;
 80102aa:	2300      	movs	r3, #0
 80102ac:	e00a      	b.n	80102c4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80102ae:	2210      	movs	r2, #16
 80102b0:	6879      	ldr	r1, [r7, #4]
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f00d f9f6 	bl	801d6a4 <memcpy>
  pbuf_ref(cseg->p);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	f7fe fc33 	bl	800eb28 <pbuf_ref>
  return cseg;
 80102c2:	68fb      	ldr	r3, [r7, #12]
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	0801ff04 	.word	0x0801ff04
 80102d0:	08020458 	.word	0x08020458
 80102d4:	0801ff48 	.word	0x0801ff48

080102d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
 80102e4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d109      	bne.n	8010300 <tcp_recv_null+0x28>
 80102ec:	4b12      	ldr	r3, [pc, #72]	; (8010338 <tcp_recv_null+0x60>)
 80102ee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80102f2:	4912      	ldr	r1, [pc, #72]	; (801033c <tcp_recv_null+0x64>)
 80102f4:	4812      	ldr	r0, [pc, #72]	; (8010340 <tcp_recv_null+0x68>)
 80102f6:	f00d f9eb 	bl	801d6d0 <iprintf>
 80102fa:	f06f 030f 	mvn.w	r3, #15
 80102fe:	e016      	b.n	801032e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d009      	beq.n	801031a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	891b      	ldrh	r3, [r3, #8]
 801030a:	4619      	mov	r1, r3
 801030c:	68b8      	ldr	r0, [r7, #8]
 801030e:	f7ff f9bb 	bl	800f688 <tcp_recved>
    pbuf_free(p);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f7fe fb62 	bl	800e9dc <pbuf_free>
 8010318:	e008      	b.n	801032c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801031a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d104      	bne.n	801032c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010322:	68b8      	ldr	r0, [r7, #8]
 8010324:	f7ff f804 	bl	800f330 <tcp_close>
 8010328:	4603      	mov	r3, r0
 801032a:	e000      	b.n	801032e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	0801ff04 	.word	0x0801ff04
 801033c:	08020474 	.word	0x08020474
 8010340:	0801ff48 	.word	0x0801ff48

08010344 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010352:	2b00      	cmp	r3, #0
 8010354:	db01      	blt.n	801035a <tcp_kill_prio+0x16>
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	e000      	b.n	801035c <tcp_kill_prio+0x18>
 801035a:	237f      	movs	r3, #127	; 0x7f
 801035c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801035e:	7afb      	ldrb	r3, [r7, #11]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d034      	beq.n	80103ce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010364:	7afb      	ldrb	r3, [r7, #11]
 8010366:	3b01      	subs	r3, #1
 8010368:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801036e:	2300      	movs	r3, #0
 8010370:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010372:	4b19      	ldr	r3, [pc, #100]	; (80103d8 <tcp_kill_prio+0x94>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	617b      	str	r3, [r7, #20]
 8010378:	e01f      	b.n	80103ba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	7d5b      	ldrb	r3, [r3, #21]
 801037e:	7afa      	ldrb	r2, [r7, #11]
 8010380:	429a      	cmp	r2, r3
 8010382:	d80c      	bhi.n	801039e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010388:	7afa      	ldrb	r2, [r7, #11]
 801038a:	429a      	cmp	r2, r3
 801038c:	d112      	bne.n	80103b4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <tcp_kill_prio+0x98>)
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	6a1b      	ldr	r3, [r3, #32]
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	68fa      	ldr	r2, [r7, #12]
 801039a:	429a      	cmp	r2, r3
 801039c:	d80a      	bhi.n	80103b4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801039e:	4b0f      	ldr	r3, [pc, #60]	; (80103dc <tcp_kill_prio+0x98>)
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	6a1b      	ldr	r3, [r3, #32]
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	7d5b      	ldrb	r3, [r3, #21]
 80103b2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	617b      	str	r3, [r7, #20]
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1dc      	bne.n	801037a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d004      	beq.n	80103d0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80103c6:	6938      	ldr	r0, [r7, #16]
 80103c8:	f7ff f8f8 	bl	800f5bc <tcp_abort>
 80103cc:	e000      	b.n	80103d0 <tcp_kill_prio+0x8c>
    return;
 80103ce:	bf00      	nop
  }
}
 80103d0:	3718      	adds	r7, #24
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	200113c8 	.word	0x200113c8
 80103dc:	200113bc 	.word	0x200113bc

080103e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b086      	sub	sp, #24
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	4603      	mov	r3, r0
 80103e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80103ea:	79fb      	ldrb	r3, [r7, #7]
 80103ec:	2b08      	cmp	r3, #8
 80103ee:	d009      	beq.n	8010404 <tcp_kill_state+0x24>
 80103f0:	79fb      	ldrb	r3, [r7, #7]
 80103f2:	2b09      	cmp	r3, #9
 80103f4:	d006      	beq.n	8010404 <tcp_kill_state+0x24>
 80103f6:	4b1a      	ldr	r3, [pc, #104]	; (8010460 <tcp_kill_state+0x80>)
 80103f8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80103fc:	4919      	ldr	r1, [pc, #100]	; (8010464 <tcp_kill_state+0x84>)
 80103fe:	481a      	ldr	r0, [pc, #104]	; (8010468 <tcp_kill_state+0x88>)
 8010400:	f00d f966 	bl	801d6d0 <iprintf>

  inactivity = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010408:	2300      	movs	r3, #0
 801040a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801040c:	4b17      	ldr	r3, [pc, #92]	; (801046c <tcp_kill_state+0x8c>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	617b      	str	r3, [r7, #20]
 8010412:	e017      	b.n	8010444 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	7d1b      	ldrb	r3, [r3, #20]
 8010418:	79fa      	ldrb	r2, [r7, #7]
 801041a:	429a      	cmp	r2, r3
 801041c:	d10f      	bne.n	801043e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801041e:	4b14      	ldr	r3, [pc, #80]	; (8010470 <tcp_kill_state+0x90>)
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	6a1b      	ldr	r3, [r3, #32]
 8010426:	1ad3      	subs	r3, r2, r3
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	429a      	cmp	r2, r3
 801042c:	d807      	bhi.n	801043e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801042e:	4b10      	ldr	r3, [pc, #64]	; (8010470 <tcp_kill_state+0x90>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	6a1b      	ldr	r3, [r3, #32]
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	617b      	str	r3, [r7, #20]
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1e4      	bne.n	8010414 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d003      	beq.n	8010458 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010450:	2100      	movs	r1, #0
 8010452:	6938      	ldr	r0, [r7, #16]
 8010454:	f7fe fff4 	bl	800f440 <tcp_abandon>
  }
}
 8010458:	bf00      	nop
 801045a:	3718      	adds	r7, #24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	0801ff04 	.word	0x0801ff04
 8010464:	08020490 	.word	0x08020490
 8010468:	0801ff48 	.word	0x0801ff48
 801046c:	200113c8 	.word	0x200113c8
 8010470:	200113bc 	.word	0x200113bc

08010474 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801047a:	2300      	movs	r3, #0
 801047c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801047e:	2300      	movs	r3, #0
 8010480:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010482:	4b12      	ldr	r3, [pc, #72]	; (80104cc <tcp_kill_timewait+0x58>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	60fb      	str	r3, [r7, #12]
 8010488:	e012      	b.n	80104b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801048a:	4b11      	ldr	r3, [pc, #68]	; (80104d0 <tcp_kill_timewait+0x5c>)
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6a1b      	ldr	r3, [r3, #32]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	429a      	cmp	r2, r3
 8010498:	d807      	bhi.n	80104aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801049a:	4b0d      	ldr	r3, [pc, #52]	; (80104d0 <tcp_kill_timewait+0x5c>)
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	60fb      	str	r3, [r7, #12]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1e9      	bne.n	801048a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d002      	beq.n	80104c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80104bc:	68b8      	ldr	r0, [r7, #8]
 80104be:	f7ff f87d 	bl	800f5bc <tcp_abort>
  }
}
 80104c2:	bf00      	nop
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	200113cc 	.word	0x200113cc
 80104d0:	200113bc 	.word	0x200113bc

080104d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80104da:	4b10      	ldr	r3, [pc, #64]	; (801051c <tcp_handle_closepend+0x48>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80104e0:	e014      	b.n	801050c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8b5b      	ldrh	r3, [r3, #26]
 80104ec:	f003 0308 	and.w	r3, r3, #8
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d009      	beq.n	8010508 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b5b      	ldrh	r3, [r3, #26]
 80104f8:	f023 0308 	bic.w	r3, r3, #8
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7fe feaa 	bl	800f25c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d1e7      	bne.n	80104e2 <tcp_handle_closepend+0xe>
  }
}
 8010512:	bf00      	nop
 8010514:	bf00      	nop
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	200113c8 	.word	0x200113c8

08010520 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	4603      	mov	r3, r0
 8010528:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801052a:	2001      	movs	r0, #1
 801052c:	f7fd fb3c 	bl	800dba8 <memp_malloc>
 8010530:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d126      	bne.n	8010586 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010538:	f7ff ffcc 	bl	80104d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801053c:	f7ff ff9a 	bl	8010474 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010540:	2001      	movs	r0, #1
 8010542:	f7fd fb31 	bl	800dba8 <memp_malloc>
 8010546:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d11b      	bne.n	8010586 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801054e:	2009      	movs	r0, #9
 8010550:	f7ff ff46 	bl	80103e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010554:	2001      	movs	r0, #1
 8010556:	f7fd fb27 	bl	800dba8 <memp_malloc>
 801055a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d111      	bne.n	8010586 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010562:	2008      	movs	r0, #8
 8010564:	f7ff ff3c 	bl	80103e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010568:	2001      	movs	r0, #1
 801056a:	f7fd fb1d 	bl	800dba8 <memp_malloc>
 801056e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d107      	bne.n	8010586 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010576:	79fb      	ldrb	r3, [r7, #7]
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff fee3 	bl	8010344 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801057e:	2001      	movs	r0, #1
 8010580:	f7fd fb12 	bl	800dba8 <memp_malloc>
 8010584:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d03f      	beq.n	801060c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801058c:	229c      	movs	r2, #156	; 0x9c
 801058e:	2100      	movs	r1, #0
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f00d f895 	bl	801d6c0 <memset>
    pcb->prio = prio;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	79fa      	ldrb	r2, [r7, #7]
 801059a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80105a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80105ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	22ff      	movs	r2, #255	; 0xff
 80105ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f44f 7206 	mov.w	r2, #536	; 0x218
 80105c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2206      	movs	r2, #6
 80105c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2206      	movs	r2, #6
 80105d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2201      	movs	r2, #1
 80105de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80105e2:	4b0d      	ldr	r3, [pc, #52]	; (8010618 <tcp_alloc+0xf8>)
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80105ea:	4b0c      	ldr	r3, [pc, #48]	; (801061c <tcp_alloc+0xfc>)
 80105ec:	781a      	ldrb	r2, [r3, #0]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80105f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	4a08      	ldr	r2, [pc, #32]	; (8010620 <tcp_alloc+0x100>)
 8010600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	4a07      	ldr	r2, [pc, #28]	; (8010624 <tcp_alloc+0x104>)
 8010608:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801060c:	68fb      	ldr	r3, [r7, #12]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	200113bc 	.word	0x200113bc
 801061c:	200113d2 	.word	0x200113d2
 8010620:	080102d9 	.word	0x080102d9
 8010624:	006ddd00 	.word	0x006ddd00

08010628 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	4603      	mov	r3, r0
 8010630:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010632:	2040      	movs	r0, #64	; 0x40
 8010634:	f7ff ff74 	bl	8010520 <tcp_alloc>
 8010638:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801063a:	68fb      	ldr	r3, [r7, #12]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	683a      	ldr	r2, [r7, #0]
 8010658:	611a      	str	r2, [r3, #16]
  }
}
 801065a:	bf00      	nop
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
	...

08010668 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00e      	beq.n	8010696 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	7d1b      	ldrb	r3, [r3, #20]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d106      	bne.n	801068e <tcp_recv+0x26>
 8010680:	4b07      	ldr	r3, [pc, #28]	; (80106a0 <tcp_recv+0x38>)
 8010682:	f240 72df 	movw	r2, #2015	; 0x7df
 8010686:	4907      	ldr	r1, [pc, #28]	; (80106a4 <tcp_recv+0x3c>)
 8010688:	4807      	ldr	r0, [pc, #28]	; (80106a8 <tcp_recv+0x40>)
 801068a:	f00d f821 	bl	801d6d0 <iprintf>
    pcb->recv = recv;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010696:	bf00      	nop
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	0801ff04 	.word	0x0801ff04
 80106a4:	080204a0 	.word	0x080204a0
 80106a8:	0801ff48 	.word	0x0801ff48

080106ac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00e      	beq.n	80106da <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	7d1b      	ldrb	r3, [r3, #20]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d106      	bne.n	80106d2 <tcp_sent+0x26>
 80106c4:	4b07      	ldr	r3, [pc, #28]	; (80106e4 <tcp_sent+0x38>)
 80106c6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80106ca:	4907      	ldr	r1, [pc, #28]	; (80106e8 <tcp_sent+0x3c>)
 80106cc:	4807      	ldr	r0, [pc, #28]	; (80106ec <tcp_sent+0x40>)
 80106ce:	f00c ffff 	bl	801d6d0 <iprintf>
    pcb->sent = sent;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80106da:	bf00      	nop
 80106dc:	3708      	adds	r7, #8
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	0801ff04 	.word	0x0801ff04
 80106e8:	080204c8 	.word	0x080204c8
 80106ec:	0801ff48 	.word	0x0801ff48

080106f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00e      	beq.n	801071e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	7d1b      	ldrb	r3, [r3, #20]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d106      	bne.n	8010716 <tcp_err+0x26>
 8010708:	4b07      	ldr	r3, [pc, #28]	; (8010728 <tcp_err+0x38>)
 801070a:	f640 020d 	movw	r2, #2061	; 0x80d
 801070e:	4907      	ldr	r1, [pc, #28]	; (801072c <tcp_err+0x3c>)
 8010710:	4807      	ldr	r0, [pc, #28]	; (8010730 <tcp_err+0x40>)
 8010712:	f00c ffdd 	bl	801d6d0 <iprintf>
    pcb->errf = err;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	683a      	ldr	r2, [r7, #0]
 801071a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801071e:	bf00      	nop
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	0801ff04 	.word	0x0801ff04
 801072c:	080204f0 	.word	0x080204f0
 8010730:	0801ff48 	.word	0x0801ff48

08010734 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d008      	beq.n	8010756 <tcp_accept+0x22>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	7d1b      	ldrb	r3, [r3, #20]
 8010748:	2b01      	cmp	r3, #1
 801074a:	d104      	bne.n	8010756 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	683a      	ldr	r2, [r7, #0]
 8010754:	619a      	str	r2, [r3, #24]
  }
}
 8010756:	bf00      	nop
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
	...

08010764 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af00      	add	r7, sp, #0
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	4613      	mov	r3, r2
 8010770:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d107      	bne.n	8010788 <tcp_poll+0x24>
 8010778:	4b0e      	ldr	r3, [pc, #56]	; (80107b4 <tcp_poll+0x50>)
 801077a:	f640 023d 	movw	r2, #2109	; 0x83d
 801077e:	490e      	ldr	r1, [pc, #56]	; (80107b8 <tcp_poll+0x54>)
 8010780:	480e      	ldr	r0, [pc, #56]	; (80107bc <tcp_poll+0x58>)
 8010782:	f00c ffa5 	bl	801d6d0 <iprintf>
 8010786:	e011      	b.n	80107ac <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	7d1b      	ldrb	r3, [r3, #20]
 801078c:	2b01      	cmp	r3, #1
 801078e:	d106      	bne.n	801079e <tcp_poll+0x3a>
 8010790:	4b08      	ldr	r3, [pc, #32]	; (80107b4 <tcp_poll+0x50>)
 8010792:	f640 023e 	movw	r2, #2110	; 0x83e
 8010796:	490a      	ldr	r1, [pc, #40]	; (80107c0 <tcp_poll+0x5c>)
 8010798:	4808      	ldr	r0, [pc, #32]	; (80107bc <tcp_poll+0x58>)
 801079a:	f00c ff99 	bl	801d6d0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68ba      	ldr	r2, [r7, #8]
 80107a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	79fa      	ldrb	r2, [r7, #7]
 80107aa:	775a      	strb	r2, [r3, #29]
}
 80107ac:	3710      	adds	r7, #16
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	0801ff04 	.word	0x0801ff04
 80107b8:	08020518 	.word	0x08020518
 80107bc:	0801ff48 	.word	0x0801ff48
 80107c0:	08020530 	.word	0x08020530

080107c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d107      	bne.n	80107e2 <tcp_pcb_purge+0x1e>
 80107d2:	4b21      	ldr	r3, [pc, #132]	; (8010858 <tcp_pcb_purge+0x94>)
 80107d4:	f640 0251 	movw	r2, #2129	; 0x851
 80107d8:	4920      	ldr	r1, [pc, #128]	; (801085c <tcp_pcb_purge+0x98>)
 80107da:	4821      	ldr	r0, [pc, #132]	; (8010860 <tcp_pcb_purge+0x9c>)
 80107dc:	f00c ff78 	bl	801d6d0 <iprintf>
 80107e0:	e037      	b.n	8010852 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7d1b      	ldrb	r3, [r3, #20]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d033      	beq.n	8010852 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80107ee:	2b0a      	cmp	r3, #10
 80107f0:	d02f      	beq.n	8010852 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d02b      	beq.n	8010852 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d007      	beq.n	8010812 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010806:	4618      	mov	r0, r3
 8010808:	f7fe f8e8 	bl	800e9dc <pbuf_free>
      pcb->refused_data = NULL;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010816:	2b00      	cmp	r3, #0
 8010818:	d002      	beq.n	8010820 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 f986 	bl	8010b2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010826:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801082c:	4618      	mov	r0, r3
 801082e:	f7ff fcf9 	bl	8010224 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010836:	4618      	mov	r0, r3
 8010838:	f7ff fcf4 	bl	8010224 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2200      	movs	r2, #0
 8010840:	66da      	str	r2, [r3, #108]	; 0x6c
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	0801ff04 	.word	0x0801ff04
 801085c:	08020550 	.word	0x08020550
 8010860:	0801ff48 	.word	0x0801ff48

08010864 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d106      	bne.n	8010882 <tcp_pcb_remove+0x1e>
 8010874:	4b3e      	ldr	r3, [pc, #248]	; (8010970 <tcp_pcb_remove+0x10c>)
 8010876:	f640 0283 	movw	r2, #2179	; 0x883
 801087a:	493e      	ldr	r1, [pc, #248]	; (8010974 <tcp_pcb_remove+0x110>)
 801087c:	483e      	ldr	r0, [pc, #248]	; (8010978 <tcp_pcb_remove+0x114>)
 801087e:	f00c ff27 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d106      	bne.n	8010896 <tcp_pcb_remove+0x32>
 8010888:	4b39      	ldr	r3, [pc, #228]	; (8010970 <tcp_pcb_remove+0x10c>)
 801088a:	f640 0284 	movw	r2, #2180	; 0x884
 801088e:	493b      	ldr	r1, [pc, #236]	; (801097c <tcp_pcb_remove+0x118>)
 8010890:	4839      	ldr	r0, [pc, #228]	; (8010978 <tcp_pcb_remove+0x114>)
 8010892:	f00c ff1d 	bl	801d6d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	d105      	bne.n	80108ac <tcp_pcb_remove+0x48>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	68da      	ldr	r2, [r3, #12]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	601a      	str	r2, [r3, #0]
 80108aa:	e013      	b.n	80108d4 <tcp_pcb_remove+0x70>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	60fb      	str	r3, [r7, #12]
 80108b2:	e00c      	b.n	80108ce <tcp_pcb_remove+0x6a>
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	683a      	ldr	r2, [r7, #0]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d104      	bne.n	80108c8 <tcp_pcb_remove+0x64>
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	68da      	ldr	r2, [r3, #12]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	60da      	str	r2, [r3, #12]
 80108c6:	e005      	b.n	80108d4 <tcp_pcb_remove+0x70>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	60fb      	str	r3, [r7, #12]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1ef      	bne.n	80108b4 <tcp_pcb_remove+0x50>
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2200      	movs	r2, #0
 80108d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80108da:	6838      	ldr	r0, [r7, #0]
 80108dc:	f7ff ff72 	bl	80107c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	7d1b      	ldrb	r3, [r3, #20]
 80108e4:	2b0a      	cmp	r3, #10
 80108e6:	d013      	beq.n	8010910 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d00f      	beq.n	8010910 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	8b5b      	ldrh	r3, [r3, #26]
 80108f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d009      	beq.n	8010910 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	8b5b      	ldrh	r3, [r3, #26]
 8010900:	f043 0302 	orr.w	r3, r3, #2
 8010904:	b29a      	uxth	r2, r3
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801090a:	6838      	ldr	r0, [r7, #0]
 801090c:	f003 fbc6 	bl	801409c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	7d1b      	ldrb	r3, [r3, #20]
 8010914:	2b01      	cmp	r3, #1
 8010916:	d020      	beq.n	801095a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801091c:	2b00      	cmp	r3, #0
 801091e:	d006      	beq.n	801092e <tcp_pcb_remove+0xca>
 8010920:	4b13      	ldr	r3, [pc, #76]	; (8010970 <tcp_pcb_remove+0x10c>)
 8010922:	f640 0293 	movw	r2, #2195	; 0x893
 8010926:	4916      	ldr	r1, [pc, #88]	; (8010980 <tcp_pcb_remove+0x11c>)
 8010928:	4813      	ldr	r0, [pc, #76]	; (8010978 <tcp_pcb_remove+0x114>)
 801092a:	f00c fed1 	bl	801d6d0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010932:	2b00      	cmp	r3, #0
 8010934:	d006      	beq.n	8010944 <tcp_pcb_remove+0xe0>
 8010936:	4b0e      	ldr	r3, [pc, #56]	; (8010970 <tcp_pcb_remove+0x10c>)
 8010938:	f640 0294 	movw	r2, #2196	; 0x894
 801093c:	4911      	ldr	r1, [pc, #68]	; (8010984 <tcp_pcb_remove+0x120>)
 801093e:	480e      	ldr	r0, [pc, #56]	; (8010978 <tcp_pcb_remove+0x114>)
 8010940:	f00c fec6 	bl	801d6d0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010948:	2b00      	cmp	r3, #0
 801094a:	d006      	beq.n	801095a <tcp_pcb_remove+0xf6>
 801094c:	4b08      	ldr	r3, [pc, #32]	; (8010970 <tcp_pcb_remove+0x10c>)
 801094e:	f640 0296 	movw	r2, #2198	; 0x896
 8010952:	490d      	ldr	r1, [pc, #52]	; (8010988 <tcp_pcb_remove+0x124>)
 8010954:	4808      	ldr	r0, [pc, #32]	; (8010978 <tcp_pcb_remove+0x114>)
 8010956:	f00c febb 	bl	801d6d0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	2200      	movs	r2, #0
 801095e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2200      	movs	r2, #0
 8010964:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010966:	bf00      	nop
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	0801ff04 	.word	0x0801ff04
 8010974:	0802056c 	.word	0x0802056c
 8010978:	0801ff48 	.word	0x0801ff48
 801097c:	08020588 	.word	0x08020588
 8010980:	080205a8 	.word	0x080205a8
 8010984:	080205c0 	.word	0x080205c0
 8010988:	080205dc 	.word	0x080205dc

0801098c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <tcp_next_iss+0x1c>
 801099a:	4b0a      	ldr	r3, [pc, #40]	; (80109c4 <tcp_next_iss+0x38>)
 801099c:	f640 02af 	movw	r2, #2223	; 0x8af
 80109a0:	4909      	ldr	r1, [pc, #36]	; (80109c8 <tcp_next_iss+0x3c>)
 80109a2:	480a      	ldr	r0, [pc, #40]	; (80109cc <tcp_next_iss+0x40>)
 80109a4:	f00c fe94 	bl	801d6d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80109a8:	4b09      	ldr	r3, [pc, #36]	; (80109d0 <tcp_next_iss+0x44>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	4b09      	ldr	r3, [pc, #36]	; (80109d4 <tcp_next_iss+0x48>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	4413      	add	r3, r2
 80109b2:	4a07      	ldr	r2, [pc, #28]	; (80109d0 <tcp_next_iss+0x44>)
 80109b4:	6013      	str	r3, [r2, #0]
  return iss;
 80109b6:	4b06      	ldr	r3, [pc, #24]	; (80109d0 <tcp_next_iss+0x44>)
 80109b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3708      	adds	r7, #8
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	0801ff04 	.word	0x0801ff04
 80109c8:	080205f4 	.word	0x080205f4
 80109cc:	0801ff48 	.word	0x0801ff48
 80109d0:	20000028 	.word	0x20000028
 80109d4:	200113bc 	.word	0x200113bc

080109d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b086      	sub	sp, #24
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
 80109e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d106      	bne.n	80109fa <tcp_eff_send_mss_netif+0x22>
 80109ec:	4b14      	ldr	r3, [pc, #80]	; (8010a40 <tcp_eff_send_mss_netif+0x68>)
 80109ee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80109f2:	4914      	ldr	r1, [pc, #80]	; (8010a44 <tcp_eff_send_mss_netif+0x6c>)
 80109f4:	4814      	ldr	r0, [pc, #80]	; (8010a48 <tcp_eff_send_mss_netif+0x70>)
 80109f6:	f00c fe6b 	bl	801d6d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d101      	bne.n	8010a04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010a00:	89fb      	ldrh	r3, [r7, #14]
 8010a02:	e019      	b.n	8010a38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010a0a:	8afb      	ldrh	r3, [r7, #22]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d012      	beq.n	8010a36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010a10:	2328      	movs	r3, #40	; 0x28
 8010a12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010a14:	8afa      	ldrh	r2, [r7, #22]
 8010a16:	8abb      	ldrh	r3, [r7, #20]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d904      	bls.n	8010a26 <tcp_eff_send_mss_netif+0x4e>
 8010a1c:	8afa      	ldrh	r2, [r7, #22]
 8010a1e:	8abb      	ldrh	r3, [r7, #20]
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	e000      	b.n	8010a28 <tcp_eff_send_mss_netif+0x50>
 8010a26:	2300      	movs	r3, #0
 8010a28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010a2a:	8a7a      	ldrh	r2, [r7, #18]
 8010a2c:	89fb      	ldrh	r3, [r7, #14]
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	bf28      	it	cs
 8010a32:	4613      	movcs	r3, r2
 8010a34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010a36:	89fb      	ldrh	r3, [r7, #14]
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3718      	adds	r7, #24
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	0801ff04 	.word	0x0801ff04
 8010a44:	08020610 	.word	0x08020610
 8010a48:	0801ff48 	.word	0x0801ff48

08010a4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d119      	bne.n	8010a94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010a60:	4b10      	ldr	r3, [pc, #64]	; (8010aa4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010a62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010a66:	4910      	ldr	r1, [pc, #64]	; (8010aa8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010a68:	4810      	ldr	r0, [pc, #64]	; (8010aac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010a6a:	f00c fe31 	bl	801d6d0 <iprintf>

  while (pcb != NULL) {
 8010a6e:	e011      	b.n	8010a94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d108      	bne.n	8010a8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f7fe fd9a 	bl	800f5bc <tcp_abort>
      pcb = next;
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	60fb      	str	r3, [r7, #12]
 8010a8c:	e002      	b.n	8010a94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1ea      	bne.n	8010a70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010a9a:	bf00      	nop
 8010a9c:	bf00      	nop
 8010a9e:	3710      	adds	r7, #16
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	0801ff04 	.word	0x0801ff04
 8010aa8:	08020638 	.word	0x08020638
 8010aac:	0801ff48 	.word	0x0801ff48

08010ab0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d02a      	beq.n	8010b16 <tcp_netif_ip_addr_changed+0x66>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d026      	beq.n	8010b16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010ac8:	4b15      	ldr	r3, [pc, #84]	; (8010b20 <tcp_netif_ip_addr_changed+0x70>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4619      	mov	r1, r3
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7ff ffbc 	bl	8010a4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010ad4:	4b13      	ldr	r3, [pc, #76]	; (8010b24 <tcp_netif_ip_addr_changed+0x74>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4619      	mov	r1, r3
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f7ff ffb6 	bl	8010a4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d017      	beq.n	8010b16 <tcp_netif_ip_addr_changed+0x66>
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d013      	beq.n	8010b16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010aee:	4b0e      	ldr	r3, [pc, #56]	; (8010b28 <tcp_netif_ip_addr_changed+0x78>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	60fb      	str	r3, [r7, #12]
 8010af4:	e00c      	b.n	8010b10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d103      	bne.n	8010b0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1ef      	bne.n	8010af6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010b16:	bf00      	nop
 8010b18:	3710      	adds	r7, #16
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	200113c8 	.word	0x200113c8
 8010b24:	200113c0 	.word	0x200113c0
 8010b28:	200113c4 	.word	0x200113c4

08010b2c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d007      	beq.n	8010b4c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7ff fb6f 	bl	8010224 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010b4c:	bf00      	nop
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010b54:	b590      	push	{r4, r7, lr}
 8010b56:	b08d      	sub	sp, #52	; 0x34
 8010b58:	af04      	add	r7, sp, #16
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d105      	bne.n	8010b70 <tcp_input+0x1c>
 8010b64:	4b9b      	ldr	r3, [pc, #620]	; (8010dd4 <tcp_input+0x280>)
 8010b66:	2283      	movs	r2, #131	; 0x83
 8010b68:	499b      	ldr	r1, [pc, #620]	; (8010dd8 <tcp_input+0x284>)
 8010b6a:	489c      	ldr	r0, [pc, #624]	; (8010ddc <tcp_input+0x288>)
 8010b6c:	f00c fdb0 	bl	801d6d0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	4a9a      	ldr	r2, [pc, #616]	; (8010de0 <tcp_input+0x28c>)
 8010b76:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	895b      	ldrh	r3, [r3, #10]
 8010b7c:	2b13      	cmp	r3, #19
 8010b7e:	f240 83d1 	bls.w	8011324 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010b82:	4b98      	ldr	r3, [pc, #608]	; (8010de4 <tcp_input+0x290>)
 8010b84:	695b      	ldr	r3, [r3, #20]
 8010b86:	4a97      	ldr	r2, [pc, #604]	; (8010de4 <tcp_input+0x290>)
 8010b88:	6812      	ldr	r2, [r2, #0]
 8010b8a:	4611      	mov	r1, r2
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f006 fa53 	bl	8017038 <ip4_addr_isbroadcast_u32>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f040 83c7 	bne.w	8011328 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010b9a:	4b92      	ldr	r3, [pc, #584]	; (8010de4 <tcp_input+0x290>)
 8010b9c:	695b      	ldr	r3, [r3, #20]
 8010b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010ba2:	2be0      	cmp	r3, #224	; 0xe0
 8010ba4:	f000 83c0 	beq.w	8011328 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010ba8:	4b8d      	ldr	r3, [pc, #564]	; (8010de0 <tcp_input+0x28c>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	899b      	ldrh	r3, [r3, #12]
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7fc fb11 	bl	800d1d8 <lwip_htons>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	0b1b      	lsrs	r3, r3, #12
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010bc2:	7cbb      	ldrb	r3, [r7, #18]
 8010bc4:	2b13      	cmp	r3, #19
 8010bc6:	f240 83b1 	bls.w	801132c <tcp_input+0x7d8>
 8010bca:	7cbb      	ldrb	r3, [r7, #18]
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	891b      	ldrh	r3, [r3, #8]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	f200 83aa 	bhi.w	801132c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010bd8:	7cbb      	ldrb	r3, [r7, #18]
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	3b14      	subs	r3, #20
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	4b81      	ldr	r3, [pc, #516]	; (8010de8 <tcp_input+0x294>)
 8010be2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010be4:	4b81      	ldr	r3, [pc, #516]	; (8010dec <tcp_input+0x298>)
 8010be6:	2200      	movs	r2, #0
 8010be8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	895a      	ldrh	r2, [r3, #10]
 8010bee:	7cbb      	ldrb	r3, [r7, #18]
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d309      	bcc.n	8010c0a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010bf6:	4b7c      	ldr	r3, [pc, #496]	; (8010de8 <tcp_input+0x294>)
 8010bf8:	881a      	ldrh	r2, [r3, #0]
 8010bfa:	4b7d      	ldr	r3, [pc, #500]	; (8010df0 <tcp_input+0x29c>)
 8010bfc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010bfe:	7cbb      	ldrb	r3, [r7, #18]
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7fd fe64 	bl	800e8d0 <pbuf_remove_header>
 8010c08:	e04e      	b.n	8010ca8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d105      	bne.n	8010c1e <tcp_input+0xca>
 8010c12:	4b70      	ldr	r3, [pc, #448]	; (8010dd4 <tcp_input+0x280>)
 8010c14:	22c2      	movs	r2, #194	; 0xc2
 8010c16:	4977      	ldr	r1, [pc, #476]	; (8010df4 <tcp_input+0x2a0>)
 8010c18:	4870      	ldr	r0, [pc, #448]	; (8010ddc <tcp_input+0x288>)
 8010c1a:	f00c fd59 	bl	801d6d0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010c1e:	2114      	movs	r1, #20
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7fd fe55 	bl	800e8d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	895a      	ldrh	r2, [r3, #10]
 8010c2a:	4b71      	ldr	r3, [pc, #452]	; (8010df0 <tcp_input+0x29c>)
 8010c2c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010c2e:	4b6e      	ldr	r3, [pc, #440]	; (8010de8 <tcp_input+0x294>)
 8010c30:	881a      	ldrh	r2, [r3, #0]
 8010c32:	4b6f      	ldr	r3, [pc, #444]	; (8010df0 <tcp_input+0x29c>)
 8010c34:	881b      	ldrh	r3, [r3, #0]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010c3a:	4b6d      	ldr	r3, [pc, #436]	; (8010df0 <tcp_input+0x29c>)
 8010c3c:	881b      	ldrh	r3, [r3, #0]
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7fd fe45 	bl	800e8d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	895b      	ldrh	r3, [r3, #10]
 8010c4c:	8a3a      	ldrh	r2, [r7, #16]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	f200 836e 	bhi.w	8011330 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	4a64      	ldr	r2, [pc, #400]	; (8010dec <tcp_input+0x298>)
 8010c5c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	8a3a      	ldrh	r2, [r7, #16]
 8010c64:	4611      	mov	r1, r2
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fd fe32 	bl	800e8d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	891a      	ldrh	r2, [r3, #8]
 8010c70:	8a3b      	ldrh	r3, [r7, #16]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	895b      	ldrh	r3, [r3, #10]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d005      	beq.n	8010c8e <tcp_input+0x13a>
 8010c82:	4b54      	ldr	r3, [pc, #336]	; (8010dd4 <tcp_input+0x280>)
 8010c84:	22df      	movs	r2, #223	; 0xdf
 8010c86:	495c      	ldr	r1, [pc, #368]	; (8010df8 <tcp_input+0x2a4>)
 8010c88:	4854      	ldr	r0, [pc, #336]	; (8010ddc <tcp_input+0x288>)
 8010c8a:	f00c fd21 	bl	801d6d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	891a      	ldrh	r2, [r3, #8]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	891b      	ldrh	r3, [r3, #8]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d005      	beq.n	8010ca8 <tcp_input+0x154>
 8010c9c:	4b4d      	ldr	r3, [pc, #308]	; (8010dd4 <tcp_input+0x280>)
 8010c9e:	22e0      	movs	r2, #224	; 0xe0
 8010ca0:	4956      	ldr	r1, [pc, #344]	; (8010dfc <tcp_input+0x2a8>)
 8010ca2:	484e      	ldr	r0, [pc, #312]	; (8010ddc <tcp_input+0x288>)
 8010ca4:	f00c fd14 	bl	801d6d0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010ca8:	4b4d      	ldr	r3, [pc, #308]	; (8010de0 <tcp_input+0x28c>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	4a4b      	ldr	r2, [pc, #300]	; (8010de0 <tcp_input+0x28c>)
 8010cb2:	6814      	ldr	r4, [r2, #0]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fc fa8f 	bl	800d1d8 <lwip_htons>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010cbe:	4b48      	ldr	r3, [pc, #288]	; (8010de0 <tcp_input+0x28c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	885b      	ldrh	r3, [r3, #2]
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	4a46      	ldr	r2, [pc, #280]	; (8010de0 <tcp_input+0x28c>)
 8010cc8:	6814      	ldr	r4, [r2, #0]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fc fa84 	bl	800d1d8 <lwip_htons>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010cd4:	4b42      	ldr	r3, [pc, #264]	; (8010de0 <tcp_input+0x28c>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	4a41      	ldr	r2, [pc, #260]	; (8010de0 <tcp_input+0x28c>)
 8010cdc:	6814      	ldr	r4, [r2, #0]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fc fa8f 	bl	800d202 <lwip_htonl>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	6063      	str	r3, [r4, #4]
 8010ce8:	6863      	ldr	r3, [r4, #4]
 8010cea:	4a45      	ldr	r2, [pc, #276]	; (8010e00 <tcp_input+0x2ac>)
 8010cec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010cee:	4b3c      	ldr	r3, [pc, #240]	; (8010de0 <tcp_input+0x28c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	4a3a      	ldr	r2, [pc, #232]	; (8010de0 <tcp_input+0x28c>)
 8010cf6:	6814      	ldr	r4, [r2, #0]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7fc fa82 	bl	800d202 <lwip_htonl>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	60a3      	str	r3, [r4, #8]
 8010d02:	68a3      	ldr	r3, [r4, #8]
 8010d04:	4a3f      	ldr	r2, [pc, #252]	; (8010e04 <tcp_input+0x2b0>)
 8010d06:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010d08:	4b35      	ldr	r3, [pc, #212]	; (8010de0 <tcp_input+0x28c>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	89db      	ldrh	r3, [r3, #14]
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	4a33      	ldr	r2, [pc, #204]	; (8010de0 <tcp_input+0x28c>)
 8010d12:	6814      	ldr	r4, [r2, #0]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fc fa5f 	bl	800d1d8 <lwip_htons>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010d1e:	4b30      	ldr	r3, [pc, #192]	; (8010de0 <tcp_input+0x28c>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	899b      	ldrh	r3, [r3, #12]
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fc fa56 	bl	800d1d8 <lwip_htons>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	4b34      	ldr	r3, [pc, #208]	; (8010e08 <tcp_input+0x2b4>)
 8010d38:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	891a      	ldrh	r2, [r3, #8]
 8010d3e:	4b33      	ldr	r3, [pc, #204]	; (8010e0c <tcp_input+0x2b8>)
 8010d40:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010d42:	4b31      	ldr	r3, [pc, #196]	; (8010e08 <tcp_input+0x2b4>)
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	f003 0303 	and.w	r3, r3, #3
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d00c      	beq.n	8010d68 <tcp_input+0x214>
    tcplen++;
 8010d4e:	4b2f      	ldr	r3, [pc, #188]	; (8010e0c <tcp_input+0x2b8>)
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	3301      	adds	r3, #1
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	4b2d      	ldr	r3, [pc, #180]	; (8010e0c <tcp_input+0x2b8>)
 8010d58:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	891a      	ldrh	r2, [r3, #8]
 8010d5e:	4b2b      	ldr	r3, [pc, #172]	; (8010e0c <tcp_input+0x2b8>)
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	f200 82e6 	bhi.w	8011334 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d6c:	4b28      	ldr	r3, [pc, #160]	; (8010e10 <tcp_input+0x2bc>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	61fb      	str	r3, [r7, #28]
 8010d72:	e09d      	b.n	8010eb0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	7d1b      	ldrb	r3, [r3, #20]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d105      	bne.n	8010d88 <tcp_input+0x234>
 8010d7c:	4b15      	ldr	r3, [pc, #84]	; (8010dd4 <tcp_input+0x280>)
 8010d7e:	22fb      	movs	r2, #251	; 0xfb
 8010d80:	4924      	ldr	r1, [pc, #144]	; (8010e14 <tcp_input+0x2c0>)
 8010d82:	4816      	ldr	r0, [pc, #88]	; (8010ddc <tcp_input+0x288>)
 8010d84:	f00c fca4 	bl	801d6d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	7d1b      	ldrb	r3, [r3, #20]
 8010d8c:	2b0a      	cmp	r3, #10
 8010d8e:	d105      	bne.n	8010d9c <tcp_input+0x248>
 8010d90:	4b10      	ldr	r3, [pc, #64]	; (8010dd4 <tcp_input+0x280>)
 8010d92:	22fc      	movs	r2, #252	; 0xfc
 8010d94:	4920      	ldr	r1, [pc, #128]	; (8010e18 <tcp_input+0x2c4>)
 8010d96:	4811      	ldr	r0, [pc, #68]	; (8010ddc <tcp_input+0x288>)
 8010d98:	f00c fc9a 	bl	801d6d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
 8010da0:	2b01      	cmp	r3, #1
 8010da2:	d105      	bne.n	8010db0 <tcp_input+0x25c>
 8010da4:	4b0b      	ldr	r3, [pc, #44]	; (8010dd4 <tcp_input+0x280>)
 8010da6:	22fd      	movs	r2, #253	; 0xfd
 8010da8:	491c      	ldr	r1, [pc, #112]	; (8010e1c <tcp_input+0x2c8>)
 8010daa:	480c      	ldr	r0, [pc, #48]	; (8010ddc <tcp_input+0x288>)
 8010dac:	f00c fc90 	bl	801d6d0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	7a1b      	ldrb	r3, [r3, #8]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d033      	beq.n	8010e20 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	7a1a      	ldrb	r2, [r3, #8]
 8010dbc:	4b09      	ldr	r3, [pc, #36]	; (8010de4 <tcp_input+0x290>)
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d029      	beq.n	8010e20 <tcp_input+0x2cc>
      prev = pcb;
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	61bb      	str	r3, [r7, #24]
      continue;
 8010dd0:	e06b      	b.n	8010eaa <tcp_input+0x356>
 8010dd2:	bf00      	nop
 8010dd4:	0802066c 	.word	0x0802066c
 8010dd8:	080206a0 	.word	0x080206a0
 8010ddc:	080206b8 	.word	0x080206b8
 8010de0:	200113e4 	.word	0x200113e4
 8010de4:	2000a2c0 	.word	0x2000a2c0
 8010de8:	200113e8 	.word	0x200113e8
 8010dec:	200113ec 	.word	0x200113ec
 8010df0:	200113ea 	.word	0x200113ea
 8010df4:	080206e0 	.word	0x080206e0
 8010df8:	080206f0 	.word	0x080206f0
 8010dfc:	080206fc 	.word	0x080206fc
 8010e00:	200113f4 	.word	0x200113f4
 8010e04:	200113f8 	.word	0x200113f8
 8010e08:	20011400 	.word	0x20011400
 8010e0c:	200113fe 	.word	0x200113fe
 8010e10:	200113c8 	.word	0x200113c8
 8010e14:	0802071c 	.word	0x0802071c
 8010e18:	08020744 	.word	0x08020744
 8010e1c:	08020770 	.word	0x08020770
    }

    if (pcb->remote_port == tcphdr->src &&
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	8b1a      	ldrh	r2, [r3, #24]
 8010e24:	4b72      	ldr	r3, [pc, #456]	; (8010ff0 <tcp_input+0x49c>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	881b      	ldrh	r3, [r3, #0]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d13a      	bne.n	8010ea6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	8ada      	ldrh	r2, [r3, #22]
 8010e34:	4b6e      	ldr	r3, [pc, #440]	; (8010ff0 <tcp_input+0x49c>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	885b      	ldrh	r3, [r3, #2]
 8010e3a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d132      	bne.n	8010ea6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	685a      	ldr	r2, [r3, #4]
 8010e44:	4b6b      	ldr	r3, [pc, #428]	; (8010ff4 <tcp_input+0x4a0>)
 8010e46:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d12c      	bne.n	8010ea6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	4b68      	ldr	r3, [pc, #416]	; (8010ff4 <tcp_input+0x4a0>)
 8010e52:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d126      	bne.n	8010ea6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	69fa      	ldr	r2, [r7, #28]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d106      	bne.n	8010e70 <tcp_input+0x31c>
 8010e62:	4b65      	ldr	r3, [pc, #404]	; (8010ff8 <tcp_input+0x4a4>)
 8010e64:	f240 120d 	movw	r2, #269	; 0x10d
 8010e68:	4964      	ldr	r1, [pc, #400]	; (8010ffc <tcp_input+0x4a8>)
 8010e6a:	4865      	ldr	r0, [pc, #404]	; (8011000 <tcp_input+0x4ac>)
 8010e6c:	f00c fc30 	bl	801d6d0 <iprintf>
      if (prev != NULL) {
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00a      	beq.n	8010e8c <tcp_input+0x338>
        prev->next = pcb->next;
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	68da      	ldr	r2, [r3, #12]
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010e7e:	4b61      	ldr	r3, [pc, #388]	; (8011004 <tcp_input+0x4b0>)
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010e86:	4a5f      	ldr	r2, [pc, #380]	; (8011004 <tcp_input+0x4b0>)
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	69fa      	ldr	r2, [r7, #28]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d111      	bne.n	8010eba <tcp_input+0x366>
 8010e96:	4b58      	ldr	r3, [pc, #352]	; (8010ff8 <tcp_input+0x4a4>)
 8010e98:	f240 1215 	movw	r2, #277	; 0x115
 8010e9c:	495a      	ldr	r1, [pc, #360]	; (8011008 <tcp_input+0x4b4>)
 8010e9e:	4858      	ldr	r0, [pc, #352]	; (8011000 <tcp_input+0x4ac>)
 8010ea0:	f00c fc16 	bl	801d6d0 <iprintf>
      break;
 8010ea4:	e009      	b.n	8010eba <tcp_input+0x366>
    }
    prev = pcb;
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	61fb      	str	r3, [r7, #28]
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	f47f af5e 	bne.w	8010d74 <tcp_input+0x220>
 8010eb8:	e000      	b.n	8010ebc <tcp_input+0x368>
      break;
 8010eba:	bf00      	nop
  }

  if (pcb == NULL) {
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f040 80aa 	bne.w	8011018 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ec4:	4b51      	ldr	r3, [pc, #324]	; (801100c <tcp_input+0x4b8>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	61fb      	str	r3, [r7, #28]
 8010eca:	e03f      	b.n	8010f4c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	7d1b      	ldrb	r3, [r3, #20]
 8010ed0:	2b0a      	cmp	r3, #10
 8010ed2:	d006      	beq.n	8010ee2 <tcp_input+0x38e>
 8010ed4:	4b48      	ldr	r3, [pc, #288]	; (8010ff8 <tcp_input+0x4a4>)
 8010ed6:	f240 121f 	movw	r2, #287	; 0x11f
 8010eda:	494d      	ldr	r1, [pc, #308]	; (8011010 <tcp_input+0x4bc>)
 8010edc:	4848      	ldr	r0, [pc, #288]	; (8011000 <tcp_input+0x4ac>)
 8010ede:	f00c fbf7 	bl	801d6d0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	7a1b      	ldrb	r3, [r3, #8]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d009      	beq.n	8010efe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	7a1a      	ldrb	r2, [r3, #8]
 8010eee:	4b41      	ldr	r3, [pc, #260]	; (8010ff4 <tcp_input+0x4a0>)
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d122      	bne.n	8010f44 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	8b1a      	ldrh	r2, [r3, #24]
 8010f02:	4b3b      	ldr	r3, [pc, #236]	; (8010ff0 <tcp_input+0x49c>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d11b      	bne.n	8010f46 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	8ada      	ldrh	r2, [r3, #22]
 8010f12:	4b37      	ldr	r3, [pc, #220]	; (8010ff0 <tcp_input+0x49c>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	885b      	ldrh	r3, [r3, #2]
 8010f18:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d113      	bne.n	8010f46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	685a      	ldr	r2, [r3, #4]
 8010f22:	4b34      	ldr	r3, [pc, #208]	; (8010ff4 <tcp_input+0x4a0>)
 8010f24:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d10d      	bne.n	8010f46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	4b31      	ldr	r3, [pc, #196]	; (8010ff4 <tcp_input+0x4a0>)
 8010f30:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d107      	bne.n	8010f46 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010f36:	69f8      	ldr	r0, [r7, #28]
 8010f38:	f000 fb56 	bl	80115e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7fd fd4d 	bl	800e9dc <pbuf_free>
        return;
 8010f42:	e1fd      	b.n	8011340 <tcp_input+0x7ec>
        continue;
 8010f44:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	61fb      	str	r3, [r7, #28]
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1bc      	bne.n	8010ecc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010f52:	2300      	movs	r3, #0
 8010f54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f56:	4b2f      	ldr	r3, [pc, #188]	; (8011014 <tcp_input+0x4c0>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	617b      	str	r3, [r7, #20]
 8010f5c:	e02a      	b.n	8010fb4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	7a1b      	ldrb	r3, [r3, #8]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00c      	beq.n	8010f80 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	7a1a      	ldrb	r2, [r3, #8]
 8010f6a:	4b22      	ldr	r3, [pc, #136]	; (8010ff4 <tcp_input+0x4a0>)
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f72:	3301      	adds	r3, #1
 8010f74:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d002      	beq.n	8010f80 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	61bb      	str	r3, [r7, #24]
        continue;
 8010f7e:	e016      	b.n	8010fae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	8ada      	ldrh	r2, [r3, #22]
 8010f84:	4b1a      	ldr	r3, [pc, #104]	; (8010ff0 <tcp_input+0x49c>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	885b      	ldrh	r3, [r3, #2]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d10c      	bne.n	8010faa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	681a      	ldr	r2, [r3, #0]
 8010f94:	4b17      	ldr	r3, [pc, #92]	; (8010ff4 <tcp_input+0x4a0>)
 8010f96:	695b      	ldr	r3, [r3, #20]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d00f      	beq.n	8010fbc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00d      	beq.n	8010fbe <tcp_input+0x46a>
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d009      	beq.n	8010fbe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	617b      	str	r3, [r7, #20]
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1d1      	bne.n	8010f5e <tcp_input+0x40a>
 8010fba:	e000      	b.n	8010fbe <tcp_input+0x46a>
            break;
 8010fbc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d029      	beq.n	8011018 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00a      	beq.n	8010fe0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	68da      	ldr	r2, [r3, #12]
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010fd2:	4b10      	ldr	r3, [pc, #64]	; (8011014 <tcp_input+0x4c0>)
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010fda:	4a0e      	ldr	r2, [pc, #56]	; (8011014 <tcp_input+0x4c0>)
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010fe0:	6978      	ldr	r0, [r7, #20]
 8010fe2:	f000 fa03 	bl	80113ec <tcp_listen_input>
      }
      pbuf_free(p);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7fd fcf8 	bl	800e9dc <pbuf_free>
      return;
 8010fec:	e1a8      	b.n	8011340 <tcp_input+0x7ec>
 8010fee:	bf00      	nop
 8010ff0:	200113e4 	.word	0x200113e4
 8010ff4:	2000a2c0 	.word	0x2000a2c0
 8010ff8:	0802066c 	.word	0x0802066c
 8010ffc:	08020798 	.word	0x08020798
 8011000:	080206b8 	.word	0x080206b8
 8011004:	200113c8 	.word	0x200113c8
 8011008:	080207c4 	.word	0x080207c4
 801100c:	200113cc 	.word	0x200113cc
 8011010:	080207f0 	.word	0x080207f0
 8011014:	200113c4 	.word	0x200113c4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	2b00      	cmp	r3, #0
 801101c:	f000 8158 	beq.w	80112d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011020:	4b95      	ldr	r3, [pc, #596]	; (8011278 <tcp_input+0x724>)
 8011022:	2200      	movs	r2, #0
 8011024:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	891a      	ldrh	r2, [r3, #8]
 801102a:	4b93      	ldr	r3, [pc, #588]	; (8011278 <tcp_input+0x724>)
 801102c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801102e:	4a92      	ldr	r2, [pc, #584]	; (8011278 <tcp_input+0x724>)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011034:	4b91      	ldr	r3, [pc, #580]	; (801127c <tcp_input+0x728>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a8f      	ldr	r2, [pc, #572]	; (8011278 <tcp_input+0x724>)
 801103a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801103c:	4b90      	ldr	r3, [pc, #576]	; (8011280 <tcp_input+0x72c>)
 801103e:	2200      	movs	r2, #0
 8011040:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011042:	4b90      	ldr	r3, [pc, #576]	; (8011284 <tcp_input+0x730>)
 8011044:	2200      	movs	r2, #0
 8011046:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011048:	4b8f      	ldr	r3, [pc, #572]	; (8011288 <tcp_input+0x734>)
 801104a:	2200      	movs	r2, #0
 801104c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801104e:	4b8f      	ldr	r3, [pc, #572]	; (801128c <tcp_input+0x738>)
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	f003 0308 	and.w	r3, r3, #8
 8011056:	2b00      	cmp	r3, #0
 8011058:	d006      	beq.n	8011068 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	7b5b      	ldrb	r3, [r3, #13]
 801105e:	f043 0301 	orr.w	r3, r3, #1
 8011062:	b2da      	uxtb	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801106c:	2b00      	cmp	r3, #0
 801106e:	d017      	beq.n	80110a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011070:	69f8      	ldr	r0, [r7, #28]
 8011072:	f7ff f85b 	bl	801012c <tcp_process_refused_data>
 8011076:	4603      	mov	r3, r0
 8011078:	f113 0f0d 	cmn.w	r3, #13
 801107c:	d007      	beq.n	801108e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00c      	beq.n	80110a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011086:	4b82      	ldr	r3, [pc, #520]	; (8011290 <tcp_input+0x73c>)
 8011088:	881b      	ldrh	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d008      	beq.n	80110a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011092:	2b00      	cmp	r3, #0
 8011094:	f040 80e3 	bne.w	801125e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011098:	69f8      	ldr	r0, [r7, #28]
 801109a:	f003 fe05 	bl	8014ca8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801109e:	e0de      	b.n	801125e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80110a0:	4a7c      	ldr	r2, [pc, #496]	; (8011294 <tcp_input+0x740>)
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80110a6:	69f8      	ldr	r0, [r7, #28]
 80110a8:	f000 fb18 	bl	80116dc <tcp_process>
 80110ac:	4603      	mov	r3, r0
 80110ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80110b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110b4:	f113 0f0d 	cmn.w	r3, #13
 80110b8:	f000 80d3 	beq.w	8011262 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80110bc:	4b71      	ldr	r3, [pc, #452]	; (8011284 <tcp_input+0x730>)
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	f003 0308 	and.w	r3, r3, #8
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d015      	beq.n	80110f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d008      	beq.n	80110e4 <tcp_input+0x590>
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110d8:	69fa      	ldr	r2, [r7, #28]
 80110da:	6912      	ldr	r2, [r2, #16]
 80110dc:	f06f 010d 	mvn.w	r1, #13
 80110e0:	4610      	mov	r0, r2
 80110e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80110e4:	69f9      	ldr	r1, [r7, #28]
 80110e6:	486c      	ldr	r0, [pc, #432]	; (8011298 <tcp_input+0x744>)
 80110e8:	f7ff fbbc 	bl	8010864 <tcp_pcb_remove>
        tcp_free(pcb);
 80110ec:	69f8      	ldr	r0, [r7, #28]
 80110ee:	f7fd ff21 	bl	800ef34 <tcp_free>
 80110f2:	e0da      	b.n	80112aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80110f8:	4b63      	ldr	r3, [pc, #396]	; (8011288 <tcp_input+0x734>)
 80110fa:	881b      	ldrh	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d01d      	beq.n	801113c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011100:	4b61      	ldr	r3, [pc, #388]	; (8011288 <tcp_input+0x734>)
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801110c:	2b00      	cmp	r3, #0
 801110e:	d00a      	beq.n	8011126 <tcp_input+0x5d2>
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011116:	69fa      	ldr	r2, [r7, #28]
 8011118:	6910      	ldr	r0, [r2, #16]
 801111a:	89fa      	ldrh	r2, [r7, #14]
 801111c:	69f9      	ldr	r1, [r7, #28]
 801111e:	4798      	blx	r3
 8011120:	4603      	mov	r3, r0
 8011122:	74fb      	strb	r3, [r7, #19]
 8011124:	e001      	b.n	801112a <tcp_input+0x5d6>
 8011126:	2300      	movs	r3, #0
 8011128:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801112a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801112e:	f113 0f0d 	cmn.w	r3, #13
 8011132:	f000 8098 	beq.w	8011266 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011136:	4b54      	ldr	r3, [pc, #336]	; (8011288 <tcp_input+0x734>)
 8011138:	2200      	movs	r2, #0
 801113a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801113c:	69f8      	ldr	r0, [r7, #28]
 801113e:	f000 f915 	bl	801136c <tcp_input_delayed_close>
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	f040 8090 	bne.w	801126a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801114a:	4b4d      	ldr	r3, [pc, #308]	; (8011280 <tcp_input+0x72c>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d041      	beq.n	80111d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011156:	2b00      	cmp	r3, #0
 8011158:	d006      	beq.n	8011168 <tcp_input+0x614>
 801115a:	4b50      	ldr	r3, [pc, #320]	; (801129c <tcp_input+0x748>)
 801115c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011160:	494f      	ldr	r1, [pc, #316]	; (80112a0 <tcp_input+0x74c>)
 8011162:	4850      	ldr	r0, [pc, #320]	; (80112a4 <tcp_input+0x750>)
 8011164:	f00c fab4 	bl	801d6d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	8b5b      	ldrh	r3, [r3, #26]
 801116c:	f003 0310 	and.w	r3, r3, #16
 8011170:	2b00      	cmp	r3, #0
 8011172:	d008      	beq.n	8011186 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011174:	4b42      	ldr	r3, [pc, #264]	; (8011280 <tcp_input+0x72c>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4618      	mov	r0, r3
 801117a:	f7fd fc2f 	bl	800e9dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801117e:	69f8      	ldr	r0, [r7, #28]
 8011180:	f7fe fa1c 	bl	800f5bc <tcp_abort>
            goto aborted;
 8011184:	e091      	b.n	80112aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00c      	beq.n	80111aa <tcp_input+0x656>
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	6918      	ldr	r0, [r3, #16]
 801119a:	4b39      	ldr	r3, [pc, #228]	; (8011280 <tcp_input+0x72c>)
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	2300      	movs	r3, #0
 80111a0:	69f9      	ldr	r1, [r7, #28]
 80111a2:	47a0      	blx	r4
 80111a4:	4603      	mov	r3, r0
 80111a6:	74fb      	strb	r3, [r7, #19]
 80111a8:	e008      	b.n	80111bc <tcp_input+0x668>
 80111aa:	4b35      	ldr	r3, [pc, #212]	; (8011280 <tcp_input+0x72c>)
 80111ac:	681a      	ldr	r2, [r3, #0]
 80111ae:	2300      	movs	r3, #0
 80111b0:	69f9      	ldr	r1, [r7, #28]
 80111b2:	2000      	movs	r0, #0
 80111b4:	f7ff f890 	bl	80102d8 <tcp_recv_null>
 80111b8:	4603      	mov	r3, r0
 80111ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80111bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111c0:	f113 0f0d 	cmn.w	r3, #13
 80111c4:	d053      	beq.n	801126e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80111c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d003      	beq.n	80111d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80111ce:	4b2c      	ldr	r3, [pc, #176]	; (8011280 <tcp_input+0x72c>)
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	69fb      	ldr	r3, [r7, #28]
 80111d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80111d6:	4b2b      	ldr	r3, [pc, #172]	; (8011284 <tcp_input+0x730>)
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	f003 0320 	and.w	r3, r3, #32
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d030      	beq.n	8011244 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80111e2:	69fb      	ldr	r3, [r7, #28]
 80111e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d009      	beq.n	80111fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111ee:	7b5a      	ldrb	r2, [r3, #13]
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111f4:	f042 0220 	orr.w	r2, r2, #32
 80111f8:	b2d2      	uxtb	r2, r2
 80111fa:	735a      	strb	r2, [r3, #13]
 80111fc:	e022      	b.n	8011244 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011202:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011206:	d005      	beq.n	8011214 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801120c:	3301      	adds	r3, #1
 801120e:	b29a      	uxth	r2, r3
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00b      	beq.n	8011236 <tcp_input+0x6e2>
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	6918      	ldr	r0, [r3, #16]
 8011228:	2300      	movs	r3, #0
 801122a:	2200      	movs	r2, #0
 801122c:	69f9      	ldr	r1, [r7, #28]
 801122e:	47a0      	blx	r4
 8011230:	4603      	mov	r3, r0
 8011232:	74fb      	strb	r3, [r7, #19]
 8011234:	e001      	b.n	801123a <tcp_input+0x6e6>
 8011236:	2300      	movs	r3, #0
 8011238:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801123a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801123e:	f113 0f0d 	cmn.w	r3, #13
 8011242:	d016      	beq.n	8011272 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011244:	4b13      	ldr	r3, [pc, #76]	; (8011294 <tcp_input+0x740>)
 8011246:	2200      	movs	r2, #0
 8011248:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801124a:	69f8      	ldr	r0, [r7, #28]
 801124c:	f000 f88e 	bl	801136c <tcp_input_delayed_close>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d128      	bne.n	80112a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011256:	69f8      	ldr	r0, [r7, #28]
 8011258:	f002 ff20 	bl	801409c <tcp_output>
 801125c:	e025      	b.n	80112aa <tcp_input+0x756>
        goto aborted;
 801125e:	bf00      	nop
 8011260:	e023      	b.n	80112aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011262:	bf00      	nop
 8011264:	e021      	b.n	80112aa <tcp_input+0x756>
              goto aborted;
 8011266:	bf00      	nop
 8011268:	e01f      	b.n	80112aa <tcp_input+0x756>
          goto aborted;
 801126a:	bf00      	nop
 801126c:	e01d      	b.n	80112aa <tcp_input+0x756>
            goto aborted;
 801126e:	bf00      	nop
 8011270:	e01b      	b.n	80112aa <tcp_input+0x756>
              goto aborted;
 8011272:	bf00      	nop
 8011274:	e019      	b.n	80112aa <tcp_input+0x756>
 8011276:	bf00      	nop
 8011278:	200113d4 	.word	0x200113d4
 801127c:	200113e4 	.word	0x200113e4
 8011280:	20011404 	.word	0x20011404
 8011284:	20011401 	.word	0x20011401
 8011288:	200113fc 	.word	0x200113fc
 801128c:	20011400 	.word	0x20011400
 8011290:	200113fe 	.word	0x200113fe
 8011294:	20011408 	.word	0x20011408
 8011298:	200113c8 	.word	0x200113c8
 801129c:	0802066c 	.word	0x0802066c
 80112a0:	08020820 	.word	0x08020820
 80112a4:	080206b8 	.word	0x080206b8
          goto aborted;
 80112a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80112aa:	4b27      	ldr	r3, [pc, #156]	; (8011348 <tcp_input+0x7f4>)
 80112ac:	2200      	movs	r2, #0
 80112ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80112b0:	4b26      	ldr	r3, [pc, #152]	; (801134c <tcp_input+0x7f8>)
 80112b2:	2200      	movs	r2, #0
 80112b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80112b6:	4b26      	ldr	r3, [pc, #152]	; (8011350 <tcp_input+0x7fc>)
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d03f      	beq.n	801133e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80112be:	4b24      	ldr	r3, [pc, #144]	; (8011350 <tcp_input+0x7fc>)
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fd fb8a 	bl	800e9dc <pbuf_free>
      inseg.p = NULL;
 80112c8:	4b21      	ldr	r3, [pc, #132]	; (8011350 <tcp_input+0x7fc>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80112ce:	e036      	b.n	801133e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80112d0:	4b20      	ldr	r3, [pc, #128]	; (8011354 <tcp_input+0x800>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	899b      	ldrh	r3, [r3, #12]
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fb ff7d 	bl	800d1d8 <lwip_htons>
 80112de:	4603      	mov	r3, r0
 80112e0:	b2db      	uxtb	r3, r3
 80112e2:	f003 0304 	and.w	r3, r3, #4
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d118      	bne.n	801131c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112ea:	4b1b      	ldr	r3, [pc, #108]	; (8011358 <tcp_input+0x804>)
 80112ec:	6819      	ldr	r1, [r3, #0]
 80112ee:	4b1b      	ldr	r3, [pc, #108]	; (801135c <tcp_input+0x808>)
 80112f0:	881b      	ldrh	r3, [r3, #0]
 80112f2:	461a      	mov	r2, r3
 80112f4:	4b1a      	ldr	r3, [pc, #104]	; (8011360 <tcp_input+0x80c>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112fa:	4b16      	ldr	r3, [pc, #88]	; (8011354 <tcp_input+0x800>)
 80112fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112fe:	885b      	ldrh	r3, [r3, #2]
 8011300:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011302:	4a14      	ldr	r2, [pc, #80]	; (8011354 <tcp_input+0x800>)
 8011304:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011306:	8812      	ldrh	r2, [r2, #0]
 8011308:	b292      	uxth	r2, r2
 801130a:	9202      	str	r2, [sp, #8]
 801130c:	9301      	str	r3, [sp, #4]
 801130e:	4b15      	ldr	r3, [pc, #84]	; (8011364 <tcp_input+0x810>)
 8011310:	9300      	str	r3, [sp, #0]
 8011312:	4b15      	ldr	r3, [pc, #84]	; (8011368 <tcp_input+0x814>)
 8011314:	4602      	mov	r2, r0
 8011316:	2000      	movs	r0, #0
 8011318:	f003 fc74 	bl	8014c04 <tcp_rst>
    pbuf_free(p);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7fd fb5d 	bl	800e9dc <pbuf_free>
  return;
 8011322:	e00c      	b.n	801133e <tcp_input+0x7ea>
    goto dropped;
 8011324:	bf00      	nop
 8011326:	e006      	b.n	8011336 <tcp_input+0x7e2>
    goto dropped;
 8011328:	bf00      	nop
 801132a:	e004      	b.n	8011336 <tcp_input+0x7e2>
    goto dropped;
 801132c:	bf00      	nop
 801132e:	e002      	b.n	8011336 <tcp_input+0x7e2>
      goto dropped;
 8011330:	bf00      	nop
 8011332:	e000      	b.n	8011336 <tcp_input+0x7e2>
      goto dropped;
 8011334:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f7fd fb50 	bl	800e9dc <pbuf_free>
 801133c:	e000      	b.n	8011340 <tcp_input+0x7ec>
  return;
 801133e:	bf00      	nop
}
 8011340:	3724      	adds	r7, #36	; 0x24
 8011342:	46bd      	mov	sp, r7
 8011344:	bd90      	pop	{r4, r7, pc}
 8011346:	bf00      	nop
 8011348:	20011408 	.word	0x20011408
 801134c:	20011404 	.word	0x20011404
 8011350:	200113d4 	.word	0x200113d4
 8011354:	200113e4 	.word	0x200113e4
 8011358:	200113f8 	.word	0x200113f8
 801135c:	200113fe 	.word	0x200113fe
 8011360:	200113f4 	.word	0x200113f4
 8011364:	2000a2d0 	.word	0x2000a2d0
 8011368:	2000a2d4 	.word	0x2000a2d4

0801136c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d106      	bne.n	8011388 <tcp_input_delayed_close+0x1c>
 801137a:	4b17      	ldr	r3, [pc, #92]	; (80113d8 <tcp_input_delayed_close+0x6c>)
 801137c:	f240 225a 	movw	r2, #602	; 0x25a
 8011380:	4916      	ldr	r1, [pc, #88]	; (80113dc <tcp_input_delayed_close+0x70>)
 8011382:	4817      	ldr	r0, [pc, #92]	; (80113e0 <tcp_input_delayed_close+0x74>)
 8011384:	f00c f9a4 	bl	801d6d0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011388:	4b16      	ldr	r3, [pc, #88]	; (80113e4 <tcp_input_delayed_close+0x78>)
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	f003 0310 	and.w	r3, r3, #16
 8011390:	2b00      	cmp	r3, #0
 8011392:	d01c      	beq.n	80113ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	8b5b      	ldrh	r3, [r3, #26]
 8011398:	f003 0310 	and.w	r3, r3, #16
 801139c:	2b00      	cmp	r3, #0
 801139e:	d10d      	bne.n	80113bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d008      	beq.n	80113bc <tcp_input_delayed_close+0x50>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	6912      	ldr	r2, [r2, #16]
 80113b4:	f06f 010e 	mvn.w	r1, #14
 80113b8:	4610      	mov	r0, r2
 80113ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80113bc:	6879      	ldr	r1, [r7, #4]
 80113be:	480a      	ldr	r0, [pc, #40]	; (80113e8 <tcp_input_delayed_close+0x7c>)
 80113c0:	f7ff fa50 	bl	8010864 <tcp_pcb_remove>
    tcp_free(pcb);
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7fd fdb5 	bl	800ef34 <tcp_free>
    return 1;
 80113ca:	2301      	movs	r3, #1
 80113cc:	e000      	b.n	80113d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80113ce:	2300      	movs	r3, #0
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	0802066c 	.word	0x0802066c
 80113dc:	0802083c 	.word	0x0802083c
 80113e0:	080206b8 	.word	0x080206b8
 80113e4:	20011401 	.word	0x20011401
 80113e8:	200113c8 	.word	0x200113c8

080113ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80113ec:	b590      	push	{r4, r7, lr}
 80113ee:	b08b      	sub	sp, #44	; 0x2c
 80113f0:	af04      	add	r7, sp, #16
 80113f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80113f4:	4b6f      	ldr	r3, [pc, #444]	; (80115b4 <tcp_listen_input+0x1c8>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	f003 0304 	and.w	r3, r3, #4
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f040 80d2 	bne.w	80115a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d106      	bne.n	8011416 <tcp_listen_input+0x2a>
 8011408:	4b6b      	ldr	r3, [pc, #428]	; (80115b8 <tcp_listen_input+0x1cc>)
 801140a:	f240 2281 	movw	r2, #641	; 0x281
 801140e:	496b      	ldr	r1, [pc, #428]	; (80115bc <tcp_listen_input+0x1d0>)
 8011410:	486b      	ldr	r0, [pc, #428]	; (80115c0 <tcp_listen_input+0x1d4>)
 8011412:	f00c f95d 	bl	801d6d0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011416:	4b67      	ldr	r3, [pc, #412]	; (80115b4 <tcp_listen_input+0x1c8>)
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	f003 0310 	and.w	r3, r3, #16
 801141e:	2b00      	cmp	r3, #0
 8011420:	d019      	beq.n	8011456 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011422:	4b68      	ldr	r3, [pc, #416]	; (80115c4 <tcp_listen_input+0x1d8>)
 8011424:	6819      	ldr	r1, [r3, #0]
 8011426:	4b68      	ldr	r3, [pc, #416]	; (80115c8 <tcp_listen_input+0x1dc>)
 8011428:	881b      	ldrh	r3, [r3, #0]
 801142a:	461a      	mov	r2, r3
 801142c:	4b67      	ldr	r3, [pc, #412]	; (80115cc <tcp_listen_input+0x1e0>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011432:	4b67      	ldr	r3, [pc, #412]	; (80115d0 <tcp_listen_input+0x1e4>)
 8011434:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011436:	885b      	ldrh	r3, [r3, #2]
 8011438:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801143a:	4a65      	ldr	r2, [pc, #404]	; (80115d0 <tcp_listen_input+0x1e4>)
 801143c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801143e:	8812      	ldrh	r2, [r2, #0]
 8011440:	b292      	uxth	r2, r2
 8011442:	9202      	str	r2, [sp, #8]
 8011444:	9301      	str	r3, [sp, #4]
 8011446:	4b63      	ldr	r3, [pc, #396]	; (80115d4 <tcp_listen_input+0x1e8>)
 8011448:	9300      	str	r3, [sp, #0]
 801144a:	4b63      	ldr	r3, [pc, #396]	; (80115d8 <tcp_listen_input+0x1ec>)
 801144c:	4602      	mov	r2, r0
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f003 fbd8 	bl	8014c04 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011454:	e0a9      	b.n	80115aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011456:	4b57      	ldr	r3, [pc, #348]	; (80115b4 <tcp_listen_input+0x1c8>)
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	f003 0302 	and.w	r3, r3, #2
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 80a3 	beq.w	80115aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	7d5b      	ldrb	r3, [r3, #21]
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff f859 	bl	8010520 <tcp_alloc>
 801146e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d111      	bne.n	801149a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	699b      	ldr	r3, [r3, #24]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00a      	beq.n	8011494 <tcp_listen_input+0xa8>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	699b      	ldr	r3, [r3, #24]
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	6910      	ldr	r0, [r2, #16]
 8011486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801148a:	2100      	movs	r1, #0
 801148c:	4798      	blx	r3
 801148e:	4603      	mov	r3, r0
 8011490:	73bb      	strb	r3, [r7, #14]
      return;
 8011492:	e08b      	b.n	80115ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011494:	23f0      	movs	r3, #240	; 0xf0
 8011496:	73bb      	strb	r3, [r7, #14]
      return;
 8011498:	e088      	b.n	80115ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801149a:	4b50      	ldr	r3, [pc, #320]	; (80115dc <tcp_listen_input+0x1f0>)
 801149c:	695a      	ldr	r2, [r3, #20]
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80114a2:	4b4e      	ldr	r3, [pc, #312]	; (80115dc <tcp_listen_input+0x1f0>)
 80114a4:	691a      	ldr	r2, [r3, #16]
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	8ada      	ldrh	r2, [r3, #22]
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80114b2:	4b47      	ldr	r3, [pc, #284]	; (80115d0 <tcp_listen_input+0x1e4>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	881b      	ldrh	r3, [r3, #0]
 80114b8:	b29a      	uxth	r2, r3
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	2203      	movs	r2, #3
 80114c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80114c4:	4b41      	ldr	r3, [pc, #260]	; (80115cc <tcp_listen_input+0x1e0>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	1c5a      	adds	r2, r3, #1
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80114d6:	6978      	ldr	r0, [r7, #20]
 80114d8:	f7ff fa58 	bl	801098c <tcp_next_iss>
 80114dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	693a      	ldr	r2, [r7, #16]
 80114e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	693a      	ldr	r2, [r7, #16]
 80114e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	693a      	ldr	r2, [r7, #16]
 80114ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	693a      	ldr	r2, [r7, #16]
 80114f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80114f6:	4b35      	ldr	r3, [pc, #212]	; (80115cc <tcp_listen_input+0x1e0>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	1e5a      	subs	r2, r3, #1
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	691a      	ldr	r2, [r3, #16]
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	7a5b      	ldrb	r3, [r3, #9]
 8011512:	f003 030c 	and.w	r3, r3, #12
 8011516:	b2da      	uxtb	r2, r3
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	7a1a      	ldrb	r2, [r3, #8]
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011524:	4b2e      	ldr	r3, [pc, #184]	; (80115e0 <tcp_listen_input+0x1f4>)
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	60da      	str	r2, [r3, #12]
 801152c:	4a2c      	ldr	r2, [pc, #176]	; (80115e0 <tcp_listen_input+0x1f4>)
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	6013      	str	r3, [r2, #0]
 8011532:	f003 fd29 	bl	8014f88 <tcp_timer_needed>
 8011536:	4b2b      	ldr	r3, [pc, #172]	; (80115e4 <tcp_listen_input+0x1f8>)
 8011538:	2201      	movs	r2, #1
 801153a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801153c:	6978      	ldr	r0, [r7, #20]
 801153e:	f001 fd8f 	bl	8013060 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011542:	4b23      	ldr	r3, [pc, #140]	; (80115d0 <tcp_listen_input+0x1e4>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	89db      	ldrh	r3, [r3, #14]
 8011548:	b29a      	uxth	r2, r3
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	3304      	adds	r3, #4
 8011564:	4618      	mov	r0, r3
 8011566:	f005 fad1 	bl	8016b0c <ip4_route>
 801156a:	4601      	mov	r1, r0
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	3304      	adds	r3, #4
 8011570:	461a      	mov	r2, r3
 8011572:	4620      	mov	r0, r4
 8011574:	f7ff fa30 	bl	80109d8 <tcp_eff_send_mss_netif>
 8011578:	4603      	mov	r3, r0
 801157a:	461a      	mov	r2, r3
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011580:	2112      	movs	r1, #18
 8011582:	6978      	ldr	r0, [r7, #20]
 8011584:	f002 fc9c 	bl	8013ec0 <tcp_enqueue_flags>
 8011588:	4603      	mov	r3, r0
 801158a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801158c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d004      	beq.n	801159e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011594:	2100      	movs	r1, #0
 8011596:	6978      	ldr	r0, [r7, #20]
 8011598:	f7fd ff52 	bl	800f440 <tcp_abandon>
      return;
 801159c:	e006      	b.n	80115ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801159e:	6978      	ldr	r0, [r7, #20]
 80115a0:	f002 fd7c 	bl	801409c <tcp_output>
  return;
 80115a4:	e001      	b.n	80115aa <tcp_listen_input+0x1be>
    return;
 80115a6:	bf00      	nop
 80115a8:	e000      	b.n	80115ac <tcp_listen_input+0x1c0>
  return;
 80115aa:	bf00      	nop
}
 80115ac:	371c      	adds	r7, #28
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd90      	pop	{r4, r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20011400 	.word	0x20011400
 80115b8:	0802066c 	.word	0x0802066c
 80115bc:	08020864 	.word	0x08020864
 80115c0:	080206b8 	.word	0x080206b8
 80115c4:	200113f8 	.word	0x200113f8
 80115c8:	200113fe 	.word	0x200113fe
 80115cc:	200113f4 	.word	0x200113f4
 80115d0:	200113e4 	.word	0x200113e4
 80115d4:	2000a2d0 	.word	0x2000a2d0
 80115d8:	2000a2d4 	.word	0x2000a2d4
 80115dc:	2000a2c0 	.word	0x2000a2c0
 80115e0:	200113c8 	.word	0x200113c8
 80115e4:	200113d0 	.word	0x200113d0

080115e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b086      	sub	sp, #24
 80115ec:	af04      	add	r7, sp, #16
 80115ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80115f0:	4b2f      	ldr	r3, [pc, #188]	; (80116b0 <tcp_timewait_input+0xc8>)
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	f003 0304 	and.w	r3, r3, #4
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d153      	bne.n	80116a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d106      	bne.n	8011610 <tcp_timewait_input+0x28>
 8011602:	4b2c      	ldr	r3, [pc, #176]	; (80116b4 <tcp_timewait_input+0xcc>)
 8011604:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011608:	492b      	ldr	r1, [pc, #172]	; (80116b8 <tcp_timewait_input+0xd0>)
 801160a:	482c      	ldr	r0, [pc, #176]	; (80116bc <tcp_timewait_input+0xd4>)
 801160c:	f00c f860 	bl	801d6d0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011610:	4b27      	ldr	r3, [pc, #156]	; (80116b0 <tcp_timewait_input+0xc8>)
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	f003 0302 	and.w	r3, r3, #2
 8011618:	2b00      	cmp	r3, #0
 801161a:	d02a      	beq.n	8011672 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801161c:	4b28      	ldr	r3, [pc, #160]	; (80116c0 <tcp_timewait_input+0xd8>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011624:	1ad3      	subs	r3, r2, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	db2d      	blt.n	8011686 <tcp_timewait_input+0x9e>
 801162a:	4b25      	ldr	r3, [pc, #148]	; (80116c0 <tcp_timewait_input+0xd8>)
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011632:	6879      	ldr	r1, [r7, #4]
 8011634:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011636:	440b      	add	r3, r1
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	2b00      	cmp	r3, #0
 801163c:	dc23      	bgt.n	8011686 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801163e:	4b21      	ldr	r3, [pc, #132]	; (80116c4 <tcp_timewait_input+0xdc>)
 8011640:	6819      	ldr	r1, [r3, #0]
 8011642:	4b21      	ldr	r3, [pc, #132]	; (80116c8 <tcp_timewait_input+0xe0>)
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	461a      	mov	r2, r3
 8011648:	4b1d      	ldr	r3, [pc, #116]	; (80116c0 <tcp_timewait_input+0xd8>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801164e:	4b1f      	ldr	r3, [pc, #124]	; (80116cc <tcp_timewait_input+0xe4>)
 8011650:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011652:	885b      	ldrh	r3, [r3, #2]
 8011654:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011656:	4a1d      	ldr	r2, [pc, #116]	; (80116cc <tcp_timewait_input+0xe4>)
 8011658:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801165a:	8812      	ldrh	r2, [r2, #0]
 801165c:	b292      	uxth	r2, r2
 801165e:	9202      	str	r2, [sp, #8]
 8011660:	9301      	str	r3, [sp, #4]
 8011662:	4b1b      	ldr	r3, [pc, #108]	; (80116d0 <tcp_timewait_input+0xe8>)
 8011664:	9300      	str	r3, [sp, #0]
 8011666:	4b1b      	ldr	r3, [pc, #108]	; (80116d4 <tcp_timewait_input+0xec>)
 8011668:	4602      	mov	r2, r0
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f003 faca 	bl	8014c04 <tcp_rst>
      return;
 8011670:	e01b      	b.n	80116aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011672:	4b0f      	ldr	r3, [pc, #60]	; (80116b0 <tcp_timewait_input+0xc8>)
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	d003      	beq.n	8011686 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801167e:	4b16      	ldr	r3, [pc, #88]	; (80116d8 <tcp_timewait_input+0xf0>)
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011686:	4b10      	ldr	r3, [pc, #64]	; (80116c8 <tcp_timewait_input+0xe0>)
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d00c      	beq.n	80116a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	8b5b      	ldrh	r3, [r3, #26]
 8011692:	f043 0302 	orr.w	r3, r3, #2
 8011696:	b29a      	uxth	r2, r3
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f002 fcfd 	bl	801409c <tcp_output>
  }
  return;
 80116a2:	e001      	b.n	80116a8 <tcp_timewait_input+0xc0>
    return;
 80116a4:	bf00      	nop
 80116a6:	e000      	b.n	80116aa <tcp_timewait_input+0xc2>
  return;
 80116a8:	bf00      	nop
}
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	20011400 	.word	0x20011400
 80116b4:	0802066c 	.word	0x0802066c
 80116b8:	08020884 	.word	0x08020884
 80116bc:	080206b8 	.word	0x080206b8
 80116c0:	200113f4 	.word	0x200113f4
 80116c4:	200113f8 	.word	0x200113f8
 80116c8:	200113fe 	.word	0x200113fe
 80116cc:	200113e4 	.word	0x200113e4
 80116d0:	2000a2d0 	.word	0x2000a2d0
 80116d4:	2000a2d4 	.word	0x2000a2d4
 80116d8:	200113bc 	.word	0x200113bc

080116dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80116dc:	b590      	push	{r4, r7, lr}
 80116de:	b08d      	sub	sp, #52	; 0x34
 80116e0:	af04      	add	r7, sp, #16
 80116e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80116e8:	2300      	movs	r3, #0
 80116ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d106      	bne.n	8011700 <tcp_process+0x24>
 80116f2:	4b9d      	ldr	r3, [pc, #628]	; (8011968 <tcp_process+0x28c>)
 80116f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80116f8:	499c      	ldr	r1, [pc, #624]	; (801196c <tcp_process+0x290>)
 80116fa:	489d      	ldr	r0, [pc, #628]	; (8011970 <tcp_process+0x294>)
 80116fc:	f00b ffe8 	bl	801d6d0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011700:	4b9c      	ldr	r3, [pc, #624]	; (8011974 <tcp_process+0x298>)
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	f003 0304 	and.w	r3, r3, #4
 8011708:	2b00      	cmp	r3, #0
 801170a:	d04e      	beq.n	80117aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	7d1b      	ldrb	r3, [r3, #20]
 8011710:	2b02      	cmp	r3, #2
 8011712:	d108      	bne.n	8011726 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011718:	4b97      	ldr	r3, [pc, #604]	; (8011978 <tcp_process+0x29c>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	429a      	cmp	r2, r3
 801171e:	d123      	bne.n	8011768 <tcp_process+0x8c>
        acceptable = 1;
 8011720:	2301      	movs	r3, #1
 8011722:	76fb      	strb	r3, [r7, #27]
 8011724:	e020      	b.n	8011768 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801172a:	4b94      	ldr	r3, [pc, #592]	; (801197c <tcp_process+0x2a0>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	429a      	cmp	r2, r3
 8011730:	d102      	bne.n	8011738 <tcp_process+0x5c>
        acceptable = 1;
 8011732:	2301      	movs	r3, #1
 8011734:	76fb      	strb	r3, [r7, #27]
 8011736:	e017      	b.n	8011768 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011738:	4b90      	ldr	r3, [pc, #576]	; (801197c <tcp_process+0x2a0>)
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011740:	1ad3      	subs	r3, r2, r3
 8011742:	2b00      	cmp	r3, #0
 8011744:	db10      	blt.n	8011768 <tcp_process+0x8c>
 8011746:	4b8d      	ldr	r3, [pc, #564]	; (801197c <tcp_process+0x2a0>)
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801174e:	6879      	ldr	r1, [r7, #4]
 8011750:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011752:	440b      	add	r3, r1
 8011754:	1ad3      	subs	r3, r2, r3
 8011756:	2b00      	cmp	r3, #0
 8011758:	dc06      	bgt.n	8011768 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	8b5b      	ldrh	r3, [r3, #26]
 801175e:	f043 0302 	orr.w	r3, r3, #2
 8011762:	b29a      	uxth	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011768:	7efb      	ldrb	r3, [r7, #27]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d01b      	beq.n	80117a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	7d1b      	ldrb	r3, [r3, #20]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d106      	bne.n	8011784 <tcp_process+0xa8>
 8011776:	4b7c      	ldr	r3, [pc, #496]	; (8011968 <tcp_process+0x28c>)
 8011778:	f44f 724e 	mov.w	r2, #824	; 0x338
 801177c:	4980      	ldr	r1, [pc, #512]	; (8011980 <tcp_process+0x2a4>)
 801177e:	487c      	ldr	r0, [pc, #496]	; (8011970 <tcp_process+0x294>)
 8011780:	f00b ffa6 	bl	801d6d0 <iprintf>
      recv_flags |= TF_RESET;
 8011784:	4b7f      	ldr	r3, [pc, #508]	; (8011984 <tcp_process+0x2a8>)
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	f043 0308 	orr.w	r3, r3, #8
 801178c:	b2da      	uxtb	r2, r3
 801178e:	4b7d      	ldr	r3, [pc, #500]	; (8011984 <tcp_process+0x2a8>)
 8011790:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	8b5b      	ldrh	r3, [r3, #26]
 8011796:	f023 0301 	bic.w	r3, r3, #1
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80117a0:	f06f 030d 	mvn.w	r3, #13
 80117a4:	e37a      	b.n	8011e9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80117a6:	2300      	movs	r3, #0
 80117a8:	e378      	b.n	8011e9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80117aa:	4b72      	ldr	r3, [pc, #456]	; (8011974 <tcp_process+0x298>)
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	f003 0302 	and.w	r3, r3, #2
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d010      	beq.n	80117d8 <tcp_process+0xfc>
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	7d1b      	ldrb	r3, [r3, #20]
 80117ba:	2b02      	cmp	r3, #2
 80117bc:	d00c      	beq.n	80117d8 <tcp_process+0xfc>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	7d1b      	ldrb	r3, [r3, #20]
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d008      	beq.n	80117d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	8b5b      	ldrh	r3, [r3, #26]
 80117ca:	f043 0302 	orr.w	r3, r3, #2
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80117d4:	2300      	movs	r3, #0
 80117d6:	e361      	b.n	8011e9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	8b5b      	ldrh	r3, [r3, #26]
 80117dc:	f003 0310 	and.w	r3, r3, #16
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d103      	bne.n	80117ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80117e4:	4b68      	ldr	r3, [pc, #416]	; (8011988 <tcp_process+0x2ac>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f001 fc2f 	bl	8013060 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	7d1b      	ldrb	r3, [r3, #20]
 8011806:	3b02      	subs	r3, #2
 8011808:	2b07      	cmp	r3, #7
 801180a:	f200 8337 	bhi.w	8011e7c <tcp_process+0x7a0>
 801180e:	a201      	add	r2, pc, #4	; (adr r2, 8011814 <tcp_process+0x138>)
 8011810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011814:	08011835 	.word	0x08011835
 8011818:	08011a65 	.word	0x08011a65
 801181c:	08011bdd 	.word	0x08011bdd
 8011820:	08011c07 	.word	0x08011c07
 8011824:	08011d2b 	.word	0x08011d2b
 8011828:	08011bdd 	.word	0x08011bdd
 801182c:	08011db7 	.word	0x08011db7
 8011830:	08011e47 	.word	0x08011e47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011834:	4b4f      	ldr	r3, [pc, #316]	; (8011974 <tcp_process+0x298>)
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	f003 0310 	and.w	r3, r3, #16
 801183c:	2b00      	cmp	r3, #0
 801183e:	f000 80e4 	beq.w	8011a0a <tcp_process+0x32e>
 8011842:	4b4c      	ldr	r3, [pc, #304]	; (8011974 <tcp_process+0x298>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	f003 0302 	and.w	r3, r3, #2
 801184a:	2b00      	cmp	r3, #0
 801184c:	f000 80dd 	beq.w	8011a0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011854:	1c5a      	adds	r2, r3, #1
 8011856:	4b48      	ldr	r3, [pc, #288]	; (8011978 <tcp_process+0x29c>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	429a      	cmp	r2, r3
 801185c:	f040 80d5 	bne.w	8011a0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011860:	4b46      	ldr	r3, [pc, #280]	; (801197c <tcp_process+0x2a0>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	1c5a      	adds	r2, r3, #1
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011872:	4b41      	ldr	r3, [pc, #260]	; (8011978 <tcp_process+0x29c>)
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801187a:	4b44      	ldr	r3, [pc, #272]	; (801198c <tcp_process+0x2b0>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	89db      	ldrh	r3, [r3, #14]
 8011880:	b29a      	uxth	r2, r3
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011894:	4b39      	ldr	r3, [pc, #228]	; (801197c <tcp_process+0x2a0>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	1e5a      	subs	r2, r3, #1
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2204      	movs	r2, #4
 80118a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	3304      	adds	r3, #4
 80118ac:	4618      	mov	r0, r3
 80118ae:	f005 f92d 	bl	8016b0c <ip4_route>
 80118b2:	4601      	mov	r1, r0
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	3304      	adds	r3, #4
 80118b8:	461a      	mov	r2, r3
 80118ba:	4620      	mov	r0, r4
 80118bc:	f7ff f88c 	bl	80109d8 <tcp_eff_send_mss_netif>
 80118c0:	4603      	mov	r3, r0
 80118c2:	461a      	mov	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118cc:	009a      	lsls	r2, r3, #2
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80118d8:	428b      	cmp	r3, r1
 80118da:	bf38      	it	cc
 80118dc:	460b      	movcc	r3, r1
 80118de:	429a      	cmp	r2, r3
 80118e0:	d204      	bcs.n	80118ec <tcp_process+0x210>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	e00d      	b.n	8011908 <tcp_process+0x22c>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118f0:	005b      	lsls	r3, r3, #1
 80118f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d904      	bls.n	8011904 <tcp_process+0x228>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118fe:	005b      	lsls	r3, r3, #1
 8011900:	b29b      	uxth	r3, r3
 8011902:	e001      	b.n	8011908 <tcp_process+0x22c>
 8011904:	f241 131c 	movw	r3, #4380	; 0x111c
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011914:	2b00      	cmp	r3, #0
 8011916:	d106      	bne.n	8011926 <tcp_process+0x24a>
 8011918:	4b13      	ldr	r3, [pc, #76]	; (8011968 <tcp_process+0x28c>)
 801191a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801191e:	491c      	ldr	r1, [pc, #112]	; (8011990 <tcp_process+0x2b4>)
 8011920:	4813      	ldr	r0, [pc, #76]	; (8011970 <tcp_process+0x294>)
 8011922:	f00b fed5 	bl	801d6d0 <iprintf>
        --pcb->snd_queuelen;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801192c:	3b01      	subs	r3, #1
 801192e:	b29a      	uxth	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801193a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d12a      	bne.n	8011998 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011946:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d106      	bne.n	801195c <tcp_process+0x280>
 801194e:	4b06      	ldr	r3, [pc, #24]	; (8011968 <tcp_process+0x28c>)
 8011950:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011954:	490f      	ldr	r1, [pc, #60]	; (8011994 <tcp_process+0x2b8>)
 8011956:	4806      	ldr	r0, [pc, #24]	; (8011970 <tcp_process+0x294>)
 8011958:	f00b feba 	bl	801d6d0 <iprintf>
          pcb->unsent = rseg->next;
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	66da      	str	r2, [r3, #108]	; 0x6c
 8011964:	e01c      	b.n	80119a0 <tcp_process+0x2c4>
 8011966:	bf00      	nop
 8011968:	0802066c 	.word	0x0802066c
 801196c:	080208a4 	.word	0x080208a4
 8011970:	080206b8 	.word	0x080206b8
 8011974:	20011400 	.word	0x20011400
 8011978:	200113f8 	.word	0x200113f8
 801197c:	200113f4 	.word	0x200113f4
 8011980:	080208c0 	.word	0x080208c0
 8011984:	20011401 	.word	0x20011401
 8011988:	200113bc 	.word	0x200113bc
 801198c:	200113e4 	.word	0x200113e4
 8011990:	080208e0 	.word	0x080208e0
 8011994:	080208f8 	.word	0x080208f8
        } else {
          pcb->unacked = rseg->next;
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80119a0:	69f8      	ldr	r0, [r7, #28]
 80119a2:	f7fe fc54 	bl	801024e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d104      	bne.n	80119b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119b4:	861a      	strh	r2, [r3, #48]	; 0x30
 80119b6:	e006      	b.n	80119c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2200      	movs	r2, #0
 80119c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00a      	beq.n	80119e6 <tcp_process+0x30a>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	6910      	ldr	r0, [r2, #16]
 80119da:	2200      	movs	r2, #0
 80119dc:	6879      	ldr	r1, [r7, #4]
 80119de:	4798      	blx	r3
 80119e0:	4603      	mov	r3, r0
 80119e2:	76bb      	strb	r3, [r7, #26]
 80119e4:	e001      	b.n	80119ea <tcp_process+0x30e>
 80119e6:	2300      	movs	r3, #0
 80119e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80119ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80119ee:	f113 0f0d 	cmn.w	r3, #13
 80119f2:	d102      	bne.n	80119fa <tcp_process+0x31e>
          return ERR_ABRT;
 80119f4:	f06f 030c 	mvn.w	r3, #12
 80119f8:	e250      	b.n	8011e9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	8b5b      	ldrh	r3, [r3, #26]
 80119fe:	f043 0302 	orr.w	r3, r3, #2
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011a08:	e23a      	b.n	8011e80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011a0a:	4b98      	ldr	r3, [pc, #608]	; (8011c6c <tcp_process+0x590>)
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	f003 0310 	and.w	r3, r3, #16
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f000 8234 	beq.w	8011e80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a18:	4b95      	ldr	r3, [pc, #596]	; (8011c70 <tcp_process+0x594>)
 8011a1a:	6819      	ldr	r1, [r3, #0]
 8011a1c:	4b95      	ldr	r3, [pc, #596]	; (8011c74 <tcp_process+0x598>)
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	461a      	mov	r2, r3
 8011a22:	4b95      	ldr	r3, [pc, #596]	; (8011c78 <tcp_process+0x59c>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a28:	4b94      	ldr	r3, [pc, #592]	; (8011c7c <tcp_process+0x5a0>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a2c:	885b      	ldrh	r3, [r3, #2]
 8011a2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a30:	4a92      	ldr	r2, [pc, #584]	; (8011c7c <tcp_process+0x5a0>)
 8011a32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a34:	8812      	ldrh	r2, [r2, #0]
 8011a36:	b292      	uxth	r2, r2
 8011a38:	9202      	str	r2, [sp, #8]
 8011a3a:	9301      	str	r3, [sp, #4]
 8011a3c:	4b90      	ldr	r3, [pc, #576]	; (8011c80 <tcp_process+0x5a4>)
 8011a3e:	9300      	str	r3, [sp, #0]
 8011a40:	4b90      	ldr	r3, [pc, #576]	; (8011c84 <tcp_process+0x5a8>)
 8011a42:	4602      	mov	r2, r0
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f003 f8dd 	bl	8014c04 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a50:	2b05      	cmp	r3, #5
 8011a52:	f200 8215 	bhi.w	8011e80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f002 fea7 	bl	80147b0 <tcp_rexmit_rto>
      break;
 8011a62:	e20d      	b.n	8011e80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011a64:	4b81      	ldr	r3, [pc, #516]	; (8011c6c <tcp_process+0x590>)
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	f003 0310 	and.w	r3, r3, #16
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f000 80a1 	beq.w	8011bb4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a72:	4b7f      	ldr	r3, [pc, #508]	; (8011c70 <tcp_process+0x594>)
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	db7e      	blt.n	8011b80 <tcp_process+0x4a4>
 8011a82:	4b7b      	ldr	r3, [pc, #492]	; (8011c70 <tcp_process+0x594>)
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	dc77      	bgt.n	8011b80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2204      	movs	r2, #4
 8011a94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d102      	bne.n	8011aa4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011a9e:	23fa      	movs	r3, #250	; 0xfa
 8011aa0:	76bb      	strb	r3, [r7, #26]
 8011aa2:	e01d      	b.n	8011ae0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011aa8:	699b      	ldr	r3, [r3, #24]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d106      	bne.n	8011abc <tcp_process+0x3e0>
 8011aae:	4b76      	ldr	r3, [pc, #472]	; (8011c88 <tcp_process+0x5ac>)
 8011ab0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011ab4:	4975      	ldr	r1, [pc, #468]	; (8011c8c <tcp_process+0x5b0>)
 8011ab6:	4876      	ldr	r0, [pc, #472]	; (8011c90 <tcp_process+0x5b4>)
 8011ab8:	f00b fe0a 	bl	801d6d0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ac0:	699b      	ldr	r3, [r3, #24]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00a      	beq.n	8011adc <tcp_process+0x400>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011aca:	699b      	ldr	r3, [r3, #24]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	6910      	ldr	r0, [r2, #16]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	6879      	ldr	r1, [r7, #4]
 8011ad4:	4798      	blx	r3
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	76bb      	strb	r3, [r7, #26]
 8011ada:	e001      	b.n	8011ae0 <tcp_process+0x404>
 8011adc:	23f0      	movs	r3, #240	; 0xf0
 8011ade:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011ae0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00a      	beq.n	8011afe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011ae8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011aec:	f113 0f0d 	cmn.w	r3, #13
 8011af0:	d002      	beq.n	8011af8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f7fd fd62 	bl	800f5bc <tcp_abort>
            }
            return ERR_ABRT;
 8011af8:	f06f 030c 	mvn.w	r3, #12
 8011afc:	e1ce      	b.n	8011e9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fae0 	bl	80120c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011b04:	4b63      	ldr	r3, [pc, #396]	; (8011c94 <tcp_process+0x5b8>)
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d005      	beq.n	8011b18 <tcp_process+0x43c>
            recv_acked--;
 8011b0c:	4b61      	ldr	r3, [pc, #388]	; (8011c94 <tcp_process+0x5b8>)
 8011b0e:	881b      	ldrh	r3, [r3, #0]
 8011b10:	3b01      	subs	r3, #1
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	4b5f      	ldr	r3, [pc, #380]	; (8011c94 <tcp_process+0x5b8>)
 8011b16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b1c:	009a      	lsls	r2, r3, #2
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b22:	005b      	lsls	r3, r3, #1
 8011b24:	f241 111c 	movw	r1, #4380	; 0x111c
 8011b28:	428b      	cmp	r3, r1
 8011b2a:	bf38      	it	cc
 8011b2c:	460b      	movcc	r3, r1
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d204      	bcs.n	8011b3c <tcp_process+0x460>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b36:	009b      	lsls	r3, r3, #2
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	e00d      	b.n	8011b58 <tcp_process+0x47c>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b40:	005b      	lsls	r3, r3, #1
 8011b42:	f241 121c 	movw	r2, #4380	; 0x111c
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d904      	bls.n	8011b54 <tcp_process+0x478>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b4e:	005b      	lsls	r3, r3, #1
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	e001      	b.n	8011b58 <tcp_process+0x47c>
 8011b54:	f241 131c 	movw	r3, #4380	; 0x111c
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011b5e:	4b4e      	ldr	r3, [pc, #312]	; (8011c98 <tcp_process+0x5bc>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	f003 0320 	and.w	r3, r3, #32
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d037      	beq.n	8011bda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8b5b      	ldrh	r3, [r3, #26]
 8011b6e:	f043 0302 	orr.w	r3, r3, #2
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2207      	movs	r2, #7
 8011b7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011b7e:	e02c      	b.n	8011bda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b80:	4b3b      	ldr	r3, [pc, #236]	; (8011c70 <tcp_process+0x594>)
 8011b82:	6819      	ldr	r1, [r3, #0]
 8011b84:	4b3b      	ldr	r3, [pc, #236]	; (8011c74 <tcp_process+0x598>)
 8011b86:	881b      	ldrh	r3, [r3, #0]
 8011b88:	461a      	mov	r2, r3
 8011b8a:	4b3b      	ldr	r3, [pc, #236]	; (8011c78 <tcp_process+0x59c>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b90:	4b3a      	ldr	r3, [pc, #232]	; (8011c7c <tcp_process+0x5a0>)
 8011b92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b94:	885b      	ldrh	r3, [r3, #2]
 8011b96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b98:	4a38      	ldr	r2, [pc, #224]	; (8011c7c <tcp_process+0x5a0>)
 8011b9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b9c:	8812      	ldrh	r2, [r2, #0]
 8011b9e:	b292      	uxth	r2, r2
 8011ba0:	9202      	str	r2, [sp, #8]
 8011ba2:	9301      	str	r3, [sp, #4]
 8011ba4:	4b36      	ldr	r3, [pc, #216]	; (8011c80 <tcp_process+0x5a4>)
 8011ba6:	9300      	str	r3, [sp, #0]
 8011ba8:	4b36      	ldr	r3, [pc, #216]	; (8011c84 <tcp_process+0x5a8>)
 8011baa:	4602      	mov	r2, r0
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f003 f829 	bl	8014c04 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011bb2:	e167      	b.n	8011e84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011bb4:	4b2d      	ldr	r3, [pc, #180]	; (8011c6c <tcp_process+0x590>)
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	f003 0302 	and.w	r3, r3, #2
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f000 8161 	beq.w	8011e84 <tcp_process+0x7a8>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc6:	1e5a      	subs	r2, r3, #1
 8011bc8:	4b2b      	ldr	r3, [pc, #172]	; (8011c78 <tcp_process+0x59c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	f040 8159 	bne.w	8011e84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f002 fe0e 	bl	80147f4 <tcp_rexmit>
      break;
 8011bd8:	e154      	b.n	8011e84 <tcp_process+0x7a8>
 8011bda:	e153      	b.n	8011e84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 fa71 	bl	80120c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011be2:	4b2d      	ldr	r3, [pc, #180]	; (8011c98 <tcp_process+0x5bc>)
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	f003 0320 	and.w	r3, r3, #32
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f000 814c 	beq.w	8011e88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	8b5b      	ldrh	r3, [r3, #26]
 8011bf4:	f043 0302 	orr.w	r3, r3, #2
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2207      	movs	r2, #7
 8011c02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c04:	e140      	b.n	8011e88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f000 fa5c 	bl	80120c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c0c:	4b22      	ldr	r3, [pc, #136]	; (8011c98 <tcp_process+0x5bc>)
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	f003 0320 	and.w	r3, r3, #32
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d071      	beq.n	8011cfc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c18:	4b14      	ldr	r3, [pc, #80]	; (8011c6c <tcp_process+0x590>)
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	f003 0310 	and.w	r3, r3, #16
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d060      	beq.n	8011ce6 <tcp_process+0x60a>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c28:	4b11      	ldr	r3, [pc, #68]	; (8011c70 <tcp_process+0x594>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d15a      	bne.n	8011ce6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d156      	bne.n	8011ce6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	8b5b      	ldrh	r3, [r3, #26]
 8011c3c:	f043 0302 	orr.w	r3, r3, #2
 8011c40:	b29a      	uxth	r2, r3
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7fe fdbc 	bl	80107c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011c4c:	4b13      	ldr	r3, [pc, #76]	; (8011c9c <tcp_process+0x5c0>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d105      	bne.n	8011c62 <tcp_process+0x586>
 8011c56:	4b11      	ldr	r3, [pc, #68]	; (8011c9c <tcp_process+0x5c0>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	4a0f      	ldr	r2, [pc, #60]	; (8011c9c <tcp_process+0x5c0>)
 8011c5e:	6013      	str	r3, [r2, #0]
 8011c60:	e02e      	b.n	8011cc0 <tcp_process+0x5e4>
 8011c62:	4b0e      	ldr	r3, [pc, #56]	; (8011c9c <tcp_process+0x5c0>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	e027      	b.n	8011cba <tcp_process+0x5de>
 8011c6a:	bf00      	nop
 8011c6c:	20011400 	.word	0x20011400
 8011c70:	200113f8 	.word	0x200113f8
 8011c74:	200113fe 	.word	0x200113fe
 8011c78:	200113f4 	.word	0x200113f4
 8011c7c:	200113e4 	.word	0x200113e4
 8011c80:	2000a2d0 	.word	0x2000a2d0
 8011c84:	2000a2d4 	.word	0x2000a2d4
 8011c88:	0802066c 	.word	0x0802066c
 8011c8c:	0802090c 	.word	0x0802090c
 8011c90:	080206b8 	.word	0x080206b8
 8011c94:	200113fc 	.word	0x200113fc
 8011c98:	20011401 	.word	0x20011401
 8011c9c:	200113c8 	.word	0x200113c8
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d104      	bne.n	8011cb4 <tcp_process+0x5d8>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	68da      	ldr	r2, [r3, #12]
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	60da      	str	r2, [r3, #12]
 8011cb2:	e005      	b.n	8011cc0 <tcp_process+0x5e4>
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	617b      	str	r3, [r7, #20]
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1ef      	bne.n	8011ca0 <tcp_process+0x5c4>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	60da      	str	r2, [r3, #12]
 8011cc6:	4b77      	ldr	r3, [pc, #476]	; (8011ea4 <tcp_process+0x7c8>)
 8011cc8:	2201      	movs	r2, #1
 8011cca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	220a      	movs	r2, #10
 8011cd0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011cd2:	4b75      	ldr	r3, [pc, #468]	; (8011ea8 <tcp_process+0x7cc>)
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	60da      	str	r2, [r3, #12]
 8011cda:	4a73      	ldr	r2, [pc, #460]	; (8011ea8 <tcp_process+0x7cc>)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6013      	str	r3, [r2, #0]
 8011ce0:	f003 f952 	bl	8014f88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011ce4:	e0d2      	b.n	8011e8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	8b5b      	ldrh	r3, [r3, #26]
 8011cea:	f043 0302 	orr.w	r3, r3, #2
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2208      	movs	r2, #8
 8011cf8:	751a      	strb	r2, [r3, #20]
      break;
 8011cfa:	e0c7      	b.n	8011e8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011cfc:	4b6b      	ldr	r3, [pc, #428]	; (8011eac <tcp_process+0x7d0>)
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	f003 0310 	and.w	r3, r3, #16
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	f000 80c1 	beq.w	8011e8c <tcp_process+0x7b0>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d0e:	4b68      	ldr	r3, [pc, #416]	; (8011eb0 <tcp_process+0x7d4>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	f040 80ba 	bne.w	8011e8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f040 80b5 	bne.w	8011e8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2206      	movs	r2, #6
 8011d26:	751a      	strb	r2, [r3, #20]
      break;
 8011d28:	e0b0      	b.n	8011e8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 f9ca 	bl	80120c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011d30:	4b60      	ldr	r3, [pc, #384]	; (8011eb4 <tcp_process+0x7d8>)
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	f003 0320 	and.w	r3, r3, #32
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f000 80a9 	beq.w	8011e90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	8b5b      	ldrh	r3, [r3, #26]
 8011d42:	f043 0302 	orr.w	r3, r3, #2
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f7fe fd39 	bl	80107c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d52:	4b59      	ldr	r3, [pc, #356]	; (8011eb8 <tcp_process+0x7dc>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d105      	bne.n	8011d68 <tcp_process+0x68c>
 8011d5c:	4b56      	ldr	r3, [pc, #344]	; (8011eb8 <tcp_process+0x7dc>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	68db      	ldr	r3, [r3, #12]
 8011d62:	4a55      	ldr	r2, [pc, #340]	; (8011eb8 <tcp_process+0x7dc>)
 8011d64:	6013      	str	r3, [r2, #0]
 8011d66:	e013      	b.n	8011d90 <tcp_process+0x6b4>
 8011d68:	4b53      	ldr	r3, [pc, #332]	; (8011eb8 <tcp_process+0x7dc>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	613b      	str	r3, [r7, #16]
 8011d6e:	e00c      	b.n	8011d8a <tcp_process+0x6ae>
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d104      	bne.n	8011d84 <tcp_process+0x6a8>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	68da      	ldr	r2, [r3, #12]
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	60da      	str	r2, [r3, #12]
 8011d82:	e005      	b.n	8011d90 <tcp_process+0x6b4>
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	613b      	str	r3, [r7, #16]
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1ef      	bne.n	8011d70 <tcp_process+0x694>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2200      	movs	r2, #0
 8011d94:	60da      	str	r2, [r3, #12]
 8011d96:	4b43      	ldr	r3, [pc, #268]	; (8011ea4 <tcp_process+0x7c8>)
 8011d98:	2201      	movs	r2, #1
 8011d9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	220a      	movs	r2, #10
 8011da0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011da2:	4b41      	ldr	r3, [pc, #260]	; (8011ea8 <tcp_process+0x7cc>)
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	60da      	str	r2, [r3, #12]
 8011daa:	4a3f      	ldr	r2, [pc, #252]	; (8011ea8 <tcp_process+0x7cc>)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6013      	str	r3, [r2, #0]
 8011db0:	f003 f8ea 	bl	8014f88 <tcp_timer_needed>
      }
      break;
 8011db4:	e06c      	b.n	8011e90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f000 f984 	bl	80120c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011dbc:	4b3b      	ldr	r3, [pc, #236]	; (8011eac <tcp_process+0x7d0>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f003 0310 	and.w	r3, r3, #16
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d065      	beq.n	8011e94 <tcp_process+0x7b8>
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011dcc:	4b38      	ldr	r3, [pc, #224]	; (8011eb0 <tcp_process+0x7d4>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d15f      	bne.n	8011e94 <tcp_process+0x7b8>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d15b      	bne.n	8011e94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f7fe fcf1 	bl	80107c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011de2:	4b35      	ldr	r3, [pc, #212]	; (8011eb8 <tcp_process+0x7dc>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d105      	bne.n	8011df8 <tcp_process+0x71c>
 8011dec:	4b32      	ldr	r3, [pc, #200]	; (8011eb8 <tcp_process+0x7dc>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	4a31      	ldr	r2, [pc, #196]	; (8011eb8 <tcp_process+0x7dc>)
 8011df4:	6013      	str	r3, [r2, #0]
 8011df6:	e013      	b.n	8011e20 <tcp_process+0x744>
 8011df8:	4b2f      	ldr	r3, [pc, #188]	; (8011eb8 <tcp_process+0x7dc>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	60fb      	str	r3, [r7, #12]
 8011dfe:	e00c      	b.n	8011e1a <tcp_process+0x73e>
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d104      	bne.n	8011e14 <tcp_process+0x738>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	68da      	ldr	r2, [r3, #12]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	60da      	str	r2, [r3, #12]
 8011e12:	e005      	b.n	8011e20 <tcp_process+0x744>
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	60fb      	str	r3, [r7, #12]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d1ef      	bne.n	8011e00 <tcp_process+0x724>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	60da      	str	r2, [r3, #12]
 8011e26:	4b1f      	ldr	r3, [pc, #124]	; (8011ea4 <tcp_process+0x7c8>)
 8011e28:	2201      	movs	r2, #1
 8011e2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	220a      	movs	r2, #10
 8011e30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011e32:	4b1d      	ldr	r3, [pc, #116]	; (8011ea8 <tcp_process+0x7cc>)
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	60da      	str	r2, [r3, #12]
 8011e3a:	4a1b      	ldr	r2, [pc, #108]	; (8011ea8 <tcp_process+0x7cc>)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6013      	str	r3, [r2, #0]
 8011e40:	f003 f8a2 	bl	8014f88 <tcp_timer_needed>
      }
      break;
 8011e44:	e026      	b.n	8011e94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 f93c 	bl	80120c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011e4c:	4b17      	ldr	r3, [pc, #92]	; (8011eac <tcp_process+0x7d0>)
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	f003 0310 	and.w	r3, r3, #16
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d01f      	beq.n	8011e98 <tcp_process+0x7bc>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e5c:	4b14      	ldr	r3, [pc, #80]	; (8011eb0 <tcp_process+0x7d4>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d119      	bne.n	8011e98 <tcp_process+0x7bc>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d115      	bne.n	8011e98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011e6c:	4b11      	ldr	r3, [pc, #68]	; (8011eb4 <tcp_process+0x7d8>)
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	f043 0310 	orr.w	r3, r3, #16
 8011e74:	b2da      	uxtb	r2, r3
 8011e76:	4b0f      	ldr	r3, [pc, #60]	; (8011eb4 <tcp_process+0x7d8>)
 8011e78:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011e7a:	e00d      	b.n	8011e98 <tcp_process+0x7bc>
    default:
      break;
 8011e7c:	bf00      	nop
 8011e7e:	e00c      	b.n	8011e9a <tcp_process+0x7be>
      break;
 8011e80:	bf00      	nop
 8011e82:	e00a      	b.n	8011e9a <tcp_process+0x7be>
      break;
 8011e84:	bf00      	nop
 8011e86:	e008      	b.n	8011e9a <tcp_process+0x7be>
      break;
 8011e88:	bf00      	nop
 8011e8a:	e006      	b.n	8011e9a <tcp_process+0x7be>
      break;
 8011e8c:	bf00      	nop
 8011e8e:	e004      	b.n	8011e9a <tcp_process+0x7be>
      break;
 8011e90:	bf00      	nop
 8011e92:	e002      	b.n	8011e9a <tcp_process+0x7be>
      break;
 8011e94:	bf00      	nop
 8011e96:	e000      	b.n	8011e9a <tcp_process+0x7be>
      break;
 8011e98:	bf00      	nop
  }
  return ERR_OK;
 8011e9a:	2300      	movs	r3, #0
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3724      	adds	r7, #36	; 0x24
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd90      	pop	{r4, r7, pc}
 8011ea4:	200113d0 	.word	0x200113d0
 8011ea8:	200113cc 	.word	0x200113cc
 8011eac:	20011400 	.word	0x20011400
 8011eb0:	200113f8 	.word	0x200113f8
 8011eb4:	20011401 	.word	0x20011401
 8011eb8:	200113c8 	.word	0x200113c8

08011ebc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011ebc:	b590      	push	{r4, r7, lr}
 8011ebe:	b085      	sub	sp, #20
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d106      	bne.n	8011eda <tcp_oos_insert_segment+0x1e>
 8011ecc:	4b3b      	ldr	r3, [pc, #236]	; (8011fbc <tcp_oos_insert_segment+0x100>)
 8011ece:	f240 421f 	movw	r2, #1055	; 0x41f
 8011ed2:	493b      	ldr	r1, [pc, #236]	; (8011fc0 <tcp_oos_insert_segment+0x104>)
 8011ed4:	483b      	ldr	r0, [pc, #236]	; (8011fc4 <tcp_oos_insert_segment+0x108>)
 8011ed6:	f00b fbfb 	bl	801d6d0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	68db      	ldr	r3, [r3, #12]
 8011ede:	899b      	ldrh	r3, [r3, #12]
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fb f978 	bl	800d1d8 <lwip_htons>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	f003 0301 	and.w	r3, r3, #1
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d028      	beq.n	8011f46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011ef4:	6838      	ldr	r0, [r7, #0]
 8011ef6:	f7fe f995 	bl	8010224 <tcp_segs_free>
    next = NULL;
 8011efa:	2300      	movs	r3, #0
 8011efc:	603b      	str	r3, [r7, #0]
 8011efe:	e056      	b.n	8011fae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	899b      	ldrh	r3, [r3, #12]
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fb f965 	bl	800d1d8 <lwip_htons>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d00d      	beq.n	8011f36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	899b      	ldrh	r3, [r3, #12]
 8011f20:	b29c      	uxth	r4, r3
 8011f22:	2001      	movs	r0, #1
 8011f24:	f7fb f958 	bl	800d1d8 <lwip_htons>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	4322      	orrs	r2, r4
 8011f32:	b292      	uxth	r2, r2
 8011f34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f7fe f984 	bl	801024e <tcp_seg_free>
    while (next &&
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d00e      	beq.n	8011f6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	891b      	ldrh	r3, [r3, #8]
 8011f50:	461a      	mov	r2, r3
 8011f52:	4b1d      	ldr	r3, [pc, #116]	; (8011fc8 <tcp_oos_insert_segment+0x10c>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	441a      	add	r2, r3
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	6839      	ldr	r1, [r7, #0]
 8011f60:	8909      	ldrh	r1, [r1, #8]
 8011f62:	440b      	add	r3, r1
 8011f64:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	daca      	bge.n	8011f00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d01e      	beq.n	8011fae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	891b      	ldrh	r3, [r3, #8]
 8011f74:	461a      	mov	r2, r3
 8011f76:	4b14      	ldr	r3, [pc, #80]	; (8011fc8 <tcp_oos_insert_segment+0x10c>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	441a      	add	r2, r3
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	dd12      	ble.n	8011fae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	4b0d      	ldr	r3, [pc, #52]	; (8011fc8 <tcp_oos_insert_segment+0x10c>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	1ad3      	subs	r3, r2, r3
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	685a      	ldr	r2, [r3, #4]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	891b      	ldrh	r3, [r3, #8]
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	4610      	mov	r0, r2
 8011faa:	f7fc fb91 	bl	800e6d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	683a      	ldr	r2, [r7, #0]
 8011fb2:	601a      	str	r2, [r3, #0]
}
 8011fb4:	bf00      	nop
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd90      	pop	{r4, r7, pc}
 8011fbc:	0802066c 	.word	0x0802066c
 8011fc0:	0802092c 	.word	0x0802092c
 8011fc4:	080206b8 	.word	0x080206b8
 8011fc8:	200113f4 	.word	0x200113f4

08011fcc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011fcc:	b5b0      	push	{r4, r5, r7, lr}
 8011fce:	b086      	sub	sp, #24
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	607a      	str	r2, [r7, #4]
 8011fd8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011fda:	e03e      	b.n	801205a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fc fd84 	bl	800eaf8 <pbuf_clen>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ffa:	8a7a      	ldrh	r2, [r7, #18]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d906      	bls.n	801200e <tcp_free_acked_segments+0x42>
 8012000:	4b2a      	ldr	r3, [pc, #168]	; (80120ac <tcp_free_acked_segments+0xe0>)
 8012002:	f240 4257 	movw	r2, #1111	; 0x457
 8012006:	492a      	ldr	r1, [pc, #168]	; (80120b0 <tcp_free_acked_segments+0xe4>)
 8012008:	482a      	ldr	r0, [pc, #168]	; (80120b4 <tcp_free_acked_segments+0xe8>)
 801200a:	f00b fb61 	bl	801d6d0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012014:	8a7b      	ldrh	r3, [r7, #18]
 8012016:	1ad3      	subs	r3, r2, r3
 8012018:	b29a      	uxth	r2, r3
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	891a      	ldrh	r2, [r3, #8]
 8012024:	4b24      	ldr	r3, [pc, #144]	; (80120b8 <tcp_free_acked_segments+0xec>)
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	4413      	add	r3, r2
 801202a:	b29a      	uxth	r2, r3
 801202c:	4b22      	ldr	r3, [pc, #136]	; (80120b8 <tcp_free_acked_segments+0xec>)
 801202e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012030:	6978      	ldr	r0, [r7, #20]
 8012032:	f7fe f90c 	bl	801024e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801203c:	2b00      	cmp	r3, #0
 801203e:	d00c      	beq.n	801205a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d109      	bne.n	801205a <tcp_free_acked_segments+0x8e>
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d106      	bne.n	801205a <tcp_free_acked_segments+0x8e>
 801204c:	4b17      	ldr	r3, [pc, #92]	; (80120ac <tcp_free_acked_segments+0xe0>)
 801204e:	f240 4261 	movw	r2, #1121	; 0x461
 8012052:	491a      	ldr	r1, [pc, #104]	; (80120bc <tcp_free_acked_segments+0xf0>)
 8012054:	4817      	ldr	r0, [pc, #92]	; (80120b4 <tcp_free_acked_segments+0xe8>)
 8012056:	f00b fb3b 	bl	801d6d0 <iprintf>
  while (seg_list != NULL &&
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d020      	beq.n	80120a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	4618      	mov	r0, r3
 8012068:	f7fb f8cb 	bl	800d202 <lwip_htonl>
 801206c:	4604      	mov	r4, r0
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	891b      	ldrh	r3, [r3, #8]
 8012072:	461d      	mov	r5, r3
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	899b      	ldrh	r3, [r3, #12]
 801207a:	b29b      	uxth	r3, r3
 801207c:	4618      	mov	r0, r3
 801207e:	f7fb f8ab 	bl	800d1d8 <lwip_htons>
 8012082:	4603      	mov	r3, r0
 8012084:	b2db      	uxtb	r3, r3
 8012086:	f003 0303 	and.w	r3, r3, #3
 801208a:	2b00      	cmp	r3, #0
 801208c:	d001      	beq.n	8012092 <tcp_free_acked_segments+0xc6>
 801208e:	2301      	movs	r3, #1
 8012090:	e000      	b.n	8012094 <tcp_free_acked_segments+0xc8>
 8012092:	2300      	movs	r3, #0
 8012094:	442b      	add	r3, r5
 8012096:	18e2      	adds	r2, r4, r3
 8012098:	4b09      	ldr	r3, [pc, #36]	; (80120c0 <tcp_free_acked_segments+0xf4>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801209e:	2b00      	cmp	r3, #0
 80120a0:	dd9c      	ble.n	8011fdc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80120a2:	68bb      	ldr	r3, [r7, #8]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3718      	adds	r7, #24
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bdb0      	pop	{r4, r5, r7, pc}
 80120ac:	0802066c 	.word	0x0802066c
 80120b0:	08020954 	.word	0x08020954
 80120b4:	080206b8 	.word	0x080206b8
 80120b8:	200113fc 	.word	0x200113fc
 80120bc:	0802097c 	.word	0x0802097c
 80120c0:	200113f8 	.word	0x200113f8

080120c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80120c4:	b5b0      	push	{r4, r5, r7, lr}
 80120c6:	b094      	sub	sp, #80	; 0x50
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80120cc:	2300      	movs	r3, #0
 80120ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d106      	bne.n	80120e4 <tcp_receive+0x20>
 80120d6:	4b91      	ldr	r3, [pc, #580]	; (801231c <tcp_receive+0x258>)
 80120d8:	f240 427b 	movw	r2, #1147	; 0x47b
 80120dc:	4990      	ldr	r1, [pc, #576]	; (8012320 <tcp_receive+0x25c>)
 80120de:	4891      	ldr	r0, [pc, #580]	; (8012324 <tcp_receive+0x260>)
 80120e0:	f00b faf6 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	7d1b      	ldrb	r3, [r3, #20]
 80120e8:	2b03      	cmp	r3, #3
 80120ea:	d806      	bhi.n	80120fa <tcp_receive+0x36>
 80120ec:	4b8b      	ldr	r3, [pc, #556]	; (801231c <tcp_receive+0x258>)
 80120ee:	f240 427c 	movw	r2, #1148	; 0x47c
 80120f2:	498d      	ldr	r1, [pc, #564]	; (8012328 <tcp_receive+0x264>)
 80120f4:	488b      	ldr	r0, [pc, #556]	; (8012324 <tcp_receive+0x260>)
 80120f6:	f00b faeb 	bl	801d6d0 <iprintf>

  if (flags & TCP_ACK) {
 80120fa:	4b8c      	ldr	r3, [pc, #560]	; (801232c <tcp_receive+0x268>)
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	f003 0310 	and.w	r3, r3, #16
 8012102:	2b00      	cmp	r3, #0
 8012104:	f000 8264 	beq.w	80125d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801210e:	461a      	mov	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012114:	4413      	add	r3, r2
 8012116:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801211c:	4b84      	ldr	r3, [pc, #528]	; (8012330 <tcp_receive+0x26c>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	db1b      	blt.n	801215e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801212a:	4b81      	ldr	r3, [pc, #516]	; (8012330 <tcp_receive+0x26c>)
 801212c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801212e:	429a      	cmp	r2, r3
 8012130:	d106      	bne.n	8012140 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012136:	4b7f      	ldr	r3, [pc, #508]	; (8012334 <tcp_receive+0x270>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	db0e      	blt.n	801215e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012144:	4b7b      	ldr	r3, [pc, #492]	; (8012334 <tcp_receive+0x270>)
 8012146:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012148:	429a      	cmp	r2, r3
 801214a:	d125      	bne.n	8012198 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801214c:	4b7a      	ldr	r3, [pc, #488]	; (8012338 <tcp_receive+0x274>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	89db      	ldrh	r3, [r3, #14]
 8012152:	b29a      	uxth	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801215a:	429a      	cmp	r2, r3
 801215c:	d91c      	bls.n	8012198 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801215e:	4b76      	ldr	r3, [pc, #472]	; (8012338 <tcp_receive+0x274>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	89db      	ldrh	r3, [r3, #14]
 8012164:	b29a      	uxth	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012178:	429a      	cmp	r2, r3
 801217a:	d205      	bcs.n	8012188 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012188:	4b69      	ldr	r3, [pc, #420]	; (8012330 <tcp_receive+0x26c>)
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012190:	4b68      	ldr	r3, [pc, #416]	; (8012334 <tcp_receive+0x270>)
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012198:	4b66      	ldr	r3, [pc, #408]	; (8012334 <tcp_receive+0x270>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121a0:	1ad3      	subs	r3, r2, r3
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	dc58      	bgt.n	8012258 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80121a6:	4b65      	ldr	r3, [pc, #404]	; (801233c <tcp_receive+0x278>)
 80121a8:	881b      	ldrh	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d14b      	bne.n	8012246 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80121b8:	4413      	add	r3, r2
 80121ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121bc:	429a      	cmp	r2, r3
 80121be:	d142      	bne.n	8012246 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	db3d      	blt.n	8012246 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80121ce:	4b59      	ldr	r3, [pc, #356]	; (8012334 <tcp_receive+0x270>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d137      	bne.n	8012246 <tcp_receive+0x182>
              found_dupack = 1;
 80121d6:	2301      	movs	r3, #1
 80121d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80121e0:	2bff      	cmp	r3, #255	; 0xff
 80121e2:	d007      	beq.n	80121f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80121ea:	3301      	adds	r3, #1
 80121ec:	b2da      	uxtb	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80121fa:	2b03      	cmp	r3, #3
 80121fc:	d91b      	bls.n	8012236 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012208:	4413      	add	r3, r2
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012212:	429a      	cmp	r2, r3
 8012214:	d30a      	bcc.n	801222c <tcp_receive+0x168>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012220:	4413      	add	r3, r2
 8012222:	b29a      	uxth	r2, r3
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801222a:	e004      	b.n	8012236 <tcp_receive+0x172>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012232:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801223c:	2b02      	cmp	r3, #2
 801223e:	d902      	bls.n	8012246 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f002 fb43 	bl	80148cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012248:	2b00      	cmp	r3, #0
 801224a:	f040 8161 	bne.w	8012510 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012256:	e15b      	b.n	8012510 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012258:	4b36      	ldr	r3, [pc, #216]	; (8012334 <tcp_receive+0x270>)
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012260:	1ad3      	subs	r3, r2, r3
 8012262:	3b01      	subs	r3, #1
 8012264:	2b00      	cmp	r3, #0
 8012266:	f2c0 814e 	blt.w	8012506 <tcp_receive+0x442>
 801226a:	4b32      	ldr	r3, [pc, #200]	; (8012334 <tcp_receive+0x270>)
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	2b00      	cmp	r3, #0
 8012276:	f300 8146 	bgt.w	8012506 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	8b5b      	ldrh	r3, [r3, #26]
 801227e:	f003 0304 	and.w	r3, r3, #4
 8012282:	2b00      	cmp	r3, #0
 8012284:	d010      	beq.n	80122a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	8b5b      	ldrh	r3, [r3, #26]
 801228a:	f023 0304 	bic.w	r3, r3, #4
 801228e:	b29a      	uxth	r2, r3
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2200      	movs	r2, #0
 80122ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122b6:	10db      	asrs	r3, r3, #3
 80122b8:	b21b      	sxth	r3, r3
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	4413      	add	r3, r2
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	b21a      	sxth	r2, r3
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80122d0:	4b18      	ldr	r3, [pc, #96]	; (8012334 <tcp_receive+0x270>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122da:	b29b      	uxth	r3, r3
 80122dc:	1ad3      	subs	r3, r2, r3
 80122de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80122e8:	4b12      	ldr	r3, [pc, #72]	; (8012334 <tcp_receive+0x270>)
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	7d1b      	ldrb	r3, [r3, #20]
 80122f4:	2b03      	cmp	r3, #3
 80122f6:	f240 8097 	bls.w	8012428 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012306:	429a      	cmp	r2, r3
 8012308:	d245      	bcs.n	8012396 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	8b5b      	ldrh	r3, [r3, #26]
 801230e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012312:	2b00      	cmp	r3, #0
 8012314:	d014      	beq.n	8012340 <tcp_receive+0x27c>
 8012316:	2301      	movs	r3, #1
 8012318:	e013      	b.n	8012342 <tcp_receive+0x27e>
 801231a:	bf00      	nop
 801231c:	0802066c 	.word	0x0802066c
 8012320:	0802099c 	.word	0x0802099c
 8012324:	080206b8 	.word	0x080206b8
 8012328:	080209b8 	.word	0x080209b8
 801232c:	20011400 	.word	0x20011400
 8012330:	200113f4 	.word	0x200113f4
 8012334:	200113f8 	.word	0x200113f8
 8012338:	200113e4 	.word	0x200113e4
 801233c:	200113fe 	.word	0x200113fe
 8012340:	2302      	movs	r3, #2
 8012342:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012346:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801234a:	b29a      	uxth	r2, r3
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012350:	fb12 f303 	smulbb	r3, r2, r3
 8012354:	b29b      	uxth	r3, r3
 8012356:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012358:	4293      	cmp	r3, r2
 801235a:	bf28      	it	cs
 801235c:	4613      	movcs	r3, r2
 801235e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012366:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012368:	4413      	add	r3, r2
 801236a:	b29a      	uxth	r2, r3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012372:	429a      	cmp	r2, r3
 8012374:	d309      	bcc.n	801238a <tcp_receive+0x2c6>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801237c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801237e:	4413      	add	r3, r2
 8012380:	b29a      	uxth	r2, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012388:	e04e      	b.n	8012428 <tcp_receive+0x364>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012390:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012394:	e048      	b.n	8012428 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801239c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801239e:	4413      	add	r3, r2
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d309      	bcc.n	80123c0 <tcp_receive+0x2fc>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80123b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80123b4:	4413      	add	r3, r2
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80123be:	e004      	b.n	80123ca <tcp_receive+0x306>
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d326      	bcc.n	8012428 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123fa:	4413      	add	r3, r2
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012404:	429a      	cmp	r2, r3
 8012406:	d30a      	bcc.n	801241e <tcp_receive+0x35a>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012412:	4413      	add	r3, r2
 8012414:	b29a      	uxth	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801241c:	e004      	b.n	8012428 <tcp_receive+0x364>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012424:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012430:	4a98      	ldr	r2, [pc, #608]	; (8012694 <tcp_receive+0x5d0>)
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7ff fdca 	bl	8011fcc <tcp_free_acked_segments>
 8012438:	4602      	mov	r2, r0
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012446:	4a94      	ldr	r2, [pc, #592]	; (8012698 <tcp_receive+0x5d4>)
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff fdbf 	bl	8011fcc <tcp_free_acked_segments>
 801244e:	4602      	mov	r2, r0
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012458:	2b00      	cmp	r3, #0
 801245a:	d104      	bne.n	8012466 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012462:	861a      	strh	r2, [r3, #48]	; 0x30
 8012464:	e002      	b.n	801246c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2200      	movs	r2, #0
 801246a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2200      	movs	r2, #0
 8012470:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012476:	2b00      	cmp	r3, #0
 8012478:	d103      	bne.n	8012482 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012488:	4b84      	ldr	r3, [pc, #528]	; (801269c <tcp_receive+0x5d8>)
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	4413      	add	r3, r2
 801248e:	b29a      	uxth	r2, r3
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	8b5b      	ldrh	r3, [r3, #26]
 801249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d035      	beq.n	801250e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d118      	bne.n	80124dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d00c      	beq.n	80124cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fa fe9f 	bl	800d202 <lwip_htonl>
 80124c4:	4603      	mov	r3, r0
 80124c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	dc20      	bgt.n	801250e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	8b5b      	ldrh	r3, [r3, #26]
 80124d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80124da:	e018      	b.n	801250e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124e4:	68db      	ldr	r3, [r3, #12]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7fa fe8a 	bl	800d202 <lwip_htonl>
 80124ee:	4603      	mov	r3, r0
 80124f0:	1ae3      	subs	r3, r4, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	dc0b      	bgt.n	801250e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	8b5b      	ldrh	r3, [r3, #26]
 80124fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80124fe:	b29a      	uxth	r2, r3
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012504:	e003      	b.n	801250e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f002 fbce 	bl	8014ca8 <tcp_send_empty_ack>
 801250c:	e000      	b.n	8012510 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801250e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012514:	2b00      	cmp	r3, #0
 8012516:	d05b      	beq.n	80125d0 <tcp_receive+0x50c>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801251c:	4b60      	ldr	r3, [pc, #384]	; (80126a0 <tcp_receive+0x5dc>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	1ad3      	subs	r3, r2, r3
 8012522:	2b00      	cmp	r3, #0
 8012524:	da54      	bge.n	80125d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012526:	4b5f      	ldr	r3, [pc, #380]	; (80126a4 <tcp_receive+0x5e0>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	b29a      	uxth	r2, r3
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012530:	b29b      	uxth	r3, r3
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	b29b      	uxth	r3, r3
 8012536:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801253a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012544:	10db      	asrs	r3, r3, #3
 8012546:	b21b      	sxth	r3, r3
 8012548:	b29b      	uxth	r3, r3
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	b29b      	uxth	r3, r3
 801254e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012558:	b29a      	uxth	r2, r3
 801255a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801255e:	4413      	add	r3, r2
 8012560:	b29b      	uxth	r3, r3
 8012562:	b21a      	sxth	r2, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012568:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801256c:	2b00      	cmp	r3, #0
 801256e:	da05      	bge.n	801257c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012570:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012574:	425b      	negs	r3, r3
 8012576:	b29b      	uxth	r3, r3
 8012578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801257c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012586:	109b      	asrs	r3, r3, #2
 8012588:	b21b      	sxth	r3, r3
 801258a:	b29b      	uxth	r3, r3
 801258c:	1ad3      	subs	r3, r2, r3
 801258e:	b29b      	uxth	r3, r3
 8012590:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801259a:	b29a      	uxth	r2, r3
 801259c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80125a0:	4413      	add	r3, r2
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	b21a      	sxth	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80125b0:	10db      	asrs	r3, r3, #3
 80125b2:	b21b      	sxth	r3, r3
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80125bc:	b29b      	uxth	r3, r3
 80125be:	4413      	add	r3, r2
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	b21a      	sxth	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80125d0:	4b35      	ldr	r3, [pc, #212]	; (80126a8 <tcp_receive+0x5e4>)
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	f000 84e2 	beq.w	8012f9e <tcp_receive+0xeda>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	7d1b      	ldrb	r3, [r3, #20]
 80125de:	2b06      	cmp	r3, #6
 80125e0:	f200 84dd 	bhi.w	8012f9e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125e8:	4b30      	ldr	r3, [pc, #192]	; (80126ac <tcp_receive+0x5e8>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	1ad3      	subs	r3, r2, r3
 80125ee:	3b01      	subs	r3, #1
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	f2c0 808f 	blt.w	8012714 <tcp_receive+0x650>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125fa:	4b2b      	ldr	r3, [pc, #172]	; (80126a8 <tcp_receive+0x5e4>)
 80125fc:	881b      	ldrh	r3, [r3, #0]
 80125fe:	4619      	mov	r1, r3
 8012600:	4b2a      	ldr	r3, [pc, #168]	; (80126ac <tcp_receive+0x5e8>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	440b      	add	r3, r1
 8012606:	1ad3      	subs	r3, r2, r3
 8012608:	3301      	adds	r3, #1
 801260a:	2b00      	cmp	r3, #0
 801260c:	f300 8082 	bgt.w	8012714 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012610:	4b27      	ldr	r3, [pc, #156]	; (80126b0 <tcp_receive+0x5ec>)
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801261a:	4b24      	ldr	r3, [pc, #144]	; (80126ac <tcp_receive+0x5e8>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012622:	4b23      	ldr	r3, [pc, #140]	; (80126b0 <tcp_receive+0x5ec>)
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <tcp_receive+0x574>
 801262a:	4b22      	ldr	r3, [pc, #136]	; (80126b4 <tcp_receive+0x5f0>)
 801262c:	f240 5294 	movw	r2, #1428	; 0x594
 8012630:	4921      	ldr	r1, [pc, #132]	; (80126b8 <tcp_receive+0x5f4>)
 8012632:	4822      	ldr	r0, [pc, #136]	; (80126bc <tcp_receive+0x5f8>)
 8012634:	f00b f84c 	bl	801d6d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801263e:	4293      	cmp	r3, r2
 8012640:	d906      	bls.n	8012650 <tcp_receive+0x58c>
 8012642:	4b1c      	ldr	r3, [pc, #112]	; (80126b4 <tcp_receive+0x5f0>)
 8012644:	f240 5295 	movw	r2, #1429	; 0x595
 8012648:	491d      	ldr	r1, [pc, #116]	; (80126c0 <tcp_receive+0x5fc>)
 801264a:	481c      	ldr	r0, [pc, #112]	; (80126bc <tcp_receive+0x5f8>)
 801264c:	f00b f840 	bl	801d6d0 <iprintf>
      off = (u16_t)off32;
 8012650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012652:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012656:	4b16      	ldr	r3, [pc, #88]	; (80126b0 <tcp_receive+0x5ec>)
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	891b      	ldrh	r3, [r3, #8]
 801265c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012660:	429a      	cmp	r2, r3
 8012662:	d906      	bls.n	8012672 <tcp_receive+0x5ae>
 8012664:	4b13      	ldr	r3, [pc, #76]	; (80126b4 <tcp_receive+0x5f0>)
 8012666:	f240 5297 	movw	r2, #1431	; 0x597
 801266a:	4916      	ldr	r1, [pc, #88]	; (80126c4 <tcp_receive+0x600>)
 801266c:	4813      	ldr	r0, [pc, #76]	; (80126bc <tcp_receive+0x5f8>)
 801266e:	f00b f82f 	bl	801d6d0 <iprintf>
      inseg.len -= off;
 8012672:	4b0f      	ldr	r3, [pc, #60]	; (80126b0 <tcp_receive+0x5ec>)
 8012674:	891a      	ldrh	r2, [r3, #8]
 8012676:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801267a:	1ad3      	subs	r3, r2, r3
 801267c:	b29a      	uxth	r2, r3
 801267e:	4b0c      	ldr	r3, [pc, #48]	; (80126b0 <tcp_receive+0x5ec>)
 8012680:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012682:	4b0b      	ldr	r3, [pc, #44]	; (80126b0 <tcp_receive+0x5ec>)
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	891a      	ldrh	r2, [r3, #8]
 8012688:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801268c:	1ad3      	subs	r3, r2, r3
 801268e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012690:	e02a      	b.n	80126e8 <tcp_receive+0x624>
 8012692:	bf00      	nop
 8012694:	080209d4 	.word	0x080209d4
 8012698:	080209dc 	.word	0x080209dc
 801269c:	200113fc 	.word	0x200113fc
 80126a0:	200113f8 	.word	0x200113f8
 80126a4:	200113bc 	.word	0x200113bc
 80126a8:	200113fe 	.word	0x200113fe
 80126ac:	200113f4 	.word	0x200113f4
 80126b0:	200113d4 	.word	0x200113d4
 80126b4:	0802066c 	.word	0x0802066c
 80126b8:	080209e4 	.word	0x080209e4
 80126bc:	080206b8 	.word	0x080206b8
 80126c0:	080209f4 	.word	0x080209f4
 80126c4:	08020a04 	.word	0x08020a04
        off -= p->len;
 80126c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ca:	895b      	ldrh	r3, [r3, #10]
 80126cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126d0:	1ad3      	subs	r3, r2, r3
 80126d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80126d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80126da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80126dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126de:	2200      	movs	r2, #0
 80126e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80126e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80126e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ea:	895b      	ldrh	r3, [r3, #10]
 80126ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d8e9      	bhi.n	80126c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80126f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126f8:	4619      	mov	r1, r3
 80126fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80126fc:	f7fc f8e8 	bl	800e8d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012704:	4a91      	ldr	r2, [pc, #580]	; (801294c <tcp_receive+0x888>)
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	4b91      	ldr	r3, [pc, #580]	; (8012950 <tcp_receive+0x88c>)
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	4a8f      	ldr	r2, [pc, #572]	; (801294c <tcp_receive+0x888>)
 801270e:	6812      	ldr	r2, [r2, #0]
 8012710:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012712:	e00d      	b.n	8012730 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012714:	4b8d      	ldr	r3, [pc, #564]	; (801294c <tcp_receive+0x888>)
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271c:	1ad3      	subs	r3, r2, r3
 801271e:	2b00      	cmp	r3, #0
 8012720:	da06      	bge.n	8012730 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	8b5b      	ldrh	r3, [r3, #26]
 8012726:	f043 0302 	orr.w	r3, r3, #2
 801272a:	b29a      	uxth	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012730:	4b86      	ldr	r3, [pc, #536]	; (801294c <tcp_receive+0x888>)
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012738:	1ad3      	subs	r3, r2, r3
 801273a:	2b00      	cmp	r3, #0
 801273c:	f2c0 842a 	blt.w	8012f94 <tcp_receive+0xed0>
 8012740:	4b82      	ldr	r3, [pc, #520]	; (801294c <tcp_receive+0x888>)
 8012742:	681a      	ldr	r2, [r3, #0]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012748:	6879      	ldr	r1, [r7, #4]
 801274a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801274c:	440b      	add	r3, r1
 801274e:	1ad3      	subs	r3, r2, r3
 8012750:	3301      	adds	r3, #1
 8012752:	2b00      	cmp	r3, #0
 8012754:	f300 841e 	bgt.w	8012f94 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801275c:	4b7b      	ldr	r3, [pc, #492]	; (801294c <tcp_receive+0x888>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	429a      	cmp	r2, r3
 8012762:	f040 829a 	bne.w	8012c9a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012766:	4b7a      	ldr	r3, [pc, #488]	; (8012950 <tcp_receive+0x88c>)
 8012768:	891c      	ldrh	r4, [r3, #8]
 801276a:	4b79      	ldr	r3, [pc, #484]	; (8012950 <tcp_receive+0x88c>)
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	899b      	ldrh	r3, [r3, #12]
 8012770:	b29b      	uxth	r3, r3
 8012772:	4618      	mov	r0, r3
 8012774:	f7fa fd30 	bl	800d1d8 <lwip_htons>
 8012778:	4603      	mov	r3, r0
 801277a:	b2db      	uxtb	r3, r3
 801277c:	f003 0303 	and.w	r3, r3, #3
 8012780:	2b00      	cmp	r3, #0
 8012782:	d001      	beq.n	8012788 <tcp_receive+0x6c4>
 8012784:	2301      	movs	r3, #1
 8012786:	e000      	b.n	801278a <tcp_receive+0x6c6>
 8012788:	2300      	movs	r3, #0
 801278a:	4423      	add	r3, r4
 801278c:	b29a      	uxth	r2, r3
 801278e:	4b71      	ldr	r3, [pc, #452]	; (8012954 <tcp_receive+0x890>)
 8012790:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012796:	4b6f      	ldr	r3, [pc, #444]	; (8012954 <tcp_receive+0x890>)
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	429a      	cmp	r2, r3
 801279c:	d275      	bcs.n	801288a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801279e:	4b6c      	ldr	r3, [pc, #432]	; (8012950 <tcp_receive+0x88c>)
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	899b      	ldrh	r3, [r3, #12]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fa fd16 	bl	800d1d8 <lwip_htons>
 80127ac:	4603      	mov	r3, r0
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	f003 0301 	and.w	r3, r3, #1
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d01f      	beq.n	80127f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80127b8:	4b65      	ldr	r3, [pc, #404]	; (8012950 <tcp_receive+0x88c>)
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	899b      	ldrh	r3, [r3, #12]
 80127be:	b29b      	uxth	r3, r3
 80127c0:	b21b      	sxth	r3, r3
 80127c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80127c6:	b21c      	sxth	r4, r3
 80127c8:	4b61      	ldr	r3, [pc, #388]	; (8012950 <tcp_receive+0x88c>)
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	899b      	ldrh	r3, [r3, #12]
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7fa fd01 	bl	800d1d8 <lwip_htons>
 80127d6:	4603      	mov	r3, r0
 80127d8:	b2db      	uxtb	r3, r3
 80127da:	b29b      	uxth	r3, r3
 80127dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fa fcf8 	bl	800d1d8 <lwip_htons>
 80127e8:	4603      	mov	r3, r0
 80127ea:	b21b      	sxth	r3, r3
 80127ec:	4323      	orrs	r3, r4
 80127ee:	b21a      	sxth	r2, r3
 80127f0:	4b57      	ldr	r3, [pc, #348]	; (8012950 <tcp_receive+0x88c>)
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	b292      	uxth	r2, r2
 80127f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80127fc:	4b54      	ldr	r3, [pc, #336]	; (8012950 <tcp_receive+0x88c>)
 80127fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012800:	4b53      	ldr	r3, [pc, #332]	; (8012950 <tcp_receive+0x88c>)
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	899b      	ldrh	r3, [r3, #12]
 8012806:	b29b      	uxth	r3, r3
 8012808:	4618      	mov	r0, r3
 801280a:	f7fa fce5 	bl	800d1d8 <lwip_htons>
 801280e:	4603      	mov	r3, r0
 8012810:	b2db      	uxtb	r3, r3
 8012812:	f003 0302 	and.w	r3, r3, #2
 8012816:	2b00      	cmp	r3, #0
 8012818:	d005      	beq.n	8012826 <tcp_receive+0x762>
            inseg.len -= 1;
 801281a:	4b4d      	ldr	r3, [pc, #308]	; (8012950 <tcp_receive+0x88c>)
 801281c:	891b      	ldrh	r3, [r3, #8]
 801281e:	3b01      	subs	r3, #1
 8012820:	b29a      	uxth	r2, r3
 8012822:	4b4b      	ldr	r3, [pc, #300]	; (8012950 <tcp_receive+0x88c>)
 8012824:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012826:	4b4a      	ldr	r3, [pc, #296]	; (8012950 <tcp_receive+0x88c>)
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	4a49      	ldr	r2, [pc, #292]	; (8012950 <tcp_receive+0x88c>)
 801282c:	8912      	ldrh	r2, [r2, #8]
 801282e:	4611      	mov	r1, r2
 8012830:	4618      	mov	r0, r3
 8012832:	f7fb ff4d 	bl	800e6d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012836:	4b46      	ldr	r3, [pc, #280]	; (8012950 <tcp_receive+0x88c>)
 8012838:	891c      	ldrh	r4, [r3, #8]
 801283a:	4b45      	ldr	r3, [pc, #276]	; (8012950 <tcp_receive+0x88c>)
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	899b      	ldrh	r3, [r3, #12]
 8012840:	b29b      	uxth	r3, r3
 8012842:	4618      	mov	r0, r3
 8012844:	f7fa fcc8 	bl	800d1d8 <lwip_htons>
 8012848:	4603      	mov	r3, r0
 801284a:	b2db      	uxtb	r3, r3
 801284c:	f003 0303 	and.w	r3, r3, #3
 8012850:	2b00      	cmp	r3, #0
 8012852:	d001      	beq.n	8012858 <tcp_receive+0x794>
 8012854:	2301      	movs	r3, #1
 8012856:	e000      	b.n	801285a <tcp_receive+0x796>
 8012858:	2300      	movs	r3, #0
 801285a:	4423      	add	r3, r4
 801285c:	b29a      	uxth	r2, r3
 801285e:	4b3d      	ldr	r3, [pc, #244]	; (8012954 <tcp_receive+0x890>)
 8012860:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012862:	4b3c      	ldr	r3, [pc, #240]	; (8012954 <tcp_receive+0x890>)
 8012864:	881b      	ldrh	r3, [r3, #0]
 8012866:	461a      	mov	r2, r3
 8012868:	4b38      	ldr	r3, [pc, #224]	; (801294c <tcp_receive+0x888>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	441a      	add	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012872:	6879      	ldr	r1, [r7, #4]
 8012874:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012876:	440b      	add	r3, r1
 8012878:	429a      	cmp	r2, r3
 801287a:	d006      	beq.n	801288a <tcp_receive+0x7c6>
 801287c:	4b36      	ldr	r3, [pc, #216]	; (8012958 <tcp_receive+0x894>)
 801287e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012882:	4936      	ldr	r1, [pc, #216]	; (801295c <tcp_receive+0x898>)
 8012884:	4836      	ldr	r0, [pc, #216]	; (8012960 <tcp_receive+0x89c>)
 8012886:	f00a ff23 	bl	801d6d0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801288e:	2b00      	cmp	r3, #0
 8012890:	f000 80e7 	beq.w	8012a62 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012894:	4b2e      	ldr	r3, [pc, #184]	; (8012950 <tcp_receive+0x88c>)
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	899b      	ldrh	r3, [r3, #12]
 801289a:	b29b      	uxth	r3, r3
 801289c:	4618      	mov	r0, r3
 801289e:	f7fa fc9b 	bl	800d1d8 <lwip_htons>
 80128a2:	4603      	mov	r3, r0
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	f003 0301 	and.w	r3, r3, #1
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d010      	beq.n	80128d0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80128ae:	e00a      	b.n	80128c6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ba:	681a      	ldr	r2, [r3, #0]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f7fd fcc4 	bl	801024e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d1f0      	bne.n	80128b0 <tcp_receive+0x7ec>
 80128ce:	e0c8      	b.n	8012a62 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80128d6:	e052      	b.n	801297e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80128d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	899b      	ldrh	r3, [r3, #12]
 80128de:	b29b      	uxth	r3, r3
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fa fc79 	bl	800d1d8 <lwip_htons>
 80128e6:	4603      	mov	r3, r0
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	f003 0301 	and.w	r3, r3, #1
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d03d      	beq.n	801296e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80128f2:	4b17      	ldr	r3, [pc, #92]	; (8012950 <tcp_receive+0x88c>)
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	899b      	ldrh	r3, [r3, #12]
 80128f8:	b29b      	uxth	r3, r3
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fa fc6c 	bl	800d1d8 <lwip_htons>
 8012900:	4603      	mov	r3, r0
 8012902:	b2db      	uxtb	r3, r3
 8012904:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012908:	2b00      	cmp	r3, #0
 801290a:	d130      	bne.n	801296e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801290c:	4b10      	ldr	r3, [pc, #64]	; (8012950 <tcp_receive+0x88c>)
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	899b      	ldrh	r3, [r3, #12]
 8012912:	b29c      	uxth	r4, r3
 8012914:	2001      	movs	r0, #1
 8012916:	f7fa fc5f 	bl	800d1d8 <lwip_htons>
 801291a:	4603      	mov	r3, r0
 801291c:	461a      	mov	r2, r3
 801291e:	4b0c      	ldr	r3, [pc, #48]	; (8012950 <tcp_receive+0x88c>)
 8012920:	68db      	ldr	r3, [r3, #12]
 8012922:	4322      	orrs	r2, r4
 8012924:	b292      	uxth	r2, r2
 8012926:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012928:	4b09      	ldr	r3, [pc, #36]	; (8012950 <tcp_receive+0x88c>)
 801292a:	891c      	ldrh	r4, [r3, #8]
 801292c:	4b08      	ldr	r3, [pc, #32]	; (8012950 <tcp_receive+0x88c>)
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	899b      	ldrh	r3, [r3, #12]
 8012932:	b29b      	uxth	r3, r3
 8012934:	4618      	mov	r0, r3
 8012936:	f7fa fc4f 	bl	800d1d8 <lwip_htons>
 801293a:	4603      	mov	r3, r0
 801293c:	b2db      	uxtb	r3, r3
 801293e:	f003 0303 	and.w	r3, r3, #3
 8012942:	2b00      	cmp	r3, #0
 8012944:	d00e      	beq.n	8012964 <tcp_receive+0x8a0>
 8012946:	2301      	movs	r3, #1
 8012948:	e00d      	b.n	8012966 <tcp_receive+0x8a2>
 801294a:	bf00      	nop
 801294c:	200113f4 	.word	0x200113f4
 8012950:	200113d4 	.word	0x200113d4
 8012954:	200113fe 	.word	0x200113fe
 8012958:	0802066c 	.word	0x0802066c
 801295c:	08020a14 	.word	0x08020a14
 8012960:	080206b8 	.word	0x080206b8
 8012964:	2300      	movs	r3, #0
 8012966:	4423      	add	r3, r4
 8012968:	b29a      	uxth	r2, r3
 801296a:	4b98      	ldr	r3, [pc, #608]	; (8012bcc <tcp_receive+0xb08>)
 801296c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012970:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012978:	6938      	ldr	r0, [r7, #16]
 801297a:	f7fd fc68 	bl	801024e <tcp_seg_free>
            while (next &&
 801297e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00e      	beq.n	80129a2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012984:	4b91      	ldr	r3, [pc, #580]	; (8012bcc <tcp_receive+0xb08>)
 8012986:	881b      	ldrh	r3, [r3, #0]
 8012988:	461a      	mov	r2, r3
 801298a:	4b91      	ldr	r3, [pc, #580]	; (8012bd0 <tcp_receive+0xb0c>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	441a      	add	r2, r3
 8012990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	685b      	ldr	r3, [r3, #4]
 8012996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012998:	8909      	ldrh	r1, [r1, #8]
 801299a:	440b      	add	r3, r1
 801299c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801299e:	2b00      	cmp	r3, #0
 80129a0:	da9a      	bge.n	80128d8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80129a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d059      	beq.n	8012a5c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80129a8:	4b88      	ldr	r3, [pc, #544]	; (8012bcc <tcp_receive+0xb08>)
 80129aa:	881b      	ldrh	r3, [r3, #0]
 80129ac:	461a      	mov	r2, r3
 80129ae:	4b88      	ldr	r3, [pc, #544]	; (8012bd0 <tcp_receive+0xb0c>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	441a      	add	r2, r3
 80129b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dd4d      	ble.n	8012a5c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80129c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	4b81      	ldr	r3, [pc, #516]	; (8012bd0 <tcp_receive+0xb0c>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	4b80      	ldr	r3, [pc, #512]	; (8012bd4 <tcp_receive+0xb10>)
 80129d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80129d6:	4b7f      	ldr	r3, [pc, #508]	; (8012bd4 <tcp_receive+0xb10>)
 80129d8:	68db      	ldr	r3, [r3, #12]
 80129da:	899b      	ldrh	r3, [r3, #12]
 80129dc:	b29b      	uxth	r3, r3
 80129de:	4618      	mov	r0, r3
 80129e0:	f7fa fbfa 	bl	800d1d8 <lwip_htons>
 80129e4:	4603      	mov	r3, r0
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	f003 0302 	and.w	r3, r3, #2
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d005      	beq.n	80129fc <tcp_receive+0x938>
                inseg.len -= 1;
 80129f0:	4b78      	ldr	r3, [pc, #480]	; (8012bd4 <tcp_receive+0xb10>)
 80129f2:	891b      	ldrh	r3, [r3, #8]
 80129f4:	3b01      	subs	r3, #1
 80129f6:	b29a      	uxth	r2, r3
 80129f8:	4b76      	ldr	r3, [pc, #472]	; (8012bd4 <tcp_receive+0xb10>)
 80129fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80129fc:	4b75      	ldr	r3, [pc, #468]	; (8012bd4 <tcp_receive+0xb10>)
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	4a74      	ldr	r2, [pc, #464]	; (8012bd4 <tcp_receive+0xb10>)
 8012a02:	8912      	ldrh	r2, [r2, #8]
 8012a04:	4611      	mov	r1, r2
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fb fe62 	bl	800e6d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012a0c:	4b71      	ldr	r3, [pc, #452]	; (8012bd4 <tcp_receive+0xb10>)
 8012a0e:	891c      	ldrh	r4, [r3, #8]
 8012a10:	4b70      	ldr	r3, [pc, #448]	; (8012bd4 <tcp_receive+0xb10>)
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	899b      	ldrh	r3, [r3, #12]
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7fa fbdd 	bl	800d1d8 <lwip_htons>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	b2db      	uxtb	r3, r3
 8012a22:	f003 0303 	and.w	r3, r3, #3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d001      	beq.n	8012a2e <tcp_receive+0x96a>
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	e000      	b.n	8012a30 <tcp_receive+0x96c>
 8012a2e:	2300      	movs	r3, #0
 8012a30:	4423      	add	r3, r4
 8012a32:	b29a      	uxth	r2, r3
 8012a34:	4b65      	ldr	r3, [pc, #404]	; (8012bcc <tcp_receive+0xb08>)
 8012a36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012a38:	4b64      	ldr	r3, [pc, #400]	; (8012bcc <tcp_receive+0xb08>)
 8012a3a:	881b      	ldrh	r3, [r3, #0]
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	4b64      	ldr	r3, [pc, #400]	; (8012bd0 <tcp_receive+0xb0c>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	441a      	add	r2, r3
 8012a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d006      	beq.n	8012a5c <tcp_receive+0x998>
 8012a4e:	4b62      	ldr	r3, [pc, #392]	; (8012bd8 <tcp_receive+0xb14>)
 8012a50:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012a54:	4961      	ldr	r1, [pc, #388]	; (8012bdc <tcp_receive+0xb18>)
 8012a56:	4862      	ldr	r0, [pc, #392]	; (8012be0 <tcp_receive+0xb1c>)
 8012a58:	f00a fe3a 	bl	801d6d0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a60:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012a62:	4b5a      	ldr	r3, [pc, #360]	; (8012bcc <tcp_receive+0xb08>)
 8012a64:	881b      	ldrh	r3, [r3, #0]
 8012a66:	461a      	mov	r2, r3
 8012a68:	4b59      	ldr	r3, [pc, #356]	; (8012bd0 <tcp_receive+0xb0c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	441a      	add	r2, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a76:	4b55      	ldr	r3, [pc, #340]	; (8012bcc <tcp_receive+0xb08>)
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d206      	bcs.n	8012a8c <tcp_receive+0x9c8>
 8012a7e:	4b56      	ldr	r3, [pc, #344]	; (8012bd8 <tcp_receive+0xb14>)
 8012a80:	f240 6207 	movw	r2, #1543	; 0x607
 8012a84:	4957      	ldr	r1, [pc, #348]	; (8012be4 <tcp_receive+0xb20>)
 8012a86:	4856      	ldr	r0, [pc, #344]	; (8012be0 <tcp_receive+0xb1c>)
 8012a88:	f00a fe22 	bl	801d6d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a90:	4b4e      	ldr	r3, [pc, #312]	; (8012bcc <tcp_receive+0xb08>)
 8012a92:	881b      	ldrh	r3, [r3, #0]
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7fc fd99 	bl	800f5d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012aa2:	4b4c      	ldr	r3, [pc, #304]	; (8012bd4 <tcp_receive+0xb10>)
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	891b      	ldrh	r3, [r3, #8]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d006      	beq.n	8012aba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012aac:	4b49      	ldr	r3, [pc, #292]	; (8012bd4 <tcp_receive+0xb10>)
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	4a4d      	ldr	r2, [pc, #308]	; (8012be8 <tcp_receive+0xb24>)
 8012ab2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012ab4:	4b47      	ldr	r3, [pc, #284]	; (8012bd4 <tcp_receive+0xb10>)
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012aba:	4b46      	ldr	r3, [pc, #280]	; (8012bd4 <tcp_receive+0xb10>)
 8012abc:	68db      	ldr	r3, [r3, #12]
 8012abe:	899b      	ldrh	r3, [r3, #12]
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7fa fb88 	bl	800d1d8 <lwip_htons>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	f003 0301 	and.w	r3, r3, #1
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 80b8 	beq.w	8012c46 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012ad6:	4b45      	ldr	r3, [pc, #276]	; (8012bec <tcp_receive+0xb28>)
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	f043 0320 	orr.w	r3, r3, #32
 8012ade:	b2da      	uxtb	r2, r3
 8012ae0:	4b42      	ldr	r3, [pc, #264]	; (8012bec <tcp_receive+0xb28>)
 8012ae2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012ae4:	e0af      	b.n	8012c46 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012af0:	68db      	ldr	r3, [r3, #12]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	4a36      	ldr	r2, [pc, #216]	; (8012bd0 <tcp_receive+0xb0c>)
 8012af6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	891b      	ldrh	r3, [r3, #8]
 8012afc:	461c      	mov	r4, r3
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	899b      	ldrh	r3, [r3, #12]
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7fa fb66 	bl	800d1d8 <lwip_htons>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	f003 0303 	and.w	r3, r3, #3
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d001      	beq.n	8012b1c <tcp_receive+0xa58>
 8012b18:	2301      	movs	r3, #1
 8012b1a:	e000      	b.n	8012b1e <tcp_receive+0xa5a>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	191a      	adds	r2, r3, r4
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b24:	441a      	add	r2, r3
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b2e:	461c      	mov	r4, r3
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	891b      	ldrh	r3, [r3, #8]
 8012b34:	461d      	mov	r5, r3
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	899b      	ldrh	r3, [r3, #12]
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fa fb4a 	bl	800d1d8 <lwip_htons>
 8012b44:	4603      	mov	r3, r0
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	f003 0303 	and.w	r3, r3, #3
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d001      	beq.n	8012b54 <tcp_receive+0xa90>
 8012b50:	2301      	movs	r3, #1
 8012b52:	e000      	b.n	8012b56 <tcp_receive+0xa92>
 8012b54:	2300      	movs	r3, #0
 8012b56:	442b      	add	r3, r5
 8012b58:	429c      	cmp	r4, r3
 8012b5a:	d206      	bcs.n	8012b6a <tcp_receive+0xaa6>
 8012b5c:	4b1e      	ldr	r3, [pc, #120]	; (8012bd8 <tcp_receive+0xb14>)
 8012b5e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012b62:	4923      	ldr	r1, [pc, #140]	; (8012bf0 <tcp_receive+0xb2c>)
 8012b64:	481e      	ldr	r0, [pc, #120]	; (8012be0 <tcp_receive+0xb1c>)
 8012b66:	f00a fdb3 	bl	801d6d0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	891b      	ldrh	r3, [r3, #8]
 8012b6e:	461c      	mov	r4, r3
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	899b      	ldrh	r3, [r3, #12]
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fa fb2d 	bl	800d1d8 <lwip_htons>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	f003 0303 	and.w	r3, r3, #3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d001      	beq.n	8012b8e <tcp_receive+0xaca>
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e000      	b.n	8012b90 <tcp_receive+0xacc>
 8012b8e:	2300      	movs	r3, #0
 8012b90:	1919      	adds	r1, r3, r4
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b96:	b28b      	uxth	r3, r1
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f7fc fd17 	bl	800f5d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	891b      	ldrh	r3, [r3, #8]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d028      	beq.n	8012c02 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012bb0:	4b0d      	ldr	r3, [pc, #52]	; (8012be8 <tcp_receive+0xb24>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d01d      	beq.n	8012bf4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012bb8:	4b0b      	ldr	r3, [pc, #44]	; (8012be8 <tcp_receive+0xb24>)
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	4610      	mov	r0, r2
 8012bc4:	f7fb ffd8 	bl	800eb78 <pbuf_cat>
 8012bc8:	e018      	b.n	8012bfc <tcp_receive+0xb38>
 8012bca:	bf00      	nop
 8012bcc:	200113fe 	.word	0x200113fe
 8012bd0:	200113f4 	.word	0x200113f4
 8012bd4:	200113d4 	.word	0x200113d4
 8012bd8:	0802066c 	.word	0x0802066c
 8012bdc:	08020a4c 	.word	0x08020a4c
 8012be0:	080206b8 	.word	0x080206b8
 8012be4:	08020a88 	.word	0x08020a88
 8012be8:	20011404 	.word	0x20011404
 8012bec:	20011401 	.word	0x20011401
 8012bf0:	08020aa8 	.word	0x08020aa8
            } else {
              recv_data = cseg->p;
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	685b      	ldr	r3, [r3, #4]
 8012bf8:	4a70      	ldr	r2, [pc, #448]	; (8012dbc <tcp_receive+0xcf8>)
 8012bfa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	899b      	ldrh	r3, [r3, #12]
 8012c08:	b29b      	uxth	r3, r3
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fa fae4 	bl	800d1d8 <lwip_htons>
 8012c10:	4603      	mov	r3, r0
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	f003 0301 	and.w	r3, r3, #1
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00d      	beq.n	8012c38 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012c1c:	4b68      	ldr	r3, [pc, #416]	; (8012dc0 <tcp_receive+0xcfc>)
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	f043 0320 	orr.w	r3, r3, #32
 8012c24:	b2da      	uxtb	r2, r3
 8012c26:	4b66      	ldr	r3, [pc, #408]	; (8012dc0 <tcp_receive+0xcfc>)
 8012c28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	7d1b      	ldrb	r3, [r3, #20]
 8012c2e:	2b04      	cmp	r3, #4
 8012c30:	d102      	bne.n	8012c38 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2207      	movs	r2, #7
 8012c36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012c40:	68b8      	ldr	r0, [r7, #8]
 8012c42:	f7fd fb04 	bl	801024e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d008      	beq.n	8012c60 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	685a      	ldr	r2, [r3, #4]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	f43f af43 	beq.w	8012ae6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	8b5b      	ldrh	r3, [r3, #26]
 8012c64:	f003 0301 	and.w	r3, r3, #1
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d00e      	beq.n	8012c8a <tcp_receive+0xbc6>
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	8b5b      	ldrh	r3, [r3, #26]
 8012c70:	f023 0301 	bic.w	r3, r3, #1
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	835a      	strh	r2, [r3, #26]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	8b5b      	ldrh	r3, [r3, #26]
 8012c7e:	f043 0302 	orr.w	r3, r3, #2
 8012c82:	b29a      	uxth	r2, r3
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012c88:	e188      	b.n	8012f9c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	8b5b      	ldrh	r3, [r3, #26]
 8012c8e:	f043 0301 	orr.w	r3, r3, #1
 8012c92:	b29a      	uxth	r2, r3
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012c98:	e180      	b.n	8012f9c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d106      	bne.n	8012cb0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012ca2:	4848      	ldr	r0, [pc, #288]	; (8012dc4 <tcp_receive+0xd00>)
 8012ca4:	f7fd faec 	bl	8010280 <tcp_seg_copy>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	675a      	str	r2, [r3, #116]	; 0x74
 8012cae:	e16d      	b.n	8012f8c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cba:	e157      	b.n	8012f6c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	685a      	ldr	r2, [r3, #4]
 8012cc2:	4b41      	ldr	r3, [pc, #260]	; (8012dc8 <tcp_receive+0xd04>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d11d      	bne.n	8012d06 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012cca:	4b3e      	ldr	r3, [pc, #248]	; (8012dc4 <tcp_receive+0xd00>)
 8012ccc:	891a      	ldrh	r2, [r3, #8]
 8012cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd0:	891b      	ldrh	r3, [r3, #8]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	f240 814f 	bls.w	8012f76 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012cd8:	483a      	ldr	r0, [pc, #232]	; (8012dc4 <tcp_receive+0xd00>)
 8012cda:	f7fd fad1 	bl	8010280 <tcp_seg_copy>
 8012cde:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f000 8149 	beq.w	8012f7a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d003      	beq.n	8012cf6 <tcp_receive+0xc32>
                    prev->next = cseg;
 8012cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf0:	697a      	ldr	r2, [r7, #20]
 8012cf2:	601a      	str	r2, [r3, #0]
 8012cf4:	e002      	b.n	8012cfc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	697a      	ldr	r2, [r7, #20]
 8012cfa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cfe:	6978      	ldr	r0, [r7, #20]
 8012d00:	f7ff f8dc 	bl	8011ebc <tcp_oos_insert_segment>
                }
                break;
 8012d04:	e139      	b.n	8012f7a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d117      	bne.n	8012d3c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012d0c:	4b2e      	ldr	r3, [pc, #184]	; (8012dc8 <tcp_receive+0xd04>)
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	da57      	bge.n	8012dcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012d1c:	4829      	ldr	r0, [pc, #164]	; (8012dc4 <tcp_receive+0xd00>)
 8012d1e:	f7fd faaf 	bl	8010280 <tcp_seg_copy>
 8012d22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f000 8129 	beq.w	8012f7e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	69ba      	ldr	r2, [r7, #24]
 8012d30:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d34:	69b8      	ldr	r0, [r7, #24]
 8012d36:	f7ff f8c1 	bl	8011ebc <tcp_oos_insert_segment>
                  }
                  break;
 8012d3a:	e120      	b.n	8012f7e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012d3c:	4b22      	ldr	r3, [pc, #136]	; (8012dc8 <tcp_receive+0xd04>)
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	685b      	ldr	r3, [r3, #4]
 8012d46:	1ad3      	subs	r3, r2, r3
 8012d48:	3b01      	subs	r3, #1
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	db3e      	blt.n	8012dcc <tcp_receive+0xd08>
 8012d4e:	4b1e      	ldr	r3, [pc, #120]	; (8012dc8 <tcp_receive+0xd04>)
 8012d50:	681a      	ldr	r2, [r3, #0]
 8012d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d54:	68db      	ldr	r3, [r3, #12]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	dc35      	bgt.n	8012dcc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012d60:	4818      	ldr	r0, [pc, #96]	; (8012dc4 <tcp_receive+0xd00>)
 8012d62:	f7fd fa8d 	bl	8010280 <tcp_seg_copy>
 8012d66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	f000 8109 	beq.w	8012f82 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d78:	8912      	ldrh	r2, [r2, #8]
 8012d7a:	441a      	add	r2, r3
 8012d7c:	4b12      	ldr	r3, [pc, #72]	; (8012dc8 <tcp_receive+0xd04>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	1ad3      	subs	r3, r2, r3
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	dd12      	ble.n	8012dac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012d86:	4b10      	ldr	r3, [pc, #64]	; (8012dc8 <tcp_receive+0xd04>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	1ad3      	subs	r3, r2, r3
 8012d96:	b29a      	uxth	r2, r3
 8012d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d9e:	685a      	ldr	r2, [r3, #4]
 8012da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012da2:	891b      	ldrh	r3, [r3, #8]
 8012da4:	4619      	mov	r1, r3
 8012da6:	4610      	mov	r0, r2
 8012da8:	f7fb fc92 	bl	800e6d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dae:	69fa      	ldr	r2, [r7, #28]
 8012db0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012db4:	69f8      	ldr	r0, [r7, #28]
 8012db6:	f7ff f881 	bl	8011ebc <tcp_oos_insert_segment>
                  }
                  break;
 8012dba:	e0e2      	b.n	8012f82 <tcp_receive+0xebe>
 8012dbc:	20011404 	.word	0x20011404
 8012dc0:	20011401 	.word	0x20011401
 8012dc4:	200113d4 	.word	0x200113d4
 8012dc8:	200113f4 	.word	0x200113f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f040 80c6 	bne.w	8012f66 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012dda:	4b80      	ldr	r3, [pc, #512]	; (8012fdc <tcp_receive+0xf18>)
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	f340 80bd 	ble.w	8012f66 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	899b      	ldrh	r3, [r3, #12]
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7fa f9ef 	bl	800d1d8 <lwip_htons>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	f003 0301 	and.w	r3, r3, #1
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f040 80bf 	bne.w	8012f86 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012e08:	4875      	ldr	r0, [pc, #468]	; (8012fe0 <tcp_receive+0xf1c>)
 8012e0a:	f7fd fa39 	bl	8010280 <tcp_seg_copy>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f000 80b6 	beq.w	8012f8a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	685b      	ldr	r3, [r3, #4]
 8012e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e26:	8912      	ldrh	r2, [r2, #8]
 8012e28:	441a      	add	r2, r3
 8012e2a:	4b6c      	ldr	r3, [pc, #432]	; (8012fdc <tcp_receive+0xf18>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	1ad3      	subs	r3, r2, r3
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	dd12      	ble.n	8012e5a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012e34:	4b69      	ldr	r3, [pc, #420]	; (8012fdc <tcp_receive+0xf18>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	b29a      	uxth	r2, r3
 8012e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	1ad3      	subs	r3, r2, r3
 8012e44:	b29a      	uxth	r2, r3
 8012e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4c:	685a      	ldr	r2, [r3, #4]
 8012e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e50:	891b      	ldrh	r3, [r3, #8]
 8012e52:	4619      	mov	r1, r3
 8012e54:	4610      	mov	r0, r2
 8012e56:	f7fb fc3b 	bl	800e6d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012e5a:	4b62      	ldr	r3, [pc, #392]	; (8012fe4 <tcp_receive+0xf20>)
 8012e5c:	881b      	ldrh	r3, [r3, #0]
 8012e5e:	461a      	mov	r2, r3
 8012e60:	4b5e      	ldr	r3, [pc, #376]	; (8012fdc <tcp_receive+0xf18>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	441a      	add	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e6a:	6879      	ldr	r1, [r7, #4]
 8012e6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e6e:	440b      	add	r3, r1
 8012e70:	1ad3      	subs	r3, r2, r3
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	f340 8089 	ble.w	8012f8a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	899b      	ldrh	r3, [r3, #12]
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fa f9a8 	bl	800d1d8 <lwip_htons>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	f003 0301 	and.w	r3, r3, #1
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d022      	beq.n	8012eda <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	68db      	ldr	r3, [r3, #12]
 8012e9a:	899b      	ldrh	r3, [r3, #12]
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	b21b      	sxth	r3, r3
 8012ea0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012ea4:	b21c      	sxth	r4, r3
 8012ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	899b      	ldrh	r3, [r3, #12]
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fa f991 	bl	800d1d8 <lwip_htons>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fa f988 	bl	800d1d8 <lwip_htons>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	b21b      	sxth	r3, r3
 8012ecc:	4323      	orrs	r3, r4
 8012ece:	b21a      	sxth	r2, r3
 8012ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	68db      	ldr	r3, [r3, #12]
 8012ed6:	b292      	uxth	r2, r2
 8012ed8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ee4:	4413      	add	r3, r2
 8012ee6:	b299      	uxth	r1, r3
 8012ee8:	4b3c      	ldr	r3, [pc, #240]	; (8012fdc <tcp_receive+0xf18>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	1a8a      	subs	r2, r1, r2
 8012ef4:	b292      	uxth	r2, r2
 8012ef6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	685a      	ldr	r2, [r3, #4]
 8012efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	891b      	ldrh	r3, [r3, #8]
 8012f04:	4619      	mov	r1, r3
 8012f06:	4610      	mov	r0, r2
 8012f08:	f7fb fbe2 	bl	800e6d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	891c      	ldrh	r4, [r3, #8]
 8012f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	899b      	ldrh	r3, [r3, #12]
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7fa f95b 	bl	800d1d8 <lwip_htons>
 8012f22:	4603      	mov	r3, r0
 8012f24:	b2db      	uxtb	r3, r3
 8012f26:	f003 0303 	and.w	r3, r3, #3
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d001      	beq.n	8012f32 <tcp_receive+0xe6e>
 8012f2e:	2301      	movs	r3, #1
 8012f30:	e000      	b.n	8012f34 <tcp_receive+0xe70>
 8012f32:	2300      	movs	r3, #0
 8012f34:	4423      	add	r3, r4
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	4b2a      	ldr	r3, [pc, #168]	; (8012fe4 <tcp_receive+0xf20>)
 8012f3a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012f3c:	4b29      	ldr	r3, [pc, #164]	; (8012fe4 <tcp_receive+0xf20>)
 8012f3e:	881b      	ldrh	r3, [r3, #0]
 8012f40:	461a      	mov	r2, r3
 8012f42:	4b26      	ldr	r3, [pc, #152]	; (8012fdc <tcp_receive+0xf18>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	441a      	add	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4c:	6879      	ldr	r1, [r7, #4]
 8012f4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f50:	440b      	add	r3, r1
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d019      	beq.n	8012f8a <tcp_receive+0xec6>
 8012f56:	4b24      	ldr	r3, [pc, #144]	; (8012fe8 <tcp_receive+0xf24>)
 8012f58:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012f5c:	4923      	ldr	r1, [pc, #140]	; (8012fec <tcp_receive+0xf28>)
 8012f5e:	4824      	ldr	r0, [pc, #144]	; (8012ff0 <tcp_receive+0xf2c>)
 8012f60:	f00a fbb6 	bl	801d6d0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012f64:	e011      	b.n	8012f8a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	f47f aea4 	bne.w	8012cbc <tcp_receive+0xbf8>
 8012f74:	e00a      	b.n	8012f8c <tcp_receive+0xec8>
                break;
 8012f76:	bf00      	nop
 8012f78:	e008      	b.n	8012f8c <tcp_receive+0xec8>
                break;
 8012f7a:	bf00      	nop
 8012f7c:	e006      	b.n	8012f8c <tcp_receive+0xec8>
                  break;
 8012f7e:	bf00      	nop
 8012f80:	e004      	b.n	8012f8c <tcp_receive+0xec8>
                  break;
 8012f82:	bf00      	nop
 8012f84:	e002      	b.n	8012f8c <tcp_receive+0xec8>
                  break;
 8012f86:	bf00      	nop
 8012f88:	e000      	b.n	8012f8c <tcp_receive+0xec8>
                break;
 8012f8a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f001 fe8b 	bl	8014ca8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012f92:	e003      	b.n	8012f9c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f001 fe87 	bl	8014ca8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012f9a:	e01a      	b.n	8012fd2 <tcp_receive+0xf0e>
 8012f9c:	e019      	b.n	8012fd2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012f9e:	4b0f      	ldr	r3, [pc, #60]	; (8012fdc <tcp_receive+0xf18>)
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	db0a      	blt.n	8012fc2 <tcp_receive+0xefe>
 8012fac:	4b0b      	ldr	r3, [pc, #44]	; (8012fdc <tcp_receive+0xf18>)
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb4:	6879      	ldr	r1, [r7, #4]
 8012fb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012fb8:	440b      	add	r3, r1
 8012fba:	1ad3      	subs	r3, r2, r3
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	dd07      	ble.n	8012fd2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	8b5b      	ldrh	r3, [r3, #26]
 8012fc6:	f043 0302 	orr.w	r3, r3, #2
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012fd0:	e7ff      	b.n	8012fd2 <tcp_receive+0xf0e>
 8012fd2:	bf00      	nop
 8012fd4:	3750      	adds	r7, #80	; 0x50
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	200113f4 	.word	0x200113f4
 8012fe0:	200113d4 	.word	0x200113d4
 8012fe4:	200113fe 	.word	0x200113fe
 8012fe8:	0802066c 	.word	0x0802066c
 8012fec:	08020a14 	.word	0x08020a14
 8012ff0:	080206b8 	.word	0x080206b8

08012ff4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012ffa:	4b15      	ldr	r3, [pc, #84]	; (8013050 <tcp_get_next_optbyte+0x5c>)
 8012ffc:	881b      	ldrh	r3, [r3, #0]
 8012ffe:	1c5a      	adds	r2, r3, #1
 8013000:	b291      	uxth	r1, r2
 8013002:	4a13      	ldr	r2, [pc, #76]	; (8013050 <tcp_get_next_optbyte+0x5c>)
 8013004:	8011      	strh	r1, [r2, #0]
 8013006:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013008:	4b12      	ldr	r3, [pc, #72]	; (8013054 <tcp_get_next_optbyte+0x60>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d004      	beq.n	801301a <tcp_get_next_optbyte+0x26>
 8013010:	4b11      	ldr	r3, [pc, #68]	; (8013058 <tcp_get_next_optbyte+0x64>)
 8013012:	881b      	ldrh	r3, [r3, #0]
 8013014:	88fa      	ldrh	r2, [r7, #6]
 8013016:	429a      	cmp	r2, r3
 8013018:	d208      	bcs.n	801302c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801301a:	4b10      	ldr	r3, [pc, #64]	; (801305c <tcp_get_next_optbyte+0x68>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	3314      	adds	r3, #20
 8013020:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013022:	88fb      	ldrh	r3, [r7, #6]
 8013024:	683a      	ldr	r2, [r7, #0]
 8013026:	4413      	add	r3, r2
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	e00b      	b.n	8013044 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801302c:	88fb      	ldrh	r3, [r7, #6]
 801302e:	b2da      	uxtb	r2, r3
 8013030:	4b09      	ldr	r3, [pc, #36]	; (8013058 <tcp_get_next_optbyte+0x64>)
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	b2db      	uxtb	r3, r3
 8013036:	1ad3      	subs	r3, r2, r3
 8013038:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801303a:	4b06      	ldr	r3, [pc, #24]	; (8013054 <tcp_get_next_optbyte+0x60>)
 801303c:	681a      	ldr	r2, [r3, #0]
 801303e:	797b      	ldrb	r3, [r7, #5]
 8013040:	4413      	add	r3, r2
 8013042:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013044:	4618      	mov	r0, r3
 8013046:	370c      	adds	r7, #12
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr
 8013050:	200113f0 	.word	0x200113f0
 8013054:	200113ec 	.word	0x200113ec
 8013058:	200113ea 	.word	0x200113ea
 801305c:	200113e4 	.word	0x200113e4

08013060 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d106      	bne.n	801307c <tcp_parseopt+0x1c>
 801306e:	4b32      	ldr	r3, [pc, #200]	; (8013138 <tcp_parseopt+0xd8>)
 8013070:	f240 727d 	movw	r2, #1917	; 0x77d
 8013074:	4931      	ldr	r1, [pc, #196]	; (801313c <tcp_parseopt+0xdc>)
 8013076:	4832      	ldr	r0, [pc, #200]	; (8013140 <tcp_parseopt+0xe0>)
 8013078:	f00a fb2a 	bl	801d6d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801307c:	4b31      	ldr	r3, [pc, #196]	; (8013144 <tcp_parseopt+0xe4>)
 801307e:	881b      	ldrh	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d055      	beq.n	8013130 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013084:	4b30      	ldr	r3, [pc, #192]	; (8013148 <tcp_parseopt+0xe8>)
 8013086:	2200      	movs	r2, #0
 8013088:	801a      	strh	r2, [r3, #0]
 801308a:	e045      	b.n	8013118 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801308c:	f7ff ffb2 	bl	8012ff4 <tcp_get_next_optbyte>
 8013090:	4603      	mov	r3, r0
 8013092:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013094:	7bfb      	ldrb	r3, [r7, #15]
 8013096:	2b02      	cmp	r3, #2
 8013098:	d006      	beq.n	80130a8 <tcp_parseopt+0x48>
 801309a:	2b02      	cmp	r3, #2
 801309c:	dc2b      	bgt.n	80130f6 <tcp_parseopt+0x96>
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d041      	beq.n	8013126 <tcp_parseopt+0xc6>
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d127      	bne.n	80130f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80130a6:	e037      	b.n	8013118 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80130a8:	f7ff ffa4 	bl	8012ff4 <tcp_get_next_optbyte>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b04      	cmp	r3, #4
 80130b0:	d13b      	bne.n	801312a <tcp_parseopt+0xca>
 80130b2:	4b25      	ldr	r3, [pc, #148]	; (8013148 <tcp_parseopt+0xe8>)
 80130b4:	881b      	ldrh	r3, [r3, #0]
 80130b6:	3301      	adds	r3, #1
 80130b8:	4a22      	ldr	r2, [pc, #136]	; (8013144 <tcp_parseopt+0xe4>)
 80130ba:	8812      	ldrh	r2, [r2, #0]
 80130bc:	4293      	cmp	r3, r2
 80130be:	da34      	bge.n	801312a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80130c0:	f7ff ff98 	bl	8012ff4 <tcp_get_next_optbyte>
 80130c4:	4603      	mov	r3, r0
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	021b      	lsls	r3, r3, #8
 80130ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80130cc:	f7ff ff92 	bl	8012ff4 <tcp_get_next_optbyte>
 80130d0:	4603      	mov	r3, r0
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	89bb      	ldrh	r3, [r7, #12]
 80130d6:	4313      	orrs	r3, r2
 80130d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80130da:	89bb      	ldrh	r3, [r7, #12]
 80130dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80130e0:	d804      	bhi.n	80130ec <tcp_parseopt+0x8c>
 80130e2:	89bb      	ldrh	r3, [r7, #12]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d001      	beq.n	80130ec <tcp_parseopt+0x8c>
 80130e8:	89ba      	ldrh	r2, [r7, #12]
 80130ea:	e001      	b.n	80130f0 <tcp_parseopt+0x90>
 80130ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80130f4:	e010      	b.n	8013118 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80130f6:	f7ff ff7d 	bl	8012ff4 <tcp_get_next_optbyte>
 80130fa:	4603      	mov	r3, r0
 80130fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80130fe:	7afb      	ldrb	r3, [r7, #11]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d914      	bls.n	801312e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013104:	7afb      	ldrb	r3, [r7, #11]
 8013106:	b29a      	uxth	r2, r3
 8013108:	4b0f      	ldr	r3, [pc, #60]	; (8013148 <tcp_parseopt+0xe8>)
 801310a:	881b      	ldrh	r3, [r3, #0]
 801310c:	4413      	add	r3, r2
 801310e:	b29b      	uxth	r3, r3
 8013110:	3b02      	subs	r3, #2
 8013112:	b29a      	uxth	r2, r3
 8013114:	4b0c      	ldr	r3, [pc, #48]	; (8013148 <tcp_parseopt+0xe8>)
 8013116:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013118:	4b0b      	ldr	r3, [pc, #44]	; (8013148 <tcp_parseopt+0xe8>)
 801311a:	881a      	ldrh	r2, [r3, #0]
 801311c:	4b09      	ldr	r3, [pc, #36]	; (8013144 <tcp_parseopt+0xe4>)
 801311e:	881b      	ldrh	r3, [r3, #0]
 8013120:	429a      	cmp	r2, r3
 8013122:	d3b3      	bcc.n	801308c <tcp_parseopt+0x2c>
 8013124:	e004      	b.n	8013130 <tcp_parseopt+0xd0>
          return;
 8013126:	bf00      	nop
 8013128:	e002      	b.n	8013130 <tcp_parseopt+0xd0>
            return;
 801312a:	bf00      	nop
 801312c:	e000      	b.n	8013130 <tcp_parseopt+0xd0>
            return;
 801312e:	bf00      	nop
      }
    }
  }
}
 8013130:	3710      	adds	r7, #16
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	0802066c 	.word	0x0802066c
 801313c:	08020ad0 	.word	0x08020ad0
 8013140:	080206b8 	.word	0x080206b8
 8013144:	200113e8 	.word	0x200113e8
 8013148:	200113f0 	.word	0x200113f0

0801314c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801314c:	b480      	push	{r7}
 801314e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013150:	4b05      	ldr	r3, [pc, #20]	; (8013168 <tcp_trigger_input_pcb_close+0x1c>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	f043 0310 	orr.w	r3, r3, #16
 8013158:	b2da      	uxtb	r2, r3
 801315a:	4b03      	ldr	r3, [pc, #12]	; (8013168 <tcp_trigger_input_pcb_close+0x1c>)
 801315c:	701a      	strb	r2, [r3, #0]
}
 801315e:	bf00      	nop
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	20011401 	.word	0x20011401

0801316c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00a      	beq.n	8013194 <tcp_route+0x28>
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	7a1b      	ldrb	r3, [r3, #8]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d006      	beq.n	8013194 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	7a1b      	ldrb	r3, [r3, #8]
 801318a:	4618      	mov	r0, r3
 801318c:	f7fb f898 	bl	800e2c0 <netif_get_by_index>
 8013190:	4603      	mov	r3, r0
 8013192:	e003      	b.n	801319c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f003 fcb9 	bl	8016b0c <ip4_route>
 801319a:	4603      	mov	r3, r0
  }
}
 801319c:	4618      	mov	r0, r3
 801319e:	3710      	adds	r7, #16
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80131a4:	b590      	push	{r4, r7, lr}
 80131a6:	b087      	sub	sp, #28
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	603b      	str	r3, [r7, #0]
 80131b0:	4613      	mov	r3, r2
 80131b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d105      	bne.n	80131c6 <tcp_create_segment+0x22>
 80131ba:	4b44      	ldr	r3, [pc, #272]	; (80132cc <tcp_create_segment+0x128>)
 80131bc:	22a3      	movs	r2, #163	; 0xa3
 80131be:	4944      	ldr	r1, [pc, #272]	; (80132d0 <tcp_create_segment+0x12c>)
 80131c0:	4844      	ldr	r0, [pc, #272]	; (80132d4 <tcp_create_segment+0x130>)
 80131c2:	f00a fa85 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d105      	bne.n	80131d8 <tcp_create_segment+0x34>
 80131cc:	4b3f      	ldr	r3, [pc, #252]	; (80132cc <tcp_create_segment+0x128>)
 80131ce:	22a4      	movs	r2, #164	; 0xa4
 80131d0:	4941      	ldr	r1, [pc, #260]	; (80132d8 <tcp_create_segment+0x134>)
 80131d2:	4840      	ldr	r0, [pc, #256]	; (80132d4 <tcp_create_segment+0x130>)
 80131d4:	f00a fa7c 	bl	801d6d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80131d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	f003 0304 	and.w	r3, r3, #4
 80131e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80131e6:	2003      	movs	r0, #3
 80131e8:	f7fa fcde 	bl	800dba8 <memp_malloc>
 80131ec:	6138      	str	r0, [r7, #16]
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d104      	bne.n	80131fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80131f4:	68b8      	ldr	r0, [r7, #8]
 80131f6:	f7fb fbf1 	bl	800e9dc <pbuf_free>
    return NULL;
 80131fa:	2300      	movs	r3, #0
 80131fc:	e061      	b.n	80132c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013204:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	2200      	movs	r2, #0
 801320a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	68ba      	ldr	r2, [r7, #8]
 8013210:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	891a      	ldrh	r2, [r3, #8]
 8013216:	7dfb      	ldrb	r3, [r7, #23]
 8013218:	b29b      	uxth	r3, r3
 801321a:	429a      	cmp	r2, r3
 801321c:	d205      	bcs.n	801322a <tcp_create_segment+0x86>
 801321e:	4b2b      	ldr	r3, [pc, #172]	; (80132cc <tcp_create_segment+0x128>)
 8013220:	22b0      	movs	r2, #176	; 0xb0
 8013222:	492e      	ldr	r1, [pc, #184]	; (80132dc <tcp_create_segment+0x138>)
 8013224:	482b      	ldr	r0, [pc, #172]	; (80132d4 <tcp_create_segment+0x130>)
 8013226:	f00a fa53 	bl	801d6d0 <iprintf>
  seg->len = p->tot_len - optlen;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	891a      	ldrh	r2, [r3, #8]
 801322e:	7dfb      	ldrb	r3, [r7, #23]
 8013230:	b29b      	uxth	r3, r3
 8013232:	1ad3      	subs	r3, r2, r3
 8013234:	b29a      	uxth	r2, r3
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801323a:	2114      	movs	r1, #20
 801323c:	68b8      	ldr	r0, [r7, #8]
 801323e:	f7fb fb37 	bl	800e8b0 <pbuf_add_header>
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d004      	beq.n	8013252 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013248:	6938      	ldr	r0, [r7, #16]
 801324a:	f7fd f800 	bl	801024e <tcp_seg_free>
    return NULL;
 801324e:	2300      	movs	r3, #0
 8013250:	e037      	b.n	80132c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	685a      	ldr	r2, [r3, #4]
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	8ada      	ldrh	r2, [r3, #22]
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	68dc      	ldr	r4, [r3, #12]
 8013264:	4610      	mov	r0, r2
 8013266:	f7f9 ffb7 	bl	800d1d8 <lwip_htons>
 801326a:	4603      	mov	r3, r0
 801326c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	8b1a      	ldrh	r2, [r3, #24]
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	68dc      	ldr	r4, [r3, #12]
 8013276:	4610      	mov	r0, r2
 8013278:	f7f9 ffae 	bl	800d1d8 <lwip_htons>
 801327c:	4603      	mov	r3, r0
 801327e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	68dc      	ldr	r4, [r3, #12]
 8013284:	6838      	ldr	r0, [r7, #0]
 8013286:	f7f9 ffbc 	bl	800d202 <lwip_htonl>
 801328a:	4603      	mov	r3, r0
 801328c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801328e:	7dfb      	ldrb	r3, [r7, #23]
 8013290:	089b      	lsrs	r3, r3, #2
 8013292:	b2db      	uxtb	r3, r3
 8013294:	b29b      	uxth	r3, r3
 8013296:	3305      	adds	r3, #5
 8013298:	b29b      	uxth	r3, r3
 801329a:	031b      	lsls	r3, r3, #12
 801329c:	b29a      	uxth	r2, r3
 801329e:	79fb      	ldrb	r3, [r7, #7]
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	4313      	orrs	r3, r2
 80132a4:	b29a      	uxth	r2, r3
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	68dc      	ldr	r4, [r3, #12]
 80132aa:	4610      	mov	r0, r2
 80132ac:	f7f9 ff94 	bl	800d1d8 <lwip_htons>
 80132b0:	4603      	mov	r3, r0
 80132b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	2200      	movs	r2, #0
 80132ba:	749a      	strb	r2, [r3, #18]
 80132bc:	2200      	movs	r2, #0
 80132be:	74da      	strb	r2, [r3, #19]
  return seg;
 80132c0:	693b      	ldr	r3, [r7, #16]
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	371c      	adds	r7, #28
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd90      	pop	{r4, r7, pc}
 80132ca:	bf00      	nop
 80132cc:	08020aec 	.word	0x08020aec
 80132d0:	08020b20 	.word	0x08020b20
 80132d4:	08020b40 	.word	0x08020b40
 80132d8:	08020b68 	.word	0x08020b68
 80132dc:	08020b8c 	.word	0x08020b8c

080132e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	607b      	str	r3, [r7, #4]
 80132e8:	4603      	mov	r3, r0
 80132ea:	73fb      	strb	r3, [r7, #15]
 80132ec:	460b      	mov	r3, r1
 80132ee:	81bb      	strh	r3, [r7, #12]
 80132f0:	4613      	mov	r3, r2
 80132f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80132f4:	89bb      	ldrh	r3, [r7, #12]
 80132f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d105      	bne.n	801330a <tcp_pbuf_prealloc+0x2a>
 80132fe:	4b30      	ldr	r3, [pc, #192]	; (80133c0 <tcp_pbuf_prealloc+0xe0>)
 8013300:	22e8      	movs	r2, #232	; 0xe8
 8013302:	4930      	ldr	r1, [pc, #192]	; (80133c4 <tcp_pbuf_prealloc+0xe4>)
 8013304:	4830      	ldr	r0, [pc, #192]	; (80133c8 <tcp_pbuf_prealloc+0xe8>)
 8013306:	f00a f9e3 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801330a:	6a3b      	ldr	r3, [r7, #32]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d105      	bne.n	801331c <tcp_pbuf_prealloc+0x3c>
 8013310:	4b2b      	ldr	r3, [pc, #172]	; (80133c0 <tcp_pbuf_prealloc+0xe0>)
 8013312:	22e9      	movs	r2, #233	; 0xe9
 8013314:	492d      	ldr	r1, [pc, #180]	; (80133cc <tcp_pbuf_prealloc+0xec>)
 8013316:	482c      	ldr	r0, [pc, #176]	; (80133c8 <tcp_pbuf_prealloc+0xe8>)
 8013318:	f00a f9da 	bl	801d6d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801331c:	89ba      	ldrh	r2, [r7, #12]
 801331e:	897b      	ldrh	r3, [r7, #10]
 8013320:	429a      	cmp	r2, r3
 8013322:	d221      	bcs.n	8013368 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013328:	f003 0302 	and.w	r3, r3, #2
 801332c:	2b00      	cmp	r3, #0
 801332e:	d111      	bne.n	8013354 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013330:	6a3b      	ldr	r3, [r7, #32]
 8013332:	8b5b      	ldrh	r3, [r3, #26]
 8013334:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013338:	2b00      	cmp	r3, #0
 801333a:	d115      	bne.n	8013368 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801333c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013340:	2b00      	cmp	r3, #0
 8013342:	d007      	beq.n	8013354 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013344:	6a3b      	ldr	r3, [r7, #32]
 8013346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013348:	2b00      	cmp	r3, #0
 801334a:	d103      	bne.n	8013354 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801334c:	6a3b      	ldr	r3, [r7, #32]
 801334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013350:	2b00      	cmp	r3, #0
 8013352:	d009      	beq.n	8013368 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013354:	89bb      	ldrh	r3, [r7, #12]
 8013356:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801335a:	f023 0203 	bic.w	r2, r3, #3
 801335e:	897b      	ldrh	r3, [r7, #10]
 8013360:	4293      	cmp	r3, r2
 8013362:	bf28      	it	cs
 8013364:	4613      	movcs	r3, r2
 8013366:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013368:	8af9      	ldrh	r1, [r7, #22]
 801336a:	7bfb      	ldrb	r3, [r7, #15]
 801336c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013370:	4618      	mov	r0, r3
 8013372:	f7fb f84f 	bl	800e414 <pbuf_alloc>
 8013376:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d101      	bne.n	8013382 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801337e:	2300      	movs	r3, #0
 8013380:	e019      	b.n	80133b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d006      	beq.n	8013398 <tcp_pbuf_prealloc+0xb8>
 801338a:	4b0d      	ldr	r3, [pc, #52]	; (80133c0 <tcp_pbuf_prealloc+0xe0>)
 801338c:	f240 120b 	movw	r2, #267	; 0x10b
 8013390:	490f      	ldr	r1, [pc, #60]	; (80133d0 <tcp_pbuf_prealloc+0xf0>)
 8013392:	480d      	ldr	r0, [pc, #52]	; (80133c8 <tcp_pbuf_prealloc+0xe8>)
 8013394:	f00a f99c 	bl	801d6d0 <iprintf>
  *oversize = p->len - length;
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	895a      	ldrh	r2, [r3, #10]
 801339c:	89bb      	ldrh	r3, [r7, #12]
 801339e:	1ad3      	subs	r3, r2, r3
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	89ba      	ldrh	r2, [r7, #12]
 80133aa:	811a      	strh	r2, [r3, #8]
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	891a      	ldrh	r2, [r3, #8]
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	815a      	strh	r2, [r3, #10]
  return p;
 80133b4:	693b      	ldr	r3, [r7, #16]
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3718      	adds	r7, #24
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	08020aec 	.word	0x08020aec
 80133c4:	08020ba4 	.word	0x08020ba4
 80133c8:	08020b40 	.word	0x08020b40
 80133cc:	08020bc8 	.word	0x08020bc8
 80133d0:	08020be8 	.word	0x08020be8

080133d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	460b      	mov	r3, r1
 80133de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d106      	bne.n	80133f4 <tcp_write_checks+0x20>
 80133e6:	4b33      	ldr	r3, [pc, #204]	; (80134b4 <tcp_write_checks+0xe0>)
 80133e8:	f240 1233 	movw	r2, #307	; 0x133
 80133ec:	4932      	ldr	r1, [pc, #200]	; (80134b8 <tcp_write_checks+0xe4>)
 80133ee:	4833      	ldr	r0, [pc, #204]	; (80134bc <tcp_write_checks+0xe8>)
 80133f0:	f00a f96e 	bl	801d6d0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	7d1b      	ldrb	r3, [r3, #20]
 80133f8:	2b04      	cmp	r3, #4
 80133fa:	d00e      	beq.n	801341a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013400:	2b07      	cmp	r3, #7
 8013402:	d00a      	beq.n	801341a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013408:	2b02      	cmp	r3, #2
 801340a:	d006      	beq.n	801341a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013410:	2b03      	cmp	r3, #3
 8013412:	d002      	beq.n	801341a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013414:	f06f 030a 	mvn.w	r3, #10
 8013418:	e048      	b.n	80134ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801341a:	887b      	ldrh	r3, [r7, #2]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d101      	bne.n	8013424 <tcp_write_checks+0x50>
    return ERR_OK;
 8013420:	2300      	movs	r3, #0
 8013422:	e043      	b.n	80134ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801342a:	887a      	ldrh	r2, [r7, #2]
 801342c:	429a      	cmp	r2, r3
 801342e:	d909      	bls.n	8013444 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	8b5b      	ldrh	r3, [r3, #26]
 8013434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013438:	b29a      	uxth	r2, r3
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801343e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013442:	e033      	b.n	80134ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801344a:	2b08      	cmp	r3, #8
 801344c:	d909      	bls.n	8013462 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	8b5b      	ldrh	r3, [r3, #26]
 8013452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013456:	b29a      	uxth	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801345c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013460:	e024      	b.n	80134ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00f      	beq.n	801348c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013470:	2b00      	cmp	r3, #0
 8013472:	d11a      	bne.n	80134aa <tcp_write_checks+0xd6>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013478:	2b00      	cmp	r3, #0
 801347a:	d116      	bne.n	80134aa <tcp_write_checks+0xd6>
 801347c:	4b0d      	ldr	r3, [pc, #52]	; (80134b4 <tcp_write_checks+0xe0>)
 801347e:	f240 1255 	movw	r2, #341	; 0x155
 8013482:	490f      	ldr	r1, [pc, #60]	; (80134c0 <tcp_write_checks+0xec>)
 8013484:	480d      	ldr	r0, [pc, #52]	; (80134bc <tcp_write_checks+0xe8>)
 8013486:	f00a f923 	bl	801d6d0 <iprintf>
 801348a:	e00e      	b.n	80134aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013490:	2b00      	cmp	r3, #0
 8013492:	d103      	bne.n	801349c <tcp_write_checks+0xc8>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013498:	2b00      	cmp	r3, #0
 801349a:	d006      	beq.n	80134aa <tcp_write_checks+0xd6>
 801349c:	4b05      	ldr	r3, [pc, #20]	; (80134b4 <tcp_write_checks+0xe0>)
 801349e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80134a2:	4908      	ldr	r1, [pc, #32]	; (80134c4 <tcp_write_checks+0xf0>)
 80134a4:	4805      	ldr	r0, [pc, #20]	; (80134bc <tcp_write_checks+0xe8>)
 80134a6:	f00a f913 	bl	801d6d0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80134aa:	2300      	movs	r3, #0
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3708      	adds	r7, #8
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	08020aec 	.word	0x08020aec
 80134b8:	08020bfc 	.word	0x08020bfc
 80134bc:	08020b40 	.word	0x08020b40
 80134c0:	08020c1c 	.word	0x08020c1c
 80134c4:	08020c58 	.word	0x08020c58

080134c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80134c8:	b590      	push	{r4, r7, lr}
 80134ca:	b09b      	sub	sp, #108	; 0x6c
 80134cc:	af04      	add	r7, sp, #16
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	60b9      	str	r1, [r7, #8]
 80134d2:	4611      	mov	r1, r2
 80134d4:	461a      	mov	r2, r3
 80134d6:	460b      	mov	r3, r1
 80134d8:	80fb      	strh	r3, [r7, #6]
 80134da:	4613      	mov	r3, r2
 80134dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80134de:	2300      	movs	r3, #0
 80134e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80134e2:	2300      	movs	r3, #0
 80134e4:	653b      	str	r3, [r7, #80]	; 0x50
 80134e6:	2300      	movs	r3, #0
 80134e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80134ea:	2300      	movs	r3, #0
 80134ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80134ee:	2300      	movs	r3, #0
 80134f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80134f2:	2300      	movs	r3, #0
 80134f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80134f8:	2300      	movs	r3, #0
 80134fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013502:	2300      	movs	r3, #0
 8013504:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013506:	2300      	movs	r3, #0
 8013508:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d109      	bne.n	8013524 <tcp_write+0x5c>
 8013510:	4ba4      	ldr	r3, [pc, #656]	; (80137a4 <tcp_write+0x2dc>)
 8013512:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013516:	49a4      	ldr	r1, [pc, #656]	; (80137a8 <tcp_write+0x2e0>)
 8013518:	48a4      	ldr	r0, [pc, #656]	; (80137ac <tcp_write+0x2e4>)
 801351a:	f00a f8d9 	bl	801d6d0 <iprintf>
 801351e:	f06f 030f 	mvn.w	r3, #15
 8013522:	e32a      	b.n	8013b7a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801352a:	085b      	lsrs	r3, r3, #1
 801352c:	b29a      	uxth	r2, r3
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013532:	4293      	cmp	r3, r2
 8013534:	bf28      	it	cs
 8013536:	4613      	movcs	r3, r2
 8013538:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801353a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801353c:	2b00      	cmp	r3, #0
 801353e:	d102      	bne.n	8013546 <tcp_write+0x7e>
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013544:	e000      	b.n	8013548 <tcp_write+0x80>
 8013546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013548:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d109      	bne.n	8013564 <tcp_write+0x9c>
 8013550:	4b94      	ldr	r3, [pc, #592]	; (80137a4 <tcp_write+0x2dc>)
 8013552:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013556:	4996      	ldr	r1, [pc, #600]	; (80137b0 <tcp_write+0x2e8>)
 8013558:	4894      	ldr	r0, [pc, #592]	; (80137ac <tcp_write+0x2e4>)
 801355a:	f00a f8b9 	bl	801d6d0 <iprintf>
 801355e:	f06f 030f 	mvn.w	r3, #15
 8013562:	e30a      	b.n	8013b7a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013564:	88fb      	ldrh	r3, [r7, #6]
 8013566:	4619      	mov	r1, r3
 8013568:	68f8      	ldr	r0, [r7, #12]
 801356a:	f7ff ff33 	bl	80133d4 <tcp_write_checks>
 801356e:	4603      	mov	r3, r0
 8013570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013574:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013578:	2b00      	cmp	r3, #0
 801357a:	d002      	beq.n	8013582 <tcp_write+0xba>
    return err;
 801357c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013580:	e2fb      	b.n	8013b7a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013588:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801358c:	2300      	movs	r3, #0
 801358e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013596:	2b00      	cmp	r3, #0
 8013598:	f000 80f6 	beq.w	8013788 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135a0:	653b      	str	r3, [r7, #80]	; 0x50
 80135a2:	e002      	b.n	80135aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80135a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80135aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d1f8      	bne.n	80135a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80135b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135b4:	7a9b      	ldrb	r3, [r3, #10]
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	f003 0304 	and.w	r3, r3, #4
 80135be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80135c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c4:	891b      	ldrh	r3, [r3, #8]
 80135c6:	4619      	mov	r1, r3
 80135c8:	8c3b      	ldrh	r3, [r7, #32]
 80135ca:	440b      	add	r3, r1
 80135cc:	429a      	cmp	r2, r3
 80135ce:	da06      	bge.n	80135de <tcp_write+0x116>
 80135d0:	4b74      	ldr	r3, [pc, #464]	; (80137a4 <tcp_write+0x2dc>)
 80135d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80135d6:	4977      	ldr	r1, [pc, #476]	; (80137b4 <tcp_write+0x2ec>)
 80135d8:	4874      	ldr	r0, [pc, #464]	; (80137ac <tcp_write+0x2e4>)
 80135da:	f00a f879 	bl	801d6d0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80135de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135e0:	891a      	ldrh	r2, [r3, #8]
 80135e2:	8c3b      	ldrh	r3, [r7, #32]
 80135e4:	4413      	add	r3, r2
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135ea:	1ad3      	subs	r3, r2, r3
 80135ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80135f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80135f6:	8a7b      	ldrh	r3, [r7, #18]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d026      	beq.n	801364a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80135fc:	8a7b      	ldrh	r3, [r7, #18]
 80135fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013600:	429a      	cmp	r2, r3
 8013602:	d206      	bcs.n	8013612 <tcp_write+0x14a>
 8013604:	4b67      	ldr	r3, [pc, #412]	; (80137a4 <tcp_write+0x2dc>)
 8013606:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801360a:	496b      	ldr	r1, [pc, #428]	; (80137b8 <tcp_write+0x2f0>)
 801360c:	4867      	ldr	r0, [pc, #412]	; (80137ac <tcp_write+0x2e4>)
 801360e:	f00a f85f 	bl	801d6d0 <iprintf>
      seg = last_unsent;
 8013612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013614:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013616:	8a7b      	ldrh	r3, [r7, #18]
 8013618:	88fa      	ldrh	r2, [r7, #6]
 801361a:	4293      	cmp	r3, r2
 801361c:	bf28      	it	cs
 801361e:	4613      	movcs	r3, r2
 8013620:	b29b      	uxth	r3, r3
 8013622:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013624:	4293      	cmp	r3, r2
 8013626:	bf28      	it	cs
 8013628:	4613      	movcs	r3, r2
 801362a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801362c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013630:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013632:	4413      	add	r3, r2
 8013634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013638:	8a7a      	ldrh	r2, [r7, #18]
 801363a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801363c:	1ad3      	subs	r3, r2, r3
 801363e:	b29b      	uxth	r3, r3
 8013640:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013642:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801364a:	8a7b      	ldrh	r3, [r7, #18]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d00b      	beq.n	8013668 <tcp_write+0x1a0>
 8013650:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013654:	88fb      	ldrh	r3, [r7, #6]
 8013656:	429a      	cmp	r2, r3
 8013658:	d006      	beq.n	8013668 <tcp_write+0x1a0>
 801365a:	4b52      	ldr	r3, [pc, #328]	; (80137a4 <tcp_write+0x2dc>)
 801365c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013660:	4956      	ldr	r1, [pc, #344]	; (80137bc <tcp_write+0x2f4>)
 8013662:	4852      	ldr	r0, [pc, #328]	; (80137ac <tcp_write+0x2e4>)
 8013664:	f00a f834 	bl	801d6d0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013668:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801366c:	88fb      	ldrh	r3, [r7, #6]
 801366e:	429a      	cmp	r2, r3
 8013670:	f080 8167 	bcs.w	8013942 <tcp_write+0x47a>
 8013674:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 8163 	beq.w	8013942 <tcp_write+0x47a>
 801367c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801367e:	891b      	ldrh	r3, [r3, #8]
 8013680:	2b00      	cmp	r3, #0
 8013682:	f000 815e 	beq.w	8013942 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013686:	88fa      	ldrh	r2, [r7, #6]
 8013688:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801368c:	1ad2      	subs	r2, r2, r3
 801368e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013690:	4293      	cmp	r3, r2
 8013692:	bfa8      	it	ge
 8013694:	4613      	movge	r3, r2
 8013696:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801369a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801369c:	797b      	ldrb	r3, [r7, #5]
 801369e:	f003 0301 	and.w	r3, r3, #1
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d027      	beq.n	80136f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80136a6:	f107 0012 	add.w	r0, r7, #18
 80136aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136ac:	8bf9      	ldrh	r1, [r7, #30]
 80136ae:	2301      	movs	r3, #1
 80136b0:	9302      	str	r3, [sp, #8]
 80136b2:	797b      	ldrb	r3, [r7, #5]
 80136b4:	9301      	str	r3, [sp, #4]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	9300      	str	r3, [sp, #0]
 80136ba:	4603      	mov	r3, r0
 80136bc:	2000      	movs	r0, #0
 80136be:	f7ff fe0f 	bl	80132e0 <tcp_pbuf_prealloc>
 80136c2:	6578      	str	r0, [r7, #84]	; 0x54
 80136c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 8225 	beq.w	8013b16 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80136cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136ce:	6858      	ldr	r0, [r3, #4]
 80136d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136d4:	68ba      	ldr	r2, [r7, #8]
 80136d6:	4413      	add	r3, r2
 80136d8:	8bfa      	ldrh	r2, [r7, #30]
 80136da:	4619      	mov	r1, r3
 80136dc:	f009 ffe2 	bl	801d6a4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80136e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80136e2:	f7fb fa09 	bl	800eaf8 <pbuf_clen>
 80136e6:	4603      	mov	r3, r0
 80136e8:	461a      	mov	r2, r3
 80136ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136ee:	4413      	add	r3, r2
 80136f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80136f4:	e041      	b.n	801377a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80136f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	637b      	str	r3, [r7, #52]	; 0x34
 80136fc:	e002      	b.n	8013704 <tcp_write+0x23c>
 80136fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	637b      	str	r3, [r7, #52]	; 0x34
 8013704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d1f8      	bne.n	80136fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801370e:	7b1b      	ldrb	r3, [r3, #12]
 8013710:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013714:	2b00      	cmp	r3, #0
 8013716:	d115      	bne.n	8013744 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801371e:	8952      	ldrh	r2, [r2, #10]
 8013720:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013722:	68ba      	ldr	r2, [r7, #8]
 8013724:	429a      	cmp	r2, r3
 8013726:	d10d      	bne.n	8013744 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801372c:	2b00      	cmp	r3, #0
 801372e:	d006      	beq.n	801373e <tcp_write+0x276>
 8013730:	4b1c      	ldr	r3, [pc, #112]	; (80137a4 <tcp_write+0x2dc>)
 8013732:	f240 2231 	movw	r2, #561	; 0x231
 8013736:	4922      	ldr	r1, [pc, #136]	; (80137c0 <tcp_write+0x2f8>)
 8013738:	481c      	ldr	r0, [pc, #112]	; (80137ac <tcp_write+0x2e4>)
 801373a:	f009 ffc9 	bl	801d6d0 <iprintf>
          extendlen = seglen;
 801373e:	8bfb      	ldrh	r3, [r7, #30]
 8013740:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013742:	e01a      	b.n	801377a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013744:	8bfb      	ldrh	r3, [r7, #30]
 8013746:	2201      	movs	r2, #1
 8013748:	4619      	mov	r1, r3
 801374a:	2000      	movs	r0, #0
 801374c:	f7fa fe62 	bl	800e414 <pbuf_alloc>
 8013750:	6578      	str	r0, [r7, #84]	; 0x54
 8013752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013754:	2b00      	cmp	r3, #0
 8013756:	f000 81e0 	beq.w	8013b1a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801375a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801375e:	68ba      	ldr	r2, [r7, #8]
 8013760:	441a      	add	r2, r3
 8013762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013764:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013766:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013768:	f7fb f9c6 	bl	800eaf8 <pbuf_clen>
 801376c:	4603      	mov	r3, r0
 801376e:	461a      	mov	r2, r3
 8013770:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013774:	4413      	add	r3, r2
 8013776:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801377a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801377e:	8bfb      	ldrh	r3, [r7, #30]
 8013780:	4413      	add	r3, r2
 8013782:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013786:	e0dc      	b.n	8013942 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801378e:	2b00      	cmp	r3, #0
 8013790:	f000 80d7 	beq.w	8013942 <tcp_write+0x47a>
 8013794:	4b03      	ldr	r3, [pc, #12]	; (80137a4 <tcp_write+0x2dc>)
 8013796:	f240 224a 	movw	r2, #586	; 0x24a
 801379a:	490a      	ldr	r1, [pc, #40]	; (80137c4 <tcp_write+0x2fc>)
 801379c:	4803      	ldr	r0, [pc, #12]	; (80137ac <tcp_write+0x2e4>)
 801379e:	f009 ff97 	bl	801d6d0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80137a2:	e0ce      	b.n	8013942 <tcp_write+0x47a>
 80137a4:	08020aec 	.word	0x08020aec
 80137a8:	08020c8c 	.word	0x08020c8c
 80137ac:	08020b40 	.word	0x08020b40
 80137b0:	08020ca4 	.word	0x08020ca4
 80137b4:	08020cd8 	.word	0x08020cd8
 80137b8:	08020cf0 	.word	0x08020cf0
 80137bc:	08020d10 	.word	0x08020d10
 80137c0:	08020d30 	.word	0x08020d30
 80137c4:	08020d5c 	.word	0x08020d5c
    struct pbuf *p;
    u16_t left = len - pos;
 80137c8:	88fa      	ldrh	r2, [r7, #6]
 80137ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80137d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80137de:	8b7a      	ldrh	r2, [r7, #26]
 80137e0:	8bbb      	ldrh	r3, [r7, #28]
 80137e2:	4293      	cmp	r3, r2
 80137e4:	bf28      	it	cs
 80137e6:	4613      	movcs	r3, r2
 80137e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80137ea:	797b      	ldrb	r3, [r7, #5]
 80137ec:	f003 0301 	and.w	r3, r3, #1
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d036      	beq.n	8013862 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80137f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137f8:	b29a      	uxth	r2, r3
 80137fa:	8b3b      	ldrh	r3, [r7, #24]
 80137fc:	4413      	add	r3, r2
 80137fe:	b299      	uxth	r1, r3
 8013800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013802:	2b00      	cmp	r3, #0
 8013804:	bf0c      	ite	eq
 8013806:	2301      	moveq	r3, #1
 8013808:	2300      	movne	r3, #0
 801380a:	b2db      	uxtb	r3, r3
 801380c:	f107 0012 	add.w	r0, r7, #18
 8013810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013812:	9302      	str	r3, [sp, #8]
 8013814:	797b      	ldrb	r3, [r7, #5]
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	4603      	mov	r3, r0
 801381e:	2036      	movs	r0, #54	; 0x36
 8013820:	f7ff fd5e 	bl	80132e0 <tcp_pbuf_prealloc>
 8013824:	6338      	str	r0, [r7, #48]	; 0x30
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	2b00      	cmp	r3, #0
 801382a:	f000 8178 	beq.w	8013b1e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	895b      	ldrh	r3, [r3, #10]
 8013832:	8b3a      	ldrh	r2, [r7, #24]
 8013834:	429a      	cmp	r2, r3
 8013836:	d906      	bls.n	8013846 <tcp_write+0x37e>
 8013838:	4b8c      	ldr	r3, [pc, #560]	; (8013a6c <tcp_write+0x5a4>)
 801383a:	f240 2266 	movw	r2, #614	; 0x266
 801383e:	498c      	ldr	r1, [pc, #560]	; (8013a70 <tcp_write+0x5a8>)
 8013840:	488c      	ldr	r0, [pc, #560]	; (8013a74 <tcp_write+0x5ac>)
 8013842:	f009 ff45 	bl	801d6d0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013848:	685a      	ldr	r2, [r3, #4]
 801384a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801384e:	18d0      	adds	r0, r2, r3
 8013850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013854:	68ba      	ldr	r2, [r7, #8]
 8013856:	4413      	add	r3, r2
 8013858:	8b3a      	ldrh	r2, [r7, #24]
 801385a:	4619      	mov	r1, r3
 801385c:	f009 ff22 	bl	801d6a4 <memcpy>
 8013860:	e02f      	b.n	80138c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013862:	8a7b      	ldrh	r3, [r7, #18]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d006      	beq.n	8013876 <tcp_write+0x3ae>
 8013868:	4b80      	ldr	r3, [pc, #512]	; (8013a6c <tcp_write+0x5a4>)
 801386a:	f240 2271 	movw	r2, #625	; 0x271
 801386e:	4982      	ldr	r1, [pc, #520]	; (8013a78 <tcp_write+0x5b0>)
 8013870:	4880      	ldr	r0, [pc, #512]	; (8013a74 <tcp_write+0x5ac>)
 8013872:	f009 ff2d 	bl	801d6d0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013876:	8b3b      	ldrh	r3, [r7, #24]
 8013878:	2201      	movs	r2, #1
 801387a:	4619      	mov	r1, r3
 801387c:	2036      	movs	r0, #54	; 0x36
 801387e:	f7fa fdc9 	bl	800e414 <pbuf_alloc>
 8013882:	6178      	str	r0, [r7, #20]
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	2b00      	cmp	r3, #0
 8013888:	f000 814b 	beq.w	8013b22 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801388c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013890:	68ba      	ldr	r2, [r7, #8]
 8013892:	441a      	add	r2, r3
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013898:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801389c:	b29b      	uxth	r3, r3
 801389e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138a2:	4619      	mov	r1, r3
 80138a4:	2036      	movs	r0, #54	; 0x36
 80138a6:	f7fa fdb5 	bl	800e414 <pbuf_alloc>
 80138aa:	6338      	str	r0, [r7, #48]	; 0x30
 80138ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d103      	bne.n	80138ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80138b2:	6978      	ldr	r0, [r7, #20]
 80138b4:	f7fb f892 	bl	800e9dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80138b8:	e136      	b.n	8013b28 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80138ba:	6979      	ldr	r1, [r7, #20]
 80138bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138be:	f7fb f95b 	bl	800eb78 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80138c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138c4:	f7fb f918 	bl	800eaf8 <pbuf_clen>
 80138c8:	4603      	mov	r3, r0
 80138ca:	461a      	mov	r2, r3
 80138cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138d0:	4413      	add	r3, r2
 80138d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80138d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138da:	2b09      	cmp	r3, #9
 80138dc:	d903      	bls.n	80138e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80138de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138e0:	f7fb f87c 	bl	800e9dc <pbuf_free>
      goto memerr;
 80138e4:	e120      	b.n	8013b28 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80138ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138ee:	441a      	add	r2, r3
 80138f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	4613      	mov	r3, r2
 80138f8:	2200      	movs	r2, #0
 80138fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f7ff fc51 	bl	80131a4 <tcp_create_segment>
 8013902:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013906:	2b00      	cmp	r3, #0
 8013908:	f000 810d 	beq.w	8013b26 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801390e:	2b00      	cmp	r3, #0
 8013910:	d102      	bne.n	8013918 <tcp_write+0x450>
      queue = seg;
 8013912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013914:	647b      	str	r3, [r7, #68]	; 0x44
 8013916:	e00c      	b.n	8013932 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801391a:	2b00      	cmp	r3, #0
 801391c:	d106      	bne.n	801392c <tcp_write+0x464>
 801391e:	4b53      	ldr	r3, [pc, #332]	; (8013a6c <tcp_write+0x5a4>)
 8013920:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013924:	4955      	ldr	r1, [pc, #340]	; (8013a7c <tcp_write+0x5b4>)
 8013926:	4853      	ldr	r0, [pc, #332]	; (8013a74 <tcp_write+0x5ac>)
 8013928:	f009 fed2 	bl	801d6d0 <iprintf>
      prev_seg->next = seg;
 801392c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801392e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013930:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013934:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013936:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801393a:	8b3b      	ldrh	r3, [r7, #24]
 801393c:	4413      	add	r3, r2
 801393e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013942:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013946:	88fb      	ldrh	r3, [r7, #6]
 8013948:	429a      	cmp	r2, r3
 801394a:	f4ff af3d 	bcc.w	80137c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801394e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013950:	2b00      	cmp	r3, #0
 8013952:	d02c      	beq.n	80139ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	62fb      	str	r3, [r7, #44]	; 0x2c
 801395a:	e01e      	b.n	801399a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395e:	891a      	ldrh	r2, [r3, #8]
 8013960:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013962:	4413      	add	r3, r2
 8013964:	b29a      	uxth	r2, r3
 8013966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013968:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d110      	bne.n	8013994 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013978:	8952      	ldrh	r2, [r2, #10]
 801397a:	4413      	add	r3, r2
 801397c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801397e:	68b9      	ldr	r1, [r7, #8]
 8013980:	4618      	mov	r0, r3
 8013982:	f009 fe8f 	bl	801d6a4 <memcpy>
        p->len += oversize_used;
 8013986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013988:	895a      	ldrh	r2, [r3, #10]
 801398a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801398c:	4413      	add	r3, r2
 801398e:	b29a      	uxth	r2, r3
 8013990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013992:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	62fb      	str	r3, [r7, #44]	; 0x2c
 801399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399c:	2b00      	cmp	r3, #0
 801399e:	d1dd      	bne.n	801395c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80139a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139a2:	891a      	ldrh	r2, [r3, #8]
 80139a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139a6:	4413      	add	r3, r2
 80139a8:	b29a      	uxth	r2, r3
 80139aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80139ae:	8a7a      	ldrh	r2, [r7, #18]
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80139b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d018      	beq.n	80139ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80139bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d106      	bne.n	80139d0 <tcp_write+0x508>
 80139c2:	4b2a      	ldr	r3, [pc, #168]	; (8013a6c <tcp_write+0x5a4>)
 80139c4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80139c8:	492d      	ldr	r1, [pc, #180]	; (8013a80 <tcp_write+0x5b8>)
 80139ca:	482a      	ldr	r0, [pc, #168]	; (8013a74 <tcp_write+0x5ac>)
 80139cc:	f009 fe80 	bl	801d6d0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80139d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7fb f8ce 	bl	800eb78 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80139dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139de:	891a      	ldrh	r2, [r3, #8]
 80139e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139e2:	891b      	ldrh	r3, [r3, #8]
 80139e4:	4413      	add	r3, r2
 80139e6:	b29a      	uxth	r2, r3
 80139e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139ea:	811a      	strh	r2, [r3, #8]
 80139ec:	e037      	b.n	8013a5e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80139ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d034      	beq.n	8013a5e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80139f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d003      	beq.n	8013a02 <tcp_write+0x53a>
 80139fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d106      	bne.n	8013a10 <tcp_write+0x548>
 8013a02:	4b1a      	ldr	r3, [pc, #104]	; (8013a6c <tcp_write+0x5a4>)
 8013a04:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013a08:	491e      	ldr	r1, [pc, #120]	; (8013a84 <tcp_write+0x5bc>)
 8013a0a:	481a      	ldr	r0, [pc, #104]	; (8013a74 <tcp_write+0x5ac>)
 8013a0c:	f009 fe60 	bl	801d6d0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a16:	e009      	b.n	8013a2c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1a:	891a      	ldrh	r2, [r3, #8]
 8013a1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a1e:	4413      	add	r3, r2
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a24:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d1f1      	bne.n	8013a18 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a36:	891a      	ldrh	r2, [r3, #8]
 8013a38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a3a:	4413      	add	r3, r2
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a40:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a44:	895a      	ldrh	r2, [r3, #10]
 8013a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a48:	4413      	add	r3, r2
 8013a4a:	b29a      	uxth	r2, r3
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a52:	891a      	ldrh	r2, [r3, #8]
 8013a54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a56:	4413      	add	r3, r2
 8013a58:	b29a      	uxth	r2, r3
 8013a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a5c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d111      	bne.n	8013a88 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a68:	66da      	str	r2, [r3, #108]	; 0x6c
 8013a6a:	e010      	b.n	8013a8e <tcp_write+0x5c6>
 8013a6c:	08020aec 	.word	0x08020aec
 8013a70:	08020d8c 	.word	0x08020d8c
 8013a74:	08020b40 	.word	0x08020b40
 8013a78:	08020dcc 	.word	0x08020dcc
 8013a7c:	08020ddc 	.word	0x08020ddc
 8013a80:	08020df0 	.word	0x08020df0
 8013a84:	08020e28 	.word	0x08020e28
  } else {
    last_unsent->next = queue;
 8013a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a8c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a92:	88fb      	ldrh	r3, [r7, #6]
 8013a94:	441a      	add	r2, r3
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013aa0:	88fb      	ldrh	r3, [r7, #6]
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013ab2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d00e      	beq.n	8013ade <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d10a      	bne.n	8013ade <tcp_write+0x616>
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d106      	bne.n	8013ade <tcp_write+0x616>
 8013ad0:	4b2c      	ldr	r3, [pc, #176]	; (8013b84 <tcp_write+0x6bc>)
 8013ad2:	f240 3212 	movw	r2, #786	; 0x312
 8013ad6:	492c      	ldr	r1, [pc, #176]	; (8013b88 <tcp_write+0x6c0>)
 8013ad8:	482c      	ldr	r0, [pc, #176]	; (8013b8c <tcp_write+0x6c4>)
 8013ada:	f009 fdf9 	bl	801d6d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d016      	beq.n	8013b12 <tcp_write+0x64a>
 8013ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d012      	beq.n	8013b12 <tcp_write+0x64a>
 8013aec:	797b      	ldrb	r3, [r7, #5]
 8013aee:	f003 0302 	and.w	r3, r3, #2
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d10d      	bne.n	8013b12 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	899b      	ldrh	r3, [r3, #12]
 8013afc:	b29c      	uxth	r4, r3
 8013afe:	2008      	movs	r0, #8
 8013b00:	f7f9 fb6a 	bl	800d1d8 <lwip_htons>
 8013b04:	4603      	mov	r3, r0
 8013b06:	461a      	mov	r2, r3
 8013b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	4322      	orrs	r2, r4
 8013b0e:	b292      	uxth	r2, r2
 8013b10:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	e031      	b.n	8013b7a <tcp_write+0x6b2>
          goto memerr;
 8013b16:	bf00      	nop
 8013b18:	e006      	b.n	8013b28 <tcp_write+0x660>
            goto memerr;
 8013b1a:	bf00      	nop
 8013b1c:	e004      	b.n	8013b28 <tcp_write+0x660>
        goto memerr;
 8013b1e:	bf00      	nop
 8013b20:	e002      	b.n	8013b28 <tcp_write+0x660>
        goto memerr;
 8013b22:	bf00      	nop
 8013b24:	e000      	b.n	8013b28 <tcp_write+0x660>
      goto memerr;
 8013b26:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	8b5b      	ldrh	r3, [r3, #26]
 8013b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b30:	b29a      	uxth	r2, r3
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d002      	beq.n	8013b42 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013b3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013b3e:	f7fa ff4d 	bl	800e9dc <pbuf_free>
  }
  if (queue != NULL) {
 8013b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d002      	beq.n	8013b4e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013b48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013b4a:	f7fc fb6b 	bl	8010224 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d00e      	beq.n	8013b76 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d10a      	bne.n	8013b76 <tcp_write+0x6ae>
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d106      	bne.n	8013b76 <tcp_write+0x6ae>
 8013b68:	4b06      	ldr	r3, [pc, #24]	; (8013b84 <tcp_write+0x6bc>)
 8013b6a:	f240 3227 	movw	r2, #807	; 0x327
 8013b6e:	4906      	ldr	r1, [pc, #24]	; (8013b88 <tcp_write+0x6c0>)
 8013b70:	4806      	ldr	r0, [pc, #24]	; (8013b8c <tcp_write+0x6c4>)
 8013b72:	f009 fdad 	bl	801d6d0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	375c      	adds	r7, #92	; 0x5c
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd90      	pop	{r4, r7, pc}
 8013b82:	bf00      	nop
 8013b84:	08020aec 	.word	0x08020aec
 8013b88:	08020e60 	.word	0x08020e60
 8013b8c:	08020b40 	.word	0x08020b40

08013b90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013b90:	b590      	push	{r4, r7, lr}
 8013b92:	b08b      	sub	sp, #44	; 0x2c
 8013b94:	af02      	add	r7, sp, #8
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	460b      	mov	r3, r1
 8013b9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	61fb      	str	r3, [r7, #28]
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d106      	bne.n	8013bbc <tcp_split_unsent_seg+0x2c>
 8013bae:	4b95      	ldr	r3, [pc, #596]	; (8013e04 <tcp_split_unsent_seg+0x274>)
 8013bb0:	f240 324b 	movw	r2, #843	; 0x34b
 8013bb4:	4994      	ldr	r1, [pc, #592]	; (8013e08 <tcp_split_unsent_seg+0x278>)
 8013bb6:	4895      	ldr	r0, [pc, #596]	; (8013e0c <tcp_split_unsent_seg+0x27c>)
 8013bb8:	f009 fd8a 	bl	801d6d0 <iprintf>

  useg = pcb->unsent;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bc0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d102      	bne.n	8013bce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bcc:	e116      	b.n	8013dfc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013bce:	887b      	ldrh	r3, [r7, #2]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d109      	bne.n	8013be8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013bd4:	4b8b      	ldr	r3, [pc, #556]	; (8013e04 <tcp_split_unsent_seg+0x274>)
 8013bd6:	f240 3253 	movw	r2, #851	; 0x353
 8013bda:	498d      	ldr	r1, [pc, #564]	; (8013e10 <tcp_split_unsent_seg+0x280>)
 8013bdc:	488b      	ldr	r0, [pc, #556]	; (8013e0c <tcp_split_unsent_seg+0x27c>)
 8013bde:	f009 fd77 	bl	801d6d0 <iprintf>
    return ERR_VAL;
 8013be2:	f06f 0305 	mvn.w	r3, #5
 8013be6:	e109      	b.n	8013dfc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	891b      	ldrh	r3, [r3, #8]
 8013bec:	887a      	ldrh	r2, [r7, #2]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d301      	bcc.n	8013bf6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	e102      	b.n	8013dfc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bfa:	887a      	ldrh	r2, [r7, #2]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d906      	bls.n	8013c0e <tcp_split_unsent_seg+0x7e>
 8013c00:	4b80      	ldr	r3, [pc, #512]	; (8013e04 <tcp_split_unsent_seg+0x274>)
 8013c02:	f240 325b 	movw	r2, #859	; 0x35b
 8013c06:	4983      	ldr	r1, [pc, #524]	; (8013e14 <tcp_split_unsent_seg+0x284>)
 8013c08:	4880      	ldr	r0, [pc, #512]	; (8013e0c <tcp_split_unsent_seg+0x27c>)
 8013c0a:	f009 fd61 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	891b      	ldrh	r3, [r3, #8]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <tcp_split_unsent_seg+0x94>
 8013c16:	4b7b      	ldr	r3, [pc, #492]	; (8013e04 <tcp_split_unsent_seg+0x274>)
 8013c18:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013c1c:	497e      	ldr	r1, [pc, #504]	; (8013e18 <tcp_split_unsent_seg+0x288>)
 8013c1e:	487b      	ldr	r0, [pc, #492]	; (8013e0c <tcp_split_unsent_seg+0x27c>)
 8013c20:	f009 fd56 	bl	801d6d0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	7a9b      	ldrb	r3, [r3, #10]
 8013c28:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013c2a:	7bfb      	ldrb	r3, [r7, #15]
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	f003 0304 	and.w	r3, r3, #4
 8013c34:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	891a      	ldrh	r2, [r3, #8]
 8013c3a:	887b      	ldrh	r3, [r7, #2]
 8013c3c:	1ad3      	subs	r3, r2, r3
 8013c3e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013c40:	7bbb      	ldrb	r3, [r7, #14]
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	89bb      	ldrh	r3, [r7, #12]
 8013c46:	4413      	add	r3, r2
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c4e:	4619      	mov	r1, r3
 8013c50:	2036      	movs	r0, #54	; 0x36
 8013c52:	f7fa fbdf 	bl	800e414 <pbuf_alloc>
 8013c56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f000 80b7 	beq.w	8013dce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013c60:	697b      	ldr	r3, [r7, #20]
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	891a      	ldrh	r2, [r3, #8]
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	891b      	ldrh	r3, [r3, #8]
 8013c6a:	1ad3      	subs	r3, r2, r3
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	887b      	ldrh	r3, [r7, #2]
 8013c70:	4413      	add	r3, r2
 8013c72:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	6858      	ldr	r0, [r3, #4]
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	685a      	ldr	r2, [r3, #4]
 8013c7c:	7bbb      	ldrb	r3, [r7, #14]
 8013c7e:	18d1      	adds	r1, r2, r3
 8013c80:	897b      	ldrh	r3, [r7, #10]
 8013c82:	89ba      	ldrh	r2, [r7, #12]
 8013c84:	f7fb f8a0 	bl	800edc8 <pbuf_copy_partial>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	89bb      	ldrh	r3, [r7, #12]
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	f040 809f 	bne.w	8013dd2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	899b      	ldrh	r3, [r3, #12]
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7f9 fa9b 	bl	800d1d8 <lwip_htons>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013caa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013cac:	2300      	movs	r3, #0
 8013cae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013cb0:	7efb      	ldrb	r3, [r7, #27]
 8013cb2:	f003 0308 	and.w	r3, r3, #8
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d007      	beq.n	8013cca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013cba:	7efb      	ldrb	r3, [r7, #27]
 8013cbc:	f023 0308 	bic.w	r3, r3, #8
 8013cc0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013cc2:	7ebb      	ldrb	r3, [r7, #26]
 8013cc4:	f043 0308 	orr.w	r3, r3, #8
 8013cc8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013cca:	7efb      	ldrb	r3, [r7, #27]
 8013ccc:	f003 0301 	and.w	r3, r3, #1
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d007      	beq.n	8013ce4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013cd4:	7efb      	ldrb	r3, [r7, #27]
 8013cd6:	f023 0301 	bic.w	r3, r3, #1
 8013cda:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013cdc:	7ebb      	ldrb	r3, [r7, #26]
 8013cde:	f043 0301 	orr.w	r3, r3, #1
 8013ce2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	68db      	ldr	r3, [r3, #12]
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7f9 fa89 	bl	800d202 <lwip_htonl>
 8013cf0:	4602      	mov	r2, r0
 8013cf2:	887b      	ldrh	r3, [r7, #2]
 8013cf4:	18d1      	adds	r1, r2, r3
 8013cf6:	7eba      	ldrb	r2, [r7, #26]
 8013cf8:	7bfb      	ldrb	r3, [r7, #15]
 8013cfa:	9300      	str	r3, [sp, #0]
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	6939      	ldr	r1, [r7, #16]
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f7ff fa4f 	bl	80131a4 <tcp_create_segment>
 8013d06:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d063      	beq.n	8013dd6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7fa fef0 	bl	800eaf8 <pbuf_clen>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d22:	1a9b      	subs	r3, r3, r2
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	6858      	ldr	r0, [r3, #4]
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	891a      	ldrh	r2, [r3, #8]
 8013d36:	89bb      	ldrh	r3, [r7, #12]
 8013d38:	1ad3      	subs	r3, r2, r3
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	f7fa fcc7 	bl	800e6d0 <pbuf_realloc>
  useg->len -= remainder;
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	891a      	ldrh	r2, [r3, #8]
 8013d46:	89bb      	ldrh	r3, [r7, #12]
 8013d48:	1ad3      	subs	r3, r2, r3
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	899b      	ldrh	r3, [r3, #12]
 8013d56:	b29c      	uxth	r4, r3
 8013d58:	7efb      	ldrb	r3, [r7, #27]
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7f9 fa3b 	bl	800d1d8 <lwip_htons>
 8013d62:	4603      	mov	r3, r0
 8013d64:	461a      	mov	r2, r3
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	4322      	orrs	r2, r4
 8013d6c:	b292      	uxth	r2, r2
 8013d6e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	685b      	ldr	r3, [r3, #4]
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fa febf 	bl	800eaf8 <pbuf_clen>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d84:	4413      	add	r3, r2
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7fa feb0 	bl	800eaf8 <pbuf_clen>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013da2:	4413      	add	r3, r2
 8013da4:	b29a      	uxth	r2, r3
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	69fa      	ldr	r2, [r7, #28]
 8013db8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d103      	bne.n	8013dca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	e016      	b.n	8013dfc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013dce:	bf00      	nop
 8013dd0:	e002      	b.n	8013dd8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013dd2:	bf00      	nop
 8013dd4:	e000      	b.n	8013dd8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013dd6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d006      	beq.n	8013dec <tcp_split_unsent_seg+0x25c>
 8013dde:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <tcp_split_unsent_seg+0x274>)
 8013de0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013de4:	490d      	ldr	r1, [pc, #52]	; (8013e1c <tcp_split_unsent_seg+0x28c>)
 8013de6:	4809      	ldr	r0, [pc, #36]	; (8013e0c <tcp_split_unsent_seg+0x27c>)
 8013de8:	f009 fc72 	bl	801d6d0 <iprintf>
  if (p != NULL) {
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d002      	beq.n	8013df8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013df2:	6938      	ldr	r0, [r7, #16]
 8013df4:	f7fa fdf2 	bl	800e9dc <pbuf_free>
  }

  return ERR_MEM;
 8013df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3724      	adds	r7, #36	; 0x24
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd90      	pop	{r4, r7, pc}
 8013e04:	08020aec 	.word	0x08020aec
 8013e08:	08020e80 	.word	0x08020e80
 8013e0c:	08020b40 	.word	0x08020b40
 8013e10:	08020ea4 	.word	0x08020ea4
 8013e14:	08020ec8 	.word	0x08020ec8
 8013e18:	08020ed8 	.word	0x08020ed8
 8013e1c:	08020ee8 	.word	0x08020ee8

08013e20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013e20:	b590      	push	{r4, r7, lr}
 8013e22:	b085      	sub	sp, #20
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d106      	bne.n	8013e3c <tcp_send_fin+0x1c>
 8013e2e:	4b21      	ldr	r3, [pc, #132]	; (8013eb4 <tcp_send_fin+0x94>)
 8013e30:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013e34:	4920      	ldr	r1, [pc, #128]	; (8013eb8 <tcp_send_fin+0x98>)
 8013e36:	4821      	ldr	r0, [pc, #132]	; (8013ebc <tcp_send_fin+0x9c>)
 8013e38:	f009 fc4a 	bl	801d6d0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d02e      	beq.n	8013ea2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e48:	60fb      	str	r3, [r7, #12]
 8013e4a:	e002      	b.n	8013e52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d1f8      	bne.n	8013e4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	68db      	ldr	r3, [r3, #12]
 8013e5e:	899b      	ldrh	r3, [r3, #12]
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7f9 f9b8 	bl	800d1d8 <lwip_htons>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	b2db      	uxtb	r3, r3
 8013e6c:	f003 0307 	and.w	r3, r3, #7
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d116      	bne.n	8013ea2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	68db      	ldr	r3, [r3, #12]
 8013e78:	899b      	ldrh	r3, [r3, #12]
 8013e7a:	b29c      	uxth	r4, r3
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	f7f9 f9ab 	bl	800d1d8 <lwip_htons>
 8013e82:	4603      	mov	r3, r0
 8013e84:	461a      	mov	r2, r3
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	4322      	orrs	r2, r4
 8013e8c:	b292      	uxth	r2, r2
 8013e8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	8b5b      	ldrh	r3, [r3, #26]
 8013e94:	f043 0320 	orr.w	r3, r3, #32
 8013e98:	b29a      	uxth	r2, r3
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	e004      	b.n	8013eac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013ea2:	2101      	movs	r1, #1
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f000 f80b 	bl	8013ec0 <tcp_enqueue_flags>
 8013eaa:	4603      	mov	r3, r0
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3714      	adds	r7, #20
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd90      	pop	{r4, r7, pc}
 8013eb4:	08020aec 	.word	0x08020aec
 8013eb8:	08020ef4 	.word	0x08020ef4
 8013ebc:	08020b40 	.word	0x08020b40

08013ec0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b08a      	sub	sp, #40	; 0x28
 8013ec4:	af02      	add	r7, sp, #8
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	460b      	mov	r3, r1
 8013eca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013ed4:	78fb      	ldrb	r3, [r7, #3]
 8013ed6:	f003 0303 	and.w	r3, r3, #3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d106      	bne.n	8013eec <tcp_enqueue_flags+0x2c>
 8013ede:	4b67      	ldr	r3, [pc, #412]	; (801407c <tcp_enqueue_flags+0x1bc>)
 8013ee0:	f240 4211 	movw	r2, #1041	; 0x411
 8013ee4:	4966      	ldr	r1, [pc, #408]	; (8014080 <tcp_enqueue_flags+0x1c0>)
 8013ee6:	4867      	ldr	r0, [pc, #412]	; (8014084 <tcp_enqueue_flags+0x1c4>)
 8013ee8:	f009 fbf2 	bl	801d6d0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d106      	bne.n	8013f00 <tcp_enqueue_flags+0x40>
 8013ef2:	4b62      	ldr	r3, [pc, #392]	; (801407c <tcp_enqueue_flags+0x1bc>)
 8013ef4:	f240 4213 	movw	r2, #1043	; 0x413
 8013ef8:	4963      	ldr	r1, [pc, #396]	; (8014088 <tcp_enqueue_flags+0x1c8>)
 8013efa:	4862      	ldr	r0, [pc, #392]	; (8014084 <tcp_enqueue_flags+0x1c4>)
 8013efc:	f009 fbe8 	bl	801d6d0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013f00:	78fb      	ldrb	r3, [r7, #3]
 8013f02:	f003 0302 	and.w	r3, r3, #2
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d001      	beq.n	8013f0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013f0e:	7ffb      	ldrb	r3, [r7, #31]
 8013f10:	009b      	lsls	r3, r3, #2
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	f003 0304 	and.w	r3, r3, #4
 8013f18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013f1a:	7dfb      	ldrb	r3, [r7, #23]
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f22:	4619      	mov	r1, r3
 8013f24:	2036      	movs	r0, #54	; 0x36
 8013f26:	f7fa fa75 	bl	800e414 <pbuf_alloc>
 8013f2a:	6138      	str	r0, [r7, #16]
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d109      	bne.n	8013f46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	8b5b      	ldrh	r3, [r3, #26]
 8013f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f3a:	b29a      	uxth	r2, r3
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f44:	e095      	b.n	8014072 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	895a      	ldrh	r2, [r3, #10]
 8013f4a:	7dfb      	ldrb	r3, [r7, #23]
 8013f4c:	b29b      	uxth	r3, r3
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d206      	bcs.n	8013f60 <tcp_enqueue_flags+0xa0>
 8013f52:	4b4a      	ldr	r3, [pc, #296]	; (801407c <tcp_enqueue_flags+0x1bc>)
 8013f54:	f240 4239 	movw	r2, #1081	; 0x439
 8013f58:	494c      	ldr	r1, [pc, #304]	; (801408c <tcp_enqueue_flags+0x1cc>)
 8013f5a:	484a      	ldr	r0, [pc, #296]	; (8014084 <tcp_enqueue_flags+0x1c4>)
 8013f5c:	f009 fbb8 	bl	801d6d0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013f64:	78fa      	ldrb	r2, [r7, #3]
 8013f66:	7ffb      	ldrb	r3, [r7, #31]
 8013f68:	9300      	str	r3, [sp, #0]
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	6939      	ldr	r1, [r7, #16]
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f7ff f918 	bl	80131a4 <tcp_create_segment>
 8013f74:	60f8      	str	r0, [r7, #12]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d109      	bne.n	8013f90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	8b5b      	ldrh	r3, [r3, #26]
 8013f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f84:	b29a      	uxth	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f8e:	e070      	b.n	8014072 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	68db      	ldr	r3, [r3, #12]
 8013f94:	f003 0303 	and.w	r3, r3, #3
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d006      	beq.n	8013faa <tcp_enqueue_flags+0xea>
 8013f9c:	4b37      	ldr	r3, [pc, #220]	; (801407c <tcp_enqueue_flags+0x1bc>)
 8013f9e:	f240 4242 	movw	r2, #1090	; 0x442
 8013fa2:	493b      	ldr	r1, [pc, #236]	; (8014090 <tcp_enqueue_flags+0x1d0>)
 8013fa4:	4837      	ldr	r0, [pc, #220]	; (8014084 <tcp_enqueue_flags+0x1c4>)
 8013fa6:	f009 fb93 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	891b      	ldrh	r3, [r3, #8]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d006      	beq.n	8013fc0 <tcp_enqueue_flags+0x100>
 8013fb2:	4b32      	ldr	r3, [pc, #200]	; (801407c <tcp_enqueue_flags+0x1bc>)
 8013fb4:	f240 4243 	movw	r2, #1091	; 0x443
 8013fb8:	4936      	ldr	r1, [pc, #216]	; (8014094 <tcp_enqueue_flags+0x1d4>)
 8013fba:	4832      	ldr	r0, [pc, #200]	; (8014084 <tcp_enqueue_flags+0x1c4>)
 8013fbc:	f009 fb88 	bl	801d6d0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d103      	bne.n	8013fd0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	68fa      	ldr	r2, [r7, #12]
 8013fcc:	66da      	str	r2, [r3, #108]	; 0x6c
 8013fce:	e00d      	b.n	8013fec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fd4:	61bb      	str	r3, [r7, #24]
 8013fd6:	e002      	b.n	8013fde <tcp_enqueue_flags+0x11e>
 8013fd8:	69bb      	ldr	r3, [r7, #24]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	61bb      	str	r3, [r7, #24]
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d1f8      	bne.n	8013fd8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	68fa      	ldr	r2, [r7, #12]
 8013fea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013ff4:	78fb      	ldrb	r3, [r7, #3]
 8013ff6:	f003 0302 	and.w	r3, r3, #2
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d104      	bne.n	8014008 <tcp_enqueue_flags+0x148>
 8013ffe:	78fb      	ldrb	r3, [r7, #3]
 8014000:	f003 0301 	and.w	r3, r3, #1
 8014004:	2b00      	cmp	r3, #0
 8014006:	d004      	beq.n	8014012 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801400c:	1c5a      	adds	r2, r3, #1
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014012:	78fb      	ldrb	r3, [r7, #3]
 8014014:	f003 0301 	and.w	r3, r3, #1
 8014018:	2b00      	cmp	r3, #0
 801401a:	d006      	beq.n	801402a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	8b5b      	ldrh	r3, [r3, #26]
 8014020:	f043 0320 	orr.w	r3, r3, #32
 8014024:	b29a      	uxth	r2, r3
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	4618      	mov	r0, r3
 8014030:	f7fa fd62 	bl	800eaf8 <pbuf_clen>
 8014034:	4603      	mov	r3, r0
 8014036:	461a      	mov	r2, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801403e:	4413      	add	r3, r2
 8014040:	b29a      	uxth	r2, r3
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801404e:	2b00      	cmp	r3, #0
 8014050:	d00e      	beq.n	8014070 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014056:	2b00      	cmp	r3, #0
 8014058:	d10a      	bne.n	8014070 <tcp_enqueue_flags+0x1b0>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801405e:	2b00      	cmp	r3, #0
 8014060:	d106      	bne.n	8014070 <tcp_enqueue_flags+0x1b0>
 8014062:	4b06      	ldr	r3, [pc, #24]	; (801407c <tcp_enqueue_flags+0x1bc>)
 8014064:	f240 4265 	movw	r2, #1125	; 0x465
 8014068:	490b      	ldr	r1, [pc, #44]	; (8014098 <tcp_enqueue_flags+0x1d8>)
 801406a:	4806      	ldr	r0, [pc, #24]	; (8014084 <tcp_enqueue_flags+0x1c4>)
 801406c:	f009 fb30 	bl	801d6d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3720      	adds	r7, #32
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}
 801407a:	bf00      	nop
 801407c:	08020aec 	.word	0x08020aec
 8014080:	08020f10 	.word	0x08020f10
 8014084:	08020b40 	.word	0x08020b40
 8014088:	08020f68 	.word	0x08020f68
 801408c:	08020f88 	.word	0x08020f88
 8014090:	08020fc4 	.word	0x08020fc4
 8014094:	08020fdc 	.word	0x08020fdc
 8014098:	08021008 	.word	0x08021008

0801409c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801409c:	b5b0      	push	{r4, r5, r7, lr}
 801409e:	b08a      	sub	sp, #40	; 0x28
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d106      	bne.n	80140b8 <tcp_output+0x1c>
 80140aa:	4b8a      	ldr	r3, [pc, #552]	; (80142d4 <tcp_output+0x238>)
 80140ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80140b0:	4989      	ldr	r1, [pc, #548]	; (80142d8 <tcp_output+0x23c>)
 80140b2:	488a      	ldr	r0, [pc, #552]	; (80142dc <tcp_output+0x240>)
 80140b4:	f009 fb0c 	bl	801d6d0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	7d1b      	ldrb	r3, [r3, #20]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d106      	bne.n	80140ce <tcp_output+0x32>
 80140c0:	4b84      	ldr	r3, [pc, #528]	; (80142d4 <tcp_output+0x238>)
 80140c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80140c6:	4986      	ldr	r1, [pc, #536]	; (80142e0 <tcp_output+0x244>)
 80140c8:	4884      	ldr	r0, [pc, #528]	; (80142dc <tcp_output+0x240>)
 80140ca:	f009 fb01 	bl	801d6d0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80140ce:	4b85      	ldr	r3, [pc, #532]	; (80142e4 <tcp_output+0x248>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d101      	bne.n	80140dc <tcp_output+0x40>
    return ERR_OK;
 80140d8:	2300      	movs	r3, #0
 80140da:	e1ce      	b.n	801447a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140e8:	4293      	cmp	r3, r2
 80140ea:	bf28      	it	cs
 80140ec:	4613      	movcs	r3, r2
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80140f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d10b      	bne.n	8014116 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	8b5b      	ldrh	r3, [r3, #26]
 8014102:	f003 0302 	and.w	r3, r3, #2
 8014106:	2b00      	cmp	r3, #0
 8014108:	f000 81aa 	beq.w	8014460 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f000 fdcb 	bl	8014ca8 <tcp_send_empty_ack>
 8014112:	4603      	mov	r3, r0
 8014114:	e1b1      	b.n	801447a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014116:	6879      	ldr	r1, [r7, #4]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	3304      	adds	r3, #4
 801411c:	461a      	mov	r2, r3
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7ff f824 	bl	801316c <tcp_route>
 8014124:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d102      	bne.n	8014132 <tcp_output+0x96>
    return ERR_RTE;
 801412c:	f06f 0303 	mvn.w	r3, #3
 8014130:	e1a3      	b.n	801447a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d003      	beq.n	8014140 <tcp_output+0xa4>
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d111      	bne.n	8014164 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d002      	beq.n	801414c <tcp_output+0xb0>
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	3304      	adds	r3, #4
 801414a:	e000      	b.n	801414e <tcp_output+0xb2>
 801414c:	2300      	movs	r3, #0
 801414e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d102      	bne.n	801415c <tcp_output+0xc0>
      return ERR_RTE;
 8014156:	f06f 0303 	mvn.w	r3, #3
 801415a:	e18e      	b.n	801447a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	4618      	mov	r0, r3
 801416c:	f7f9 f849 	bl	800d202 <lwip_htonl>
 8014170:	4602      	mov	r2, r0
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014176:	1ad3      	subs	r3, r2, r3
 8014178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801417a:	8912      	ldrh	r2, [r2, #8]
 801417c:	4413      	add	r3, r2
 801417e:	69ba      	ldr	r2, [r7, #24]
 8014180:	429a      	cmp	r2, r3
 8014182:	d227      	bcs.n	80141d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801418a:	461a      	mov	r2, r3
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	4293      	cmp	r3, r2
 8014190:	d114      	bne.n	80141bc <tcp_output+0x120>
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014196:	2b00      	cmp	r3, #0
 8014198:	d110      	bne.n	80141bc <tcp_output+0x120>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10b      	bne.n	80141bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2200      	movs	r2, #0
 80141a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2201      	movs	r2, #1
 80141b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2200      	movs	r2, #0
 80141b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	8b5b      	ldrh	r3, [r3, #26]
 80141c0:	f003 0302 	and.w	r3, r3, #2
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	f000 814d 	beq.w	8014464 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f000 fd6c 	bl	8014ca8 <tcp_send_empty_ack>
 80141d0:	4603      	mov	r3, r0
 80141d2:	e152      	b.n	801447a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2200      	movs	r2, #0
 80141d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80141e2:	6a3b      	ldr	r3, [r7, #32]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	f000 811c 	beq.w	8014422 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80141ea:	e002      	b.n	80141f2 <tcp_output+0x156>
 80141ec:	6a3b      	ldr	r3, [r7, #32]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	623b      	str	r3, [r7, #32]
 80141f2:	6a3b      	ldr	r3, [r7, #32]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d1f8      	bne.n	80141ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80141fa:	e112      	b.n	8014422 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80141fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	899b      	ldrh	r3, [r3, #12]
 8014202:	b29b      	uxth	r3, r3
 8014204:	4618      	mov	r0, r3
 8014206:	f7f8 ffe7 	bl	800d1d8 <lwip_htons>
 801420a:	4603      	mov	r3, r0
 801420c:	b2db      	uxtb	r3, r3
 801420e:	f003 0304 	and.w	r3, r3, #4
 8014212:	2b00      	cmp	r3, #0
 8014214:	d006      	beq.n	8014224 <tcp_output+0x188>
 8014216:	4b2f      	ldr	r3, [pc, #188]	; (80142d4 <tcp_output+0x238>)
 8014218:	f240 5236 	movw	r2, #1334	; 0x536
 801421c:	4932      	ldr	r1, [pc, #200]	; (80142e8 <tcp_output+0x24c>)
 801421e:	482f      	ldr	r0, [pc, #188]	; (80142dc <tcp_output+0x240>)
 8014220:	f009 fa56 	bl	801d6d0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014228:	2b00      	cmp	r3, #0
 801422a:	d01f      	beq.n	801426c <tcp_output+0x1d0>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	8b5b      	ldrh	r3, [r3, #26]
 8014230:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014234:	2b00      	cmp	r3, #0
 8014236:	d119      	bne.n	801426c <tcp_output+0x1d0>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801423c:	2b00      	cmp	r3, #0
 801423e:	d00b      	beq.n	8014258 <tcp_output+0x1bc>
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d110      	bne.n	801426c <tcp_output+0x1d0>
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801424e:	891a      	ldrh	r2, [r3, #8]
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014254:	429a      	cmp	r2, r3
 8014256:	d209      	bcs.n	801426c <tcp_output+0x1d0>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801425e:	2b00      	cmp	r3, #0
 8014260:	d004      	beq.n	801426c <tcp_output+0x1d0>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014268:	2b08      	cmp	r3, #8
 801426a:	d901      	bls.n	8014270 <tcp_output+0x1d4>
 801426c:	2301      	movs	r3, #1
 801426e:	e000      	b.n	8014272 <tcp_output+0x1d6>
 8014270:	2300      	movs	r3, #0
 8014272:	2b00      	cmp	r3, #0
 8014274:	d106      	bne.n	8014284 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	8b5b      	ldrh	r3, [r3, #26]
 801427a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801427e:	2b00      	cmp	r3, #0
 8014280:	f000 80e4 	beq.w	801444c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	7d1b      	ldrb	r3, [r3, #20]
 8014288:	2b02      	cmp	r3, #2
 801428a:	d00d      	beq.n	80142a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	899b      	ldrh	r3, [r3, #12]
 8014292:	b29c      	uxth	r4, r3
 8014294:	2010      	movs	r0, #16
 8014296:	f7f8 ff9f 	bl	800d1d8 <lwip_htons>
 801429a:	4603      	mov	r3, r0
 801429c:	461a      	mov	r2, r3
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	68db      	ldr	r3, [r3, #12]
 80142a2:	4322      	orrs	r2, r4
 80142a4:	b292      	uxth	r2, r2
 80142a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80142a8:	697a      	ldr	r2, [r7, #20]
 80142aa:	6879      	ldr	r1, [r7, #4]
 80142ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142ae:	f000 f909 	bl	80144c4 <tcp_output_segment>
 80142b2:	4603      	mov	r3, r0
 80142b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80142b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d016      	beq.n	80142ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	8b5b      	ldrh	r3, [r3, #26]
 80142c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142c6:	b29a      	uxth	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	835a      	strh	r2, [r3, #26]
      return err;
 80142cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142d0:	e0d3      	b.n	801447a <tcp_output+0x3de>
 80142d2:	bf00      	nop
 80142d4:	08020aec 	.word	0x08020aec
 80142d8:	08021030 	.word	0x08021030
 80142dc:	08020b40 	.word	0x08020b40
 80142e0:	08021048 	.word	0x08021048
 80142e4:	20011408 	.word	0x20011408
 80142e8:	08021070 	.word	0x08021070
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80142ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	7d1b      	ldrb	r3, [r3, #20]
 80142f8:	2b02      	cmp	r3, #2
 80142fa:	d006      	beq.n	801430a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	8b5b      	ldrh	r3, [r3, #26]
 8014300:	f023 0303 	bic.w	r3, r3, #3
 8014304:	b29a      	uxth	r2, r3
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	4618      	mov	r0, r3
 8014312:	f7f8 ff76 	bl	800d202 <lwip_htonl>
 8014316:	4604      	mov	r4, r0
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	891b      	ldrh	r3, [r3, #8]
 801431c:	461d      	mov	r5, r3
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	899b      	ldrh	r3, [r3, #12]
 8014324:	b29b      	uxth	r3, r3
 8014326:	4618      	mov	r0, r3
 8014328:	f7f8 ff56 	bl	800d1d8 <lwip_htons>
 801432c:	4603      	mov	r3, r0
 801432e:	b2db      	uxtb	r3, r3
 8014330:	f003 0303 	and.w	r3, r3, #3
 8014334:	2b00      	cmp	r3, #0
 8014336:	d001      	beq.n	801433c <tcp_output+0x2a0>
 8014338:	2301      	movs	r3, #1
 801433a:	e000      	b.n	801433e <tcp_output+0x2a2>
 801433c:	2300      	movs	r3, #0
 801433e:	442b      	add	r3, r5
 8014340:	4423      	add	r3, r4
 8014342:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	2b00      	cmp	r3, #0
 801434e:	da02      	bge.n	8014356 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	68ba      	ldr	r2, [r7, #8]
 8014354:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014358:	891b      	ldrh	r3, [r3, #8]
 801435a:	461c      	mov	r4, r3
 801435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	899b      	ldrh	r3, [r3, #12]
 8014362:	b29b      	uxth	r3, r3
 8014364:	4618      	mov	r0, r3
 8014366:	f7f8 ff37 	bl	800d1d8 <lwip_htons>
 801436a:	4603      	mov	r3, r0
 801436c:	b2db      	uxtb	r3, r3
 801436e:	f003 0303 	and.w	r3, r3, #3
 8014372:	2b00      	cmp	r3, #0
 8014374:	d001      	beq.n	801437a <tcp_output+0x2de>
 8014376:	2301      	movs	r3, #1
 8014378:	e000      	b.n	801437c <tcp_output+0x2e0>
 801437a:	2300      	movs	r3, #0
 801437c:	4423      	add	r3, r4
 801437e:	2b00      	cmp	r3, #0
 8014380:	d049      	beq.n	8014416 <tcp_output+0x37a>
      seg->next = NULL;
 8014382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014384:	2200      	movs	r2, #0
 8014386:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801438c:	2b00      	cmp	r3, #0
 801438e:	d105      	bne.n	801439c <tcp_output+0x300>
        pcb->unacked = seg;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014394:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014398:	623b      	str	r3, [r7, #32]
 801439a:	e03f      	b.n	801441c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7f8 ff2d 	bl	800d202 <lwip_htonl>
 80143a8:	4604      	mov	r4, r0
 80143aa:	6a3b      	ldr	r3, [r7, #32]
 80143ac:	68db      	ldr	r3, [r3, #12]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f8 ff26 	bl	800d202 <lwip_htonl>
 80143b6:	4603      	mov	r3, r0
 80143b8:	1ae3      	subs	r3, r4, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	da24      	bge.n	8014408 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	3370      	adds	r3, #112	; 0x70
 80143c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80143c4:	e002      	b.n	80143cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d011      	beq.n	80143f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	68db      	ldr	r3, [r3, #12]
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	4618      	mov	r0, r3
 80143de:	f7f8 ff10 	bl	800d202 <lwip_htonl>
 80143e2:	4604      	mov	r4, r0
 80143e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7f8 ff09 	bl	800d202 <lwip_htonl>
 80143f0:	4603      	mov	r3, r0
 80143f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	dbe6      	blt.n	80143c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014400:	69fb      	ldr	r3, [r7, #28]
 8014402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014404:	601a      	str	r2, [r3, #0]
 8014406:	e009      	b.n	801441c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014408:	6a3b      	ldr	r3, [r7, #32]
 801440a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801440c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801440e:	6a3b      	ldr	r3, [r7, #32]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	623b      	str	r3, [r7, #32]
 8014414:	e002      	b.n	801441c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014418:	f7fb ff19 	bl	801024e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014420:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014424:	2b00      	cmp	r3, #0
 8014426:	d012      	beq.n	801444e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	4618      	mov	r0, r3
 8014430:	f7f8 fee7 	bl	800d202 <lwip_htonl>
 8014434:	4602      	mov	r2, r0
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801443a:	1ad3      	subs	r3, r2, r3
 801443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801443e:	8912      	ldrh	r2, [r2, #8]
 8014440:	4413      	add	r3, r2
  while (seg != NULL &&
 8014442:	69ba      	ldr	r2, [r7, #24]
 8014444:	429a      	cmp	r2, r3
 8014446:	f4bf aed9 	bcs.w	80141fc <tcp_output+0x160>
 801444a:	e000      	b.n	801444e <tcp_output+0x3b2>
      break;
 801444c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014452:	2b00      	cmp	r3, #0
 8014454:	d108      	bne.n	8014468 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2200      	movs	r2, #0
 801445a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801445e:	e004      	b.n	801446a <tcp_output+0x3ce>
    goto output_done;
 8014460:	bf00      	nop
 8014462:	e002      	b.n	801446a <tcp_output+0x3ce>
    goto output_done;
 8014464:	bf00      	nop
 8014466:	e000      	b.n	801446a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014468:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	8b5b      	ldrh	r3, [r3, #26]
 801446e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014472:	b29a      	uxth	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014478:	2300      	movs	r3, #0
}
 801447a:	4618      	mov	r0, r3
 801447c:	3728      	adds	r7, #40	; 0x28
 801447e:	46bd      	mov	sp, r7
 8014480:	bdb0      	pop	{r4, r5, r7, pc}
 8014482:	bf00      	nop

08014484 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d106      	bne.n	80144a0 <tcp_output_segment_busy+0x1c>
 8014492:	4b09      	ldr	r3, [pc, #36]	; (80144b8 <tcp_output_segment_busy+0x34>)
 8014494:	f240 529a 	movw	r2, #1434	; 0x59a
 8014498:	4908      	ldr	r1, [pc, #32]	; (80144bc <tcp_output_segment_busy+0x38>)
 801449a:	4809      	ldr	r0, [pc, #36]	; (80144c0 <tcp_output_segment_busy+0x3c>)
 801449c:	f009 f918 	bl	801d6d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	7b9b      	ldrb	r3, [r3, #14]
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d001      	beq.n	80144ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80144aa:	2301      	movs	r3, #1
 80144ac:	e000      	b.n	80144b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80144ae:	2300      	movs	r3, #0
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	08020aec 	.word	0x08020aec
 80144bc:	08021088 	.word	0x08021088
 80144c0:	08020b40 	.word	0x08020b40

080144c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80144c4:	b5b0      	push	{r4, r5, r7, lr}
 80144c6:	b08c      	sub	sp, #48	; 0x30
 80144c8:	af04      	add	r7, sp, #16
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	60b9      	str	r1, [r7, #8]
 80144ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d106      	bne.n	80144e4 <tcp_output_segment+0x20>
 80144d6:	4b63      	ldr	r3, [pc, #396]	; (8014664 <tcp_output_segment+0x1a0>)
 80144d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80144dc:	4962      	ldr	r1, [pc, #392]	; (8014668 <tcp_output_segment+0x1a4>)
 80144de:	4863      	ldr	r0, [pc, #396]	; (801466c <tcp_output_segment+0x1a8>)
 80144e0:	f009 f8f6 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d106      	bne.n	80144f8 <tcp_output_segment+0x34>
 80144ea:	4b5e      	ldr	r3, [pc, #376]	; (8014664 <tcp_output_segment+0x1a0>)
 80144ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80144f0:	495f      	ldr	r1, [pc, #380]	; (8014670 <tcp_output_segment+0x1ac>)
 80144f2:	485e      	ldr	r0, [pc, #376]	; (801466c <tcp_output_segment+0x1a8>)
 80144f4:	f009 f8ec 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d106      	bne.n	801450c <tcp_output_segment+0x48>
 80144fe:	4b59      	ldr	r3, [pc, #356]	; (8014664 <tcp_output_segment+0x1a0>)
 8014500:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014504:	495b      	ldr	r1, [pc, #364]	; (8014674 <tcp_output_segment+0x1b0>)
 8014506:	4859      	ldr	r0, [pc, #356]	; (801466c <tcp_output_segment+0x1a8>)
 8014508:	f009 f8e2 	bl	801d6d0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801450c:	68f8      	ldr	r0, [r7, #12]
 801450e:	f7ff ffb9 	bl	8014484 <tcp_output_segment_busy>
 8014512:	4603      	mov	r3, r0
 8014514:	2b00      	cmp	r3, #0
 8014516:	d001      	beq.n	801451c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014518:	2300      	movs	r3, #0
 801451a:	e09f      	b.n	801465c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	68dc      	ldr	r4, [r3, #12]
 8014524:	4610      	mov	r0, r2
 8014526:	f7f8 fe6c 	bl	800d202 <lwip_htonl>
 801452a:	4603      	mov	r3, r0
 801452c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	68dc      	ldr	r4, [r3, #12]
 8014536:	4610      	mov	r0, r2
 8014538:	f7f8 fe4e 	bl	800d1d8 <lwip_htons>
 801453c:	4603      	mov	r3, r0
 801453e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014544:	68ba      	ldr	r2, [r7, #8]
 8014546:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014548:	441a      	add	r2, r3
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	68db      	ldr	r3, [r3, #12]
 8014552:	3314      	adds	r3, #20
 8014554:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	7a9b      	ldrb	r3, [r3, #10]
 801455a:	f003 0301 	and.w	r3, r3, #1
 801455e:	2b00      	cmp	r3, #0
 8014560:	d015      	beq.n	801458e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	3304      	adds	r3, #4
 8014566:	461a      	mov	r2, r3
 8014568:	6879      	ldr	r1, [r7, #4]
 801456a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801456e:	f7fc fa33 	bl	80109d8 <tcp_eff_send_mss_netif>
 8014572:	4603      	mov	r3, r0
 8014574:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014576:	8b7b      	ldrh	r3, [r7, #26]
 8014578:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801457c:	4618      	mov	r0, r3
 801457e:	f7f8 fe40 	bl	800d202 <lwip_htonl>
 8014582:	4602      	mov	r2, r0
 8014584:	69fb      	ldr	r3, [r7, #28]
 8014586:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	3304      	adds	r3, #4
 801458c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014594:	2b00      	cmp	r3, #0
 8014596:	da02      	bge.n	801459e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	2200      	movs	r2, #0
 801459c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d10c      	bne.n	80145c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80145a6:	4b34      	ldr	r3, [pc, #208]	; (8014678 <tcp_output_segment+0x1b4>)
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	68db      	ldr	r3, [r3, #12]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7f8 fe24 	bl	800d202 <lwip_htonl>
 80145ba:	4602      	mov	r2, r0
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	68da      	ldr	r2, [r3, #12]
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	8959      	ldrh	r1, [r3, #10]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	8b3a      	ldrh	r2, [r7, #24]
 80145da:	1a8a      	subs	r2, r1, r2
 80145dc:	b292      	uxth	r2, r2
 80145de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	8919      	ldrh	r1, [r3, #8]
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	8b3a      	ldrh	r2, [r7, #24]
 80145ec:	1a8a      	subs	r2, r1, r2
 80145ee:	b292      	uxth	r2, r2
 80145f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	68fa      	ldr	r2, [r7, #12]
 80145f8:	68d2      	ldr	r2, [r2, #12]
 80145fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	2200      	movs	r2, #0
 8014602:	741a      	strb	r2, [r3, #16]
 8014604:	2200      	movs	r2, #0
 8014606:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	f103 0214 	add.w	r2, r3, #20
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	7a9b      	ldrb	r3, [r3, #10]
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	f003 0304 	and.w	r3, r3, #4
 801461a:	4413      	add	r3, r2
 801461c:	69fa      	ldr	r2, [r7, #28]
 801461e:	429a      	cmp	r2, r3
 8014620:	d006      	beq.n	8014630 <tcp_output_segment+0x16c>
 8014622:	4b10      	ldr	r3, [pc, #64]	; (8014664 <tcp_output_segment+0x1a0>)
 8014624:	f240 621c 	movw	r2, #1564	; 0x61c
 8014628:	4914      	ldr	r1, [pc, #80]	; (801467c <tcp_output_segment+0x1b8>)
 801462a:	4810      	ldr	r0, [pc, #64]	; (801466c <tcp_output_segment+0x1a8>)
 801462c:	f009 f850 	bl	801d6d0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	6858      	ldr	r0, [r3, #4]
 8014634:	68b9      	ldr	r1, [r7, #8]
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	1d1c      	adds	r4, r3, #4
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	7add      	ldrb	r5, [r3, #11]
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	7a9b      	ldrb	r3, [r3, #10]
 8014642:	687a      	ldr	r2, [r7, #4]
 8014644:	9202      	str	r2, [sp, #8]
 8014646:	2206      	movs	r2, #6
 8014648:	9201      	str	r2, [sp, #4]
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	462b      	mov	r3, r5
 801464e:	4622      	mov	r2, r4
 8014650:	f002 fc1a 	bl	8016e88 <ip4_output_if>
 8014654:	4603      	mov	r3, r0
 8014656:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014658:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3720      	adds	r7, #32
 8014660:	46bd      	mov	sp, r7
 8014662:	bdb0      	pop	{r4, r5, r7, pc}
 8014664:	08020aec 	.word	0x08020aec
 8014668:	080210b0 	.word	0x080210b0
 801466c:	08020b40 	.word	0x08020b40
 8014670:	080210d0 	.word	0x080210d0
 8014674:	080210f0 	.word	0x080210f0
 8014678:	200113bc 	.word	0x200113bc
 801467c:	08021114 	.word	0x08021114

08014680 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014680:	b5b0      	push	{r4, r5, r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d106      	bne.n	801469c <tcp_rexmit_rto_prepare+0x1c>
 801468e:	4b31      	ldr	r3, [pc, #196]	; (8014754 <tcp_rexmit_rto_prepare+0xd4>)
 8014690:	f240 6263 	movw	r2, #1635	; 0x663
 8014694:	4930      	ldr	r1, [pc, #192]	; (8014758 <tcp_rexmit_rto_prepare+0xd8>)
 8014696:	4831      	ldr	r0, [pc, #196]	; (801475c <tcp_rexmit_rto_prepare+0xdc>)
 8014698:	f009 f81a 	bl	801d6d0 <iprintf>

  if (pcb->unacked == NULL) {
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d102      	bne.n	80146aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80146a4:	f06f 0305 	mvn.w	r3, #5
 80146a8:	e050      	b.n	801474c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146ae:	60fb      	str	r3, [r7, #12]
 80146b0:	e00b      	b.n	80146ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80146b2:	68f8      	ldr	r0, [r7, #12]
 80146b4:	f7ff fee6 	bl	8014484 <tcp_output_segment_busy>
 80146b8:	4603      	mov	r3, r0
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d002      	beq.n	80146c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80146be:	f06f 0305 	mvn.w	r3, #5
 80146c2:	e043      	b.n	801474c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	60fb      	str	r3, [r7, #12]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d1ef      	bne.n	80146b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f7ff fed6 	bl	8014484 <tcp_output_segment_busy>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d002      	beq.n	80146e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80146de:	f06f 0305 	mvn.w	r3, #5
 80146e2:	e033      	b.n	801474c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2200      	movs	r2, #0
 80146f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	8b5b      	ldrh	r3, [r3, #26]
 80146fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014702:	b29a      	uxth	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	4618      	mov	r0, r3
 8014710:	f7f8 fd77 	bl	800d202 <lwip_htonl>
 8014714:	4604      	mov	r4, r0
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	891b      	ldrh	r3, [r3, #8]
 801471a:	461d      	mov	r5, r3
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	899b      	ldrh	r3, [r3, #12]
 8014722:	b29b      	uxth	r3, r3
 8014724:	4618      	mov	r0, r3
 8014726:	f7f8 fd57 	bl	800d1d8 <lwip_htons>
 801472a:	4603      	mov	r3, r0
 801472c:	b2db      	uxtb	r3, r3
 801472e:	f003 0303 	and.w	r3, r3, #3
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <tcp_rexmit_rto_prepare+0xba>
 8014736:	2301      	movs	r3, #1
 8014738:	e000      	b.n	801473c <tcp_rexmit_rto_prepare+0xbc>
 801473a:	2300      	movs	r3, #0
 801473c:	442b      	add	r3, r5
 801473e:	18e2      	adds	r2, r4, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2200      	movs	r2, #0
 8014748:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801474a:	2300      	movs	r3, #0
}
 801474c:	4618      	mov	r0, r3
 801474e:	3710      	adds	r7, #16
 8014750:	46bd      	mov	sp, r7
 8014752:	bdb0      	pop	{r4, r5, r7, pc}
 8014754:	08020aec 	.word	0x08020aec
 8014758:	08021128 	.word	0x08021128
 801475c:	08020b40 	.word	0x08020b40

08014760 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d106      	bne.n	801477c <tcp_rexmit_rto_commit+0x1c>
 801476e:	4b0d      	ldr	r3, [pc, #52]	; (80147a4 <tcp_rexmit_rto_commit+0x44>)
 8014770:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014774:	490c      	ldr	r1, [pc, #48]	; (80147a8 <tcp_rexmit_rto_commit+0x48>)
 8014776:	480d      	ldr	r0, [pc, #52]	; (80147ac <tcp_rexmit_rto_commit+0x4c>)
 8014778:	f008 ffaa 	bl	801d6d0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014782:	2bff      	cmp	r3, #255	; 0xff
 8014784:	d007      	beq.n	8014796 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801478c:	3301      	adds	r3, #1
 801478e:	b2da      	uxtb	r2, r3
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f7ff fc80 	bl	801409c <tcp_output>
}
 801479c:	bf00      	nop
 801479e:	3708      	adds	r7, #8
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	08020aec 	.word	0x08020aec
 80147a8:	0802114c 	.word	0x0802114c
 80147ac:	08020b40 	.word	0x08020b40

080147b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d106      	bne.n	80147cc <tcp_rexmit_rto+0x1c>
 80147be:	4b0a      	ldr	r3, [pc, #40]	; (80147e8 <tcp_rexmit_rto+0x38>)
 80147c0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80147c4:	4909      	ldr	r1, [pc, #36]	; (80147ec <tcp_rexmit_rto+0x3c>)
 80147c6:	480a      	ldr	r0, [pc, #40]	; (80147f0 <tcp_rexmit_rto+0x40>)
 80147c8:	f008 ff82 	bl	801d6d0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7ff ff57 	bl	8014680 <tcp_rexmit_rto_prepare>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d102      	bne.n	80147de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f7ff ffc1 	bl	8014760 <tcp_rexmit_rto_commit>
  }
}
 80147de:	bf00      	nop
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	08020aec 	.word	0x08020aec
 80147ec:	08021170 	.word	0x08021170
 80147f0:	08020b40 	.word	0x08020b40

080147f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80147f4:	b590      	push	{r4, r7, lr}
 80147f6:	b085      	sub	sp, #20
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d106      	bne.n	8014810 <tcp_rexmit+0x1c>
 8014802:	4b2f      	ldr	r3, [pc, #188]	; (80148c0 <tcp_rexmit+0xcc>)
 8014804:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014808:	492e      	ldr	r1, [pc, #184]	; (80148c4 <tcp_rexmit+0xd0>)
 801480a:	482f      	ldr	r0, [pc, #188]	; (80148c8 <tcp_rexmit+0xd4>)
 801480c:	f008 ff60 	bl	801d6d0 <iprintf>

  if (pcb->unacked == NULL) {
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014814:	2b00      	cmp	r3, #0
 8014816:	d102      	bne.n	801481e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014818:	f06f 0305 	mvn.w	r3, #5
 801481c:	e04c      	b.n	80148b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014822:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014824:	68b8      	ldr	r0, [r7, #8]
 8014826:	f7ff fe2d 	bl	8014484 <tcp_output_segment_busy>
 801482a:	4603      	mov	r3, r0
 801482c:	2b00      	cmp	r3, #0
 801482e:	d002      	beq.n	8014836 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014830:	f06f 0305 	mvn.w	r3, #5
 8014834:	e040      	b.n	80148b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	336c      	adds	r3, #108	; 0x6c
 8014842:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014844:	e002      	b.n	801484c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d011      	beq.n	8014878 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	4618      	mov	r0, r3
 801485e:	f7f8 fcd0 	bl	800d202 <lwip_htonl>
 8014862:	4604      	mov	r4, r0
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	68db      	ldr	r3, [r3, #12]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	4618      	mov	r0, r3
 801486c:	f7f8 fcc9 	bl	800d202 <lwip_htonl>
 8014870:	4603      	mov	r3, r0
 8014872:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014874:	2b00      	cmp	r3, #0
 8014876:	dbe6      	blt.n	8014846 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	68ba      	ldr	r2, [r7, #8]
 8014884:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d103      	bne.n	8014896 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2200      	movs	r2, #0
 8014892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801489c:	2bff      	cmp	r3, #255	; 0xff
 801489e:	d007      	beq.n	80148b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148a6:	3301      	adds	r3, #1
 80148a8:	b2da      	uxtb	r2, r3
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2200      	movs	r2, #0
 80148b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80148b6:	2300      	movs	r3, #0
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3714      	adds	r7, #20
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd90      	pop	{r4, r7, pc}
 80148c0:	08020aec 	.word	0x08020aec
 80148c4:	0802118c 	.word	0x0802118c
 80148c8:	08020b40 	.word	0x08020b40

080148cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d106      	bne.n	80148e8 <tcp_rexmit_fast+0x1c>
 80148da:	4b2a      	ldr	r3, [pc, #168]	; (8014984 <tcp_rexmit_fast+0xb8>)
 80148dc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80148e0:	4929      	ldr	r1, [pc, #164]	; (8014988 <tcp_rexmit_fast+0xbc>)
 80148e2:	482a      	ldr	r0, [pc, #168]	; (801498c <tcp_rexmit_fast+0xc0>)
 80148e4:	f008 fef4 	bl	801d6d0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d045      	beq.n	801497c <tcp_rexmit_fast+0xb0>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	8b5b      	ldrh	r3, [r3, #26]
 80148f4:	f003 0304 	and.w	r3, r3, #4
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d13f      	bne.n	801497c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f7ff ff79 	bl	80147f4 <tcp_rexmit>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d139      	bne.n	801497c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014914:	4293      	cmp	r3, r2
 8014916:	bf28      	it	cs
 8014918:	4613      	movcs	r3, r2
 801491a:	b29b      	uxth	r3, r3
 801491c:	2b00      	cmp	r3, #0
 801491e:	da00      	bge.n	8014922 <tcp_rexmit_fast+0x56>
 8014920:	3301      	adds	r3, #1
 8014922:	105b      	asrs	r3, r3, #1
 8014924:	b29a      	uxth	r2, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014932:	461a      	mov	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	429a      	cmp	r2, r3
 801493c:	d206      	bcs.n	801494c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014942:	005b      	lsls	r3, r3, #1
 8014944:	b29a      	uxth	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014956:	4619      	mov	r1, r3
 8014958:	0049      	lsls	r1, r1, #1
 801495a:	440b      	add	r3, r1
 801495c:	b29b      	uxth	r3, r3
 801495e:	4413      	add	r3, r2
 8014960:	b29a      	uxth	r2, r3
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	8b5b      	ldrh	r3, [r3, #26]
 801496c:	f043 0304 	orr.w	r3, r3, #4
 8014970:	b29a      	uxth	r2, r3
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2200      	movs	r2, #0
 801497a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801497c:	bf00      	nop
 801497e:	3708      	adds	r7, #8
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	08020aec 	.word	0x08020aec
 8014988:	080211a4 	.word	0x080211a4
 801498c:	08020b40 	.word	0x08020b40

08014990 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	607b      	str	r3, [r7, #4]
 801499a:	460b      	mov	r3, r1
 801499c:	817b      	strh	r3, [r7, #10]
 801499e:	4613      	mov	r3, r2
 80149a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80149a2:	897a      	ldrh	r2, [r7, #10]
 80149a4:	893b      	ldrh	r3, [r7, #8]
 80149a6:	4413      	add	r3, r2
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	3314      	adds	r3, #20
 80149ac:	b29b      	uxth	r3, r3
 80149ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149b2:	4619      	mov	r1, r3
 80149b4:	2022      	movs	r0, #34	; 0x22
 80149b6:	f7f9 fd2d 	bl	800e414 <pbuf_alloc>
 80149ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d04d      	beq.n	8014a5e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80149c2:	897b      	ldrh	r3, [r7, #10]
 80149c4:	3313      	adds	r3, #19
 80149c6:	697a      	ldr	r2, [r7, #20]
 80149c8:	8952      	ldrh	r2, [r2, #10]
 80149ca:	4293      	cmp	r3, r2
 80149cc:	db06      	blt.n	80149dc <tcp_output_alloc_header_common+0x4c>
 80149ce:	4b26      	ldr	r3, [pc, #152]	; (8014a68 <tcp_output_alloc_header_common+0xd8>)
 80149d0:	f240 7223 	movw	r2, #1827	; 0x723
 80149d4:	4925      	ldr	r1, [pc, #148]	; (8014a6c <tcp_output_alloc_header_common+0xdc>)
 80149d6:	4826      	ldr	r0, [pc, #152]	; (8014a70 <tcp_output_alloc_header_common+0xe0>)
 80149d8:	f008 fe7a 	bl	801d6d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80149e2:	8c3b      	ldrh	r3, [r7, #32]
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7f8 fbf7 	bl	800d1d8 <lwip_htons>
 80149ea:	4603      	mov	r3, r0
 80149ec:	461a      	mov	r2, r3
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80149f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7f8 fbef 	bl	800d1d8 <lwip_htons>
 80149fa:	4603      	mov	r3, r0
 80149fc:	461a      	mov	r2, r3
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f7f8 fbfa 	bl	800d202 <lwip_htonl>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014a14:	897b      	ldrh	r3, [r7, #10]
 8014a16:	089b      	lsrs	r3, r3, #2
 8014a18:	b29b      	uxth	r3, r3
 8014a1a:	3305      	adds	r3, #5
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	031b      	lsls	r3, r3, #12
 8014a20:	b29a      	uxth	r2, r3
 8014a22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	4313      	orrs	r3, r2
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7f8 fbd3 	bl	800d1d8 <lwip_htons>
 8014a32:	4603      	mov	r3, r0
 8014a34:	461a      	mov	r2, r3
 8014a36:	693b      	ldr	r3, [r7, #16]
 8014a38:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014a3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7f8 fbcb 	bl	800d1d8 <lwip_htons>
 8014a42:	4603      	mov	r3, r0
 8014a44:	461a      	mov	r2, r3
 8014a46:	693b      	ldr	r3, [r7, #16]
 8014a48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	741a      	strb	r2, [r3, #16]
 8014a50:	2200      	movs	r2, #0
 8014a52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	2200      	movs	r2, #0
 8014a58:	749a      	strb	r2, [r3, #18]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014a5e:	697b      	ldr	r3, [r7, #20]
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3718      	adds	r7, #24
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	08020aec 	.word	0x08020aec
 8014a6c:	080211c4 	.word	0x080211c4
 8014a70:	08020b40 	.word	0x08020b40

08014a74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014a74:	b5b0      	push	{r4, r5, r7, lr}
 8014a76:	b08a      	sub	sp, #40	; 0x28
 8014a78:	af04      	add	r7, sp, #16
 8014a7a:	60f8      	str	r0, [r7, #12]
 8014a7c:	607b      	str	r3, [r7, #4]
 8014a7e:	460b      	mov	r3, r1
 8014a80:	817b      	strh	r3, [r7, #10]
 8014a82:	4613      	mov	r3, r2
 8014a84:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d106      	bne.n	8014a9a <tcp_output_alloc_header+0x26>
 8014a8c:	4b15      	ldr	r3, [pc, #84]	; (8014ae4 <tcp_output_alloc_header+0x70>)
 8014a8e:	f240 7242 	movw	r2, #1858	; 0x742
 8014a92:	4915      	ldr	r1, [pc, #84]	; (8014ae8 <tcp_output_alloc_header+0x74>)
 8014a94:	4815      	ldr	r0, [pc, #84]	; (8014aec <tcp_output_alloc_header+0x78>)
 8014a96:	f008 fe1b 	bl	801d6d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	8adb      	ldrh	r3, [r3, #22]
 8014aa2:	68fa      	ldr	r2, [r7, #12]
 8014aa4:	8b12      	ldrh	r2, [r2, #24]
 8014aa6:	68f9      	ldr	r1, [r7, #12]
 8014aa8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014aaa:	893d      	ldrh	r5, [r7, #8]
 8014aac:	897c      	ldrh	r4, [r7, #10]
 8014aae:	9103      	str	r1, [sp, #12]
 8014ab0:	2110      	movs	r1, #16
 8014ab2:	9102      	str	r1, [sp, #8]
 8014ab4:	9201      	str	r2, [sp, #4]
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	462a      	mov	r2, r5
 8014abc:	4621      	mov	r1, r4
 8014abe:	f7ff ff67 	bl	8014990 <tcp_output_alloc_header_common>
 8014ac2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d006      	beq.n	8014ad8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014ad2:	441a      	add	r2, r3
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014ad8:	697b      	ldr	r3, [r7, #20]
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3718      	adds	r7, #24
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	08020aec 	.word	0x08020aec
 8014ae8:	080211f4 	.word	0x080211f4
 8014aec:	08020b40 	.word	0x08020b40

08014af0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b088      	sub	sp, #32
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	4611      	mov	r1, r2
 8014afc:	461a      	mov	r2, r3
 8014afe:	460b      	mov	r3, r1
 8014b00:	71fb      	strb	r3, [r7, #7]
 8014b02:	4613      	mov	r3, r2
 8014b04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014b06:	2300      	movs	r3, #0
 8014b08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d106      	bne.n	8014b1e <tcp_output_fill_options+0x2e>
 8014b10:	4b13      	ldr	r3, [pc, #76]	; (8014b60 <tcp_output_fill_options+0x70>)
 8014b12:	f240 7256 	movw	r2, #1878	; 0x756
 8014b16:	4913      	ldr	r1, [pc, #76]	; (8014b64 <tcp_output_fill_options+0x74>)
 8014b18:	4813      	ldr	r0, [pc, #76]	; (8014b68 <tcp_output_fill_options+0x78>)
 8014b1a:	f008 fdd9 	bl	801d6d0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	685b      	ldr	r3, [r3, #4]
 8014b22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	3314      	adds	r3, #20
 8014b28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014b2a:	69bb      	ldr	r3, [r7, #24]
 8014b2c:	f103 0214 	add.w	r2, r3, #20
 8014b30:	8bfb      	ldrh	r3, [r7, #30]
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	4619      	mov	r1, r3
 8014b36:	79fb      	ldrb	r3, [r7, #7]
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	f003 0304 	and.w	r3, r3, #4
 8014b3e:	440b      	add	r3, r1
 8014b40:	4413      	add	r3, r2
 8014b42:	697a      	ldr	r2, [r7, #20]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d006      	beq.n	8014b56 <tcp_output_fill_options+0x66>
 8014b48:	4b05      	ldr	r3, [pc, #20]	; (8014b60 <tcp_output_fill_options+0x70>)
 8014b4a:	f240 7275 	movw	r2, #1909	; 0x775
 8014b4e:	4907      	ldr	r1, [pc, #28]	; (8014b6c <tcp_output_fill_options+0x7c>)
 8014b50:	4805      	ldr	r0, [pc, #20]	; (8014b68 <tcp_output_fill_options+0x78>)
 8014b52:	f008 fdbd 	bl	801d6d0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014b56:	bf00      	nop
 8014b58:	3720      	adds	r7, #32
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	08020aec 	.word	0x08020aec
 8014b64:	0802121c 	.word	0x0802121c
 8014b68:	08020b40 	.word	0x08020b40
 8014b6c:	08021114 	.word	0x08021114

08014b70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b08a      	sub	sp, #40	; 0x28
 8014b74:	af04      	add	r7, sp, #16
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	60b9      	str	r1, [r7, #8]
 8014b7a:	607a      	str	r2, [r7, #4]
 8014b7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014b7e:	68bb      	ldr	r3, [r7, #8]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d106      	bne.n	8014b92 <tcp_output_control_segment+0x22>
 8014b84:	4b1c      	ldr	r3, [pc, #112]	; (8014bf8 <tcp_output_control_segment+0x88>)
 8014b86:	f240 7287 	movw	r2, #1927	; 0x787
 8014b8a:	491c      	ldr	r1, [pc, #112]	; (8014bfc <tcp_output_control_segment+0x8c>)
 8014b8c:	481c      	ldr	r0, [pc, #112]	; (8014c00 <tcp_output_control_segment+0x90>)
 8014b8e:	f008 fd9f 	bl	801d6d0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014b92:	683a      	ldr	r2, [r7, #0]
 8014b94:	6879      	ldr	r1, [r7, #4]
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f7fe fae8 	bl	801316c <tcp_route>
 8014b9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d102      	bne.n	8014baa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014ba4:	23fc      	movs	r3, #252	; 0xfc
 8014ba6:	75fb      	strb	r3, [r7, #23]
 8014ba8:	e01c      	b.n	8014be4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d006      	beq.n	8014bbe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	7adb      	ldrb	r3, [r3, #11]
 8014bb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	7a9b      	ldrb	r3, [r3, #10]
 8014bba:	757b      	strb	r3, [r7, #21]
 8014bbc:	e003      	b.n	8014bc6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014bbe:	23ff      	movs	r3, #255	; 0xff
 8014bc0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014bc6:	7dba      	ldrb	r2, [r7, #22]
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	9302      	str	r3, [sp, #8]
 8014bcc:	2306      	movs	r3, #6
 8014bce:	9301      	str	r3, [sp, #4]
 8014bd0:	7d7b      	ldrb	r3, [r7, #21]
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	683a      	ldr	r2, [r7, #0]
 8014bd8:	6879      	ldr	r1, [r7, #4]
 8014bda:	68b8      	ldr	r0, [r7, #8]
 8014bdc:	f002 f954 	bl	8016e88 <ip4_output_if>
 8014be0:	4603      	mov	r3, r0
 8014be2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014be4:	68b8      	ldr	r0, [r7, #8]
 8014be6:	f7f9 fef9 	bl	800e9dc <pbuf_free>
  return err;
 8014bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3718      	adds	r7, #24
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	08020aec 	.word	0x08020aec
 8014bfc:	08021244 	.word	0x08021244
 8014c00:	08020b40 	.word	0x08020b40

08014c04 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014c04:	b590      	push	{r4, r7, lr}
 8014c06:	b08b      	sub	sp, #44	; 0x2c
 8014c08:	af04      	add	r7, sp, #16
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	60b9      	str	r1, [r7, #8]
 8014c0e:	607a      	str	r2, [r7, #4]
 8014c10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d106      	bne.n	8014c26 <tcp_rst+0x22>
 8014c18:	4b1f      	ldr	r3, [pc, #124]	; (8014c98 <tcp_rst+0x94>)
 8014c1a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014c1e:	491f      	ldr	r1, [pc, #124]	; (8014c9c <tcp_rst+0x98>)
 8014c20:	481f      	ldr	r0, [pc, #124]	; (8014ca0 <tcp_rst+0x9c>)
 8014c22:	f008 fd55 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d106      	bne.n	8014c3a <tcp_rst+0x36>
 8014c2c:	4b1a      	ldr	r3, [pc, #104]	; (8014c98 <tcp_rst+0x94>)
 8014c2e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014c32:	491c      	ldr	r1, [pc, #112]	; (8014ca4 <tcp_rst+0xa0>)
 8014c34:	481a      	ldr	r0, [pc, #104]	; (8014ca0 <tcp_rst+0x9c>)
 8014c36:	f008 fd4b 	bl	801d6d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014c3e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014c42:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014c44:	7dfb      	ldrb	r3, [r7, #23]
 8014c46:	b29c      	uxth	r4, r3
 8014c48:	68b8      	ldr	r0, [r7, #8]
 8014c4a:	f7f8 fada 	bl	800d202 <lwip_htonl>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	8abb      	ldrh	r3, [r7, #20]
 8014c52:	9303      	str	r3, [sp, #12]
 8014c54:	2314      	movs	r3, #20
 8014c56:	9302      	str	r3, [sp, #8]
 8014c58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c5a:	9301      	str	r3, [sp, #4]
 8014c5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014c5e:	9300      	str	r3, [sp, #0]
 8014c60:	4613      	mov	r3, r2
 8014c62:	2200      	movs	r2, #0
 8014c64:	4621      	mov	r1, r4
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f7ff fe92 	bl	8014990 <tcp_output_alloc_header_common>
 8014c6c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014c6e:	693b      	ldr	r3, [r7, #16]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00c      	beq.n	8014c8e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c74:	7dfb      	ldrb	r3, [r7, #23]
 8014c76:	2200      	movs	r2, #0
 8014c78:	6939      	ldr	r1, [r7, #16]
 8014c7a:	68f8      	ldr	r0, [r7, #12]
 8014c7c:	f7ff ff38 	bl	8014af0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c82:	683a      	ldr	r2, [r7, #0]
 8014c84:	6939      	ldr	r1, [r7, #16]
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f7ff ff72 	bl	8014b70 <tcp_output_control_segment>
 8014c8c:	e000      	b.n	8014c90 <tcp_rst+0x8c>
    return;
 8014c8e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014c90:	371c      	adds	r7, #28
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd90      	pop	{r4, r7, pc}
 8014c96:	bf00      	nop
 8014c98:	08020aec 	.word	0x08020aec
 8014c9c:	08021270 	.word	0x08021270
 8014ca0:	08020b40 	.word	0x08020b40
 8014ca4:	0802128c 	.word	0x0802128c

08014ca8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014ca8:	b590      	push	{r4, r7, lr}
 8014caa:	b087      	sub	sp, #28
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d106      	bne.n	8014ccc <tcp_send_empty_ack+0x24>
 8014cbe:	4b28      	ldr	r3, [pc, #160]	; (8014d60 <tcp_send_empty_ack+0xb8>)
 8014cc0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014cc4:	4927      	ldr	r1, [pc, #156]	; (8014d64 <tcp_send_empty_ack+0xbc>)
 8014cc6:	4828      	ldr	r0, [pc, #160]	; (8014d68 <tcp_send_empty_ack+0xc0>)
 8014cc8:	f008 fd02 	bl	801d6d0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014ccc:	7dfb      	ldrb	r3, [r7, #23]
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	f003 0304 	and.w	r3, r3, #4
 8014cd6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014cd8:	7d7b      	ldrb	r3, [r7, #21]
 8014cda:	b29c      	uxth	r4, r3
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7f8 fa8e 	bl	800d202 <lwip_htonl>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2200      	movs	r2, #0
 8014cea:	4621      	mov	r1, r4
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f7ff fec1 	bl	8014a74 <tcp_output_alloc_header>
 8014cf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d109      	bne.n	8014d0e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	8b5b      	ldrh	r3, [r3, #26]
 8014cfe:	f043 0303 	orr.w	r3, r3, #3
 8014d02:	b29a      	uxth	r2, r3
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014d08:	f06f 0301 	mvn.w	r3, #1
 8014d0c:	e023      	b.n	8014d56 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014d0e:	7dbb      	ldrb	r3, [r7, #22]
 8014d10:	7dfa      	ldrb	r2, [r7, #23]
 8014d12:	6939      	ldr	r1, [r7, #16]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f7ff feeb 	bl	8014af0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d1a:	687a      	ldr	r2, [r7, #4]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	3304      	adds	r3, #4
 8014d20:	6939      	ldr	r1, [r7, #16]
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7ff ff24 	bl	8014b70 <tcp_output_control_segment>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d007      	beq.n	8014d44 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	8b5b      	ldrh	r3, [r3, #26]
 8014d38:	f043 0303 	orr.w	r3, r3, #3
 8014d3c:	b29a      	uxth	r2, r3
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	835a      	strh	r2, [r3, #26]
 8014d42:	e006      	b.n	8014d52 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	8b5b      	ldrh	r3, [r3, #26]
 8014d48:	f023 0303 	bic.w	r3, r3, #3
 8014d4c:	b29a      	uxth	r2, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	371c      	adds	r7, #28
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd90      	pop	{r4, r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	08020aec 	.word	0x08020aec
 8014d64:	080212a8 	.word	0x080212a8
 8014d68:	08020b40 	.word	0x08020b40

08014d6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014d6c:	b590      	push	{r4, r7, lr}
 8014d6e:	b087      	sub	sp, #28
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d74:	2300      	movs	r3, #0
 8014d76:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d106      	bne.n	8014d8c <tcp_keepalive+0x20>
 8014d7e:	4b18      	ldr	r3, [pc, #96]	; (8014de0 <tcp_keepalive+0x74>)
 8014d80:	f640 0224 	movw	r2, #2084	; 0x824
 8014d84:	4917      	ldr	r1, [pc, #92]	; (8014de4 <tcp_keepalive+0x78>)
 8014d86:	4818      	ldr	r0, [pc, #96]	; (8014de8 <tcp_keepalive+0x7c>)
 8014d88:	f008 fca2 	bl	801d6d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014d8c:	7dfb      	ldrb	r3, [r7, #23]
 8014d8e:	b29c      	uxth	r4, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d94:	3b01      	subs	r3, #1
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7f8 fa33 	bl	800d202 <lwip_htonl>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2200      	movs	r2, #0
 8014da0:	4621      	mov	r1, r4
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7ff fe66 	bl	8014a74 <tcp_output_alloc_header>
 8014da8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d102      	bne.n	8014db6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014db4:	e010      	b.n	8014dd8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
 8014db8:	2200      	movs	r2, #0
 8014dba:	6939      	ldr	r1, [r7, #16]
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f7ff fe97 	bl	8014af0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	3304      	adds	r3, #4
 8014dc8:	6939      	ldr	r1, [r7, #16]
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f7ff fed0 	bl	8014b70 <tcp_output_control_segment>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	371c      	adds	r7, #28
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd90      	pop	{r4, r7, pc}
 8014de0:	08020aec 	.word	0x08020aec
 8014de4:	080212c8 	.word	0x080212c8
 8014de8:	08020b40 	.word	0x08020b40

08014dec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014dec:	b590      	push	{r4, r7, lr}
 8014dee:	b08b      	sub	sp, #44	; 0x2c
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014df4:	2300      	movs	r3, #0
 8014df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d106      	bne.n	8014e0e <tcp_zero_window_probe+0x22>
 8014e00:	4b4c      	ldr	r3, [pc, #304]	; (8014f34 <tcp_zero_window_probe+0x148>)
 8014e02:	f640 024f 	movw	r2, #2127	; 0x84f
 8014e06:	494c      	ldr	r1, [pc, #304]	; (8014f38 <tcp_zero_window_probe+0x14c>)
 8014e08:	484c      	ldr	r0, [pc, #304]	; (8014f3c <tcp_zero_window_probe+0x150>)
 8014e0a:	f008 fc61 	bl	801d6d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014e14:	6a3b      	ldr	r3, [r7, #32]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d101      	bne.n	8014e1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	e086      	b.n	8014f2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014e24:	2bff      	cmp	r3, #255	; 0xff
 8014e26:	d007      	beq.n	8014e38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014e2e:	3301      	adds	r3, #1
 8014e30:	b2da      	uxtb	r2, r3
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014e38:	6a3b      	ldr	r3, [r7, #32]
 8014e3a:	68db      	ldr	r3, [r3, #12]
 8014e3c:	899b      	ldrh	r3, [r3, #12]
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7f8 f9c9 	bl	800d1d8 <lwip_htons>
 8014e46:	4603      	mov	r3, r0
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	f003 0301 	and.w	r3, r3, #1
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d005      	beq.n	8014e5e <tcp_zero_window_probe+0x72>
 8014e52:	6a3b      	ldr	r3, [r7, #32]
 8014e54:	891b      	ldrh	r3, [r3, #8]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d101      	bne.n	8014e5e <tcp_zero_window_probe+0x72>
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	e000      	b.n	8014e60 <tcp_zero_window_probe+0x74>
 8014e5e:	2300      	movs	r3, #0
 8014e60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014e62:	7ffb      	ldrb	r3, [r7, #31]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	bf0c      	ite	eq
 8014e68:	2301      	moveq	r3, #1
 8014e6a:	2300      	movne	r3, #0
 8014e6c:	b2db      	uxtb	r3, r3
 8014e6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e74:	b299      	uxth	r1, r3
 8014e76:	6a3b      	ldr	r3, [r7, #32]
 8014e78:	68db      	ldr	r3, [r3, #12]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	8bba      	ldrh	r2, [r7, #28]
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f7ff fdf8 	bl	8014a74 <tcp_output_alloc_header>
 8014e84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014e86:	69bb      	ldr	r3, [r7, #24]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d102      	bne.n	8014e92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e90:	e04c      	b.n	8014f2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014e92:	69bb      	ldr	r3, [r7, #24]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014e98:	7ffb      	ldrb	r3, [r7, #31]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d011      	beq.n	8014ec2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	899b      	ldrh	r3, [r3, #12]
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	b21b      	sxth	r3, r3
 8014ea6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014eaa:	b21c      	sxth	r4, r3
 8014eac:	2011      	movs	r0, #17
 8014eae:	f7f8 f993 	bl	800d1d8 <lwip_htons>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	b21b      	sxth	r3, r3
 8014eb6:	4323      	orrs	r3, r4
 8014eb8:	b21b      	sxth	r3, r3
 8014eba:	b29a      	uxth	r2, r3
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	819a      	strh	r2, [r3, #12]
 8014ec0:	e010      	b.n	8014ee4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	3314      	adds	r3, #20
 8014ec8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014eca:	6a3b      	ldr	r3, [r7, #32]
 8014ecc:	6858      	ldr	r0, [r3, #4]
 8014ece:	6a3b      	ldr	r3, [r7, #32]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	891a      	ldrh	r2, [r3, #8]
 8014ed4:	6a3b      	ldr	r3, [r7, #32]
 8014ed6:	891b      	ldrh	r3, [r3, #8]
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	b29b      	uxth	r3, r3
 8014edc:	2201      	movs	r2, #1
 8014ede:	6939      	ldr	r1, [r7, #16]
 8014ee0:	f7f9 ff72 	bl	800edc8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014ee4:	6a3b      	ldr	r3, [r7, #32]
 8014ee6:	68db      	ldr	r3, [r3, #12]
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7f8 f989 	bl	800d202 <lwip_htonl>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	1ad3      	subs	r3, r2, r3
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	da02      	bge.n	8014f08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	68fa      	ldr	r2, [r7, #12]
 8014f06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	69b9      	ldr	r1, [r7, #24]
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f7ff fded 	bl	8014af0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	3304      	adds	r3, #4
 8014f1c:	69b9      	ldr	r1, [r7, #24]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7ff fe26 	bl	8014b70 <tcp_output_control_segment>
 8014f24:	4603      	mov	r3, r0
 8014f26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014f28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	372c      	adds	r7, #44	; 0x2c
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd90      	pop	{r4, r7, pc}
 8014f34:	08020aec 	.word	0x08020aec
 8014f38:	080212e4 	.word	0x080212e4
 8014f3c:	08020b40 	.word	0x08020b40

08014f40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014f48:	f7fa f82c 	bl	800efa4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <tcpip_tcp_timer+0x38>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d103      	bne.n	8014f5c <tcpip_tcp_timer+0x1c>
 8014f54:	4b09      	ldr	r3, [pc, #36]	; (8014f7c <tcpip_tcp_timer+0x3c>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d005      	beq.n	8014f68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	4908      	ldr	r1, [pc, #32]	; (8014f80 <tcpip_tcp_timer+0x40>)
 8014f60:	20fa      	movs	r0, #250	; 0xfa
 8014f62:	f000 f8f3 	bl	801514c <sys_timeout>
 8014f66:	e003      	b.n	8014f70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014f68:	4b06      	ldr	r3, [pc, #24]	; (8014f84 <tcpip_tcp_timer+0x44>)
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	601a      	str	r2, [r3, #0]
  }
}
 8014f6e:	bf00      	nop
 8014f70:	bf00      	nop
 8014f72:	3708      	adds	r7, #8
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	200113c8 	.word	0x200113c8
 8014f7c:	200113cc 	.word	0x200113cc
 8014f80:	08014f41 	.word	0x08014f41
 8014f84:	20011414 	.word	0x20011414

08014f88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014f8c:	4b0a      	ldr	r3, [pc, #40]	; (8014fb8 <tcp_timer_needed+0x30>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d10f      	bne.n	8014fb4 <tcp_timer_needed+0x2c>
 8014f94:	4b09      	ldr	r3, [pc, #36]	; (8014fbc <tcp_timer_needed+0x34>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d103      	bne.n	8014fa4 <tcp_timer_needed+0x1c>
 8014f9c:	4b08      	ldr	r3, [pc, #32]	; (8014fc0 <tcp_timer_needed+0x38>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d007      	beq.n	8014fb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014fa4:	4b04      	ldr	r3, [pc, #16]	; (8014fb8 <tcp_timer_needed+0x30>)
 8014fa6:	2201      	movs	r2, #1
 8014fa8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014faa:	2200      	movs	r2, #0
 8014fac:	4905      	ldr	r1, [pc, #20]	; (8014fc4 <tcp_timer_needed+0x3c>)
 8014fae:	20fa      	movs	r0, #250	; 0xfa
 8014fb0:	f000 f8cc 	bl	801514c <sys_timeout>
  }
}
 8014fb4:	bf00      	nop
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	20011414 	.word	0x20011414
 8014fbc:	200113c8 	.word	0x200113c8
 8014fc0:	200113cc 	.word	0x200113cc
 8014fc4:	08014f41 	.word	0x08014f41

08014fc8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b086      	sub	sp, #24
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	60f8      	str	r0, [r7, #12]
 8014fd0:	60b9      	str	r1, [r7, #8]
 8014fd2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014fd4:	200a      	movs	r0, #10
 8014fd6:	f7f8 fde7 	bl	800dba8 <memp_malloc>
 8014fda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d109      	bne.n	8014ff6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d151      	bne.n	801508c <sys_timeout_abs+0xc4>
 8014fe8:	4b2a      	ldr	r3, [pc, #168]	; (8015094 <sys_timeout_abs+0xcc>)
 8014fea:	22be      	movs	r2, #190	; 0xbe
 8014fec:	492a      	ldr	r1, [pc, #168]	; (8015098 <sys_timeout_abs+0xd0>)
 8014fee:	482b      	ldr	r0, [pc, #172]	; (801509c <sys_timeout_abs+0xd4>)
 8014ff0:	f008 fb6e 	bl	801d6d0 <iprintf>
    return;
 8014ff4:	e04a      	b.n	801508c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014ff6:	693b      	ldr	r3, [r7, #16]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	68ba      	ldr	r2, [r7, #8]
 8015000:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	68fa      	ldr	r2, [r7, #12]
 801500c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801500e:	4b24      	ldr	r3, [pc, #144]	; (80150a0 <sys_timeout_abs+0xd8>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d103      	bne.n	801501e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015016:	4a22      	ldr	r2, [pc, #136]	; (80150a0 <sys_timeout_abs+0xd8>)
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	6013      	str	r3, [r2, #0]
    return;
 801501c:	e037      	b.n	801508e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	685a      	ldr	r2, [r3, #4]
 8015022:	4b1f      	ldr	r3, [pc, #124]	; (80150a0 <sys_timeout_abs+0xd8>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	1ad3      	subs	r3, r2, r3
 801502a:	0fdb      	lsrs	r3, r3, #31
 801502c:	f003 0301 	and.w	r3, r3, #1
 8015030:	b2db      	uxtb	r3, r3
 8015032:	2b00      	cmp	r3, #0
 8015034:	d007      	beq.n	8015046 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015036:	4b1a      	ldr	r3, [pc, #104]	; (80150a0 <sys_timeout_abs+0xd8>)
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801503e:	4a18      	ldr	r2, [pc, #96]	; (80150a0 <sys_timeout_abs+0xd8>)
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	6013      	str	r3, [r2, #0]
 8015044:	e023      	b.n	801508e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015046:	4b16      	ldr	r3, [pc, #88]	; (80150a0 <sys_timeout_abs+0xd8>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	617b      	str	r3, [r7, #20]
 801504c:	e01a      	b.n	8015084 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00b      	beq.n	801506e <sys_timeout_abs+0xa6>
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	685a      	ldr	r2, [r3, #4]
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	1ad3      	subs	r3, r2, r3
 8015062:	0fdb      	lsrs	r3, r3, #31
 8015064:	f003 0301 	and.w	r3, r3, #1
 8015068:	b2db      	uxtb	r3, r3
 801506a:	2b00      	cmp	r3, #0
 801506c:	d007      	beq.n	801507e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	693a      	ldr	r2, [r7, #16]
 801507a:	601a      	str	r2, [r3, #0]
        break;
 801507c:	e007      	b.n	801508e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	617b      	str	r3, [r7, #20]
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d1e1      	bne.n	801504e <sys_timeout_abs+0x86>
 801508a:	e000      	b.n	801508e <sys_timeout_abs+0xc6>
    return;
 801508c:	bf00      	nop
      }
    }
  }
}
 801508e:	3718      	adds	r7, #24
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}
 8015094:	08021308 	.word	0x08021308
 8015098:	0802133c 	.word	0x0802133c
 801509c:	0802137c 	.word	0x0802137c
 80150a0:	2001140c 	.word	0x2001140c

080150a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b086      	sub	sp, #24
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	685b      	ldr	r3, [r3, #4]
 80150b4:	4798      	blx	r3

  now = sys_now();
 80150b6:	f7f2 fc9d 	bl	80079f4 <sys_now>
 80150ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	681a      	ldr	r2, [r3, #0]
 80150c0:	4b0f      	ldr	r3, [pc, #60]	; (8015100 <lwip_cyclic_timer+0x5c>)
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4413      	add	r3, r2
 80150c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80150c8:	68fa      	ldr	r2, [r7, #12]
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	1ad3      	subs	r3, r2, r3
 80150ce:	0fdb      	lsrs	r3, r3, #31
 80150d0:	f003 0301 	and.w	r3, r3, #1
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d009      	beq.n	80150ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	4413      	add	r3, r2
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	4907      	ldr	r1, [pc, #28]	; (8015104 <lwip_cyclic_timer+0x60>)
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7ff ff6e 	bl	8014fc8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80150ec:	e004      	b.n	80150f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80150ee:	687a      	ldr	r2, [r7, #4]
 80150f0:	4904      	ldr	r1, [pc, #16]	; (8015104 <lwip_cyclic_timer+0x60>)
 80150f2:	68f8      	ldr	r0, [r7, #12]
 80150f4:	f7ff ff68 	bl	8014fc8 <sys_timeout_abs>
}
 80150f8:	bf00      	nop
 80150fa:	3718      	adds	r7, #24
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	20011410 	.word	0x20011410
 8015104:	080150a5 	.word	0x080150a5

08015108 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801510e:	2301      	movs	r3, #1
 8015110:	607b      	str	r3, [r7, #4]
 8015112:	e00e      	b.n	8015132 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015114:	4a0b      	ldr	r2, [pc, #44]	; (8015144 <sys_timeouts_init+0x3c>)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	4a08      	ldr	r2, [pc, #32]	; (8015144 <sys_timeouts_init+0x3c>)
 8015122:	4413      	add	r3, r2
 8015124:	461a      	mov	r2, r3
 8015126:	4908      	ldr	r1, [pc, #32]	; (8015148 <sys_timeouts_init+0x40>)
 8015128:	f000 f810 	bl	801514c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	3301      	adds	r3, #1
 8015130:	607b      	str	r3, [r7, #4]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2b02      	cmp	r3, #2
 8015136:	d9ed      	bls.n	8015114 <sys_timeouts_init+0xc>
  }
}
 8015138:	bf00      	nop
 801513a:	bf00      	nop
 801513c:	3708      	adds	r7, #8
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}
 8015142:	bf00      	nop
 8015144:	080222d4 	.word	0x080222d4
 8015148:	080150a5 	.word	0x080150a5

0801514c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b086      	sub	sp, #24
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801515e:	d306      	bcc.n	801516e <sys_timeout+0x22>
 8015160:	4b0a      	ldr	r3, [pc, #40]	; (801518c <sys_timeout+0x40>)
 8015162:	f240 1229 	movw	r2, #297	; 0x129
 8015166:	490a      	ldr	r1, [pc, #40]	; (8015190 <sys_timeout+0x44>)
 8015168:	480a      	ldr	r0, [pc, #40]	; (8015194 <sys_timeout+0x48>)
 801516a:	f008 fab1 	bl	801d6d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801516e:	f7f2 fc41 	bl	80079f4 <sys_now>
 8015172:	4602      	mov	r2, r0
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	4413      	add	r3, r2
 8015178:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801517a:	687a      	ldr	r2, [r7, #4]
 801517c:	68b9      	ldr	r1, [r7, #8]
 801517e:	6978      	ldr	r0, [r7, #20]
 8015180:	f7ff ff22 	bl	8014fc8 <sys_timeout_abs>
#endif
}
 8015184:	bf00      	nop
 8015186:	3718      	adds	r7, #24
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	08021308 	.word	0x08021308
 8015190:	080213a4 	.word	0x080213a4
 8015194:	0802137c 	.word	0x0802137c

08015198 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b084      	sub	sp, #16
 801519c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801519e:	f7f2 fc29 	bl	80079f4 <sys_now>
 80151a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80151a4:	4b17      	ldr	r3, [pc, #92]	; (8015204 <sys_check_timeouts+0x6c>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d022      	beq.n	80151f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	68fa      	ldr	r2, [r7, #12]
 80151b6:	1ad3      	subs	r3, r2, r3
 80151b8:	0fdb      	lsrs	r3, r3, #31
 80151ba:	f003 0301 	and.w	r3, r3, #1
 80151be:	b2db      	uxtb	r3, r3
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d11a      	bne.n	80151fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	4a0e      	ldr	r2, [pc, #56]	; (8015204 <sys_check_timeouts+0x6c>)
 80151ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	689b      	ldr	r3, [r3, #8]
 80151d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	4a0a      	ldr	r2, [pc, #40]	; (8015208 <sys_check_timeouts+0x70>)
 80151de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80151e0:	68b9      	ldr	r1, [r7, #8]
 80151e2:	200a      	movs	r0, #10
 80151e4:	f7f8 fd56 	bl	800dc94 <memp_free>
    if (handler != NULL) {
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d0da      	beq.n	80151a4 <sys_check_timeouts+0xc>
      handler(arg);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6838      	ldr	r0, [r7, #0]
 80151f2:	4798      	blx	r3
  do {
 80151f4:	e7d6      	b.n	80151a4 <sys_check_timeouts+0xc>
      return;
 80151f6:	bf00      	nop
 80151f8:	e000      	b.n	80151fc <sys_check_timeouts+0x64>
      return;
 80151fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80151fc:	3710      	adds	r7, #16
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}
 8015202:	bf00      	nop
 8015204:	2001140c 	.word	0x2001140c
 8015208:	20011410 	.word	0x20011410

0801520c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015212:	4b16      	ldr	r3, [pc, #88]	; (801526c <sys_timeouts_sleeptime+0x60>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d102      	bne.n	8015220 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801521a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801521e:	e020      	b.n	8015262 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015220:	f7f2 fbe8 	bl	80079f4 <sys_now>
 8015224:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015226:	4b11      	ldr	r3, [pc, #68]	; (801526c <sys_timeouts_sleeptime+0x60>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	685a      	ldr	r2, [r3, #4]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	1ad3      	subs	r3, r2, r3
 8015230:	0fdb      	lsrs	r3, r3, #31
 8015232:	f003 0301 	and.w	r3, r3, #1
 8015236:	b2db      	uxtb	r3, r3
 8015238:	2b00      	cmp	r3, #0
 801523a:	d001      	beq.n	8015240 <sys_timeouts_sleeptime+0x34>
    return 0;
 801523c:	2300      	movs	r3, #0
 801523e:	e010      	b.n	8015262 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015240:	4b0a      	ldr	r3, [pc, #40]	; (801526c <sys_timeouts_sleeptime+0x60>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	685a      	ldr	r2, [r3, #4]
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	1ad3      	subs	r3, r2, r3
 801524a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	2b00      	cmp	r3, #0
 8015250:	da06      	bge.n	8015260 <sys_timeouts_sleeptime+0x54>
 8015252:	4b07      	ldr	r3, [pc, #28]	; (8015270 <sys_timeouts_sleeptime+0x64>)
 8015254:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015258:	4906      	ldr	r1, [pc, #24]	; (8015274 <sys_timeouts_sleeptime+0x68>)
 801525a:	4807      	ldr	r0, [pc, #28]	; (8015278 <sys_timeouts_sleeptime+0x6c>)
 801525c:	f008 fa38 	bl	801d6d0 <iprintf>
    return ret;
 8015260:	683b      	ldr	r3, [r7, #0]
  }
}
 8015262:	4618      	mov	r0, r3
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	2001140c 	.word	0x2001140c
 8015270:	08021308 	.word	0x08021308
 8015274:	080213dc 	.word	0x080213dc
 8015278:	0802137c 	.word	0x0802137c

0801527c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015280:	f008 fab4 	bl	801d7ec <rand>
 8015284:	4603      	mov	r3, r0
 8015286:	b29b      	uxth	r3, r3
 8015288:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801528c:	b29b      	uxth	r3, r3
 801528e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015292:	b29a      	uxth	r2, r3
 8015294:	4b01      	ldr	r3, [pc, #4]	; (801529c <udp_init+0x20>)
 8015296:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015298:	bf00      	nop
 801529a:	bd80      	pop	{r7, pc}
 801529c:	2000002c 	.word	0x2000002c

080152a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80152a0:	b480      	push	{r7}
 80152a2:	b083      	sub	sp, #12
 80152a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80152a6:	2300      	movs	r3, #0
 80152a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80152aa:	4b17      	ldr	r3, [pc, #92]	; (8015308 <udp_new_port+0x68>)
 80152ac:	881b      	ldrh	r3, [r3, #0]
 80152ae:	1c5a      	adds	r2, r3, #1
 80152b0:	b291      	uxth	r1, r2
 80152b2:	4a15      	ldr	r2, [pc, #84]	; (8015308 <udp_new_port+0x68>)
 80152b4:	8011      	strh	r1, [r2, #0]
 80152b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152ba:	4293      	cmp	r3, r2
 80152bc:	d103      	bne.n	80152c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80152be:	4b12      	ldr	r3, [pc, #72]	; (8015308 <udp_new_port+0x68>)
 80152c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80152c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80152c6:	4b11      	ldr	r3, [pc, #68]	; (801530c <udp_new_port+0x6c>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	603b      	str	r3, [r7, #0]
 80152cc:	e011      	b.n	80152f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	8a5a      	ldrh	r2, [r3, #18]
 80152d2:	4b0d      	ldr	r3, [pc, #52]	; (8015308 <udp_new_port+0x68>)
 80152d4:	881b      	ldrh	r3, [r3, #0]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d108      	bne.n	80152ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80152da:	88fb      	ldrh	r3, [r7, #6]
 80152dc:	3301      	adds	r3, #1
 80152de:	80fb      	strh	r3, [r7, #6]
 80152e0:	88fb      	ldrh	r3, [r7, #6]
 80152e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80152e6:	d3e0      	bcc.n	80152aa <udp_new_port+0xa>
        return 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	e007      	b.n	80152fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	68db      	ldr	r3, [r3, #12]
 80152f0:	603b      	str	r3, [r7, #0]
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d1ea      	bne.n	80152ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80152f8:	4b03      	ldr	r3, [pc, #12]	; (8015308 <udp_new_port+0x68>)
 80152fa:	881b      	ldrh	r3, [r3, #0]
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	370c      	adds	r7, #12
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr
 8015308:	2000002c 	.word	0x2000002c
 801530c:	20011418 	.word	0x20011418

08015310 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b084      	sub	sp, #16
 8015314:	af00      	add	r7, sp, #0
 8015316:	60f8      	str	r0, [r7, #12]
 8015318:	60b9      	str	r1, [r7, #8]
 801531a:	4613      	mov	r3, r2
 801531c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d105      	bne.n	8015330 <udp_input_local_match+0x20>
 8015324:	4b27      	ldr	r3, [pc, #156]	; (80153c4 <udp_input_local_match+0xb4>)
 8015326:	2287      	movs	r2, #135	; 0x87
 8015328:	4927      	ldr	r1, [pc, #156]	; (80153c8 <udp_input_local_match+0xb8>)
 801532a:	4828      	ldr	r0, [pc, #160]	; (80153cc <udp_input_local_match+0xbc>)
 801532c:	f008 f9d0 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d105      	bne.n	8015342 <udp_input_local_match+0x32>
 8015336:	4b23      	ldr	r3, [pc, #140]	; (80153c4 <udp_input_local_match+0xb4>)
 8015338:	2288      	movs	r2, #136	; 0x88
 801533a:	4925      	ldr	r1, [pc, #148]	; (80153d0 <udp_input_local_match+0xc0>)
 801533c:	4823      	ldr	r0, [pc, #140]	; (80153cc <udp_input_local_match+0xbc>)
 801533e:	f008 f9c7 	bl	801d6d0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	7a1b      	ldrb	r3, [r3, #8]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d00b      	beq.n	8015362 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	7a1a      	ldrb	r2, [r3, #8]
 801534e:	4b21      	ldr	r3, [pc, #132]	; (80153d4 <udp_input_local_match+0xc4>)
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015356:	3301      	adds	r3, #1
 8015358:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801535a:	429a      	cmp	r2, r3
 801535c:	d001      	beq.n	8015362 <udp_input_local_match+0x52>
    return 0;
 801535e:	2300      	movs	r3, #0
 8015360:	e02b      	b.n	80153ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015362:	79fb      	ldrb	r3, [r7, #7]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d018      	beq.n	801539a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d013      	beq.n	8015396 <udp_input_local_match+0x86>
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00f      	beq.n	8015396 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015376:	4b17      	ldr	r3, [pc, #92]	; (80153d4 <udp_input_local_match+0xc4>)
 8015378:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801537a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801537e:	d00a      	beq.n	8015396 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	4b13      	ldr	r3, [pc, #76]	; (80153d4 <udp_input_local_match+0xc4>)
 8015386:	695b      	ldr	r3, [r3, #20]
 8015388:	405a      	eors	r2, r3
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	3308      	adds	r3, #8
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015392:	2b00      	cmp	r3, #0
 8015394:	d110      	bne.n	80153b8 <udp_input_local_match+0xa8>
          return 1;
 8015396:	2301      	movs	r3, #1
 8015398:	e00f      	b.n	80153ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d009      	beq.n	80153b4 <udp_input_local_match+0xa4>
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d005      	beq.n	80153b4 <udp_input_local_match+0xa4>
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	4b09      	ldr	r3, [pc, #36]	; (80153d4 <udp_input_local_match+0xc4>)
 80153ae:	695b      	ldr	r3, [r3, #20]
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d101      	bne.n	80153b8 <udp_input_local_match+0xa8>
        return 1;
 80153b4:	2301      	movs	r3, #1
 80153b6:	e000      	b.n	80153ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80153b8:	2300      	movs	r3, #0
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3710      	adds	r7, #16
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	bf00      	nop
 80153c4:	080213f0 	.word	0x080213f0
 80153c8:	08021420 	.word	0x08021420
 80153cc:	08021444 	.word	0x08021444
 80153d0:	0802146c 	.word	0x0802146c
 80153d4:	2000a2c0 	.word	0x2000a2c0

080153d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80153d8:	b590      	push	{r4, r7, lr}
 80153da:	b08d      	sub	sp, #52	; 0x34
 80153dc:	af02      	add	r7, sp, #8
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d105      	bne.n	80153f8 <udp_input+0x20>
 80153ec:	4b7c      	ldr	r3, [pc, #496]	; (80155e0 <udp_input+0x208>)
 80153ee:	22cf      	movs	r2, #207	; 0xcf
 80153f0:	497c      	ldr	r1, [pc, #496]	; (80155e4 <udp_input+0x20c>)
 80153f2:	487d      	ldr	r0, [pc, #500]	; (80155e8 <udp_input+0x210>)
 80153f4:	f008 f96c 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d105      	bne.n	801540a <udp_input+0x32>
 80153fe:	4b78      	ldr	r3, [pc, #480]	; (80155e0 <udp_input+0x208>)
 8015400:	22d0      	movs	r2, #208	; 0xd0
 8015402:	497a      	ldr	r1, [pc, #488]	; (80155ec <udp_input+0x214>)
 8015404:	4878      	ldr	r0, [pc, #480]	; (80155e8 <udp_input+0x210>)
 8015406:	f008 f963 	bl	801d6d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	895b      	ldrh	r3, [r3, #10]
 801540e:	2b07      	cmp	r3, #7
 8015410:	d803      	bhi.n	801541a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f7f9 fae2 	bl	800e9dc <pbuf_free>
    goto end;
 8015418:	e0de      	b.n	80155d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015420:	4b73      	ldr	r3, [pc, #460]	; (80155f0 <udp_input+0x218>)
 8015422:	695b      	ldr	r3, [r3, #20]
 8015424:	4a72      	ldr	r2, [pc, #456]	; (80155f0 <udp_input+0x218>)
 8015426:	6812      	ldr	r2, [r2, #0]
 8015428:	4611      	mov	r1, r2
 801542a:	4618      	mov	r0, r3
 801542c:	f001 fe04 	bl	8017038 <ip4_addr_isbroadcast_u32>
 8015430:	4603      	mov	r3, r0
 8015432:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	881b      	ldrh	r3, [r3, #0]
 8015438:	b29b      	uxth	r3, r3
 801543a:	4618      	mov	r0, r3
 801543c:	f7f7 fecc 	bl	800d1d8 <lwip_htons>
 8015440:	4603      	mov	r3, r0
 8015442:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	885b      	ldrh	r3, [r3, #2]
 8015448:	b29b      	uxth	r3, r3
 801544a:	4618      	mov	r0, r3
 801544c:	f7f7 fec4 	bl	800d1d8 <lwip_htons>
 8015450:	4603      	mov	r3, r0
 8015452:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015454:	2300      	movs	r3, #0
 8015456:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015458:	2300      	movs	r3, #0
 801545a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801545c:	2300      	movs	r3, #0
 801545e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015460:	4b64      	ldr	r3, [pc, #400]	; (80155f4 <udp_input+0x21c>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	627b      	str	r3, [r7, #36]	; 0x24
 8015466:	e054      	b.n	8015512 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546a:	8a5b      	ldrh	r3, [r3, #18]
 801546c:	89fa      	ldrh	r2, [r7, #14]
 801546e:	429a      	cmp	r2, r3
 8015470:	d14a      	bne.n	8015508 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015472:	7cfb      	ldrb	r3, [r7, #19]
 8015474:	461a      	mov	r2, r3
 8015476:	6839      	ldr	r1, [r7, #0]
 8015478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801547a:	f7ff ff49 	bl	8015310 <udp_input_local_match>
 801547e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015480:	2b00      	cmp	r3, #0
 8015482:	d041      	beq.n	8015508 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015486:	7c1b      	ldrb	r3, [r3, #16]
 8015488:	f003 0304 	and.w	r3, r3, #4
 801548c:	2b00      	cmp	r3, #0
 801548e:	d11d      	bne.n	80154cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d102      	bne.n	801549c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015498:	61fb      	str	r3, [r7, #28]
 801549a:	e017      	b.n	80154cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801549c:	7cfb      	ldrb	r3, [r7, #19]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d014      	beq.n	80154cc <udp_input+0xf4>
 80154a2:	4b53      	ldr	r3, [pc, #332]	; (80155f0 <udp_input+0x218>)
 80154a4:	695b      	ldr	r3, [r3, #20]
 80154a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154aa:	d10f      	bne.n	80154cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	681a      	ldr	r2, [r3, #0]
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	3304      	adds	r3, #4
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d008      	beq.n	80154cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80154ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	3304      	adds	r3, #4
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d101      	bne.n	80154cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80154c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80154cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ce:	8a9b      	ldrh	r3, [r3, #20]
 80154d0:	8a3a      	ldrh	r2, [r7, #16]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d118      	bne.n	8015508 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80154d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d005      	beq.n	80154ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80154de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e0:	685a      	ldr	r2, [r3, #4]
 80154e2:	4b43      	ldr	r3, [pc, #268]	; (80155f0 <udp_input+0x218>)
 80154e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d10e      	bne.n	8015508 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80154ea:	6a3b      	ldr	r3, [r7, #32]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d014      	beq.n	801551a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80154f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f2:	68da      	ldr	r2, [r3, #12]
 80154f4:	6a3b      	ldr	r3, [r7, #32]
 80154f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80154f8:	4b3e      	ldr	r3, [pc, #248]	; (80155f4 <udp_input+0x21c>)
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015500:	4a3c      	ldr	r2, [pc, #240]	; (80155f4 <udp_input+0x21c>)
 8015502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015504:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015506:	e008      	b.n	801551a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	627b      	str	r3, [r7, #36]	; 0x24
 8015512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015514:	2b00      	cmp	r3, #0
 8015516:	d1a7      	bne.n	8015468 <udp_input+0x90>
 8015518:	e000      	b.n	801551c <udp_input+0x144>
        break;
 801551a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551e:	2b00      	cmp	r3, #0
 8015520:	d101      	bne.n	8015526 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015528:	2b00      	cmp	r3, #0
 801552a:	d002      	beq.n	8015532 <udp_input+0x15a>
    for_us = 1;
 801552c:	2301      	movs	r3, #1
 801552e:	76fb      	strb	r3, [r7, #27]
 8015530:	e00a      	b.n	8015548 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	3304      	adds	r3, #4
 8015536:	681a      	ldr	r2, [r3, #0]
 8015538:	4b2d      	ldr	r3, [pc, #180]	; (80155f0 <udp_input+0x218>)
 801553a:	695b      	ldr	r3, [r3, #20]
 801553c:	429a      	cmp	r2, r3
 801553e:	bf0c      	ite	eq
 8015540:	2301      	moveq	r3, #1
 8015542:	2300      	movne	r3, #0
 8015544:	b2db      	uxtb	r3, r3
 8015546:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015548:	7efb      	ldrb	r3, [r7, #27]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d041      	beq.n	80155d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801554e:	2108      	movs	r1, #8
 8015550:	6878      	ldr	r0, [r7, #4]
 8015552:	f7f9 f9bd 	bl	800e8d0 <pbuf_remove_header>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d00a      	beq.n	8015572 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801555c:	4b20      	ldr	r3, [pc, #128]	; (80155e0 <udp_input+0x208>)
 801555e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015562:	4925      	ldr	r1, [pc, #148]	; (80155f8 <udp_input+0x220>)
 8015564:	4820      	ldr	r0, [pc, #128]	; (80155e8 <udp_input+0x210>)
 8015566:	f008 f8b3 	bl	801d6d0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f7f9 fa36 	bl	800e9dc <pbuf_free>
      goto end;
 8015570:	e032      	b.n	80155d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015574:	2b00      	cmp	r3, #0
 8015576:	d012      	beq.n	801559e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557a:	699b      	ldr	r3, [r3, #24]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d00a      	beq.n	8015596 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015582:	699c      	ldr	r4, [r3, #24]
 8015584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015586:	69d8      	ldr	r0, [r3, #28]
 8015588:	8a3b      	ldrh	r3, [r7, #16]
 801558a:	9300      	str	r3, [sp, #0]
 801558c:	4b1b      	ldr	r3, [pc, #108]	; (80155fc <udp_input+0x224>)
 801558e:	687a      	ldr	r2, [r7, #4]
 8015590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015592:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015594:	e021      	b.n	80155da <udp_input+0x202>
        pbuf_free(p);
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f7f9 fa20 	bl	800e9dc <pbuf_free>
        goto end;
 801559c:	e01c      	b.n	80155d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801559e:	7cfb      	ldrb	r3, [r7, #19]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d112      	bne.n	80155ca <udp_input+0x1f2>
 80155a4:	4b12      	ldr	r3, [pc, #72]	; (80155f0 <udp_input+0x218>)
 80155a6:	695b      	ldr	r3, [r3, #20]
 80155a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80155ac:	2be0      	cmp	r3, #224	; 0xe0
 80155ae:	d00c      	beq.n	80155ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80155b0:	4b0f      	ldr	r3, [pc, #60]	; (80155f0 <udp_input+0x218>)
 80155b2:	899b      	ldrh	r3, [r3, #12]
 80155b4:	3308      	adds	r3, #8
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	b21b      	sxth	r3, r3
 80155ba:	4619      	mov	r1, r3
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f7f9 f9fa 	bl	800e9b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80155c2:	2103      	movs	r1, #3
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f001 fa17 	bl	80169f8 <icmp_dest_unreach>
      pbuf_free(p);
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	f7f9 fa06 	bl	800e9dc <pbuf_free>
  return;
 80155d0:	e003      	b.n	80155da <udp_input+0x202>
    pbuf_free(p);
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f7f9 fa02 	bl	800e9dc <pbuf_free>
  return;
 80155d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80155da:	372c      	adds	r7, #44	; 0x2c
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd90      	pop	{r4, r7, pc}
 80155e0:	080213f0 	.word	0x080213f0
 80155e4:	08021494 	.word	0x08021494
 80155e8:	08021444 	.word	0x08021444
 80155ec:	080214ac 	.word	0x080214ac
 80155f0:	2000a2c0 	.word	0x2000a2c0
 80155f4:	20011418 	.word	0x20011418
 80155f8:	080214c8 	.word	0x080214c8
 80155fc:	2000a2d0 	.word	0x2000a2d0

08015600 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b086      	sub	sp, #24
 8015604:	af00      	add	r7, sp, #0
 8015606:	60f8      	str	r0, [r7, #12]
 8015608:	60b9      	str	r1, [r7, #8]
 801560a:	4613      	mov	r3, r2
 801560c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d101      	bne.n	8015618 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015614:	4b39      	ldr	r3, [pc, #228]	; (80156fc <udp_bind+0xfc>)
 8015616:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d109      	bne.n	8015632 <udp_bind+0x32>
 801561e:	4b38      	ldr	r3, [pc, #224]	; (8015700 <udp_bind+0x100>)
 8015620:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015624:	4937      	ldr	r1, [pc, #220]	; (8015704 <udp_bind+0x104>)
 8015626:	4838      	ldr	r0, [pc, #224]	; (8015708 <udp_bind+0x108>)
 8015628:	f008 f852 	bl	801d6d0 <iprintf>
 801562c:	f06f 030f 	mvn.w	r3, #15
 8015630:	e060      	b.n	80156f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015632:	2300      	movs	r3, #0
 8015634:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015636:	4b35      	ldr	r3, [pc, #212]	; (801570c <udp_bind+0x10c>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	617b      	str	r3, [r7, #20]
 801563c:	e009      	b.n	8015652 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801563e:	68fa      	ldr	r2, [r7, #12]
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	429a      	cmp	r2, r3
 8015644:	d102      	bne.n	801564c <udp_bind+0x4c>
      rebind = 1;
 8015646:	2301      	movs	r3, #1
 8015648:	74fb      	strb	r3, [r7, #19]
      break;
 801564a:	e005      	b.n	8015658 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	68db      	ldr	r3, [r3, #12]
 8015650:	617b      	str	r3, [r7, #20]
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d1f2      	bne.n	801563e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015658:	88fb      	ldrh	r3, [r7, #6]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d109      	bne.n	8015672 <udp_bind+0x72>
    port = udp_new_port();
 801565e:	f7ff fe1f 	bl	80152a0 <udp_new_port>
 8015662:	4603      	mov	r3, r0
 8015664:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015666:	88fb      	ldrh	r3, [r7, #6]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d12c      	bne.n	80156c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801566c:	f06f 0307 	mvn.w	r3, #7
 8015670:	e040      	b.n	80156f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015672:	4b26      	ldr	r3, [pc, #152]	; (801570c <udp_bind+0x10c>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	617b      	str	r3, [r7, #20]
 8015678:	e022      	b.n	80156c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801567a:	68fa      	ldr	r2, [r7, #12]
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	429a      	cmp	r2, r3
 8015680:	d01b      	beq.n	80156ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	8a5b      	ldrh	r3, [r3, #18]
 8015686:	88fa      	ldrh	r2, [r7, #6]
 8015688:	429a      	cmp	r2, r3
 801568a:	d116      	bne.n	80156ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015694:	429a      	cmp	r2, r3
 8015696:	d00d      	beq.n	80156b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d00a      	beq.n	80156b4 <udp_bind+0xb4>
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d006      	beq.n	80156b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80156a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d003      	beq.n	80156b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80156ac:	697b      	ldr	r3, [r7, #20]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d102      	bne.n	80156ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80156b4:	f06f 0307 	mvn.w	r3, #7
 80156b8:	e01c      	b.n	80156f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	617b      	str	r3, [r7, #20]
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d1d9      	bne.n	801567a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d002      	beq.n	80156d2 <udp_bind+0xd2>
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	e000      	b.n	80156d4 <udp_bind+0xd4>
 80156d2:	2300      	movs	r3, #0
 80156d4:	68fa      	ldr	r2, [r7, #12]
 80156d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	88fa      	ldrh	r2, [r7, #6]
 80156dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80156de:	7cfb      	ldrb	r3, [r7, #19]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d106      	bne.n	80156f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80156e4:	4b09      	ldr	r3, [pc, #36]	; (801570c <udp_bind+0x10c>)
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80156ec:	4a07      	ldr	r2, [pc, #28]	; (801570c <udp_bind+0x10c>)
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80156f2:	2300      	movs	r3, #0
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3718      	adds	r7, #24
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}
 80156fc:	080222ec 	.word	0x080222ec
 8015700:	080213f0 	.word	0x080213f0
 8015704:	080216b8 	.word	0x080216b8
 8015708:	08021444 	.word	0x08021444
 801570c:	20011418 	.word	0x20011418

08015710 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b086      	sub	sp, #24
 8015714:	af00      	add	r7, sp, #0
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	4613      	mov	r3, r2
 801571c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d109      	bne.n	8015738 <udp_connect+0x28>
 8015724:	4b2c      	ldr	r3, [pc, #176]	; (80157d8 <udp_connect+0xc8>)
 8015726:	f240 4235 	movw	r2, #1077	; 0x435
 801572a:	492c      	ldr	r1, [pc, #176]	; (80157dc <udp_connect+0xcc>)
 801572c:	482c      	ldr	r0, [pc, #176]	; (80157e0 <udp_connect+0xd0>)
 801572e:	f007 ffcf 	bl	801d6d0 <iprintf>
 8015732:	f06f 030f 	mvn.w	r3, #15
 8015736:	e04b      	b.n	80157d0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d109      	bne.n	8015752 <udp_connect+0x42>
 801573e:	4b26      	ldr	r3, [pc, #152]	; (80157d8 <udp_connect+0xc8>)
 8015740:	f240 4236 	movw	r2, #1078	; 0x436
 8015744:	4927      	ldr	r1, [pc, #156]	; (80157e4 <udp_connect+0xd4>)
 8015746:	4826      	ldr	r0, [pc, #152]	; (80157e0 <udp_connect+0xd0>)
 8015748:	f007 ffc2 	bl	801d6d0 <iprintf>
 801574c:	f06f 030f 	mvn.w	r3, #15
 8015750:	e03e      	b.n	80157d0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	8a5b      	ldrh	r3, [r3, #18]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d10f      	bne.n	801577a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801575a:	68f9      	ldr	r1, [r7, #12]
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	8a5b      	ldrh	r3, [r3, #18]
 8015760:	461a      	mov	r2, r3
 8015762:	68f8      	ldr	r0, [r7, #12]
 8015764:	f7ff ff4c 	bl	8015600 <udp_bind>
 8015768:	4603      	mov	r3, r0
 801576a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801576c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d002      	beq.n	801577a <udp_connect+0x6a>
      return err;
 8015774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015778:	e02a      	b.n	80157d0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d002      	beq.n	8015786 <udp_connect+0x76>
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	e000      	b.n	8015788 <udp_connect+0x78>
 8015786:	2300      	movs	r3, #0
 8015788:	68fa      	ldr	r2, [r7, #12]
 801578a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	88fa      	ldrh	r2, [r7, #6]
 8015790:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	7c1b      	ldrb	r3, [r3, #16]
 8015796:	f043 0304 	orr.w	r3, r3, #4
 801579a:	b2da      	uxtb	r2, r3
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157a0:	4b11      	ldr	r3, [pc, #68]	; (80157e8 <udp_connect+0xd8>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	617b      	str	r3, [r7, #20]
 80157a6:	e008      	b.n	80157ba <udp_connect+0xaa>
    if (pcb == ipcb) {
 80157a8:	68fa      	ldr	r2, [r7, #12]
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d101      	bne.n	80157b4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80157b0:	2300      	movs	r3, #0
 80157b2:	e00d      	b.n	80157d0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	617b      	str	r3, [r7, #20]
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d1f3      	bne.n	80157a8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80157c0:	4b09      	ldr	r3, [pc, #36]	; (80157e8 <udp_connect+0xd8>)
 80157c2:	681a      	ldr	r2, [r3, #0]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80157c8:	4a07      	ldr	r2, [pc, #28]	; (80157e8 <udp_connect+0xd8>)
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80157ce:	2300      	movs	r3, #0
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3718      	adds	r7, #24
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}
 80157d8:	080213f0 	.word	0x080213f0
 80157dc:	080216d0 	.word	0x080216d0
 80157e0:	08021444 	.word	0x08021444
 80157e4:	080216ec 	.word	0x080216ec
 80157e8:	20011418 	.word	0x20011418

080157ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d107      	bne.n	801580e <udp_recv+0x22>
 80157fe:	4b08      	ldr	r3, [pc, #32]	; (8015820 <udp_recv+0x34>)
 8015800:	f240 428a 	movw	r2, #1162	; 0x48a
 8015804:	4907      	ldr	r1, [pc, #28]	; (8015824 <udp_recv+0x38>)
 8015806:	4808      	ldr	r0, [pc, #32]	; (8015828 <udp_recv+0x3c>)
 8015808:	f007 ff62 	bl	801d6d0 <iprintf>
 801580c:	e005      	b.n	801581a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	68ba      	ldr	r2, [r7, #8]
 8015812:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	61da      	str	r2, [r3, #28]
}
 801581a:	3710      	adds	r7, #16
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	080213f0 	.word	0x080213f0
 8015824:	08021724 	.word	0x08021724
 8015828:	08021444 	.word	0x08021444

0801582c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d107      	bne.n	801584a <udp_remove+0x1e>
 801583a:	4b19      	ldr	r3, [pc, #100]	; (80158a0 <udp_remove+0x74>)
 801583c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015840:	4918      	ldr	r1, [pc, #96]	; (80158a4 <udp_remove+0x78>)
 8015842:	4819      	ldr	r0, [pc, #100]	; (80158a8 <udp_remove+0x7c>)
 8015844:	f007 ff44 	bl	801d6d0 <iprintf>
 8015848:	e026      	b.n	8015898 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801584a:	4b18      	ldr	r3, [pc, #96]	; (80158ac <udp_remove+0x80>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	429a      	cmp	r2, r3
 8015852:	d105      	bne.n	8015860 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015854:	4b15      	ldr	r3, [pc, #84]	; (80158ac <udp_remove+0x80>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	68db      	ldr	r3, [r3, #12]
 801585a:	4a14      	ldr	r2, [pc, #80]	; (80158ac <udp_remove+0x80>)
 801585c:	6013      	str	r3, [r2, #0]
 801585e:	e017      	b.n	8015890 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015860:	4b12      	ldr	r3, [pc, #72]	; (80158ac <udp_remove+0x80>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	60fb      	str	r3, [r7, #12]
 8015866:	e010      	b.n	801588a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d009      	beq.n	8015884 <udp_remove+0x58>
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	687a      	ldr	r2, [r7, #4]
 8015876:	429a      	cmp	r2, r3
 8015878:	d104      	bne.n	8015884 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	68da      	ldr	r2, [r3, #12]
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	60da      	str	r2, [r3, #12]
        break;
 8015882:	e005      	b.n	8015890 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	68db      	ldr	r3, [r3, #12]
 8015888:	60fb      	str	r3, [r7, #12]
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d1eb      	bne.n	8015868 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015890:	6879      	ldr	r1, [r7, #4]
 8015892:	2000      	movs	r0, #0
 8015894:	f7f8 f9fe 	bl	800dc94 <memp_free>
}
 8015898:	3710      	adds	r7, #16
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	080213f0 	.word	0x080213f0
 80158a4:	0802173c 	.word	0x0802173c
 80158a8:	08021444 	.word	0x08021444
 80158ac:	20011418 	.word	0x20011418

080158b0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80158b6:	2000      	movs	r0, #0
 80158b8:	f7f8 f976 	bl	800dba8 <memp_malloc>
 80158bc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d007      	beq.n	80158d4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80158c4:	2220      	movs	r2, #32
 80158c6:	2100      	movs	r1, #0
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f007 fef9 	bl	801d6c0 <memset>
    pcb->ttl = UDP_TTL;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	22ff      	movs	r2, #255	; 0xff
 80158d2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80158d4:	687b      	ldr	r3, [r7, #4]
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	3708      	adds	r7, #8
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}

080158de <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b084      	sub	sp, #16
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	4603      	mov	r3, r0
 80158e6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80158e8:	f7ff ffe2 	bl	80158b0 <udp_new>
 80158ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80158ee:	68fb      	ldr	r3, [r7, #12]
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3710      	adds	r7, #16
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}

080158f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80158f8:	b480      	push	{r7}
 80158fa:	b085      	sub	sp, #20
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d01e      	beq.n	8015946 <udp_netif_ip_addr_changed+0x4e>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d01a      	beq.n	8015946 <udp_netif_ip_addr_changed+0x4e>
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d017      	beq.n	8015946 <udp_netif_ip_addr_changed+0x4e>
 8015916:	683b      	ldr	r3, [r7, #0]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d013      	beq.n	8015946 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801591e:	4b0d      	ldr	r3, [pc, #52]	; (8015954 <udp_netif_ip_addr_changed+0x5c>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	60fb      	str	r3, [r7, #12]
 8015924:	e00c      	b.n	8015940 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	429a      	cmp	r2, r3
 8015930:	d103      	bne.n	801593a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	60fb      	str	r3, [r7, #12]
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d1ef      	bne.n	8015926 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015946:	bf00      	nop
 8015948:	3714      	adds	r7, #20
 801594a:	46bd      	mov	sp, r7
 801594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015950:	4770      	bx	lr
 8015952:	bf00      	nop
 8015954:	20011418 	.word	0x20011418

08015958 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015960:	4915      	ldr	r1, [pc, #84]	; (80159b8 <etharp_free_entry+0x60>)
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	4613      	mov	r3, r2
 8015966:	005b      	lsls	r3, r3, #1
 8015968:	4413      	add	r3, r2
 801596a:	00db      	lsls	r3, r3, #3
 801596c:	440b      	add	r3, r1
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d013      	beq.n	801599c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015974:	4910      	ldr	r1, [pc, #64]	; (80159b8 <etharp_free_entry+0x60>)
 8015976:	687a      	ldr	r2, [r7, #4]
 8015978:	4613      	mov	r3, r2
 801597a:	005b      	lsls	r3, r3, #1
 801597c:	4413      	add	r3, r2
 801597e:	00db      	lsls	r3, r3, #3
 8015980:	440b      	add	r3, r1
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	4618      	mov	r0, r3
 8015986:	f7f9 f829 	bl	800e9dc <pbuf_free>
    arp_table[i].q = NULL;
 801598a:	490b      	ldr	r1, [pc, #44]	; (80159b8 <etharp_free_entry+0x60>)
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	4613      	mov	r3, r2
 8015990:	005b      	lsls	r3, r3, #1
 8015992:	4413      	add	r3, r2
 8015994:	00db      	lsls	r3, r3, #3
 8015996:	440b      	add	r3, r1
 8015998:	2200      	movs	r2, #0
 801599a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801599c:	4906      	ldr	r1, [pc, #24]	; (80159b8 <etharp_free_entry+0x60>)
 801599e:	687a      	ldr	r2, [r7, #4]
 80159a0:	4613      	mov	r3, r2
 80159a2:	005b      	lsls	r3, r3, #1
 80159a4:	4413      	add	r3, r2
 80159a6:	00db      	lsls	r3, r3, #3
 80159a8:	440b      	add	r3, r1
 80159aa:	3314      	adds	r3, #20
 80159ac:	2200      	movs	r2, #0
 80159ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80159b0:	bf00      	nop
 80159b2:	3708      	adds	r7, #8
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	2001141c 	.word	0x2001141c

080159bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159c2:	2300      	movs	r3, #0
 80159c4:	607b      	str	r3, [r7, #4]
 80159c6:	e096      	b.n	8015af6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80159c8:	494f      	ldr	r1, [pc, #316]	; (8015b08 <etharp_tmr+0x14c>)
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	4613      	mov	r3, r2
 80159ce:	005b      	lsls	r3, r3, #1
 80159d0:	4413      	add	r3, r2
 80159d2:	00db      	lsls	r3, r3, #3
 80159d4:	440b      	add	r3, r1
 80159d6:	3314      	adds	r3, #20
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80159dc:	78fb      	ldrb	r3, [r7, #3]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f000 8086 	beq.w	8015af0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80159e4:	4948      	ldr	r1, [pc, #288]	; (8015b08 <etharp_tmr+0x14c>)
 80159e6:	687a      	ldr	r2, [r7, #4]
 80159e8:	4613      	mov	r3, r2
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	4413      	add	r3, r2
 80159ee:	00db      	lsls	r3, r3, #3
 80159f0:	440b      	add	r3, r1
 80159f2:	3312      	adds	r3, #18
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	3301      	adds	r3, #1
 80159f8:	b298      	uxth	r0, r3
 80159fa:	4943      	ldr	r1, [pc, #268]	; (8015b08 <etharp_tmr+0x14c>)
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	4613      	mov	r3, r2
 8015a00:	005b      	lsls	r3, r3, #1
 8015a02:	4413      	add	r3, r2
 8015a04:	00db      	lsls	r3, r3, #3
 8015a06:	440b      	add	r3, r1
 8015a08:	3312      	adds	r3, #18
 8015a0a:	4602      	mov	r2, r0
 8015a0c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a0e:	493e      	ldr	r1, [pc, #248]	; (8015b08 <etharp_tmr+0x14c>)
 8015a10:	687a      	ldr	r2, [r7, #4]
 8015a12:	4613      	mov	r3, r2
 8015a14:	005b      	lsls	r3, r3, #1
 8015a16:	4413      	add	r3, r2
 8015a18:	00db      	lsls	r3, r3, #3
 8015a1a:	440b      	add	r3, r1
 8015a1c:	3312      	adds	r3, #18
 8015a1e:	881b      	ldrh	r3, [r3, #0]
 8015a20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015a24:	d215      	bcs.n	8015a52 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a26:	4938      	ldr	r1, [pc, #224]	; (8015b08 <etharp_tmr+0x14c>)
 8015a28:	687a      	ldr	r2, [r7, #4]
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	005b      	lsls	r3, r3, #1
 8015a2e:	4413      	add	r3, r2
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	440b      	add	r3, r1
 8015a34:	3314      	adds	r3, #20
 8015a36:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a38:	2b01      	cmp	r3, #1
 8015a3a:	d10e      	bne.n	8015a5a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015a3c:	4932      	ldr	r1, [pc, #200]	; (8015b08 <etharp_tmr+0x14c>)
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	4613      	mov	r3, r2
 8015a42:	005b      	lsls	r3, r3, #1
 8015a44:	4413      	add	r3, r2
 8015a46:	00db      	lsls	r3, r3, #3
 8015a48:	440b      	add	r3, r1
 8015a4a:	3312      	adds	r3, #18
 8015a4c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a4e:	2b04      	cmp	r3, #4
 8015a50:	d903      	bls.n	8015a5a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f7ff ff80 	bl	8015958 <etharp_free_entry>
 8015a58:	e04a      	b.n	8015af0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015a5a:	492b      	ldr	r1, [pc, #172]	; (8015b08 <etharp_tmr+0x14c>)
 8015a5c:	687a      	ldr	r2, [r7, #4]
 8015a5e:	4613      	mov	r3, r2
 8015a60:	005b      	lsls	r3, r3, #1
 8015a62:	4413      	add	r3, r2
 8015a64:	00db      	lsls	r3, r3, #3
 8015a66:	440b      	add	r3, r1
 8015a68:	3314      	adds	r3, #20
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	2b03      	cmp	r3, #3
 8015a6e:	d10a      	bne.n	8015a86 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015a70:	4925      	ldr	r1, [pc, #148]	; (8015b08 <etharp_tmr+0x14c>)
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	4613      	mov	r3, r2
 8015a76:	005b      	lsls	r3, r3, #1
 8015a78:	4413      	add	r3, r2
 8015a7a:	00db      	lsls	r3, r3, #3
 8015a7c:	440b      	add	r3, r1
 8015a7e:	3314      	adds	r3, #20
 8015a80:	2204      	movs	r2, #4
 8015a82:	701a      	strb	r2, [r3, #0]
 8015a84:	e034      	b.n	8015af0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015a86:	4920      	ldr	r1, [pc, #128]	; (8015b08 <etharp_tmr+0x14c>)
 8015a88:	687a      	ldr	r2, [r7, #4]
 8015a8a:	4613      	mov	r3, r2
 8015a8c:	005b      	lsls	r3, r3, #1
 8015a8e:	4413      	add	r3, r2
 8015a90:	00db      	lsls	r3, r3, #3
 8015a92:	440b      	add	r3, r1
 8015a94:	3314      	adds	r3, #20
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2b04      	cmp	r3, #4
 8015a9a:	d10a      	bne.n	8015ab2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015a9c:	491a      	ldr	r1, [pc, #104]	; (8015b08 <etharp_tmr+0x14c>)
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	4613      	mov	r3, r2
 8015aa2:	005b      	lsls	r3, r3, #1
 8015aa4:	4413      	add	r3, r2
 8015aa6:	00db      	lsls	r3, r3, #3
 8015aa8:	440b      	add	r3, r1
 8015aaa:	3314      	adds	r3, #20
 8015aac:	2202      	movs	r2, #2
 8015aae:	701a      	strb	r2, [r3, #0]
 8015ab0:	e01e      	b.n	8015af0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015ab2:	4915      	ldr	r1, [pc, #84]	; (8015b08 <etharp_tmr+0x14c>)
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	4413      	add	r3, r2
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	440b      	add	r3, r1
 8015ac0:	3314      	adds	r3, #20
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d113      	bne.n	8015af0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015ac8:	490f      	ldr	r1, [pc, #60]	; (8015b08 <etharp_tmr+0x14c>)
 8015aca:	687a      	ldr	r2, [r7, #4]
 8015acc:	4613      	mov	r3, r2
 8015ace:	005b      	lsls	r3, r3, #1
 8015ad0:	4413      	add	r3, r2
 8015ad2:	00db      	lsls	r3, r3, #3
 8015ad4:	440b      	add	r3, r1
 8015ad6:	3308      	adds	r3, #8
 8015ad8:	6818      	ldr	r0, [r3, #0]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	4613      	mov	r3, r2
 8015ade:	005b      	lsls	r3, r3, #1
 8015ae0:	4413      	add	r3, r2
 8015ae2:	00db      	lsls	r3, r3, #3
 8015ae4:	4a08      	ldr	r2, [pc, #32]	; (8015b08 <etharp_tmr+0x14c>)
 8015ae6:	4413      	add	r3, r2
 8015ae8:	3304      	adds	r3, #4
 8015aea:	4619      	mov	r1, r3
 8015aec:	f000 fe6e 	bl	80167cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	3301      	adds	r3, #1
 8015af4:	607b      	str	r3, [r7, #4]
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2b09      	cmp	r3, #9
 8015afa:	f77f af65 	ble.w	80159c8 <etharp_tmr+0xc>
      }
    }
  }
}
 8015afe:	bf00      	nop
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	2001141c 	.word	0x2001141c

08015b0c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b08a      	sub	sp, #40	; 0x28
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	460b      	mov	r3, r1
 8015b16:	607a      	str	r2, [r7, #4]
 8015b18:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015b1a:	230a      	movs	r3, #10
 8015b1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015b1e:	230a      	movs	r3, #10
 8015b20:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015b22:	230a      	movs	r3, #10
 8015b24:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015b26:	2300      	movs	r3, #0
 8015b28:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015b2a:	230a      	movs	r3, #10
 8015b2c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	83bb      	strh	r3, [r7, #28]
 8015b32:	2300      	movs	r3, #0
 8015b34:	837b      	strh	r3, [r7, #26]
 8015b36:	2300      	movs	r3, #0
 8015b38:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	843b      	strh	r3, [r7, #32]
 8015b3e:	e0ae      	b.n	8015c9e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015b40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b44:	49a6      	ldr	r1, [pc, #664]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015b46:	4613      	mov	r3, r2
 8015b48:	005b      	lsls	r3, r3, #1
 8015b4a:	4413      	add	r3, r2
 8015b4c:	00db      	lsls	r3, r3, #3
 8015b4e:	440b      	add	r3, r1
 8015b50:	3314      	adds	r3, #20
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015b56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015b5a:	2b0a      	cmp	r3, #10
 8015b5c:	d105      	bne.n	8015b6a <etharp_find_entry+0x5e>
 8015b5e:	7dfb      	ldrb	r3, [r7, #23]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d102      	bne.n	8015b6a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015b64:	8c3b      	ldrh	r3, [r7, #32]
 8015b66:	847b      	strh	r3, [r7, #34]	; 0x22
 8015b68:	e095      	b.n	8015c96 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015b6a:	7dfb      	ldrb	r3, [r7, #23]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	f000 8092 	beq.w	8015c96 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015b72:	7dfb      	ldrb	r3, [r7, #23]
 8015b74:	2b01      	cmp	r3, #1
 8015b76:	d009      	beq.n	8015b8c <etharp_find_entry+0x80>
 8015b78:	7dfb      	ldrb	r3, [r7, #23]
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d806      	bhi.n	8015b8c <etharp_find_entry+0x80>
 8015b7e:	4b99      	ldr	r3, [pc, #612]	; (8015de4 <etharp_find_entry+0x2d8>)
 8015b80:	f240 1223 	movw	r2, #291	; 0x123
 8015b84:	4998      	ldr	r1, [pc, #608]	; (8015de8 <etharp_find_entry+0x2dc>)
 8015b86:	4899      	ldr	r0, [pc, #612]	; (8015dec <etharp_find_entry+0x2e0>)
 8015b88:	f007 fda2 	bl	801d6d0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d020      	beq.n	8015bd4 <etharp_find_entry+0xc8>
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	6819      	ldr	r1, [r3, #0]
 8015b96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b9a:	4891      	ldr	r0, [pc, #580]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015b9c:	4613      	mov	r3, r2
 8015b9e:	005b      	lsls	r3, r3, #1
 8015ba0:	4413      	add	r3, r2
 8015ba2:	00db      	lsls	r3, r3, #3
 8015ba4:	4403      	add	r3, r0
 8015ba6:	3304      	adds	r3, #4
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4299      	cmp	r1, r3
 8015bac:	d112      	bne.n	8015bd4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d00c      	beq.n	8015bce <etharp_find_entry+0xc2>
 8015bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bb8:	4989      	ldr	r1, [pc, #548]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015bba:	4613      	mov	r3, r2
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4413      	add	r3, r2
 8015bc0:	00db      	lsls	r3, r3, #3
 8015bc2:	440b      	add	r3, r1
 8015bc4:	3308      	adds	r3, #8
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d102      	bne.n	8015bd4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015bce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015bd2:	e100      	b.n	8015dd6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015bd4:	7dfb      	ldrb	r3, [r7, #23]
 8015bd6:	2b01      	cmp	r3, #1
 8015bd8:	d140      	bne.n	8015c5c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015bda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bde:	4980      	ldr	r1, [pc, #512]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015be0:	4613      	mov	r3, r2
 8015be2:	005b      	lsls	r3, r3, #1
 8015be4:	4413      	add	r3, r2
 8015be6:	00db      	lsls	r3, r3, #3
 8015be8:	440b      	add	r3, r1
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d01a      	beq.n	8015c26 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015bf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bf4:	497a      	ldr	r1, [pc, #488]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	005b      	lsls	r3, r3, #1
 8015bfa:	4413      	add	r3, r2
 8015bfc:	00db      	lsls	r3, r3, #3
 8015bfe:	440b      	add	r3, r1
 8015c00:	3312      	adds	r3, #18
 8015c02:	881b      	ldrh	r3, [r3, #0]
 8015c04:	8bba      	ldrh	r2, [r7, #28]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d845      	bhi.n	8015c96 <etharp_find_entry+0x18a>
            old_queue = i;
 8015c0a:	8c3b      	ldrh	r3, [r7, #32]
 8015c0c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015c0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c12:	4973      	ldr	r1, [pc, #460]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015c14:	4613      	mov	r3, r2
 8015c16:	005b      	lsls	r3, r3, #1
 8015c18:	4413      	add	r3, r2
 8015c1a:	00db      	lsls	r3, r3, #3
 8015c1c:	440b      	add	r3, r1
 8015c1e:	3312      	adds	r3, #18
 8015c20:	881b      	ldrh	r3, [r3, #0]
 8015c22:	83bb      	strh	r3, [r7, #28]
 8015c24:	e037      	b.n	8015c96 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c2a:	496d      	ldr	r1, [pc, #436]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	005b      	lsls	r3, r3, #1
 8015c30:	4413      	add	r3, r2
 8015c32:	00db      	lsls	r3, r3, #3
 8015c34:	440b      	add	r3, r1
 8015c36:	3312      	adds	r3, #18
 8015c38:	881b      	ldrh	r3, [r3, #0]
 8015c3a:	8b7a      	ldrh	r2, [r7, #26]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d82a      	bhi.n	8015c96 <etharp_find_entry+0x18a>
            old_pending = i;
 8015c40:	8c3b      	ldrh	r3, [r7, #32]
 8015c42:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015c44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c48:	4965      	ldr	r1, [pc, #404]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	005b      	lsls	r3, r3, #1
 8015c4e:	4413      	add	r3, r2
 8015c50:	00db      	lsls	r3, r3, #3
 8015c52:	440b      	add	r3, r1
 8015c54:	3312      	adds	r3, #18
 8015c56:	881b      	ldrh	r3, [r3, #0]
 8015c58:	837b      	strh	r3, [r7, #26]
 8015c5a:	e01c      	b.n	8015c96 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015c5c:	7dfb      	ldrb	r3, [r7, #23]
 8015c5e:	2b01      	cmp	r3, #1
 8015c60:	d919      	bls.n	8015c96 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015c62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c66:	495e      	ldr	r1, [pc, #376]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015c68:	4613      	mov	r3, r2
 8015c6a:	005b      	lsls	r3, r3, #1
 8015c6c:	4413      	add	r3, r2
 8015c6e:	00db      	lsls	r3, r3, #3
 8015c70:	440b      	add	r3, r1
 8015c72:	3312      	adds	r3, #18
 8015c74:	881b      	ldrh	r3, [r3, #0]
 8015c76:	8b3a      	ldrh	r2, [r7, #24]
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d80c      	bhi.n	8015c96 <etharp_find_entry+0x18a>
            old_stable = i;
 8015c7c:	8c3b      	ldrh	r3, [r7, #32]
 8015c7e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015c80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c84:	4956      	ldr	r1, [pc, #344]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015c86:	4613      	mov	r3, r2
 8015c88:	005b      	lsls	r3, r3, #1
 8015c8a:	4413      	add	r3, r2
 8015c8c:	00db      	lsls	r3, r3, #3
 8015c8e:	440b      	add	r3, r1
 8015c90:	3312      	adds	r3, #18
 8015c92:	881b      	ldrh	r3, [r3, #0]
 8015c94:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c96:	8c3b      	ldrh	r3, [r7, #32]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	b29b      	uxth	r3, r3
 8015c9c:	843b      	strh	r3, [r7, #32]
 8015c9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ca2:	2b09      	cmp	r3, #9
 8015ca4:	f77f af4c 	ble.w	8015b40 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015ca8:	7afb      	ldrb	r3, [r7, #11]
 8015caa:	f003 0302 	and.w	r3, r3, #2
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d108      	bne.n	8015cc4 <etharp_find_entry+0x1b8>
 8015cb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015cb6:	2b0a      	cmp	r3, #10
 8015cb8:	d107      	bne.n	8015cca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015cba:	7afb      	ldrb	r3, [r7, #11]
 8015cbc:	f003 0301 	and.w	r3, r3, #1
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d102      	bne.n	8015cca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015cc8:	e085      	b.n	8015dd6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015cca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015cce:	2b09      	cmp	r3, #9
 8015cd0:	dc02      	bgt.n	8015cd8 <etharp_find_entry+0x1cc>
    i = empty;
 8015cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cd4:	843b      	strh	r3, [r7, #32]
 8015cd6:	e039      	b.n	8015d4c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015cd8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015cdc:	2b09      	cmp	r3, #9
 8015cde:	dc14      	bgt.n	8015d0a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ce2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ce8:	493d      	ldr	r1, [pc, #244]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015cea:	4613      	mov	r3, r2
 8015cec:	005b      	lsls	r3, r3, #1
 8015cee:	4413      	add	r3, r2
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	440b      	add	r3, r1
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d018      	beq.n	8015d2c <etharp_find_entry+0x220>
 8015cfa:	4b3a      	ldr	r3, [pc, #232]	; (8015de4 <etharp_find_entry+0x2d8>)
 8015cfc:	f240 126d 	movw	r2, #365	; 0x16d
 8015d00:	493b      	ldr	r1, [pc, #236]	; (8015df0 <etharp_find_entry+0x2e4>)
 8015d02:	483a      	ldr	r0, [pc, #232]	; (8015dec <etharp_find_entry+0x2e0>)
 8015d04:	f007 fce4 	bl	801d6d0 <iprintf>
 8015d08:	e010      	b.n	8015d2c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015d0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015d0e:	2b09      	cmp	r3, #9
 8015d10:	dc02      	bgt.n	8015d18 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015d14:	843b      	strh	r3, [r7, #32]
 8015d16:	e009      	b.n	8015d2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015d18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015d1c:	2b09      	cmp	r3, #9
 8015d1e:	dc02      	bgt.n	8015d26 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015d20:	8bfb      	ldrh	r3, [r7, #30]
 8015d22:	843b      	strh	r3, [r7, #32]
 8015d24:	e002      	b.n	8015d2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d2a:	e054      	b.n	8015dd6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d30:	2b09      	cmp	r3, #9
 8015d32:	dd06      	ble.n	8015d42 <etharp_find_entry+0x236>
 8015d34:	4b2b      	ldr	r3, [pc, #172]	; (8015de4 <etharp_find_entry+0x2d8>)
 8015d36:	f240 127f 	movw	r2, #383	; 0x17f
 8015d3a:	492e      	ldr	r1, [pc, #184]	; (8015df4 <etharp_find_entry+0x2e8>)
 8015d3c:	482b      	ldr	r0, [pc, #172]	; (8015dec <etharp_find_entry+0x2e0>)
 8015d3e:	f007 fcc7 	bl	801d6d0 <iprintf>
    etharp_free_entry(i);
 8015d42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7ff fe06 	bl	8015958 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d50:	2b09      	cmp	r3, #9
 8015d52:	dd06      	ble.n	8015d62 <etharp_find_entry+0x256>
 8015d54:	4b23      	ldr	r3, [pc, #140]	; (8015de4 <etharp_find_entry+0x2d8>)
 8015d56:	f240 1283 	movw	r2, #387	; 0x183
 8015d5a:	4926      	ldr	r1, [pc, #152]	; (8015df4 <etharp_find_entry+0x2e8>)
 8015d5c:	4823      	ldr	r0, [pc, #140]	; (8015dec <etharp_find_entry+0x2e0>)
 8015d5e:	f007 fcb7 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015d62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d66:	491e      	ldr	r1, [pc, #120]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015d68:	4613      	mov	r3, r2
 8015d6a:	005b      	lsls	r3, r3, #1
 8015d6c:	4413      	add	r3, r2
 8015d6e:	00db      	lsls	r3, r3, #3
 8015d70:	440b      	add	r3, r1
 8015d72:	3314      	adds	r3, #20
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d006      	beq.n	8015d88 <etharp_find_entry+0x27c>
 8015d7a:	4b1a      	ldr	r3, [pc, #104]	; (8015de4 <etharp_find_entry+0x2d8>)
 8015d7c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015d80:	491d      	ldr	r1, [pc, #116]	; (8015df8 <etharp_find_entry+0x2ec>)
 8015d82:	481a      	ldr	r0, [pc, #104]	; (8015dec <etharp_find_entry+0x2e0>)
 8015d84:	f007 fca4 	bl	801d6d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d00b      	beq.n	8015da6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015d8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	6819      	ldr	r1, [r3, #0]
 8015d96:	4812      	ldr	r0, [pc, #72]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015d98:	4613      	mov	r3, r2
 8015d9a:	005b      	lsls	r3, r3, #1
 8015d9c:	4413      	add	r3, r2
 8015d9e:	00db      	lsls	r3, r3, #3
 8015da0:	4403      	add	r3, r0
 8015da2:	3304      	adds	r3, #4
 8015da4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015da6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015daa:	490d      	ldr	r1, [pc, #52]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015dac:	4613      	mov	r3, r2
 8015dae:	005b      	lsls	r3, r3, #1
 8015db0:	4413      	add	r3, r2
 8015db2:	00db      	lsls	r3, r3, #3
 8015db4:	440b      	add	r3, r1
 8015db6:	3312      	adds	r3, #18
 8015db8:	2200      	movs	r2, #0
 8015dba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015dbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dc0:	4907      	ldr	r1, [pc, #28]	; (8015de0 <etharp_find_entry+0x2d4>)
 8015dc2:	4613      	mov	r3, r2
 8015dc4:	005b      	lsls	r3, r3, #1
 8015dc6:	4413      	add	r3, r2
 8015dc8:	00db      	lsls	r3, r3, #3
 8015dca:	440b      	add	r3, r1
 8015dcc:	3308      	adds	r3, #8
 8015dce:	687a      	ldr	r2, [r7, #4]
 8015dd0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015dd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3728      	adds	r7, #40	; 0x28
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	2001141c 	.word	0x2001141c
 8015de4:	08021754 	.word	0x08021754
 8015de8:	0802178c 	.word	0x0802178c
 8015dec:	080217cc 	.word	0x080217cc
 8015df0:	080217f4 	.word	0x080217f4
 8015df4:	0802180c 	.word	0x0802180c
 8015df8:	08021820 	.word	0x08021820

08015dfc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b088      	sub	sp, #32
 8015e00:	af02      	add	r7, sp, #8
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	607a      	str	r2, [r7, #4]
 8015e08:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015e10:	2b06      	cmp	r3, #6
 8015e12:	d006      	beq.n	8015e22 <etharp_update_arp_entry+0x26>
 8015e14:	4b48      	ldr	r3, [pc, #288]	; (8015f38 <etharp_update_arp_entry+0x13c>)
 8015e16:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015e1a:	4948      	ldr	r1, [pc, #288]	; (8015f3c <etharp_update_arp_entry+0x140>)
 8015e1c:	4848      	ldr	r0, [pc, #288]	; (8015f40 <etharp_update_arp_entry+0x144>)
 8015e1e:	f007 fc57 	bl	801d6d0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d012      	beq.n	8015e4e <etharp_update_arp_entry+0x52>
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d00e      	beq.n	8015e4e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	68f9      	ldr	r1, [r7, #12]
 8015e36:	4618      	mov	r0, r3
 8015e38:	f001 f8fe 	bl	8017038 <ip4_addr_isbroadcast_u32>
 8015e3c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d105      	bne.n	8015e4e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e4a:	2be0      	cmp	r3, #224	; 0xe0
 8015e4c:	d102      	bne.n	8015e54 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015e4e:	f06f 030f 	mvn.w	r3, #15
 8015e52:	e06c      	b.n	8015f2e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015e54:	78fb      	ldrb	r3, [r7, #3]
 8015e56:	68fa      	ldr	r2, [r7, #12]
 8015e58:	4619      	mov	r1, r3
 8015e5a:	68b8      	ldr	r0, [r7, #8]
 8015e5c:	f7ff fe56 	bl	8015b0c <etharp_find_entry>
 8015e60:	4603      	mov	r3, r0
 8015e62:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015e64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	da02      	bge.n	8015e72 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015e6c:	8afb      	ldrh	r3, [r7, #22]
 8015e6e:	b25b      	sxtb	r3, r3
 8015e70:	e05d      	b.n	8015f2e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015e72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e76:	4933      	ldr	r1, [pc, #204]	; (8015f44 <etharp_update_arp_entry+0x148>)
 8015e78:	4613      	mov	r3, r2
 8015e7a:	005b      	lsls	r3, r3, #1
 8015e7c:	4413      	add	r3, r2
 8015e7e:	00db      	lsls	r3, r3, #3
 8015e80:	440b      	add	r3, r1
 8015e82:	3314      	adds	r3, #20
 8015e84:	2202      	movs	r2, #2
 8015e86:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015e88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e8c:	492d      	ldr	r1, [pc, #180]	; (8015f44 <etharp_update_arp_entry+0x148>)
 8015e8e:	4613      	mov	r3, r2
 8015e90:	005b      	lsls	r3, r3, #1
 8015e92:	4413      	add	r3, r2
 8015e94:	00db      	lsls	r3, r3, #3
 8015e96:	440b      	add	r3, r1
 8015e98:	3308      	adds	r3, #8
 8015e9a:	68fa      	ldr	r2, [r7, #12]
 8015e9c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015e9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ea2:	4613      	mov	r3, r2
 8015ea4:	005b      	lsls	r3, r3, #1
 8015ea6:	4413      	add	r3, r2
 8015ea8:	00db      	lsls	r3, r3, #3
 8015eaa:	3308      	adds	r3, #8
 8015eac:	4a25      	ldr	r2, [pc, #148]	; (8015f44 <etharp_update_arp_entry+0x148>)
 8015eae:	4413      	add	r3, r2
 8015eb0:	3304      	adds	r3, #4
 8015eb2:	2206      	movs	r2, #6
 8015eb4:	6879      	ldr	r1, [r7, #4]
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f007 fbf4 	bl	801d6a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015ebc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ec0:	4920      	ldr	r1, [pc, #128]	; (8015f44 <etharp_update_arp_entry+0x148>)
 8015ec2:	4613      	mov	r3, r2
 8015ec4:	005b      	lsls	r3, r3, #1
 8015ec6:	4413      	add	r3, r2
 8015ec8:	00db      	lsls	r3, r3, #3
 8015eca:	440b      	add	r3, r1
 8015ecc:	3312      	adds	r3, #18
 8015ece:	2200      	movs	r2, #0
 8015ed0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015ed2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ed6:	491b      	ldr	r1, [pc, #108]	; (8015f44 <etharp_update_arp_entry+0x148>)
 8015ed8:	4613      	mov	r3, r2
 8015eda:	005b      	lsls	r3, r3, #1
 8015edc:	4413      	add	r3, r2
 8015ede:	00db      	lsls	r3, r3, #3
 8015ee0:	440b      	add	r3, r1
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d021      	beq.n	8015f2c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015ee8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015eec:	4915      	ldr	r1, [pc, #84]	; (8015f44 <etharp_update_arp_entry+0x148>)
 8015eee:	4613      	mov	r3, r2
 8015ef0:	005b      	lsls	r3, r3, #1
 8015ef2:	4413      	add	r3, r2
 8015ef4:	00db      	lsls	r3, r3, #3
 8015ef6:	440b      	add	r3, r1
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015efc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f00:	4910      	ldr	r1, [pc, #64]	; (8015f44 <etharp_update_arp_entry+0x148>)
 8015f02:	4613      	mov	r3, r2
 8015f04:	005b      	lsls	r3, r3, #1
 8015f06:	4413      	add	r3, r2
 8015f08:	00db      	lsls	r3, r3, #3
 8015f0a:	440b      	add	r3, r1
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f1a:	9300      	str	r3, [sp, #0]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6939      	ldr	r1, [r7, #16]
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f002 f8c1 	bl	80180a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015f26:	6938      	ldr	r0, [r7, #16]
 8015f28:	f7f8 fd58 	bl	800e9dc <pbuf_free>
  }
  return ERR_OK;
 8015f2c:	2300      	movs	r3, #0
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3718      	adds	r7, #24
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}
 8015f36:	bf00      	nop
 8015f38:	08021754 	.word	0x08021754
 8015f3c:	0802184c 	.word	0x0802184c
 8015f40:	080217cc 	.word	0x080217cc
 8015f44:	2001141c 	.word	0x2001141c

08015f48 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b084      	sub	sp, #16
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f50:	2300      	movs	r3, #0
 8015f52:	60fb      	str	r3, [r7, #12]
 8015f54:	e01e      	b.n	8015f94 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015f56:	4913      	ldr	r1, [pc, #76]	; (8015fa4 <etharp_cleanup_netif+0x5c>)
 8015f58:	68fa      	ldr	r2, [r7, #12]
 8015f5a:	4613      	mov	r3, r2
 8015f5c:	005b      	lsls	r3, r3, #1
 8015f5e:	4413      	add	r3, r2
 8015f60:	00db      	lsls	r3, r3, #3
 8015f62:	440b      	add	r3, r1
 8015f64:	3314      	adds	r3, #20
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015f6a:	7afb      	ldrb	r3, [r7, #11]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d00e      	beq.n	8015f8e <etharp_cleanup_netif+0x46>
 8015f70:	490c      	ldr	r1, [pc, #48]	; (8015fa4 <etharp_cleanup_netif+0x5c>)
 8015f72:	68fa      	ldr	r2, [r7, #12]
 8015f74:	4613      	mov	r3, r2
 8015f76:	005b      	lsls	r3, r3, #1
 8015f78:	4413      	add	r3, r2
 8015f7a:	00db      	lsls	r3, r3, #3
 8015f7c:	440b      	add	r3, r1
 8015f7e:	3308      	adds	r3, #8
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	687a      	ldr	r2, [r7, #4]
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d102      	bne.n	8015f8e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	f7ff fce5 	bl	8015958 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	3301      	adds	r3, #1
 8015f92:	60fb      	str	r3, [r7, #12]
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2b09      	cmp	r3, #9
 8015f98:	dddd      	ble.n	8015f56 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015f9a:	bf00      	nop
 8015f9c:	bf00      	nop
 8015f9e:	3710      	adds	r7, #16
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	2001141c 	.word	0x2001141c

08015fa8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015fa8:	b5b0      	push	{r4, r5, r7, lr}
 8015faa:	b08a      	sub	sp, #40	; 0x28
 8015fac:	af04      	add	r7, sp, #16
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d107      	bne.n	8015fc8 <etharp_input+0x20>
 8015fb8:	4b3d      	ldr	r3, [pc, #244]	; (80160b0 <etharp_input+0x108>)
 8015fba:	f240 228a 	movw	r2, #650	; 0x28a
 8015fbe:	493d      	ldr	r1, [pc, #244]	; (80160b4 <etharp_input+0x10c>)
 8015fc0:	483d      	ldr	r0, [pc, #244]	; (80160b8 <etharp_input+0x110>)
 8015fc2:	f007 fb85 	bl	801d6d0 <iprintf>
 8015fc6:	e06f      	b.n	80160a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	881b      	ldrh	r3, [r3, #0]
 8015fd2:	b29b      	uxth	r3, r3
 8015fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fd8:	d10c      	bne.n	8015ff4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015fde:	2b06      	cmp	r3, #6
 8015fe0:	d108      	bne.n	8015ff4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015fe6:	2b04      	cmp	r3, #4
 8015fe8:	d104      	bne.n	8015ff4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	885b      	ldrh	r3, [r3, #2]
 8015fee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015ff0:	2b08      	cmp	r3, #8
 8015ff2:	d003      	beq.n	8015ffc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f7f8 fcf1 	bl	800e9dc <pbuf_free>
    return;
 8015ffa:	e055      	b.n	80160a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	330e      	adds	r3, #14
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	3318      	adds	r3, #24
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	3304      	adds	r3, #4
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d102      	bne.n	801601c <etharp_input+0x74>
    for_us = 0;
 8016016:	2300      	movs	r3, #0
 8016018:	75fb      	strb	r3, [r7, #23]
 801601a:	e009      	b.n	8016030 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801601c:	68ba      	ldr	r2, [r7, #8]
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	3304      	adds	r3, #4
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	429a      	cmp	r2, r3
 8016026:	bf0c      	ite	eq
 8016028:	2301      	moveq	r3, #1
 801602a:	2300      	movne	r3, #0
 801602c:	b2db      	uxtb	r3, r3
 801602e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016030:	693b      	ldr	r3, [r7, #16]
 8016032:	f103 0208 	add.w	r2, r3, #8
 8016036:	7dfb      	ldrb	r3, [r7, #23]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <etharp_input+0x98>
 801603c:	2301      	movs	r3, #1
 801603e:	e000      	b.n	8016042 <etharp_input+0x9a>
 8016040:	2302      	movs	r3, #2
 8016042:	f107 010c 	add.w	r1, r7, #12
 8016046:	6838      	ldr	r0, [r7, #0]
 8016048:	f7ff fed8 	bl	8015dfc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	88db      	ldrh	r3, [r3, #6]
 8016050:	b29b      	uxth	r3, r3
 8016052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016056:	d003      	beq.n	8016060 <etharp_input+0xb8>
 8016058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801605c:	d01e      	beq.n	801609c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801605e:	e020      	b.n	80160a2 <etharp_input+0xfa>
      if (for_us) {
 8016060:	7dfb      	ldrb	r3, [r7, #23]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d01c      	beq.n	80160a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801607c:	693a      	ldr	r2, [r7, #16]
 801607e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016080:	2102      	movs	r1, #2
 8016082:	9103      	str	r1, [sp, #12]
 8016084:	f107 010c 	add.w	r1, r7, #12
 8016088:	9102      	str	r1, [sp, #8]
 801608a:	9201      	str	r2, [sp, #4]
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	462b      	mov	r3, r5
 8016090:	4622      	mov	r2, r4
 8016092:	4601      	mov	r1, r0
 8016094:	6838      	ldr	r0, [r7, #0]
 8016096:	f000 faeb 	bl	8016670 <etharp_raw>
      break;
 801609a:	e001      	b.n	80160a0 <etharp_input+0xf8>
      break;
 801609c:	bf00      	nop
 801609e:	e000      	b.n	80160a2 <etharp_input+0xfa>
      break;
 80160a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f7f8 fc9a 	bl	800e9dc <pbuf_free>
}
 80160a8:	3718      	adds	r7, #24
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bdb0      	pop	{r4, r5, r7, pc}
 80160ae:	bf00      	nop
 80160b0:	08021754 	.word	0x08021754
 80160b4:	080218a4 	.word	0x080218a4
 80160b8:	080217cc 	.word	0x080217cc

080160bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b086      	sub	sp, #24
 80160c0:	af02      	add	r7, sp, #8
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	4613      	mov	r3, r2
 80160c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80160ca:	79fa      	ldrb	r2, [r7, #7]
 80160cc:	4944      	ldr	r1, [pc, #272]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 80160ce:	4613      	mov	r3, r2
 80160d0:	005b      	lsls	r3, r3, #1
 80160d2:	4413      	add	r3, r2
 80160d4:	00db      	lsls	r3, r3, #3
 80160d6:	440b      	add	r3, r1
 80160d8:	3314      	adds	r3, #20
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	2b01      	cmp	r3, #1
 80160de:	d806      	bhi.n	80160ee <etharp_output_to_arp_index+0x32>
 80160e0:	4b40      	ldr	r3, [pc, #256]	; (80161e4 <etharp_output_to_arp_index+0x128>)
 80160e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80160e6:	4940      	ldr	r1, [pc, #256]	; (80161e8 <etharp_output_to_arp_index+0x12c>)
 80160e8:	4840      	ldr	r0, [pc, #256]	; (80161ec <etharp_output_to_arp_index+0x130>)
 80160ea:	f007 faf1 	bl	801d6d0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80160ee:	79fa      	ldrb	r2, [r7, #7]
 80160f0:	493b      	ldr	r1, [pc, #236]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 80160f2:	4613      	mov	r3, r2
 80160f4:	005b      	lsls	r3, r3, #1
 80160f6:	4413      	add	r3, r2
 80160f8:	00db      	lsls	r3, r3, #3
 80160fa:	440b      	add	r3, r1
 80160fc:	3314      	adds	r3, #20
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	2b02      	cmp	r3, #2
 8016102:	d153      	bne.n	80161ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016104:	79fa      	ldrb	r2, [r7, #7]
 8016106:	4936      	ldr	r1, [pc, #216]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 8016108:	4613      	mov	r3, r2
 801610a:	005b      	lsls	r3, r3, #1
 801610c:	4413      	add	r3, r2
 801610e:	00db      	lsls	r3, r3, #3
 8016110:	440b      	add	r3, r1
 8016112:	3312      	adds	r3, #18
 8016114:	881b      	ldrh	r3, [r3, #0]
 8016116:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801611a:	d919      	bls.n	8016150 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801611c:	79fa      	ldrb	r2, [r7, #7]
 801611e:	4613      	mov	r3, r2
 8016120:	005b      	lsls	r3, r3, #1
 8016122:	4413      	add	r3, r2
 8016124:	00db      	lsls	r3, r3, #3
 8016126:	4a2e      	ldr	r2, [pc, #184]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 8016128:	4413      	add	r3, r2
 801612a:	3304      	adds	r3, #4
 801612c:	4619      	mov	r1, r3
 801612e:	68f8      	ldr	r0, [r7, #12]
 8016130:	f000 fb4c 	bl	80167cc <etharp_request>
 8016134:	4603      	mov	r3, r0
 8016136:	2b00      	cmp	r3, #0
 8016138:	d138      	bne.n	80161ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801613a:	79fa      	ldrb	r2, [r7, #7]
 801613c:	4928      	ldr	r1, [pc, #160]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 801613e:	4613      	mov	r3, r2
 8016140:	005b      	lsls	r3, r3, #1
 8016142:	4413      	add	r3, r2
 8016144:	00db      	lsls	r3, r3, #3
 8016146:	440b      	add	r3, r1
 8016148:	3314      	adds	r3, #20
 801614a:	2203      	movs	r2, #3
 801614c:	701a      	strb	r2, [r3, #0]
 801614e:	e02d      	b.n	80161ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016150:	79fa      	ldrb	r2, [r7, #7]
 8016152:	4923      	ldr	r1, [pc, #140]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 8016154:	4613      	mov	r3, r2
 8016156:	005b      	lsls	r3, r3, #1
 8016158:	4413      	add	r3, r2
 801615a:	00db      	lsls	r3, r3, #3
 801615c:	440b      	add	r3, r1
 801615e:	3312      	adds	r3, #18
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016166:	d321      	bcc.n	80161ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016168:	79fa      	ldrb	r2, [r7, #7]
 801616a:	4613      	mov	r3, r2
 801616c:	005b      	lsls	r3, r3, #1
 801616e:	4413      	add	r3, r2
 8016170:	00db      	lsls	r3, r3, #3
 8016172:	4a1b      	ldr	r2, [pc, #108]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 8016174:	4413      	add	r3, r2
 8016176:	1d19      	adds	r1, r3, #4
 8016178:	79fa      	ldrb	r2, [r7, #7]
 801617a:	4613      	mov	r3, r2
 801617c:	005b      	lsls	r3, r3, #1
 801617e:	4413      	add	r3, r2
 8016180:	00db      	lsls	r3, r3, #3
 8016182:	3308      	adds	r3, #8
 8016184:	4a16      	ldr	r2, [pc, #88]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 8016186:	4413      	add	r3, r2
 8016188:	3304      	adds	r3, #4
 801618a:	461a      	mov	r2, r3
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f000 fafb 	bl	8016788 <etharp_request_dst>
 8016192:	4603      	mov	r3, r0
 8016194:	2b00      	cmp	r3, #0
 8016196:	d109      	bne.n	80161ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016198:	79fa      	ldrb	r2, [r7, #7]
 801619a:	4911      	ldr	r1, [pc, #68]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 801619c:	4613      	mov	r3, r2
 801619e:	005b      	lsls	r3, r3, #1
 80161a0:	4413      	add	r3, r2
 80161a2:	00db      	lsls	r3, r3, #3
 80161a4:	440b      	add	r3, r1
 80161a6:	3314      	adds	r3, #20
 80161a8:	2203      	movs	r2, #3
 80161aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80161b2:	79fa      	ldrb	r2, [r7, #7]
 80161b4:	4613      	mov	r3, r2
 80161b6:	005b      	lsls	r3, r3, #1
 80161b8:	4413      	add	r3, r2
 80161ba:	00db      	lsls	r3, r3, #3
 80161bc:	3308      	adds	r3, #8
 80161be:	4a08      	ldr	r2, [pc, #32]	; (80161e0 <etharp_output_to_arp_index+0x124>)
 80161c0:	4413      	add	r3, r2
 80161c2:	3304      	adds	r3, #4
 80161c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80161c8:	9200      	str	r2, [sp, #0]
 80161ca:	460a      	mov	r2, r1
 80161cc:	68b9      	ldr	r1, [r7, #8]
 80161ce:	68f8      	ldr	r0, [r7, #12]
 80161d0:	f001 ff6a 	bl	80180a8 <ethernet_output>
 80161d4:	4603      	mov	r3, r0
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3710      	adds	r7, #16
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	2001141c 	.word	0x2001141c
 80161e4:	08021754 	.word	0x08021754
 80161e8:	080218c4 	.word	0x080218c4
 80161ec:	080217cc 	.word	0x080217cc

080161f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b08a      	sub	sp, #40	; 0x28
 80161f4:	af02      	add	r7, sp, #8
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d106      	bne.n	8016214 <etharp_output+0x24>
 8016206:	4b73      	ldr	r3, [pc, #460]	; (80163d4 <etharp_output+0x1e4>)
 8016208:	f240 321e 	movw	r2, #798	; 0x31e
 801620c:	4972      	ldr	r1, [pc, #456]	; (80163d8 <etharp_output+0x1e8>)
 801620e:	4873      	ldr	r0, [pc, #460]	; (80163dc <etharp_output+0x1ec>)
 8016210:	f007 fa5e 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016214:	68bb      	ldr	r3, [r7, #8]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d106      	bne.n	8016228 <etharp_output+0x38>
 801621a:	4b6e      	ldr	r3, [pc, #440]	; (80163d4 <etharp_output+0x1e4>)
 801621c:	f240 321f 	movw	r2, #799	; 0x31f
 8016220:	496f      	ldr	r1, [pc, #444]	; (80163e0 <etharp_output+0x1f0>)
 8016222:	486e      	ldr	r0, [pc, #440]	; (80163dc <etharp_output+0x1ec>)
 8016224:	f007 fa54 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d106      	bne.n	801623c <etharp_output+0x4c>
 801622e:	4b69      	ldr	r3, [pc, #420]	; (80163d4 <etharp_output+0x1e4>)
 8016230:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016234:	496b      	ldr	r1, [pc, #428]	; (80163e4 <etharp_output+0x1f4>)
 8016236:	4869      	ldr	r0, [pc, #420]	; (80163dc <etharp_output+0x1ec>)
 8016238:	f007 fa4a 	bl	801d6d0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	68f9      	ldr	r1, [r7, #12]
 8016242:	4618      	mov	r0, r3
 8016244:	f000 fef8 	bl	8017038 <ip4_addr_isbroadcast_u32>
 8016248:	4603      	mov	r3, r0
 801624a:	2b00      	cmp	r3, #0
 801624c:	d002      	beq.n	8016254 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801624e:	4b66      	ldr	r3, [pc, #408]	; (80163e8 <etharp_output+0x1f8>)
 8016250:	61fb      	str	r3, [r7, #28]
 8016252:	e0af      	b.n	80163b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801625c:	2be0      	cmp	r3, #224	; 0xe0
 801625e:	d118      	bne.n	8016292 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016260:	2301      	movs	r3, #1
 8016262:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016264:	2300      	movs	r3, #0
 8016266:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016268:	235e      	movs	r3, #94	; 0x5e
 801626a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	3301      	adds	r3, #1
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016276:	b2db      	uxtb	r3, r3
 8016278:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	3302      	adds	r3, #2
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	3303      	adds	r3, #3
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801628a:	f107 0310 	add.w	r3, r7, #16
 801628e:	61fb      	str	r3, [r7, #28]
 8016290:	e090      	b.n	80163b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	3304      	adds	r3, #4
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	405a      	eors	r2, r3
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	3308      	adds	r3, #8
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	4013      	ands	r3, r2
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d012      	beq.n	80162d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80162b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80162b4:	4293      	cmp	r3, r2
 80162b6:	d00b      	beq.n	80162d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	330c      	adds	r3, #12
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d003      	beq.n	80162ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	330c      	adds	r3, #12
 80162c6:	61bb      	str	r3, [r7, #24]
 80162c8:	e002      	b.n	80162d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80162ca:	f06f 0303 	mvn.w	r3, #3
 80162ce:	e07d      	b.n	80163cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80162d0:	4b46      	ldr	r3, [pc, #280]	; (80163ec <etharp_output+0x1fc>)
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	4619      	mov	r1, r3
 80162d6:	4a46      	ldr	r2, [pc, #280]	; (80163f0 <etharp_output+0x200>)
 80162d8:	460b      	mov	r3, r1
 80162da:	005b      	lsls	r3, r3, #1
 80162dc:	440b      	add	r3, r1
 80162de:	00db      	lsls	r3, r3, #3
 80162e0:	4413      	add	r3, r2
 80162e2:	3314      	adds	r3, #20
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d925      	bls.n	8016336 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80162ea:	4b40      	ldr	r3, [pc, #256]	; (80163ec <etharp_output+0x1fc>)
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	4619      	mov	r1, r3
 80162f0:	4a3f      	ldr	r2, [pc, #252]	; (80163f0 <etharp_output+0x200>)
 80162f2:	460b      	mov	r3, r1
 80162f4:	005b      	lsls	r3, r3, #1
 80162f6:	440b      	add	r3, r1
 80162f8:	00db      	lsls	r3, r3, #3
 80162fa:	4413      	add	r3, r2
 80162fc:	3308      	adds	r3, #8
 80162fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016300:	68fa      	ldr	r2, [r7, #12]
 8016302:	429a      	cmp	r2, r3
 8016304:	d117      	bne.n	8016336 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016306:	69bb      	ldr	r3, [r7, #24]
 8016308:	681a      	ldr	r2, [r3, #0]
 801630a:	4b38      	ldr	r3, [pc, #224]	; (80163ec <etharp_output+0x1fc>)
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	4618      	mov	r0, r3
 8016310:	4937      	ldr	r1, [pc, #220]	; (80163f0 <etharp_output+0x200>)
 8016312:	4603      	mov	r3, r0
 8016314:	005b      	lsls	r3, r3, #1
 8016316:	4403      	add	r3, r0
 8016318:	00db      	lsls	r3, r3, #3
 801631a:	440b      	add	r3, r1
 801631c:	3304      	adds	r3, #4
 801631e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016320:	429a      	cmp	r2, r3
 8016322:	d108      	bne.n	8016336 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016324:	4b31      	ldr	r3, [pc, #196]	; (80163ec <etharp_output+0x1fc>)
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	461a      	mov	r2, r3
 801632a:	68b9      	ldr	r1, [r7, #8]
 801632c:	68f8      	ldr	r0, [r7, #12]
 801632e:	f7ff fec5 	bl	80160bc <etharp_output_to_arp_index>
 8016332:	4603      	mov	r3, r0
 8016334:	e04a      	b.n	80163cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016336:	2300      	movs	r3, #0
 8016338:	75fb      	strb	r3, [r7, #23]
 801633a:	e031      	b.n	80163a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801633c:	7dfa      	ldrb	r2, [r7, #23]
 801633e:	492c      	ldr	r1, [pc, #176]	; (80163f0 <etharp_output+0x200>)
 8016340:	4613      	mov	r3, r2
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	00db      	lsls	r3, r3, #3
 8016348:	440b      	add	r3, r1
 801634a:	3314      	adds	r3, #20
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	2b01      	cmp	r3, #1
 8016350:	d923      	bls.n	801639a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016352:	7dfa      	ldrb	r2, [r7, #23]
 8016354:	4926      	ldr	r1, [pc, #152]	; (80163f0 <etharp_output+0x200>)
 8016356:	4613      	mov	r3, r2
 8016358:	005b      	lsls	r3, r3, #1
 801635a:	4413      	add	r3, r2
 801635c:	00db      	lsls	r3, r3, #3
 801635e:	440b      	add	r3, r1
 8016360:	3308      	adds	r3, #8
 8016362:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016364:	68fa      	ldr	r2, [r7, #12]
 8016366:	429a      	cmp	r2, r3
 8016368:	d117      	bne.n	801639a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801636a:	69bb      	ldr	r3, [r7, #24]
 801636c:	6819      	ldr	r1, [r3, #0]
 801636e:	7dfa      	ldrb	r2, [r7, #23]
 8016370:	481f      	ldr	r0, [pc, #124]	; (80163f0 <etharp_output+0x200>)
 8016372:	4613      	mov	r3, r2
 8016374:	005b      	lsls	r3, r3, #1
 8016376:	4413      	add	r3, r2
 8016378:	00db      	lsls	r3, r3, #3
 801637a:	4403      	add	r3, r0
 801637c:	3304      	adds	r3, #4
 801637e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016380:	4299      	cmp	r1, r3
 8016382:	d10a      	bne.n	801639a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016384:	4a19      	ldr	r2, [pc, #100]	; (80163ec <etharp_output+0x1fc>)
 8016386:	7dfb      	ldrb	r3, [r7, #23]
 8016388:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801638a:	7dfb      	ldrb	r3, [r7, #23]
 801638c:	461a      	mov	r2, r3
 801638e:	68b9      	ldr	r1, [r7, #8]
 8016390:	68f8      	ldr	r0, [r7, #12]
 8016392:	f7ff fe93 	bl	80160bc <etharp_output_to_arp_index>
 8016396:	4603      	mov	r3, r0
 8016398:	e018      	b.n	80163cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801639a:	7dfb      	ldrb	r3, [r7, #23]
 801639c:	3301      	adds	r3, #1
 801639e:	75fb      	strb	r3, [r7, #23]
 80163a0:	7dfb      	ldrb	r3, [r7, #23]
 80163a2:	2b09      	cmp	r3, #9
 80163a4:	d9ca      	bls.n	801633c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80163a6:	68ba      	ldr	r2, [r7, #8]
 80163a8:	69b9      	ldr	r1, [r7, #24]
 80163aa:	68f8      	ldr	r0, [r7, #12]
 80163ac:	f000 f822 	bl	80163f4 <etharp_query>
 80163b0:	4603      	mov	r3, r0
 80163b2:	e00b      	b.n	80163cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80163ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80163be:	9300      	str	r3, [sp, #0]
 80163c0:	69fb      	ldr	r3, [r7, #28]
 80163c2:	68b9      	ldr	r1, [r7, #8]
 80163c4:	68f8      	ldr	r0, [r7, #12]
 80163c6:	f001 fe6f 	bl	80180a8 <ethernet_output>
 80163ca:	4603      	mov	r3, r0
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3720      	adds	r7, #32
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	08021754 	.word	0x08021754
 80163d8:	080218a4 	.word	0x080218a4
 80163dc:	080217cc 	.word	0x080217cc
 80163e0:	080218f4 	.word	0x080218f4
 80163e4:	08021894 	.word	0x08021894
 80163e8:	080222f0 	.word	0x080222f0
 80163ec:	2001150c 	.word	0x2001150c
 80163f0:	2001141c 	.word	0x2001141c

080163f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b08c      	sub	sp, #48	; 0x30
 80163f8:	af02      	add	r7, sp, #8
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	3326      	adds	r3, #38	; 0x26
 8016404:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016406:	23ff      	movs	r3, #255	; 0xff
 8016408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801640c:	2300      	movs	r3, #0
 801640e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	68f9      	ldr	r1, [r7, #12]
 8016416:	4618      	mov	r0, r3
 8016418:	f000 fe0e 	bl	8017038 <ip4_addr_isbroadcast_u32>
 801641c:	4603      	mov	r3, r0
 801641e:	2b00      	cmp	r3, #0
 8016420:	d10c      	bne.n	801643c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801642a:	2be0      	cmp	r3, #224	; 0xe0
 801642c:	d006      	beq.n	801643c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d003      	beq.n	801643c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d102      	bne.n	8016442 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801643c:	f06f 030f 	mvn.w	r3, #15
 8016440:	e101      	b.n	8016646 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016442:	68fa      	ldr	r2, [r7, #12]
 8016444:	2101      	movs	r1, #1
 8016446:	68b8      	ldr	r0, [r7, #8]
 8016448:	f7ff fb60 	bl	8015b0c <etharp_find_entry>
 801644c:	4603      	mov	r3, r0
 801644e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016454:	2b00      	cmp	r3, #0
 8016456:	da02      	bge.n	801645e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016458:	8a7b      	ldrh	r3, [r7, #18]
 801645a:	b25b      	sxtb	r3, r3
 801645c:	e0f3      	b.n	8016646 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801645e:	8a7b      	ldrh	r3, [r7, #18]
 8016460:	2b7e      	cmp	r3, #126	; 0x7e
 8016462:	d906      	bls.n	8016472 <etharp_query+0x7e>
 8016464:	4b7a      	ldr	r3, [pc, #488]	; (8016650 <etharp_query+0x25c>)
 8016466:	f240 32c1 	movw	r2, #961	; 0x3c1
 801646a:	497a      	ldr	r1, [pc, #488]	; (8016654 <etharp_query+0x260>)
 801646c:	487a      	ldr	r0, [pc, #488]	; (8016658 <etharp_query+0x264>)
 801646e:	f007 f92f 	bl	801d6d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016472:	8a7b      	ldrh	r3, [r7, #18]
 8016474:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016476:	7c7a      	ldrb	r2, [r7, #17]
 8016478:	4978      	ldr	r1, [pc, #480]	; (801665c <etharp_query+0x268>)
 801647a:	4613      	mov	r3, r2
 801647c:	005b      	lsls	r3, r3, #1
 801647e:	4413      	add	r3, r2
 8016480:	00db      	lsls	r3, r3, #3
 8016482:	440b      	add	r3, r1
 8016484:	3314      	adds	r3, #20
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d115      	bne.n	80164b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801648c:	2301      	movs	r3, #1
 801648e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016490:	7c7a      	ldrb	r2, [r7, #17]
 8016492:	4972      	ldr	r1, [pc, #456]	; (801665c <etharp_query+0x268>)
 8016494:	4613      	mov	r3, r2
 8016496:	005b      	lsls	r3, r3, #1
 8016498:	4413      	add	r3, r2
 801649a:	00db      	lsls	r3, r3, #3
 801649c:	440b      	add	r3, r1
 801649e:	3314      	adds	r3, #20
 80164a0:	2201      	movs	r2, #1
 80164a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80164a4:	7c7a      	ldrb	r2, [r7, #17]
 80164a6:	496d      	ldr	r1, [pc, #436]	; (801665c <etharp_query+0x268>)
 80164a8:	4613      	mov	r3, r2
 80164aa:	005b      	lsls	r3, r3, #1
 80164ac:	4413      	add	r3, r2
 80164ae:	00db      	lsls	r3, r3, #3
 80164b0:	440b      	add	r3, r1
 80164b2:	3308      	adds	r3, #8
 80164b4:	68fa      	ldr	r2, [r7, #12]
 80164b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80164b8:	7c7a      	ldrb	r2, [r7, #17]
 80164ba:	4968      	ldr	r1, [pc, #416]	; (801665c <etharp_query+0x268>)
 80164bc:	4613      	mov	r3, r2
 80164be:	005b      	lsls	r3, r3, #1
 80164c0:	4413      	add	r3, r2
 80164c2:	00db      	lsls	r3, r3, #3
 80164c4:	440b      	add	r3, r1
 80164c6:	3314      	adds	r3, #20
 80164c8:	781b      	ldrb	r3, [r3, #0]
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d011      	beq.n	80164f2 <etharp_query+0xfe>
 80164ce:	7c7a      	ldrb	r2, [r7, #17]
 80164d0:	4962      	ldr	r1, [pc, #392]	; (801665c <etharp_query+0x268>)
 80164d2:	4613      	mov	r3, r2
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	00db      	lsls	r3, r3, #3
 80164da:	440b      	add	r3, r1
 80164dc:	3314      	adds	r3, #20
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	2b01      	cmp	r3, #1
 80164e2:	d806      	bhi.n	80164f2 <etharp_query+0xfe>
 80164e4:	4b5a      	ldr	r3, [pc, #360]	; (8016650 <etharp_query+0x25c>)
 80164e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80164ea:	495d      	ldr	r1, [pc, #372]	; (8016660 <etharp_query+0x26c>)
 80164ec:	485a      	ldr	r0, [pc, #360]	; (8016658 <etharp_query+0x264>)
 80164ee:	f007 f8ef 	bl	801d6d0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80164f2:	6a3b      	ldr	r3, [r7, #32]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d102      	bne.n	80164fe <etharp_query+0x10a>
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d10c      	bne.n	8016518 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80164fe:	68b9      	ldr	r1, [r7, #8]
 8016500:	68f8      	ldr	r0, [r7, #12]
 8016502:	f000 f963 	bl	80167cc <etharp_request>
 8016506:	4603      	mov	r3, r0
 8016508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d102      	bne.n	8016518 <etharp_query+0x124>
      return result;
 8016512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016516:	e096      	b.n	8016646 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d106      	bne.n	801652c <etharp_query+0x138>
 801651e:	4b4c      	ldr	r3, [pc, #304]	; (8016650 <etharp_query+0x25c>)
 8016520:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016524:	494f      	ldr	r1, [pc, #316]	; (8016664 <etharp_query+0x270>)
 8016526:	484c      	ldr	r0, [pc, #304]	; (8016658 <etharp_query+0x264>)
 8016528:	f007 f8d2 	bl	801d6d0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801652c:	7c7a      	ldrb	r2, [r7, #17]
 801652e:	494b      	ldr	r1, [pc, #300]	; (801665c <etharp_query+0x268>)
 8016530:	4613      	mov	r3, r2
 8016532:	005b      	lsls	r3, r3, #1
 8016534:	4413      	add	r3, r2
 8016536:	00db      	lsls	r3, r3, #3
 8016538:	440b      	add	r3, r1
 801653a:	3314      	adds	r3, #20
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	2b01      	cmp	r3, #1
 8016540:	d917      	bls.n	8016572 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016542:	4a49      	ldr	r2, [pc, #292]	; (8016668 <etharp_query+0x274>)
 8016544:	7c7b      	ldrb	r3, [r7, #17]
 8016546:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016548:	7c7a      	ldrb	r2, [r7, #17]
 801654a:	4613      	mov	r3, r2
 801654c:	005b      	lsls	r3, r3, #1
 801654e:	4413      	add	r3, r2
 8016550:	00db      	lsls	r3, r3, #3
 8016552:	3308      	adds	r3, #8
 8016554:	4a41      	ldr	r2, [pc, #260]	; (801665c <etharp_query+0x268>)
 8016556:	4413      	add	r3, r2
 8016558:	3304      	adds	r3, #4
 801655a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801655e:	9200      	str	r2, [sp, #0]
 8016560:	697a      	ldr	r2, [r7, #20]
 8016562:	6879      	ldr	r1, [r7, #4]
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	f001 fd9f 	bl	80180a8 <ethernet_output>
 801656a:	4603      	mov	r3, r0
 801656c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016570:	e067      	b.n	8016642 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016572:	7c7a      	ldrb	r2, [r7, #17]
 8016574:	4939      	ldr	r1, [pc, #228]	; (801665c <etharp_query+0x268>)
 8016576:	4613      	mov	r3, r2
 8016578:	005b      	lsls	r3, r3, #1
 801657a:	4413      	add	r3, r2
 801657c:	00db      	lsls	r3, r3, #3
 801657e:	440b      	add	r3, r1
 8016580:	3314      	adds	r3, #20
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	2b01      	cmp	r3, #1
 8016586:	d15c      	bne.n	8016642 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016588:	2300      	movs	r3, #0
 801658a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016590:	e01c      	b.n	80165cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016592:	69fb      	ldr	r3, [r7, #28]
 8016594:	895a      	ldrh	r2, [r3, #10]
 8016596:	69fb      	ldr	r3, [r7, #28]
 8016598:	891b      	ldrh	r3, [r3, #8]
 801659a:	429a      	cmp	r2, r3
 801659c:	d10a      	bne.n	80165b4 <etharp_query+0x1c0>
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d006      	beq.n	80165b4 <etharp_query+0x1c0>
 80165a6:	4b2a      	ldr	r3, [pc, #168]	; (8016650 <etharp_query+0x25c>)
 80165a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80165ac:	492f      	ldr	r1, [pc, #188]	; (801666c <etharp_query+0x278>)
 80165ae:	482a      	ldr	r0, [pc, #168]	; (8016658 <etharp_query+0x264>)
 80165b0:	f007 f88e 	bl	801d6d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	7b1b      	ldrb	r3, [r3, #12]
 80165b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d002      	beq.n	80165c6 <etharp_query+0x1d2>
        copy_needed = 1;
 80165c0:	2301      	movs	r3, #1
 80165c2:	61bb      	str	r3, [r7, #24]
        break;
 80165c4:	e005      	b.n	80165d2 <etharp_query+0x1de>
      }
      p = p->next;
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80165cc:	69fb      	ldr	r3, [r7, #28]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d1df      	bne.n	8016592 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d007      	beq.n	80165e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80165d8:	687a      	ldr	r2, [r7, #4]
 80165da:	f44f 7120 	mov.w	r1, #640	; 0x280
 80165de:	200e      	movs	r0, #14
 80165e0:	f7f8 fc64 	bl	800eeac <pbuf_clone>
 80165e4:	61f8      	str	r0, [r7, #28]
 80165e6:	e004      	b.n	80165f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80165ec:	69f8      	ldr	r0, [r7, #28]
 80165ee:	f7f8 fa9b 	bl	800eb28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d021      	beq.n	801663c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80165f8:	7c7a      	ldrb	r2, [r7, #17]
 80165fa:	4918      	ldr	r1, [pc, #96]	; (801665c <etharp_query+0x268>)
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	440b      	add	r3, r1
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d00a      	beq.n	8016622 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801660c:	7c7a      	ldrb	r2, [r7, #17]
 801660e:	4913      	ldr	r1, [pc, #76]	; (801665c <etharp_query+0x268>)
 8016610:	4613      	mov	r3, r2
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	4413      	add	r3, r2
 8016616:	00db      	lsls	r3, r3, #3
 8016618:	440b      	add	r3, r1
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	4618      	mov	r0, r3
 801661e:	f7f8 f9dd 	bl	800e9dc <pbuf_free>
      }
      arp_table[i].q = p;
 8016622:	7c7a      	ldrb	r2, [r7, #17]
 8016624:	490d      	ldr	r1, [pc, #52]	; (801665c <etharp_query+0x268>)
 8016626:	4613      	mov	r3, r2
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	4413      	add	r3, r2
 801662c:	00db      	lsls	r3, r3, #3
 801662e:	440b      	add	r3, r1
 8016630:	69fa      	ldr	r2, [r7, #28]
 8016632:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016634:	2300      	movs	r3, #0
 8016636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801663a:	e002      	b.n	8016642 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801663c:	23ff      	movs	r3, #255	; 0xff
 801663e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016646:	4618      	mov	r0, r3
 8016648:	3728      	adds	r7, #40	; 0x28
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	08021754 	.word	0x08021754
 8016654:	08021900 	.word	0x08021900
 8016658:	080217cc 	.word	0x080217cc
 801665c:	2001141c 	.word	0x2001141c
 8016660:	08021910 	.word	0x08021910
 8016664:	080218f4 	.word	0x080218f4
 8016668:	2001150c 	.word	0x2001150c
 801666c:	08021938 	.word	0x08021938

08016670 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b08a      	sub	sp, #40	; 0x28
 8016674:	af02      	add	r7, sp, #8
 8016676:	60f8      	str	r0, [r7, #12]
 8016678:	60b9      	str	r1, [r7, #8]
 801667a:	607a      	str	r2, [r7, #4]
 801667c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801667e:	2300      	movs	r3, #0
 8016680:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d106      	bne.n	8016696 <etharp_raw+0x26>
 8016688:	4b3a      	ldr	r3, [pc, #232]	; (8016774 <etharp_raw+0x104>)
 801668a:	f240 4257 	movw	r2, #1111	; 0x457
 801668e:	493a      	ldr	r1, [pc, #232]	; (8016778 <etharp_raw+0x108>)
 8016690:	483a      	ldr	r0, [pc, #232]	; (801677c <etharp_raw+0x10c>)
 8016692:	f007 f81d 	bl	801d6d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016696:	f44f 7220 	mov.w	r2, #640	; 0x280
 801669a:	211c      	movs	r1, #28
 801669c:	200e      	movs	r0, #14
 801669e:	f7f7 feb9 	bl	800e414 <pbuf_alloc>
 80166a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80166a4:	69bb      	ldr	r3, [r7, #24]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d102      	bne.n	80166b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80166aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166ae:	e05d      	b.n	801676c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80166b0:	69bb      	ldr	r3, [r7, #24]
 80166b2:	895b      	ldrh	r3, [r3, #10]
 80166b4:	2b1b      	cmp	r3, #27
 80166b6:	d806      	bhi.n	80166c6 <etharp_raw+0x56>
 80166b8:	4b2e      	ldr	r3, [pc, #184]	; (8016774 <etharp_raw+0x104>)
 80166ba:	f240 4262 	movw	r2, #1122	; 0x462
 80166be:	4930      	ldr	r1, [pc, #192]	; (8016780 <etharp_raw+0x110>)
 80166c0:	482e      	ldr	r0, [pc, #184]	; (801677c <etharp_raw+0x10c>)
 80166c2:	f007 f805 	bl	801d6d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80166c6:	69bb      	ldr	r3, [r7, #24]
 80166c8:	685b      	ldr	r3, [r3, #4]
 80166ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80166cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7f6 fd82 	bl	800d1d8 <lwip_htons>
 80166d4:	4603      	mov	r3, r0
 80166d6:	461a      	mov	r2, r3
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80166e2:	2b06      	cmp	r3, #6
 80166e4:	d006      	beq.n	80166f4 <etharp_raw+0x84>
 80166e6:	4b23      	ldr	r3, [pc, #140]	; (8016774 <etharp_raw+0x104>)
 80166e8:	f240 4269 	movw	r2, #1129	; 0x469
 80166ec:	4925      	ldr	r1, [pc, #148]	; (8016784 <etharp_raw+0x114>)
 80166ee:	4823      	ldr	r0, [pc, #140]	; (801677c <etharp_raw+0x10c>)
 80166f0:	f006 ffee 	bl	801d6d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	3308      	adds	r3, #8
 80166f8:	2206      	movs	r2, #6
 80166fa:	6839      	ldr	r1, [r7, #0]
 80166fc:	4618      	mov	r0, r3
 80166fe:	f006 ffd1 	bl	801d6a4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016702:	697b      	ldr	r3, [r7, #20]
 8016704:	3312      	adds	r3, #18
 8016706:	2206      	movs	r2, #6
 8016708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801670a:	4618      	mov	r0, r3
 801670c:	f006 ffca 	bl	801d6a4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	330e      	adds	r3, #14
 8016714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016716:	6812      	ldr	r2, [r2, #0]
 8016718:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801671a:	697b      	ldr	r3, [r7, #20]
 801671c:	3318      	adds	r3, #24
 801671e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016720:	6812      	ldr	r2, [r2, #0]
 8016722:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016724:	697b      	ldr	r3, [r7, #20]
 8016726:	2200      	movs	r2, #0
 8016728:	701a      	strb	r2, [r3, #0]
 801672a:	2200      	movs	r2, #0
 801672c:	f042 0201 	orr.w	r2, r2, #1
 8016730:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	2200      	movs	r2, #0
 8016736:	f042 0208 	orr.w	r2, r2, #8
 801673a:	709a      	strb	r2, [r3, #2]
 801673c:	2200      	movs	r2, #0
 801673e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	2206      	movs	r2, #6
 8016744:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	2204      	movs	r2, #4
 801674a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801674c:	f640 0306 	movw	r3, #2054	; 0x806
 8016750:	9300      	str	r3, [sp, #0]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	68ba      	ldr	r2, [r7, #8]
 8016756:	69b9      	ldr	r1, [r7, #24]
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	f001 fca5 	bl	80180a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801675e:	69b8      	ldr	r0, [r7, #24]
 8016760:	f7f8 f93c 	bl	800e9dc <pbuf_free>
  p = NULL;
 8016764:	2300      	movs	r3, #0
 8016766:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016768:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801676c:	4618      	mov	r0, r3
 801676e:	3720      	adds	r7, #32
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}
 8016774:	08021754 	.word	0x08021754
 8016778:	080218a4 	.word	0x080218a4
 801677c:	080217cc 	.word	0x080217cc
 8016780:	08021954 	.word	0x08021954
 8016784:	08021988 	.word	0x08021988

08016788 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b088      	sub	sp, #32
 801678c:	af04      	add	r7, sp, #16
 801678e:	60f8      	str	r0, [r7, #12]
 8016790:	60b9      	str	r1, [r7, #8]
 8016792:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80167a4:	2201      	movs	r2, #1
 80167a6:	9203      	str	r2, [sp, #12]
 80167a8:	68ba      	ldr	r2, [r7, #8]
 80167aa:	9202      	str	r2, [sp, #8]
 80167ac:	4a06      	ldr	r2, [pc, #24]	; (80167c8 <etharp_request_dst+0x40>)
 80167ae:	9201      	str	r2, [sp, #4]
 80167b0:	9300      	str	r3, [sp, #0]
 80167b2:	4603      	mov	r3, r0
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	68f8      	ldr	r0, [r7, #12]
 80167b8:	f7ff ff5a 	bl	8016670 <etharp_raw>
 80167bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	080222f8 	.word	0x080222f8

080167cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b082      	sub	sp, #8
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
 80167d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80167d6:	4a05      	ldr	r2, [pc, #20]	; (80167ec <etharp_request+0x20>)
 80167d8:	6839      	ldr	r1, [r7, #0]
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f7ff ffd4 	bl	8016788 <etharp_request_dst>
 80167e0:	4603      	mov	r3, r0
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	3708      	adds	r7, #8
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
 80167ea:	bf00      	nop
 80167ec:	080222f0 	.word	0x080222f0

080167f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b08e      	sub	sp, #56	; 0x38
 80167f4:	af04      	add	r7, sp, #16
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80167fa:	4b79      	ldr	r3, [pc, #484]	; (80169e0 <icmp_input+0x1f0>)
 80167fc:	689b      	ldr	r3, [r3, #8]
 80167fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	f003 030f 	and.w	r3, r3, #15
 8016808:	b2db      	uxtb	r3, r3
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	b2db      	uxtb	r3, r3
 801680e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016812:	2b13      	cmp	r3, #19
 8016814:	f240 80cd 	bls.w	80169b2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	895b      	ldrh	r3, [r3, #10]
 801681c:	2b03      	cmp	r3, #3
 801681e:	f240 80ca 	bls.w	80169b6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801682c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016830:	2b00      	cmp	r3, #0
 8016832:	f000 80b7 	beq.w	80169a4 <icmp_input+0x1b4>
 8016836:	2b08      	cmp	r3, #8
 8016838:	f040 80b7 	bne.w	80169aa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801683c:	4b69      	ldr	r3, [pc, #420]	; (80169e4 <icmp_input+0x1f4>)
 801683e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016840:	4b67      	ldr	r3, [pc, #412]	; (80169e0 <icmp_input+0x1f0>)
 8016842:	695b      	ldr	r3, [r3, #20]
 8016844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016848:	2be0      	cmp	r3, #224	; 0xe0
 801684a:	f000 80bb 	beq.w	80169c4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801684e:	4b64      	ldr	r3, [pc, #400]	; (80169e0 <icmp_input+0x1f0>)
 8016850:	695b      	ldr	r3, [r3, #20]
 8016852:	4a63      	ldr	r2, [pc, #396]	; (80169e0 <icmp_input+0x1f0>)
 8016854:	6812      	ldr	r2, [r2, #0]
 8016856:	4611      	mov	r1, r2
 8016858:	4618      	mov	r0, r3
 801685a:	f000 fbed 	bl	8017038 <ip4_addr_isbroadcast_u32>
 801685e:	4603      	mov	r3, r0
 8016860:	2b00      	cmp	r3, #0
 8016862:	f040 80b1 	bne.w	80169c8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	891b      	ldrh	r3, [r3, #8]
 801686a:	2b07      	cmp	r3, #7
 801686c:	f240 80a5 	bls.w	80169ba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016872:	330e      	adds	r3, #14
 8016874:	4619      	mov	r1, r3
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f7f8 f81a 	bl	800e8b0 <pbuf_add_header>
 801687c:	4603      	mov	r3, r0
 801687e:	2b00      	cmp	r3, #0
 8016880:	d04b      	beq.n	801691a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	891a      	ldrh	r2, [r3, #8]
 8016886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016888:	4413      	add	r3, r2
 801688a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	891b      	ldrh	r3, [r3, #8]
 8016890:	8b7a      	ldrh	r2, [r7, #26]
 8016892:	429a      	cmp	r2, r3
 8016894:	f0c0 809a 	bcc.w	80169cc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016898:	8b7b      	ldrh	r3, [r7, #26]
 801689a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801689e:	4619      	mov	r1, r3
 80168a0:	200e      	movs	r0, #14
 80168a2:	f7f7 fdb7 	bl	800e414 <pbuf_alloc>
 80168a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80168a8:	697b      	ldr	r3, [r7, #20]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	f000 8090 	beq.w	80169d0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	895b      	ldrh	r3, [r3, #10]
 80168b4:	461a      	mov	r2, r3
 80168b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168b8:	3308      	adds	r3, #8
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d203      	bcs.n	80168c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80168be:	6978      	ldr	r0, [r7, #20]
 80168c0:	f7f8 f88c 	bl	800e9dc <pbuf_free>
          goto icmperr;
 80168c4:	e085      	b.n	80169d2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80168c6:	697b      	ldr	r3, [r7, #20]
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80168cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80168ce:	4618      	mov	r0, r3
 80168d0:	f006 fee8 	bl	801d6a4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80168d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168d6:	4619      	mov	r1, r3
 80168d8:	6978      	ldr	r0, [r7, #20]
 80168da:	f7f7 fff9 	bl	800e8d0 <pbuf_remove_header>
 80168de:	4603      	mov	r3, r0
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d009      	beq.n	80168f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80168e4:	4b40      	ldr	r3, [pc, #256]	; (80169e8 <icmp_input+0x1f8>)
 80168e6:	22b6      	movs	r2, #182	; 0xb6
 80168e8:	4940      	ldr	r1, [pc, #256]	; (80169ec <icmp_input+0x1fc>)
 80168ea:	4841      	ldr	r0, [pc, #260]	; (80169f0 <icmp_input+0x200>)
 80168ec:	f006 fef0 	bl	801d6d0 <iprintf>
          pbuf_free(r);
 80168f0:	6978      	ldr	r0, [r7, #20]
 80168f2:	f7f8 f873 	bl	800e9dc <pbuf_free>
          goto icmperr;
 80168f6:	e06c      	b.n	80169d2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80168f8:	6879      	ldr	r1, [r7, #4]
 80168fa:	6978      	ldr	r0, [r7, #20]
 80168fc:	f7f8 f992 	bl	800ec24 <pbuf_copy>
 8016900:	4603      	mov	r3, r0
 8016902:	2b00      	cmp	r3, #0
 8016904:	d003      	beq.n	801690e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016906:	6978      	ldr	r0, [r7, #20]
 8016908:	f7f8 f868 	bl	800e9dc <pbuf_free>
          goto icmperr;
 801690c:	e061      	b.n	80169d2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f7f8 f864 	bl	800e9dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	607b      	str	r3, [r7, #4]
 8016918:	e00f      	b.n	801693a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801691a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801691c:	330e      	adds	r3, #14
 801691e:	4619      	mov	r1, r3
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	f7f7 ffd5 	bl	800e8d0 <pbuf_remove_header>
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	d006      	beq.n	801693a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801692c:	4b2e      	ldr	r3, [pc, #184]	; (80169e8 <icmp_input+0x1f8>)
 801692e:	22c7      	movs	r2, #199	; 0xc7
 8016930:	4930      	ldr	r1, [pc, #192]	; (80169f4 <icmp_input+0x204>)
 8016932:	482f      	ldr	r0, [pc, #188]	; (80169f0 <icmp_input+0x200>)
 8016934:	f006 fecc 	bl	801d6d0 <iprintf>
          goto icmperr;
 8016938:	e04b      	b.n	80169d2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	685b      	ldr	r3, [r3, #4]
 801693e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016942:	4619      	mov	r1, r3
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f7f7 ffb3 	bl	800e8b0 <pbuf_add_header>
 801694a:	4603      	mov	r3, r0
 801694c:	2b00      	cmp	r3, #0
 801694e:	d12b      	bne.n	80169a8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	685b      	ldr	r3, [r3, #4]
 8016954:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801695e:	4b20      	ldr	r3, [pc, #128]	; (80169e0 <icmp_input+0x1f0>)
 8016960:	691a      	ldr	r2, [r3, #16]
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	2200      	movs	r2, #0
 801696a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801696c:	693b      	ldr	r3, [r7, #16]
 801696e:	2200      	movs	r2, #0
 8016970:	709a      	strb	r2, [r3, #2]
 8016972:	2200      	movs	r2, #0
 8016974:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	22ff      	movs	r2, #255	; 0xff
 801697a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	2200      	movs	r2, #0
 8016980:	729a      	strb	r2, [r3, #10]
 8016982:	2200      	movs	r2, #0
 8016984:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	9302      	str	r3, [sp, #8]
 801698a:	2301      	movs	r3, #1
 801698c:	9301      	str	r3, [sp, #4]
 801698e:	2300      	movs	r3, #0
 8016990:	9300      	str	r3, [sp, #0]
 8016992:	23ff      	movs	r3, #255	; 0xff
 8016994:	2200      	movs	r2, #0
 8016996:	69f9      	ldr	r1, [r7, #28]
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	f000 fa75 	bl	8016e88 <ip4_output_if>
 801699e:	4603      	mov	r3, r0
 80169a0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80169a2:	e001      	b.n	80169a8 <icmp_input+0x1b8>
      break;
 80169a4:	bf00      	nop
 80169a6:	e000      	b.n	80169aa <icmp_input+0x1ba>
      break;
 80169a8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f7f8 f816 	bl	800e9dc <pbuf_free>
  return;
 80169b0:	e013      	b.n	80169da <icmp_input+0x1ea>
    goto lenerr;
 80169b2:	bf00      	nop
 80169b4:	e002      	b.n	80169bc <icmp_input+0x1cc>
    goto lenerr;
 80169b6:	bf00      	nop
 80169b8:	e000      	b.n	80169bc <icmp_input+0x1cc>
        goto lenerr;
 80169ba:	bf00      	nop
lenerr:
  pbuf_free(p);
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f7f8 f80d 	bl	800e9dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80169c2:	e00a      	b.n	80169da <icmp_input+0x1ea>
        goto icmperr;
 80169c4:	bf00      	nop
 80169c6:	e004      	b.n	80169d2 <icmp_input+0x1e2>
        goto icmperr;
 80169c8:	bf00      	nop
 80169ca:	e002      	b.n	80169d2 <icmp_input+0x1e2>
          goto icmperr;
 80169cc:	bf00      	nop
 80169ce:	e000      	b.n	80169d2 <icmp_input+0x1e2>
          goto icmperr;
 80169d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80169d2:	6878      	ldr	r0, [r7, #4]
 80169d4:	f7f8 f802 	bl	800e9dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80169d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80169da:	3728      	adds	r7, #40	; 0x28
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd80      	pop	{r7, pc}
 80169e0:	2000a2c0 	.word	0x2000a2c0
 80169e4:	2000a2d4 	.word	0x2000a2d4
 80169e8:	080219cc 	.word	0x080219cc
 80169ec:	08021a04 	.word	0x08021a04
 80169f0:	08021a3c 	.word	0x08021a3c
 80169f4:	08021a64 	.word	0x08021a64

080169f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
 8016a00:	460b      	mov	r3, r1
 8016a02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016a04:	78fb      	ldrb	r3, [r7, #3]
 8016a06:	461a      	mov	r2, r3
 8016a08:	2103      	movs	r1, #3
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f000 f814 	bl	8016a38 <icmp_send_response>
}
 8016a10:	bf00      	nop
 8016a12:	3708      	adds	r7, #8
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}

08016a18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b082      	sub	sp, #8
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	460b      	mov	r3, r1
 8016a22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016a24:	78fb      	ldrb	r3, [r7, #3]
 8016a26:	461a      	mov	r2, r3
 8016a28:	210b      	movs	r1, #11
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f000 f804 	bl	8016a38 <icmp_send_response>
}
 8016a30:	bf00      	nop
 8016a32:	3708      	adds	r7, #8
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}

08016a38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b08c      	sub	sp, #48	; 0x30
 8016a3c:	af04      	add	r7, sp, #16
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	460b      	mov	r3, r1
 8016a42:	70fb      	strb	r3, [r7, #3]
 8016a44:	4613      	mov	r3, r2
 8016a46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016a48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a4c:	2124      	movs	r1, #36	; 0x24
 8016a4e:	2022      	movs	r0, #34	; 0x22
 8016a50:	f7f7 fce0 	bl	800e414 <pbuf_alloc>
 8016a54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016a56:	69fb      	ldr	r3, [r7, #28]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d04c      	beq.n	8016af6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	895b      	ldrh	r3, [r3, #10]
 8016a60:	2b23      	cmp	r3, #35	; 0x23
 8016a62:	d806      	bhi.n	8016a72 <icmp_send_response+0x3a>
 8016a64:	4b26      	ldr	r3, [pc, #152]	; (8016b00 <icmp_send_response+0xc8>)
 8016a66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016a6a:	4926      	ldr	r1, [pc, #152]	; (8016b04 <icmp_send_response+0xcc>)
 8016a6c:	4826      	ldr	r0, [pc, #152]	; (8016b08 <icmp_send_response+0xd0>)
 8016a6e:	f006 fe2f 	bl	801d6d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	685b      	ldr	r3, [r3, #4]
 8016a76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016a78:	69fb      	ldr	r3, [r7, #28]
 8016a7a:	685b      	ldr	r3, [r3, #4]
 8016a7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	78fa      	ldrb	r2, [r7, #3]
 8016a82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	78ba      	ldrb	r2, [r7, #2]
 8016a88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	711a      	strb	r2, [r3, #4]
 8016a90:	2200      	movs	r2, #0
 8016a92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	2200      	movs	r2, #0
 8016a98:	719a      	strb	r2, [r3, #6]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016a9e:	69fb      	ldr	r3, [r7, #28]
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	f103 0008 	add.w	r0, r3, #8
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	685b      	ldr	r3, [r3, #4]
 8016aaa:	221c      	movs	r2, #28
 8016aac:	4619      	mov	r1, r3
 8016aae:	f006 fdf9 	bl	801d6a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016ab2:	69bb      	ldr	r3, [r7, #24]
 8016ab4:	68db      	ldr	r3, [r3, #12]
 8016ab6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016ab8:	f107 030c 	add.w	r3, r7, #12
 8016abc:	4618      	mov	r0, r3
 8016abe:	f000 f825 	bl	8016b0c <ip4_route>
 8016ac2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d011      	beq.n	8016aee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	2200      	movs	r2, #0
 8016ace:	709a      	strb	r2, [r3, #2]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016ad4:	f107 020c 	add.w	r2, r7, #12
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	9302      	str	r3, [sp, #8]
 8016adc:	2301      	movs	r3, #1
 8016ade:	9301      	str	r3, [sp, #4]
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	9300      	str	r3, [sp, #0]
 8016ae4:	23ff      	movs	r3, #255	; 0xff
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	69f8      	ldr	r0, [r7, #28]
 8016aea:	f000 f9cd 	bl	8016e88 <ip4_output_if>
  }
  pbuf_free(q);
 8016aee:	69f8      	ldr	r0, [r7, #28]
 8016af0:	f7f7 ff74 	bl	800e9dc <pbuf_free>
 8016af4:	e000      	b.n	8016af8 <icmp_send_response+0xc0>
    return;
 8016af6:	bf00      	nop
}
 8016af8:	3720      	adds	r7, #32
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}
 8016afe:	bf00      	nop
 8016b00:	080219cc 	.word	0x080219cc
 8016b04:	08021a98 	.word	0x08021a98
 8016b08:	08021a3c 	.word	0x08021a3c

08016b0c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016b0c:	b480      	push	{r7}
 8016b0e:	b085      	sub	sp, #20
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016b14:	4b33      	ldr	r3, [pc, #204]	; (8016be4 <ip4_route+0xd8>)
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	60fb      	str	r3, [r7, #12]
 8016b1a:	e036      	b.n	8016b8a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b22:	f003 0301 	and.w	r3, r3, #1
 8016b26:	b2db      	uxtb	r3, r3
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d02b      	beq.n	8016b84 <ip4_route+0x78>
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b32:	089b      	lsrs	r3, r3, #2
 8016b34:	f003 0301 	and.w	r3, r3, #1
 8016b38:	b2db      	uxtb	r3, r3
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d022      	beq.n	8016b84 <ip4_route+0x78>
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	3304      	adds	r3, #4
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d01d      	beq.n	8016b84 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	3304      	adds	r3, #4
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	405a      	eors	r2, r3
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	3308      	adds	r3, #8
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4013      	ands	r3, r2
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d101      	bne.n	8016b64 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	e038      	b.n	8016bd6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b6a:	f003 0302 	and.w	r3, r3, #2
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d108      	bne.n	8016b84 <ip4_route+0x78>
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	330c      	adds	r3, #12
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	d101      	bne.n	8016b84 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	e028      	b.n	8016bd6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	60fb      	str	r3, [r7, #12]
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d1c5      	bne.n	8016b1c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b90:	4b15      	ldr	r3, [pc, #84]	; (8016be8 <ip4_route+0xdc>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d01a      	beq.n	8016bce <ip4_route+0xc2>
 8016b98:	4b13      	ldr	r3, [pc, #76]	; (8016be8 <ip4_route+0xdc>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ba0:	f003 0301 	and.w	r3, r3, #1
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d012      	beq.n	8016bce <ip4_route+0xc2>
 8016ba8:	4b0f      	ldr	r3, [pc, #60]	; (8016be8 <ip4_route+0xdc>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bb0:	f003 0304 	and.w	r3, r3, #4
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d00a      	beq.n	8016bce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016bb8:	4b0b      	ldr	r3, [pc, #44]	; (8016be8 <ip4_route+0xdc>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	3304      	adds	r3, #4
 8016bbe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d004      	beq.n	8016bce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	b2db      	uxtb	r3, r3
 8016bca:	2b7f      	cmp	r3, #127	; 0x7f
 8016bcc:	d101      	bne.n	8016bd2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	e001      	b.n	8016bd6 <ip4_route+0xca>
  }

  return netif_default;
 8016bd2:	4b05      	ldr	r3, [pc, #20]	; (8016be8 <ip4_route+0xdc>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3714      	adds	r7, #20
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr
 8016be2:	bf00      	nop
 8016be4:	200113b0 	.word	0x200113b0
 8016be8:	200113b4 	.word	0x200113b4

08016bec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bfa:	f003 0301 	and.w	r3, r3, #1
 8016bfe:	b2db      	uxtb	r3, r3
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d016      	beq.n	8016c32 <ip4_input_accept+0x46>
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	3304      	adds	r3, #4
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d011      	beq.n	8016c32 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c0e:	4b0b      	ldr	r3, [pc, #44]	; (8016c3c <ip4_input_accept+0x50>)
 8016c10:	695a      	ldr	r2, [r3, #20]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	3304      	adds	r3, #4
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d008      	beq.n	8016c2e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016c1c:	4b07      	ldr	r3, [pc, #28]	; (8016c3c <ip4_input_accept+0x50>)
 8016c1e:	695b      	ldr	r3, [r3, #20]
 8016c20:	6879      	ldr	r1, [r7, #4]
 8016c22:	4618      	mov	r0, r3
 8016c24:	f000 fa08 	bl	8017038 <ip4_addr_isbroadcast_u32>
 8016c28:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d001      	beq.n	8016c32 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016c2e:	2301      	movs	r3, #1
 8016c30:	e000      	b.n	8016c34 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016c32:	2300      	movs	r3, #0
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}
 8016c3c:	2000a2c0 	.word	0x2000a2c0

08016c40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b086      	sub	sp, #24
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	091b      	lsrs	r3, r3, #4
 8016c56:	b2db      	uxtb	r3, r3
 8016c58:	2b04      	cmp	r3, #4
 8016c5a:	d004      	beq.n	8016c66 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f7f7 febd 	bl	800e9dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016c62:	2300      	movs	r3, #0
 8016c64:	e107      	b.n	8016e76 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	781b      	ldrb	r3, [r3, #0]
 8016c6a:	f003 030f 	and.w	r3, r3, #15
 8016c6e:	b2db      	uxtb	r3, r3
 8016c70:	009b      	lsls	r3, r3, #2
 8016c72:	b2db      	uxtb	r3, r3
 8016c74:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	885b      	ldrh	r3, [r3, #2]
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7f6 faab 	bl	800d1d8 <lwip_htons>
 8016c82:	4603      	mov	r3, r0
 8016c84:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	891b      	ldrh	r3, [r3, #8]
 8016c8a:	89ba      	ldrh	r2, [r7, #12]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d204      	bcs.n	8016c9a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016c90:	89bb      	ldrh	r3, [r7, #12]
 8016c92:	4619      	mov	r1, r3
 8016c94:	6878      	ldr	r0, [r7, #4]
 8016c96:	f7f7 fd1b 	bl	800e6d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	895b      	ldrh	r3, [r3, #10]
 8016c9e:	89fa      	ldrh	r2, [r7, #14]
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d807      	bhi.n	8016cb4 <ip4_input+0x74>
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	891b      	ldrh	r3, [r3, #8]
 8016ca8:	89ba      	ldrh	r2, [r7, #12]
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d802      	bhi.n	8016cb4 <ip4_input+0x74>
 8016cae:	89fb      	ldrh	r3, [r7, #14]
 8016cb0:	2b13      	cmp	r3, #19
 8016cb2:	d804      	bhi.n	8016cbe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f7f7 fe91 	bl	800e9dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	e0db      	b.n	8016e76 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016cbe:	697b      	ldr	r3, [r7, #20]
 8016cc0:	691b      	ldr	r3, [r3, #16]
 8016cc2:	4a6f      	ldr	r2, [pc, #444]	; (8016e80 <ip4_input+0x240>)
 8016cc4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	68db      	ldr	r3, [r3, #12]
 8016cca:	4a6d      	ldr	r2, [pc, #436]	; (8016e80 <ip4_input+0x240>)
 8016ccc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016cce:	4b6c      	ldr	r3, [pc, #432]	; (8016e80 <ip4_input+0x240>)
 8016cd0:	695b      	ldr	r3, [r3, #20]
 8016cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016cd6:	2be0      	cmp	r3, #224	; 0xe0
 8016cd8:	d112      	bne.n	8016d00 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ce0:	f003 0301 	and.w	r3, r3, #1
 8016ce4:	b2db      	uxtb	r3, r3
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d007      	beq.n	8016cfa <ip4_input+0xba>
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	3304      	adds	r3, #4
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d002      	beq.n	8016cfa <ip4_input+0xba>
      netif = inp;
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	613b      	str	r3, [r7, #16]
 8016cf8:	e02a      	b.n	8016d50 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	613b      	str	r3, [r7, #16]
 8016cfe:	e027      	b.n	8016d50 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016d00:	6838      	ldr	r0, [r7, #0]
 8016d02:	f7ff ff73 	bl	8016bec <ip4_input_accept>
 8016d06:	4603      	mov	r3, r0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d002      	beq.n	8016d12 <ip4_input+0xd2>
      netif = inp;
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	613b      	str	r3, [r7, #16]
 8016d10:	e01e      	b.n	8016d50 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d12:	2300      	movs	r3, #0
 8016d14:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016d16:	4b5a      	ldr	r3, [pc, #360]	; (8016e80 <ip4_input+0x240>)
 8016d18:	695b      	ldr	r3, [r3, #20]
 8016d1a:	b2db      	uxtb	r3, r3
 8016d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8016d1e:	d017      	beq.n	8016d50 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016d20:	4b58      	ldr	r3, [pc, #352]	; (8016e84 <ip4_input+0x244>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	613b      	str	r3, [r7, #16]
 8016d26:	e00e      	b.n	8016d46 <ip4_input+0x106>
          if (netif == inp) {
 8016d28:	693a      	ldr	r2, [r7, #16]
 8016d2a:	683b      	ldr	r3, [r7, #0]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d006      	beq.n	8016d3e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016d30:	6938      	ldr	r0, [r7, #16]
 8016d32:	f7ff ff5b 	bl	8016bec <ip4_input_accept>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d108      	bne.n	8016d4e <ip4_input+0x10e>
 8016d3c:	e000      	b.n	8016d40 <ip4_input+0x100>
            continue;
 8016d3e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	613b      	str	r3, [r7, #16]
 8016d46:	693b      	ldr	r3, [r7, #16]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d1ed      	bne.n	8016d28 <ip4_input+0xe8>
 8016d4c:	e000      	b.n	8016d50 <ip4_input+0x110>
            break;
 8016d4e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d50:	4b4b      	ldr	r3, [pc, #300]	; (8016e80 <ip4_input+0x240>)
 8016d52:	691b      	ldr	r3, [r3, #16]
 8016d54:	6839      	ldr	r1, [r7, #0]
 8016d56:	4618      	mov	r0, r3
 8016d58:	f000 f96e 	bl	8017038 <ip4_addr_isbroadcast_u32>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d105      	bne.n	8016d6e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016d62:	4b47      	ldr	r3, [pc, #284]	; (8016e80 <ip4_input+0x240>)
 8016d64:	691b      	ldr	r3, [r3, #16]
 8016d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d6a:	2be0      	cmp	r3, #224	; 0xe0
 8016d6c:	d104      	bne.n	8016d78 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f7f7 fe34 	bl	800e9dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016d74:	2300      	movs	r3, #0
 8016d76:	e07e      	b.n	8016e76 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d104      	bne.n	8016d88 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f7f7 fe2c 	bl	800e9dc <pbuf_free>
    return ERR_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	e076      	b.n	8016e76 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	88db      	ldrh	r3, [r3, #6]
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	461a      	mov	r2, r3
 8016d90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016d94:	4013      	ands	r3, r2
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d00b      	beq.n	8016db2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f000 fdbc 	bl	8017918 <ip4_reass>
 8016da0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d101      	bne.n	8016dac <ip4_input+0x16c>
      return ERR_OK;
 8016da8:	2300      	movs	r3, #0
 8016daa:	e064      	b.n	8016e76 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016db2:	4a33      	ldr	r2, [pc, #204]	; (8016e80 <ip4_input+0x240>)
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016db8:	4a31      	ldr	r2, [pc, #196]	; (8016e80 <ip4_input+0x240>)
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016dbe:	4a30      	ldr	r2, [pc, #192]	; (8016e80 <ip4_input+0x240>)
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	f003 030f 	and.w	r3, r3, #15
 8016dcc:	b2db      	uxtb	r3, r3
 8016dce:	009b      	lsls	r3, r3, #2
 8016dd0:	b2db      	uxtb	r3, r3
 8016dd2:	b29a      	uxth	r2, r3
 8016dd4:	4b2a      	ldr	r3, [pc, #168]	; (8016e80 <ip4_input+0x240>)
 8016dd6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016dd8:	89fb      	ldrh	r3, [r7, #14]
 8016dda:	4619      	mov	r1, r3
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f7f7 fd77 	bl	800e8d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	7a5b      	ldrb	r3, [r3, #9]
 8016de6:	2b11      	cmp	r3, #17
 8016de8:	d006      	beq.n	8016df8 <ip4_input+0x1b8>
 8016dea:	2b11      	cmp	r3, #17
 8016dec:	dc13      	bgt.n	8016e16 <ip4_input+0x1d6>
 8016dee:	2b01      	cmp	r3, #1
 8016df0:	d00c      	beq.n	8016e0c <ip4_input+0x1cc>
 8016df2:	2b06      	cmp	r3, #6
 8016df4:	d005      	beq.n	8016e02 <ip4_input+0x1c2>
 8016df6:	e00e      	b.n	8016e16 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f7fe faec 	bl	80153d8 <udp_input>
        break;
 8016e00:	e026      	b.n	8016e50 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016e02:	6839      	ldr	r1, [r7, #0]
 8016e04:	6878      	ldr	r0, [r7, #4]
 8016e06:	f7f9 fea5 	bl	8010b54 <tcp_input>
        break;
 8016e0a:	e021      	b.n	8016e50 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016e0c:	6839      	ldr	r1, [r7, #0]
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f7ff fcee 	bl	80167f0 <icmp_input>
        break;
 8016e14:	e01c      	b.n	8016e50 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e16:	4b1a      	ldr	r3, [pc, #104]	; (8016e80 <ip4_input+0x240>)
 8016e18:	695b      	ldr	r3, [r3, #20]
 8016e1a:	6939      	ldr	r1, [r7, #16]
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f000 f90b 	bl	8017038 <ip4_addr_isbroadcast_u32>
 8016e22:	4603      	mov	r3, r0
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d10f      	bne.n	8016e48 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e28:	4b15      	ldr	r3, [pc, #84]	; (8016e80 <ip4_input+0x240>)
 8016e2a:	695b      	ldr	r3, [r3, #20]
 8016e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e30:	2be0      	cmp	r3, #224	; 0xe0
 8016e32:	d009      	beq.n	8016e48 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016e38:	4619      	mov	r1, r3
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f7f7 fdbb 	bl	800e9b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016e40:	2102      	movs	r1, #2
 8016e42:	6878      	ldr	r0, [r7, #4]
 8016e44:	f7ff fdd8 	bl	80169f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f7f7 fdc7 	bl	800e9dc <pbuf_free>
        break;
 8016e4e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016e50:	4b0b      	ldr	r3, [pc, #44]	; (8016e80 <ip4_input+0x240>)
 8016e52:	2200      	movs	r2, #0
 8016e54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016e56:	4b0a      	ldr	r3, [pc, #40]	; (8016e80 <ip4_input+0x240>)
 8016e58:	2200      	movs	r2, #0
 8016e5a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016e5c:	4b08      	ldr	r3, [pc, #32]	; (8016e80 <ip4_input+0x240>)
 8016e5e:	2200      	movs	r2, #0
 8016e60:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016e62:	4b07      	ldr	r3, [pc, #28]	; (8016e80 <ip4_input+0x240>)
 8016e64:	2200      	movs	r2, #0
 8016e66:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016e68:	4b05      	ldr	r3, [pc, #20]	; (8016e80 <ip4_input+0x240>)
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016e6e:	4b04      	ldr	r3, [pc, #16]	; (8016e80 <ip4_input+0x240>)
 8016e70:	2200      	movs	r2, #0
 8016e72:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016e74:	2300      	movs	r3, #0
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	3718      	adds	r7, #24
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}
 8016e7e:	bf00      	nop
 8016e80:	2000a2c0 	.word	0x2000a2c0
 8016e84:	200113b0 	.word	0x200113b0

08016e88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b08a      	sub	sp, #40	; 0x28
 8016e8c:	af04      	add	r7, sp, #16
 8016e8e:	60f8      	str	r0, [r7, #12]
 8016e90:	60b9      	str	r1, [r7, #8]
 8016e92:	607a      	str	r2, [r7, #4]
 8016e94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016e96:	68bb      	ldr	r3, [r7, #8]
 8016e98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d009      	beq.n	8016eb4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d003      	beq.n	8016eae <ip4_output_if+0x26>
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d102      	bne.n	8016eb4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb0:	3304      	adds	r3, #4
 8016eb2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016eb4:	78fa      	ldrb	r2, [r7, #3]
 8016eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb8:	9302      	str	r3, [sp, #8]
 8016eba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ebe:	9301      	str	r3, [sp, #4]
 8016ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016ec4:	9300      	str	r3, [sp, #0]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	6979      	ldr	r1, [r7, #20]
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f000 f805 	bl	8016edc <ip4_output_if_src>
 8016ed2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3718      	adds	r7, #24
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}

08016edc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b088      	sub	sp, #32
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	607a      	str	r2, [r7, #4]
 8016ee8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	7b9b      	ldrb	r3, [r3, #14]
 8016eee:	2b01      	cmp	r3, #1
 8016ef0:	d006      	beq.n	8016f00 <ip4_output_if_src+0x24>
 8016ef2:	4b4b      	ldr	r3, [pc, #300]	; (8017020 <ip4_output_if_src+0x144>)
 8016ef4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016ef8:	494a      	ldr	r1, [pc, #296]	; (8017024 <ip4_output_if_src+0x148>)
 8016efa:	484b      	ldr	r0, [pc, #300]	; (8017028 <ip4_output_if_src+0x14c>)
 8016efc:	f006 fbe8 	bl	801d6d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d060      	beq.n	8016fc8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016f06:	2314      	movs	r3, #20
 8016f08:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016f0a:	2114      	movs	r1, #20
 8016f0c:	68f8      	ldr	r0, [r7, #12]
 8016f0e:	f7f7 fccf 	bl	800e8b0 <pbuf_add_header>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d002      	beq.n	8016f1e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f18:	f06f 0301 	mvn.w	r3, #1
 8016f1c:	e07c      	b.n	8017018 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	895b      	ldrh	r3, [r3, #10]
 8016f28:	2b13      	cmp	r3, #19
 8016f2a:	d806      	bhi.n	8016f3a <ip4_output_if_src+0x5e>
 8016f2c:	4b3c      	ldr	r3, [pc, #240]	; (8017020 <ip4_output_if_src+0x144>)
 8016f2e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016f32:	493e      	ldr	r1, [pc, #248]	; (801702c <ip4_output_if_src+0x150>)
 8016f34:	483c      	ldr	r0, [pc, #240]	; (8017028 <ip4_output_if_src+0x14c>)
 8016f36:	f006 fbcb 	bl	801d6d0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016f3a:	69fb      	ldr	r3, [r7, #28]
 8016f3c:	78fa      	ldrb	r2, [r7, #3]
 8016f3e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016f40:	69fb      	ldr	r3, [r7, #28]
 8016f42:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016f46:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	681a      	ldr	r2, [r3, #0]
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016f50:	8b7b      	ldrh	r3, [r7, #26]
 8016f52:	089b      	lsrs	r3, r3, #2
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	b2db      	uxtb	r3, r3
 8016f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f5c:	b2da      	uxtb	r2, r3
 8016f5e:	69fb      	ldr	r3, [r7, #28]
 8016f60:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016f68:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	891b      	ldrh	r3, [r3, #8]
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7f6 f932 	bl	800d1d8 <lwip_htons>
 8016f74:	4603      	mov	r3, r0
 8016f76:	461a      	mov	r2, r3
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	719a      	strb	r2, [r3, #6]
 8016f82:	2200      	movs	r2, #0
 8016f84:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016f86:	4b2a      	ldr	r3, [pc, #168]	; (8017030 <ip4_output_if_src+0x154>)
 8016f88:	881b      	ldrh	r3, [r3, #0]
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7f6 f924 	bl	800d1d8 <lwip_htons>
 8016f90:	4603      	mov	r3, r0
 8016f92:	461a      	mov	r2, r3
 8016f94:	69fb      	ldr	r3, [r7, #28]
 8016f96:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016f98:	4b25      	ldr	r3, [pc, #148]	; (8017030 <ip4_output_if_src+0x154>)
 8016f9a:	881b      	ldrh	r3, [r3, #0]
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	4b23      	ldr	r3, [pc, #140]	; (8017030 <ip4_output_if_src+0x154>)
 8016fa2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d104      	bne.n	8016fb4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016faa:	4b22      	ldr	r3, [pc, #136]	; (8017034 <ip4_output_if_src+0x158>)
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	69fb      	ldr	r3, [r7, #28]
 8016fb0:	60da      	str	r2, [r3, #12]
 8016fb2:	e003      	b.n	8016fbc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	681a      	ldr	r2, [r3, #0]
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016fbc:	69fb      	ldr	r3, [r7, #28]
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	729a      	strb	r2, [r3, #10]
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	72da      	strb	r2, [r3, #11]
 8016fc6:	e00f      	b.n	8016fe8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	895b      	ldrh	r3, [r3, #10]
 8016fcc:	2b13      	cmp	r3, #19
 8016fce:	d802      	bhi.n	8016fd6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016fd0:	f06f 0301 	mvn.w	r3, #1
 8016fd4:	e020      	b.n	8017018 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	685b      	ldr	r3, [r3, #4]
 8016fda:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016fdc:	69fb      	ldr	r3, [r7, #28]
 8016fde:	691b      	ldr	r3, [r3, #16]
 8016fe0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016fe2:	f107 0314 	add.w	r3, r7, #20
 8016fe6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d00c      	beq.n	801700a <ip4_output_if_src+0x12e>
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	891a      	ldrh	r2, [r3, #8]
 8016ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ff8:	429a      	cmp	r2, r3
 8016ffa:	d906      	bls.n	801700a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017000:	68f8      	ldr	r0, [r7, #12]
 8017002:	f000 fe7d 	bl	8017d00 <ip4_frag>
 8017006:	4603      	mov	r3, r0
 8017008:	e006      	b.n	8017018 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801700c:	695b      	ldr	r3, [r3, #20]
 801700e:	687a      	ldr	r2, [r7, #4]
 8017010:	68f9      	ldr	r1, [r7, #12]
 8017012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017014:	4798      	blx	r3
 8017016:	4603      	mov	r3, r0
}
 8017018:	4618      	mov	r0, r3
 801701a:	3720      	adds	r7, #32
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	08021ac4 	.word	0x08021ac4
 8017024:	08021af8 	.word	0x08021af8
 8017028:	08021b04 	.word	0x08021b04
 801702c:	08021b2c 	.word	0x08021b2c
 8017030:	2001150e 	.word	0x2001150e
 8017034:	080222ec 	.word	0x080222ec

08017038 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017038:	b480      	push	{r7}
 801703a:	b085      	sub	sp, #20
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801704c:	d002      	beq.n	8017054 <ip4_addr_isbroadcast_u32+0x1c>
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d101      	bne.n	8017058 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017054:	2301      	movs	r3, #1
 8017056:	e02a      	b.n	80170ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801705e:	f003 0302 	and.w	r3, r3, #2
 8017062:	2b00      	cmp	r3, #0
 8017064:	d101      	bne.n	801706a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017066:	2300      	movs	r3, #0
 8017068:	e021      	b.n	80170ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	3304      	adds	r3, #4
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	687a      	ldr	r2, [r7, #4]
 8017072:	429a      	cmp	r2, r3
 8017074:	d101      	bne.n	801707a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017076:	2300      	movs	r3, #0
 8017078:	e019      	b.n	80170ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801707a:	68fa      	ldr	r2, [r7, #12]
 801707c:	683b      	ldr	r3, [r7, #0]
 801707e:	3304      	adds	r3, #4
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	405a      	eors	r2, r3
 8017084:	683b      	ldr	r3, [r7, #0]
 8017086:	3308      	adds	r3, #8
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	4013      	ands	r3, r2
 801708c:	2b00      	cmp	r3, #0
 801708e:	d10d      	bne.n	80170ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	3308      	adds	r3, #8
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	43da      	mvns	r2, r3
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	3308      	adds	r3, #8
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d101      	bne.n	80170ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80170a8:	2301      	movs	r3, #1
 80170aa:	e000      	b.n	80170ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80170ac:	2300      	movs	r3, #0
  }
}
 80170ae:	4618      	mov	r0, r3
 80170b0:	3714      	adds	r7, #20
 80170b2:	46bd      	mov	sp, r7
 80170b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b8:	4770      	bx	lr
	...

080170bc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b08a      	sub	sp, #40	; 0x28
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
 80170c4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80170c6:	f107 030c 	add.w	r3, r7, #12
 80170ca:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80170d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80170d8:	3301      	adds	r3, #1
 80170da:	4a89      	ldr	r2, [pc, #548]	; (8017300 <ip4addr_aton+0x244>)
 80170dc:	4413      	add	r3, r2
 80170de:	781b      	ldrb	r3, [r3, #0]
 80170e0:	f003 0304 	and.w	r3, r3, #4
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d101      	bne.n	80170ec <ip4addr_aton+0x30>
      return 0;
 80170e8:	2300      	movs	r3, #0
 80170ea:	e105      	b.n	80172f8 <ip4addr_aton+0x23c>
    }
    val = 0;
 80170ec:	2300      	movs	r3, #0
 80170ee:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80170f0:	230a      	movs	r3, #10
 80170f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 80170f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80170fa:	2b30      	cmp	r3, #48	; 0x30
 80170fc:	d11c      	bne.n	8017138 <ip4addr_aton+0x7c>
      c = *++cp;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	3301      	adds	r3, #1
 8017102:	607b      	str	r3, [r7, #4]
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801710c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017110:	2b78      	cmp	r3, #120	; 0x78
 8017112:	d003      	beq.n	801711c <ip4addr_aton+0x60>
 8017114:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017118:	2b58      	cmp	r3, #88	; 0x58
 801711a:	d10a      	bne.n	8017132 <ip4addr_aton+0x76>
        base = 16;
 801711c:	2310      	movs	r3, #16
 801711e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	3301      	adds	r3, #1
 8017126:	607b      	str	r3, [r7, #4]
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017130:	e002      	b.n	8017138 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8017132:	2308      	movs	r3, #8
 8017134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8017138:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801713c:	3301      	adds	r3, #1
 801713e:	4a70      	ldr	r2, [pc, #448]	; (8017300 <ip4addr_aton+0x244>)
 8017140:	4413      	add	r3, r2
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	f003 0304 	and.w	r3, r3, #4
 8017148:	2b00      	cmp	r3, #0
 801714a:	d011      	beq.n	8017170 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801714c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017152:	fb03 f202 	mul.w	r2, r3, r2
 8017156:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801715a:	4413      	add	r3, r2
 801715c:	3b30      	subs	r3, #48	; 0x30
 801715e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	3301      	adds	r3, #1
 8017164:	607b      	str	r3, [r7, #4]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801716e:	e7e3      	b.n	8017138 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8017170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017174:	2b10      	cmp	r3, #16
 8017176:	d127      	bne.n	80171c8 <ip4addr_aton+0x10c>
 8017178:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801717c:	3301      	adds	r3, #1
 801717e:	4a60      	ldr	r2, [pc, #384]	; (8017300 <ip4addr_aton+0x244>)
 8017180:	4413      	add	r3, r2
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017188:	2b00      	cmp	r3, #0
 801718a:	d01d      	beq.n	80171c8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718e:	011b      	lsls	r3, r3, #4
 8017190:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017194:	f102 010a 	add.w	r1, r2, #10
 8017198:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801719c:	3201      	adds	r2, #1
 801719e:	4858      	ldr	r0, [pc, #352]	; (8017300 <ip4addr_aton+0x244>)
 80171a0:	4402      	add	r2, r0
 80171a2:	7812      	ldrb	r2, [r2, #0]
 80171a4:	f002 0203 	and.w	r2, r2, #3
 80171a8:	2a02      	cmp	r2, #2
 80171aa:	d101      	bne.n	80171b0 <ip4addr_aton+0xf4>
 80171ac:	2261      	movs	r2, #97	; 0x61
 80171ae:	e000      	b.n	80171b2 <ip4addr_aton+0xf6>
 80171b0:	2241      	movs	r2, #65	; 0x41
 80171b2:	1a8a      	subs	r2, r1, r2
 80171b4:	4313      	orrs	r3, r2
 80171b6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	3301      	adds	r3, #1
 80171bc:	607b      	str	r3, [r7, #4]
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 80171c6:	e7b7      	b.n	8017138 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80171c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171cc:	2b2e      	cmp	r3, #46	; 0x2e
 80171ce:	d114      	bne.n	80171fa <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80171d0:	f107 030c 	add.w	r3, r7, #12
 80171d4:	330c      	adds	r3, #12
 80171d6:	69fa      	ldr	r2, [r7, #28]
 80171d8:	429a      	cmp	r2, r3
 80171da:	d301      	bcc.n	80171e0 <ip4addr_aton+0x124>
        return 0;
 80171dc:	2300      	movs	r3, #0
 80171de:	e08b      	b.n	80172f8 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80171e0:	69fb      	ldr	r3, [r7, #28]
 80171e2:	1d1a      	adds	r2, r3, #4
 80171e4:	61fa      	str	r2, [r7, #28]
 80171e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171e8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	3301      	adds	r3, #1
 80171ee:	607b      	str	r3, [r7, #4]
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80171f8:	e76c      	b.n	80170d4 <ip4addr_aton+0x18>
    } else {
      break;
 80171fa:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80171fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017200:	2b00      	cmp	r3, #0
 8017202:	d00b      	beq.n	801721c <ip4addr_aton+0x160>
 8017204:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017208:	3301      	adds	r3, #1
 801720a:	4a3d      	ldr	r2, [pc, #244]	; (8017300 <ip4addr_aton+0x244>)
 801720c:	4413      	add	r3, r2
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	f003 0308 	and.w	r3, r3, #8
 8017214:	2b00      	cmp	r3, #0
 8017216:	d101      	bne.n	801721c <ip4addr_aton+0x160>
    return 0;
 8017218:	2300      	movs	r3, #0
 801721a:	e06d      	b.n	80172f8 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801721c:	f107 030c 	add.w	r3, r7, #12
 8017220:	69fa      	ldr	r2, [r7, #28]
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	109b      	asrs	r3, r3, #2
 8017226:	3301      	adds	r3, #1
 8017228:	2b04      	cmp	r3, #4
 801722a:	d853      	bhi.n	80172d4 <ip4addr_aton+0x218>
 801722c:	a201      	add	r2, pc, #4	; (adr r2, 8017234 <ip4addr_aton+0x178>)
 801722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017232:	bf00      	nop
 8017234:	08017249 	.word	0x08017249
 8017238:	080172e3 	.word	0x080172e3
 801723c:	0801724d 	.word	0x0801724d
 8017240:	0801726f 	.word	0x0801726f
 8017244:	0801729d 	.word	0x0801729d

    case 0:
      return 0;       /* initial nondigit */
 8017248:	2300      	movs	r3, #0
 801724a:	e055      	b.n	80172f8 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801724e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017252:	d301      	bcc.n	8017258 <ip4addr_aton+0x19c>
        return 0;
 8017254:	2300      	movs	r3, #0
 8017256:	e04f      	b.n	80172f8 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	2bff      	cmp	r3, #255	; 0xff
 801725c:	d901      	bls.n	8017262 <ip4addr_aton+0x1a6>
        return 0;
 801725e:	2300      	movs	r3, #0
 8017260:	e04a      	b.n	80172f8 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	061b      	lsls	r3, r3, #24
 8017266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017268:	4313      	orrs	r3, r2
 801726a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801726c:	e03a      	b.n	80172e4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017274:	d301      	bcc.n	801727a <ip4addr_aton+0x1be>
        return 0;
 8017276:	2300      	movs	r3, #0
 8017278:	e03e      	b.n	80172f8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	2bff      	cmp	r3, #255	; 0xff
 801727e:	d802      	bhi.n	8017286 <ip4addr_aton+0x1ca>
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	2bff      	cmp	r3, #255	; 0xff
 8017284:	d901      	bls.n	801728a <ip4addr_aton+0x1ce>
        return 0;
 8017286:	2300      	movs	r3, #0
 8017288:	e036      	b.n	80172f8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	061a      	lsls	r2, r3, #24
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	041b      	lsls	r3, r3, #16
 8017292:	4313      	orrs	r3, r2
 8017294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017296:	4313      	orrs	r3, r2
 8017298:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801729a:	e023      	b.n	80172e4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801729e:	2bff      	cmp	r3, #255	; 0xff
 80172a0:	d901      	bls.n	80172a6 <ip4addr_aton+0x1ea>
        return 0;
 80172a2:	2300      	movs	r3, #0
 80172a4:	e028      	b.n	80172f8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	2bff      	cmp	r3, #255	; 0xff
 80172aa:	d805      	bhi.n	80172b8 <ip4addr_aton+0x1fc>
 80172ac:	693b      	ldr	r3, [r7, #16]
 80172ae:	2bff      	cmp	r3, #255	; 0xff
 80172b0:	d802      	bhi.n	80172b8 <ip4addr_aton+0x1fc>
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	2bff      	cmp	r3, #255	; 0xff
 80172b6:	d901      	bls.n	80172bc <ip4addr_aton+0x200>
        return 0;
 80172b8:	2300      	movs	r3, #0
 80172ba:	e01d      	b.n	80172f8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	061a      	lsls	r2, r3, #24
 80172c0:	693b      	ldr	r3, [r7, #16]
 80172c2:	041b      	lsls	r3, r3, #16
 80172c4:	431a      	orrs	r2, r3
 80172c6:	697b      	ldr	r3, [r7, #20]
 80172c8:	021b      	lsls	r3, r3, #8
 80172ca:	4313      	orrs	r3, r2
 80172cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172ce:	4313      	orrs	r3, r2
 80172d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80172d2:	e007      	b.n	80172e4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80172d4:	4b0b      	ldr	r3, [pc, #44]	; (8017304 <ip4addr_aton+0x248>)
 80172d6:	22f9      	movs	r2, #249	; 0xf9
 80172d8:	490b      	ldr	r1, [pc, #44]	; (8017308 <ip4addr_aton+0x24c>)
 80172da:	480c      	ldr	r0, [pc, #48]	; (801730c <ip4addr_aton+0x250>)
 80172dc:	f006 f9f8 	bl	801d6d0 <iprintf>
      break;
 80172e0:	e000      	b.n	80172e4 <ip4addr_aton+0x228>
      break;
 80172e2:	bf00      	nop
  }
  if (addr) {
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d005      	beq.n	80172f6 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80172ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172ec:	f7f5 ff89 	bl	800d202 <lwip_htonl>
 80172f0:	4602      	mov	r2, r0
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80172f6:	2301      	movs	r3, #1
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	3728      	adds	r7, #40	; 0x28
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}
 8017300:	0802233c 	.word	0x0802233c
 8017304:	08021b5c 	.word	0x08021b5c
 8017308:	08021b98 	.word	0x08021b98
 801730c:	08021ba4 	.word	0x08021ba4

08017310 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b084      	sub	sp, #16
 8017314:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017316:	2300      	movs	r3, #0
 8017318:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801731a:	4b12      	ldr	r3, [pc, #72]	; (8017364 <ip_reass_tmr+0x54>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017320:	e018      	b.n	8017354 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	7fdb      	ldrb	r3, [r3, #31]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d00b      	beq.n	8017342 <ip_reass_tmr+0x32>
      r->timer--;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	7fdb      	ldrb	r3, [r3, #31]
 801732e:	3b01      	subs	r3, #1
 8017330:	b2da      	uxtb	r2, r3
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	60fb      	str	r3, [r7, #12]
 8017340:	e008      	b.n	8017354 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801734c:	68b9      	ldr	r1, [r7, #8]
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f000 f80a 	bl	8017368 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d1e3      	bne.n	8017322 <ip_reass_tmr+0x12>
    }
  }
}
 801735a:	bf00      	nop
 801735c:	bf00      	nop
 801735e:	3710      	adds	r7, #16
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	20011510 	.word	0x20011510

08017368 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b088      	sub	sp, #32
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
 8017370:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017372:	2300      	movs	r3, #0
 8017374:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017376:	683a      	ldr	r2, [r7, #0]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	429a      	cmp	r2, r3
 801737c:	d105      	bne.n	801738a <ip_reass_free_complete_datagram+0x22>
 801737e:	4b45      	ldr	r3, [pc, #276]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 8017380:	22ab      	movs	r2, #171	; 0xab
 8017382:	4945      	ldr	r1, [pc, #276]	; (8017498 <ip_reass_free_complete_datagram+0x130>)
 8017384:	4845      	ldr	r0, [pc, #276]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 8017386:	f006 f9a3 	bl	801d6d0 <iprintf>
  if (prev != NULL) {
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00a      	beq.n	80173a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	687a      	ldr	r2, [r7, #4]
 8017396:	429a      	cmp	r2, r3
 8017398:	d005      	beq.n	80173a6 <ip_reass_free_complete_datagram+0x3e>
 801739a:	4b3e      	ldr	r3, [pc, #248]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 801739c:	22ad      	movs	r2, #173	; 0xad
 801739e:	4940      	ldr	r1, [pc, #256]	; (80174a0 <ip_reass_free_complete_datagram+0x138>)
 80173a0:	483e      	ldr	r0, [pc, #248]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 80173a2:	f006 f995 	bl	801d6d0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	685b      	ldr	r3, [r3, #4]
 80173ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	889b      	ldrh	r3, [r3, #4]
 80173b2:	b29b      	uxth	r3, r3
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d12a      	bne.n	801740e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80173be:	697b      	ldr	r3, [r7, #20]
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80173c6:	69bb      	ldr	r3, [r7, #24]
 80173c8:	6858      	ldr	r0, [r3, #4]
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	3308      	adds	r3, #8
 80173ce:	2214      	movs	r2, #20
 80173d0:	4619      	mov	r1, r3
 80173d2:	f006 f967 	bl	801d6a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80173d6:	2101      	movs	r1, #1
 80173d8:	69b8      	ldr	r0, [r7, #24]
 80173da:	f7ff fb1d 	bl	8016a18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80173de:	69b8      	ldr	r0, [r7, #24]
 80173e0:	f7f7 fb8a 	bl	800eaf8 <pbuf_clen>
 80173e4:	4603      	mov	r3, r0
 80173e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80173e8:	8bfa      	ldrh	r2, [r7, #30]
 80173ea:	8a7b      	ldrh	r3, [r7, #18]
 80173ec:	4413      	add	r3, r2
 80173ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80173f2:	db05      	blt.n	8017400 <ip_reass_free_complete_datagram+0x98>
 80173f4:	4b27      	ldr	r3, [pc, #156]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 80173f6:	22bc      	movs	r2, #188	; 0xbc
 80173f8:	492a      	ldr	r1, [pc, #168]	; (80174a4 <ip_reass_free_complete_datagram+0x13c>)
 80173fa:	4828      	ldr	r0, [pc, #160]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 80173fc:	f006 f968 	bl	801d6d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017400:	8bfa      	ldrh	r2, [r7, #30]
 8017402:	8a7b      	ldrh	r3, [r7, #18]
 8017404:	4413      	add	r3, r2
 8017406:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017408:	69b8      	ldr	r0, [r7, #24]
 801740a:	f7f7 fae7 	bl	800e9dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	685b      	ldr	r3, [r3, #4]
 8017412:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017414:	e01f      	b.n	8017456 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017416:	69bb      	ldr	r3, [r7, #24]
 8017418:	685b      	ldr	r3, [r3, #4]
 801741a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	f7f7 fb66 	bl	800eaf8 <pbuf_clen>
 801742c:	4603      	mov	r3, r0
 801742e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017430:	8bfa      	ldrh	r2, [r7, #30]
 8017432:	8a7b      	ldrh	r3, [r7, #18]
 8017434:	4413      	add	r3, r2
 8017436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801743a:	db05      	blt.n	8017448 <ip_reass_free_complete_datagram+0xe0>
 801743c:	4b15      	ldr	r3, [pc, #84]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 801743e:	22cc      	movs	r2, #204	; 0xcc
 8017440:	4918      	ldr	r1, [pc, #96]	; (80174a4 <ip_reass_free_complete_datagram+0x13c>)
 8017442:	4816      	ldr	r0, [pc, #88]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 8017444:	f006 f944 	bl	801d6d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017448:	8bfa      	ldrh	r2, [r7, #30]
 801744a:	8a7b      	ldrh	r3, [r7, #18]
 801744c:	4413      	add	r3, r2
 801744e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017450:	68f8      	ldr	r0, [r7, #12]
 8017452:	f7f7 fac3 	bl	800e9dc <pbuf_free>
  while (p != NULL) {
 8017456:	69bb      	ldr	r3, [r7, #24]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d1dc      	bne.n	8017416 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801745c:	6839      	ldr	r1, [r7, #0]
 801745e:	6878      	ldr	r0, [r7, #4]
 8017460:	f000 f8c2 	bl	80175e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017464:	4b10      	ldr	r3, [pc, #64]	; (80174a8 <ip_reass_free_complete_datagram+0x140>)
 8017466:	881b      	ldrh	r3, [r3, #0]
 8017468:	8bfa      	ldrh	r2, [r7, #30]
 801746a:	429a      	cmp	r2, r3
 801746c:	d905      	bls.n	801747a <ip_reass_free_complete_datagram+0x112>
 801746e:	4b09      	ldr	r3, [pc, #36]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 8017470:	22d2      	movs	r2, #210	; 0xd2
 8017472:	490e      	ldr	r1, [pc, #56]	; (80174ac <ip_reass_free_complete_datagram+0x144>)
 8017474:	4809      	ldr	r0, [pc, #36]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 8017476:	f006 f92b 	bl	801d6d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801747a:	4b0b      	ldr	r3, [pc, #44]	; (80174a8 <ip_reass_free_complete_datagram+0x140>)
 801747c:	881a      	ldrh	r2, [r3, #0]
 801747e:	8bfb      	ldrh	r3, [r7, #30]
 8017480:	1ad3      	subs	r3, r2, r3
 8017482:	b29a      	uxth	r2, r3
 8017484:	4b08      	ldr	r3, [pc, #32]	; (80174a8 <ip_reass_free_complete_datagram+0x140>)
 8017486:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017488:	8bfb      	ldrh	r3, [r7, #30]
}
 801748a:	4618      	mov	r0, r3
 801748c:	3720      	adds	r7, #32
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	08021bcc 	.word	0x08021bcc
 8017498:	08021c08 	.word	0x08021c08
 801749c:	08021c14 	.word	0x08021c14
 80174a0:	08021c3c 	.word	0x08021c3c
 80174a4:	08021c50 	.word	0x08021c50
 80174a8:	20011514 	.word	0x20011514
 80174ac:	08021c70 	.word	0x08021c70

080174b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b08a      	sub	sp, #40	; 0x28
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80174ba:	2300      	movs	r3, #0
 80174bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80174be:	2300      	movs	r3, #0
 80174c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80174c2:	2300      	movs	r3, #0
 80174c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80174c6:	2300      	movs	r3, #0
 80174c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80174ca:	2300      	movs	r3, #0
 80174cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80174ce:	4b28      	ldr	r3, [pc, #160]	; (8017570 <ip_reass_remove_oldest_datagram+0xc0>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80174d4:	e030      	b.n	8017538 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80174d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d8:	695a      	ldr	r2, [r3, #20]
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	68db      	ldr	r3, [r3, #12]
 80174de:	429a      	cmp	r2, r3
 80174e0:	d10c      	bne.n	80174fc <ip_reass_remove_oldest_datagram+0x4c>
 80174e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e4:	699a      	ldr	r2, [r3, #24]
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	691b      	ldr	r3, [r3, #16]
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d106      	bne.n	80174fc <ip_reass_remove_oldest_datagram+0x4c>
 80174ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f0:	899a      	ldrh	r2, [r3, #12]
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	889b      	ldrh	r3, [r3, #4]
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	429a      	cmp	r2, r3
 80174fa:	d014      	beq.n	8017526 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	3301      	adds	r3, #1
 8017500:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017502:	6a3b      	ldr	r3, [r7, #32]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d104      	bne.n	8017512 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801750a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	61bb      	str	r3, [r7, #24]
 8017510:	e009      	b.n	8017526 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017514:	7fda      	ldrb	r2, [r3, #31]
 8017516:	6a3b      	ldr	r3, [r7, #32]
 8017518:	7fdb      	ldrb	r3, [r3, #31]
 801751a:	429a      	cmp	r2, r3
 801751c:	d803      	bhi.n	8017526 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017520:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d001      	beq.n	8017532 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017530:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753a:	2b00      	cmp	r3, #0
 801753c:	d1cb      	bne.n	80174d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801753e:	6a3b      	ldr	r3, [r7, #32]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d008      	beq.n	8017556 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017544:	69b9      	ldr	r1, [r7, #24]
 8017546:	6a38      	ldr	r0, [r7, #32]
 8017548:	f7ff ff0e 	bl	8017368 <ip_reass_free_complete_datagram>
 801754c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801754e:	697a      	ldr	r2, [r7, #20]
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	4413      	add	r3, r2
 8017554:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017556:	697a      	ldr	r2, [r7, #20]
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	429a      	cmp	r2, r3
 801755c:	da02      	bge.n	8017564 <ip_reass_remove_oldest_datagram+0xb4>
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	2b01      	cmp	r3, #1
 8017562:	dcac      	bgt.n	80174be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017564:	697b      	ldr	r3, [r7, #20]
}
 8017566:	4618      	mov	r0, r3
 8017568:	3728      	adds	r7, #40	; 0x28
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}
 801756e:	bf00      	nop
 8017570:	20011510 	.word	0x20011510

08017574 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b084      	sub	sp, #16
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801757e:	2004      	movs	r0, #4
 8017580:	f7f6 fb12 	bl	800dba8 <memp_malloc>
 8017584:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d110      	bne.n	80175ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801758c:	6839      	ldr	r1, [r7, #0]
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7ff ff8e 	bl	80174b0 <ip_reass_remove_oldest_datagram>
 8017594:	4602      	mov	r2, r0
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	4293      	cmp	r3, r2
 801759a:	dc03      	bgt.n	80175a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801759c:	2004      	movs	r0, #4
 801759e:	f7f6 fb03 	bl	800dba8 <memp_malloc>
 80175a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d101      	bne.n	80175ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80175aa:	2300      	movs	r3, #0
 80175ac:	e016      	b.n	80175dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80175ae:	2220      	movs	r2, #32
 80175b0:	2100      	movs	r1, #0
 80175b2:	68f8      	ldr	r0, [r7, #12]
 80175b4:	f006 f884 	bl	801d6c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	220f      	movs	r2, #15
 80175bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80175be:	4b09      	ldr	r3, [pc, #36]	; (80175e4 <ip_reass_enqueue_new_datagram+0x70>)
 80175c0:	681a      	ldr	r2, [r3, #0]
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80175c6:	4a07      	ldr	r2, [pc, #28]	; (80175e4 <ip_reass_enqueue_new_datagram+0x70>)
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	3308      	adds	r3, #8
 80175d0:	2214      	movs	r2, #20
 80175d2:	6879      	ldr	r1, [r7, #4]
 80175d4:	4618      	mov	r0, r3
 80175d6:	f006 f865 	bl	801d6a4 <memcpy>
  return ipr;
 80175da:	68fb      	ldr	r3, [r7, #12]
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3710      	adds	r7, #16
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}
 80175e4:	20011510 	.word	0x20011510

080175e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80175f2:	4b10      	ldr	r3, [pc, #64]	; (8017634 <ip_reass_dequeue_datagram+0x4c>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	429a      	cmp	r2, r3
 80175fa:	d104      	bne.n	8017606 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	4a0c      	ldr	r2, [pc, #48]	; (8017634 <ip_reass_dequeue_datagram+0x4c>)
 8017602:	6013      	str	r3, [r2, #0]
 8017604:	e00d      	b.n	8017622 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d106      	bne.n	801761a <ip_reass_dequeue_datagram+0x32>
 801760c:	4b0a      	ldr	r3, [pc, #40]	; (8017638 <ip_reass_dequeue_datagram+0x50>)
 801760e:	f240 1245 	movw	r2, #325	; 0x145
 8017612:	490a      	ldr	r1, [pc, #40]	; (801763c <ip_reass_dequeue_datagram+0x54>)
 8017614:	480a      	ldr	r0, [pc, #40]	; (8017640 <ip_reass_dequeue_datagram+0x58>)
 8017616:	f006 f85b 	bl	801d6d0 <iprintf>
    prev->next = ipr->next;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681a      	ldr	r2, [r3, #0]
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017622:	6879      	ldr	r1, [r7, #4]
 8017624:	2004      	movs	r0, #4
 8017626:	f7f6 fb35 	bl	800dc94 <memp_free>
}
 801762a:	bf00      	nop
 801762c:	3708      	adds	r7, #8
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}
 8017632:	bf00      	nop
 8017634:	20011510 	.word	0x20011510
 8017638:	08021bcc 	.word	0x08021bcc
 801763c:	08021c94 	.word	0x08021c94
 8017640:	08021c14 	.word	0x08021c14

08017644 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b08c      	sub	sp, #48	; 0x30
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017650:	2300      	movs	r3, #0
 8017652:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017654:	2301      	movs	r3, #1
 8017656:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	685b      	ldr	r3, [r3, #4]
 801765c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801765e:	69fb      	ldr	r3, [r7, #28]
 8017660:	885b      	ldrh	r3, [r3, #2]
 8017662:	b29b      	uxth	r3, r3
 8017664:	4618      	mov	r0, r3
 8017666:	f7f5 fdb7 	bl	800d1d8 <lwip_htons>
 801766a:	4603      	mov	r3, r0
 801766c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801766e:	69fb      	ldr	r3, [r7, #28]
 8017670:	781b      	ldrb	r3, [r3, #0]
 8017672:	f003 030f 	and.w	r3, r3, #15
 8017676:	b2db      	uxtb	r3, r3
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801767c:	7e7b      	ldrb	r3, [r7, #25]
 801767e:	b29b      	uxth	r3, r3
 8017680:	8b7a      	ldrh	r2, [r7, #26]
 8017682:	429a      	cmp	r2, r3
 8017684:	d202      	bcs.n	801768c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801768a:	e135      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801768c:	7e7b      	ldrb	r3, [r7, #25]
 801768e:	b29b      	uxth	r3, r3
 8017690:	8b7a      	ldrh	r2, [r7, #26]
 8017692:	1ad3      	subs	r3, r2, r3
 8017694:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017696:	69fb      	ldr	r3, [r7, #28]
 8017698:	88db      	ldrh	r3, [r3, #6]
 801769a:	b29b      	uxth	r3, r3
 801769c:	4618      	mov	r0, r3
 801769e:	f7f5 fd9b 	bl	800d1d8 <lwip_htons>
 80176a2:	4603      	mov	r3, r0
 80176a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176a8:	b29b      	uxth	r3, r3
 80176aa:	00db      	lsls	r3, r3, #3
 80176ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	685b      	ldr	r3, [r3, #4]
 80176b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80176b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b6:	2200      	movs	r2, #0
 80176b8:	701a      	strb	r2, [r3, #0]
 80176ba:	2200      	movs	r2, #0
 80176bc:	705a      	strb	r2, [r3, #1]
 80176be:	2200      	movs	r2, #0
 80176c0:	709a      	strb	r2, [r3, #2]
 80176c2:	2200      	movs	r2, #0
 80176c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80176c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c8:	8afa      	ldrh	r2, [r7, #22]
 80176ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80176cc:	8afa      	ldrh	r2, [r7, #22]
 80176ce:	8b7b      	ldrh	r3, [r7, #26]
 80176d0:	4413      	add	r3, r2
 80176d2:	b29a      	uxth	r2, r3
 80176d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80176d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176da:	88db      	ldrh	r3, [r3, #6]
 80176dc:	b29b      	uxth	r3, r3
 80176de:	8afa      	ldrh	r2, [r7, #22]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d902      	bls.n	80176ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176e8:	e106      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	685b      	ldr	r3, [r3, #4]
 80176ee:	627b      	str	r3, [r7, #36]	; 0x24
 80176f0:	e068      	b.n	80177c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80176f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80176f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176fa:	889b      	ldrh	r3, [r3, #4]
 80176fc:	b29a      	uxth	r2, r3
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	889b      	ldrh	r3, [r3, #4]
 8017702:	b29b      	uxth	r3, r3
 8017704:	429a      	cmp	r2, r3
 8017706:	d235      	bcs.n	8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801770a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801770c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017710:	2b00      	cmp	r3, #0
 8017712:	d020      	beq.n	8017756 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017716:	889b      	ldrh	r3, [r3, #4]
 8017718:	b29a      	uxth	r2, r3
 801771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771c:	88db      	ldrh	r3, [r3, #6]
 801771e:	b29b      	uxth	r3, r3
 8017720:	429a      	cmp	r2, r3
 8017722:	d307      	bcc.n	8017734 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017726:	88db      	ldrh	r3, [r3, #6]
 8017728:	b29a      	uxth	r2, r3
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	889b      	ldrh	r3, [r3, #4]
 801772e:	b29b      	uxth	r3, r3
 8017730:	429a      	cmp	r2, r3
 8017732:	d902      	bls.n	801773a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017738:	e0de      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773c:	68ba      	ldr	r2, [r7, #8]
 801773e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017742:	88db      	ldrh	r3, [r3, #6]
 8017744:	b29a      	uxth	r2, r3
 8017746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017748:	889b      	ldrh	r3, [r3, #4]
 801774a:	b29b      	uxth	r3, r3
 801774c:	429a      	cmp	r2, r3
 801774e:	d03d      	beq.n	80177cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017750:	2300      	movs	r3, #0
 8017752:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017754:	e03a      	b.n	80177cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017758:	88db      	ldrh	r3, [r3, #6]
 801775a:	b29a      	uxth	r2, r3
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	889b      	ldrh	r3, [r3, #4]
 8017760:	b29b      	uxth	r3, r3
 8017762:	429a      	cmp	r2, r3
 8017764:	d902      	bls.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801776a:	e0c5      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	68ba      	ldr	r2, [r7, #8]
 8017770:	605a      	str	r2, [r3, #4]
      break;
 8017772:	e02b      	b.n	80177cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017776:	889b      	ldrh	r3, [r3, #4]
 8017778:	b29a      	uxth	r2, r3
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	889b      	ldrh	r3, [r3, #4]
 801777e:	b29b      	uxth	r3, r3
 8017780:	429a      	cmp	r2, r3
 8017782:	d102      	bne.n	801778a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017788:	e0b6      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801778c:	889b      	ldrh	r3, [r3, #4]
 801778e:	b29a      	uxth	r2, r3
 8017790:	693b      	ldr	r3, [r7, #16]
 8017792:	88db      	ldrh	r3, [r3, #6]
 8017794:	b29b      	uxth	r3, r3
 8017796:	429a      	cmp	r2, r3
 8017798:	d202      	bcs.n	80177a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801779a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801779e:	e0ab      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80177a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d009      	beq.n	80177ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80177a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a8:	88db      	ldrh	r3, [r3, #6]
 80177aa:	b29a      	uxth	r2, r3
 80177ac:	693b      	ldr	r3, [r7, #16]
 80177ae:	889b      	ldrh	r3, [r3, #4]
 80177b0:	b29b      	uxth	r3, r3
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d001      	beq.n	80177ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80177b6:	2300      	movs	r3, #0
 80177b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80177c0:	693b      	ldr	r3, [r7, #16]
 80177c2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80177c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d193      	bne.n	80176f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80177ca:	e000      	b.n	80177ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80177cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80177ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d12d      	bne.n	8017830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80177d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d01c      	beq.n	8017814 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80177da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177dc:	88db      	ldrh	r3, [r3, #6]
 80177de:	b29a      	uxth	r2, r3
 80177e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e2:	889b      	ldrh	r3, [r3, #4]
 80177e4:	b29b      	uxth	r3, r3
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d906      	bls.n	80177f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80177ea:	4b45      	ldr	r3, [pc, #276]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80177ec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80177f0:	4944      	ldr	r1, [pc, #272]	; (8017904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80177f2:	4845      	ldr	r0, [pc, #276]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80177f4:	f005 ff6c 	bl	801d6d0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80177f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177fa:	68ba      	ldr	r2, [r7, #8]
 80177fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80177fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017800:	88db      	ldrh	r3, [r3, #6]
 8017802:	b29a      	uxth	r2, r3
 8017804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017806:	889b      	ldrh	r3, [r3, #4]
 8017808:	b29b      	uxth	r3, r3
 801780a:	429a      	cmp	r2, r3
 801780c:	d010      	beq.n	8017830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801780e:	2300      	movs	r3, #0
 8017810:	623b      	str	r3, [r7, #32]
 8017812:	e00d      	b.n	8017830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d006      	beq.n	801782a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801781c:	4b38      	ldr	r3, [pc, #224]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801781e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017822:	493a      	ldr	r1, [pc, #232]	; (801790c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017824:	4838      	ldr	r0, [pc, #224]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017826:	f005 ff53 	bl	801d6d0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	68ba      	ldr	r2, [r7, #8]
 801782e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d105      	bne.n	8017842 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	7f9b      	ldrb	r3, [r3, #30]
 801783a:	f003 0301 	and.w	r3, r3, #1
 801783e:	2b00      	cmp	r3, #0
 8017840:	d059      	beq.n	80178f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017842:	6a3b      	ldr	r3, [r7, #32]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d04f      	beq.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	685b      	ldr	r3, [r3, #4]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d006      	beq.n	801785e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	685b      	ldr	r3, [r3, #4]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	889b      	ldrh	r3, [r3, #4]
 8017858:	b29b      	uxth	r3, r3
 801785a:	2b00      	cmp	r3, #0
 801785c:	d002      	beq.n	8017864 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801785e:	2300      	movs	r3, #0
 8017860:	623b      	str	r3, [r7, #32]
 8017862:	e041      	b.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017866:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801786e:	e012      	b.n	8017896 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017878:	88db      	ldrh	r3, [r3, #6]
 801787a:	b29a      	uxth	r2, r3
 801787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801787e:	889b      	ldrh	r3, [r3, #4]
 8017880:	b29b      	uxth	r3, r3
 8017882:	429a      	cmp	r2, r3
 8017884:	d002      	beq.n	801788c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017886:	2300      	movs	r3, #0
 8017888:	623b      	str	r3, [r7, #32]
            break;
 801788a:	e007      	b.n	801789c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801788e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017898:	2b00      	cmp	r3, #0
 801789a:	d1e9      	bne.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801789c:	6a3b      	ldr	r3, [r7, #32]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d022      	beq.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d106      	bne.n	80178b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80178aa:	4b15      	ldr	r3, [pc, #84]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178ac:	f240 12df 	movw	r2, #479	; 0x1df
 80178b0:	4917      	ldr	r1, [pc, #92]	; (8017910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80178b2:	4815      	ldr	r0, [pc, #84]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178b4:	f005 ff0c 	bl	801d6d0 <iprintf>
          LWIP_ASSERT("sanity check",
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	685b      	ldr	r3, [r3, #4]
 80178bc:	685b      	ldr	r3, [r3, #4]
 80178be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d106      	bne.n	80178d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80178c4:	4b0e      	ldr	r3, [pc, #56]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80178ca:	4911      	ldr	r1, [pc, #68]	; (8017910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80178cc:	480e      	ldr	r0, [pc, #56]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178ce:	f005 feff 	bl	801d6d0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80178d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d006      	beq.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80178da:	4b09      	ldr	r3, [pc, #36]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178dc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80178e0:	490c      	ldr	r1, [pc, #48]	; (8017914 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80178e2:	4809      	ldr	r0, [pc, #36]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178e4:	f005 fef4 	bl	801d6d0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80178e8:	6a3b      	ldr	r3, [r7, #32]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	bf14      	ite	ne
 80178ee:	2301      	movne	r3, #1
 80178f0:	2300      	moveq	r3, #0
 80178f2:	b2db      	uxtb	r3, r3
 80178f4:	e000      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80178f6:	2300      	movs	r3, #0
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	3730      	adds	r7, #48	; 0x30
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}
 8017900:	08021bcc 	.word	0x08021bcc
 8017904:	08021cb0 	.word	0x08021cb0
 8017908:	08021c14 	.word	0x08021c14
 801790c:	08021cd0 	.word	0x08021cd0
 8017910:	08021d08 	.word	0x08021d08
 8017914:	08021d18 	.word	0x08021d18

08017918 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b08e      	sub	sp, #56	; 0x38
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	685b      	ldr	r3, [r3, #4]
 8017924:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017928:	781b      	ldrb	r3, [r3, #0]
 801792a:	f003 030f 	and.w	r3, r3, #15
 801792e:	b2db      	uxtb	r3, r3
 8017930:	009b      	lsls	r3, r3, #2
 8017932:	b2db      	uxtb	r3, r3
 8017934:	2b14      	cmp	r3, #20
 8017936:	f040 8171 	bne.w	8017c1c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801793c:	88db      	ldrh	r3, [r3, #6]
 801793e:	b29b      	uxth	r3, r3
 8017940:	4618      	mov	r0, r3
 8017942:	f7f5 fc49 	bl	800d1d8 <lwip_htons>
 8017946:	4603      	mov	r3, r0
 8017948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801794c:	b29b      	uxth	r3, r3
 801794e:	00db      	lsls	r3, r3, #3
 8017950:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017954:	885b      	ldrh	r3, [r3, #2]
 8017956:	b29b      	uxth	r3, r3
 8017958:	4618      	mov	r0, r3
 801795a:	f7f5 fc3d 	bl	800d1d8 <lwip_htons>
 801795e:	4603      	mov	r3, r0
 8017960:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017964:	781b      	ldrb	r3, [r3, #0]
 8017966:	f003 030f 	and.w	r3, r3, #15
 801796a:	b2db      	uxtb	r3, r3
 801796c:	009b      	lsls	r3, r3, #2
 801796e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017976:	b29b      	uxth	r3, r3
 8017978:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801797a:	429a      	cmp	r2, r3
 801797c:	f0c0 8150 	bcc.w	8017c20 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017984:	b29b      	uxth	r3, r3
 8017986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017988:	1ad3      	subs	r3, r2, r3
 801798a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7f7 f8b3 	bl	800eaf8 <pbuf_clen>
 8017992:	4603      	mov	r3, r0
 8017994:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017996:	4b8c      	ldr	r3, [pc, #560]	; (8017bc8 <ip4_reass+0x2b0>)
 8017998:	881b      	ldrh	r3, [r3, #0]
 801799a:	461a      	mov	r2, r3
 801799c:	8c3b      	ldrh	r3, [r7, #32]
 801799e:	4413      	add	r3, r2
 80179a0:	2b0a      	cmp	r3, #10
 80179a2:	dd10      	ble.n	80179c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80179a4:	8c3b      	ldrh	r3, [r7, #32]
 80179a6:	4619      	mov	r1, r3
 80179a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179aa:	f7ff fd81 	bl	80174b0 <ip_reass_remove_oldest_datagram>
 80179ae:	4603      	mov	r3, r0
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	f000 8137 	beq.w	8017c24 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80179b6:	4b84      	ldr	r3, [pc, #528]	; (8017bc8 <ip4_reass+0x2b0>)
 80179b8:	881b      	ldrh	r3, [r3, #0]
 80179ba:	461a      	mov	r2, r3
 80179bc:	8c3b      	ldrh	r3, [r7, #32]
 80179be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80179c0:	2b0a      	cmp	r3, #10
 80179c2:	f300 812f 	bgt.w	8017c24 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80179c6:	4b81      	ldr	r3, [pc, #516]	; (8017bcc <ip4_reass+0x2b4>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	633b      	str	r3, [r7, #48]	; 0x30
 80179cc:	e015      	b.n	80179fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80179ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d0:	695a      	ldr	r2, [r3, #20]
 80179d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179d4:	68db      	ldr	r3, [r3, #12]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d10c      	bne.n	80179f4 <ip4_reass+0xdc>
 80179da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179dc:	699a      	ldr	r2, [r3, #24]
 80179de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e0:	691b      	ldr	r3, [r3, #16]
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d106      	bne.n	80179f4 <ip4_reass+0xdc>
 80179e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e8:	899a      	ldrh	r2, [r3, #12]
 80179ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ec:	889b      	ldrh	r3, [r3, #4]
 80179ee:	b29b      	uxth	r3, r3
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d006      	beq.n	8017a02 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80179f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	633b      	str	r3, [r7, #48]	; 0x30
 80179fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d1e6      	bne.n	80179ce <ip4_reass+0xb6>
 8017a00:	e000      	b.n	8017a04 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017a02:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d109      	bne.n	8017a1e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017a0a:	8c3b      	ldrh	r3, [r7, #32]
 8017a0c:	4619      	mov	r1, r3
 8017a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a10:	f7ff fdb0 	bl	8017574 <ip_reass_enqueue_new_datagram>
 8017a14:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d11c      	bne.n	8017a56 <ip4_reass+0x13e>
      goto nullreturn;
 8017a1c:	e105      	b.n	8017c2a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a20:	88db      	ldrh	r3, [r3, #6]
 8017a22:	b29b      	uxth	r3, r3
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7f5 fbd7 	bl	800d1d8 <lwip_htons>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d110      	bne.n	8017a56 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a36:	89db      	ldrh	r3, [r3, #14]
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f5 fbcd 	bl	800d1d8 <lwip_htons>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d006      	beq.n	8017a56 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a4a:	3308      	adds	r3, #8
 8017a4c:	2214      	movs	r2, #20
 8017a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a50:	4618      	mov	r0, r3
 8017a52:	f005 fe27 	bl	801d6a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a58:	88db      	ldrh	r3, [r3, #6]
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	f003 0320 	and.w	r3, r3, #32
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	bf0c      	ite	eq
 8017a64:	2301      	moveq	r3, #1
 8017a66:	2300      	movne	r3, #0
 8017a68:	b2db      	uxtb	r3, r3
 8017a6a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017a6c:	69fb      	ldr	r3, [r7, #28]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d00e      	beq.n	8017a90 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017a72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a76:	4413      	add	r3, r2
 8017a78:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017a7a:	8b7a      	ldrh	r2, [r7, #26]
 8017a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	f0c0 80a0 	bcc.w	8017bc4 <ip4_reass+0x2ac>
 8017a84:	8b7b      	ldrh	r3, [r7, #26]
 8017a86:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017a8a:	4293      	cmp	r3, r2
 8017a8c:	f200 809a 	bhi.w	8017bc4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017a90:	69fa      	ldr	r2, [r7, #28]
 8017a92:	6879      	ldr	r1, [r7, #4]
 8017a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a96:	f7ff fdd5 	bl	8017644 <ip_reass_chain_frag_into_datagram_and_validate>
 8017a9a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017aa2:	f000 809b 	beq.w	8017bdc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017aa6:	4b48      	ldr	r3, [pc, #288]	; (8017bc8 <ip4_reass+0x2b0>)
 8017aa8:	881a      	ldrh	r2, [r3, #0]
 8017aaa:	8c3b      	ldrh	r3, [r7, #32]
 8017aac:	4413      	add	r3, r2
 8017aae:	b29a      	uxth	r2, r3
 8017ab0:	4b45      	ldr	r3, [pc, #276]	; (8017bc8 <ip4_reass+0x2b0>)
 8017ab2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017ab4:	69fb      	ldr	r3, [r7, #28]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d00d      	beq.n	8017ad6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017aba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017abe:	4413      	add	r3, r2
 8017ac0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac4:	8a7a      	ldrh	r2, [r7, #18]
 8017ac6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aca:	7f9b      	ldrb	r3, [r3, #30]
 8017acc:	f043 0301 	orr.w	r3, r3, #1
 8017ad0:	b2da      	uxtb	r2, r3
 8017ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d171      	bne.n	8017bc0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ade:	8b9b      	ldrh	r3, [r3, #28]
 8017ae0:	3314      	adds	r3, #20
 8017ae2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae6:	685b      	ldr	r3, [r3, #4]
 8017ae8:	685b      	ldr	r3, [r3, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af0:	685b      	ldr	r3, [r3, #4]
 8017af2:	685b      	ldr	r3, [r3, #4]
 8017af4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af8:	3308      	adds	r3, #8
 8017afa:	2214      	movs	r2, #20
 8017afc:	4619      	mov	r1, r3
 8017afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b00:	f005 fdd0 	bl	801d6a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017b04:	8a3b      	ldrh	r3, [r7, #16]
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7f5 fb66 	bl	800d1d8 <lwip_htons>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	461a      	mov	r2, r3
 8017b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b12:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b16:	2200      	movs	r2, #0
 8017b18:	719a      	strb	r2, [r3, #6]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b20:	2200      	movs	r2, #0
 8017b22:	729a      	strb	r2, [r3, #10]
 8017b24:	2200      	movs	r2, #0
 8017b26:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017b2e:	e00d      	b.n	8017b4c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b32:	685b      	ldr	r3, [r3, #4]
 8017b34:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017b36:	2114      	movs	r1, #20
 8017b38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017b3a:	f7f6 fec9 	bl	800e8d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017b3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f7f7 f819 	bl	800eb78 <pbuf_cat>
      r = iprh->next_pbuf;
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d1ee      	bne.n	8017b30 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017b52:	4b1e      	ldr	r3, [pc, #120]	; (8017bcc <ip4_reass+0x2b4>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d102      	bne.n	8017b62 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b60:	e010      	b.n	8017b84 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017b62:	4b1a      	ldr	r3, [pc, #104]	; (8017bcc <ip4_reass+0x2b4>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b68:	e007      	b.n	8017b7a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d006      	beq.n	8017b82 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d1f4      	bne.n	8017b6a <ip4_reass+0x252>
 8017b80:	e000      	b.n	8017b84 <ip4_reass+0x26c>
          break;
 8017b82:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b88:	f7ff fd2e 	bl	80175e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f7f6 ffb3 	bl	800eaf8 <pbuf_clen>
 8017b92:	4603      	mov	r3, r0
 8017b94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017b96:	4b0c      	ldr	r3, [pc, #48]	; (8017bc8 <ip4_reass+0x2b0>)
 8017b98:	881b      	ldrh	r3, [r3, #0]
 8017b9a:	8c3a      	ldrh	r2, [r7, #32]
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d906      	bls.n	8017bae <ip4_reass+0x296>
 8017ba0:	4b0b      	ldr	r3, [pc, #44]	; (8017bd0 <ip4_reass+0x2b8>)
 8017ba2:	f240 229b 	movw	r2, #667	; 0x29b
 8017ba6:	490b      	ldr	r1, [pc, #44]	; (8017bd4 <ip4_reass+0x2bc>)
 8017ba8:	480b      	ldr	r0, [pc, #44]	; (8017bd8 <ip4_reass+0x2c0>)
 8017baa:	f005 fd91 	bl	801d6d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017bae:	4b06      	ldr	r3, [pc, #24]	; (8017bc8 <ip4_reass+0x2b0>)
 8017bb0:	881a      	ldrh	r2, [r3, #0]
 8017bb2:	8c3b      	ldrh	r3, [r7, #32]
 8017bb4:	1ad3      	subs	r3, r2, r3
 8017bb6:	b29a      	uxth	r2, r3
 8017bb8:	4b03      	ldr	r3, [pc, #12]	; (8017bc8 <ip4_reass+0x2b0>)
 8017bba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	e038      	b.n	8017c32 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e036      	b.n	8017c32 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017bc4:	bf00      	nop
 8017bc6:	e00a      	b.n	8017bde <ip4_reass+0x2c6>
 8017bc8:	20011514 	.word	0x20011514
 8017bcc:	20011510 	.word	0x20011510
 8017bd0:	08021bcc 	.word	0x08021bcc
 8017bd4:	08021d3c 	.word	0x08021d3c
 8017bd8:	08021c14 	.word	0x08021c14
    goto nullreturn_ipr;
 8017bdc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d106      	bne.n	8017bf2 <ip4_reass+0x2da>
 8017be4:	4b15      	ldr	r3, [pc, #84]	; (8017c3c <ip4_reass+0x324>)
 8017be6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017bea:	4915      	ldr	r1, [pc, #84]	; (8017c40 <ip4_reass+0x328>)
 8017bec:	4815      	ldr	r0, [pc, #84]	; (8017c44 <ip4_reass+0x32c>)
 8017bee:	f005 fd6f 	bl	801d6d0 <iprintf>
  if (ipr->p == NULL) {
 8017bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bf4:	685b      	ldr	r3, [r3, #4]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d116      	bne.n	8017c28 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017bfa:	4b13      	ldr	r3, [pc, #76]	; (8017c48 <ip4_reass+0x330>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d006      	beq.n	8017c12 <ip4_reass+0x2fa>
 8017c04:	4b0d      	ldr	r3, [pc, #52]	; (8017c3c <ip4_reass+0x324>)
 8017c06:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017c0a:	4910      	ldr	r1, [pc, #64]	; (8017c4c <ip4_reass+0x334>)
 8017c0c:	480d      	ldr	r0, [pc, #52]	; (8017c44 <ip4_reass+0x32c>)
 8017c0e:	f005 fd5f 	bl	801d6d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017c12:	2100      	movs	r1, #0
 8017c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c16:	f7ff fce7 	bl	80175e8 <ip_reass_dequeue_datagram>
 8017c1a:	e006      	b.n	8017c2a <ip4_reass+0x312>
    goto nullreturn;
 8017c1c:	bf00      	nop
 8017c1e:	e004      	b.n	8017c2a <ip4_reass+0x312>
    goto nullreturn;
 8017c20:	bf00      	nop
 8017c22:	e002      	b.n	8017c2a <ip4_reass+0x312>
      goto nullreturn;
 8017c24:	bf00      	nop
 8017c26:	e000      	b.n	8017c2a <ip4_reass+0x312>
  }

nullreturn:
 8017c28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f7f6 fed6 	bl	800e9dc <pbuf_free>
  return NULL;
 8017c30:	2300      	movs	r3, #0
}
 8017c32:	4618      	mov	r0, r3
 8017c34:	3738      	adds	r7, #56	; 0x38
 8017c36:	46bd      	mov	sp, r7
 8017c38:	bd80      	pop	{r7, pc}
 8017c3a:	bf00      	nop
 8017c3c:	08021bcc 	.word	0x08021bcc
 8017c40:	08021d58 	.word	0x08021d58
 8017c44:	08021c14 	.word	0x08021c14
 8017c48:	20011510 	.word	0x20011510
 8017c4c:	08021d64 	.word	0x08021d64

08017c50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017c54:	2005      	movs	r0, #5
 8017c56:	f7f5 ffa7 	bl	800dba8 <memp_malloc>
 8017c5a:	4603      	mov	r3, r0
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	bd80      	pop	{r7, pc}

08017c60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b082      	sub	sp, #8
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d106      	bne.n	8017c7c <ip_frag_free_pbuf_custom_ref+0x1c>
 8017c6e:	4b07      	ldr	r3, [pc, #28]	; (8017c8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017c70:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017c74:	4906      	ldr	r1, [pc, #24]	; (8017c90 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017c76:	4807      	ldr	r0, [pc, #28]	; (8017c94 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017c78:	f005 fd2a 	bl	801d6d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017c7c:	6879      	ldr	r1, [r7, #4]
 8017c7e:	2005      	movs	r0, #5
 8017c80:	f7f6 f808 	bl	800dc94 <memp_free>
}
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}
 8017c8c:	08021bcc 	.word	0x08021bcc
 8017c90:	08021d84 	.word	0x08021d84
 8017c94:	08021c14 	.word	0x08021c14

08017c98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b084      	sub	sp, #16
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d106      	bne.n	8017cb8 <ipfrag_free_pbuf_custom+0x20>
 8017caa:	4b11      	ldr	r3, [pc, #68]	; (8017cf0 <ipfrag_free_pbuf_custom+0x58>)
 8017cac:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017cb0:	4910      	ldr	r1, [pc, #64]	; (8017cf4 <ipfrag_free_pbuf_custom+0x5c>)
 8017cb2:	4811      	ldr	r0, [pc, #68]	; (8017cf8 <ipfrag_free_pbuf_custom+0x60>)
 8017cb4:	f005 fd0c 	bl	801d6d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017cb8:	68fa      	ldr	r2, [r7, #12]
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	d006      	beq.n	8017cce <ipfrag_free_pbuf_custom+0x36>
 8017cc0:	4b0b      	ldr	r3, [pc, #44]	; (8017cf0 <ipfrag_free_pbuf_custom+0x58>)
 8017cc2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017cc6:	490d      	ldr	r1, [pc, #52]	; (8017cfc <ipfrag_free_pbuf_custom+0x64>)
 8017cc8:	480b      	ldr	r0, [pc, #44]	; (8017cf8 <ipfrag_free_pbuf_custom+0x60>)
 8017cca:	f005 fd01 	bl	801d6d0 <iprintf>
  if (pcr->original != NULL) {
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	695b      	ldr	r3, [r3, #20]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d004      	beq.n	8017ce0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	695b      	ldr	r3, [r3, #20]
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f7f6 fe7e 	bl	800e9dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017ce0:	68f8      	ldr	r0, [r7, #12]
 8017ce2:	f7ff ffbd 	bl	8017c60 <ip_frag_free_pbuf_custom_ref>
}
 8017ce6:	bf00      	nop
 8017ce8:	3710      	adds	r7, #16
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	08021bcc 	.word	0x08021bcc
 8017cf4:	08021d90 	.word	0x08021d90
 8017cf8:	08021c14 	.word	0x08021c14
 8017cfc:	08021d9c 	.word	0x08021d9c

08017d00 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b094      	sub	sp, #80	; 0x50
 8017d04:	af02      	add	r7, sp, #8
 8017d06:	60f8      	str	r0, [r7, #12]
 8017d08:	60b9      	str	r1, [r7, #8]
 8017d0a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d16:	3b14      	subs	r3, #20
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	da00      	bge.n	8017d1e <ip4_frag+0x1e>
 8017d1c:	3307      	adds	r3, #7
 8017d1e:	10db      	asrs	r3, r3, #3
 8017d20:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017d22:	2314      	movs	r3, #20
 8017d24:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	685b      	ldr	r3, [r3, #4]
 8017d2a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d32:	781b      	ldrb	r3, [r3, #0]
 8017d34:	f003 030f 	and.w	r3, r3, #15
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	009b      	lsls	r3, r3, #2
 8017d3c:	b2db      	uxtb	r3, r3
 8017d3e:	2b14      	cmp	r3, #20
 8017d40:	d002      	beq.n	8017d48 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017d42:	f06f 0305 	mvn.w	r3, #5
 8017d46:	e110      	b.n	8017f6a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	895b      	ldrh	r3, [r3, #10]
 8017d4c:	2b13      	cmp	r3, #19
 8017d4e:	d809      	bhi.n	8017d64 <ip4_frag+0x64>
 8017d50:	4b88      	ldr	r3, [pc, #544]	; (8017f74 <ip4_frag+0x274>)
 8017d52:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017d56:	4988      	ldr	r1, [pc, #544]	; (8017f78 <ip4_frag+0x278>)
 8017d58:	4888      	ldr	r0, [pc, #544]	; (8017f7c <ip4_frag+0x27c>)
 8017d5a:	f005 fcb9 	bl	801d6d0 <iprintf>
 8017d5e:	f06f 0305 	mvn.w	r3, #5
 8017d62:	e102      	b.n	8017f6a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d66:	88db      	ldrh	r3, [r3, #6]
 8017d68:	b29b      	uxth	r3, r3
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7f5 fa34 	bl	800d1d8 <lwip_htons>
 8017d70:	4603      	mov	r3, r0
 8017d72:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017d74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017d7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017d84:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	891b      	ldrh	r3, [r3, #8]
 8017d8a:	3b14      	subs	r3, #20
 8017d8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017d90:	e0e1      	b.n	8017f56 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017d92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d94:	00db      	lsls	r3, r3, #3
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	bf28      	it	cs
 8017da0:	4613      	movcs	r3, r2
 8017da2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017da4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017da8:	2114      	movs	r1, #20
 8017daa:	200e      	movs	r0, #14
 8017dac:	f7f6 fb32 	bl	800e414 <pbuf_alloc>
 8017db0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	f000 80d5 	beq.w	8017f64 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbc:	895b      	ldrh	r3, [r3, #10]
 8017dbe:	2b13      	cmp	r3, #19
 8017dc0:	d806      	bhi.n	8017dd0 <ip4_frag+0xd0>
 8017dc2:	4b6c      	ldr	r3, [pc, #432]	; (8017f74 <ip4_frag+0x274>)
 8017dc4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017dc8:	496d      	ldr	r1, [pc, #436]	; (8017f80 <ip4_frag+0x280>)
 8017dca:	486c      	ldr	r0, [pc, #432]	; (8017f7c <ip4_frag+0x27c>)
 8017dcc:	f005 fc80 	bl	801d6d0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd2:	685b      	ldr	r3, [r3, #4]
 8017dd4:	2214      	movs	r2, #20
 8017dd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f005 fc63 	bl	801d6a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de0:	685b      	ldr	r3, [r3, #4]
 8017de2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017de4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017de6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017dea:	e064      	b.n	8017eb6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	895a      	ldrh	r2, [r3, #10]
 8017df0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017df2:	1ad3      	subs	r3, r2, r3
 8017df4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	895b      	ldrh	r3, [r3, #10]
 8017dfa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017dfc:	429a      	cmp	r2, r3
 8017dfe:	d906      	bls.n	8017e0e <ip4_frag+0x10e>
 8017e00:	4b5c      	ldr	r3, [pc, #368]	; (8017f74 <ip4_frag+0x274>)
 8017e02:	f240 322d 	movw	r2, #813	; 0x32d
 8017e06:	495f      	ldr	r1, [pc, #380]	; (8017f84 <ip4_frag+0x284>)
 8017e08:	485c      	ldr	r0, [pc, #368]	; (8017f7c <ip4_frag+0x27c>)
 8017e0a:	f005 fc61 	bl	801d6d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017e0e:	8bfa      	ldrh	r2, [r7, #30]
 8017e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017e14:	4293      	cmp	r3, r2
 8017e16:	bf28      	it	cs
 8017e18:	4613      	movcs	r3, r2
 8017e1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017e1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d105      	bne.n	8017e32 <ip4_frag+0x132>
        poff = 0;
 8017e26:	2300      	movs	r3, #0
 8017e28:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	60fb      	str	r3, [r7, #12]
        continue;
 8017e30:	e041      	b.n	8017eb6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017e32:	f7ff ff0d 	bl	8017c50 <ip_frag_alloc_pbuf_custom_ref>
 8017e36:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d103      	bne.n	8017e46 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e40:	f7f6 fdcc 	bl	800e9dc <pbuf_free>
        goto memerr;
 8017e44:	e08f      	b.n	8017f66 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017e46:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017e4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e4e:	4413      	add	r3, r2
 8017e50:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017e54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017e58:	9201      	str	r2, [sp, #4]
 8017e5a:	9300      	str	r3, [sp, #0]
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	2241      	movs	r2, #65	; 0x41
 8017e60:	2000      	movs	r0, #0
 8017e62:	f7f6 fc01 	bl	800e668 <pbuf_alloced_custom>
 8017e66:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d106      	bne.n	8017e7c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017e6e:	69b8      	ldr	r0, [r7, #24]
 8017e70:	f7ff fef6 	bl	8017c60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e76:	f7f6 fdb1 	bl	800e9dc <pbuf_free>
        goto memerr;
 8017e7a:	e074      	b.n	8017f66 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017e7c:	68f8      	ldr	r0, [r7, #12]
 8017e7e:	f7f6 fe53 	bl	800eb28 <pbuf_ref>
      pcr->original = p;
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	68fa      	ldr	r2, [r7, #12]
 8017e86:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017e88:	69bb      	ldr	r3, [r7, #24]
 8017e8a:	4a3f      	ldr	r2, [pc, #252]	; (8017f88 <ip4_frag+0x288>)
 8017e8c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017e8e:	6979      	ldr	r1, [r7, #20]
 8017e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e92:	f7f6 fe71 	bl	800eb78 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017e96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017e9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017e9e:	1ad3      	subs	r3, r2, r3
 8017ea0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017ea4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d004      	beq.n	8017eb6 <ip4_frag+0x1b6>
        poff = 0;
 8017eac:	2300      	movs	r3, #0
 8017eae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017eb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d196      	bne.n	8017dec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017ebe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017ec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017ec4:	4413      	add	r3, r2
 8017ec6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017ecc:	f1a3 0213 	sub.w	r2, r3, #19
 8017ed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	bfcc      	ite	gt
 8017ed8:	2301      	movgt	r3, #1
 8017eda:	2300      	movle	r3, #0
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017ee0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017ee8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017eea:	6a3b      	ldr	r3, [r7, #32]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d002      	beq.n	8017ef6 <ip4_frag+0x1f6>
 8017ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d003      	beq.n	8017efe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017ef6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ef8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017efc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017efe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7f5 f969 	bl	800d1d8 <lwip_htons>
 8017f06:	4603      	mov	r3, r0
 8017f08:	461a      	mov	r2, r3
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f10:	3314      	adds	r3, #20
 8017f12:	b29b      	uxth	r3, r3
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7f5 f95f 	bl	800d1d8 <lwip_htons>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f20:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f24:	2200      	movs	r2, #0
 8017f26:	729a      	strb	r2, [r3, #10]
 8017f28:	2200      	movs	r2, #0
 8017f2a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017f2c:	68bb      	ldr	r3, [r7, #8]
 8017f2e:	695b      	ldr	r3, [r3, #20]
 8017f30:	687a      	ldr	r2, [r7, #4]
 8017f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f34:	68b8      	ldr	r0, [r7, #8]
 8017f36:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f3a:	f7f6 fd4f 	bl	800e9dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017f3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f44:	1ad3      	subs	r3, r2, r3
 8017f46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017f4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017f4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017f50:	4413      	add	r3, r2
 8017f52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017f56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	f47f af19 	bne.w	8017d92 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017f60:	2300      	movs	r3, #0
 8017f62:	e002      	b.n	8017f6a <ip4_frag+0x26a>
      goto memerr;
 8017f64:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	3748      	adds	r7, #72	; 0x48
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	bf00      	nop
 8017f74:	08021bcc 	.word	0x08021bcc
 8017f78:	08021da8 	.word	0x08021da8
 8017f7c:	08021c14 	.word	0x08021c14
 8017f80:	08021dc4 	.word	0x08021dc4
 8017f84:	08021de4 	.word	0x08021de4
 8017f88:	08017c99 	.word	0x08017c99

08017f8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b086      	sub	sp, #24
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017f96:	230e      	movs	r3, #14
 8017f98:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	895b      	ldrh	r3, [r3, #10]
 8017f9e:	2b0e      	cmp	r3, #14
 8017fa0:	d96e      	bls.n	8018080 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	7bdb      	ldrb	r3, [r3, #15]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d106      	bne.n	8017fb8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017fb0:	3301      	adds	r3, #1
 8017fb2:	b2da      	uxtb	r2, r3
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017fbe:	693b      	ldr	r3, [r7, #16]
 8017fc0:	7b1a      	ldrb	r2, [r3, #12]
 8017fc2:	7b5b      	ldrb	r3, [r3, #13]
 8017fc4:	021b      	lsls	r3, r3, #8
 8017fc6:	4313      	orrs	r3, r2
 8017fc8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	781b      	ldrb	r3, [r3, #0]
 8017fce:	f003 0301 	and.w	r3, r3, #1
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d023      	beq.n	801801e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	781b      	ldrb	r3, [r3, #0]
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	d10f      	bne.n	8017ffe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017fde:	693b      	ldr	r3, [r7, #16]
 8017fe0:	785b      	ldrb	r3, [r3, #1]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d11b      	bne.n	801801e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017fea:	2b5e      	cmp	r3, #94	; 0x5e
 8017fec:	d117      	bne.n	801801e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	7b5b      	ldrb	r3, [r3, #13]
 8017ff2:	f043 0310 	orr.w	r3, r3, #16
 8017ff6:	b2da      	uxtb	r2, r3
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	735a      	strb	r2, [r3, #13]
 8017ffc:	e00f      	b.n	801801e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017ffe:	693b      	ldr	r3, [r7, #16]
 8018000:	2206      	movs	r2, #6
 8018002:	4928      	ldr	r1, [pc, #160]	; (80180a4 <ethernet_input+0x118>)
 8018004:	4618      	mov	r0, r3
 8018006:	f005 fb3d 	bl	801d684 <memcmp>
 801800a:	4603      	mov	r3, r0
 801800c:	2b00      	cmp	r3, #0
 801800e:	d106      	bne.n	801801e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	7b5b      	ldrb	r3, [r3, #13]
 8018014:	f043 0308 	orr.w	r3, r3, #8
 8018018:	b2da      	uxtb	r2, r3
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801801e:	89fb      	ldrh	r3, [r7, #14]
 8018020:	2b08      	cmp	r3, #8
 8018022:	d003      	beq.n	801802c <ethernet_input+0xa0>
 8018024:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018028:	d014      	beq.n	8018054 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801802a:	e032      	b.n	8018092 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801802c:	683b      	ldr	r3, [r7, #0]
 801802e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018032:	f003 0308 	and.w	r3, r3, #8
 8018036:	2b00      	cmp	r3, #0
 8018038:	d024      	beq.n	8018084 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801803a:	8afb      	ldrh	r3, [r7, #22]
 801803c:	4619      	mov	r1, r3
 801803e:	6878      	ldr	r0, [r7, #4]
 8018040:	f7f6 fc46 	bl	800e8d0 <pbuf_remove_header>
 8018044:	4603      	mov	r3, r0
 8018046:	2b00      	cmp	r3, #0
 8018048:	d11e      	bne.n	8018088 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801804a:	6839      	ldr	r1, [r7, #0]
 801804c:	6878      	ldr	r0, [r7, #4]
 801804e:	f7fe fdf7 	bl	8016c40 <ip4_input>
      break;
 8018052:	e013      	b.n	801807c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801805a:	f003 0308 	and.w	r3, r3, #8
 801805e:	2b00      	cmp	r3, #0
 8018060:	d014      	beq.n	801808c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018062:	8afb      	ldrh	r3, [r7, #22]
 8018064:	4619      	mov	r1, r3
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f7f6 fc32 	bl	800e8d0 <pbuf_remove_header>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	d10e      	bne.n	8018090 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018072:	6839      	ldr	r1, [r7, #0]
 8018074:	6878      	ldr	r0, [r7, #4]
 8018076:	f7fd ff97 	bl	8015fa8 <etharp_input>
      break;
 801807a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801807c:	2300      	movs	r3, #0
 801807e:	e00c      	b.n	801809a <ethernet_input+0x10e>
    goto free_and_return;
 8018080:	bf00      	nop
 8018082:	e006      	b.n	8018092 <ethernet_input+0x106>
        goto free_and_return;
 8018084:	bf00      	nop
 8018086:	e004      	b.n	8018092 <ethernet_input+0x106>
        goto free_and_return;
 8018088:	bf00      	nop
 801808a:	e002      	b.n	8018092 <ethernet_input+0x106>
        goto free_and_return;
 801808c:	bf00      	nop
 801808e:	e000      	b.n	8018092 <ethernet_input+0x106>
        goto free_and_return;
 8018090:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	f7f6 fca2 	bl	800e9dc <pbuf_free>
  return ERR_OK;
 8018098:	2300      	movs	r3, #0
}
 801809a:	4618      	mov	r0, r3
 801809c:	3718      	adds	r7, #24
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}
 80180a2:	bf00      	nop
 80180a4:	080222f0 	.word	0x080222f0

080180a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b086      	sub	sp, #24
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	60f8      	str	r0, [r7, #12]
 80180b0:	60b9      	str	r1, [r7, #8]
 80180b2:	607a      	str	r2, [r7, #4]
 80180b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80180b6:	8c3b      	ldrh	r3, [r7, #32]
 80180b8:	4618      	mov	r0, r3
 80180ba:	f7f5 f88d 	bl	800d1d8 <lwip_htons>
 80180be:	4603      	mov	r3, r0
 80180c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80180c2:	210e      	movs	r1, #14
 80180c4:	68b8      	ldr	r0, [r7, #8]
 80180c6:	f7f6 fbf3 	bl	800e8b0 <pbuf_add_header>
 80180ca:	4603      	mov	r3, r0
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d125      	bne.n	801811c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80180d6:	693b      	ldr	r3, [r7, #16]
 80180d8:	8afa      	ldrh	r2, [r7, #22]
 80180da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	2206      	movs	r2, #6
 80180e0:	6839      	ldr	r1, [r7, #0]
 80180e2:	4618      	mov	r0, r3
 80180e4:	f005 fade 	bl	801d6a4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80180e8:	693b      	ldr	r3, [r7, #16]
 80180ea:	3306      	adds	r3, #6
 80180ec:	2206      	movs	r2, #6
 80180ee:	6879      	ldr	r1, [r7, #4]
 80180f0:	4618      	mov	r0, r3
 80180f2:	f005 fad7 	bl	801d6a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80180fc:	2b06      	cmp	r3, #6
 80180fe:	d006      	beq.n	801810e <ethernet_output+0x66>
 8018100:	4b0a      	ldr	r3, [pc, #40]	; (801812c <ethernet_output+0x84>)
 8018102:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018106:	490a      	ldr	r1, [pc, #40]	; (8018130 <ethernet_output+0x88>)
 8018108:	480a      	ldr	r0, [pc, #40]	; (8018134 <ethernet_output+0x8c>)
 801810a:	f005 fae1 	bl	801d6d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	699b      	ldr	r3, [r3, #24]
 8018112:	68b9      	ldr	r1, [r7, #8]
 8018114:	68f8      	ldr	r0, [r7, #12]
 8018116:	4798      	blx	r3
 8018118:	4603      	mov	r3, r0
 801811a:	e002      	b.n	8018122 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801811c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801811e:	f06f 0301 	mvn.w	r3, #1
}
 8018122:	4618      	mov	r0, r3
 8018124:	3718      	adds	r7, #24
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	08021df4 	.word	0x08021df4
 8018130:	08021e2c 	.word	0x08021e2c
 8018134:	08021e60 	.word	0x08021e60

08018138 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b086      	sub	sp, #24
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
 8018140:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	60bb      	str	r3, [r7, #8]
 8018146:	2304      	movs	r3, #4
 8018148:	60fb      	str	r3, [r7, #12]
 801814a:	2300      	movs	r3, #0
 801814c:	613b      	str	r3, [r7, #16]
 801814e:	2300      	movs	r3, #0
 8018150:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018152:	f107 0308 	add.w	r3, r7, #8
 8018156:	2100      	movs	r1, #0
 8018158:	4618      	mov	r0, r3
 801815a:	f7f0 f872 	bl	8008242 <osMessageCreate>
 801815e:	4602      	mov	r2, r0
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d102      	bne.n	8018172 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801816c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018170:	e000      	b.n	8018174 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018172:	2300      	movs	r3, #0
}
 8018174:	4618      	mov	r0, r3
 8018176:	3718      	adds	r7, #24
 8018178:	46bd      	mov	sp, r7
 801817a:	bd80      	pop	{r7, pc}

0801817c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4618      	mov	r0, r3
 801818a:	f7f0 f937 	bl	80083fc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	4618      	mov	r0, r3
 8018194:	f7f0 f948 	bl	8008428 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018198:	bf00      	nop
 801819a:	3708      	adds	r7, #8
 801819c:	46bd      	mov	sp, r7
 801819e:	bd80      	pop	{r7, pc}

080181a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b084      	sub	sp, #16
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
 80181a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	6839      	ldr	r1, [r7, #0]
 80181b0:	2200      	movs	r2, #0
 80181b2:	4618      	mov	r0, r3
 80181b4:	f7f0 f86e 	bl	8008294 <osMessagePut>
 80181b8:	4603      	mov	r3, r0
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d102      	bne.n	80181c4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80181be:	2300      	movs	r3, #0
 80181c0:	73fb      	strb	r3, [r7, #15]
 80181c2:	e001      	b.n	80181c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80181c4:	23ff      	movs	r3, #255	; 0xff
 80181c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80181c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	3710      	adds	r7, #16
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}

080181d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b08c      	sub	sp, #48	; 0x30
 80181d8:	af00      	add	r7, sp, #0
 80181da:	61f8      	str	r0, [r7, #28]
 80181dc:	61b9      	str	r1, [r7, #24]
 80181de:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80181e0:	f7ef fe5a 	bl	8007e98 <osKernelSysTick>
 80181e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80181e6:	697b      	ldr	r3, [r7, #20]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d017      	beq.n	801821c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80181ec:	69fb      	ldr	r3, [r7, #28]
 80181ee:	6819      	ldr	r1, [r3, #0]
 80181f0:	f107 0320 	add.w	r3, r7, #32
 80181f4:	697a      	ldr	r2, [r7, #20]
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7f0 f88c 	bl	8008314 <osMessageGet>

    if(event.status == osEventMessage)
 80181fc:	6a3b      	ldr	r3, [r7, #32]
 80181fe:	2b10      	cmp	r3, #16
 8018200:	d109      	bne.n	8018216 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018204:	461a      	mov	r2, r3
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801820a:	f7ef fe45 	bl	8007e98 <osKernelSysTick>
 801820e:	4602      	mov	r2, r0
 8018210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018212:	1ad3      	subs	r3, r2, r3
 8018214:	e019      	b.n	801824a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801821a:	e016      	b.n	801824a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801821c:	69fb      	ldr	r3, [r7, #28]
 801821e:	6819      	ldr	r1, [r3, #0]
 8018220:	463b      	mov	r3, r7
 8018222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018226:	4618      	mov	r0, r3
 8018228:	f7f0 f874 	bl	8008314 <osMessageGet>
 801822c:	f107 0320 	add.w	r3, r7, #32
 8018230:	463a      	mov	r2, r7
 8018232:	ca07      	ldmia	r2, {r0, r1, r2}
 8018234:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823a:	461a      	mov	r2, r3
 801823c:	69bb      	ldr	r3, [r7, #24]
 801823e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018240:	f7ef fe2a 	bl	8007e98 <osKernelSysTick>
 8018244:	4602      	mov	r2, r0
 8018246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018248:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801824a:	4618      	mov	r0, r3
 801824c:	3730      	adds	r7, #48	; 0x30
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}

08018252 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018252:	b580      	push	{r7, lr}
 8018254:	b086      	sub	sp, #24
 8018256:	af00      	add	r7, sp, #0
 8018258:	6078      	str	r0, [r7, #4]
 801825a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6819      	ldr	r1, [r3, #0]
 8018260:	f107 030c 	add.w	r3, r7, #12
 8018264:	2200      	movs	r2, #0
 8018266:	4618      	mov	r0, r3
 8018268:	f7f0 f854 	bl	8008314 <osMessageGet>

  if(event.status == osEventMessage)
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	2b10      	cmp	r3, #16
 8018270:	d105      	bne.n	801827e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018272:	693b      	ldr	r3, [r7, #16]
 8018274:	461a      	mov	r2, r3
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801827a:	2300      	movs	r3, #0
 801827c:	e001      	b.n	8018282 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801827e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8018282:	4618      	mov	r0, r3
 8018284:	3718      	adds	r7, #24
 8018286:	46bd      	mov	sp, r7
 8018288:	bd80      	pop	{r7, pc}

0801828a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801828a:	b480      	push	{r7}
 801828c:	b083      	sub	sp, #12
 801828e:	af00      	add	r7, sp, #0
 8018290:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d101      	bne.n	801829e <sys_mbox_valid+0x14>
    return 0;
 801829a:	2300      	movs	r3, #0
 801829c:	e000      	b.n	80182a0 <sys_mbox_valid+0x16>
  else
    return 1;
 801829e:	2301      	movs	r3, #1
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	370c      	adds	r7, #12
 80182a4:	46bd      	mov	sp, r7
 80182a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182aa:	4770      	bx	lr

080182ac <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80182ac:	b480      	push	{r7}
 80182ae:	b083      	sub	sp, #12
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2200      	movs	r2, #0
 80182b8:	601a      	str	r2, [r3, #0]
}
 80182ba:	bf00      	nop
 80182bc:	370c      	adds	r7, #12
 80182be:	46bd      	mov	sp, r7
 80182c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c4:	4770      	bx	lr

080182c6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80182c6:	b580      	push	{r7, lr}
 80182c8:	b084      	sub	sp, #16
 80182ca:	af00      	add	r7, sp, #0
 80182cc:	6078      	str	r0, [r7, #4]
 80182ce:	460b      	mov	r3, r1
 80182d0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80182d2:	2300      	movs	r3, #0
 80182d4:	60bb      	str	r3, [r7, #8]
 80182d6:	2300      	movs	r3, #0
 80182d8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80182da:	f107 0308 	add.w	r3, r7, #8
 80182de:	2101      	movs	r1, #1
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7ef fee5 	bl	80080b0 <osSemaphoreCreate>
 80182e6:	4602      	mov	r2, r0
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d102      	bne.n	80182fa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80182f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182f8:	e009      	b.n	801830e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80182fa:	78fb      	ldrb	r3, [r7, #3]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d105      	bne.n	801830c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2100      	movs	r1, #0
 8018306:	4618      	mov	r0, r3
 8018308:	f7ef ff04 	bl	8008114 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801830c:	2300      	movs	r3, #0
}
 801830e:	4618      	mov	r0, r3
 8018310:	3710      	adds	r7, #16
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018316:	b580      	push	{r7, lr}
 8018318:	b084      	sub	sp, #16
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
 801831e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018320:	f7ef fdba 	bl	8007e98 <osKernelSysTick>
 8018324:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d011      	beq.n	8018350 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	6839      	ldr	r1, [r7, #0]
 8018332:	4618      	mov	r0, r3
 8018334:	f7ef feee 	bl	8008114 <osSemaphoreWait>
 8018338:	4603      	mov	r3, r0
 801833a:	2b00      	cmp	r3, #0
 801833c:	d105      	bne.n	801834a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801833e:	f7ef fdab 	bl	8007e98 <osKernelSysTick>
 8018342:	4602      	mov	r2, r0
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	1ad3      	subs	r3, r2, r3
 8018348:	e012      	b.n	8018370 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801834a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801834e:	e00f      	b.n	8018370 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018350:	bf00      	nop
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801835a:	4618      	mov	r0, r3
 801835c:	f7ef feda 	bl	8008114 <osSemaphoreWait>
 8018360:	4603      	mov	r3, r0
 8018362:	2b00      	cmp	r3, #0
 8018364:	d1f5      	bne.n	8018352 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018366:	f7ef fd97 	bl	8007e98 <osKernelSysTick>
 801836a:	4602      	mov	r2, r0
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018370:	4618      	mov	r0, r3
 8018372:	3710      	adds	r7, #16
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}

08018378 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b082      	sub	sp, #8
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	4618      	mov	r0, r3
 8018386:	f7ef ff13 	bl	80081b0 <osSemaphoreRelease>
}
 801838a:	bf00      	nop
 801838c:	3708      	adds	r7, #8
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}

08018392 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018392:	b580      	push	{r7, lr}
 8018394:	b082      	sub	sp, #8
 8018396:	af00      	add	r7, sp, #0
 8018398:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	4618      	mov	r0, r3
 80183a0:	f7ef ff3c 	bl	800821c <osSemaphoreDelete>
}
 80183a4:	bf00      	nop
 80183a6:	3708      	adds	r7, #8
 80183a8:	46bd      	mov	sp, r7
 80183aa:	bd80      	pop	{r7, pc}

080183ac <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80183ac:	b480      	push	{r7}
 80183ae:	b083      	sub	sp, #12
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d101      	bne.n	80183c0 <sys_sem_valid+0x14>
    return 0;
 80183bc:	2300      	movs	r3, #0
 80183be:	e000      	b.n	80183c2 <sys_sem_valid+0x16>
  else
    return 1;
 80183c0:	2301      	movs	r3, #1
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	370c      	adds	r7, #12
 80183c6:	46bd      	mov	sp, r7
 80183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183cc:	4770      	bx	lr

080183ce <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80183ce:	b480      	push	{r7}
 80183d0:	b083      	sub	sp, #12
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	2200      	movs	r2, #0
 80183da:	601a      	str	r2, [r3, #0]
}
 80183dc:	bf00      	nop
 80183de:	370c      	adds	r7, #12
 80183e0:	46bd      	mov	sp, r7
 80183e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e6:	4770      	bx	lr

080183e8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80183ec:	4803      	ldr	r0, [pc, #12]	; (80183fc <sys_init+0x14>)
 80183ee:	f7ef fdc3 	bl	8007f78 <osMutexCreate>
 80183f2:	4603      	mov	r3, r0
 80183f4:	4a02      	ldr	r2, [pc, #8]	; (8018400 <sys_init+0x18>)
 80183f6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80183f8:	bf00      	nop
 80183fa:	bd80      	pop	{r7, pc}
 80183fc:	08022300 	.word	0x08022300
 8018400:	20011518 	.word	0x20011518

08018404 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018404:	b580      	push	{r7, lr}
 8018406:	b084      	sub	sp, #16
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801840c:	2300      	movs	r3, #0
 801840e:	60bb      	str	r3, [r7, #8]
 8018410:	2300      	movs	r3, #0
 8018412:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018414:	f107 0308 	add.w	r3, r7, #8
 8018418:	4618      	mov	r0, r3
 801841a:	f7ef fdad 	bl	8007f78 <osMutexCreate>
 801841e:	4602      	mov	r2, r0
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d102      	bne.n	8018432 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801842c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018430:	e000      	b.n	8018434 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018432:	2300      	movs	r3, #0
}
 8018434:	4618      	mov	r0, r3
 8018436:	3710      	adds	r7, #16
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}

0801843c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b082      	sub	sp, #8
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801844c:	4618      	mov	r0, r3
 801844e:	f7ef fdab 	bl	8007fa8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018452:	bf00      	nop
 8018454:	3708      	adds	r7, #8
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}

0801845a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801845a:	b580      	push	{r7, lr}
 801845c:	b082      	sub	sp, #8
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	4618      	mov	r0, r3
 8018468:	f7ef fdec 	bl	8008044 <osMutexRelease>
}
 801846c:	bf00      	nop
 801846e:	3708      	adds	r7, #8
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}

08018474 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b08c      	sub	sp, #48	; 0x30
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	60b9      	str	r1, [r7, #8]
 801847e:	607a      	str	r2, [r7, #4]
 8018480:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018482:	f107 0314 	add.w	r3, r7, #20
 8018486:	2200      	movs	r2, #0
 8018488:	601a      	str	r2, [r3, #0]
 801848a:	605a      	str	r2, [r3, #4]
 801848c:	609a      	str	r2, [r3, #8]
 801848e:	60da      	str	r2, [r3, #12]
 8018490:	611a      	str	r2, [r3, #16]
 8018492:	615a      	str	r2, [r3, #20]
 8018494:	619a      	str	r2, [r3, #24]
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	617b      	str	r3, [r7, #20]
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	61bb      	str	r3, [r7, #24]
 801849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a0:	b21b      	sxth	r3, r3
 80184a2:	83bb      	strh	r3, [r7, #28]
 80184a4:	683b      	ldr	r3, [r7, #0]
 80184a6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80184a8:	f107 0314 	add.w	r3, r7, #20
 80184ac:	6879      	ldr	r1, [r7, #4]
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7ef fd02 	bl	8007eb8 <osThreadCreate>
 80184b4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3730      	adds	r7, #48	; 0x30
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
	...

080184c0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80184c4:	4b04      	ldr	r3, [pc, #16]	; (80184d8 <sys_arch_protect+0x18>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7ef fd6b 	bl	8007fa8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80184d2:	2301      	movs	r3, #1
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	bd80      	pop	{r7, pc}
 80184d8:	20011518 	.word	0x20011518

080184dc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b082      	sub	sp, #8
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80184e4:	4b04      	ldr	r3, [pc, #16]	; (80184f8 <sys_arch_unprotect+0x1c>)
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7ef fdab 	bl	8008044 <osMutexRelease>
}
 80184ee:	bf00      	nop
 80184f0:	3708      	adds	r7, #8
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
 80184f6:	bf00      	nop
 80184f8:	20011518 	.word	0x20011518

080184fc <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 80184fc:	b480      	push	{r7}
 80184fe:	b085      	sub	sp, #20
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	68ba      	ldr	r2, [r7, #8]
 801850c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	687a      	ldr	r2, [r7, #4]
 8018512:	601a      	str	r2, [r3, #0]
}
 8018514:	bf00      	nop
 8018516:	3714      	adds	r7, #20
 8018518:	46bd      	mov	sp, r7
 801851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801851e:	4770      	bx	lr

08018520 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8018520:	b480      	push	{r7}
 8018522:	b083      	sub	sp, #12
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018530:	4293      	cmp	r3, r2
 8018532:	d003      	beq.n	801853c <getNextPacketId+0x1c>
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	3301      	adds	r3, #1
 801853a:	e000      	b.n	801853e <getNextPacketId+0x1e>
 801853c:	2301      	movs	r3, #1
 801853e:	687a      	ldr	r2, [r7, #4]
 8018540:	6013      	str	r3, [r2, #0]
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	681b      	ldr	r3, [r3, #0]
}
 8018546:	4618      	mov	r0, r3
 8018548:	370c      	adds	r7, #12
 801854a:	46bd      	mov	sp, r7
 801854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018550:	4770      	bx	lr

08018552 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8018552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018554:	b087      	sub	sp, #28
 8018556:	af00      	add	r7, sp, #0
 8018558:	60f8      	str	r0, [r7, #12]
 801855a:	60b9      	str	r1, [r7, #8]
 801855c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801855e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018562:	617b      	str	r3, [r7, #20]
        sent = 0;
 8018564:	2300      	movs	r3, #0
 8018566:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8018568:	e018      	b.n	801859c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801856e:	691c      	ldr	r4, [r3, #16]
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	691a      	ldr	r2, [r3, #16]
 8018578:	693b      	ldr	r3, [r7, #16]
 801857a:	18d6      	adds	r6, r2, r3
 801857c:	6878      	ldr	r0, [r7, #4]
 801857e:	f000 fecb 	bl	8019318 <TimerLeftMS>
 8018582:	4603      	mov	r3, r0
 8018584:	68ba      	ldr	r2, [r7, #8]
 8018586:	4631      	mov	r1, r6
 8018588:	4628      	mov	r0, r5
 801858a:	47a0      	blx	r4
 801858c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	2b00      	cmp	r3, #0
 8018592:	db0e      	blt.n	80185b2 <sendPacket+0x60>
            break;
        sent += rc;
 8018594:	693a      	ldr	r2, [r7, #16]
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	4413      	add	r3, r2
 801859a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801859c:	693a      	ldr	r2, [r7, #16]
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	429a      	cmp	r2, r3
 80185a2:	da07      	bge.n	80185b4 <sendPacket+0x62>
 80185a4:	6878      	ldr	r0, [r7, #4]
 80185a6:	f000 fe75 	bl	8019294 <TimerIsExpired>
 80185aa:	4603      	mov	r3, r0
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d0dc      	beq.n	801856a <sendPacket+0x18>
 80185b0:	e000      	b.n	80185b4 <sendPacket+0x62>
            break;
 80185b2:	bf00      	nop
    }
    if (sent == length)
 80185b4:	693a      	ldr	r2, [r7, #16]
 80185b6:	68bb      	ldr	r3, [r7, #8]
 80185b8:	429a      	cmp	r2, r3
 80185ba:	d10b      	bne.n	80185d4 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	699b      	ldr	r3, [r3, #24]
 80185c6:	4619      	mov	r1, r3
 80185c8:	4610      	mov	r0, r2
 80185ca:	f000 fe8d 	bl	80192e8 <TimerCountdown>
        rc = MQTT_SUCCESS;
 80185ce:	2300      	movs	r3, #0
 80185d0:	617b      	str	r3, [r7, #20]
 80185d2:	e002      	b.n	80185da <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 80185d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80185d8:	617b      	str	r3, [r7, #20]
    return rc;
 80185da:	697b      	ldr	r3, [r7, #20]
}
 80185dc:	4618      	mov	r0, r3
 80185de:	371c      	adds	r7, #28
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080185e4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b086      	sub	sp, #24
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	60f8      	str	r0, [r7, #12]
 80185ec:	60b9      	str	r1, [r7, #8]
 80185ee:	607a      	str	r2, [r7, #4]
 80185f0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	68ba      	ldr	r2, [r7, #8]
 80185f6:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80185f8:	2300      	movs	r3, #0
 80185fa:	617b      	str	r3, [r7, #20]
 80185fc:	e008      	b.n	8018610 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	697a      	ldr	r2, [r7, #20]
 8018602:	3205      	adds	r2, #5
 8018604:	2100      	movs	r1, #0
 8018606:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	3301      	adds	r3, #1
 801860e:	617b      	str	r3, [r7, #20]
 8018610:	697b      	ldr	r3, [r7, #20]
 8018612:	2b04      	cmp	r3, #4
 8018614:	ddf3      	ble.n	80185fe <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	687a      	ldr	r2, [r7, #4]
 801861a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	683a      	ldr	r2, [r7, #0]
 8018620:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	6a3a      	ldr	r2, [r7, #32]
 8018626:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801862c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018632:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	2200      	movs	r2, #0
 8018638:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	2200      	movs	r2, #0
 801863e:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	2200      	movs	r2, #0
 8018644:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	2200      	movs	r2, #0
 801864a:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	2201      	movs	r2, #1
 8018650:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	3358      	adds	r3, #88	; 0x58
 8018656:	4618      	mov	r0, r3
 8018658:	f000 fe74 	bl	8019344 <TimerInit>
    TimerInit(&c->last_received);
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	3360      	adds	r3, #96	; 0x60
 8018660:	4618      	mov	r0, r3
 8018662:	f000 fe6f 	bl	8019344 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8018666:	bf00      	nop
 8018668:	3718      	adds	r7, #24
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}

0801866e <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801866e:	b590      	push	{r4, r7, lr}
 8018670:	b08b      	sub	sp, #44	; 0x2c
 8018672:	af00      	add	r7, sp, #0
 8018674:	60f8      	str	r0, [r7, #12]
 8018676:	60b9      	str	r1, [r7, #8]
 8018678:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801867a:	2301      	movs	r3, #1
 801867c:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801867e:	2300      	movs	r3, #0
 8018680:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8018682:	2304      	movs	r3, #4
 8018684:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	2200      	movs	r2, #0
 801868a:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801868c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018690:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8018692:	6a3b      	ldr	r3, [r7, #32]
 8018694:	3301      	adds	r3, #1
 8018696:	623b      	str	r3, [r7, #32]
 8018698:	6a3a      	ldr	r2, [r7, #32]
 801869a:	69fb      	ldr	r3, [r7, #28]
 801869c:	429a      	cmp	r2, r3
 801869e:	dd03      	ble.n	80186a8 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80186a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80186a4:	61bb      	str	r3, [r7, #24]
            goto exit;
 80186a6:	e021      	b.n	80186ec <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186ac:	68dc      	ldr	r4, [r3, #12]
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80186b2:	f107 0117 	add.w	r1, r7, #23
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	2201      	movs	r2, #1
 80186ba:	47a0      	blx	r4
 80186bc:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80186be:	69bb      	ldr	r3, [r7, #24]
 80186c0:	2b01      	cmp	r3, #1
 80186c2:	d112      	bne.n	80186ea <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80186c4:	68bb      	ldr	r3, [r7, #8]
 80186c6:	681a      	ldr	r2, [r3, #0]
 80186c8:	7dfb      	ldrb	r3, [r7, #23]
 80186ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80186ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80186d0:	fb01 f303 	mul.w	r3, r1, r3
 80186d4:	441a      	add	r2, r3
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80186da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186dc:	01db      	lsls	r3, r3, #7
 80186de:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 80186e0:	7dfb      	ldrb	r3, [r7, #23]
 80186e2:	b25b      	sxtb	r3, r3
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	dbd1      	blt.n	801868c <decodePacket+0x1e>
exit:
 80186e8:	e000      	b.n	80186ec <decodePacket+0x7e>
            goto exit;
 80186ea:	bf00      	nop
    return len;
 80186ec:	6a3b      	ldr	r3, [r7, #32]
}
 80186ee:	4618      	mov	r0, r3
 80186f0:	372c      	adds	r7, #44	; 0x2c
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd90      	pop	{r4, r7, pc}

080186f6 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 80186f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186f8:	b089      	sub	sp, #36	; 0x24
 80186fa:	af00      	add	r7, sp, #0
 80186fc:	60f8      	str	r0, [r7, #12]
 80186fe:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8018700:	2300      	movs	r3, #0
 8018702:	617b      	str	r3, [r7, #20]
    int len = 0;
 8018704:	2300      	movs	r3, #0
 8018706:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8018708:	2300      	movs	r3, #0
 801870a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018710:	68dc      	ldr	r4, [r3, #12]
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	695e      	ldr	r6, [r3, #20]
 801871a:	68b8      	ldr	r0, [r7, #8]
 801871c:	f000 fdfc 	bl	8019318 <TimerLeftMS>
 8018720:	4603      	mov	r3, r0
 8018722:	2201      	movs	r2, #1
 8018724:	4631      	mov	r1, r6
 8018726:	4628      	mov	r0, r5
 8018728:	47a0      	blx	r4
 801872a:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	2b01      	cmp	r3, #1
 8018730:	d15d      	bne.n	80187ee <readPacket+0xf8>
        goto exit;

    len = 1;
 8018732:	2301      	movs	r3, #1
 8018734:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8018736:	68b8      	ldr	r0, [r7, #8]
 8018738:	f000 fdee 	bl	8019318 <TimerLeftMS>
 801873c:	4602      	mov	r2, r0
 801873e:	f107 0310 	add.w	r3, r7, #16
 8018742:	4619      	mov	r1, r3
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	f7ff ff92 	bl	801866e <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	695b      	ldr	r3, [r3, #20]
 801874e:	3301      	adds	r3, #1
 8018750:	693a      	ldr	r2, [r7, #16]
 8018752:	4611      	mov	r1, r2
 8018754:	4618      	mov	r0, r3
 8018756:	f001 f9bd 	bl	8019ad4 <MQTTPacket_encode>
 801875a:	4602      	mov	r2, r0
 801875c:	69bb      	ldr	r3, [r7, #24]
 801875e:	4413      	add	r3, r2
 8018760:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	68da      	ldr	r2, [r3, #12]
 8018766:	69bb      	ldr	r3, [r7, #24]
 8018768:	1ad3      	subs	r3, r2, r3
 801876a:	693a      	ldr	r2, [r7, #16]
 801876c:	4293      	cmp	r3, r2
 801876e:	d203      	bcs.n	8018778 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8018770:	f06f 0301 	mvn.w	r3, #1
 8018774:	61fb      	str	r3, [r7, #28]
        goto exit;
 8018776:	e03d      	b.n	80187f4 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8018778:	693b      	ldr	r3, [r7, #16]
 801877a:	2b00      	cmp	r3, #0
 801877c:	dd20      	ble.n	80187c0 <readPacket+0xca>
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018782:	68dc      	ldr	r4, [r3, #12]
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	695a      	ldr	r2, [r3, #20]
 801878c:	69bb      	ldr	r3, [r7, #24]
 801878e:	18d6      	adds	r6, r2, r3
 8018790:	693b      	ldr	r3, [r7, #16]
 8018792:	607b      	str	r3, [r7, #4]
 8018794:	68b8      	ldr	r0, [r7, #8]
 8018796:	f000 fdbf 	bl	8019318 <TimerLeftMS>
 801879a:	4603      	mov	r3, r0
 801879c:	687a      	ldr	r2, [r7, #4]
 801879e:	4631      	mov	r1, r6
 80187a0:	4628      	mov	r0, r5
 80187a2:	47a0      	blx	r4
 80187a4:	4602      	mov	r2, r0
 80187a6:	693b      	ldr	r3, [r7, #16]
 80187a8:	429a      	cmp	r2, r3
 80187aa:	bf14      	ite	ne
 80187ac:	2301      	movne	r3, #1
 80187ae:	2300      	moveq	r3, #0
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	61fb      	str	r3, [r7, #28]
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d002      	beq.n	80187c0 <readPacket+0xca>
        rc = 0;
 80187ba:	2300      	movs	r3, #0
 80187bc:	61fb      	str	r3, [r7, #28]
        goto exit;
 80187be:	e019      	b.n	80187f4 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	695b      	ldr	r3, [r3, #20]
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80187c8:	7d3b      	ldrb	r3, [r7, #20]
 80187ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80187ce:	b2db      	uxtb	r3, r3
 80187d0:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	699b      	ldr	r3, [r3, #24]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d00b      	beq.n	80187f2 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	699b      	ldr	r3, [r3, #24]
 80187e4:	4619      	mov	r1, r3
 80187e6:	4610      	mov	r0, r2
 80187e8:	f000 fd7e 	bl	80192e8 <TimerCountdown>
 80187ec:	e002      	b.n	80187f4 <readPacket+0xfe>
        goto exit;
 80187ee:	bf00      	nop
 80187f0:	e000      	b.n	80187f4 <readPacket+0xfe>
exit:
 80187f2:	bf00      	nop
    return rc;
 80187f4:	69fb      	ldr	r3, [r7, #28]
}
 80187f6:	4618      	mov	r0, r3
 80187f8:	3724      	adds	r7, #36	; 0x24
 80187fa:	46bd      	mov	sp, r7
 80187fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187fe <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80187fe:	b480      	push	{r7}
 8018800:	b087      	sub	sp, #28
 8018802:	af00      	add	r7, sp, #0
 8018804:	6078      	str	r0, [r7, #4]
 8018806:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	689b      	ldr	r3, [r3, #8]
 8018810:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	685b      	ldr	r3, [r3, #4]
 8018816:	461a      	mov	r2, r3
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	4413      	add	r3, r2
 801881c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801881e:	e039      	b.n	8018894 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	2b2f      	cmp	r3, #47	; 0x2f
 8018826:	d103      	bne.n	8018830 <isTopicMatched+0x32>
 8018828:	697b      	ldr	r3, [r7, #20]
 801882a:	781b      	ldrb	r3, [r3, #0]
 801882c:	2b2f      	cmp	r3, #47	; 0x2f
 801882e:	d13a      	bne.n	80188a6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8018830:	697b      	ldr	r3, [r7, #20]
 8018832:	781b      	ldrb	r3, [r3, #0]
 8018834:	2b2b      	cmp	r3, #43	; 0x2b
 8018836:	d009      	beq.n	801884c <isTopicMatched+0x4e>
 8018838:	697b      	ldr	r3, [r7, #20]
 801883a:	781b      	ldrb	r3, [r3, #0]
 801883c:	2b23      	cmp	r3, #35	; 0x23
 801883e:	d005      	beq.n	801884c <isTopicMatched+0x4e>
 8018840:	697b      	ldr	r3, [r7, #20]
 8018842:	781a      	ldrb	r2, [r3, #0]
 8018844:	693b      	ldr	r3, [r7, #16]
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	429a      	cmp	r2, r3
 801884a:	d12e      	bne.n	80188aa <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801884c:	697b      	ldr	r3, [r7, #20]
 801884e:	781b      	ldrb	r3, [r3, #0]
 8018850:	2b2b      	cmp	r3, #43	; 0x2b
 8018852:	d112      	bne.n	801887a <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	3301      	adds	r3, #1
 8018858:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801885a:	e005      	b.n	8018868 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801885c:	693b      	ldr	r3, [r7, #16]
 801885e:	3301      	adds	r3, #1
 8018860:	613b      	str	r3, [r7, #16]
 8018862:	693b      	ldr	r3, [r7, #16]
 8018864:	3301      	adds	r3, #1
 8018866:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8018868:	68fa      	ldr	r2, [r7, #12]
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	429a      	cmp	r2, r3
 801886e:	d20b      	bcs.n	8018888 <isTopicMatched+0x8a>
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	781b      	ldrb	r3, [r3, #0]
 8018874:	2b2f      	cmp	r3, #47	; 0x2f
 8018876:	d1f1      	bne.n	801885c <isTopicMatched+0x5e>
 8018878:	e006      	b.n	8018888 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	781b      	ldrb	r3, [r3, #0]
 801887e:	2b23      	cmp	r3, #35	; 0x23
 8018880:	d102      	bne.n	8018888 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8018882:	68bb      	ldr	r3, [r7, #8]
 8018884:	3b01      	subs	r3, #1
 8018886:	613b      	str	r3, [r7, #16]
        curf++;
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	3301      	adds	r3, #1
 801888c:	617b      	str	r3, [r7, #20]
        curn++;
 801888e:	693b      	ldr	r3, [r7, #16]
 8018890:	3301      	adds	r3, #1
 8018892:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8018894:	697b      	ldr	r3, [r7, #20]
 8018896:	781b      	ldrb	r3, [r3, #0]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d007      	beq.n	80188ac <isTopicMatched+0xae>
 801889c:	693a      	ldr	r2, [r7, #16]
 801889e:	68bb      	ldr	r3, [r7, #8]
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d3bd      	bcc.n	8018820 <isTopicMatched+0x22>
 80188a4:	e002      	b.n	80188ac <isTopicMatched+0xae>
            break;
 80188a6:	bf00      	nop
 80188a8:	e000      	b.n	80188ac <isTopicMatched+0xae>
            break;
 80188aa:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 80188ac:	693a      	ldr	r2, [r7, #16]
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	429a      	cmp	r2, r3
 80188b2:	d105      	bne.n	80188c0 <isTopicMatched+0xc2>
 80188b4:	697b      	ldr	r3, [r7, #20]
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d101      	bne.n	80188c0 <isTopicMatched+0xc2>
 80188bc:	2301      	movs	r3, #1
 80188be:	e000      	b.n	80188c2 <isTopicMatched+0xc4>
 80188c0:	2300      	movs	r3, #0
 80188c2:	b2db      	uxtb	r3, r3
}
 80188c4:	4618      	mov	r0, r3
 80188c6:	371c      	adds	r7, #28
 80188c8:	46bd      	mov	sp, r7
 80188ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ce:	4770      	bx	lr

080188d0 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b08a      	sub	sp, #40	; 0x28
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	60f8      	str	r0, [r7, #12]
 80188d8:	60b9      	str	r1, [r7, #8]
 80188da:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80188dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80188e0:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80188e2:	2300      	movs	r3, #0
 80188e4:	627b      	str	r3, [r7, #36]	; 0x24
 80188e6:	e03c      	b.n	8018962 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188ec:	3205      	adds	r2, #5
 80188ee:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d032      	beq.n	801895c <deliverMessage+0x8c>
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188fa:	3205      	adds	r2, #5
 80188fc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018900:	4619      	mov	r1, r3
 8018902:	68b8      	ldr	r0, [r7, #8]
 8018904:	f001 fab6 	bl	8019e74 <MQTTPacket_equals>
 8018908:	4603      	mov	r3, r0
 801890a:	2b00      	cmp	r3, #0
 801890c:	d10b      	bne.n	8018926 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018912:	3205      	adds	r2, #5
 8018914:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018918:	68b9      	ldr	r1, [r7, #8]
 801891a:	4618      	mov	r0, r3
 801891c:	f7ff ff6f 	bl	80187fe <isTopicMatched>
 8018920:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8018922:	2b00      	cmp	r3, #0
 8018924:	d01a      	beq.n	801895c <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8018926:	68fa      	ldr	r2, [r7, #12]
 8018928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801892a:	3305      	adds	r3, #5
 801892c:	00db      	lsls	r3, r3, #3
 801892e:	4413      	add	r3, r2
 8018930:	685b      	ldr	r3, [r3, #4]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d012      	beq.n	801895c <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8018936:	f107 0318 	add.w	r3, r7, #24
 801893a:	687a      	ldr	r2, [r7, #4]
 801893c:	68b9      	ldr	r1, [r7, #8]
 801893e:	4618      	mov	r0, r3
 8018940:	f7ff fddc 	bl	80184fc <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8018944:	68fa      	ldr	r2, [r7, #12]
 8018946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018948:	3305      	adds	r3, #5
 801894a:	00db      	lsls	r3, r3, #3
 801894c:	4413      	add	r3, r2
 801894e:	685b      	ldr	r3, [r3, #4]
 8018950:	f107 0218 	add.w	r2, r7, #24
 8018954:	4610      	mov	r0, r2
 8018956:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8018958:	2300      	movs	r3, #0
 801895a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801895e:	3301      	adds	r3, #1
 8018960:	627b      	str	r3, [r7, #36]	; 0x24
 8018962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018964:	2b04      	cmp	r3, #4
 8018966:	ddbf      	ble.n	80188e8 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8018968:	6a3b      	ldr	r3, [r7, #32]
 801896a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801896e:	d112      	bne.n	8018996 <deliverMessage+0xc6>
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018974:	2b00      	cmp	r3, #0
 8018976:	d00e      	beq.n	8018996 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8018978:	f107 0310 	add.w	r3, r7, #16
 801897c:	687a      	ldr	r2, [r7, #4]
 801897e:	68b9      	ldr	r1, [r7, #8]
 8018980:	4618      	mov	r0, r3
 8018982:	f7ff fdbb 	bl	80184fc <NewMessageData>
        c->defaultMessageHandler(&md);
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801898a:	f107 0210 	add.w	r2, r7, #16
 801898e:	4610      	mov	r0, r2
 8018990:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8018992:	2300      	movs	r3, #0
 8018994:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8018996:	6a3b      	ldr	r3, [r7, #32]
}
 8018998:	4618      	mov	r0, r3
 801899a:	3728      	adds	r7, #40	; 0x28
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}

080189a0 <keepalive>:


int keepalive(MQTTClient* c)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b086      	sub	sp, #24
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 80189a8:	2300      	movs	r3, #0
 80189aa:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	699b      	ldr	r3, [r3, #24]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d03e      	beq.n	8018a32 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	3358      	adds	r3, #88	; 0x58
 80189b8:	4618      	mov	r0, r3
 80189ba:	f000 fc6b 	bl	8019294 <TimerIsExpired>
 80189be:	4603      	mov	r3, r0
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d107      	bne.n	80189d4 <keepalive+0x34>
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	3360      	adds	r3, #96	; 0x60
 80189c8:	4618      	mov	r0, r3
 80189ca:	f000 fc63 	bl	8019294 <TimerIsExpired>
 80189ce:	4603      	mov	r3, r0
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d030      	beq.n	8018a36 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	7f1b      	ldrb	r3, [r3, #28]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d003      	beq.n	80189e4 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 80189dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80189e0:	617b      	str	r3, [r7, #20]
 80189e2:	e029      	b.n	8018a38 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 80189e4:	f107 0308 	add.w	r3, r7, #8
 80189e8:	4618      	mov	r0, r3
 80189ea:	f000 fcab 	bl	8019344 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 80189ee:	f107 0308 	add.w	r3, r7, #8
 80189f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80189f6:	4618      	mov	r0, r3
 80189f8:	f000 fc62 	bl	80192c0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	691a      	ldr	r2, [r3, #16]
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	689b      	ldr	r3, [r3, #8]
 8018a04:	4619      	mov	r1, r3
 8018a06:	4610      	mov	r0, r2
 8018a08:	f000 ff98 	bl	801993c <MQTTSerialize_pingreq>
 8018a0c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8018a0e:	693b      	ldr	r3, [r7, #16]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	dd11      	ble.n	8018a38 <keepalive+0x98>
 8018a14:	f107 0308 	add.w	r3, r7, #8
 8018a18:	461a      	mov	r2, r3
 8018a1a:	6939      	ldr	r1, [r7, #16]
 8018a1c:	6878      	ldr	r0, [r7, #4]
 8018a1e:	f7ff fd98 	bl	8018552 <sendPacket>
 8018a22:	6178      	str	r0, [r7, #20]
 8018a24:	697b      	ldr	r3, [r7, #20]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d106      	bne.n	8018a38 <keepalive+0x98>
                c->ping_outstanding = 1;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	2201      	movs	r2, #1
 8018a2e:	771a      	strb	r2, [r3, #28]
 8018a30:	e002      	b.n	8018a38 <keepalive+0x98>
        goto exit;
 8018a32:	bf00      	nop
 8018a34:	e000      	b.n	8018a38 <keepalive+0x98>
        }
    }

exit:
 8018a36:	bf00      	nop
    return rc;
 8018a38:	697b      	ldr	r3, [r7, #20]
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3718      	adds	r7, #24
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}

08018a42 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8018a42:	b480      	push	{r7}
 8018a44:	b085      	sub	sp, #20
 8018a46:	af00      	add	r7, sp, #0
 8018a48:	6078      	str	r0, [r7, #4]
    int i = 0;
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018a4e:	2300      	movs	r3, #0
 8018a50:	60fb      	str	r3, [r7, #12]
 8018a52:	e008      	b.n	8018a66 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	68fa      	ldr	r2, [r7, #12]
 8018a58:	3205      	adds	r2, #5
 8018a5a:	2100      	movs	r1, #0
 8018a5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	3301      	adds	r3, #1
 8018a64:	60fb      	str	r3, [r7, #12]
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	2b04      	cmp	r3, #4
 8018a6a:	ddf3      	ble.n	8018a54 <MQTTCleanSession+0x12>
}
 8018a6c:	bf00      	nop
 8018a6e:	bf00      	nop
 8018a70:	3714      	adds	r7, #20
 8018a72:	46bd      	mov	sp, r7
 8018a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a78:	4770      	bx	lr

08018a7a <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 8018a7a:	b580      	push	{r7, lr}
 8018a7c:	b082      	sub	sp, #8
 8018a7e:	af00      	add	r7, sp, #0
 8018a80:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2200      	movs	r2, #0
 8018a86:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d002      	beq.n	8018a9c <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8018a96:	6878      	ldr	r0, [r7, #4]
 8018a98:	f7ff ffd3 	bl	8018a42 <MQTTCleanSession>
}
 8018a9c:	bf00      	nop
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}

08018aa4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8018aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018aa6:	b095      	sub	sp, #84	; 0x54
 8018aa8:	af06      	add	r7, sp, #24
 8018aaa:	6078      	str	r0, [r7, #4]
 8018aac:	6039      	str	r1, [r7, #0]
    int len = 0,
 8018aae:	2300      	movs	r3, #0
 8018ab0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8018ab6:	6839      	ldr	r1, [r7, #0]
 8018ab8:	6878      	ldr	r0, [r7, #4]
 8018aba:	f7ff fe1c 	bl	80186f6 <readPacket>
 8018abe:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 8018ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac2:	2b0d      	cmp	r3, #13
 8018ac4:	d81e      	bhi.n	8018b04 <cycle+0x60>
 8018ac6:	a201      	add	r2, pc, #4	; (adr r2, 8018acc <cycle+0x28>)
 8018ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018acc:	08018c5b 	.word	0x08018c5b
 8018ad0:	08018b05 	.word	0x08018b05
 8018ad4:	08018c5b 	.word	0x08018c5b
 8018ad8:	08018b0b 	.word	0x08018b0b
 8018adc:	08018c5b 	.word	0x08018c5b
 8018ae0:	08018bd7 	.word	0x08018bd7
 8018ae4:	08018bd7 	.word	0x08018bd7
 8018ae8:	08018c5b 	.word	0x08018c5b
 8018aec:	08018b05 	.word	0x08018b05
 8018af0:	08018c5b 	.word	0x08018c5b
 8018af4:	08018b05 	.word	0x08018b05
 8018af8:	08018c5b 	.word	0x08018c5b
 8018afc:	08018b05 	.word	0x08018b05
 8018b00:	08018c53 	.word	0x08018c53
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8018b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b06:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 8018b08:	e0b9      	b.n	8018c7e <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8018b12:	687a      	ldr	r2, [r7, #4]
 8018b14:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8018b16:	4616      	mov	r6, r2
 8018b18:	f107 0210 	add.w	r2, r7, #16
 8018b1c:	1d15      	adds	r5, r2, #4
 8018b1e:	f107 0210 	add.w	r2, r7, #16
 8018b22:	1c54      	adds	r4, r2, #1
 8018b24:	f107 010c 	add.w	r1, r7, #12
 8018b28:	f107 0210 	add.w	r2, r7, #16
 8018b2c:	1c90      	adds	r0, r2, #2
 8018b2e:	9604      	str	r6, [sp, #16]
 8018b30:	9303      	str	r3, [sp, #12]
 8018b32:	f107 0310 	add.w	r3, r7, #16
 8018b36:	330c      	adds	r3, #12
 8018b38:	9302      	str	r3, [sp, #8]
 8018b3a:	f107 0310 	add.w	r3, r7, #16
 8018b3e:	3308      	adds	r3, #8
 8018b40:	9301      	str	r3, [sp, #4]
 8018b42:	f107 0320 	add.w	r3, r7, #32
 8018b46:	9300      	str	r3, [sp, #0]
 8018b48:	462b      	mov	r3, r5
 8018b4a:	4622      	mov	r2, r4
 8018b4c:	f000 ff05 	bl	801995a <MQTTDeserialize_publish>
 8018b50:	4603      	mov	r3, r0
 8018b52:	2b01      	cmp	r3, #1
 8018b54:	f040 8090 	bne.w	8018c78 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8018b5e:	f107 0210 	add.w	r2, r7, #16
 8018b62:	f107 0320 	add.w	r3, r7, #32
 8018b66:	4619      	mov	r1, r3
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f7ff feb1 	bl	80188d0 <deliverMessage>
            if (msg.qos != QOS0)
 8018b6e:	7c3b      	ldrb	r3, [r7, #16]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d074      	beq.n	8018c5e <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8018b74:	7c3b      	ldrb	r3, [r7, #16]
 8018b76:	2b01      	cmp	r3, #1
 8018b78:	d10c      	bne.n	8018b94 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6918      	ldr	r0, [r3, #16]
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	689b      	ldr	r3, [r3, #8]
 8018b82:	4619      	mov	r1, r3
 8018b84:	8abb      	ldrh	r3, [r7, #20]
 8018b86:	9300      	str	r3, [sp, #0]
 8018b88:	2300      	movs	r3, #0
 8018b8a:	2204      	movs	r2, #4
 8018b8c:	f001 fa3f 	bl	801a00e <MQTTSerialize_ack>
 8018b90:	6378      	str	r0, [r7, #52]	; 0x34
 8018b92:	e00e      	b.n	8018bb2 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8018b94:	7c3b      	ldrb	r3, [r7, #16]
 8018b96:	2b02      	cmp	r3, #2
 8018b98:	d10b      	bne.n	8018bb2 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	6918      	ldr	r0, [r3, #16]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	689b      	ldr	r3, [r3, #8]
 8018ba2:	4619      	mov	r1, r3
 8018ba4:	8abb      	ldrh	r3, [r7, #20]
 8018ba6:	9300      	str	r3, [sp, #0]
 8018ba8:	2300      	movs	r3, #0
 8018baa:	2205      	movs	r2, #5
 8018bac:	f001 fa2f 	bl	801a00e <MQTTSerialize_ack>
 8018bb0:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8018bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	dc03      	bgt.n	8018bc0 <cycle+0x11c>
                    rc = FAILURE;
 8018bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8018bbe:	e005      	b.n	8018bcc <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8018bc0:	683a      	ldr	r2, [r7, #0]
 8018bc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018bc4:	6878      	ldr	r0, [r7, #4]
 8018bc6:	f7ff fcc4 	bl	8018552 <sendPacket>
 8018bca:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8018bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018bd2:	d144      	bne.n	8018c5e <cycle+0x1ba>
                    goto exit; // there was a problem
 8018bd4:	e053      	b.n	8018c7e <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	695c      	ldr	r4, [r3, #20]
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	f107 020a 	add.w	r2, r7, #10
 8018be2:	f107 0109 	add.w	r1, r7, #9
 8018be6:	f107 0008 	add.w	r0, r7, #8
 8018bea:	9300      	str	r3, [sp, #0]
 8018bec:	4623      	mov	r3, r4
 8018bee:	f000 ff26 	bl	8019a3e <MQTTDeserialize_ack>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	2b01      	cmp	r3, #1
 8018bf6:	d003      	beq.n	8018c00 <cycle+0x15c>
                rc = FAILURE;
 8018bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8018bfe:	e023      	b.n	8018c48 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	6918      	ldr	r0, [r3, #16]
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	689b      	ldr	r3, [r3, #8]
 8018c08:	4619      	mov	r1, r3
 8018c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c0c:	2b05      	cmp	r3, #5
 8018c0e:	d101      	bne.n	8018c14 <cycle+0x170>
 8018c10:	2206      	movs	r2, #6
 8018c12:	e000      	b.n	8018c16 <cycle+0x172>
 8018c14:	2207      	movs	r2, #7
 8018c16:	897b      	ldrh	r3, [r7, #10]
 8018c18:	9300      	str	r3, [sp, #0]
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	f001 f9f7 	bl	801a00e <MQTTSerialize_ack>
 8018c20:	6378      	str	r0, [r7, #52]	; 0x34
 8018c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	dc03      	bgt.n	8018c30 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8018c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8018c2e:	e00b      	b.n	8018c48 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8018c30:	683a      	ldr	r2, [r7, #0]
 8018c32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018c34:	6878      	ldr	r0, [r7, #4]
 8018c36:	f7ff fc8c 	bl	8018552 <sendPacket>
 8018c3a:	6338      	str	r0, [r7, #48]	; 0x30
 8018c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d002      	beq.n	8018c48 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 8018c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c46:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8018c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c4e:	d108      	bne.n	8018c62 <cycle+0x1be>
                goto exit; // there was a problem
 8018c50:	e015      	b.n	8018c7e <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2200      	movs	r2, #0
 8018c56:	771a      	strb	r2, [r3, #28]
            break;
 8018c58:	e004      	b.n	8018c64 <cycle+0x1c0>
            break;
 8018c5a:	bf00      	nop
 8018c5c:	e002      	b.n	8018c64 <cycle+0x1c0>
            break;
 8018c5e:	bf00      	nop
 8018c60:	e000      	b.n	8018c64 <cycle+0x1c0>
            break;
 8018c62:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f7ff fe9b 	bl	80189a0 <keepalive>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d005      	beq.n	8018c7c <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8018c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c74:	633b      	str	r3, [r7, #48]	; 0x30
 8018c76:	e002      	b.n	8018c7e <cycle+0x1da>
                goto exit;
 8018c78:	bf00      	nop
 8018c7a:	e000      	b.n	8018c7e <cycle+0x1da>
    }

exit:
 8018c7c:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8018c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d102      	bne.n	8018c8a <cycle+0x1e6>
        rc = packet_type;
 8018c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c86:	633b      	str	r3, [r7, #48]	; 0x30
 8018c88:	e006      	b.n	8018c98 <cycle+0x1f4>
    else if (c->isconnected)
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	6a1b      	ldr	r3, [r3, #32]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d002      	beq.n	8018c98 <cycle+0x1f4>
        MQTTCloseSession(c);
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	f7ff fef1 	bl	8018a7a <MQTTCloseSession>
    return rc;
 8018c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	373c      	adds	r7, #60	; 0x3c
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ca2:	bf00      	nop

08018ca4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b086      	sub	sp, #24
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 8018cae:	2300      	movs	r3, #0
 8018cb0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8018cb2:	f107 030c 	add.w	r3, r7, #12
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	f000 fb44 	bl	8019344 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8018cbc:	683a      	ldr	r2, [r7, #0]
 8018cbe:	f107 030c 	add.w	r3, r7, #12
 8018cc2:	4611      	mov	r1, r2
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f000 fafb 	bl	80192c0 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 8018cca:	f107 030c 	add.w	r3, r7, #12
 8018cce:	4619      	mov	r1, r3
 8018cd0:	6878      	ldr	r0, [r7, #4]
 8018cd2:	f7ff fee7 	bl	8018aa4 <cycle>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	da03      	bge.n	8018ce4 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8018cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ce0:	617b      	str	r3, [r7, #20]
            break;
 8018ce2:	e007      	b.n	8018cf4 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8018ce4:	f107 030c 	add.w	r3, r7, #12
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f000 fad3 	bl	8019294 <TimerIsExpired>
 8018cee:	4603      	mov	r3, r0
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d0ea      	beq.n	8018cca <MQTTYield+0x26>

    return rc;
 8018cf4:	697b      	ldr	r3, [r7, #20]
}
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	3718      	adds	r7, #24
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	bd80      	pop	{r7, pc}

08018cfe <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8018cfe:	b580      	push	{r7, lr}
 8018d00:	b086      	sub	sp, #24
 8018d02:	af00      	add	r7, sp, #0
 8018d04:	60f8      	str	r0, [r7, #12]
 8018d06:	60b9      	str	r1, [r7, #8]
 8018d08:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d0e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8018d10:	6878      	ldr	r0, [r7, #4]
 8018d12:	f000 fabf 	bl	8019294 <TimerIsExpired>
 8018d16:	4603      	mov	r3, r0
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d10c      	bne.n	8018d36 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8018d1c:	6879      	ldr	r1, [r7, #4]
 8018d1e:	68f8      	ldr	r0, [r7, #12]
 8018d20:	f7ff fec0 	bl	8018aa4 <cycle>
 8018d24:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8018d26:	697a      	ldr	r2, [r7, #20]
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	429a      	cmp	r2, r3
 8018d2c:	d004      	beq.n	8018d38 <waitfor+0x3a>
 8018d2e:	697b      	ldr	r3, [r7, #20]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	daed      	bge.n	8018d10 <waitfor+0x12>
 8018d34:	e000      	b.n	8018d38 <waitfor+0x3a>
            break; // we timed out
 8018d36:	bf00      	nop

    return rc;
 8018d38:	697b      	ldr	r3, [r7, #20]
}
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	3718      	adds	r7, #24
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	bd80      	pop	{r7, pc}
	...

08018d44 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b09e      	sub	sp, #120	; 0x78
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	60f8      	str	r0, [r7, #12]
 8018d4c:	60b9      	str	r1, [r7, #8]
 8018d4e:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8018d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d54:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8018d56:	4a43      	ldr	r2, [pc, #268]	; (8018e64 <MQTTConnectWithResults+0x120>)
 8018d58:	f107 0310 	add.w	r3, r7, #16
 8018d5c:	4611      	mov	r1, r2
 8018d5e:	2258      	movs	r2, #88	; 0x58
 8018d60:	4618      	mov	r0, r3
 8018d62:	f004 fc9f 	bl	801d6a4 <memcpy>
    int len = 0;
 8018d66:	2300      	movs	r3, #0
 8018d68:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	6a1b      	ldr	r3, [r3, #32]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d164      	bne.n	8018e3c <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8018d72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018d76:	4618      	mov	r0, r3
 8018d78:	f000 fae4 	bl	8019344 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	685a      	ldr	r2, [r3, #4]
 8018d80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018d84:	4611      	mov	r1, r2
 8018d86:	4618      	mov	r0, r3
 8018d88:	f000 fa9a 	bl	80192c0 <TimerCountdownMS>

    if (options == 0)
 8018d8c:	68bb      	ldr	r3, [r7, #8]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d102      	bne.n	8018d98 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8018d92:	f107 0310 	add.w	r3, r7, #16
 8018d96:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8018d98:	68bb      	ldr	r3, [r7, #8]
 8018d9a:	8b1b      	ldrh	r3, [r3, #24]
 8018d9c:	461a      	mov	r2, r3
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	7e9b      	ldrb	r3, [r3, #26]
 8018da6:	461a      	mov	r2, r3
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	699b      	ldr	r3, [r3, #24]
 8018db6:	4619      	mov	r1, r3
 8018db8:	4610      	mov	r0, r2
 8018dba:	f000 fa95 	bl	80192e8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	6918      	ldr	r0, [r3, #16]
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	689b      	ldr	r3, [r3, #8]
 8018dc6:	68ba      	ldr	r2, [r7, #8]
 8018dc8:	4619      	mov	r1, r3
 8018dca:	f000 fc2f 	bl	801962c <MQTTSerialize_connect>
 8018dce:	6738      	str	r0, [r7, #112]	; 0x70
 8018dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	dd34      	ble.n	8018e40 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8018dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018dda:	461a      	mov	r2, r3
 8018ddc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8018dde:	68f8      	ldr	r0, [r7, #12]
 8018de0:	f7ff fbb7 	bl	8018552 <sendPacket>
 8018de4:	6778      	str	r0, [r7, #116]	; 0x74
 8018de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d12b      	bne.n	8018e44 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8018dec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018df0:	461a      	mov	r2, r3
 8018df2:	2102      	movs	r1, #2
 8018df4:	68f8      	ldr	r0, [r7, #12]
 8018df6:	f7ff ff82 	bl	8018cfe <waitfor>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	2b02      	cmp	r3, #2
 8018dfe:	d119      	bne.n	8018e34 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	2200      	movs	r2, #0
 8018e04:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	2200      	movs	r2, #0
 8018e0a:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	1c58      	adds	r0, r3, #1
 8018e10:	6879      	ldr	r1, [r7, #4]
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	695a      	ldr	r2, [r3, #20]
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	68db      	ldr	r3, [r3, #12]
 8018e1a:	f000 fcf3 	bl	8019804 <MQTTDeserialize_connack>
 8018e1e:	4603      	mov	r3, r0
 8018e20:	2b01      	cmp	r3, #1
 8018e22:	d103      	bne.n	8018e2c <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	677b      	str	r3, [r7, #116]	; 0x74
 8018e2a:	e00c      	b.n	8018e46 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8018e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e30:	677b      	str	r3, [r7, #116]	; 0x74
 8018e32:	e008      	b.n	8018e46 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8018e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e38:	677b      	str	r3, [r7, #116]	; 0x74
 8018e3a:	e004      	b.n	8018e46 <MQTTConnectWithResults+0x102>
		  goto exit;
 8018e3c:	bf00      	nop
 8018e3e:	e002      	b.n	8018e46 <MQTTConnectWithResults+0x102>
        goto exit;
 8018e40:	bf00      	nop
 8018e42:	e000      	b.n	8018e46 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8018e44:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8018e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d105      	bne.n	8018e58 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	2201      	movs	r2, #1
 8018e50:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	2200      	movs	r2, #0
 8018e56:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8018e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	3778      	adds	r7, #120	; 0x78
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd80      	pop	{r7, pc}
 8018e62:	bf00      	nop
 8018e64:	08021e88 	.word	0x08021e88

08018e68 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b084      	sub	sp, #16
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8018e72:	f107 030c 	add.w	r3, r7, #12
 8018e76:	461a      	mov	r2, r3
 8018e78:	6839      	ldr	r1, [r7, #0]
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	f7ff ff62 	bl	8018d44 <MQTTConnectWithResults>
 8018e80:	4603      	mov	r3, r0
}
 8018e82:	4618      	mov	r0, r3
 8018e84:	3710      	adds	r7, #16
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}

08018e8a <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 8018e8a:	b580      	push	{r7, lr}
 8018e8c:	b086      	sub	sp, #24
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	60f8      	str	r0, [r7, #12]
 8018e92:	60b9      	str	r1, [r7, #8]
 8018e94:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8018e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e9a:	617b      	str	r3, [r7, #20]
    int i = -1;
 8018e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ea0:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	613b      	str	r3, [r7, #16]
 8018ea6:	e028      	b.n	8018efa <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	693a      	ldr	r2, [r7, #16]
 8018eac:	3205      	adds	r2, #5
 8018eae:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d01e      	beq.n	8018ef4 <MQTTSetMessageHandler+0x6a>
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	693a      	ldr	r2, [r7, #16]
 8018eba:	3205      	adds	r2, #5
 8018ebc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018ec0:	68b9      	ldr	r1, [r7, #8]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7e7 f9bc 	bl	8000240 <strcmp>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d112      	bne.n	8018ef4 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d10c      	bne.n	8018eee <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	693a      	ldr	r2, [r7, #16]
 8018ed8:	3205      	adds	r2, #5
 8018eda:	2100      	movs	r1, #0
 8018edc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8018ee0:	68fa      	ldr	r2, [r7, #12]
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	3305      	adds	r3, #5
 8018ee6:	00db      	lsls	r3, r3, #3
 8018ee8:	4413      	add	r3, r2
 8018eea:	2200      	movs	r2, #0
 8018eec:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 8018eee:	2300      	movs	r3, #0
 8018ef0:	617b      	str	r3, [r7, #20]
            break;
 8018ef2:	e005      	b.n	8018f00 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	3301      	adds	r3, #1
 8018ef8:	613b      	str	r3, [r7, #16]
 8018efa:	693b      	ldr	r3, [r7, #16]
 8018efc:	2b04      	cmp	r3, #4
 8018efe:	ddd3      	ble.n	8018ea8 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d026      	beq.n	8018f54 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8018f06:	697b      	ldr	r3, [r7, #20]
 8018f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f0c:	d112      	bne.n	8018f34 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018f0e:	2300      	movs	r3, #0
 8018f10:	613b      	str	r3, [r7, #16]
 8018f12:	e00c      	b.n	8018f2e <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	693a      	ldr	r2, [r7, #16]
 8018f18:	3205      	adds	r2, #5
 8018f1a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d102      	bne.n	8018f28 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 8018f22:	2300      	movs	r3, #0
 8018f24:	617b      	str	r3, [r7, #20]
                    break;
 8018f26:	e005      	b.n	8018f34 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	3301      	adds	r3, #1
 8018f2c:	613b      	str	r3, [r7, #16]
 8018f2e:	693b      	ldr	r3, [r7, #16]
 8018f30:	2b04      	cmp	r3, #4
 8018f32:	ddef      	ble.n	8018f14 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8018f34:	693b      	ldr	r3, [r7, #16]
 8018f36:	2b04      	cmp	r3, #4
 8018f38:	dc0c      	bgt.n	8018f54 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	693a      	ldr	r2, [r7, #16]
 8018f3e:	3205      	adds	r2, #5
 8018f40:	68b9      	ldr	r1, [r7, #8]
 8018f42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8018f46:	68fa      	ldr	r2, [r7, #12]
 8018f48:	693b      	ldr	r3, [r7, #16]
 8018f4a:	3305      	adds	r3, #5
 8018f4c:	00db      	lsls	r3, r3, #3
 8018f4e:	4413      	add	r3, r2
 8018f50:	687a      	ldr	r2, [r7, #4]
 8018f52:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8018f54:	697b      	ldr	r3, [r7, #20]
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	3718      	adds	r7, #24
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd80      	pop	{r7, pc}

08018f5e <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8018f5e:	b5b0      	push	{r4, r5, r7, lr}
 8018f60:	b092      	sub	sp, #72	; 0x48
 8018f62:	af04      	add	r7, sp, #16
 8018f64:	60f8      	str	r0, [r7, #12]
 8018f66:	60b9      	str	r1, [r7, #8]
 8018f68:	603b      	str	r3, [r7, #0]
 8018f6a:	4613      	mov	r3, r2
 8018f6c:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8018f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018f72:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 8018f74:	2300      	movs	r3, #0
 8018f76:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	61fb      	str	r3, [r7, #28]
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	623b      	str	r3, [r7, #32]
 8018f80:	2300      	movs	r3, #0
 8018f82:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 8018f84:	68bb      	ldr	r3, [r7, #8]
 8018f86:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	6a1b      	ldr	r3, [r3, #32]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d062      	beq.n	8019056 <MQTTSubscribeWithResults+0xf8>
		    goto exit;

    TimerInit(&timer);
 8018f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f94:	4618      	mov	r0, r3
 8018f96:	f000 f9d5 	bl	8019344 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	685a      	ldr	r2, [r3, #4]
 8018f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018fa2:	4611      	mov	r1, r2
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f000 f98b 	bl	80192c0 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic,(int*)&qos);
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	691c      	ldr	r4, [r3, #16]
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	689b      	ldr	r3, [r3, #8]
 8018fb2:	461d      	mov	r5, r3
 8018fb4:	68f8      	ldr	r0, [r7, #12]
 8018fb6:	f7ff fab3 	bl	8018520 <getNextPacketId>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	b29a      	uxth	r2, r3
 8018fbe:	1dfb      	adds	r3, r7, #7
 8018fc0:	9302      	str	r3, [sp, #8]
 8018fc2:	f107 031c 	add.w	r3, r7, #28
 8018fc6:	9301      	str	r3, [sp, #4]
 8018fc8:	2301      	movs	r3, #1
 8018fca:	9300      	str	r3, [sp, #0]
 8018fcc:	4613      	mov	r3, r2
 8018fce:	2200      	movs	r2, #0
 8018fd0:	4629      	mov	r1, r5
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	f001 f897 	bl	801a106 <MQTTSerialize_subscribe>
 8018fd8:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8018fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	dd3c      	ble.n	801905a <MQTTSubscribeWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8018fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018fe8:	68f8      	ldr	r0, [r7, #12]
 8018fea:	f7ff fab2 	bl	8018552 <sendPacket>
 8018fee:	6378      	str	r0, [r7, #52]	; 0x34
 8018ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d133      	bne.n	801905e <MQTTSubscribeWithResults+0x100>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8018ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ffa:	461a      	mov	r2, r3
 8018ffc:	2109      	movs	r1, #9
 8018ffe:	68f8      	ldr	r0, [r7, #12]
 8019000:	f7ff fe7d 	bl	8018cfe <waitfor>
 8019004:	4603      	mov	r3, r0
 8019006:	2b09      	cmp	r3, #9
 8019008:	d121      	bne.n	801904e <MQTTSubscribeWithResults+0xf0>
    {
        int count = 0;
 801900a:	2300      	movs	r3, #0
 801900c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 801900e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019010:	2200      	movs	r2, #0
 8019012:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, 0, c->readbuf, c->readbuf_size) == 1)
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	695b      	ldr	r3, [r3, #20]
 8019018:	68fa      	ldr	r2, [r7, #12]
 801901a:	68d2      	ldr	r2, [r2, #12]
 801901c:	4611      	mov	r1, r2
 801901e:	f107 0218 	add.w	r2, r7, #24
 8019022:	f107 0016 	add.w	r0, r7, #22
 8019026:	9101      	str	r1, [sp, #4]
 8019028:	9300      	str	r3, [sp, #0]
 801902a:	2300      	movs	r3, #0
 801902c:	2101      	movs	r1, #1
 801902e:	f001 f8e6 	bl	801a1fe <MQTTDeserialize_suback>
 8019032:	4603      	mov	r3, r0
 8019034:	2b01      	cmp	r3, #1
 8019036:	d113      	bne.n	8019060 <MQTTSubscribeWithResults+0x102>
        {
            if (data->grantedQoS != 0x80)
 8019038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801903a:	781b      	ldrb	r3, [r3, #0]
 801903c:	2b80      	cmp	r3, #128	; 0x80
 801903e:	d00f      	beq.n	8019060 <MQTTSubscribeWithResults+0x102>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8019040:	683a      	ldr	r2, [r7, #0]
 8019042:	68b9      	ldr	r1, [r7, #8]
 8019044:	68f8      	ldr	r0, [r7, #12]
 8019046:	f7ff ff20 	bl	8018e8a <MQTTSetMessageHandler>
 801904a:	6378      	str	r0, [r7, #52]	; 0x34
 801904c:	e008      	b.n	8019060 <MQTTSubscribeWithResults+0x102>
        }
    }
    else
        rc = FAILURE;
 801904e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019052:	637b      	str	r3, [r7, #52]	; 0x34
 8019054:	e004      	b.n	8019060 <MQTTSubscribeWithResults+0x102>
		    goto exit;
 8019056:	bf00      	nop
 8019058:	e002      	b.n	8019060 <MQTTSubscribeWithResults+0x102>
        goto exit;
 801905a:	bf00      	nop
 801905c:	e000      	b.n	8019060 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem
 801905e:	bf00      	nop

exit:
    if (rc == FAILURE)
 8019060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019066:	d102      	bne.n	801906e <MQTTSubscribeWithResults+0x110>
        MQTTCloseSession(c);
 8019068:	68f8      	ldr	r0, [r7, #12]
 801906a:	f7ff fd06 	bl	8018a7a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019070:	4618      	mov	r0, r3
 8019072:	3738      	adds	r7, #56	; 0x38
 8019074:	46bd      	mov	sp, r7
 8019076:	bdb0      	pop	{r4, r5, r7, pc}

08019078 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b088      	sub	sp, #32
 801907c:	af02      	add	r7, sp, #8
 801907e:	60f8      	str	r0, [r7, #12]
 8019080:	60b9      	str	r1, [r7, #8]
 8019082:	603b      	str	r3, [r7, #0]
 8019084:	4613      	mov	r3, r2
 8019086:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8019088:	79fa      	ldrb	r2, [r7, #7]
 801908a:	f107 0314 	add.w	r3, r7, #20
 801908e:	9300      	str	r3, [sp, #0]
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	68b9      	ldr	r1, [r7, #8]
 8019094:	68f8      	ldr	r0, [r7, #12]
 8019096:	f7ff ff62 	bl	8018f5e <MQTTSubscribeWithResults>
 801909a:	4603      	mov	r3, r0
}
 801909c:	4618      	mov	r0, r3
 801909e:	3718      	adds	r7, #24
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 80190a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190a6:	b097      	sub	sp, #92	; 0x5c
 80190a8:	af08      	add	r7, sp, #32
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	60b9      	str	r1, [r7, #8]
 80190ae:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80190b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80190b4:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 80190b6:	2300      	movs	r3, #0
 80190b8:	61fb      	str	r3, [r7, #28]
 80190ba:	2300      	movs	r3, #0
 80190bc:	623b      	str	r3, [r7, #32]
 80190be:	2300      	movs	r3, #0
 80190c0:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 80190c2:	68bb      	ldr	r3, [r7, #8]
 80190c4:	61fb      	str	r3, [r7, #28]
    int len = 0;
 80190c6:	2300      	movs	r3, #0
 80190c8:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	6a1b      	ldr	r3, [r3, #32]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	f000 809b 	beq.w	801920a <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 80190d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190d8:	4618      	mov	r0, r3
 80190da:	f000 f933 	bl	8019344 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	685a      	ldr	r2, [r3, #4]
 80190e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80190e6:	4611      	mov	r1, r2
 80190e8:	4618      	mov	r0, r3
 80190ea:	f000 f8e9 	bl	80192c0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	2b01      	cmp	r3, #1
 80190f4:	d003      	beq.n	80190fe <MQTTPublish+0x5a>
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	781b      	ldrb	r3, [r3, #0]
 80190fa:	2b02      	cmp	r3, #2
 80190fc:	d106      	bne.n	801910c <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 80190fe:	68f8      	ldr	r0, [r7, #12]
 8019100:	f7ff fa0e 	bl	8018520 <getNextPacketId>
 8019104:	4603      	mov	r3, r0
 8019106:	b29a      	uxth	r2, r3
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	691b      	ldr	r3, [r3, #16]
 8019110:	603b      	str	r3, [r7, #0]
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	689b      	ldr	r3, [r3, #8]
 8019116:	469c      	mov	ip, r3
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	469e      	mov	lr, r3
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	785d      	ldrb	r5, [r3, #1]
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	689b      	ldr	r3, [r3, #8]
 801912a:	687a      	ldr	r2, [r7, #4]
 801912c:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801912e:	9206      	str	r2, [sp, #24]
 8019130:	9305      	str	r3, [sp, #20]
 8019132:	ac02      	add	r4, sp, #8
 8019134:	f107 031c 	add.w	r3, r7, #28
 8019138:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801913c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019140:	9601      	str	r6, [sp, #4]
 8019142:	9500      	str	r5, [sp, #0]
 8019144:	4673      	mov	r3, lr
 8019146:	2200      	movs	r2, #0
 8019148:	4661      	mov	r1, ip
 801914a:	6838      	ldr	r0, [r7, #0]
 801914c:	f000 fee9 	bl	8019f22 <MQTTSerialize_publish>
 8019150:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8019152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019154:	2b00      	cmp	r3, #0
 8019156:	dd5a      	ble.n	801920e <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8019158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801915c:	461a      	mov	r2, r3
 801915e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019160:	68f8      	ldr	r0, [r7, #12]
 8019162:	f7ff f9f6 	bl	8018552 <sendPacket>
 8019166:	6378      	str	r0, [r7, #52]	; 0x34
 8019168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801916a:	2b00      	cmp	r3, #0
 801916c:	d151      	bne.n	8019212 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	781b      	ldrb	r3, [r3, #0]
 8019172:	2b01      	cmp	r3, #1
 8019174:	d122      	bne.n	80191bc <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8019176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801917a:	461a      	mov	r2, r3
 801917c:	2104      	movs	r1, #4
 801917e:	68f8      	ldr	r0, [r7, #12]
 8019180:	f7ff fdbd 	bl	8018cfe <waitfor>
 8019184:	4603      	mov	r3, r0
 8019186:	2b04      	cmp	r3, #4
 8019188:	d114      	bne.n	80191b4 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	695c      	ldr	r4, [r3, #20]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	68db      	ldr	r3, [r3, #12]
 8019192:	f107 021a 	add.w	r2, r7, #26
 8019196:	f107 0119 	add.w	r1, r7, #25
 801919a:	f107 0018 	add.w	r0, r7, #24
 801919e:	9300      	str	r3, [sp, #0]
 80191a0:	4623      	mov	r3, r4
 80191a2:	f000 fc4c 	bl	8019a3e <MQTTDeserialize_ack>
 80191a6:	4603      	mov	r3, r0
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	d035      	beq.n	8019218 <MQTTPublish+0x174>
                rc = FAILURE;
 80191ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191b0:	637b      	str	r3, [r7, #52]	; 0x34
 80191b2:	e031      	b.n	8019218 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80191b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191b8:	637b      	str	r3, [r7, #52]	; 0x34
 80191ba:	e02d      	b.n	8019218 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	2b02      	cmp	r3, #2
 80191c2:	d128      	bne.n	8019216 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80191c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80191c8:	461a      	mov	r2, r3
 80191ca:	2107      	movs	r1, #7
 80191cc:	68f8      	ldr	r0, [r7, #12]
 80191ce:	f7ff fd96 	bl	8018cfe <waitfor>
 80191d2:	4603      	mov	r3, r0
 80191d4:	2b07      	cmp	r3, #7
 80191d6:	d114      	bne.n	8019202 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	695c      	ldr	r4, [r3, #20]
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	68db      	ldr	r3, [r3, #12]
 80191e0:	f107 0216 	add.w	r2, r7, #22
 80191e4:	f107 0115 	add.w	r1, r7, #21
 80191e8:	f107 0014 	add.w	r0, r7, #20
 80191ec:	9300      	str	r3, [sp, #0]
 80191ee:	4623      	mov	r3, r4
 80191f0:	f000 fc25 	bl	8019a3e <MQTTDeserialize_ack>
 80191f4:	4603      	mov	r3, r0
 80191f6:	2b01      	cmp	r3, #1
 80191f8:	d00e      	beq.n	8019218 <MQTTPublish+0x174>
                rc = FAILURE;
 80191fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191fe:	637b      	str	r3, [r7, #52]	; 0x34
 8019200:	e00a      	b.n	8019218 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8019202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019206:	637b      	str	r3, [r7, #52]	; 0x34
 8019208:	e006      	b.n	8019218 <MQTTPublish+0x174>
		    goto exit;
 801920a:	bf00      	nop
 801920c:	e004      	b.n	8019218 <MQTTPublish+0x174>
        goto exit;
 801920e:	bf00      	nop
 8019210:	e002      	b.n	8019218 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8019212:	bf00      	nop
 8019214:	e000      	b.n	8019218 <MQTTPublish+0x174>
    }

exit:
 8019216:	bf00      	nop
    if (rc == FAILURE)
 8019218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801921a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801921e:	d102      	bne.n	8019226 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8019220:	68f8      	ldr	r0, [r7, #12]
 8019222:	f7ff fc2a 	bl	8018a7a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8019226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019228:	4618      	mov	r0, r3
 801922a:	373c      	adds	r7, #60	; 0x3c
 801922c:	46bd      	mov	sp, r7
 801922e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019230 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b086      	sub	sp, #24
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8019238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801923c:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 801923e:	2300      	movs	r3, #0
 8019240:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8019242:	f107 0308 	add.w	r3, r7, #8
 8019246:	4618      	mov	r0, r3
 8019248:	f000 f87c 	bl	8019344 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	685a      	ldr	r2, [r3, #4]
 8019250:	f107 0308 	add.w	r3, r7, #8
 8019254:	4611      	mov	r1, r2
 8019256:	4618      	mov	r0, r3
 8019258:	f000 f832 	bl	80192c0 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	691a      	ldr	r2, [r3, #16]
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	689b      	ldr	r3, [r3, #8]
 8019264:	4619      	mov	r1, r3
 8019266:	4610      	mov	r0, r2
 8019268:	f000 fb59 	bl	801991e <MQTTSerialize_disconnect>
 801926c:	6138      	str	r0, [r7, #16]
    if (len > 0)
 801926e:	693b      	ldr	r3, [r7, #16]
 8019270:	2b00      	cmp	r3, #0
 8019272:	dd07      	ble.n	8019284 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8019274:	f107 0308 	add.w	r3, r7, #8
 8019278:	461a      	mov	r2, r3
 801927a:	6939      	ldr	r1, [r7, #16]
 801927c:	6878      	ldr	r0, [r7, #4]
 801927e:	f7ff f968 	bl	8018552 <sendPacket>
 8019282:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f7ff fbf8 	bl	8018a7a <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 801928a:	697b      	ldr	r3, [r7, #20]
}
 801928c:	4618      	mov	r0, r3
 801928e:	3718      	adds	r7, #24
 8019290:	46bd      	mov	sp, r7
 8019292:	bd80      	pop	{r7, pc}

08019294 <TimerIsExpired>:
//#define SERVER_IP4	84

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 8019294:	b480      	push	{r7}
 8019296:	b085      	sub	sp, #20
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	685a      	ldr	r2, [r3, #4]
 80192a0:	4b06      	ldr	r3, [pc, #24]	; (80192bc <TimerIsExpired+0x28>)
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	1ad3      	subs	r3, r2, r3
 80192a6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	0fdb      	lsrs	r3, r3, #31
 80192ac:	b2db      	uxtb	r3, r3
}
 80192ae:	4618      	mov	r0, r3
 80192b0:	3714      	adds	r7, #20
 80192b2:	46bd      	mov	sp, r7
 80192b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b8:	4770      	bx	lr
 80192ba:	bf00      	nop
 80192bc:	2001151c 	.word	0x2001151c

080192c0 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 80192c0:	b480      	push	{r7}
 80192c2:	b083      	sub	sp, #12
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
 80192c8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80192ca:	4b06      	ldr	r3, [pc, #24]	; (80192e4 <TimerCountdownMS+0x24>)
 80192cc:	681a      	ldr	r2, [r3, #0]
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	441a      	add	r2, r3
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	605a      	str	r2, [r3, #4]
}
 80192d6:	bf00      	nop
 80192d8:	370c      	adds	r7, #12
 80192da:	46bd      	mov	sp, r7
 80192dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e0:	4770      	bx	lr
 80192e2:	bf00      	nop
 80192e4:	2001151c 	.word	0x2001151c

080192e8 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 80192e8:	b480      	push	{r7}
 80192ea:	b083      	sub	sp, #12
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
 80192f0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80192f8:	fb03 f202 	mul.w	r2, r3, r2
 80192fc:	4b05      	ldr	r3, [pc, #20]	; (8019314 <TimerCountdown+0x2c>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	441a      	add	r2, r3
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	605a      	str	r2, [r3, #4]
}
 8019306:	bf00      	nop
 8019308:	370c      	adds	r7, #12
 801930a:	46bd      	mov	sp, r7
 801930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019310:	4770      	bx	lr
 8019312:	bf00      	nop
 8019314:	2001151c 	.word	0x2001151c

08019318 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 8019318:	b480      	push	{r7}
 801931a:	b085      	sub	sp, #20
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	685a      	ldr	r2, [r3, #4]
 8019324:	4b06      	ldr	r3, [pc, #24]	; (8019340 <TimerLeftMS+0x28>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	1ad3      	subs	r3, r2, r3
 801932a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8019332:	4618      	mov	r0, r3
 8019334:	3714      	adds	r7, #20
 8019336:	46bd      	mov	sp, r7
 8019338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933c:	4770      	bx	lr
 801933e:	bf00      	nop
 8019340:	2001151c 	.word	0x2001151c

08019344 <TimerInit>:

void TimerInit(Timer *timer) {
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2200      	movs	r2, #0
 8019350:	605a      	str	r2, [r3, #4]
}
 8019352:	bf00      	nop
 8019354:	370c      	adds	r7, #12
 8019356:	46bd      	mov	sp, r7
 8019358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935c:	4770      	bx	lr
	...

08019360 <NewNetwork>:
	close(n->socket);
	n->socket = 0;
}

#elif defined(MQTT_LWIP_NETCONN)
void NewNetwork(Network *n) {
 8019360:	b480      	push	{r7}
 8019362:	b083      	sub	sp, #12
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
	n->conn = NULL;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	2200      	movs	r2, #0
 801936c:	601a      	str	r2, [r3, #0]
	n->buf = NULL;
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2200      	movs	r2, #0
 8019372:	605a      	str	r2, [r3, #4]
	n->offset = 0;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2200      	movs	r2, #0
 8019378:	609a      	str	r2, [r3, #8]

	n->mqttread = net_read;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	4a06      	ldr	r2, [pc, #24]	; (8019398 <NewNetwork+0x38>)
 801937e:	60da      	str	r2, [r3, #12]
	n->mqttwrite = net_write;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	4a06      	ldr	r2, [pc, #24]	; (801939c <NewNetwork+0x3c>)
 8019384:	611a      	str	r2, [r3, #16]
	n->disconnect = net_disconnect;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	4a05      	ldr	r2, [pc, #20]	; (80193a0 <NewNetwork+0x40>)
 801938a:	615a      	str	r2, [r3, #20]
}
 801938c:	bf00      	nop
 801938e:	370c      	adds	r7, #12
 8019390:	46bd      	mov	sp, r7
 8019392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019396:	4770      	bx	lr
 8019398:	0801940d 	.word	0x0801940d
 801939c:	08019507 	.word	0x08019507
 80193a0:	08019541 	.word	0x08019541

080193a4 <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 80193a4:	b580      	push	{r7, lr}
 80193a6:	b086      	sub	sp, #24
 80193a8:	af00      	add	r7, sp, #0
 80193aa:	60f8      	str	r0, [r7, #12]
 80193ac:	60b9      	str	r1, [r7, #8]
 80193ae:	607a      	str	r2, [r7, #4]
	err_t err;
	ip_addr_t server_ip;

	ipaddr_aton(ip, &server_ip);
 80193b0:	f107 0310 	add.w	r3, r7, #16
 80193b4:	4619      	mov	r1, r3
 80193b6:	68b8      	ldr	r0, [r7, #8]
 80193b8:	f7fd fe80 	bl	80170bc <ip4addr_aton>

	n->conn = netconn_new(NETCONN_TCP);
 80193bc:	2200      	movs	r2, #0
 80193be:	2100      	movs	r1, #0
 80193c0:	2010      	movs	r0, #16
 80193c2:	f7f1 fd89 	bl	800aed8 <netconn_new_with_proto_and_callback>
 80193c6:	4602      	mov	r2, r0
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	601a      	str	r2, [r3, #0]
	if (n->conn != NULL) {
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d016      	beq.n	8019402 <ConnectNetwork+0x5e>
		err = netconn_connect(n->conn, &server_ip, port);
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	687a      	ldr	r2, [r7, #4]
 80193da:	b292      	uxth	r2, r2
 80193dc:	f107 0110 	add.w	r1, r7, #16
 80193e0:	4618      	mov	r0, r3
 80193e2:	f7f1 fe33 	bl	800b04c <netconn_connect>
 80193e6:	4603      	mov	r3, r0
 80193e8:	75fb      	strb	r3, [r7, #23]

		if (err != ERR_OK) {
 80193ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d007      	beq.n	8019402 <ConnectNetwork+0x5e>
			netconn_delete(n->conn); //free memory
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7f1 fe0c 	bl	800b014 <netconn_delete>
			return -1;
 80193fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019400:	e000      	b.n	8019404 <ConnectNetwork+0x60>
		}
	}

	return 0;
 8019402:	2300      	movs	r3, #0
}
 8019404:	4618      	mov	r0, r3
 8019406:	3718      	adds	r7, #24
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}

0801940c <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 801940c:	b580      	push	{r7, lr}
 801940e:	b08a      	sub	sp, #40	; 0x28
 8019410:	af00      	add	r7, sp, #0
 8019412:	60f8      	str	r0, [r7, #12]
 8019414:	60b9      	str	r1, [r7, #8]
 8019416:	607a      	str	r2, [r7, #4]
 8019418:	603b      	str	r3, [r7, #0]
	int rc;
	struct netbuf *inbuf;
	int offset = 0;
 801941a:	2300      	movs	r3, #0
 801941c:	623b      	str	r3, [r7, #32]
	int bytes = 0;
 801941e:	2300      	movs	r3, #0
 8019420:	61fb      	str	r3, [r7, #28]

	while(bytes < len) {
 8019422:	e065      	b.n	80194f0 <net_read+0xe4>
		if(n->buf != NULL) {
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	2b00      	cmp	r3, #0
 801942a:	d008      	beq.n	801943e <net_read+0x32>
			inbuf = n->buf;
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	617b      	str	r3, [r7, #20]
			offset = n->offset;
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	689b      	ldr	r3, [r3, #8]
 8019436:	623b      	str	r3, [r7, #32]
			rc = ERR_OK;
 8019438:	2300      	movs	r3, #0
 801943a:	627b      	str	r3, [r7, #36]	; 0x24
 801943c:	e00b      	b.n	8019456 <net_read+0x4a>
		} else {
			rc = netconn_recv(n->conn, &inbuf);
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	f107 0214 	add.w	r2, r7, #20
 8019446:	4611      	mov	r1, r2
 8019448:	4618      	mov	r0, r3
 801944a:	f7f1 ffb3 	bl	800b3b4 <netconn_recv>
 801944e:	4603      	mov	r3, r0
 8019450:	627b      	str	r3, [r7, #36]	; 0x24
			offset = 0;
 8019452:	2300      	movs	r3, #0
 8019454:	623b      	str	r3, [r7, #32]
		}

		if(rc != ERR_OK) {
 8019456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019458:	2b00      	cmp	r3, #0
 801945a:	d007      	beq.n	801946c <net_read+0x60>
			if(rc != ERR_TIMEOUT) {
 801945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801945e:	f113 0f03 	cmn.w	r3, #3
 8019462:	d04a      	beq.n	80194fa <net_read+0xee>
				bytes = -1;
 8019464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019468:	61fb      	str	r3, [r7, #28]
			}
			break;
 801946a:	e046      	b.n	80194fa <net_read+0xee>
		} else {
			int nblen = netbuf_len(inbuf) - offset;
 801946c:	697b      	ldr	r3, [r7, #20]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	891b      	ldrh	r3, [r3, #8]
 8019472:	461a      	mov	r2, r3
 8019474:	6a3b      	ldr	r3, [r7, #32]
 8019476:	1ad3      	subs	r3, r2, r3
 8019478:	61bb      	str	r3, [r7, #24]
			if((bytes+nblen) > len) {
 801947a:	69fa      	ldr	r2, [r7, #28]
 801947c:	69bb      	ldr	r3, [r7, #24]
 801947e:	4413      	add	r3, r2
 8019480:	687a      	ldr	r2, [r7, #4]
 8019482:	429a      	cmp	r2, r3
 8019484:	da1b      	bge.n	80194be <net_read+0xb2>
				netbuf_copy_partial(inbuf, buffer+bytes, len-bytes,offset);
 8019486:	697b      	ldr	r3, [r7, #20]
 8019488:	6818      	ldr	r0, [r3, #0]
 801948a:	69fb      	ldr	r3, [r7, #28]
 801948c:	68ba      	ldr	r2, [r7, #8]
 801948e:	18d1      	adds	r1, r2, r3
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	b29a      	uxth	r2, r3
 8019494:	69fb      	ldr	r3, [r7, #28]
 8019496:	b29b      	uxth	r3, r3
 8019498:	1ad3      	subs	r3, r2, r3
 801949a:	b29a      	uxth	r2, r3
 801949c:	6a3b      	ldr	r3, [r7, #32]
 801949e:	b29b      	uxth	r3, r3
 80194a0:	f7f5 fc92 	bl	800edc8 <pbuf_copy_partial>
				n->buf = inbuf;
 80194a4:	697a      	ldr	r2, [r7, #20]
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	605a      	str	r2, [r3, #4]
				n->offset = offset + len - bytes;
 80194aa:	6a3a      	ldr	r2, [r7, #32]
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	441a      	add	r2, r3
 80194b0:	69fb      	ldr	r3, [r7, #28]
 80194b2:	1ad2      	subs	r2, r2, r3
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	609a      	str	r2, [r3, #8]
				bytes = len;
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	61fb      	str	r3, [r7, #28]
 80194bc:	e018      	b.n	80194f0 <net_read+0xe4>
			} else {
				netbuf_copy_partial(inbuf, buffer+bytes, nblen, offset);
 80194be:	697b      	ldr	r3, [r7, #20]
 80194c0:	6818      	ldr	r0, [r3, #0]
 80194c2:	69fb      	ldr	r3, [r7, #28]
 80194c4:	68ba      	ldr	r2, [r7, #8]
 80194c6:	18d1      	adds	r1, r2, r3
 80194c8:	69bb      	ldr	r3, [r7, #24]
 80194ca:	b29a      	uxth	r2, r3
 80194cc:	6a3b      	ldr	r3, [r7, #32]
 80194ce:	b29b      	uxth	r3, r3
 80194d0:	f7f5 fc7a 	bl	800edc8 <pbuf_copy_partial>
				bytes += nblen;
 80194d4:	69fa      	ldr	r2, [r7, #28]
 80194d6:	69bb      	ldr	r3, [r7, #24]
 80194d8:	4413      	add	r3, r2
 80194da:	61fb      	str	r3, [r7, #28]
				netbuf_delete(inbuf);
 80194dc:	697b      	ldr	r3, [r7, #20]
 80194de:	4618      	mov	r0, r3
 80194e0:	f7f3 fca2 	bl	800ce28 <netbuf_delete>
				n->buf = NULL;
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	2200      	movs	r2, #0
 80194e8:	605a      	str	r2, [r3, #4]
				n->offset = 0;
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	2200      	movs	r2, #0
 80194ee:	609a      	str	r2, [r3, #8]
	while(bytes < len) {
 80194f0:	69fa      	ldr	r2, [r7, #28]
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	429a      	cmp	r2, r3
 80194f6:	db95      	blt.n	8019424 <net_read+0x18>
 80194f8:	e000      	b.n	80194fc <net_read+0xf0>
			break;
 80194fa:	bf00      	nop
			}
		}
	}
	return bytes;
 80194fc:	69fb      	ldr	r3, [r7, #28]
}
 80194fe:	4618      	mov	r0, r3
 8019500:	3728      	adds	r7, #40	; 0x28
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}

08019506 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8019506:	b580      	push	{r7, lr}
 8019508:	b088      	sub	sp, #32
 801950a:	af02      	add	r7, sp, #8
 801950c:	60f8      	str	r0, [r7, #12]
 801950e:	60b9      	str	r1, [r7, #8]
 8019510:	607a      	str	r2, [r7, #4]
 8019512:	603b      	str	r3, [r7, #0]
	int rc = netconn_write(n->conn, buffer, len, NETCONN_NOCOPY);
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	6818      	ldr	r0, [r3, #0]
 8019518:	687a      	ldr	r2, [r7, #4]
 801951a:	2300      	movs	r3, #0
 801951c:	9300      	str	r3, [sp, #0]
 801951e:	2300      	movs	r3, #0
 8019520:	68b9      	ldr	r1, [r7, #8]
 8019522:	f7f1 ffc1 	bl	800b4a8 <netconn_write_partly>
 8019526:	4603      	mov	r3, r0
 8019528:	617b      	str	r3, [r7, #20]
	if(rc != ERR_OK) return -1;
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d002      	beq.n	8019536 <net_write+0x30>
 8019530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019534:	e000      	b.n	8019538 <net_write+0x32>
	return len;
 8019536:	687b      	ldr	r3, [r7, #4]
}
 8019538:	4618      	mov	r0, r3
 801953a:	3718      	adds	r7, #24
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <net_disconnect>:

void net_disconnect(Network *n) {
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
	netconn_close(n->conn); //close session
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	4618      	mov	r0, r3
 801954e:	f7f2 f8ad 	bl	800b6ac <netconn_close>
	netconn_delete(n->conn); //free memory
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	4618      	mov	r0, r3
 8019558:	f7f1 fd5c 	bl	800b014 <netconn_delete>
	n->conn = NULL;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	2200      	movs	r2, #0
 8019560:	601a      	str	r2, [r3, #0]
}
 8019562:	bf00      	nop
 8019564:	3708      	adds	r7, #8
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}

0801956a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801956a:	b590      	push	{r4, r7, lr}
 801956c:	b085      	sub	sp, #20
 801956e:	af00      	add	r7, sp, #0
 8019570:	6078      	str	r0, [r7, #4]
	int len = 0;
 8019572:	2300      	movs	r3, #0
 8019574:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	7a1b      	ldrb	r3, [r3, #8]
 801957a:	2b03      	cmp	r3, #3
 801957c:	d102      	bne.n	8019584 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801957e:	230c      	movs	r3, #12
 8019580:	60fb      	str	r3, [r7, #12]
 8019582:	e005      	b.n	8019590 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	7a1b      	ldrb	r3, [r3, #8]
 8019588:	2b04      	cmp	r3, #4
 801958a:	d101      	bne.n	8019590 <MQTTSerialize_connectLength+0x26>
		len = 10;
 801958c:	230a      	movs	r3, #10
 801958e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	330c      	adds	r3, #12
 8019594:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019598:	f000 fc53 	bl	8019e42 <MQTTstrlen>
 801959c:	4603      	mov	r3, r0
 801959e:	3302      	adds	r3, #2
 80195a0:	68fa      	ldr	r2, [r7, #12]
 80195a2:	4413      	add	r3, r2
 80195a4:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	7edb      	ldrb	r3, [r3, #27]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d013      	beq.n	80195d6 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	3324      	adds	r3, #36	; 0x24
 80195b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80195b6:	f000 fc44 	bl	8019e42 <MQTTstrlen>
 80195ba:	4603      	mov	r3, r0
 80195bc:	1c9c      	adds	r4, r3, #2
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	3330      	adds	r3, #48	; 0x30
 80195c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80195c6:	f000 fc3c 	bl	8019e42 <MQTTstrlen>
 80195ca:	4603      	mov	r3, r0
 80195cc:	4423      	add	r3, r4
 80195ce:	3302      	adds	r3, #2
 80195d0:	68fa      	ldr	r2, [r7, #12]
 80195d2:	4413      	add	r3, r2
 80195d4:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d103      	bne.n	80195e6 <MQTTSerialize_connectLength+0x7c>
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d00a      	beq.n	80195fc <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	3340      	adds	r3, #64	; 0x40
 80195ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80195ee:	f000 fc28 	bl	8019e42 <MQTTstrlen>
 80195f2:	4603      	mov	r3, r0
 80195f4:	3302      	adds	r3, #2
 80195f6:	68fa      	ldr	r2, [r7, #12]
 80195f8:	4413      	add	r3, r2
 80195fa:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019600:	2b00      	cmp	r3, #0
 8019602:	d103      	bne.n	801960c <MQTTSerialize_connectLength+0xa2>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019608:	2b00      	cmp	r3, #0
 801960a:	d00a      	beq.n	8019622 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	334c      	adds	r3, #76	; 0x4c
 8019610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019614:	f000 fc15 	bl	8019e42 <MQTTstrlen>
 8019618:	4603      	mov	r3, r0
 801961a:	3302      	adds	r3, #2
 801961c:	68fa      	ldr	r2, [r7, #12]
 801961e:	4413      	add	r3, r2
 8019620:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8019622:	68fb      	ldr	r3, [r7, #12]
}
 8019624:	4618      	mov	r0, r3
 8019626:	3714      	adds	r7, #20
 8019628:	46bd      	mov	sp, r7
 801962a:	bd90      	pop	{r4, r7, pc}

0801962c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	b08a      	sub	sp, #40	; 0x28
 8019630:	af00      	add	r7, sp, #0
 8019632:	60f8      	str	r0, [r7, #12]
 8019634:	60b9      	str	r1, [r7, #8]
 8019636:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801963c:	2300      	movs	r3, #0
 801963e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8019640:	2300      	movs	r3, #0
 8019642:	617b      	str	r3, [r7, #20]
	int len = 0;
 8019644:	2300      	movs	r3, #0
 8019646:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8019648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801964c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801964e:	6878      	ldr	r0, [r7, #4]
 8019650:	f7ff ff8b 	bl	801956a <MQTTSerialize_connectLength>
 8019654:	6238      	str	r0, [r7, #32]
 8019656:	6a38      	ldr	r0, [r7, #32]
 8019658:	f000 faa8 	bl	8019bac <MQTTPacket_len>
 801965c:	4602      	mov	r2, r0
 801965e:	68bb      	ldr	r3, [r7, #8]
 8019660:	4293      	cmp	r3, r2
 8019662:	da03      	bge.n	801966c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019664:	f06f 0301 	mvn.w	r3, #1
 8019668:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801966a:	e0c2      	b.n	80197f2 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801966c:	2300      	movs	r3, #0
 801966e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8019670:	7e3b      	ldrb	r3, [r7, #24]
 8019672:	2201      	movs	r2, #1
 8019674:	f362 1307 	bfi	r3, r2, #4, #4
 8019678:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801967a:	7e3a      	ldrb	r2, [r7, #24]
 801967c:	f107 031c 	add.w	r3, r7, #28
 8019680:	4611      	mov	r1, r2
 8019682:	4618      	mov	r0, r3
 8019684:	f000 fb21 	bl	8019cca <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8019688:	69fb      	ldr	r3, [r7, #28]
 801968a:	6a39      	ldr	r1, [r7, #32]
 801968c:	4618      	mov	r0, r3
 801968e:	f000 fa21 	bl	8019ad4 <MQTTPacket_encode>
 8019692:	4602      	mov	r2, r0
 8019694:	69fb      	ldr	r3, [r7, #28]
 8019696:	4413      	add	r3, r2
 8019698:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	7a1b      	ldrb	r3, [r3, #8]
 801969e:	2b04      	cmp	r3, #4
 80196a0:	d10c      	bne.n	80196bc <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80196a2:	f107 031c 	add.w	r3, r7, #28
 80196a6:	4955      	ldr	r1, [pc, #340]	; (80197fc <MQTTSerialize_connect+0x1d0>)
 80196a8:	4618      	mov	r0, r3
 80196aa:	f000 fb4c 	bl	8019d46 <writeCString>
		writeChar(&ptr, (char) 4);
 80196ae:	f107 031c 	add.w	r3, r7, #28
 80196b2:	2104      	movs	r1, #4
 80196b4:	4618      	mov	r0, r3
 80196b6:	f000 fb08 	bl	8019cca <writeChar>
 80196ba:	e00b      	b.n	80196d4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80196bc:	f107 031c 	add.w	r3, r7, #28
 80196c0:	494f      	ldr	r1, [pc, #316]	; (8019800 <MQTTSerialize_connect+0x1d4>)
 80196c2:	4618      	mov	r0, r3
 80196c4:	f000 fb3f 	bl	8019d46 <writeCString>
		writeChar(&ptr, (char) 3);
 80196c8:	f107 031c 	add.w	r3, r7, #28
 80196cc:	2103      	movs	r1, #3
 80196ce:	4618      	mov	r0, r3
 80196d0:	f000 fafb 	bl	8019cca <writeChar>
	}

	flags.all = 0;
 80196d4:	2300      	movs	r3, #0
 80196d6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	7e9b      	ldrb	r3, [r3, #26]
 80196dc:	f003 0301 	and.w	r3, r3, #1
 80196e0:	b2da      	uxtb	r2, r3
 80196e2:	7d3b      	ldrb	r3, [r7, #20]
 80196e4:	f362 0341 	bfi	r3, r2, #1, #1
 80196e8:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	7edb      	ldrb	r3, [r3, #27]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	bf14      	ite	ne
 80196f2:	2301      	movne	r3, #1
 80196f4:	2300      	moveq	r3, #0
 80196f6:	b2da      	uxtb	r2, r3
 80196f8:	7d3b      	ldrb	r3, [r7, #20]
 80196fa:	f362 0382 	bfi	r3, r2, #2, #1
 80196fe:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8019700:	7d3b      	ldrb	r3, [r7, #20]
 8019702:	f003 0304 	and.w	r3, r3, #4
 8019706:	b2db      	uxtb	r3, r3
 8019708:	2b00      	cmp	r3, #0
 801970a:	d013      	beq.n	8019734 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019712:	f003 0303 	and.w	r3, r3, #3
 8019716:	b2da      	uxtb	r2, r3
 8019718:	7d3b      	ldrb	r3, [r7, #20]
 801971a:	f362 03c4 	bfi	r3, r2, #3, #2
 801971e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019726:	f003 0301 	and.w	r3, r3, #1
 801972a:	b2da      	uxtb	r2, r3
 801972c:	7d3b      	ldrb	r3, [r7, #20]
 801972e:	f362 1345 	bfi	r3, r2, #5, #1
 8019732:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019738:	2b00      	cmp	r3, #0
 801973a:	d103      	bne.n	8019744 <MQTTSerialize_connect+0x118>
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019740:	2b00      	cmp	r3, #0
 8019742:	d003      	beq.n	801974c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8019744:	7d3b      	ldrb	r3, [r7, #20]
 8019746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801974a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019750:	2b00      	cmp	r3, #0
 8019752:	d103      	bne.n	801975c <MQTTSerialize_connect+0x130>
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019758:	2b00      	cmp	r3, #0
 801975a:	d003      	beq.n	8019764 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801975c:	7d3b      	ldrb	r3, [r7, #20]
 801975e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019762:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8019764:	7d3a      	ldrb	r2, [r7, #20]
 8019766:	f107 031c 	add.w	r3, r7, #28
 801976a:	4611      	mov	r1, r2
 801976c:	4618      	mov	r0, r3
 801976e:	f000 faac 	bl	8019cca <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	8b1b      	ldrh	r3, [r3, #24]
 8019776:	461a      	mov	r2, r3
 8019778:	f107 031c 	add.w	r3, r7, #28
 801977c:	4611      	mov	r1, r2
 801977e:	4618      	mov	r0, r3
 8019780:	f000 fab8 	bl	8019cf4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	f107 001c 	add.w	r0, r7, #28
 801978a:	330c      	adds	r3, #12
 801978c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801978e:	f000 faf9 	bl	8019d84 <writeMQTTString>
	if (options->willFlag)
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	7edb      	ldrb	r3, [r3, #27]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d00d      	beq.n	80197b6 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	f107 001c 	add.w	r0, r7, #28
 80197a0:	3324      	adds	r3, #36	; 0x24
 80197a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80197a4:	f000 faee 	bl	8019d84 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f107 001c 	add.w	r0, r7, #28
 80197ae:	3330      	adds	r3, #48	; 0x30
 80197b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80197b2:	f000 fae7 	bl	8019d84 <writeMQTTString>
	}
	if (flags.bits.username)
 80197b6:	7d3b      	ldrb	r3, [r7, #20]
 80197b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d006      	beq.n	80197d0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	f107 001c 	add.w	r0, r7, #28
 80197c8:	3340      	adds	r3, #64	; 0x40
 80197ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80197cc:	f000 fada 	bl	8019d84 <writeMQTTString>
	if (flags.bits.password)
 80197d0:	7d3b      	ldrb	r3, [r7, #20]
 80197d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d006      	beq.n	80197ea <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	f107 001c 	add.w	r0, r7, #28
 80197e2:	334c      	adds	r3, #76	; 0x4c
 80197e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80197e6:	f000 facd 	bl	8019d84 <writeMQTTString>

	rc = ptr - buf;
 80197ea:	69fa      	ldr	r2, [r7, #28]
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	1ad3      	subs	r3, r2, r3
 80197f0:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80197f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80197f4:	4618      	mov	r0, r3
 80197f6:	3728      	adds	r7, #40	; 0x28
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd80      	pop	{r7, pc}
 80197fc:	08021ee0 	.word	0x08021ee0
 8019800:	08021ee8 	.word	0x08021ee8

08019804 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b08a      	sub	sp, #40	; 0x28
 8019808:	af00      	add	r7, sp, #0
 801980a:	60f8      	str	r0, [r7, #12]
 801980c:	60b9      	str	r1, [r7, #8]
 801980e:	607a      	str	r2, [r7, #4]
 8019810:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019812:	2300      	movs	r3, #0
 8019814:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801981a:	2300      	movs	r3, #0
 801981c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801981e:	2300      	movs	r3, #0
 8019820:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8019822:	2300      	movs	r3, #0
 8019824:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019826:	f107 0318 	add.w	r3, r7, #24
 801982a:	4618      	mov	r0, r3
 801982c:	f000 fa39 	bl	8019ca2 <readChar>
 8019830:	4603      	mov	r3, r0
 8019832:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8019834:	7f3b      	ldrb	r3, [r7, #28]
 8019836:	f023 030f 	bic.w	r3, r3, #15
 801983a:	b2db      	uxtb	r3, r3
 801983c:	2b20      	cmp	r3, #32
 801983e:	d12e      	bne.n	801989e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019840:	69bb      	ldr	r3, [r7, #24]
 8019842:	f107 0214 	add.w	r2, r7, #20
 8019846:	4611      	mov	r1, r2
 8019848:	4618      	mov	r0, r3
 801984a:	f000 f9f9 	bl	8019c40 <MQTTPacket_decodeBuf>
 801984e:	6278      	str	r0, [r7, #36]	; 0x24
 8019850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019852:	69bb      	ldr	r3, [r7, #24]
 8019854:	4413      	add	r3, r2
 8019856:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019858:	69bb      	ldr	r3, [r7, #24]
 801985a:	697a      	ldr	r2, [r7, #20]
 801985c:	4413      	add	r3, r2
 801985e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8019860:	69bb      	ldr	r3, [r7, #24]
 8019862:	6a3a      	ldr	r2, [r7, #32]
 8019864:	1ad3      	subs	r3, r2, r3
 8019866:	2b01      	cmp	r3, #1
 8019868:	dd1b      	ble.n	80198a2 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801986a:	f107 0318 	add.w	r3, r7, #24
 801986e:	4618      	mov	r0, r3
 8019870:	f000 fa17 	bl	8019ca2 <readChar>
 8019874:	4603      	mov	r3, r0
 8019876:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8019878:	7c3b      	ldrb	r3, [r7, #16]
 801987a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801987e:	b2db      	uxtb	r3, r3
 8019880:	461a      	mov	r2, r3
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8019886:	f107 0318 	add.w	r3, r7, #24
 801988a:	4618      	mov	r0, r3
 801988c:	f000 fa09 	bl	8019ca2 <readChar>
 8019890:	4603      	mov	r3, r0
 8019892:	461a      	mov	r2, r3
 8019894:	68bb      	ldr	r3, [r7, #8]
 8019896:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8019898:	2301      	movs	r3, #1
 801989a:	627b      	str	r3, [r7, #36]	; 0x24
 801989c:	e002      	b.n	80198a4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801989e:	bf00      	nop
 80198a0:	e000      	b.n	80198a4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80198a2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80198a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80198a6:	4618      	mov	r0, r3
 80198a8:	3728      	adds	r7, #40	; 0x28
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bd80      	pop	{r7, pc}

080198ae <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80198ae:	b580      	push	{r7, lr}
 80198b0:	b088      	sub	sp, #32
 80198b2:	af00      	add	r7, sp, #0
 80198b4:	60f8      	str	r0, [r7, #12]
 80198b6:	60b9      	str	r1, [r7, #8]
 80198b8:	4613      	mov	r3, r2
 80198ba:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80198bc:	2300      	movs	r3, #0
 80198be:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80198c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80198c4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	2b01      	cmp	r3, #1
 80198ce:	dc03      	bgt.n	80198d8 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80198d0:	f06f 0301 	mvn.w	r3, #1
 80198d4:	61fb      	str	r3, [r7, #28]
		goto exit;
 80198d6:	e01d      	b.n	8019914 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80198d8:	2300      	movs	r3, #0
 80198da:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80198dc:	79fb      	ldrb	r3, [r7, #7]
 80198de:	f003 030f 	and.w	r3, r3, #15
 80198e2:	b2da      	uxtb	r2, r3
 80198e4:	7e3b      	ldrb	r3, [r7, #24]
 80198e6:	f362 1307 	bfi	r3, r2, #4, #4
 80198ea:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80198ec:	7e3a      	ldrb	r2, [r7, #24]
 80198ee:	f107 0314 	add.w	r3, r7, #20
 80198f2:	4611      	mov	r1, r2
 80198f4:	4618      	mov	r0, r3
 80198f6:	f000 f9e8 	bl	8019cca <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80198fa:	697b      	ldr	r3, [r7, #20]
 80198fc:	2100      	movs	r1, #0
 80198fe:	4618      	mov	r0, r3
 8019900:	f000 f8e8 	bl	8019ad4 <MQTTPacket_encode>
 8019904:	4602      	mov	r2, r0
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	4413      	add	r3, r2
 801990a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801990c:	697a      	ldr	r2, [r7, #20]
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	1ad3      	subs	r3, r2, r3
 8019912:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019914:	69fb      	ldr	r3, [r7, #28]
}
 8019916:	4618      	mov	r0, r3
 8019918:	3720      	adds	r7, #32
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}

0801991e <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801991e:	b580      	push	{r7, lr}
 8019920:	b082      	sub	sp, #8
 8019922:	af00      	add	r7, sp, #0
 8019924:	6078      	str	r0, [r7, #4]
 8019926:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8019928:	220e      	movs	r2, #14
 801992a:	6839      	ldr	r1, [r7, #0]
 801992c:	6878      	ldr	r0, [r7, #4]
 801992e:	f7ff ffbe 	bl	80198ae <MQTTSerialize_zero>
 8019932:	4603      	mov	r3, r0
}
 8019934:	4618      	mov	r0, r3
 8019936:	3708      	adds	r7, #8
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}

0801993c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b082      	sub	sp, #8
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
 8019944:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8019946:	220c      	movs	r2, #12
 8019948:	6839      	ldr	r1, [r7, #0]
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f7ff ffaf 	bl	80198ae <MQTTSerialize_zero>
 8019950:	4603      	mov	r3, r0
}
 8019952:	4618      	mov	r0, r3
 8019954:	3708      	adds	r7, #8
 8019956:	46bd      	mov	sp, r7
 8019958:	bd80      	pop	{r7, pc}

0801995a <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801995a:	b580      	push	{r7, lr}
 801995c:	b08a      	sub	sp, #40	; 0x28
 801995e:	af00      	add	r7, sp, #0
 8019960:	60f8      	str	r0, [r7, #12]
 8019962:	60b9      	str	r1, [r7, #8]
 8019964:	607a      	str	r2, [r7, #4]
 8019966:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019968:	2300      	movs	r3, #0
 801996a:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801996c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801996e:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019970:	2300      	movs	r3, #0
 8019972:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019974:	2300      	movs	r3, #0
 8019976:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8019978:	2300      	movs	r3, #0
 801997a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801997c:	f107 0318 	add.w	r3, r7, #24
 8019980:	4618      	mov	r0, r3
 8019982:	f000 f98e 	bl	8019ca2 <readChar>
 8019986:	4603      	mov	r3, r0
 8019988:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801998a:	7f3b      	ldrb	r3, [r7, #28]
 801998c:	f023 030f 	bic.w	r3, r3, #15
 8019990:	b2db      	uxtb	r3, r3
 8019992:	2b30      	cmp	r3, #48	; 0x30
 8019994:	d14b      	bne.n	8019a2e <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8019996:	7f3b      	ldrb	r3, [r7, #28]
 8019998:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801999c:	b2db      	uxtb	r3, r3
 801999e:	461a      	mov	r2, r3
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80199a4:	7f3b      	ldrb	r3, [r7, #28]
 80199a6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80199aa:	b2db      	uxtb	r3, r3
 80199ac:	461a      	mov	r2, r3
 80199ae:	68bb      	ldr	r3, [r7, #8]
 80199b0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80199b2:	7f3b      	ldrb	r3, [r7, #28]
 80199b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80199b8:	b2db      	uxtb	r3, r3
 80199ba:	461a      	mov	r2, r3
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80199c0:	69bb      	ldr	r3, [r7, #24]
 80199c2:	f107 0214 	add.w	r2, r7, #20
 80199c6:	4611      	mov	r1, r2
 80199c8:	4618      	mov	r0, r3
 80199ca:	f000 f939 	bl	8019c40 <MQTTPacket_decodeBuf>
 80199ce:	6278      	str	r0, [r7, #36]	; 0x24
 80199d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199d2:	69bb      	ldr	r3, [r7, #24]
 80199d4:	4413      	add	r3, r2
 80199d6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80199d8:	69bb      	ldr	r3, [r7, #24]
 80199da:	697a      	ldr	r2, [r7, #20]
 80199dc:	4413      	add	r3, r2
 80199de:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80199e0:	f107 0318 	add.w	r3, r7, #24
 80199e4:	6a3a      	ldr	r2, [r7, #32]
 80199e6:	4619      	mov	r1, r3
 80199e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199ea:	f000 f9f9 	bl	8019de0 <readMQTTLenString>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d01e      	beq.n	8019a32 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80199f4:	69bb      	ldr	r3, [r7, #24]
 80199f6:	6a3a      	ldr	r2, [r7, #32]
 80199f8:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	db19      	blt.n	8019a32 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80199fe:	68bb      	ldr	r3, [r7, #8]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	dd08      	ble.n	8019a18 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8019a06:	f107 0318 	add.w	r3, r7, #24
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f000 f92e 	bl	8019c6c <readInt>
 8019a10:	4603      	mov	r3, r0
 8019a12:	b29a      	uxth	r2, r3
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8019a18:	69bb      	ldr	r3, [r7, #24]
 8019a1a:	6a3a      	ldr	r2, [r7, #32]
 8019a1c:	1ad2      	subs	r2, r2, r3
 8019a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a20:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8019a22:	69ba      	ldr	r2, [r7, #24]
 8019a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a26:	601a      	str	r2, [r3, #0]
	rc = 1;
 8019a28:	2301      	movs	r3, #1
 8019a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8019a2c:	e002      	b.n	8019a34 <MQTTDeserialize_publish+0xda>
		goto exit;
 8019a2e:	bf00      	nop
 8019a30:	e000      	b.n	8019a34 <MQTTDeserialize_publish+0xda>
		goto exit;
 8019a32:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3728      	adds	r7, #40	; 0x28
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	bd80      	pop	{r7, pc}

08019a3e <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8019a3e:	b580      	push	{r7, lr}
 8019a40:	b08a      	sub	sp, #40	; 0x28
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	60f8      	str	r0, [r7, #12]
 8019a46:	60b9      	str	r1, [r7, #8]
 8019a48:	607a      	str	r2, [r7, #4]
 8019a4a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8019a50:	683b      	ldr	r3, [r7, #0]
 8019a52:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8019a54:	2300      	movs	r3, #0
 8019a56:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8019a58:	2300      	movs	r3, #0
 8019a5a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8019a5c:	f107 0318 	add.w	r3, r7, #24
 8019a60:	4618      	mov	r0, r3
 8019a62:	f000 f91e 	bl	8019ca2 <readChar>
 8019a66:	4603      	mov	r3, r0
 8019a68:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8019a6a:	7f3b      	ldrb	r3, [r7, #28]
 8019a6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019a70:	b2db      	uxtb	r3, r3
 8019a72:	461a      	mov	r2, r3
 8019a74:	68bb      	ldr	r3, [r7, #8]
 8019a76:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8019a78:	7f3b      	ldrb	r3, [r7, #28]
 8019a7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	461a      	mov	r2, r3
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8019a86:	69bb      	ldr	r3, [r7, #24]
 8019a88:	f107 0214 	add.w	r2, r7, #20
 8019a8c:	4611      	mov	r1, r2
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f000 f8d6 	bl	8019c40 <MQTTPacket_decodeBuf>
 8019a94:	6278      	str	r0, [r7, #36]	; 0x24
 8019a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	4413      	add	r3, r2
 8019a9c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8019a9e:	69bb      	ldr	r3, [r7, #24]
 8019aa0:	697a      	ldr	r2, [r7, #20]
 8019aa2:	4413      	add	r3, r2
 8019aa4:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8019aa6:	69bb      	ldr	r3, [r7, #24]
 8019aa8:	6a3a      	ldr	r2, [r7, #32]
 8019aaa:	1ad3      	subs	r3, r2, r3
 8019aac:	2b01      	cmp	r3, #1
 8019aae:	dd0b      	ble.n	8019ac8 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8019ab0:	f107 0318 	add.w	r3, r7, #24
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f000 f8d9 	bl	8019c6c <readInt>
 8019aba:	4603      	mov	r3, r0
 8019abc:	b29a      	uxth	r2, r3
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8019ac6:	e000      	b.n	8019aca <MQTTDeserialize_ack+0x8c>
		goto exit;
 8019ac8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8019aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3728      	adds	r7, #40	; 0x28
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}

08019ad4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8019ad4:	b480      	push	{r7}
 8019ad6:	b085      	sub	sp, #20
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8019ade:	2300      	movs	r3, #0
 8019ae0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	425a      	negs	r2, r3
 8019ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019aea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8019aee:	bf58      	it	pl
 8019af0:	4253      	negpl	r3, r2
 8019af2:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	da00      	bge.n	8019afc <MQTTPacket_encode+0x28>
 8019afa:	337f      	adds	r3, #127	; 0x7f
 8019afc:	11db      	asrs	r3, r3, #7
 8019afe:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	dd03      	ble.n	8019b0e <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8019b06:	7afb      	ldrb	r3, [r7, #11]
 8019b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019b0c:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	1c5a      	adds	r2, r3, #1
 8019b12:	60fa      	str	r2, [r7, #12]
 8019b14:	461a      	mov	r2, r3
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	4413      	add	r3, r2
 8019b1a:	7afa      	ldrb	r2, [r7, #11]
 8019b1c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	dcde      	bgt.n	8019ae2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8019b24:	68fb      	ldr	r3, [r7, #12]
}
 8019b26:	4618      	mov	r0, r3
 8019b28:	3714      	adds	r7, #20
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b30:	4770      	bx	lr

08019b32 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8019b32:	b580      	push	{r7, lr}
 8019b34:	b086      	sub	sp, #24
 8019b36:	af00      	add	r7, sp, #0
 8019b38:	6078      	str	r0, [r7, #4]
 8019b3a:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8019b40:	2300      	movs	r3, #0
 8019b42:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8019b44:	683b      	ldr	r3, [r7, #0]
 8019b46:	2200      	movs	r2, #0
 8019b48:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8019b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b4e:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8019b50:	693b      	ldr	r3, [r7, #16]
 8019b52:	3301      	adds	r3, #1
 8019b54:	613b      	str	r3, [r7, #16]
 8019b56:	693b      	ldr	r3, [r7, #16]
 8019b58:	2b04      	cmp	r3, #4
 8019b5a:	dd03      	ble.n	8019b64 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8019b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b60:	60fb      	str	r3, [r7, #12]
			goto exit;
 8019b62:	e01d      	b.n	8019ba0 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8019b64:	f107 020b 	add.w	r2, r7, #11
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	2101      	movs	r1, #1
 8019b6c:	4610      	mov	r0, r2
 8019b6e:	4798      	blx	r3
 8019b70:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	2b01      	cmp	r3, #1
 8019b76:	d112      	bne.n	8019b9e <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8019b78:	683b      	ldr	r3, [r7, #0]
 8019b7a:	681a      	ldr	r2, [r3, #0]
 8019b7c:	7afb      	ldrb	r3, [r7, #11]
 8019b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b82:	6979      	ldr	r1, [r7, #20]
 8019b84:	fb01 f303 	mul.w	r3, r1, r3
 8019b88:	441a      	add	r2, r3
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8019b8e:	697b      	ldr	r3, [r7, #20]
 8019b90:	01db      	lsls	r3, r3, #7
 8019b92:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8019b94:	7afb      	ldrb	r3, [r7, #11]
 8019b96:	b25b      	sxtb	r3, r3
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	dbd6      	blt.n	8019b4a <MQTTPacket_decode+0x18>
exit:
 8019b9c:	e000      	b.n	8019ba0 <MQTTPacket_decode+0x6e>
			goto exit;
 8019b9e:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8019ba0:	693b      	ldr	r3, [r7, #16]
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	3718      	adds	r7, #24
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
	...

08019bac <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8019bac:	b480      	push	{r7}
 8019bae:	b083      	sub	sp, #12
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8019bbe:	dc03      	bgt.n	8019bc8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	3301      	adds	r3, #1
 8019bc4:	607b      	str	r3, [r7, #4]
 8019bc6:	e012      	b.n	8019bee <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019bce:	da03      	bge.n	8019bd8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	3302      	adds	r3, #2
 8019bd4:	607b      	str	r3, [r7, #4]
 8019bd6:	e00a      	b.n	8019bee <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	4a08      	ldr	r2, [pc, #32]	; (8019bfc <MQTTPacket_len+0x50>)
 8019bdc:	4293      	cmp	r3, r2
 8019bde:	dc03      	bgt.n	8019be8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	3303      	adds	r3, #3
 8019be4:	607b      	str	r3, [r7, #4]
 8019be6:	e002      	b.n	8019bee <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	3304      	adds	r3, #4
 8019bec:	607b      	str	r3, [r7, #4]
	return rem_len;
 8019bee:	687b      	ldr	r3, [r7, #4]
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	370c      	adds	r7, #12
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfa:	4770      	bx	lr
 8019bfc:	001ffffe 	.word	0x001ffffe

08019c00 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8019c00:	b480      	push	{r7}
 8019c02:	b085      	sub	sp, #20
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	60fb      	str	r3, [r7, #12]
 8019c0e:	e00a      	b.n	8019c26 <bufchar+0x26>
		*c = *bufptr++;
 8019c10:	4b0a      	ldr	r3, [pc, #40]	; (8019c3c <bufchar+0x3c>)
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	1c5a      	adds	r2, r3, #1
 8019c16:	4909      	ldr	r1, [pc, #36]	; (8019c3c <bufchar+0x3c>)
 8019c18:	600a      	str	r2, [r1, #0]
 8019c1a:	781a      	ldrb	r2, [r3, #0]
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	3301      	adds	r3, #1
 8019c24:	60fb      	str	r3, [r7, #12]
 8019c26:	68fa      	ldr	r2, [r7, #12]
 8019c28:	683b      	ldr	r3, [r7, #0]
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	dbf0      	blt.n	8019c10 <bufchar+0x10>
	return count;
 8019c2e:	683b      	ldr	r3, [r7, #0]
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	3714      	adds	r7, #20
 8019c34:	46bd      	mov	sp, r7
 8019c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3a:	4770      	bx	lr
 8019c3c:	20011520 	.word	0x20011520

08019c40 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b082      	sub	sp, #8
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	6078      	str	r0, [r7, #4]
 8019c48:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8019c4a:	4a06      	ldr	r2, [pc, #24]	; (8019c64 <MQTTPacket_decodeBuf+0x24>)
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8019c50:	6839      	ldr	r1, [r7, #0]
 8019c52:	4805      	ldr	r0, [pc, #20]	; (8019c68 <MQTTPacket_decodeBuf+0x28>)
 8019c54:	f7ff ff6d 	bl	8019b32 <MQTTPacket_decode>
 8019c58:	4603      	mov	r3, r0
}
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	3708      	adds	r7, #8
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	bd80      	pop	{r7, pc}
 8019c62:	bf00      	nop
 8019c64:	20011520 	.word	0x20011520
 8019c68:	08019c01 	.word	0x08019c01

08019c6c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8019c6c:	b480      	push	{r7}
 8019c6e:	b085      	sub	sp, #20
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	781b      	ldrb	r3, [r3, #0]
 8019c7e:	021b      	lsls	r3, r3, #8
 8019c80:	68fa      	ldr	r2, [r7, #12]
 8019c82:	3201      	adds	r2, #1
 8019c84:	7812      	ldrb	r2, [r2, #0]
 8019c86:	4413      	add	r3, r2
 8019c88:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	1c9a      	adds	r2, r3, #2
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	601a      	str	r2, [r3, #0]
	return len;
 8019c94:	68bb      	ldr	r3, [r7, #8]
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	3714      	adds	r7, #20
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca0:	4770      	bx	lr

08019ca2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8019ca2:	b480      	push	{r7}
 8019ca4:	b085      	sub	sp, #20
 8019ca6:	af00      	add	r7, sp, #0
 8019ca8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	781b      	ldrb	r3, [r3, #0]
 8019cb0:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	1c5a      	adds	r2, r3, #1
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	601a      	str	r2, [r3, #0]
	return c;
 8019cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	3714      	adds	r7, #20
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc8:	4770      	bx	lr

08019cca <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8019cca:	b480      	push	{r7}
 8019ccc:	b083      	sub	sp, #12
 8019cce:	af00      	add	r7, sp, #0
 8019cd0:	6078      	str	r0, [r7, #4]
 8019cd2:	460b      	mov	r3, r1
 8019cd4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	78fa      	ldrb	r2, [r7, #3]
 8019cdc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	1c5a      	adds	r2, r3, #1
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	601a      	str	r2, [r3, #0]
}
 8019ce8:	bf00      	nop
 8019cea:	370c      	adds	r7, #12
 8019cec:	46bd      	mov	sp, r7
 8019cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf2:	4770      	bx	lr

08019cf4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	b083      	sub	sp, #12
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	da00      	bge.n	8019d06 <writeInt+0x12>
 8019d04:	33ff      	adds	r3, #255	; 0xff
 8019d06:	121b      	asrs	r3, r3, #8
 8019d08:	461a      	mov	r2, r3
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	b2d2      	uxtb	r2, r2
 8019d10:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	1c5a      	adds	r2, r3, #1
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	425a      	negs	r2, r3
 8019d20:	b2db      	uxtb	r3, r3
 8019d22:	b2d2      	uxtb	r2, r2
 8019d24:	bf58      	it	pl
 8019d26:	4253      	negpl	r3, r2
 8019d28:	687a      	ldr	r2, [r7, #4]
 8019d2a:	6812      	ldr	r2, [r2, #0]
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	1c5a      	adds	r2, r3, #1
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	601a      	str	r2, [r3, #0]
}
 8019d3a:	bf00      	nop
 8019d3c:	370c      	adds	r7, #12
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d44:	4770      	bx	lr

08019d46 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8019d46:	b580      	push	{r7, lr}
 8019d48:	b084      	sub	sp, #16
 8019d4a:	af00      	add	r7, sp, #0
 8019d4c:	6078      	str	r0, [r7, #4]
 8019d4e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8019d50:	6838      	ldr	r0, [r7, #0]
 8019d52:	f7e6 fa7f 	bl	8000254 <strlen>
 8019d56:	4603      	mov	r3, r0
 8019d58:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8019d5a:	68f9      	ldr	r1, [r7, #12]
 8019d5c:	6878      	ldr	r0, [r7, #4]
 8019d5e:	f7ff ffc9 	bl	8019cf4 <writeInt>
	memcpy(*pptr, string, len);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	68fa      	ldr	r2, [r7, #12]
 8019d68:	6839      	ldr	r1, [r7, #0]
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f003 fc9a 	bl	801d6a4 <memcpy>
	*pptr += len;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681a      	ldr	r2, [r3, #0]
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	441a      	add	r2, r3
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	601a      	str	r2, [r3, #0]
}
 8019d7c:	bf00      	nop
 8019d7e:	3710      	adds	r7, #16
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}

08019d84 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8019d84:	b580      	push	{r7, lr}
 8019d86:	b084      	sub	sp, #16
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	60f8      	str	r0, [r7, #12]
 8019d8c:	4638      	mov	r0, r7
 8019d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	dd12      	ble.n	8019dbe <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	4619      	mov	r1, r3
 8019d9c:	68f8      	ldr	r0, [r7, #12]
 8019d9e:	f7ff ffa9 	bl	8019cf4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	68b9      	ldr	r1, [r7, #8]
 8019da8:	687a      	ldr	r2, [r7, #4]
 8019daa:	4618      	mov	r0, r3
 8019dac:	f003 fc7a 	bl	801d6a4 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	687a      	ldr	r2, [r7, #4]
 8019db6:	441a      	add	r2, r3
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8019dbc:	e00c      	b.n	8019dd8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d005      	beq.n	8019dd0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	4619      	mov	r1, r3
 8019dc8:	68f8      	ldr	r0, [r7, #12]
 8019dca:	f7ff ffbc 	bl	8019d46 <writeCString>
}
 8019dce:	e003      	b.n	8019dd8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8019dd0:	2100      	movs	r1, #0
 8019dd2:	68f8      	ldr	r0, [r7, #12]
 8019dd4:	f7ff ff8e 	bl	8019cf4 <writeInt>
}
 8019dd8:	bf00      	nop
 8019dda:	3710      	adds	r7, #16
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}

08019de0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b086      	sub	sp, #24
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	60f8      	str	r0, [r7, #12]
 8019de8:	60b9      	str	r1, [r7, #8]
 8019dea:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8019dec:	2300      	movs	r3, #0
 8019dee:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8019df0:	68bb      	ldr	r3, [r7, #8]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	687a      	ldr	r2, [r7, #4]
 8019df6:	1ad3      	subs	r3, r2, r3
 8019df8:	2b01      	cmp	r3, #1
 8019dfa:	dd1a      	ble.n	8019e32 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8019dfc:	68b8      	ldr	r0, [r7, #8]
 8019dfe:	f7ff ff35 	bl	8019c6c <readInt>
 8019e02:	4602      	mov	r2, r0
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8019e08:	68bb      	ldr	r3, [r7, #8]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	68fa      	ldr	r2, [r7, #12]
 8019e0e:	6852      	ldr	r2, [r2, #4]
 8019e10:	4413      	add	r3, r2
 8019e12:	687a      	ldr	r2, [r7, #4]
 8019e14:	429a      	cmp	r2, r3
 8019e16:	d30c      	bcc.n	8019e32 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8019e18:	68bb      	ldr	r3, [r7, #8]
 8019e1a:	681a      	ldr	r2, [r3, #0]
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8019e20:	68bb      	ldr	r3, [r7, #8]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	68fa      	ldr	r2, [r7, #12]
 8019e26:	6852      	ldr	r2, [r2, #4]
 8019e28:	441a      	add	r2, r3
 8019e2a:	68bb      	ldr	r3, [r7, #8]
 8019e2c:	601a      	str	r2, [r3, #0]
			rc = 1;
 8019e2e:	2301      	movs	r3, #1
 8019e30:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	2200      	movs	r2, #0
 8019e36:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8019e38:	697b      	ldr	r3, [r7, #20]
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3718      	adds	r7, #24
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}

08019e42 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8019e42:	b580      	push	{r7, lr}
 8019e44:	b086      	sub	sp, #24
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	1d3b      	adds	r3, r7, #4
 8019e4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8019e4e:	2300      	movs	r3, #0
 8019e50:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d006      	beq.n	8019e66 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	f7e6 f9fa 	bl	8000254 <strlen>
 8019e60:	4603      	mov	r3, r0
 8019e62:	617b      	str	r3, [r7, #20]
 8019e64:	e001      	b.n	8019e6a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8019e66:	68bb      	ldr	r3, [r7, #8]
 8019e68:	617b      	str	r3, [r7, #20]
	return rc;
 8019e6a:	697b      	ldr	r3, [r7, #20]
}
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	3718      	adds	r7, #24
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd80      	pop	{r7, pc}

08019e74 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8019e74:	b580      	push	{r7, lr}
 8019e76:	b086      	sub	sp, #24
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
 8019e7c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8019e7e:	2300      	movs	r3, #0
 8019e80:	617b      	str	r3, [r7, #20]
		blen = 0;
 8019e82:	2300      	movs	r3, #0
 8019e84:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d00a      	beq.n	8019ea4 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f7e6 f9db 	bl	8000254 <strlen>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	617b      	str	r3, [r7, #20]
 8019ea2:	e005      	b.n	8019eb0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	689b      	ldr	r3, [r3, #8]
 8019ea8:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8019eb0:	6838      	ldr	r0, [r7, #0]
 8019eb2:	f7e6 f9cf 	bl	8000254 <strlen>
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8019eba:	697a      	ldr	r2, [r7, #20]
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	429a      	cmp	r2, r3
 8019ec0:	d10a      	bne.n	8019ed8 <MQTTPacket_equals+0x64>
 8019ec2:	697b      	ldr	r3, [r7, #20]
 8019ec4:	461a      	mov	r2, r3
 8019ec6:	6839      	ldr	r1, [r7, #0]
 8019ec8:	6938      	ldr	r0, [r7, #16]
 8019eca:	f003 fcd5 	bl	801d878 <strncmp>
 8019ece:	4603      	mov	r3, r0
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d101      	bne.n	8019ed8 <MQTTPacket_equals+0x64>
 8019ed4:	2301      	movs	r3, #1
 8019ed6:	e000      	b.n	8019eda <MQTTPacket_equals+0x66>
 8019ed8:	2300      	movs	r3, #0
}
 8019eda:	4618      	mov	r0, r3
 8019edc:	3718      	adds	r7, #24
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd80      	pop	{r7, pc}

08019ee2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8019ee2:	b580      	push	{r7, lr}
 8019ee4:	b086      	sub	sp, #24
 8019ee6:	af00      	add	r7, sp, #0
 8019ee8:	60f8      	str	r0, [r7, #12]
 8019eea:	4638      	mov	r0, r7
 8019eec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8019ef4:	463b      	mov	r3, r7
 8019ef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019efa:	f7ff ffa2 	bl	8019e42 <MQTTstrlen>
 8019efe:	4603      	mov	r3, r0
 8019f00:	1c9a      	adds	r2, r3, #2
 8019f02:	6a3b      	ldr	r3, [r7, #32]
 8019f04:	4413      	add	r3, r2
 8019f06:	697a      	ldr	r2, [r7, #20]
 8019f08:	4413      	add	r3, r2
 8019f0a:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	dd02      	ble.n	8019f18 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8019f12:	697b      	ldr	r3, [r7, #20]
 8019f14:	3302      	adds	r3, #2
 8019f16:	617b      	str	r3, [r7, #20]
	return len;
 8019f18:	697b      	ldr	r3, [r7, #20]
}
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	3718      	adds	r7, #24
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	bd80      	pop	{r7, pc}

08019f22 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8019f22:	b580      	push	{r7, lr}
 8019f24:	b08a      	sub	sp, #40	; 0x28
 8019f26:	af02      	add	r7, sp, #8
 8019f28:	60f8      	str	r0, [r7, #12]
 8019f2a:	60b9      	str	r1, [r7, #8]
 8019f2c:	603b      	str	r3, [r7, #0]
 8019f2e:	4613      	mov	r3, r2
 8019f30:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8019f36:	2300      	movs	r3, #0
 8019f38:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8019f3e:	2300      	movs	r3, #0
 8019f40:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8019f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f44:	9300      	str	r3, [sp, #0]
 8019f46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019f4c:	6838      	ldr	r0, [r7, #0]
 8019f4e:	f7ff ffc8 	bl	8019ee2 <MQTTSerialize_publishLength>
 8019f52:	61b8      	str	r0, [r7, #24]
 8019f54:	69b8      	ldr	r0, [r7, #24]
 8019f56:	f7ff fe29 	bl	8019bac <MQTTPacket_len>
 8019f5a:	4602      	mov	r2, r0
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	4293      	cmp	r3, r2
 8019f60:	da03      	bge.n	8019f6a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8019f62:	f06f 0301 	mvn.w	r3, #1
 8019f66:	61fb      	str	r3, [r7, #28]
		goto exit;
 8019f68:	e04c      	b.n	801a004 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8019f6a:	7c3b      	ldrb	r3, [r7, #16]
 8019f6c:	2203      	movs	r2, #3
 8019f6e:	f362 1307 	bfi	r3, r2, #4, #4
 8019f72:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8019f74:	79fb      	ldrb	r3, [r7, #7]
 8019f76:	f003 0301 	and.w	r3, r3, #1
 8019f7a:	b2da      	uxtb	r2, r3
 8019f7c:	7c3b      	ldrb	r3, [r7, #16]
 8019f7e:	f362 03c3 	bfi	r3, r2, #3, #1
 8019f82:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8019f84:	683b      	ldr	r3, [r7, #0]
 8019f86:	f003 0303 	and.w	r3, r3, #3
 8019f8a:	b2da      	uxtb	r2, r3
 8019f8c:	7c3b      	ldrb	r3, [r7, #16]
 8019f8e:	f362 0342 	bfi	r3, r2, #1, #2
 8019f92:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8019f94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019f98:	f003 0301 	and.w	r3, r3, #1
 8019f9c:	b2da      	uxtb	r2, r3
 8019f9e:	7c3b      	ldrb	r3, [r7, #16]
 8019fa0:	f362 0300 	bfi	r3, r2, #0, #1
 8019fa4:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8019fa6:	7c3a      	ldrb	r2, [r7, #16]
 8019fa8:	f107 0314 	add.w	r3, r7, #20
 8019fac:	4611      	mov	r1, r2
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f7ff fe8b 	bl	8019cca <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8019fb4:	697b      	ldr	r3, [r7, #20]
 8019fb6:	69b9      	ldr	r1, [r7, #24]
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f7ff fd8b 	bl	8019ad4 <MQTTPacket_encode>
 8019fbe:	4602      	mov	r2, r0
 8019fc0:	697b      	ldr	r3, [r7, #20]
 8019fc2:	4413      	add	r3, r2
 8019fc4:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8019fc6:	f107 0014 	add.w	r0, r7, #20
 8019fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019fd0:	f7ff fed8 	bl	8019d84 <writeMQTTString>

	if (qos > 0)
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	dd06      	ble.n	8019fe8 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8019fda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8019fdc:	f107 0314 	add.w	r3, r7, #20
 8019fe0:	4611      	mov	r1, r2
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	f7ff fe86 	bl	8019cf4 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8019fe8:	697b      	ldr	r3, [r7, #20]
 8019fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019fee:	4618      	mov	r0, r3
 8019ff0:	f003 fb58 	bl	801d6a4 <memcpy>
	ptr += payloadlen;
 8019ff4:	697a      	ldr	r2, [r7, #20]
 8019ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ff8:	4413      	add	r3, r2
 8019ffa:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8019ffc:	697a      	ldr	r2, [r7, #20]
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	1ad3      	subs	r3, r2, r3
 801a002:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a004:	69fb      	ldr	r3, [r7, #28]
}
 801a006:	4618      	mov	r0, r3
 801a008:	3720      	adds	r7, #32
 801a00a:	46bd      	mov	sp, r7
 801a00c:	bd80      	pop	{r7, pc}

0801a00e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801a00e:	b580      	push	{r7, lr}
 801a010:	b088      	sub	sp, #32
 801a012:	af00      	add	r7, sp, #0
 801a014:	60f8      	str	r0, [r7, #12]
 801a016:	60b9      	str	r1, [r7, #8]
 801a018:	4611      	mov	r1, r2
 801a01a:	461a      	mov	r2, r3
 801a01c:	460b      	mov	r3, r1
 801a01e:	71fb      	strb	r3, [r7, #7]
 801a020:	4613      	mov	r3, r2
 801a022:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801a024:	2300      	movs	r3, #0
 801a026:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801a028:	2300      	movs	r3, #0
 801a02a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801a030:	68bb      	ldr	r3, [r7, #8]
 801a032:	2b03      	cmp	r3, #3
 801a034:	dc03      	bgt.n	801a03e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a036:	f06f 0301 	mvn.w	r3, #1
 801a03a:	61fb      	str	r3, [r7, #28]
		goto exit;
 801a03c:	e037      	b.n	801a0ae <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801a03e:	79fb      	ldrb	r3, [r7, #7]
 801a040:	f003 030f 	and.w	r3, r3, #15
 801a044:	b2da      	uxtb	r2, r3
 801a046:	7e3b      	ldrb	r3, [r7, #24]
 801a048:	f362 1307 	bfi	r3, r2, #4, #4
 801a04c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801a04e:	79bb      	ldrb	r3, [r7, #6]
 801a050:	f003 0301 	and.w	r3, r3, #1
 801a054:	b2da      	uxtb	r2, r3
 801a056:	7e3b      	ldrb	r3, [r7, #24]
 801a058:	f362 03c3 	bfi	r3, r2, #3, #1
 801a05c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801a05e:	79fb      	ldrb	r3, [r7, #7]
 801a060:	2b06      	cmp	r3, #6
 801a062:	bf0c      	ite	eq
 801a064:	2301      	moveq	r3, #1
 801a066:	2300      	movne	r3, #0
 801a068:	b2db      	uxtb	r3, r3
 801a06a:	f003 0303 	and.w	r3, r3, #3
 801a06e:	b2da      	uxtb	r2, r3
 801a070:	7e3b      	ldrb	r3, [r7, #24]
 801a072:	f362 0342 	bfi	r3, r2, #1, #2
 801a076:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801a078:	7e3a      	ldrb	r2, [r7, #24]
 801a07a:	f107 0314 	add.w	r3, r7, #20
 801a07e:	4611      	mov	r1, r2
 801a080:	4618      	mov	r0, r3
 801a082:	f7ff fe22 	bl	8019cca <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	2102      	movs	r1, #2
 801a08a:	4618      	mov	r0, r3
 801a08c:	f7ff fd22 	bl	8019ad4 <MQTTPacket_encode>
 801a090:	4602      	mov	r2, r0
 801a092:	697b      	ldr	r3, [r7, #20]
 801a094:	4413      	add	r3, r2
 801a096:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801a098:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801a09a:	f107 0314 	add.w	r3, r7, #20
 801a09e:	4611      	mov	r1, r2
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	f7ff fe27 	bl	8019cf4 <writeInt>
	rc = ptr - buf;
 801a0a6:	697a      	ldr	r2, [r7, #20]
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	1ad3      	subs	r3, r2, r3
 801a0ac:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a0ae:	69fb      	ldr	r3, [r7, #28]
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	3720      	adds	r7, #32
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}

0801a0b8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b084      	sub	sp, #16
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 801a0c2:	2302      	movs	r3, #2
 801a0c4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	60fb      	str	r3, [r7, #12]
 801a0ca:	e013      	b.n	801a0f4 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801a0cc:	68fa      	ldr	r2, [r7, #12]
 801a0ce:	4613      	mov	r3, r2
 801a0d0:	005b      	lsls	r3, r3, #1
 801a0d2:	4413      	add	r3, r2
 801a0d4:	009b      	lsls	r3, r3, #2
 801a0d6:	461a      	mov	r2, r3
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	4413      	add	r3, r2
 801a0dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a0e0:	f7ff feaf 	bl	8019e42 <MQTTstrlen>
 801a0e4:	4603      	mov	r3, r0
 801a0e6:	3303      	adds	r3, #3
 801a0e8:	68ba      	ldr	r2, [r7, #8]
 801a0ea:	4413      	add	r3, r2
 801a0ec:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	3301      	adds	r3, #1
 801a0f2:	60fb      	str	r3, [r7, #12]
 801a0f4:	68fa      	ldr	r2, [r7, #12]
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	429a      	cmp	r2, r3
 801a0fa:	dbe7      	blt.n	801a0cc <MQTTSerialize_subscribeLength+0x14>
	return len;
 801a0fc:	68bb      	ldr	r3, [r7, #8]
}
 801a0fe:	4618      	mov	r0, r3
 801a100:	3710      	adds	r7, #16
 801a102:	46bd      	mov	sp, r7
 801a104:	bd80      	pop	{r7, pc}

0801a106 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801a106:	b580      	push	{r7, lr}
 801a108:	b08a      	sub	sp, #40	; 0x28
 801a10a:	af00      	add	r7, sp, #0
 801a10c:	60f8      	str	r0, [r7, #12]
 801a10e:	60b9      	str	r1, [r7, #8]
 801a110:	4611      	mov	r1, r2
 801a112:	461a      	mov	r2, r3
 801a114:	460b      	mov	r3, r1
 801a116:	71fb      	strb	r3, [r7, #7]
 801a118:	4613      	mov	r3, r2
 801a11a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 801a120:	2300      	movs	r3, #0
 801a122:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 801a124:	2300      	movs	r3, #0
 801a126:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 801a128:	2300      	movs	r3, #0
 801a12a:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 801a12c:	2300      	movs	r3, #0
 801a12e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 801a130:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a134:	f7ff ffc0 	bl	801a0b8 <MQTTSerialize_subscribeLength>
 801a138:	61f8      	str	r0, [r7, #28]
 801a13a:	69f8      	ldr	r0, [r7, #28]
 801a13c:	f7ff fd36 	bl	8019bac <MQTTPacket_len>
 801a140:	4602      	mov	r2, r0
 801a142:	68bb      	ldr	r3, [r7, #8]
 801a144:	4293      	cmp	r3, r2
 801a146:	da03      	bge.n	801a150 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801a148:	f06f 0301 	mvn.w	r3, #1
 801a14c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801a14e:	e051      	b.n	801a1f4 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 801a150:	2300      	movs	r3, #0
 801a152:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 801a154:	7d3b      	ldrb	r3, [r7, #20]
 801a156:	2208      	movs	r2, #8
 801a158:	f362 1307 	bfi	r3, r2, #4, #4
 801a15c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 801a15e:	79fb      	ldrb	r3, [r7, #7]
 801a160:	f003 0301 	and.w	r3, r3, #1
 801a164:	b2da      	uxtb	r2, r3
 801a166:	7d3b      	ldrb	r3, [r7, #20]
 801a168:	f362 03c3 	bfi	r3, r2, #3, #1
 801a16c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 801a16e:	7d3b      	ldrb	r3, [r7, #20]
 801a170:	2201      	movs	r2, #1
 801a172:	f362 0342 	bfi	r3, r2, #1, #2
 801a176:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 801a178:	7d3a      	ldrb	r2, [r7, #20]
 801a17a:	f107 0318 	add.w	r3, r7, #24
 801a17e:	4611      	mov	r1, r2
 801a180:	4618      	mov	r0, r3
 801a182:	f7ff fda2 	bl	8019cca <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801a186:	69bb      	ldr	r3, [r7, #24]
 801a188:	69f9      	ldr	r1, [r7, #28]
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7ff fca2 	bl	8019ad4 <MQTTPacket_encode>
 801a190:	4602      	mov	r2, r0
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	4413      	add	r3, r2
 801a196:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 801a198:	88ba      	ldrh	r2, [r7, #4]
 801a19a:	f107 0318 	add.w	r3, r7, #24
 801a19e:	4611      	mov	r1, r2
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f7ff fda7 	bl	8019cf4 <writeInt>

	for (i = 0; i < count; ++i)
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	623b      	str	r3, [r7, #32]
 801a1aa:	e01b      	b.n	801a1e4 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801a1ac:	6a3a      	ldr	r2, [r7, #32]
 801a1ae:	4613      	mov	r3, r2
 801a1b0:	005b      	lsls	r3, r3, #1
 801a1b2:	4413      	add	r3, r2
 801a1b4:	009b      	lsls	r3, r3, #2
 801a1b6:	461a      	mov	r2, r3
 801a1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1ba:	4413      	add	r3, r2
 801a1bc:	f107 0018 	add.w	r0, r7, #24
 801a1c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a1c2:	f7ff fddf 	bl	8019d84 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 801a1c6:	6a3b      	ldr	r3, [r7, #32]
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a1cc:	4413      	add	r3, r2
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	b2da      	uxtb	r2, r3
 801a1d2:	f107 0318 	add.w	r3, r7, #24
 801a1d6:	4611      	mov	r1, r2
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7ff fd76 	bl	8019cca <writeChar>
	for (i = 0; i < count; ++i)
 801a1de:	6a3b      	ldr	r3, [r7, #32]
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	623b      	str	r3, [r7, #32]
 801a1e4:	6a3a      	ldr	r2, [r7, #32]
 801a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	dbdf      	blt.n	801a1ac <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 801a1ec:	69ba      	ldr	r2, [r7, #24]
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	1ad3      	subs	r3, r2, r3
 801a1f2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	3728      	adds	r7, #40	; 0x28
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd80      	pop	{r7, pc}

0801a1fe <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b08a      	sub	sp, #40	; 0x28
 801a202:	af00      	add	r7, sp, #0
 801a204:	60f8      	str	r0, [r7, #12]
 801a206:	60b9      	str	r1, [r7, #8]
 801a208:	607a      	str	r2, [r7, #4]
 801a20a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801a20c:	2300      	movs	r3, #0
 801a20e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a212:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801a214:	2300      	movs	r3, #0
 801a216:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801a218:	2300      	movs	r3, #0
 801a21a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801a21c:	f107 0318 	add.w	r3, r7, #24
 801a220:	4618      	mov	r0, r3
 801a222:	f7ff fd3e 	bl	8019ca2 <readChar>
 801a226:	4603      	mov	r3, r0
 801a228:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 801a22a:	7f3b      	ldrb	r3, [r7, #28]
 801a22c:	f023 030f 	bic.w	r3, r3, #15
 801a230:	b2db      	uxtb	r3, r3
 801a232:	2b90      	cmp	r3, #144	; 0x90
 801a234:	d142      	bne.n	801a2bc <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801a236:	69bb      	ldr	r3, [r7, #24]
 801a238:	f107 0214 	add.w	r2, r7, #20
 801a23c:	4611      	mov	r1, r2
 801a23e:	4618      	mov	r0, r3
 801a240:	f7ff fcfe 	bl	8019c40 <MQTTPacket_decodeBuf>
 801a244:	6278      	str	r0, [r7, #36]	; 0x24
 801a246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a248:	69bb      	ldr	r3, [r7, #24]
 801a24a:	4413      	add	r3, r2
 801a24c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801a24e:	69bb      	ldr	r3, [r7, #24]
 801a250:	697a      	ldr	r2, [r7, #20]
 801a252:	4413      	add	r3, r2
 801a254:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801a256:	69bb      	ldr	r3, [r7, #24]
 801a258:	6a3a      	ldr	r2, [r7, #32]
 801a25a:	1ad3      	subs	r3, r2, r3
 801a25c:	2b01      	cmp	r3, #1
 801a25e:	dd2f      	ble.n	801a2c0 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 801a260:	f107 0318 	add.w	r3, r7, #24
 801a264:	4618      	mov	r0, r3
 801a266:	f7ff fd01 	bl	8019c6c <readInt>
 801a26a:	4603      	mov	r3, r0
 801a26c:	b29a      	uxth	r2, r3
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	801a      	strh	r2, [r3, #0]

	*count = 0;
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	2200      	movs	r2, #0
 801a276:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a278:	e019      	b.n	801a2ae <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	68ba      	ldr	r2, [r7, #8]
 801a280:	429a      	cmp	r2, r3
 801a282:	da03      	bge.n	801a28c <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 801a284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a288:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 801a28a:	e01a      	b.n	801a2c2 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 801a28c:	f107 0318 	add.w	r3, r7, #24
 801a290:	4618      	mov	r0, r3
 801a292:	f7ff fd06 	bl	8019ca2 <readChar>
 801a296:	4603      	mov	r3, r0
 801a298:	4618      	mov	r0, r3
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	1c59      	adds	r1, r3, #1
 801a2a0:	687a      	ldr	r2, [r7, #4]
 801a2a2:	6011      	str	r1, [r2, #0]
 801a2a4:	009b      	lsls	r3, r3, #2
 801a2a6:	683a      	ldr	r2, [r7, #0]
 801a2a8:	4413      	add	r3, r2
 801a2aa:	4602      	mov	r2, r0
 801a2ac:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 801a2ae:	69bb      	ldr	r3, [r7, #24]
 801a2b0:	6a3a      	ldr	r2, [r7, #32]
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d8e1      	bhi.n	801a27a <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 801a2b6:	2301      	movs	r3, #1
 801a2b8:	627b      	str	r3, [r7, #36]	; 0x24
 801a2ba:	e002      	b.n	801a2c2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a2bc:	bf00      	nop
 801a2be:	e000      	b.n	801a2c2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 801a2c0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	3728      	adds	r7, #40	; 0x28
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}

0801a2cc <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 801a2cc:	b480      	push	{r7}
 801a2ce:	b08f      	sub	sp, #60	; 0x3c
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	891a      	ldrh	r2, [r3, #8]
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	8a1b      	ldrh	r3, [r3, #16]
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	d301      	bcc.n	801a2e6 <load_descriptor_values+0x1a>
        return false;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	e156      	b.n	801a594 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	681a      	ldr	r2, [r3, #0]
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	895b      	ldrh	r3, [r3, #10]
 801a2f0:	009b      	lsls	r3, r3, #2
 801a2f2:	4413      	add	r3, r2
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 801a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2fa:	0a1b      	lsrs	r3, r3, #8
 801a2fc:	b2da      	uxtb	r2, r3
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 801a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a304:	f003 0303 	and.w	r3, r3, #3
 801a308:	2b02      	cmp	r3, #2
 801a30a:	d05a      	beq.n	801a3c2 <load_descriptor_values+0xf6>
 801a30c:	2b02      	cmp	r3, #2
 801a30e:	f200 8094 	bhi.w	801a43a <load_descriptor_values+0x16e>
 801a312:	2b00      	cmp	r3, #0
 801a314:	d002      	beq.n	801a31c <load_descriptor_values+0x50>
 801a316:	2b01      	cmp	r3, #1
 801a318:	d01f      	beq.n	801a35a <load_descriptor_values+0x8e>
 801a31a:	e08e      	b.n	801a43a <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	2201      	movs	r2, #1
 801a320:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 801a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a324:	089b      	lsrs	r3, r3, #2
 801a326:	b29b      	uxth	r3, r3
 801a328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a32c:	b29a      	uxth	r2, r3
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 801a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a334:	0e1b      	lsrs	r3, r3, #24
 801a336:	b25b      	sxtb	r3, r3
 801a338:	f003 030f 	and.w	r3, r3, #15
 801a33c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 801a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a342:	0c1b      	lsrs	r3, r3, #16
 801a344:	b2db      	uxtb	r3, r3
 801a346:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 801a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a34a:	0f1b      	lsrs	r3, r3, #28
 801a34c:	b29b      	uxth	r3, r3
 801a34e:	f003 030f 	and.w	r3, r3, #15
 801a352:	b29a      	uxth	r2, r3
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	825a      	strh	r2, [r3, #18]
            break;
 801a358:	e0b4      	b.n	801a4c4 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	681a      	ldr	r2, [r3, #0]
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	895b      	ldrh	r3, [r3, #10]
 801a364:	3301      	adds	r3, #1
 801a366:	009b      	lsls	r3, r3, #2
 801a368:	4413      	add	r3, r2
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 801a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a370:	0c1b      	lsrs	r3, r3, #16
 801a372:	b29b      	uxth	r3, r3
 801a374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a378:	b29a      	uxth	r2, r3
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 801a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a380:	089b      	lsrs	r3, r3, #2
 801a382:	b29b      	uxth	r3, r3
 801a384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a388:	b29a      	uxth	r2, r3
 801a38a:	69fb      	ldr	r3, [r7, #28]
 801a38c:	0f1b      	lsrs	r3, r3, #28
 801a38e:	b29b      	uxth	r3, r3
 801a390:	019b      	lsls	r3, r3, #6
 801a392:	b29b      	uxth	r3, r3
 801a394:	4313      	orrs	r3, r2
 801a396:	b29a      	uxth	r2, r3
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 801a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39e:	0f1b      	lsrs	r3, r3, #28
 801a3a0:	b25b      	sxtb	r3, r3
 801a3a2:	f003 030f 	and.w	r3, r3, #15
 801a3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 801a3aa:	69fb      	ldr	r3, [r7, #28]
 801a3ac:	b29b      	uxth	r3, r3
 801a3ae:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 801a3b0:	69fb      	ldr	r3, [r7, #28]
 801a3b2:	0c1b      	lsrs	r3, r3, #16
 801a3b4:	b29b      	uxth	r3, r3
 801a3b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a3ba:	b29a      	uxth	r2, r3
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	825a      	strh	r2, [r3, #18]
            break;
 801a3c0:	e080      	b.n	801a4c4 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	681a      	ldr	r2, [r3, #0]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	895b      	ldrh	r3, [r3, #10]
 801a3cc:	3301      	adds	r3, #1
 801a3ce:	009b      	lsls	r3, r3, #2
 801a3d0:	4413      	add	r3, r2
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	681a      	ldr	r2, [r3, #0]
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	895b      	ldrh	r3, [r3, #10]
 801a3e0:	3302      	adds	r3, #2
 801a3e2:	009b      	lsls	r3, r3, #2
 801a3e4:	4413      	add	r3, r2
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	681a      	ldr	r2, [r3, #0]
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	895b      	ldrh	r3, [r3, #10]
 801a3f4:	3303      	adds	r3, #3
 801a3f6:	009b      	lsls	r3, r3, #2
 801a3f8:	4413      	add	r3, r2
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 801a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a400:	0c1b      	lsrs	r3, r3, #16
 801a402:	b29a      	uxth	r2, r3
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 801a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a40a:	089b      	lsrs	r3, r3, #2
 801a40c:	b29b      	uxth	r3, r3
 801a40e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a412:	b29a      	uxth	r2, r3
 801a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a416:	0a1b      	lsrs	r3, r3, #8
 801a418:	b29b      	uxth	r3, r3
 801a41a:	019b      	lsls	r3, r3, #6
 801a41c:	b29b      	uxth	r3, r3
 801a41e:	4313      	orrs	r3, r2
 801a420:	b29a      	uxth	r2, r3
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 801a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a428:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 801a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a42e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 801a430:	6a3b      	ldr	r3, [r7, #32]
 801a432:	b29a      	uxth	r2, r3
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	825a      	strh	r2, [r3, #18]
            break;
 801a438:	e044      	b.n	801a4c4 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	681a      	ldr	r2, [r3, #0]
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	895b      	ldrh	r3, [r3, #10]
 801a444:	3301      	adds	r3, #1
 801a446:	009b      	lsls	r3, r3, #2
 801a448:	4413      	add	r3, r2
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	681a      	ldr	r2, [r3, #0]
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	895b      	ldrh	r3, [r3, #10]
 801a458:	3302      	adds	r3, #2
 801a45a:	009b      	lsls	r3, r3, #2
 801a45c:	4413      	add	r3, r2
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	681a      	ldr	r2, [r3, #0]
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	895b      	ldrh	r3, [r3, #10]
 801a46c:	3303      	adds	r3, #3
 801a46e:	009b      	lsls	r3, r3, #2
 801a470:	4413      	add	r3, r2
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	681a      	ldr	r2, [r3, #0]
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	895b      	ldrh	r3, [r3, #10]
 801a480:	3304      	adds	r3, #4
 801a482:	009b      	lsls	r3, r3, #2
 801a484:	4413      	add	r3, r2
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	b29a      	uxth	r2, r3
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 801a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a494:	089b      	lsrs	r3, r3, #2
 801a496:	b29b      	uxth	r3, r3
 801a498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a49c:	b29a      	uxth	r2, r3
 801a49e:	69bb      	ldr	r3, [r7, #24]
 801a4a0:	0a1b      	lsrs	r3, r3, #8
 801a4a2:	b29b      	uxth	r3, r3
 801a4a4:	019b      	lsls	r3, r3, #6
 801a4a6:	b29b      	uxth	r3, r3
 801a4a8:	4313      	orrs	r3, r2
 801a4aa:	b29a      	uxth	r2, r3
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 801a4b0:	69bb      	ldr	r3, [r7, #24]
 801a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 801a4b6:	697b      	ldr	r3, [r7, #20]
 801a4b8:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 801a4ba:	693b      	ldr	r3, [r7, #16]
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	825a      	strh	r2, [r3, #18]
            break;
 801a4c2:	bf00      	nop
        }
    }

    if (!iter->message)
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	685b      	ldr	r3, [r3, #4]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d106      	bne.n	801a4da <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	621a      	str	r2, [r3, #32]
 801a4d8:	e041      	b.n	801a55e <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	685a      	ldr	r2, [r3, #4]
 801a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4e0:	441a      	add	r2, r3
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	619a      	str	r2, [r3, #24]

        if (size_offset)
 801a4e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d008      	beq.n	801a500 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	699a      	ldr	r2, [r3, #24]
 801a4f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a4f6:	425b      	negs	r3, r3
 801a4f8:	441a      	add	r2, r3
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	621a      	str	r2, [r3, #32]
 801a4fe:	e01a      	b.n	801a536 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	7d9b      	ldrb	r3, [r3, #22]
 801a504:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a508:	2b20      	cmp	r3, #32
 801a50a:	d111      	bne.n	801a530 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	7d9b      	ldrb	r3, [r3, #22]
 801a510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 801a514:	2b00      	cmp	r3, #0
 801a516:	d005      	beq.n	801a524 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	7d9b      	ldrb	r3, [r3, #22]
 801a51c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 801a520:	2b80      	cmp	r3, #128	; 0x80
 801a522:	d105      	bne.n	801a530 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f103 0214 	add.w	r2, r3, #20
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	621a      	str	r2, [r3, #32]
 801a52e:	e002      	b.n	801a536 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2200      	movs	r2, #0
 801a534:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	7d9b      	ldrb	r3, [r3, #22]
 801a53a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a53e:	2b80      	cmp	r3, #128	; 0x80
 801a540:	d109      	bne.n	801a556 <load_descriptor_values+0x28a>
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	699b      	ldr	r3, [r3, #24]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d005      	beq.n	801a556 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	699b      	ldr	r3, [r3, #24]
 801a54e:	681a      	ldr	r2, [r3, #0]
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	61da      	str	r2, [r3, #28]
 801a554:	e003      	b.n	801a55e <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	699a      	ldr	r2, [r3, #24]
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	7d9b      	ldrb	r3, [r3, #22]
 801a562:	f003 030f 	and.w	r3, r3, #15
 801a566:	2b08      	cmp	r3, #8
 801a568:	d005      	beq.n	801a576 <load_descriptor_values+0x2aa>
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	7d9b      	ldrb	r3, [r3, #22]
 801a56e:	f003 030f 	and.w	r3, r3, #15
 801a572:	2b09      	cmp	r3, #9
 801a574:	d10a      	bne.n	801a58c <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	685a      	ldr	r2, [r3, #4]
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	89db      	ldrh	r3, [r3, #14]
 801a580:	009b      	lsls	r3, r3, #2
 801a582:	4413      	add	r3, r2
 801a584:	681a      	ldr	r2, [r3, #0]
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	625a      	str	r2, [r3, #36]	; 0x24
 801a58a:	e002      	b.n	801a592 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2200      	movs	r2, #0
 801a590:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 801a592:	2301      	movs	r3, #1
}
 801a594:	4618      	mov	r0, r3
 801a596:	373c      	adds	r7, #60	; 0x3c
 801a598:	46bd      	mov	sp, r7
 801a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59e:	4770      	bx	lr

0801a5a0 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	b085      	sub	sp, #20
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
    iter->index++;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	891b      	ldrh	r3, [r3, #8]
 801a5ac:	3301      	adds	r3, #1
 801a5ae:	b29a      	uxth	r2, r3
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	891a      	ldrh	r2, [r3, #8]
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	8a1b      	ldrh	r3, [r3, #16]
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d30c      	bcc.n	801a5dc <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 801a5da:	e03c      	b.n	801a656 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	681a      	ldr	r2, [r3, #0]
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	895b      	ldrh	r3, [r3, #10]
 801a5e6:	009b      	lsls	r3, r3, #2
 801a5e8:	4413      	add	r3, r2
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	0a1b      	lsrs	r3, r3, #8
 801a5f2:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	f003 0303 	and.w	r3, r3, #3
 801a5fa:	2201      	movs	r2, #1
 801a5fc:	fa02 f303 	lsl.w	r3, r2, r3
 801a600:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	895a      	ldrh	r2, [r3, #10]
 801a606:	893b      	ldrh	r3, [r7, #8]
 801a608:	4413      	add	r3, r2
 801a60a:	b29a      	uxth	r2, r3
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	899a      	ldrh	r2, [r3, #12]
 801a614:	7afb      	ldrb	r3, [r7, #11]
 801a616:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	bf0c      	ite	eq
 801a61e:	2301      	moveq	r3, #1
 801a620:	2300      	movne	r3, #0
 801a622:	b2db      	uxtb	r3, r3
 801a624:	b29b      	uxth	r3, r3
 801a626:	4413      	add	r3, r2
 801a628:	b29a      	uxth	r2, r3
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	89da      	ldrh	r2, [r3, #14]
 801a632:	7afb      	ldrb	r3, [r7, #11]
 801a634:	f003 030f 	and.w	r3, r3, #15
 801a638:	2b08      	cmp	r3, #8
 801a63a:	d004      	beq.n	801a646 <advance_iterator+0xa6>
 801a63c:	7afb      	ldrb	r3, [r7, #11]
 801a63e:	f003 030f 	and.w	r3, r3, #15
 801a642:	2b09      	cmp	r3, #9
 801a644:	d101      	bne.n	801a64a <advance_iterator+0xaa>
 801a646:	2301      	movs	r3, #1
 801a648:	e000      	b.n	801a64c <advance_iterator+0xac>
 801a64a:	2300      	movs	r3, #0
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	4413      	add	r3, r2
 801a650:	b29a      	uxth	r2, r3
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	81da      	strh	r2, [r3, #14]
}
 801a656:	bf00      	nop
 801a658:	3714      	adds	r7, #20
 801a65a:	46bd      	mov	sp, r7
 801a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a660:	4770      	bx	lr

0801a662 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 801a662:	b580      	push	{r7, lr}
 801a664:	b084      	sub	sp, #16
 801a666:	af00      	add	r7, sp, #0
 801a668:	60f8      	str	r0, [r7, #12]
 801a66a:	60b9      	str	r1, [r7, #8]
 801a66c:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 801a66e:	2228      	movs	r2, #40	; 0x28
 801a670:	2100      	movs	r1, #0
 801a672:	68f8      	ldr	r0, [r7, #12]
 801a674:	f003 f824 	bl	801d6c0 <memset>

    iter->descriptor = desc;
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	68ba      	ldr	r2, [r7, #8]
 801a67c:	601a      	str	r2, [r3, #0]
    iter->message = message;
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	687a      	ldr	r2, [r7, #4]
 801a682:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 801a684:	68f8      	ldr	r0, [r7, #12]
 801a686:	f7ff fe21 	bl	801a2cc <load_descriptor_values>
 801a68a:	4603      	mov	r3, r0
}
 801a68c:	4618      	mov	r0, r3
 801a68e:	3710      	adds	r7, #16
 801a690:	46bd      	mov	sp, r7
 801a692:	bd80      	pop	{r7, pc}

0801a694 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b086      	sub	sp, #24
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 801a69e:	683b      	ldr	r3, [r7, #0]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	689b      	ldr	r3, [r3, #8]
 801a6a4:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 801a6a6:	693b      	ldr	r3, [r7, #16]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	0a1b      	lsrs	r3, r3, #8
 801a6b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a6b6:	2b80      	cmp	r3, #128	; 0x80
 801a6b8:	d109      	bne.n	801a6ce <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	3304      	adds	r3, #4
 801a6be:	461a      	mov	r2, r3
 801a6c0:	6939      	ldr	r1, [r7, #16]
 801a6c2:	6878      	ldr	r0, [r7, #4]
 801a6c4:	f7ff ffcd 	bl	801a662 <pb_field_iter_begin>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	75fb      	strb	r3, [r7, #23]
 801a6cc:	e008      	b.n	801a6e0 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 801a6ce:	683b      	ldr	r3, [r7, #0]
 801a6d0:	685b      	ldr	r3, [r3, #4]
 801a6d2:	461a      	mov	r2, r3
 801a6d4:	6939      	ldr	r1, [r7, #16]
 801a6d6:	6878      	ldr	r0, [r7, #4]
 801a6d8:	f7ff ffc3 	bl	801a662 <pb_field_iter_begin>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 801a6e0:	683b      	ldr	r3, [r7, #0]
 801a6e2:	f103 020c 	add.w	r2, r3, #12
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	621a      	str	r2, [r3, #32]
    return status;
 801a6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	3718      	adds	r7, #24
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	bd80      	pop	{r7, pc}

0801a6f4 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b082      	sub	sp, #8
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 801a6fc:	6878      	ldr	r0, [r7, #4]
 801a6fe:	f7ff ff4f 	bl	801a5a0 <advance_iterator>
    (void)load_descriptor_values(iter);
 801a702:	6878      	ldr	r0, [r7, #4]
 801a704:	f7ff fde2 	bl	801a2cc <load_descriptor_values>
    return iter->index != 0;
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	891b      	ldrh	r3, [r3, #8]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	bf14      	ite	ne
 801a710:	2301      	movne	r3, #1
 801a712:	2300      	moveq	r3, #0
 801a714:	b2db      	uxtb	r3, r3
}
 801a716:	4618      	mov	r0, r3
 801a718:	3708      	adds	r7, #8
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}

0801a71e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 801a71e:	b580      	push	{r7, lr}
 801a720:	b084      	sub	sp, #16
 801a722:	af00      	add	r7, sp, #0
 801a724:	6078      	str	r0, [r7, #4]
 801a726:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	8a1b      	ldrh	r3, [r3, #16]
 801a72c:	461a      	mov	r2, r3
 801a72e:	683b      	ldr	r3, [r7, #0]
 801a730:	4293      	cmp	r3, r2
 801a732:	d101      	bne.n	801a738 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 801a734:	2301      	movs	r3, #1
 801a736:	e044      	b.n	801a7c2 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	8a9b      	ldrh	r3, [r3, #20]
 801a73e:	461a      	mov	r2, r3
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	4293      	cmp	r3, r2
 801a744:	d901      	bls.n	801a74a <pb_field_iter_find+0x2c>
    {
        return false;
 801a746:	2300      	movs	r3, #0
 801a748:	e03b      	b.n	801a7c2 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	891b      	ldrh	r3, [r3, #8]
 801a74e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	8a1b      	ldrh	r3, [r3, #16]
 801a754:	461a      	mov	r2, r3
 801a756:	683b      	ldr	r3, [r7, #0]
 801a758:	4293      	cmp	r3, r2
 801a75a:	d204      	bcs.n	801a766 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	8a1a      	ldrh	r2, [r3, #16]
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 801a766:	6878      	ldr	r0, [r7, #4]
 801a768:	f7ff ff1a 	bl	801a5a0 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	681a      	ldr	r2, [r3, #0]
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	895b      	ldrh	r3, [r3, #10]
 801a776:	009b      	lsls	r3, r3, #2
 801a778:	4413      	add	r3, r2
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 801a77e:	68bb      	ldr	r3, [r7, #8]
 801a780:	089a      	lsrs	r2, r3, #2
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	4053      	eors	r3, r2
 801a786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d110      	bne.n	801a7b0 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 801a78e:	6878      	ldr	r0, [r7, #4]
 801a790:	f7ff fd9c 	bl	801a2cc <load_descriptor_values>

                if (iter->tag == tag &&
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	8a1b      	ldrh	r3, [r3, #16]
 801a798:	461a      	mov	r2, r3
 801a79a:	683b      	ldr	r3, [r7, #0]
 801a79c:	4293      	cmp	r3, r2
 801a79e:	d107      	bne.n	801a7b0 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	7d9b      	ldrb	r3, [r3, #22]
 801a7a4:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 801a7a8:	2b0a      	cmp	r3, #10
 801a7aa:	d001      	beq.n	801a7b0 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 801a7ac:	2301      	movs	r3, #1
 801a7ae:	e008      	b.n	801a7c2 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	891b      	ldrh	r3, [r3, #8]
 801a7b4:	89fa      	ldrh	r2, [r7, #14]
 801a7b6:	429a      	cmp	r2, r3
 801a7b8:	d1d5      	bne.n	801a766 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	f7ff fd86 	bl	801a2cc <load_descriptor_values>
        return false;
 801a7c0:	2300      	movs	r3, #0
    }
}
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	3710      	adds	r7, #16
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}

0801a7ca <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 801a7ca:	b580      	push	{r7, lr}
 801a7cc:	b084      	sub	sp, #16
 801a7ce:	af00      	add	r7, sp, #0
 801a7d0:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	7d9b      	ldrb	r3, [r3, #22]
 801a7d6:	f003 030f 	and.w	r3, r3, #15
 801a7da:	2b0a      	cmp	r3, #10
 801a7dc:	d101      	bne.n	801a7e2 <pb_field_iter_find_extension+0x18>
    {
        return true;
 801a7de:	2301      	movs	r3, #1
 801a7e0:	e022      	b.n	801a828 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	891b      	ldrh	r3, [r3, #8]
 801a7e6:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 801a7e8:	6878      	ldr	r0, [r7, #4]
 801a7ea:	f7ff fed9 	bl	801a5a0 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	681a      	ldr	r2, [r3, #0]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	895b      	ldrh	r3, [r3, #10]
 801a7f8:	009b      	lsls	r3, r3, #2
 801a7fa:	4413      	add	r3, r2
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 801a800:	68bb      	ldr	r3, [r7, #8]
 801a802:	0a1b      	lsrs	r3, r3, #8
 801a804:	f003 030f 	and.w	r3, r3, #15
 801a808:	2b0a      	cmp	r3, #10
 801a80a:	d104      	bne.n	801a816 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 801a80c:	6878      	ldr	r0, [r7, #4]
 801a80e:	f7ff fd5d 	bl	801a2cc <load_descriptor_values>
 801a812:	4603      	mov	r3, r0
 801a814:	e008      	b.n	801a828 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	891b      	ldrh	r3, [r3, #8]
 801a81a:	89fa      	ldrh	r2, [r7, #14]
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d1e3      	bne.n	801a7e8 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	f7ff fd53 	bl	801a2cc <load_descriptor_values>
        return false;
 801a826:	2300      	movs	r3, #0
    }
}
 801a828:	4618      	mov	r0, r3
 801a82a:	3710      	adds	r7, #16
 801a82c:	46bd      	mov	sp, r7
 801a82e:	bd80      	pop	{r7, pc}

0801a830 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 801a830:	b480      	push	{r7}
 801a832:	b085      	sub	sp, #20
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 801a83c:	68fb      	ldr	r3, [r7, #12]
}
 801a83e:	4618      	mov	r0, r3
 801a840:	3714      	adds	r7, #20
 801a842:	46bd      	mov	sp, r7
 801a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a848:	4770      	bx	lr

0801a84a <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 801a84a:	b580      	push	{r7, lr}
 801a84c:	b084      	sub	sp, #16
 801a84e:	af00      	add	r7, sp, #0
 801a850:	60f8      	str	r0, [r7, #12]
 801a852:	60b9      	str	r1, [r7, #8]
 801a854:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 801a856:	6878      	ldr	r0, [r7, #4]
 801a858:	f7ff ffea 	bl	801a830 <pb_const_cast>
 801a85c:	4603      	mov	r3, r0
 801a85e:	461a      	mov	r2, r3
 801a860:	68b9      	ldr	r1, [r7, #8]
 801a862:	68f8      	ldr	r0, [r7, #12]
 801a864:	f7ff fefd 	bl	801a662 <pb_field_iter_begin>
 801a868:	4603      	mov	r3, r0
}
 801a86a:	4618      	mov	r0, r3
 801a86c:	3710      	adds	r7, #16
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}

0801a872 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 801a872:	b580      	push	{r7, lr}
 801a874:	b082      	sub	sp, #8
 801a876:	af00      	add	r7, sp, #0
 801a878:	6078      	str	r0, [r7, #4]
 801a87a:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 801a87c:	6838      	ldr	r0, [r7, #0]
 801a87e:	f7ff ffd7 	bl	801a830 <pb_const_cast>
 801a882:	4603      	mov	r3, r0
 801a884:	4619      	mov	r1, r3
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	f7ff ff04 	bl	801a694 <pb_field_iter_begin_extension>
 801a88c:	4603      	mov	r3, r0
}
 801a88e:	4618      	mov	r0, r3
 801a890:	3708      	adds	r7, #8
 801a892:	46bd      	mov	sp, r7
 801a894:	bd80      	pop	{r7, pc}

0801a896 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 801a896:	b580      	push	{r7, lr}
 801a898:	b086      	sub	sp, #24
 801a89a:	af00      	add	r7, sp, #0
 801a89c:	60f8      	str	r0, [r7, #12]
 801a89e:	60b9      	str	r1, [r7, #8]
 801a8a0:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	8a5b      	ldrh	r3, [r3, #18]
 801a8a6:	2b08      	cmp	r3, #8
 801a8a8:	d125      	bne.n	801a8f6 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	69db      	ldr	r3, [r3, #28]
 801a8ae:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 801a8b0:	697b      	ldr	r3, [r7, #20]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d01f      	beq.n	801a8f6 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d00c      	beq.n	801a8d6 <pb_default_field_callback+0x40>
 801a8bc:	697b      	ldr	r3, [r7, #20]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d008      	beq.n	801a8d6 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 801a8c4:	697b      	ldr	r3, [r7, #20]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	697a      	ldr	r2, [r7, #20]
 801a8ca:	3204      	adds	r2, #4
 801a8cc:	6879      	ldr	r1, [r7, #4]
 801a8ce:	68f8      	ldr	r0, [r7, #12]
 801a8d0:	4798      	blx	r3
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	e010      	b.n	801a8f8 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 801a8d6:	68bb      	ldr	r3, [r7, #8]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d00c      	beq.n	801a8f6 <pb_default_field_callback+0x60>
 801a8dc:	697b      	ldr	r3, [r7, #20]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d008      	beq.n	801a8f6 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 801a8e4:	697b      	ldr	r3, [r7, #20]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	697a      	ldr	r2, [r7, #20]
 801a8ea:	3204      	adds	r2, #4
 801a8ec:	6879      	ldr	r1, [r7, #4]
 801a8ee:	68b8      	ldr	r0, [r7, #8]
 801a8f0:	4798      	blx	r3
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	e000      	b.n	801a8f8 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 801a8f6:	2301      	movs	r3, #1

}
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	3718      	adds	r7, #24
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}

0801a900 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b086      	sub	sp, #24
 801a904:	af00      	add	r7, sp, #0
 801a906:	60f8      	str	r0, [r7, #12]
 801a908:	60b9      	str	r1, [r7, #8]
 801a90a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	685b      	ldr	r3, [r3, #4]
 801a910:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	685a      	ldr	r2, [r3, #4]
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	441a      	add	r2, r3
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 801a91e:	68bb      	ldr	r3, [r7, #8]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d004      	beq.n	801a92e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 801a924:	687a      	ldr	r2, [r7, #4]
 801a926:	6979      	ldr	r1, [r7, #20]
 801a928:	68b8      	ldr	r0, [r7, #8]
 801a92a:	f002 febb 	bl	801d6a4 <memcpy>
    }
    
    return true;
 801a92e:	2301      	movs	r3, #1
}
 801a930:	4618      	mov	r0, r3
 801a932:	3718      	adds	r7, #24
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b088      	sub	sp, #32
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	60f8      	str	r0, [r7, #12]
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
    if (count == 0)
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d101      	bne.n	801a94e <pb_read+0x16>
        return true;
 801a94a:	2301      	movs	r3, #1
 801a94c:	e05f      	b.n	801aa0e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d123      	bne.n	801a99c <pb_read+0x64>
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	4a2f      	ldr	r2, [pc, #188]	; (801aa18 <pb_read+0xe0>)
 801a95a:	4293      	cmp	r3, r2
 801a95c:	d01e      	beq.n	801a99c <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 801a95e:	e011      	b.n	801a984 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 801a960:	f107 0310 	add.w	r3, r7, #16
 801a964:	2210      	movs	r2, #16
 801a966:	4619      	mov	r1, r3
 801a968:	68f8      	ldr	r0, [r7, #12]
 801a96a:	f7ff ffe5 	bl	801a938 <pb_read>
 801a96e:	4603      	mov	r3, r0
 801a970:	f083 0301 	eor.w	r3, r3, #1
 801a974:	b2db      	uxtb	r3, r3
 801a976:	2b00      	cmp	r3, #0
 801a978:	d001      	beq.n	801a97e <pb_read+0x46>
				return false;
 801a97a:	2300      	movs	r3, #0
 801a97c:	e047      	b.n	801aa0e <pb_read+0xd6>
			
			count -= 16;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	3b10      	subs	r3, #16
 801a982:	607b      	str	r3, [r7, #4]
		while (count > 16)
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	2b10      	cmp	r3, #16
 801a988:	d8ea      	bhi.n	801a960 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 801a98a:	f107 0310 	add.w	r3, r7, #16
 801a98e:	687a      	ldr	r2, [r7, #4]
 801a990:	4619      	mov	r1, r3
 801a992:	68f8      	ldr	r0, [r7, #12]
 801a994:	f7ff ffd0 	bl	801a938 <pb_read>
 801a998:	4603      	mov	r3, r0
 801a99a:	e038      	b.n	801aa0e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	689b      	ldr	r3, [r3, #8]
 801a9a0:	687a      	ldr	r2, [r7, #4]
 801a9a2:	429a      	cmp	r2, r3
 801a9a4:	d90b      	bls.n	801a9be <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	68db      	ldr	r3, [r3, #12]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d002      	beq.n	801a9b4 <pb_read+0x7c>
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	68db      	ldr	r3, [r3, #12]
 801a9b2:	e000      	b.n	801a9b6 <pb_read+0x7e>
 801a9b4:	4b19      	ldr	r3, [pc, #100]	; (801aa1c <pb_read+0xe4>)
 801a9b6:	68fa      	ldr	r2, [r7, #12]
 801a9b8:	60d3      	str	r3, [r2, #12]
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	e027      	b.n	801aa0e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	687a      	ldr	r2, [r7, #4]
 801a9c4:	68b9      	ldr	r1, [r7, #8]
 801a9c6:	68f8      	ldr	r0, [r7, #12]
 801a9c8:	4798      	blx	r3
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	f083 0301 	eor.w	r3, r3, #1
 801a9d0:	b2db      	uxtb	r3, r3
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d00b      	beq.n	801a9ee <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	68db      	ldr	r3, [r3, #12]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d002      	beq.n	801a9e4 <pb_read+0xac>
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	68db      	ldr	r3, [r3, #12]
 801a9e2:	e000      	b.n	801a9e6 <pb_read+0xae>
 801a9e4:	4b0e      	ldr	r3, [pc, #56]	; (801aa20 <pb_read+0xe8>)
 801a9e6:	68fa      	ldr	r2, [r7, #12]
 801a9e8:	60d3      	str	r3, [r2, #12]
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	e00f      	b.n	801aa0e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	689b      	ldr	r3, [r3, #8]
 801a9f2:	687a      	ldr	r2, [r7, #4]
 801a9f4:	429a      	cmp	r2, r3
 801a9f6:	d903      	bls.n	801aa00 <pb_read+0xc8>
        stream->bytes_left = 0;
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	609a      	str	r2, [r3, #8]
 801a9fe:	e005      	b.n	801aa0c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	689a      	ldr	r2, [r3, #8]
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	1ad2      	subs	r2, r2, r3
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	609a      	str	r2, [r3, #8]

    return true;
 801aa0c:	2301      	movs	r3, #1
}
 801aa0e:	4618      	mov	r0, r3
 801aa10:	3720      	adds	r7, #32
 801aa12:	46bd      	mov	sp, r7
 801aa14:	bd80      	pop	{r7, pc}
 801aa16:	bf00      	nop
 801aa18:	0801a901 	.word	0x0801a901
 801aa1c:	08021ef0 	.word	0x08021ef0
 801aa20:	08021f00 	.word	0x08021f00

0801aa24 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
 801aa2c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	689b      	ldr	r3, [r3, #8]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d10b      	bne.n	801aa4e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	68db      	ldr	r3, [r3, #12]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d002      	beq.n	801aa44 <pb_readbyte+0x20>
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	68db      	ldr	r3, [r3, #12]
 801aa42:	e000      	b.n	801aa46 <pb_readbyte+0x22>
 801aa44:	4b13      	ldr	r3, [pc, #76]	; (801aa94 <pb_readbyte+0x70>)
 801aa46:	687a      	ldr	r2, [r7, #4]
 801aa48:	60d3      	str	r3, [r2, #12]
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	e01d      	b.n	801aa8a <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	2201      	movs	r2, #1
 801aa54:	6839      	ldr	r1, [r7, #0]
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	4798      	blx	r3
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	f083 0301 	eor.w	r3, r3, #1
 801aa60:	b2db      	uxtb	r3, r3
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d00b      	beq.n	801aa7e <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	68db      	ldr	r3, [r3, #12]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d002      	beq.n	801aa74 <pb_readbyte+0x50>
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	68db      	ldr	r3, [r3, #12]
 801aa72:	e000      	b.n	801aa76 <pb_readbyte+0x52>
 801aa74:	4b08      	ldr	r3, [pc, #32]	; (801aa98 <pb_readbyte+0x74>)
 801aa76:	687a      	ldr	r2, [r7, #4]
 801aa78:	60d3      	str	r3, [r2, #12]
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	e005      	b.n	801aa8a <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	689b      	ldr	r3, [r3, #8]
 801aa82:	1e5a      	subs	r2, r3, #1
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	609a      	str	r2, [r3, #8]
    
    return true;    
 801aa88:	2301      	movs	r3, #1
}
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	3708      	adds	r7, #8
 801aa8e:	46bd      	mov	sp, r7
 801aa90:	bd80      	pop	{r7, pc}
 801aa92:	bf00      	nop
 801aa94:	08021ef0 	.word	0x08021ef0
 801aa98:	08021f00 	.word	0x08021f00

0801aa9c <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 801aa9c:	b490      	push	{r4, r7}
 801aa9e:	b08a      	sub	sp, #40	; 0x28
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	60f8      	str	r0, [r7, #12]
 801aaa4:	60b9      	str	r1, [r7, #8]
 801aaa6:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 801aaa8:	4b0a      	ldr	r3, [pc, #40]	; (801aad4 <pb_istream_from_buffer+0x38>)
 801aaaa:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 801aab0:	697b      	ldr	r3, [r7, #20]
 801aab2:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 801aab8:	2300      	movs	r3, #0
 801aaba:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	461c      	mov	r4, r3
 801aac0:	f107 0318 	add.w	r3, r7, #24
 801aac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801aaca:	68f8      	ldr	r0, [r7, #12]
 801aacc:	3728      	adds	r7, #40	; 0x28
 801aace:	46bd      	mov	sp, r7
 801aad0:	bc90      	pop	{r4, r7}
 801aad2:	4770      	bx	lr
 801aad4:	0801a901 	.word	0x0801a901

0801aad8 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b088      	sub	sp, #32
 801aadc:	af00      	add	r7, sp, #0
 801aade:	60f8      	str	r0, [r7, #12]
 801aae0:	60b9      	str	r1, [r7, #8]
 801aae2:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 801aae4:	f107 0315 	add.w	r3, r7, #21
 801aae8:	4619      	mov	r1, r3
 801aaea:	68f8      	ldr	r0, [r7, #12]
 801aaec:	f7ff ff9a 	bl	801aa24 <pb_readbyte>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	f083 0301 	eor.w	r3, r3, #1
 801aaf6:	b2db      	uxtb	r3, r3
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d00b      	beq.n	801ab14 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 801aafc:	68fb      	ldr	r3, [r7, #12]
 801aafe:	689b      	ldr	r3, [r3, #8]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d105      	bne.n	801ab10 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d002      	beq.n	801ab10 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	2201      	movs	r2, #1
 801ab0e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 801ab10:	2300      	movs	r3, #0
 801ab12:	e084      	b.n	801ac1e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 801ab14:	7d7b      	ldrb	r3, [r7, #21]
 801ab16:	b25b      	sxtb	r3, r3
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	db02      	blt.n	801ab22 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 801ab1c:	7d7b      	ldrb	r3, [r7, #21]
 801ab1e:	61fb      	str	r3, [r7, #28]
 801ab20:	e079      	b.n	801ac16 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 801ab22:	2307      	movs	r3, #7
 801ab24:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 801ab26:	7d7b      	ldrb	r3, [r7, #21]
 801ab28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ab2c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 801ab2e:	f107 0315 	add.w	r3, r7, #21
 801ab32:	4619      	mov	r1, r3
 801ab34:	68f8      	ldr	r0, [r7, #12]
 801ab36:	f7ff ff75 	bl	801aa24 <pb_readbyte>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	f083 0301 	eor.w	r3, r3, #1
 801ab40:	b2db      	uxtb	r3, r3
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d001      	beq.n	801ab4a <pb_decode_varint32_eof+0x72>
                return false;
 801ab46:	2300      	movs	r3, #0
 801ab48:	e069      	b.n	801ac1e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 801ab4a:	69bb      	ldr	r3, [r7, #24]
 801ab4c:	2b1f      	cmp	r3, #31
 801ab4e:	d92f      	bls.n	801abb0 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 801ab50:	69bb      	ldr	r3, [r7, #24]
 801ab52:	2b3e      	cmp	r3, #62	; 0x3e
 801ab54:	d801      	bhi.n	801ab5a <pb_decode_varint32_eof+0x82>
 801ab56:	23ff      	movs	r3, #255	; 0xff
 801ab58:	e000      	b.n	801ab5c <pb_decode_varint32_eof+0x84>
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801ab5e:	7d7b      	ldrb	r3, [r7, #21]
 801ab60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d006      	beq.n	801ab76 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 801ab68:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	da05      	bge.n	801ab7a <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 801ab6e:	7d7b      	ldrb	r3, [r7, #21]
 801ab70:	7dfa      	ldrb	r2, [r7, #23]
 801ab72:	429a      	cmp	r2, r3
 801ab74:	d101      	bne.n	801ab7a <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 801ab76:	2301      	movs	r3, #1
 801ab78:	e000      	b.n	801ab7c <pb_decode_varint32_eof+0xa4>
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	75bb      	strb	r3, [r7, #22]
 801ab7e:	7dbb      	ldrb	r3, [r7, #22]
 801ab80:	f003 0301 	and.w	r3, r3, #1
 801ab84:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 801ab86:	69bb      	ldr	r3, [r7, #24]
 801ab88:	2b3f      	cmp	r3, #63	; 0x3f
 801ab8a:	d805      	bhi.n	801ab98 <pb_decode_varint32_eof+0xc0>
 801ab8c:	7dbb      	ldrb	r3, [r7, #22]
 801ab8e:	f083 0301 	eor.w	r3, r3, #1
 801ab92:	b2db      	uxtb	r3, r3
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d037      	beq.n	801ac08 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	68db      	ldr	r3, [r3, #12]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d002      	beq.n	801aba6 <pb_decode_varint32_eof+0xce>
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	68db      	ldr	r3, [r3, #12]
 801aba4:	e000      	b.n	801aba8 <pb_decode_varint32_eof+0xd0>
 801aba6:	4b20      	ldr	r3, [pc, #128]	; (801ac28 <pb_decode_varint32_eof+0x150>)
 801aba8:	68fa      	ldr	r2, [r7, #12]
 801abaa:	60d3      	str	r3, [r2, #12]
 801abac:	2300      	movs	r3, #0
 801abae:	e036      	b.n	801ac1e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 801abb0:	69bb      	ldr	r3, [r7, #24]
 801abb2:	2b1c      	cmp	r3, #28
 801abb4:	d11f      	bne.n	801abf6 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 801abb6:	7d7b      	ldrb	r3, [r7, #21]
 801abb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d010      	beq.n	801abe2 <pb_decode_varint32_eof+0x10a>
 801abc0:	7d7b      	ldrb	r3, [r7, #21]
 801abc2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 801abc6:	2b78      	cmp	r3, #120	; 0x78
 801abc8:	d00b      	beq.n	801abe2 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	68db      	ldr	r3, [r3, #12]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d002      	beq.n	801abd8 <pb_decode_varint32_eof+0x100>
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	68db      	ldr	r3, [r3, #12]
 801abd6:	e000      	b.n	801abda <pb_decode_varint32_eof+0x102>
 801abd8:	4b13      	ldr	r3, [pc, #76]	; (801ac28 <pb_decode_varint32_eof+0x150>)
 801abda:	68fa      	ldr	r2, [r7, #12]
 801abdc:	60d3      	str	r3, [r2, #12]
 801abde:	2300      	movs	r3, #0
 801abe0:	e01d      	b.n	801ac1e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 801abe2:	7d7b      	ldrb	r3, [r7, #21]
 801abe4:	f003 020f 	and.w	r2, r3, #15
 801abe8:	69bb      	ldr	r3, [r7, #24]
 801abea:	fa02 f303 	lsl.w	r3, r2, r3
 801abee:	69fa      	ldr	r2, [r7, #28]
 801abf0:	4313      	orrs	r3, r2
 801abf2:	61fb      	str	r3, [r7, #28]
 801abf4:	e008      	b.n	801ac08 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 801abf6:	7d7b      	ldrb	r3, [r7, #21]
 801abf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801abfc:	69bb      	ldr	r3, [r7, #24]
 801abfe:	fa02 f303 	lsl.w	r3, r2, r3
 801ac02:	69fa      	ldr	r2, [r7, #28]
 801ac04:	4313      	orrs	r3, r2
 801ac06:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 801ac08:	69bb      	ldr	r3, [r7, #24]
 801ac0a:	3307      	adds	r3, #7
 801ac0c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 801ac0e:	7d7b      	ldrb	r3, [r7, #21]
 801ac10:	b25b      	sxtb	r3, r3
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	db8b      	blt.n	801ab2e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 801ac16:	68bb      	ldr	r3, [r7, #8]
 801ac18:	69fa      	ldr	r2, [r7, #28]
 801ac1a:	601a      	str	r2, [r3, #0]
   return true;
 801ac1c:	2301      	movs	r3, #1
}
 801ac1e:	4618      	mov	r0, r3
 801ac20:	3720      	adds	r7, #32
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}
 801ac26:	bf00      	nop
 801ac28:	08021f0c 	.word	0x08021f0c

0801ac2c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b082      	sub	sp, #8
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
 801ac34:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 801ac36:	2200      	movs	r2, #0
 801ac38:	6839      	ldr	r1, [r7, #0]
 801ac3a:	6878      	ldr	r0, [r7, #4]
 801ac3c:	f7ff ff4c 	bl	801aad8 <pb_decode_varint32_eof>
 801ac40:	4603      	mov	r3, r0
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	3708      	adds	r7, #8
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bd80      	pop	{r7, pc}
	...

0801ac4c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 801ac4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ac50:	b08a      	sub	sp, #40	; 0x28
 801ac52:	af00      	add	r7, sp, #0
 801ac54:	60f8      	str	r0, [r7, #12]
 801ac56:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 801ac58:	2300      	movs	r3, #0
 801ac5a:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 801ac5c:	f04f 0200 	mov.w	r2, #0
 801ac60:	f04f 0300 	mov.w	r3, #0
 801ac64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 801ac68:	f107 0317 	add.w	r3, r7, #23
 801ac6c:	4619      	mov	r1, r3
 801ac6e:	68f8      	ldr	r0, [r7, #12]
 801ac70:	f7ff fed8 	bl	801aa24 <pb_readbyte>
 801ac74:	4603      	mov	r3, r0
 801ac76:	f083 0301 	eor.w	r3, r3, #1
 801ac7a:	b2db      	uxtb	r3, r3
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d001      	beq.n	801ac84 <pb_decode_varint+0x38>
            return false;
 801ac80:	2300      	movs	r3, #0
 801ac82:	e041      	b.n	801ad08 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 801ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac86:	2b3e      	cmp	r3, #62	; 0x3e
 801ac88:	d910      	bls.n	801acac <pb_decode_varint+0x60>
 801ac8a:	7dfb      	ldrb	r3, [r7, #23]
 801ac8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d00b      	beq.n	801acac <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	68db      	ldr	r3, [r3, #12]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d002      	beq.n	801aca2 <pb_decode_varint+0x56>
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	68db      	ldr	r3, [r3, #12]
 801aca0:	e000      	b.n	801aca4 <pb_decode_varint+0x58>
 801aca2:	4b1c      	ldr	r3, [pc, #112]	; (801ad14 <pb_decode_varint+0xc8>)
 801aca4:	68fa      	ldr	r2, [r7, #12]
 801aca6:	60d3      	str	r3, [r2, #12]
 801aca8:	2300      	movs	r3, #0
 801acaa:	e02d      	b.n	801ad08 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 801acac:	7dfb      	ldrb	r3, [r7, #23]
 801acae:	b2db      	uxtb	r3, r3
 801acb0:	2200      	movs	r2, #0
 801acb2:	603b      	str	r3, [r7, #0]
 801acb4:	607a      	str	r2, [r7, #4]
 801acb6:	683b      	ldr	r3, [r7, #0]
 801acb8:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 801acbc:	f04f 0900 	mov.w	r9, #0
 801acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acc2:	f1a3 0120 	sub.w	r1, r3, #32
 801acc6:	f1c3 0220 	rsb	r2, r3, #32
 801acca:	fa09 f503 	lsl.w	r5, r9, r3
 801acce:	fa08 f101 	lsl.w	r1, r8, r1
 801acd2:	430d      	orrs	r5, r1
 801acd4:	fa28 f202 	lsr.w	r2, r8, r2
 801acd8:	4315      	orrs	r5, r2
 801acda:	fa08 f403 	lsl.w	r4, r8, r3
 801acde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ace2:	ea42 0a04 	orr.w	sl, r2, r4
 801ace6:	ea43 0b05 	orr.w	fp, r3, r5
 801acea:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 801acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf0:	3307      	adds	r3, #7
 801acf2:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 801acf4:	7dfb      	ldrb	r3, [r7, #23]
 801acf6:	b25b      	sxtb	r3, r3
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	dbb5      	blt.n	801ac68 <pb_decode_varint+0x1c>
    
    *dest = result;
 801acfc:	68b9      	ldr	r1, [r7, #8]
 801acfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ad02:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 801ad06:	2301      	movs	r3, #1
}
 801ad08:	4618      	mov	r0, r3
 801ad0a:	3728      	adds	r7, #40	; 0x28
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ad12:	bf00      	nop
 801ad14:	08021f0c 	.word	0x08021f0c

0801ad18 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 801ad18:	b580      	push	{r7, lr}
 801ad1a:	b084      	sub	sp, #16
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 801ad20:	f107 030f 	add.w	r3, r7, #15
 801ad24:	2201      	movs	r2, #1
 801ad26:	4619      	mov	r1, r3
 801ad28:	6878      	ldr	r0, [r7, #4]
 801ad2a:	f7ff fe05 	bl	801a938 <pb_read>
 801ad2e:	4603      	mov	r3, r0
 801ad30:	f083 0301 	eor.w	r3, r3, #1
 801ad34:	b2db      	uxtb	r3, r3
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d001      	beq.n	801ad3e <pb_skip_varint+0x26>
            return false;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	e004      	b.n	801ad48 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 801ad3e:	7bfb      	ldrb	r3, [r7, #15]
 801ad40:	b25b      	sxtb	r3, r3
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	dbec      	blt.n	801ad20 <pb_skip_varint+0x8>
    return true;
 801ad46:	2301      	movs	r3, #1
}
 801ad48:	4618      	mov	r0, r3
 801ad4a:	3710      	adds	r7, #16
 801ad4c:	46bd      	mov	sp, r7
 801ad4e:	bd80      	pop	{r7, pc}

0801ad50 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b084      	sub	sp, #16
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 801ad58:	f107 030c 	add.w	r3, r7, #12
 801ad5c:	4619      	mov	r1, r3
 801ad5e:	6878      	ldr	r0, [r7, #4]
 801ad60:	f7ff ff64 	bl	801ac2c <pb_decode_varint32>
 801ad64:	4603      	mov	r3, r0
 801ad66:	f083 0301 	eor.w	r3, r3, #1
 801ad6a:	b2db      	uxtb	r3, r3
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d001      	beq.n	801ad74 <pb_skip_string+0x24>
        return false;
 801ad70:	2300      	movs	r3, #0
 801ad72:	e006      	b.n	801ad82 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	461a      	mov	r2, r3
 801ad78:	2100      	movs	r1, #0
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f7ff fddc 	bl	801a938 <pb_read>
 801ad80:	4603      	mov	r3, r0
}
 801ad82:	4618      	mov	r0, r3
 801ad84:	3710      	adds	r7, #16
 801ad86:	46bd      	mov	sp, r7
 801ad88:	bd80      	pop	{r7, pc}

0801ad8a <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 801ad8a:	b580      	push	{r7, lr}
 801ad8c:	b086      	sub	sp, #24
 801ad8e:	af00      	add	r7, sp, #0
 801ad90:	60f8      	str	r0, [r7, #12]
 801ad92:	60b9      	str	r1, [r7, #8]
 801ad94:	607a      	str	r2, [r7, #4]
 801ad96:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 801ad98:	683b      	ldr	r3, [r7, #0]
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 801ad9e:	68bb      	ldr	r3, [r7, #8]
 801ada0:	2200      	movs	r2, #0
 801ada2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2200      	movs	r2, #0
 801ada8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 801adaa:	f107 0314 	add.w	r3, r7, #20
 801adae:	683a      	ldr	r2, [r7, #0]
 801adb0:	4619      	mov	r1, r3
 801adb2:	68f8      	ldr	r0, [r7, #12]
 801adb4:	f7ff fe90 	bl	801aad8 <pb_decode_varint32_eof>
 801adb8:	4603      	mov	r3, r0
 801adba:	f083 0301 	eor.w	r3, r3, #1
 801adbe:	b2db      	uxtb	r3, r3
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d001      	beq.n	801adc8 <pb_decode_tag+0x3e>
    {
        return false;
 801adc4:	2300      	movs	r3, #0
 801adc6:	e00b      	b.n	801ade0 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 801adc8:	697b      	ldr	r3, [r7, #20]
 801adca:	08da      	lsrs	r2, r3, #3
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 801add0:	697b      	ldr	r3, [r7, #20]
 801add2:	b2db      	uxtb	r3, r3
 801add4:	f003 0307 	and.w	r3, r3, #7
 801add8:	b2da      	uxtb	r2, r3
 801adda:	68bb      	ldr	r3, [r7, #8]
 801addc:	701a      	strb	r2, [r3, #0]
    return true;
 801adde:	2301      	movs	r3, #1
}
 801ade0:	4618      	mov	r0, r3
 801ade2:	3718      	adds	r7, #24
 801ade4:	46bd      	mov	sp, r7
 801ade6:	bd80      	pop	{r7, pc}

0801ade8 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	b082      	sub	sp, #8
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
 801adf0:	460b      	mov	r3, r1
 801adf2:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 801adf4:	78fb      	ldrb	r3, [r7, #3]
 801adf6:	2b05      	cmp	r3, #5
 801adf8:	d826      	bhi.n	801ae48 <pb_skip_field+0x60>
 801adfa:	a201      	add	r2, pc, #4	; (adr r2, 801ae00 <pb_skip_field+0x18>)
 801adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae00:	0801ae19 	.word	0x0801ae19
 801ae04:	0801ae23 	.word	0x0801ae23
 801ae08:	0801ae31 	.word	0x0801ae31
 801ae0c:	0801ae49 	.word	0x0801ae49
 801ae10:	0801ae49 	.word	0x0801ae49
 801ae14:	0801ae3b 	.word	0x0801ae3b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 801ae18:	6878      	ldr	r0, [r7, #4]
 801ae1a:	f7ff ff7d 	bl	801ad18 <pb_skip_varint>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	e01d      	b.n	801ae5e <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 801ae22:	2208      	movs	r2, #8
 801ae24:	2100      	movs	r1, #0
 801ae26:	6878      	ldr	r0, [r7, #4]
 801ae28:	f7ff fd86 	bl	801a938 <pb_read>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	e016      	b.n	801ae5e <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 801ae30:	6878      	ldr	r0, [r7, #4]
 801ae32:	f7ff ff8d 	bl	801ad50 <pb_skip_string>
 801ae36:	4603      	mov	r3, r0
 801ae38:	e011      	b.n	801ae5e <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 801ae3a:	2204      	movs	r2, #4
 801ae3c:	2100      	movs	r1, #0
 801ae3e:	6878      	ldr	r0, [r7, #4]
 801ae40:	f7ff fd7a 	bl	801a938 <pb_read>
 801ae44:	4603      	mov	r3, r0
 801ae46:	e00a      	b.n	801ae5e <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	68db      	ldr	r3, [r3, #12]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d002      	beq.n	801ae56 <pb_skip_field+0x6e>
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	68db      	ldr	r3, [r3, #12]
 801ae54:	e000      	b.n	801ae58 <pb_skip_field+0x70>
 801ae56:	4b04      	ldr	r3, [pc, #16]	; (801ae68 <pb_skip_field+0x80>)
 801ae58:	687a      	ldr	r2, [r7, #4]
 801ae5a:	60d3      	str	r3, [r2, #12]
 801ae5c:	2300      	movs	r3, #0
    }
}
 801ae5e:	4618      	mov	r0, r3
 801ae60:	3708      	adds	r7, #8
 801ae62:	46bd      	mov	sp, r7
 801ae64:	bd80      	pop	{r7, pc}
 801ae66:	bf00      	nop
 801ae68:	08021f1c 	.word	0x08021f1c

0801ae6c <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b086      	sub	sp, #24
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	60f8      	str	r0, [r7, #12]
 801ae74:	607a      	str	r2, [r7, #4]
 801ae76:	603b      	str	r3, [r7, #0]
 801ae78:	460b      	mov	r3, r1
 801ae7a:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 801ae7c:	683b      	ldr	r3, [r7, #0]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 801ae82:	7afb      	ldrb	r3, [r7, #11]
 801ae84:	2b05      	cmp	r3, #5
 801ae86:	d03f      	beq.n	801af08 <read_raw_value+0x9c>
 801ae88:	2b05      	cmp	r3, #5
 801ae8a:	dc47      	bgt.n	801af1c <read_raw_value+0xb0>
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d002      	beq.n	801ae96 <read_raw_value+0x2a>
 801ae90:	2b01      	cmp	r3, #1
 801ae92:	d02f      	beq.n	801aef4 <read_raw_value+0x88>
 801ae94:	e042      	b.n	801af1c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 801ae96:	683b      	ldr	r3, [r7, #0]
 801ae98:	2200      	movs	r2, #0
 801ae9a:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 801ae9c:	683b      	ldr	r3, [r7, #0]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	1c5a      	adds	r2, r3, #1
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 801aea6:	683b      	ldr	r3, [r7, #0]
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	697a      	ldr	r2, [r7, #20]
 801aeac:	429a      	cmp	r2, r3
 801aeae:	d20b      	bcs.n	801aec8 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	68db      	ldr	r3, [r3, #12]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d002      	beq.n	801aebe <read_raw_value+0x52>
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	68db      	ldr	r3, [r3, #12]
 801aebc:	e000      	b.n	801aec0 <read_raw_value+0x54>
 801aebe:	4b1f      	ldr	r3, [pc, #124]	; (801af3c <read_raw_value+0xd0>)
 801aec0:	68fa      	ldr	r2, [r7, #12]
 801aec2:	60d3      	str	r3, [r2, #12]
 801aec4:	2300      	movs	r3, #0
 801aec6:	e034      	b.n	801af32 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 801aec8:	2201      	movs	r2, #1
 801aeca:	6879      	ldr	r1, [r7, #4]
 801aecc:	68f8      	ldr	r0, [r7, #12]
 801aece:	f7ff fd33 	bl	801a938 <pb_read>
 801aed2:	4603      	mov	r3, r0
 801aed4:	f083 0301 	eor.w	r3, r3, #1
 801aed8:	b2db      	uxtb	r3, r3
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d001      	beq.n	801aee2 <read_raw_value+0x76>
                    return false;
 801aede:	2300      	movs	r3, #0
 801aee0:	e027      	b.n	801af32 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	1c5a      	adds	r2, r3, #1
 801aee6:	607a      	str	r2, [r7, #4]
 801aee8:	781b      	ldrb	r3, [r3, #0]
 801aeea:	b25b      	sxtb	r3, r3
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	dbd5      	blt.n	801ae9c <read_raw_value+0x30>
            return true;
 801aef0:	2301      	movs	r3, #1
 801aef2:	e01e      	b.n	801af32 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 801aef4:	683b      	ldr	r3, [r7, #0]
 801aef6:	2208      	movs	r2, #8
 801aef8:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 801aefa:	2208      	movs	r2, #8
 801aefc:	6879      	ldr	r1, [r7, #4]
 801aefe:	68f8      	ldr	r0, [r7, #12]
 801af00:	f7ff fd1a 	bl	801a938 <pb_read>
 801af04:	4603      	mov	r3, r0
 801af06:	e014      	b.n	801af32 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 801af08:	683b      	ldr	r3, [r7, #0]
 801af0a:	2204      	movs	r2, #4
 801af0c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 801af0e:	2204      	movs	r2, #4
 801af10:	6879      	ldr	r1, [r7, #4]
 801af12:	68f8      	ldr	r0, [r7, #12]
 801af14:	f7ff fd10 	bl	801a938 <pb_read>
 801af18:	4603      	mov	r3, r0
 801af1a:	e00a      	b.n	801af32 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	68db      	ldr	r3, [r3, #12]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d002      	beq.n	801af2a <read_raw_value+0xbe>
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	68db      	ldr	r3, [r3, #12]
 801af28:	e000      	b.n	801af2c <read_raw_value+0xc0>
 801af2a:	4b05      	ldr	r3, [pc, #20]	; (801af40 <read_raw_value+0xd4>)
 801af2c:	68fa      	ldr	r2, [r7, #12]
 801af2e:	60d3      	str	r3, [r2, #12]
 801af30:	2300      	movs	r3, #0
    }
}
 801af32:	4618      	mov	r0, r3
 801af34:	3718      	adds	r7, #24
 801af36:	46bd      	mov	sp, r7
 801af38:	bd80      	pop	{r7, pc}
 801af3a:	bf00      	nop
 801af3c:	08021f0c 	.word	0x08021f0c
 801af40:	08021f1c 	.word	0x08021f1c

0801af44 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 801af44:	b590      	push	{r4, r7, lr}
 801af46:	b085      	sub	sp, #20
 801af48:	af00      	add	r7, sp, #0
 801af4a:	6078      	str	r0, [r7, #4]
 801af4c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 801af4e:	f107 030c 	add.w	r3, r7, #12
 801af52:	4619      	mov	r1, r3
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	f7ff fe69 	bl	801ac2c <pb_decode_varint32>
 801af5a:	4603      	mov	r3, r0
 801af5c:	f083 0301 	eor.w	r3, r3, #1
 801af60:	b2db      	uxtb	r3, r3
 801af62:	2b00      	cmp	r3, #0
 801af64:	d001      	beq.n	801af6a <pb_make_string_substream+0x26>
        return false;
 801af66:	2300      	movs	r3, #0
 801af68:	e020      	b.n	801afac <pb_make_string_substream+0x68>
    
    *substream = *stream;
 801af6a:	683a      	ldr	r2, [r7, #0]
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	4614      	mov	r4, r2
 801af70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801af72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 801af76:	683b      	ldr	r3, [r7, #0]
 801af78:	689a      	ldr	r2, [r3, #8]
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	429a      	cmp	r2, r3
 801af7e:	d20b      	bcs.n	801af98 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	68db      	ldr	r3, [r3, #12]
 801af84:	2b00      	cmp	r3, #0
 801af86:	d002      	beq.n	801af8e <pb_make_string_substream+0x4a>
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	68db      	ldr	r3, [r3, #12]
 801af8c:	e000      	b.n	801af90 <pb_make_string_substream+0x4c>
 801af8e:	4b09      	ldr	r3, [pc, #36]	; (801afb4 <pb_make_string_substream+0x70>)
 801af90:	687a      	ldr	r2, [r7, #4]
 801af92:	60d3      	str	r3, [r2, #12]
 801af94:	2300      	movs	r3, #0
 801af96:	e009      	b.n	801afac <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 801af98:	68fa      	ldr	r2, [r7, #12]
 801af9a:	683b      	ldr	r3, [r7, #0]
 801af9c:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	689a      	ldr	r2, [r3, #8]
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	1ad2      	subs	r2, r2, r3
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	609a      	str	r2, [r3, #8]
    return true;
 801afaa:	2301      	movs	r3, #1
}
 801afac:	4618      	mov	r0, r3
 801afae:	3714      	adds	r7, #20
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd90      	pop	{r4, r7, pc}
 801afb4:	08021f30 	.word	0x08021f30

0801afb8 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b082      	sub	sp, #8
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 801afc2:	683b      	ldr	r3, [r7, #0]
 801afc4:	689b      	ldr	r3, [r3, #8]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d00e      	beq.n	801afe8 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 801afca:	683b      	ldr	r3, [r7, #0]
 801afcc:	689b      	ldr	r3, [r3, #8]
 801afce:	461a      	mov	r2, r3
 801afd0:	2100      	movs	r1, #0
 801afd2:	6838      	ldr	r0, [r7, #0]
 801afd4:	f7ff fcb0 	bl	801a938 <pb_read>
 801afd8:	4603      	mov	r3, r0
 801afda:	f083 0301 	eor.w	r3, r3, #1
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d001      	beq.n	801afe8 <pb_close_string_substream+0x30>
            return false;
 801afe4:	2300      	movs	r3, #0
 801afe6:	e008      	b.n	801affa <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	685a      	ldr	r2, [r3, #4]
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 801aff0:	683b      	ldr	r3, [r7, #0]
 801aff2:	68da      	ldr	r2, [r3, #12]
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	60da      	str	r2, [r3, #12]
#endif
    return true;
 801aff8:	2301      	movs	r3, #1
}
 801affa:	4618      	mov	r0, r3
 801affc:	3708      	adds	r7, #8
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}
	...

0801b004 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b084      	sub	sp, #16
 801b008:	af00      	add	r7, sp, #0
 801b00a:	60f8      	str	r0, [r7, #12]
 801b00c:	460b      	mov	r3, r1
 801b00e:	607a      	str	r2, [r7, #4]
 801b010:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	7d9b      	ldrb	r3, [r3, #22]
 801b016:	f003 030f 	and.w	r3, r3, #15
 801b01a:	2b0b      	cmp	r3, #11
 801b01c:	f200 80d4 	bhi.w	801b1c8 <decode_basic_field+0x1c4>
 801b020:	a201      	add	r2, pc, #4	; (adr r2, 801b028 <decode_basic_field+0x24>)
 801b022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b026:	bf00      	nop
 801b028:	0801b059 	.word	0x0801b059
 801b02c:	0801b089 	.word	0x0801b089
 801b030:	0801b089 	.word	0x0801b089
 801b034:	0801b089 	.word	0x0801b089
 801b038:	0801b0b9 	.word	0x0801b0b9
 801b03c:	0801b0ed 	.word	0x0801b0ed
 801b040:	0801b121 	.word	0x0801b121
 801b044:	0801b14b 	.word	0x0801b14b
 801b048:	0801b175 	.word	0x0801b175
 801b04c:	0801b175 	.word	0x0801b175
 801b050:	0801b1c9 	.word	0x0801b1c9
 801b054:	0801b19f 	.word	0x0801b19f
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 801b058:	7afb      	ldrb	r3, [r7, #11]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d00e      	beq.n	801b07c <decode_basic_field+0x78>
 801b05e:	7afb      	ldrb	r3, [r7, #11]
 801b060:	2bff      	cmp	r3, #255	; 0xff
 801b062:	d00b      	beq.n	801b07c <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	68db      	ldr	r3, [r3, #12]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d002      	beq.n	801b072 <decode_basic_field+0x6e>
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	68db      	ldr	r3, [r3, #12]
 801b070:	e000      	b.n	801b074 <decode_basic_field+0x70>
 801b072:	4b5d      	ldr	r3, [pc, #372]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b074:	68fa      	ldr	r2, [r7, #12]
 801b076:	60d3      	str	r3, [r2, #12]
 801b078:	2300      	movs	r3, #0
 801b07a:	e0b0      	b.n	801b1de <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 801b07c:	6879      	ldr	r1, [r7, #4]
 801b07e:	68f8      	ldr	r0, [r7, #12]
 801b080:	f000 fef6 	bl	801be70 <pb_dec_bool>
 801b084:	4603      	mov	r3, r0
 801b086:	e0aa      	b.n	801b1de <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 801b088:	7afb      	ldrb	r3, [r7, #11]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d00e      	beq.n	801b0ac <decode_basic_field+0xa8>
 801b08e:	7afb      	ldrb	r3, [r7, #11]
 801b090:	2bff      	cmp	r3, #255	; 0xff
 801b092:	d00b      	beq.n	801b0ac <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	68db      	ldr	r3, [r3, #12]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d002      	beq.n	801b0a2 <decode_basic_field+0x9e>
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	68db      	ldr	r3, [r3, #12]
 801b0a0:	e000      	b.n	801b0a4 <decode_basic_field+0xa0>
 801b0a2:	4b51      	ldr	r3, [pc, #324]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b0a4:	68fa      	ldr	r2, [r7, #12]
 801b0a6:	60d3      	str	r3, [r2, #12]
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	e098      	b.n	801b1de <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 801b0ac:	6879      	ldr	r1, [r7, #4]
 801b0ae:	68f8      	ldr	r0, [r7, #12]
 801b0b0:	f000 feee 	bl	801be90 <pb_dec_varint>
 801b0b4:	4603      	mov	r3, r0
 801b0b6:	e092      	b.n	801b1de <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 801b0b8:	7afb      	ldrb	r3, [r7, #11]
 801b0ba:	2b05      	cmp	r3, #5
 801b0bc:	d00e      	beq.n	801b0dc <decode_basic_field+0xd8>
 801b0be:	7afb      	ldrb	r3, [r7, #11]
 801b0c0:	2bff      	cmp	r3, #255	; 0xff
 801b0c2:	d00b      	beq.n	801b0dc <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	68db      	ldr	r3, [r3, #12]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d002      	beq.n	801b0d2 <decode_basic_field+0xce>
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	68db      	ldr	r3, [r3, #12]
 801b0d0:	e000      	b.n	801b0d4 <decode_basic_field+0xd0>
 801b0d2:	4b45      	ldr	r3, [pc, #276]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b0d4:	68fa      	ldr	r2, [r7, #12]
 801b0d6:	60d3      	str	r3, [r2, #12]
 801b0d8:	2300      	movs	r3, #0
 801b0da:	e080      	b.n	801b1de <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	69db      	ldr	r3, [r3, #28]
 801b0e0:	4619      	mov	r1, r3
 801b0e2:	68f8      	ldr	r0, [r7, #12]
 801b0e4:	f000 fe8a 	bl	801bdfc <pb_decode_fixed32>
 801b0e8:	4603      	mov	r3, r0
 801b0ea:	e078      	b.n	801b1de <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 801b0ec:	7afb      	ldrb	r3, [r7, #11]
 801b0ee:	2b01      	cmp	r3, #1
 801b0f0:	d00e      	beq.n	801b110 <decode_basic_field+0x10c>
 801b0f2:	7afb      	ldrb	r3, [r7, #11]
 801b0f4:	2bff      	cmp	r3, #255	; 0xff
 801b0f6:	d00b      	beq.n	801b110 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	68db      	ldr	r3, [r3, #12]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d002      	beq.n	801b106 <decode_basic_field+0x102>
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	68db      	ldr	r3, [r3, #12]
 801b104:	e000      	b.n	801b108 <decode_basic_field+0x104>
 801b106:	4b38      	ldr	r3, [pc, #224]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b108:	68fa      	ldr	r2, [r7, #12]
 801b10a:	60d3      	str	r3, [r2, #12]
 801b10c:	2300      	movs	r3, #0
 801b10e:	e066      	b.n	801b1de <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	69db      	ldr	r3, [r3, #28]
 801b114:	4619      	mov	r1, r3
 801b116:	68f8      	ldr	r0, [r7, #12]
 801b118:	f000 fe8c 	bl	801be34 <pb_decode_fixed64>
 801b11c:	4603      	mov	r3, r0
 801b11e:	e05e      	b.n	801b1de <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 801b120:	7afb      	ldrb	r3, [r7, #11]
 801b122:	2b02      	cmp	r3, #2
 801b124:	d00b      	beq.n	801b13e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	68db      	ldr	r3, [r3, #12]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d002      	beq.n	801b134 <decode_basic_field+0x130>
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	68db      	ldr	r3, [r3, #12]
 801b132:	e000      	b.n	801b136 <decode_basic_field+0x132>
 801b134:	4b2c      	ldr	r3, [pc, #176]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b136:	68fa      	ldr	r2, [r7, #12]
 801b138:	60d3      	str	r3, [r2, #12]
 801b13a:	2300      	movs	r3, #0
 801b13c:	e04f      	b.n	801b1de <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 801b13e:	6879      	ldr	r1, [r7, #4]
 801b140:	68f8      	ldr	r0, [r7, #12]
 801b142:	f000 ffd1 	bl	801c0e8 <pb_dec_bytes>
 801b146:	4603      	mov	r3, r0
 801b148:	e049      	b.n	801b1de <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 801b14a:	7afb      	ldrb	r3, [r7, #11]
 801b14c:	2b02      	cmp	r3, #2
 801b14e:	d00b      	beq.n	801b168 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	68db      	ldr	r3, [r3, #12]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d002      	beq.n	801b15e <decode_basic_field+0x15a>
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	68db      	ldr	r3, [r3, #12]
 801b15c:	e000      	b.n	801b160 <decode_basic_field+0x15c>
 801b15e:	4b22      	ldr	r3, [pc, #136]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b160:	68fa      	ldr	r2, [r7, #12]
 801b162:	60d3      	str	r3, [r2, #12]
 801b164:	2300      	movs	r3, #0
 801b166:	e03a      	b.n	801b1de <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 801b168:	6879      	ldr	r1, [r7, #4]
 801b16a:	68f8      	ldr	r0, [r7, #12]
 801b16c:	f001 f830 	bl	801c1d0 <pb_dec_string>
 801b170:	4603      	mov	r3, r0
 801b172:	e034      	b.n	801b1de <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 801b174:	7afb      	ldrb	r3, [r7, #11]
 801b176:	2b02      	cmp	r3, #2
 801b178:	d00b      	beq.n	801b192 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	68db      	ldr	r3, [r3, #12]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d002      	beq.n	801b188 <decode_basic_field+0x184>
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	68db      	ldr	r3, [r3, #12]
 801b186:	e000      	b.n	801b18a <decode_basic_field+0x186>
 801b188:	4b17      	ldr	r3, [pc, #92]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b18a:	68fa      	ldr	r2, [r7, #12]
 801b18c:	60d3      	str	r3, [r2, #12]
 801b18e:	2300      	movs	r3, #0
 801b190:	e025      	b.n	801b1de <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 801b192:	6879      	ldr	r1, [r7, #4]
 801b194:	68f8      	ldr	r0, [r7, #12]
 801b196:	f001 f897 	bl	801c2c8 <pb_dec_submessage>
 801b19a:	4603      	mov	r3, r0
 801b19c:	e01f      	b.n	801b1de <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 801b19e:	7afb      	ldrb	r3, [r7, #11]
 801b1a0:	2b02      	cmp	r3, #2
 801b1a2:	d00b      	beq.n	801b1bc <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d002      	beq.n	801b1b2 <decode_basic_field+0x1ae>
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	68db      	ldr	r3, [r3, #12]
 801b1b0:	e000      	b.n	801b1b4 <decode_basic_field+0x1b0>
 801b1b2:	4b0d      	ldr	r3, [pc, #52]	; (801b1e8 <decode_basic_field+0x1e4>)
 801b1b4:	68fa      	ldr	r2, [r7, #12]
 801b1b6:	60d3      	str	r3, [r2, #12]
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	e010      	b.n	801b1de <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 801b1bc:	6879      	ldr	r1, [r7, #4]
 801b1be:	68f8      	ldr	r0, [r7, #12]
 801b1c0:	f001 f90c 	bl	801c3dc <pb_dec_fixed_length_bytes>
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	e00a      	b.n	801b1de <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	68db      	ldr	r3, [r3, #12]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d002      	beq.n	801b1d6 <decode_basic_field+0x1d2>
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	68db      	ldr	r3, [r3, #12]
 801b1d4:	e000      	b.n	801b1d8 <decode_basic_field+0x1d4>
 801b1d6:	4b05      	ldr	r3, [pc, #20]	; (801b1ec <decode_basic_field+0x1e8>)
 801b1d8:	68fa      	ldr	r2, [r7, #12]
 801b1da:	60d3      	str	r3, [r2, #12]
 801b1dc:	2300      	movs	r3, #0
    }
}
 801b1de:	4618      	mov	r0, r3
 801b1e0:	3710      	adds	r7, #16
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}
 801b1e6:	bf00      	nop
 801b1e8:	08021f48 	.word	0x08021f48
 801b1ec:	08021f58 	.word	0x08021f58

0801b1f0 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b096      	sub	sp, #88	; 0x58
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	60f8      	str	r0, [r7, #12]
 801b1f8:	460b      	mov	r3, r1
 801b1fa:	607a      	str	r2, [r7, #4]
 801b1fc:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	7d9b      	ldrb	r3, [r3, #22]
 801b202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b206:	2b30      	cmp	r3, #48	; 0x30
 801b208:	f000 80c2 	beq.w	801b390 <decode_static_field+0x1a0>
 801b20c:	2b30      	cmp	r3, #48	; 0x30
 801b20e:	f200 811a 	bhi.w	801b446 <decode_static_field+0x256>
 801b212:	2b20      	cmp	r3, #32
 801b214:	d01f      	beq.n	801b256 <decode_static_field+0x66>
 801b216:	2b20      	cmp	r3, #32
 801b218:	f200 8115 	bhi.w	801b446 <decode_static_field+0x256>
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d002      	beq.n	801b226 <decode_static_field+0x36>
 801b220:	2b10      	cmp	r3, #16
 801b222:	d008      	beq.n	801b236 <decode_static_field+0x46>
 801b224:	e10f      	b.n	801b446 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 801b226:	7afb      	ldrb	r3, [r7, #11]
 801b228:	687a      	ldr	r2, [r7, #4]
 801b22a:	4619      	mov	r1, r3
 801b22c:	68f8      	ldr	r0, [r7, #12]
 801b22e:	f7ff fee9 	bl	801b004 <decode_basic_field>
 801b232:	4603      	mov	r3, r0
 801b234:	e112      	b.n	801b45c <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	6a1b      	ldr	r3, [r3, #32]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d003      	beq.n	801b246 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	6a1b      	ldr	r3, [r3, #32]
 801b242:	2201      	movs	r2, #1
 801b244:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 801b246:	7afb      	ldrb	r3, [r7, #11]
 801b248:	687a      	ldr	r2, [r7, #4]
 801b24a:	4619      	mov	r1, r3
 801b24c:	68f8      	ldr	r0, [r7, #12]
 801b24e:	f7ff fed9 	bl	801b004 <decode_basic_field>
 801b252:	4603      	mov	r3, r0
 801b254:	e102      	b.n	801b45c <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 801b256:	7afb      	ldrb	r3, [r7, #11]
 801b258:	2b02      	cmp	r3, #2
 801b25a:	d16c      	bne.n	801b336 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	7d9b      	ldrb	r3, [r3, #22]
 801b260:	f003 030f 	and.w	r3, r3, #15
 801b264:	2b05      	cmp	r3, #5
 801b266:	d866      	bhi.n	801b336 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 801b268:	2301      	movs	r3, #1
 801b26a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	6a1b      	ldr	r3, [r3, #32]
 801b272:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	699b      	ldr	r3, [r3, #24]
 801b278:	687a      	ldr	r2, [r7, #4]
 801b27a:	8a52      	ldrh	r2, [r2, #18]
 801b27c:	4611      	mov	r1, r2
 801b27e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b280:	8812      	ldrh	r2, [r2, #0]
 801b282:	fb01 f202 	mul.w	r2, r1, r2
 801b286:	441a      	add	r2, r3
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 801b28c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b290:	4619      	mov	r1, r3
 801b292:	68f8      	ldr	r0, [r7, #12]
 801b294:	f7ff fe56 	bl	801af44 <pb_make_string_substream>
 801b298:	4603      	mov	r3, r0
 801b29a:	f083 0301 	eor.w	r3, r3, #1
 801b29e:	b2db      	uxtb	r3, r3
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d01f      	beq.n	801b2e4 <decode_static_field+0xf4>
                    return false;
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	e0d9      	b.n	801b45c <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 801b2a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b2ac:	687a      	ldr	r2, [r7, #4]
 801b2ae:	21ff      	movs	r1, #255	; 0xff
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f7ff fea7 	bl	801b004 <decode_basic_field>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	f083 0301 	eor.w	r3, r3, #1
 801b2bc:	b2db      	uxtb	r3, r3
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d003      	beq.n	801b2ca <decode_static_field+0xda>
                    {
                        status = false;
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 801b2c8:	e015      	b.n	801b2f6 <decode_static_field+0x106>
                    }
                    (*size)++;
 801b2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2cc:	881b      	ldrh	r3, [r3, #0]
 801b2ce:	3301      	adds	r3, #1
 801b2d0:	b29a      	uxth	r2, r3
 801b2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2d4:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	69db      	ldr	r3, [r3, #28]
 801b2da:	687a      	ldr	r2, [r7, #4]
 801b2dc:	8a52      	ldrh	r2, [r2, #18]
 801b2de:	441a      	add	r2, r3
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 801b2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d005      	beq.n	801b2f6 <decode_static_field+0x106>
 801b2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2ec:	881a      	ldrh	r2, [r3, #0]
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	8a9b      	ldrh	r3, [r3, #20]
 801b2f2:	429a      	cmp	r2, r3
 801b2f4:	d3d8      	bcc.n	801b2a8 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 801b2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d00b      	beq.n	801b314 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	68db      	ldr	r3, [r3, #12]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d002      	beq.n	801b30a <decode_static_field+0x11a>
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	68db      	ldr	r3, [r3, #12]
 801b308:	e000      	b.n	801b30c <decode_static_field+0x11c>
 801b30a:	4b56      	ldr	r3, [pc, #344]	; (801b464 <decode_static_field+0x274>)
 801b30c:	68fa      	ldr	r2, [r7, #12]
 801b30e:	60d3      	str	r3, [r2, #12]
 801b310:	2300      	movs	r3, #0
 801b312:	e0a3      	b.n	801b45c <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 801b314:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b318:	4619      	mov	r1, r3
 801b31a:	68f8      	ldr	r0, [r7, #12]
 801b31c:	f7ff fe4c 	bl	801afb8 <pb_close_string_substream>
 801b320:	4603      	mov	r3, r0
 801b322:	f083 0301 	eor.w	r3, r3, #1
 801b326:	b2db      	uxtb	r3, r3
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d001      	beq.n	801b330 <decode_static_field+0x140>
                    return false;
 801b32c:	2300      	movs	r3, #0
 801b32e:	e095      	b.n	801b45c <decode_static_field+0x26c>

                return status;
 801b330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b334:	e092      	b.n	801b45c <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	6a1b      	ldr	r3, [r3, #32]
 801b33a:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	699b      	ldr	r3, [r3, #24]
 801b340:	687a      	ldr	r2, [r7, #4]
 801b342:	8a52      	ldrh	r2, [r2, #18]
 801b344:	4611      	mov	r1, r2
 801b346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b348:	8812      	ldrh	r2, [r2, #0]
 801b34a:	fb01 f202 	mul.w	r2, r1, r2
 801b34e:	441a      	add	r2, r3
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 801b354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b356:	881b      	ldrh	r3, [r3, #0]
 801b358:	1c5a      	adds	r2, r3, #1
 801b35a:	b291      	uxth	r1, r2
 801b35c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b35e:	8011      	strh	r1, [r2, #0]
 801b360:	687a      	ldr	r2, [r7, #4]
 801b362:	8a92      	ldrh	r2, [r2, #20]
 801b364:	4293      	cmp	r3, r2
 801b366:	d30b      	bcc.n	801b380 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	68db      	ldr	r3, [r3, #12]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d002      	beq.n	801b376 <decode_static_field+0x186>
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	68db      	ldr	r3, [r3, #12]
 801b374:	e000      	b.n	801b378 <decode_static_field+0x188>
 801b376:	4b3b      	ldr	r3, [pc, #236]	; (801b464 <decode_static_field+0x274>)
 801b378:	68fa      	ldr	r2, [r7, #12]
 801b37a:	60d3      	str	r3, [r2, #12]
 801b37c:	2300      	movs	r3, #0
 801b37e:	e06d      	b.n	801b45c <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 801b380:	7afb      	ldrb	r3, [r7, #11]
 801b382:	687a      	ldr	r2, [r7, #4]
 801b384:	4619      	mov	r1, r3
 801b386:	68f8      	ldr	r0, [r7, #12]
 801b388:	f7ff fe3c 	bl	801b004 <decode_basic_field>
 801b38c:	4603      	mov	r3, r0
 801b38e:	e065      	b.n	801b45c <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	7d9b      	ldrb	r3, [r3, #22]
 801b394:	f003 030f 	and.w	r3, r3, #15
 801b398:	2b08      	cmp	r3, #8
 801b39a:	d005      	beq.n	801b3a8 <decode_static_field+0x1b8>
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	7d9b      	ldrb	r3, [r3, #22]
 801b3a0:	f003 030f 	and.w	r3, r3, #15
 801b3a4:	2b09      	cmp	r3, #9
 801b3a6:	d141      	bne.n	801b42c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	6a1b      	ldr	r3, [r3, #32]
 801b3ac:	881a      	ldrh	r2, [r3, #0]
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b3b2:	429a      	cmp	r2, r3
 801b3b4:	d03a      	beq.n	801b42c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	69d8      	ldr	r0, [r3, #28]
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	8a5b      	ldrh	r3, [r3, #18]
 801b3be:	461a      	mov	r2, r3
 801b3c0:	2100      	movs	r1, #0
 801b3c2:	f002 f97d 	bl	801d6c0 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3ca:	689b      	ldr	r3, [r3, #8]
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d10a      	bne.n	801b3e6 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3d4:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d105      	bne.n	801b3e6 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3de:	685b      	ldr	r3, [r3, #4]
 801b3e0:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d022      	beq.n	801b42c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	69da      	ldr	r2, [r3, #28]
 801b3ee:	f107 0314 	add.w	r3, r7, #20
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	f7ff f935 	bl	801a662 <pb_field_iter_begin>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d016      	beq.n	801b42c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 801b3fe:	f107 0314 	add.w	r3, r7, #20
 801b402:	4618      	mov	r0, r3
 801b404:	f000 fa4d 	bl	801b8a2 <pb_message_set_to_defaults>
 801b408:	4603      	mov	r3, r0
 801b40a:	f083 0301 	eor.w	r3, r3, #1
 801b40e:	b2db      	uxtb	r3, r3
 801b410:	2b00      	cmp	r3, #0
 801b412:	d00b      	beq.n	801b42c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	68db      	ldr	r3, [r3, #12]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d002      	beq.n	801b422 <decode_static_field+0x232>
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	68db      	ldr	r3, [r3, #12]
 801b420:	e000      	b.n	801b424 <decode_static_field+0x234>
 801b422:	4b11      	ldr	r3, [pc, #68]	; (801b468 <decode_static_field+0x278>)
 801b424:	68fa      	ldr	r2, [r7, #12]
 801b426:	60d3      	str	r3, [r2, #12]
 801b428:	2300      	movs	r3, #0
 801b42a:	e017      	b.n	801b45c <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	6a1b      	ldr	r3, [r3, #32]
 801b430:	687a      	ldr	r2, [r7, #4]
 801b432:	8a12      	ldrh	r2, [r2, #16]
 801b434:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 801b436:	7afb      	ldrb	r3, [r7, #11]
 801b438:	687a      	ldr	r2, [r7, #4]
 801b43a:	4619      	mov	r1, r3
 801b43c:	68f8      	ldr	r0, [r7, #12]
 801b43e:	f7ff fde1 	bl	801b004 <decode_basic_field>
 801b442:	4603      	mov	r3, r0
 801b444:	e00a      	b.n	801b45c <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	68db      	ldr	r3, [r3, #12]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d002      	beq.n	801b454 <decode_static_field+0x264>
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	68db      	ldr	r3, [r3, #12]
 801b452:	e000      	b.n	801b456 <decode_static_field+0x266>
 801b454:	4b05      	ldr	r3, [pc, #20]	; (801b46c <decode_static_field+0x27c>)
 801b456:	68fa      	ldr	r2, [r7, #12]
 801b458:	60d3      	str	r3, [r2, #12]
 801b45a:	2300      	movs	r3, #0
    }
}
 801b45c:	4618      	mov	r0, r3
 801b45e:	3758      	adds	r7, #88	; 0x58
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}
 801b464:	08021f6c 	.word	0x08021f6c
 801b468:	08021f7c 	.word	0x08021f7c
 801b46c:	08021f58 	.word	0x08021f58

0801b470 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b470:	b480      	push	{r7}
 801b472:	b085      	sub	sp, #20
 801b474:	af00      	add	r7, sp, #0
 801b476:	60f8      	str	r0, [r7, #12]
 801b478:	460b      	mov	r3, r1
 801b47a:	607a      	str	r2, [r7, #4]
 801b47c:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	68db      	ldr	r3, [r3, #12]
 801b482:	2b00      	cmp	r3, #0
 801b484:	d002      	beq.n	801b48c <decode_pointer_field+0x1c>
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	68db      	ldr	r3, [r3, #12]
 801b48a:	e000      	b.n	801b48e <decode_pointer_field+0x1e>
 801b48c:	4b04      	ldr	r3, [pc, #16]	; (801b4a0 <decode_pointer_field+0x30>)
 801b48e:	68fa      	ldr	r2, [r7, #12]
 801b490:	60d3      	str	r3, [r2, #12]
 801b492:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 801b494:	4618      	mov	r0, r3
 801b496:	3714      	adds	r7, #20
 801b498:	46bd      	mov	sp, r7
 801b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b49e:	4770      	bx	lr
 801b4a0:	08021f94 	.word	0x08021f94

0801b4a4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b4a4:	b590      	push	{r4, r7, lr}
 801b4a6:	b097      	sub	sp, #92	; 0x5c
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	61f8      	str	r0, [r7, #28]
 801b4ac:	460b      	mov	r3, r1
 801b4ae:	617a      	str	r2, [r7, #20]
 801b4b0:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 801b4b2:	697b      	ldr	r3, [r7, #20]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	68db      	ldr	r3, [r3, #12]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d106      	bne.n	801b4ca <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 801b4bc:	7efb      	ldrb	r3, [r7, #27]
 801b4be:	4619      	mov	r1, r3
 801b4c0:	69f8      	ldr	r0, [r7, #28]
 801b4c2:	f7ff fc91 	bl	801ade8 <pb_skip_field>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	e070      	b.n	801b5ac <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 801b4ca:	7efb      	ldrb	r3, [r7, #27]
 801b4cc:	2b02      	cmp	r3, #2
 801b4ce:	d145      	bne.n	801b55c <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 801b4d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b4d4:	4619      	mov	r1, r3
 801b4d6:	69f8      	ldr	r0, [r7, #28]
 801b4d8:	f7ff fd34 	bl	801af44 <pb_make_string_substream>
 801b4dc:	4603      	mov	r3, r0
 801b4de:	f083 0301 	eor.w	r3, r3, #1
 801b4e2:	b2db      	uxtb	r3, r3
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d001      	beq.n	801b4ec <decode_callback_field+0x48>
            return false;
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	e05f      	b.n	801b5ac <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 801b4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b4ee:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 801b4f0:	697b      	ldr	r3, [r7, #20]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	68db      	ldr	r3, [r3, #12]
 801b4f6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801b4fa:	697a      	ldr	r2, [r7, #20]
 801b4fc:	2100      	movs	r1, #0
 801b4fe:	4798      	blx	r3
 801b500:	4603      	mov	r3, r0
 801b502:	f083 0301 	eor.w	r3, r3, #1
 801b506:	b2db      	uxtb	r3, r3
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d010      	beq.n	801b52e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 801b50c:	69fb      	ldr	r3, [r7, #28]
 801b50e:	68db      	ldr	r3, [r3, #12]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d002      	beq.n	801b51a <decode_callback_field+0x76>
 801b514:	69fb      	ldr	r3, [r7, #28]
 801b516:	68db      	ldr	r3, [r3, #12]
 801b518:	e005      	b.n	801b526 <decode_callback_field+0x82>
 801b51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d001      	beq.n	801b524 <decode_callback_field+0x80>
 801b520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b522:	e000      	b.n	801b526 <decode_callback_field+0x82>
 801b524:	4b23      	ldr	r3, [pc, #140]	; (801b5b4 <decode_callback_field+0x110>)
 801b526:	69fa      	ldr	r2, [r7, #28]
 801b528:	60d3      	str	r3, [r2, #12]
                return false;
 801b52a:	2300      	movs	r3, #0
 801b52c:	e03e      	b.n	801b5ac <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 801b52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b530:	2b00      	cmp	r3, #0
 801b532:	d003      	beq.n	801b53c <decode_callback_field+0x98>
 801b534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b538:	429a      	cmp	r2, r3
 801b53a:	d8d7      	bhi.n	801b4ec <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 801b53c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b540:	4619      	mov	r1, r3
 801b542:	69f8      	ldr	r0, [r7, #28]
 801b544:	f7ff fd38 	bl	801afb8 <pb_close_string_substream>
 801b548:	4603      	mov	r3, r0
 801b54a:	f083 0301 	eor.w	r3, r3, #1
 801b54e:	b2db      	uxtb	r3, r3
 801b550:	2b00      	cmp	r3, #0
 801b552:	d001      	beq.n	801b558 <decode_callback_field+0xb4>
            return false;
 801b554:	2300      	movs	r3, #0
 801b556:	e029      	b.n	801b5ac <decode_callback_field+0x108>

        return true;
 801b558:	2301      	movs	r3, #1
 801b55a:	e027      	b.n	801b5ac <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 801b55c:	230a      	movs	r3, #10
 801b55e:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 801b560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b564:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b568:	7ef9      	ldrb	r1, [r7, #27]
 801b56a:	69f8      	ldr	r0, [r7, #28]
 801b56c:	f7ff fc7e 	bl	801ae6c <read_raw_value>
 801b570:	4603      	mov	r3, r0
 801b572:	f083 0301 	eor.w	r3, r3, #1
 801b576:	b2db      	uxtb	r3, r3
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d001      	beq.n	801b580 <decode_callback_field+0xdc>
            return false;
 801b57c:	2300      	movs	r3, #0
 801b57e:	e015      	b.n	801b5ac <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 801b580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b582:	463b      	mov	r3, r7
 801b584:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801b588:	4618      	mov	r0, r3
 801b58a:	f7ff fa87 	bl	801aa9c <pb_istream_from_buffer>
 801b58e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 801b592:	463b      	mov	r3, r7
 801b594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 801b59a:	697b      	ldr	r3, [r7, #20]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	68db      	ldr	r3, [r3, #12]
 801b5a0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b5a4:	697a      	ldr	r2, [r7, #20]
 801b5a6:	2100      	movs	r1, #0
 801b5a8:	4798      	blx	r3
 801b5aa:	4603      	mov	r3, r0
    }
}
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	375c      	adds	r7, #92	; 0x5c
 801b5b0:	46bd      	mov	sp, r7
 801b5b2:	bd90      	pop	{r4, r7, pc}
 801b5b4:	08021fa8 	.word	0x08021fa8

0801b5b8 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b084      	sub	sp, #16
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	60f8      	str	r0, [r7, #12]
 801b5c0:	460b      	mov	r3, r1
 801b5c2:	607a      	str	r2, [r7, #4]
 801b5c4:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	7d9b      	ldrb	r3, [r3, #22]
 801b5ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b5ce:	2b80      	cmp	r3, #128	; 0x80
 801b5d0:	d00e      	beq.n	801b5f0 <decode_field+0x38>
 801b5d2:	2b80      	cmp	r3, #128	; 0x80
 801b5d4:	d81c      	bhi.n	801b610 <decode_field+0x58>
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d002      	beq.n	801b5e0 <decode_field+0x28>
 801b5da:	2b40      	cmp	r3, #64	; 0x40
 801b5dc:	d010      	beq.n	801b600 <decode_field+0x48>
 801b5de:	e017      	b.n	801b610 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 801b5e0:	7afb      	ldrb	r3, [r7, #11]
 801b5e2:	687a      	ldr	r2, [r7, #4]
 801b5e4:	4619      	mov	r1, r3
 801b5e6:	68f8      	ldr	r0, [r7, #12]
 801b5e8:	f7ff fe02 	bl	801b1f0 <decode_static_field>
 801b5ec:	4603      	mov	r3, r0
 801b5ee:	e01a      	b.n	801b626 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 801b5f0:	7afb      	ldrb	r3, [r7, #11]
 801b5f2:	687a      	ldr	r2, [r7, #4]
 801b5f4:	4619      	mov	r1, r3
 801b5f6:	68f8      	ldr	r0, [r7, #12]
 801b5f8:	f7ff ff3a 	bl	801b470 <decode_pointer_field>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	e012      	b.n	801b626 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 801b600:	7afb      	ldrb	r3, [r7, #11]
 801b602:	687a      	ldr	r2, [r7, #4]
 801b604:	4619      	mov	r1, r3
 801b606:	68f8      	ldr	r0, [r7, #12]
 801b608:	f7ff ff4c 	bl	801b4a4 <decode_callback_field>
 801b60c:	4603      	mov	r3, r0
 801b60e:	e00a      	b.n	801b626 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	68db      	ldr	r3, [r3, #12]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d002      	beq.n	801b61e <decode_field+0x66>
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	68db      	ldr	r3, [r3, #12]
 801b61c:	e000      	b.n	801b620 <decode_field+0x68>
 801b61e:	4b04      	ldr	r3, [pc, #16]	; (801b630 <decode_field+0x78>)
 801b620:	68fa      	ldr	r2, [r7, #12]
 801b622:	60d3      	str	r3, [r2, #12]
 801b624:	2300      	movs	r3, #0
    }
}
 801b626:	4618      	mov	r0, r3
 801b628:	3710      	adds	r7, #16
 801b62a:	46bd      	mov	sp, r7
 801b62c:	bd80      	pop	{r7, pc}
 801b62e:	bf00      	nop
 801b630:	08021f58 	.word	0x08021f58

0801b634 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b08e      	sub	sp, #56	; 0x38
 801b638:	af00      	add	r7, sp, #0
 801b63a:	60f8      	str	r0, [r7, #12]
 801b63c:	60b9      	str	r1, [r7, #8]
 801b63e:	607a      	str	r2, [r7, #4]
 801b640:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 801b642:	f107 0310 	add.w	r3, r7, #16
 801b646:	68b9      	ldr	r1, [r7, #8]
 801b648:	4618      	mov	r0, r3
 801b64a:	f7ff f823 	bl	801a694 <pb_field_iter_begin_extension>
 801b64e:	4603      	mov	r3, r0
 801b650:	f083 0301 	eor.w	r3, r3, #1
 801b654:	b2db      	uxtb	r3, r3
 801b656:	2b00      	cmp	r3, #0
 801b658:	d00b      	beq.n	801b672 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	68db      	ldr	r3, [r3, #12]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d002      	beq.n	801b668 <default_extension_decoder+0x34>
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	68db      	ldr	r3, [r3, #12]
 801b666:	e000      	b.n	801b66a <default_extension_decoder+0x36>
 801b668:	4b0e      	ldr	r3, [pc, #56]	; (801b6a4 <default_extension_decoder+0x70>)
 801b66a:	68fa      	ldr	r2, [r7, #12]
 801b66c:	60d3      	str	r3, [r2, #12]
 801b66e:	2300      	movs	r3, #0
 801b670:	e014      	b.n	801b69c <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 801b672:	8c3b      	ldrh	r3, [r7, #32]
 801b674:	461a      	mov	r2, r3
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	4293      	cmp	r3, r2
 801b67a:	d102      	bne.n	801b682 <default_extension_decoder+0x4e>
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d101      	bne.n	801b686 <default_extension_decoder+0x52>
        return true;
 801b682:	2301      	movs	r3, #1
 801b684:	e00a      	b.n	801b69c <default_extension_decoder+0x68>

    extension->found = true;
 801b686:	68bb      	ldr	r3, [r7, #8]
 801b688:	2201      	movs	r2, #1
 801b68a:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 801b68c:	f107 0210 	add.w	r2, r7, #16
 801b690:	78fb      	ldrb	r3, [r7, #3]
 801b692:	4619      	mov	r1, r3
 801b694:	68f8      	ldr	r0, [r7, #12]
 801b696:	f7ff ff8f 	bl	801b5b8 <decode_field>
 801b69a:	4603      	mov	r3, r0
}
 801b69c:	4618      	mov	r0, r3
 801b69e:	3738      	adds	r7, #56	; 0x38
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bd80      	pop	{r7, pc}
 801b6a4:	08021fb8 	.word	0x08021fb8

0801b6a8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 801b6a8:	b590      	push	{r4, r7, lr}
 801b6aa:	b087      	sub	sp, #28
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	60f8      	str	r0, [r7, #12]
 801b6b0:	60b9      	str	r1, [r7, #8]
 801b6b2:	603b      	str	r3, [r7, #0]
 801b6b4:	4613      	mov	r3, r2
 801b6b6:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	689b      	ldr	r3, [r3, #8]
 801b6bc:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 801b6be:	e022      	b.n	801b706 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 801b6c0:	683b      	ldr	r3, [r7, #0]
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d00a      	beq.n	801b6e0 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 801b6ca:	683b      	ldr	r3, [r7, #0]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	681c      	ldr	r4, [r3, #0]
 801b6d0:	79fb      	ldrb	r3, [r7, #7]
 801b6d2:	68ba      	ldr	r2, [r7, #8]
 801b6d4:	6839      	ldr	r1, [r7, #0]
 801b6d6:	68f8      	ldr	r0, [r7, #12]
 801b6d8:	47a0      	blx	r4
 801b6da:	4603      	mov	r3, r0
 801b6dc:	75fb      	strb	r3, [r7, #23]
 801b6de:	e007      	b.n	801b6f0 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 801b6e0:	79fb      	ldrb	r3, [r7, #7]
 801b6e2:	68ba      	ldr	r2, [r7, #8]
 801b6e4:	6839      	ldr	r1, [r7, #0]
 801b6e6:	68f8      	ldr	r0, [r7, #12]
 801b6e8:	f7ff ffa4 	bl	801b634 <default_extension_decoder>
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	75fb      	strb	r3, [r7, #23]

        if (!status)
 801b6f0:	7dfb      	ldrb	r3, [r7, #23]
 801b6f2:	f083 0301 	eor.w	r3, r3, #1
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d001      	beq.n	801b700 <decode_extension+0x58>
            return false;
 801b6fc:	2300      	movs	r3, #0
 801b6fe:	e00b      	b.n	801b718 <decode_extension+0x70>
        
        extension = extension->next;
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	689b      	ldr	r3, [r3, #8]
 801b704:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 801b706:	683b      	ldr	r3, [r7, #0]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d004      	beq.n	801b716 <decode_extension+0x6e>
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	689b      	ldr	r3, [r3, #8]
 801b710:	693a      	ldr	r2, [r7, #16]
 801b712:	429a      	cmp	r2, r3
 801b714:	d0d4      	beq.n	801b6c0 <decode_extension+0x18>
    }
    
    return true;
 801b716:	2301      	movs	r3, #1
}
 801b718:	4618      	mov	r0, r3
 801b71a:	371c      	adds	r7, #28
 801b71c:	46bd      	mov	sp, r7
 801b71e:	bd90      	pop	{r4, r7, pc}

0801b720 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 801b720:	b580      	push	{r7, lr}
 801b722:	b08e      	sub	sp, #56	; 0x38
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	7d9b      	ldrb	r3, [r3, #22]
 801b72c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 801b730:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b734:	f003 030f 	and.w	r3, r3, #15
 801b738:	2b0a      	cmp	r3, #10
 801b73a:	d124      	bne.n	801b786 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	69db      	ldr	r3, [r3, #28]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 801b744:	e01b      	b.n	801b77e <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 801b746:	f107 0308 	add.w	r3, r7, #8
 801b74a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b74c:	4618      	mov	r0, r3
 801b74e:	f7fe ffa1 	bl	801a694 <pb_field_iter_begin_extension>
 801b752:	4603      	mov	r3, r0
 801b754:	2b00      	cmp	r3, #0
 801b756:	d00f      	beq.n	801b778 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 801b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b75a:	2200      	movs	r2, #0
 801b75c:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 801b75e:	f107 0308 	add.w	r3, r7, #8
 801b762:	4618      	mov	r0, r3
 801b764:	f000 f89d 	bl	801b8a2 <pb_message_set_to_defaults>
 801b768:	4603      	mov	r3, r0
 801b76a:	f083 0301 	eor.w	r3, r3, #1
 801b76e:	b2db      	uxtb	r3, r3
 801b770:	2b00      	cmp	r3, #0
 801b772:	d001      	beq.n	801b778 <pb_field_set_to_default+0x58>
                    return false;
 801b774:	2300      	movs	r3, #0
 801b776:	e090      	b.n	801b89a <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 801b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b77a:	689b      	ldr	r3, [r3, #8]
 801b77c:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 801b77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b780:	2b00      	cmp	r3, #0
 801b782:	d1e0      	bne.n	801b746 <pb_field_set_to_default+0x26>
 801b784:	e088      	b.n	801b898 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 801b786:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b78a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d166      	bne.n	801b860 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 801b792:	2301      	movs	r3, #1
 801b794:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 801b798:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b79c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b7a0:	2b10      	cmp	r3, #16
 801b7a2:	d108      	bne.n	801b7b6 <pb_field_set_to_default+0x96>
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	6a1b      	ldr	r3, [r3, #32]
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d004      	beq.n	801b7b6 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	6a1b      	ldr	r3, [r3, #32]
 801b7b0:	2200      	movs	r2, #0
 801b7b2:	701a      	strb	r2, [r3, #0]
 801b7b4:	e012      	b.n	801b7dc <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b7b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b7ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b7be:	2b20      	cmp	r3, #32
 801b7c0:	d005      	beq.n	801b7ce <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801b7c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b7c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b7ca:	2b30      	cmp	r3, #48	; 0x30
 801b7cc:	d106      	bne.n	801b7dc <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	6a1b      	ldr	r3, [r3, #32]
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	801a      	strh	r2, [r3, #0]
            init_data = false;
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 801b7dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d059      	beq.n	801b898 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	7d9b      	ldrb	r3, [r3, #22]
 801b7e8:	f003 030f 	and.w	r3, r3, #15
 801b7ec:	2b08      	cmp	r3, #8
 801b7ee:	d005      	beq.n	801b7fc <pb_field_set_to_default+0xdc>
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	7d9b      	ldrb	r3, [r3, #22]
 801b7f4:	f003 030f 	and.w	r3, r3, #15
 801b7f8:	2b09      	cmp	r3, #9
 801b7fa:	d128      	bne.n	801b84e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b800:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 801b802:	2b00      	cmp	r3, #0
 801b804:	d10a      	bne.n	801b81c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b80a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d105      	bne.n	801b81c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b814:	685b      	ldr	r3, [r3, #4]
 801b816:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d018      	beq.n	801b84e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	69da      	ldr	r2, [r3, #28]
 801b824:	f107 0308 	add.w	r3, r7, #8
 801b828:	4618      	mov	r0, r3
 801b82a:	f7fe ff1a 	bl	801a662 <pb_field_iter_begin>
 801b82e:	4603      	mov	r3, r0
 801b830:	2b00      	cmp	r3, #0
 801b832:	d030      	beq.n	801b896 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 801b834:	f107 0308 	add.w	r3, r7, #8
 801b838:	4618      	mov	r0, r3
 801b83a:	f000 f832 	bl	801b8a2 <pb_message_set_to_defaults>
 801b83e:	4603      	mov	r3, r0
 801b840:	f083 0301 	eor.w	r3, r3, #1
 801b844:	b2db      	uxtb	r3, r3
 801b846:	2b00      	cmp	r3, #0
 801b848:	d025      	beq.n	801b896 <pb_field_set_to_default+0x176>
                        return false;
 801b84a:	2300      	movs	r3, #0
 801b84c:	e025      	b.n	801b89a <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	69d8      	ldr	r0, [r3, #28]
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	8a5b      	ldrh	r3, [r3, #18]
 801b856:	461a      	mov	r2, r3
 801b858:	2100      	movs	r1, #0
 801b85a:	f001 ff31 	bl	801d6c0 <memset>
 801b85e:	e01b      	b.n	801b898 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 801b860:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b864:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b868:	2b80      	cmp	r3, #128	; 0x80
 801b86a:	d115      	bne.n	801b898 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	699b      	ldr	r3, [r3, #24]
 801b870:	2200      	movs	r2, #0
 801b872:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b874:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b878:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b87c:	2b20      	cmp	r3, #32
 801b87e:	d005      	beq.n	801b88c <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801b880:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801b884:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 801b888:	2b30      	cmp	r3, #48	; 0x30
 801b88a:	d105      	bne.n	801b898 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	6a1b      	ldr	r3, [r3, #32]
 801b890:	2200      	movs	r2, #0
 801b892:	801a      	strh	r2, [r3, #0]
 801b894:	e000      	b.n	801b898 <pb_field_set_to_default+0x178>
            {
 801b896:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 801b898:	2301      	movs	r3, #1
}
 801b89a:	4618      	mov	r0, r3
 801b89c:	3738      	adds	r7, #56	; 0x38
 801b89e:	46bd      	mov	sp, r7
 801b8a0:	bd80      	pop	{r7, pc}

0801b8a2 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 801b8a2:	b590      	push	{r4, r7, lr}
 801b8a4:	b08d      	sub	sp, #52	; 0x34
 801b8a6:	af00      	add	r7, sp, #0
 801b8a8:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 801b8aa:	f107 0320 	add.w	r3, r7, #32
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	601a      	str	r2, [r3, #0]
 801b8b2:	605a      	str	r2, [r3, #4]
 801b8b4:	609a      	str	r2, [r3, #8]
 801b8b6:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 801b8bc:	2300      	movs	r3, #0
 801b8be:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	689b      	ldr	r3, [r3, #8]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d020      	beq.n	801b90c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 801b8ca:	697b      	ldr	r3, [r7, #20]
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	6899      	ldr	r1, [r3, #8]
 801b8d0:	463b      	mov	r3, r7
 801b8d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	f7ff f8e0 	bl	801aa9c <pb_istream_from_buffer>
 801b8dc:	f107 0420 	add.w	r4, r7, #32
 801b8e0:	463b      	mov	r3, r7
 801b8e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b8e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 801b8e8:	f107 031a 	add.w	r3, r7, #26
 801b8ec:	f107 021c 	add.w	r2, r7, #28
 801b8f0:	f107 011b 	add.w	r1, r7, #27
 801b8f4:	f107 0020 	add.w	r0, r7, #32
 801b8f8:	f7ff fa47 	bl	801ad8a <pb_decode_tag>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	f083 0301 	eor.w	r3, r3, #1
 801b902:	b2db      	uxtb	r3, r3
 801b904:	2b00      	cmp	r3, #0
 801b906:	d001      	beq.n	801b90c <pb_message_set_to_defaults+0x6a>
            return false;
 801b908:	2300      	movs	r3, #0
 801b90a:	e043      	b.n	801b994 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 801b90c:	6978      	ldr	r0, [r7, #20]
 801b90e:	f7ff ff07 	bl	801b720 <pb_field_set_to_default>
 801b912:	4603      	mov	r3, r0
 801b914:	f083 0301 	eor.w	r3, r3, #1
 801b918:	b2db      	uxtb	r3, r3
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d001      	beq.n	801b922 <pb_message_set_to_defaults+0x80>
            return false;
 801b91e:	2300      	movs	r3, #0
 801b920:	e038      	b.n	801b994 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 801b922:	69fb      	ldr	r3, [r7, #28]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d02e      	beq.n	801b986 <pb_message_set_to_defaults+0xe4>
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	8a1b      	ldrh	r3, [r3, #16]
 801b92c:	461a      	mov	r2, r3
 801b92e:	69fb      	ldr	r3, [r7, #28]
 801b930:	429a      	cmp	r2, r3
 801b932:	d128      	bne.n	801b986 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 801b934:	7ef9      	ldrb	r1, [r7, #27]
 801b936:	f107 0320 	add.w	r3, r7, #32
 801b93a:	697a      	ldr	r2, [r7, #20]
 801b93c:	4618      	mov	r0, r3
 801b93e:	f7ff fe3b 	bl	801b5b8 <decode_field>
 801b942:	4603      	mov	r3, r0
 801b944:	f083 0301 	eor.w	r3, r3, #1
 801b948:	b2db      	uxtb	r3, r3
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d001      	beq.n	801b952 <pb_message_set_to_defaults+0xb0>
                return false;
 801b94e:	2300      	movs	r3, #0
 801b950:	e020      	b.n	801b994 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 801b952:	f107 031a 	add.w	r3, r7, #26
 801b956:	f107 021c 	add.w	r2, r7, #28
 801b95a:	f107 011b 	add.w	r1, r7, #27
 801b95e:	f107 0020 	add.w	r0, r7, #32
 801b962:	f7ff fa12 	bl	801ad8a <pb_decode_tag>
 801b966:	4603      	mov	r3, r0
 801b968:	f083 0301 	eor.w	r3, r3, #1
 801b96c:	b2db      	uxtb	r3, r3
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d001      	beq.n	801b976 <pb_message_set_to_defaults+0xd4>
                return false;
 801b972:	2300      	movs	r3, #0
 801b974:	e00e      	b.n	801b994 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 801b976:	697b      	ldr	r3, [r7, #20]
 801b978:	6a1b      	ldr	r3, [r3, #32]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d003      	beq.n	801b986 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 801b97e:	697b      	ldr	r3, [r7, #20]
 801b980:	6a1b      	ldr	r3, [r3, #32]
 801b982:	2200      	movs	r2, #0
 801b984:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 801b986:	6978      	ldr	r0, [r7, #20]
 801b988:	f7fe feb4 	bl	801a6f4 <pb_field_iter_next>
 801b98c:	4603      	mov	r3, r0
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d1bc      	bne.n	801b90c <pb_message_set_to_defaults+0x6a>

    return true;
 801b992:	2301      	movs	r3, #1
}
 801b994:	4618      	mov	r0, r3
 801b996:	3734      	adds	r7, #52	; 0x34
 801b998:	46bd      	mov	sp, r7
 801b99a:	bd90      	pop	{r4, r7, pc}

0801b99c <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 801b99c:	b580      	push	{r7, lr}
 801b99e:	b09a      	sub	sp, #104	; 0x68
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	60f8      	str	r0, [r7, #12]
 801b9a4:	60b9      	str	r1, [r7, #8]
 801b9a6:	607a      	str	r2, [r7, #4]
 801b9a8:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 801b9b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b9b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	643b      	str	r3, [r7, #64]	; 0x40
 801b9ca:	2300      	movs	r3, #0
 801b9cc:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 801b9ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b9d2:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 801b9d4:	f107 0318 	add.w	r3, r7, #24
 801b9d8:	687a      	ldr	r2, [r7, #4]
 801b9da:	68b9      	ldr	r1, [r7, #8]
 801b9dc:	4618      	mov	r0, r3
 801b9de:	f7fe fe40 	bl	801a662 <pb_field_iter_begin>
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	f000 8102 	beq.w	801bbee <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	f003 0301 	and.w	r3, r3, #1
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	f040 80fc 	bne.w	801bbee <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 801b9f6:	f107 0318 	add.w	r3, r7, #24
 801b9fa:	4618      	mov	r0, r3
 801b9fc:	f7ff ff51 	bl	801b8a2 <pb_message_set_to_defaults>
 801ba00:	4603      	mov	r3, r0
 801ba02:	f083 0301 	eor.w	r3, r3, #1
 801ba06:	b2db      	uxtb	r3, r3
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	f000 80f0 	beq.w	801bbee <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	68db      	ldr	r3, [r3, #12]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d002      	beq.n	801ba1c <pb_decode_inner+0x80>
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	68db      	ldr	r3, [r3, #12]
 801ba1a:	e000      	b.n	801ba1e <pb_decode_inner+0x82>
 801ba1c:	4b99      	ldr	r3, [pc, #612]	; (801bc84 <pb_decode_inner+0x2e8>)
 801ba1e:	68fa      	ldr	r2, [r7, #12]
 801ba20:	60d3      	str	r3, [r2, #12]
 801ba22:	2300      	movs	r3, #0
 801ba24:	e16d      	b.n	801bd02 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 801ba26:	f107 0312 	add.w	r3, r7, #18
 801ba2a:	f107 0214 	add.w	r2, r7, #20
 801ba2e:	f107 0113 	add.w	r1, r7, #19
 801ba32:	68f8      	ldr	r0, [r7, #12]
 801ba34:	f7ff f9a9 	bl	801ad8a <pb_decode_tag>
 801ba38:	4603      	mov	r3, r0
 801ba3a:	f083 0301 	eor.w	r3, r3, #1
 801ba3e:	b2db      	uxtb	r3, r3
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d005      	beq.n	801ba50 <pb_decode_inner+0xb4>
        {
            if (eof)
 801ba44:	7cbb      	ldrb	r3, [r7, #18]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	f040 80d7 	bne.w	801bbfa <pb_decode_inner+0x25e>
                break;
            else
                return false;
 801ba4c:	2300      	movs	r3, #0
 801ba4e:	e158      	b.n	801bd02 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 801ba50:	697b      	ldr	r3, [r7, #20]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d111      	bne.n	801ba7a <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 801ba56:	683b      	ldr	r3, [r7, #0]
 801ba58:	f003 0304 	and.w	r3, r3, #4
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	f040 80ce 	bne.w	801bbfe <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	68db      	ldr	r3, [r3, #12]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d002      	beq.n	801ba70 <pb_decode_inner+0xd4>
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	68db      	ldr	r3, [r3, #12]
 801ba6e:	e000      	b.n	801ba72 <pb_decode_inner+0xd6>
 801ba70:	4b85      	ldr	r3, [pc, #532]	; (801bc88 <pb_decode_inner+0x2ec>)
 801ba72:	68fa      	ldr	r2, [r7, #12]
 801ba74:	60d3      	str	r3, [r2, #12]
 801ba76:	2300      	movs	r3, #0
 801ba78:	e143      	b.n	801bd02 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 801ba7a:	697a      	ldr	r2, [r7, #20]
 801ba7c:	f107 0318 	add.w	r3, r7, #24
 801ba80:	4611      	mov	r1, r2
 801ba82:	4618      	mov	r0, r3
 801ba84:	f7fe fe4b 	bl	801a71e <pb_field_iter_find>
 801ba88:	4603      	mov	r3, r0
 801ba8a:	f083 0301 	eor.w	r3, r3, #1
 801ba8e:	b2db      	uxtb	r3, r3
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d105      	bne.n	801baa0 <pb_decode_inner+0x104>
 801ba94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801ba98:	f003 030f 	and.w	r3, r3, #15
 801ba9c:	2b0a      	cmp	r3, #10
 801ba9e:	d13c      	bne.n	801bb1a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 801baa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d112      	bne.n	801bacc <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 801baa6:	f107 0318 	add.w	r3, r7, #24
 801baaa:	4618      	mov	r0, r3
 801baac:	f7fe fe8d 	bl	801a7ca <pb_field_iter_find_extension>
 801bab0:	4603      	mov	r3, r0
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d004      	beq.n	801bac0 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 801bab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 801babc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801babe:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 801bac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d102      	bne.n	801bacc <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 801bac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801baca:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 801bacc:	697b      	ldr	r3, [r7, #20]
 801bace:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801bad0:	429a      	cmp	r2, r3
 801bad2:	d815      	bhi.n	801bb00 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	689b      	ldr	r3, [r3, #8]
 801bad8:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 801bada:	6979      	ldr	r1, [r7, #20]
 801badc:	7cfa      	ldrb	r2, [r7, #19]
 801bade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bae0:	68f8      	ldr	r0, [r7, #12]
 801bae2:	f7ff fde1 	bl	801b6a8 <decode_extension>
 801bae6:	4603      	mov	r3, r0
 801bae8:	f083 0301 	eor.w	r3, r3, #1
 801baec:	b2db      	uxtb	r3, r3
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d001      	beq.n	801baf6 <pb_decode_inner+0x15a>
                    return false;
 801baf2:	2300      	movs	r3, #0
 801baf4:	e105      	b.n	801bd02 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	689b      	ldr	r3, [r3, #8]
 801bafa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bafc:	429a      	cmp	r2, r3
 801bafe:	d173      	bne.n	801bbe8 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 801bb00:	7cfb      	ldrb	r3, [r7, #19]
 801bb02:	4619      	mov	r1, r3
 801bb04:	68f8      	ldr	r0, [r7, #12]
 801bb06:	f7ff f96f 	bl	801ade8 <pb_skip_field>
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	f083 0301 	eor.w	r3, r3, #1
 801bb10:	b2db      	uxtb	r3, r3
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d06a      	beq.n	801bbec <pb_decode_inner+0x250>
                return false;
 801bb16:	2300      	movs	r3, #0
 801bb18:	e0f3      	b.n	801bd02 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 801bb1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801bb1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bb22:	2b20      	cmp	r3, #32
 801bb24:	d12e      	bne.n	801bb84 <pb_decode_inner+0x1e8>
 801bb26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bb28:	f107 0318 	add.w	r3, r7, #24
 801bb2c:	3314      	adds	r3, #20
 801bb2e:	429a      	cmp	r2, r3
 801bb30:	d128      	bne.n	801bb84 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 801bb32:	8c3b      	ldrh	r3, [r7, #32]
 801bb34:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801bb38:	429a      	cmp	r2, r3
 801bb3a:	d020      	beq.n	801bb7e <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 801bb3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801bb40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb44:	4293      	cmp	r3, r2
 801bb46:	d011      	beq.n	801bb6c <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 801bb48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 801bb4c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801bb50:	429a      	cmp	r2, r3
 801bb52:	d00b      	beq.n	801bb6c <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	68db      	ldr	r3, [r3, #12]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d002      	beq.n	801bb62 <pb_decode_inner+0x1c6>
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	68db      	ldr	r3, [r3, #12]
 801bb60:	e000      	b.n	801bb64 <pb_decode_inner+0x1c8>
 801bb62:	4b4a      	ldr	r3, [pc, #296]	; (801bc8c <pb_decode_inner+0x2f0>)
 801bb64:	68fa      	ldr	r2, [r7, #12]
 801bb66:	60d3      	str	r3, [r2, #12]
 801bb68:	2300      	movs	r3, #0
 801bb6a:	e0ca      	b.n	801bd02 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 801bb6c:	8c3b      	ldrh	r3, [r7, #32]
 801bb6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 801bb72:	2300      	movs	r3, #0
 801bb74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 801bb78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bb7a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 801bb7e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 801bb82:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 801bb84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801bb88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d11c      	bne.n	801bbca <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 801bb90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb92:	2b3f      	cmp	r3, #63	; 0x3f
 801bb94:	d819      	bhi.n	801bbca <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 801bb96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb98:	f003 031f 	and.w	r3, r3, #31
 801bb9c:	2201      	movs	r2, #1
 801bb9e:	fa02 f303 	lsl.w	r3, r2, r3
 801bba2:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 801bba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bba6:	095b      	lsrs	r3, r3, #5
 801bba8:	b29b      	uxth	r3, r3
 801bbaa:	009b      	lsls	r3, r3, #2
 801bbac:	3368      	adds	r3, #104	; 0x68
 801bbae:	443b      	add	r3, r7
 801bbb0:	f853 2c28 	ldr.w	r2, [r3, #-40]
 801bbb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbb6:	095b      	lsrs	r3, r3, #5
 801bbb8:	b29b      	uxth	r3, r3
 801bbba:	4619      	mov	r1, r3
 801bbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbbe:	431a      	orrs	r2, r3
 801bbc0:	008b      	lsls	r3, r1, #2
 801bbc2:	3368      	adds	r3, #104	; 0x68
 801bbc4:	443b      	add	r3, r7
 801bbc6:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 801bbca:	7cfb      	ldrb	r3, [r7, #19]
 801bbcc:	f107 0218 	add.w	r2, r7, #24
 801bbd0:	4619      	mov	r1, r3
 801bbd2:	68f8      	ldr	r0, [r7, #12]
 801bbd4:	f7ff fcf0 	bl	801b5b8 <decode_field>
 801bbd8:	4603      	mov	r3, r0
 801bbda:	f083 0301 	eor.w	r3, r3, #1
 801bbde:	b2db      	uxtb	r3, r3
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d004      	beq.n	801bbee <pb_decode_inner+0x252>
            return false;
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	e08c      	b.n	801bd02 <pb_decode_inner+0x366>
                    continue;
 801bbe8:	bf00      	nop
 801bbea:	e000      	b.n	801bbee <pb_decode_inner+0x252>
            continue;
 801bbec:	bf00      	nop
    while (stream->bytes_left)
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	689b      	ldr	r3, [r3, #8]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	f47f af17 	bne.w	801ba26 <pb_decode_inner+0x8a>
 801bbf8:	e002      	b.n	801bc00 <pb_decode_inner+0x264>
                break;
 801bbfa:	bf00      	nop
 801bbfc:	e000      	b.n	801bc00 <pb_decode_inner+0x264>
            break;
 801bbfe:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 801bc00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801bc04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc08:	4293      	cmp	r3, r2
 801bc0a:	d011      	beq.n	801bc30 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 801bc0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 801bc10:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801bc14:	429a      	cmp	r2, r3
 801bc16:	d00b      	beq.n	801bc30 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	68db      	ldr	r3, [r3, #12]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d002      	beq.n	801bc26 <pb_decode_inner+0x28a>
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	68db      	ldr	r3, [r3, #12]
 801bc24:	e000      	b.n	801bc28 <pb_decode_inner+0x28c>
 801bc26:	4b19      	ldr	r3, [pc, #100]	; (801bc8c <pb_decode_inner+0x2f0>)
 801bc28:	68fa      	ldr	r2, [r7, #12]
 801bc2a:	60d3      	str	r3, [r2, #12]
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	e068      	b.n	801bd02 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 801bc30:	69bb      	ldr	r3, [r7, #24]
 801bc32:	8a5b      	ldrh	r3, [r3, #18]
 801bc34:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 801bc38:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d05f      	beq.n	801bd00 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 801bc40:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bc44:	2b40      	cmp	r3, #64	; 0x40
 801bc46:	d902      	bls.n	801bc4e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 801bc48:	2340      	movs	r3, #64	; 0x40
 801bc4a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 801bc4e:	2300      	movs	r3, #0
 801bc50:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801bc54:	e023      	b.n	801bc9e <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 801bc56:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801bc5a:	009b      	lsls	r3, r3, #2
 801bc5c:	3368      	adds	r3, #104	; 0x68
 801bc5e:	443b      	add	r3, r7
 801bc60:	f853 3c28 	ldr.w	r3, [r3, #-40]
 801bc64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bc66:	429a      	cmp	r2, r3
 801bc68:	d014      	beq.n	801bc94 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	68db      	ldr	r3, [r3, #12]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d002      	beq.n	801bc78 <pb_decode_inner+0x2dc>
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	68db      	ldr	r3, [r3, #12]
 801bc76:	e000      	b.n	801bc7a <pb_decode_inner+0x2de>
 801bc78:	4b05      	ldr	r3, [pc, #20]	; (801bc90 <pb_decode_inner+0x2f4>)
 801bc7a:	68fa      	ldr	r2, [r7, #12]
 801bc7c:	60d3      	str	r3, [r2, #12]
 801bc7e:	2300      	movs	r3, #0
 801bc80:	e03f      	b.n	801bd02 <pb_decode_inner+0x366>
 801bc82:	bf00      	nop
 801bc84:	08021f7c 	.word	0x08021f7c
 801bc88:	08021fcc 	.word	0x08021fcc
 801bc8c:	08021fd8 	.word	0x08021fd8
 801bc90:	08021ffc 	.word	0x08021ffc
            for (i = 0; i < (req_field_count >> 5); i++)
 801bc94:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801bc98:	3301      	adds	r3, #1
 801bc9a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801bc9e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bca2:	095b      	lsrs	r3, r3, #5
 801bca4:	b29b      	uxth	r3, r3
 801bca6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d3d3      	bcc.n	801bc56 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 801bcae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bcb2:	f003 031f 	and.w	r3, r3, #31
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d022      	beq.n	801bd00 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 801bcba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bcbe:	095b      	lsrs	r3, r3, #5
 801bcc0:	b29b      	uxth	r3, r3
 801bcc2:	009b      	lsls	r3, r3, #2
 801bcc4:	3368      	adds	r3, #104	; 0x68
 801bcc6:	443b      	add	r3, r7
 801bcc8:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 801bccc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801bcd0:	b2db      	uxtb	r3, r3
 801bcd2:	f003 031f 	and.w	r3, r3, #31
 801bcd6:	b2db      	uxtb	r3, r3
 801bcd8:	f1c3 0320 	rsb	r3, r3, #32
 801bcdc:	b2db      	uxtb	r3, r3
 801bcde:	4619      	mov	r1, r3
 801bce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bce2:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 801bce4:	429a      	cmp	r2, r3
 801bce6:	d00b      	beq.n	801bd00 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	68db      	ldr	r3, [r3, #12]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d002      	beq.n	801bcf6 <pb_decode_inner+0x35a>
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	68db      	ldr	r3, [r3, #12]
 801bcf4:	e000      	b.n	801bcf8 <pb_decode_inner+0x35c>
 801bcf6:	4b05      	ldr	r3, [pc, #20]	; (801bd0c <pb_decode_inner+0x370>)
 801bcf8:	68fa      	ldr	r2, [r7, #12]
 801bcfa:	60d3      	str	r3, [r2, #12]
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	e000      	b.n	801bd02 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 801bd00:	2301      	movs	r3, #1
}
 801bd02:	4618      	mov	r0, r3
 801bd04:	3768      	adds	r7, #104	; 0x68
 801bd06:	46bd      	mov	sp, r7
 801bd08:	bd80      	pop	{r7, pc}
 801bd0a:	bf00      	nop
 801bd0c:	08021ffc 	.word	0x08021ffc

0801bd10 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b086      	sub	sp, #24
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	60f8      	str	r0, [r7, #12]
 801bd18:	60b9      	str	r1, [r7, #8]
 801bd1a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	687a      	ldr	r2, [r7, #4]
 801bd20:	68b9      	ldr	r1, [r7, #8]
 801bd22:	68f8      	ldr	r0, [r7, #12]
 801bd24:	f7ff fe3a 	bl	801b99c <pb_decode_inner>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 801bd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd2e:	4618      	mov	r0, r3
 801bd30:	3718      	adds	r7, #24
 801bd32:	46bd      	mov	sp, r7
 801bd34:	bd80      	pop	{r7, pc}

0801bd36 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 801bd36:	b580      	push	{r7, lr}
 801bd38:	b084      	sub	sp, #16
 801bd3a:	af00      	add	r7, sp, #0
 801bd3c:	6078      	str	r0, [r7, #4]
 801bd3e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 801bd40:	f107 030c 	add.w	r3, r7, #12
 801bd44:	4619      	mov	r1, r3
 801bd46:	6878      	ldr	r0, [r7, #4]
 801bd48:	f7fe ff70 	bl	801ac2c <pb_decode_varint32>
 801bd4c:	4603      	mov	r3, r0
 801bd4e:	f083 0301 	eor.w	r3, r3, #1
 801bd52:	b2db      	uxtb	r3, r3
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d001      	beq.n	801bd5c <pb_decode_bool+0x26>
        return false;
 801bd58:	2300      	movs	r3, #0
 801bd5a:	e008      	b.n	801bd6e <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	bf14      	ite	ne
 801bd62:	2301      	movne	r3, #1
 801bd64:	2300      	moveq	r3, #0
 801bd66:	b2da      	uxtb	r2, r3
 801bd68:	683b      	ldr	r3, [r7, #0]
 801bd6a:	701a      	strb	r2, [r3, #0]
    return true;
 801bd6c:	2301      	movs	r3, #1
}
 801bd6e:	4618      	mov	r0, r3
 801bd70:	3710      	adds	r7, #16
 801bd72:	46bd      	mov	sp, r7
 801bd74:	bd80      	pop	{r7, pc}

0801bd76 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 801bd76:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bd7a:	b084      	sub	sp, #16
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	6078      	str	r0, [r7, #4]
 801bd80:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 801bd82:	f107 0308 	add.w	r3, r7, #8
 801bd86:	4619      	mov	r1, r3
 801bd88:	6878      	ldr	r0, [r7, #4]
 801bd8a:	f7fe ff5f 	bl	801ac4c <pb_decode_varint>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	f083 0301 	eor.w	r3, r3, #1
 801bd94:	b2db      	uxtb	r3, r3
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d001      	beq.n	801bd9e <pb_decode_svarint+0x28>
        return false;
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	e029      	b.n	801bdf2 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 801bd9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bda2:	f002 0401 	and.w	r4, r2, #1
 801bda6:	2500      	movs	r5, #0
 801bda8:	ea54 0305 	orrs.w	r3, r4, r5
 801bdac:	d013      	beq.n	801bdd6 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 801bdae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bdb2:	f04f 0200 	mov.w	r2, #0
 801bdb6:	f04f 0300 	mov.w	r3, #0
 801bdba:	0842      	lsrs	r2, r0, #1
 801bdbc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801bdc0:	084b      	lsrs	r3, r1, #1
 801bdc2:	ea6f 0802 	mvn.w	r8, r2
 801bdc6:	ea6f 0903 	mvn.w	r9, r3
 801bdca:	4642      	mov	r2, r8
 801bdcc:	464b      	mov	r3, r9
 801bdce:	6839      	ldr	r1, [r7, #0]
 801bdd0:	e9c1 2300 	strd	r2, r3, [r1]
 801bdd4:	e00c      	b.n	801bdf0 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 801bdd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bdda:	f04f 0200 	mov.w	r2, #0
 801bdde:	f04f 0300 	mov.w	r3, #0
 801bde2:	0842      	lsrs	r2, r0, #1
 801bde4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801bde8:	084b      	lsrs	r3, r1, #1
 801bdea:	6839      	ldr	r1, [r7, #0]
 801bdec:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 801bdf0:	2301      	movs	r3, #1
}
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	3710      	adds	r7, #16
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801bdfc <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 801bdfc:	b580      	push	{r7, lr}
 801bdfe:	b084      	sub	sp, #16
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
 801be04:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 801be06:	f107 030c 	add.w	r3, r7, #12
 801be0a:	2204      	movs	r2, #4
 801be0c:	4619      	mov	r1, r3
 801be0e:	6878      	ldr	r0, [r7, #4]
 801be10:	f7fe fd92 	bl	801a938 <pb_read>
 801be14:	4603      	mov	r3, r0
 801be16:	f083 0301 	eor.w	r3, r3, #1
 801be1a:	b2db      	uxtb	r3, r3
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d001      	beq.n	801be24 <pb_decode_fixed32+0x28>
        return false;
 801be20:	2300      	movs	r3, #0
 801be22:	e003      	b.n	801be2c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 801be24:	68fa      	ldr	r2, [r7, #12]
 801be26:	683b      	ldr	r3, [r7, #0]
 801be28:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 801be2a:	2301      	movs	r3, #1
}
 801be2c:	4618      	mov	r0, r3
 801be2e:	3710      	adds	r7, #16
 801be30:	46bd      	mov	sp, r7
 801be32:	bd80      	pop	{r7, pc}

0801be34 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b084      	sub	sp, #16
 801be38:	af00      	add	r7, sp, #0
 801be3a:	6078      	str	r0, [r7, #4]
 801be3c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 801be3e:	f107 0308 	add.w	r3, r7, #8
 801be42:	2208      	movs	r2, #8
 801be44:	4619      	mov	r1, r3
 801be46:	6878      	ldr	r0, [r7, #4]
 801be48:	f7fe fd76 	bl	801a938 <pb_read>
 801be4c:	4603      	mov	r3, r0
 801be4e:	f083 0301 	eor.w	r3, r3, #1
 801be52:	b2db      	uxtb	r3, r3
 801be54:	2b00      	cmp	r3, #0
 801be56:	d001      	beq.n	801be5c <pb_decode_fixed64+0x28>
        return false;
 801be58:	2300      	movs	r3, #0
 801be5a:	e005      	b.n	801be68 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 801be5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801be60:	6839      	ldr	r1, [r7, #0]
 801be62:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 801be66:	2301      	movs	r3, #1
}
 801be68:	4618      	mov	r0, r3
 801be6a:	3710      	adds	r7, #16
 801be6c:	46bd      	mov	sp, r7
 801be6e:	bd80      	pop	{r7, pc}

0801be70 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801be70:	b580      	push	{r7, lr}
 801be72:	b082      	sub	sp, #8
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
 801be78:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 801be7a:	683b      	ldr	r3, [r7, #0]
 801be7c:	69db      	ldr	r3, [r3, #28]
 801be7e:	4619      	mov	r1, r3
 801be80:	6878      	ldr	r0, [r7, #4]
 801be82:	f7ff ff58 	bl	801bd36 <pb_decode_bool>
 801be86:	4603      	mov	r3, r0
}
 801be88:	4618      	mov	r0, r3
 801be8a:	3708      	adds	r7, #8
 801be8c:	46bd      	mov	sp, r7
 801be8e:	bd80      	pop	{r7, pc}

0801be90 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801be90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801be94:	b094      	sub	sp, #80	; 0x50
 801be96:	af00      	add	r7, sp, #0
 801be98:	6278      	str	r0, [r7, #36]	; 0x24
 801be9a:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 801be9c:	6a3b      	ldr	r3, [r7, #32]
 801be9e:	7d9b      	ldrb	r3, [r3, #22]
 801bea0:	f003 030f 	and.w	r3, r3, #15
 801bea4:	2b02      	cmp	r3, #2
 801bea6:	d179      	bne.n	801bf9c <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 801bea8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801beac:	4619      	mov	r1, r3
 801beae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801beb0:	f7fe fecc 	bl	801ac4c <pb_decode_varint>
 801beb4:	4603      	mov	r3, r0
 801beb6:	f083 0301 	eor.w	r3, r3, #1
 801beba:	b2db      	uxtb	r3, r3
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d001      	beq.n	801bec4 <pb_dec_varint+0x34>
            return false;
 801bec0:	2300      	movs	r3, #0
 801bec2:	e107      	b.n	801c0d4 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 801bec4:	6a3b      	ldr	r3, [r7, #32]
 801bec6:	8a5b      	ldrh	r3, [r3, #18]
 801bec8:	2b08      	cmp	r3, #8
 801beca:	d10a      	bne.n	801bee2 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 801becc:	6a3b      	ldr	r3, [r7, #32]
 801bece:	69d9      	ldr	r1, [r3, #28]
 801bed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bed4:	e9c1 2300 	strd	r2, r3, [r1]
 801bed8:	e9d1 2300 	ldrd	r2, r3, [r1]
 801bedc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 801bee0:	e046      	b.n	801bf70 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 801bee2:	6a3b      	ldr	r3, [r7, #32]
 801bee4:	8a5b      	ldrh	r3, [r3, #18]
 801bee6:	2b04      	cmp	r3, #4
 801bee8:	d10e      	bne.n	801bf08 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 801beea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801beee:	6a3b      	ldr	r3, [r7, #32]
 801bef0:	69db      	ldr	r3, [r3, #28]
 801bef2:	4602      	mov	r2, r0
 801bef4:	601a      	str	r2, [r3, #0]
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	2200      	movs	r2, #0
 801befa:	613b      	str	r3, [r7, #16]
 801befc:	617a      	str	r2, [r7, #20]
 801befe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801bf02:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801bf06:	e033      	b.n	801bf70 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 801bf08:	6a3b      	ldr	r3, [r7, #32]
 801bf0a:	8a5b      	ldrh	r3, [r3, #18]
 801bf0c:	2b02      	cmp	r3, #2
 801bf0e:	d10f      	bne.n	801bf30 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 801bf10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bf14:	6a3b      	ldr	r3, [r7, #32]
 801bf16:	69db      	ldr	r3, [r3, #28]
 801bf18:	b282      	uxth	r2, r0
 801bf1a:	801a      	strh	r2, [r3, #0]
 801bf1c:	881b      	ldrh	r3, [r3, #0]
 801bf1e:	b29b      	uxth	r3, r3
 801bf20:	2200      	movs	r2, #0
 801bf22:	60bb      	str	r3, [r7, #8]
 801bf24:	60fa      	str	r2, [r7, #12]
 801bf26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801bf2a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801bf2e:	e01f      	b.n	801bf70 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 801bf30:	6a3b      	ldr	r3, [r7, #32]
 801bf32:	8a5b      	ldrh	r3, [r3, #18]
 801bf34:	2b01      	cmp	r3, #1
 801bf36:	d10f      	bne.n	801bf58 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 801bf38:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bf3c:	6a3b      	ldr	r3, [r7, #32]
 801bf3e:	69db      	ldr	r3, [r3, #28]
 801bf40:	b2c2      	uxtb	r2, r0
 801bf42:	701a      	strb	r2, [r3, #0]
 801bf44:	781b      	ldrb	r3, [r3, #0]
 801bf46:	b2db      	uxtb	r3, r3
 801bf48:	2200      	movs	r2, #0
 801bf4a:	603b      	str	r3, [r7, #0]
 801bf4c:	607a      	str	r2, [r7, #4]
 801bf4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801bf52:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801bf56:	e00b      	b.n	801bf70 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf5a:	68db      	ldr	r3, [r3, #12]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d002      	beq.n	801bf66 <pb_dec_varint+0xd6>
 801bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf62:	68db      	ldr	r3, [r3, #12]
 801bf64:	e000      	b.n	801bf68 <pb_dec_varint+0xd8>
 801bf66:	4b5e      	ldr	r3, [pc, #376]	; (801c0e0 <pb_dec_varint+0x250>)
 801bf68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf6a:	60d3      	str	r3, [r2, #12]
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	e0b1      	b.n	801c0d4 <pb_dec_varint+0x244>

        if (clamped != value)
 801bf70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801bf74:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801bf78:	4299      	cmp	r1, r3
 801bf7a:	bf08      	it	eq
 801bf7c:	4290      	cmpeq	r0, r2
 801bf7e:	d00b      	beq.n	801bf98 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 801bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf82:	68db      	ldr	r3, [r3, #12]
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d002      	beq.n	801bf8e <pb_dec_varint+0xfe>
 801bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf8a:	68db      	ldr	r3, [r3, #12]
 801bf8c:	e000      	b.n	801bf90 <pb_dec_varint+0x100>
 801bf8e:	4b55      	ldr	r3, [pc, #340]	; (801c0e4 <pb_dec_varint+0x254>)
 801bf90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf92:	60d3      	str	r3, [r2, #12]
 801bf94:	2300      	movs	r3, #0
 801bf96:	e09d      	b.n	801c0d4 <pb_dec_varint+0x244>

        return true;
 801bf98:	2301      	movs	r3, #1
 801bf9a:	e09b      	b.n	801c0d4 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 801bf9c:	6a3b      	ldr	r3, [r7, #32]
 801bf9e:	7d9b      	ldrb	r3, [r3, #22]
 801bfa0:	f003 030f 	and.w	r3, r3, #15
 801bfa4:	2b03      	cmp	r3, #3
 801bfa6:	d10d      	bne.n	801bfc4 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 801bfa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bfac:	4619      	mov	r1, r3
 801bfae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bfb0:	f7ff fee1 	bl	801bd76 <pb_decode_svarint>
 801bfb4:	4603      	mov	r3, r0
 801bfb6:	f083 0301 	eor.w	r3, r3, #1
 801bfba:	b2db      	uxtb	r3, r3
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d022      	beq.n	801c006 <pb_dec_varint+0x176>
                return false;
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	e087      	b.n	801c0d4 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 801bfc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bfc8:	4619      	mov	r1, r3
 801bfca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bfcc:	f7fe fe3e 	bl	801ac4c <pb_decode_varint>
 801bfd0:	4603      	mov	r3, r0
 801bfd2:	f083 0301 	eor.w	r3, r3, #1
 801bfd6:	b2db      	uxtb	r3, r3
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d001      	beq.n	801bfe0 <pb_dec_varint+0x150>
                return false;
 801bfdc:	2300      	movs	r3, #0
 801bfde:	e079      	b.n	801c0d4 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 801bfe0:	6a3b      	ldr	r3, [r7, #32]
 801bfe2:	8a5b      	ldrh	r3, [r3, #18]
 801bfe4:	2b08      	cmp	r3, #8
 801bfe6:	d104      	bne.n	801bff2 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 801bfe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801bfec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801bff0:	e009      	b.n	801c006 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 801bff2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801bff6:	4613      	mov	r3, r2
 801bff8:	17da      	asrs	r2, r3, #31
 801bffa:	61bb      	str	r3, [r7, #24]
 801bffc:	61fa      	str	r2, [r7, #28]
 801bffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c002:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 801c006:	6a3b      	ldr	r3, [r7, #32]
 801c008:	8a5b      	ldrh	r3, [r3, #18]
 801c00a:	2b08      	cmp	r3, #8
 801c00c:	d10a      	bne.n	801c024 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 801c00e:	6a3b      	ldr	r3, [r7, #32]
 801c010:	69d9      	ldr	r1, [r3, #28]
 801c012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c016:	e9c1 2300 	strd	r2, r3, [r1]
 801c01a:	e9d1 2300 	ldrd	r2, r3, [r1]
 801c01e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 801c022:	e042      	b.n	801c0aa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 801c024:	6a3b      	ldr	r3, [r7, #32]
 801c026:	8a5b      	ldrh	r3, [r3, #18]
 801c028:	2b04      	cmp	r3, #4
 801c02a:	d10c      	bne.n	801c046 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 801c02c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c030:	6a3b      	ldr	r3, [r7, #32]
 801c032:	69db      	ldr	r3, [r3, #28]
 801c034:	4602      	mov	r2, r0
 801c036:	601a      	str	r2, [r3, #0]
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	17da      	asrs	r2, r3, #31
 801c03c:	469a      	mov	sl, r3
 801c03e:	4693      	mov	fp, r2
 801c040:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 801c044:	e031      	b.n	801c0aa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 801c046:	6a3b      	ldr	r3, [r7, #32]
 801c048:	8a5b      	ldrh	r3, [r3, #18]
 801c04a:	2b02      	cmp	r3, #2
 801c04c:	d10e      	bne.n	801c06c <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 801c04e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c052:	6a3b      	ldr	r3, [r7, #32]
 801c054:	69db      	ldr	r3, [r3, #28]
 801c056:	b202      	sxth	r2, r0
 801c058:	801a      	strh	r2, [r3, #0]
 801c05a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c05e:	b21b      	sxth	r3, r3
 801c060:	17da      	asrs	r2, r3, #31
 801c062:	4698      	mov	r8, r3
 801c064:	4691      	mov	r9, r2
 801c066:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 801c06a:	e01e      	b.n	801c0aa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 801c06c:	6a3b      	ldr	r3, [r7, #32]
 801c06e:	8a5b      	ldrh	r3, [r3, #18]
 801c070:	2b01      	cmp	r3, #1
 801c072:	d10e      	bne.n	801c092 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 801c074:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c078:	6a3b      	ldr	r3, [r7, #32]
 801c07a:	69db      	ldr	r3, [r3, #28]
 801c07c:	b242      	sxtb	r2, r0
 801c07e:	701a      	strb	r2, [r3, #0]
 801c080:	f993 3000 	ldrsb.w	r3, [r3]
 801c084:	b25b      	sxtb	r3, r3
 801c086:	17da      	asrs	r2, r3, #31
 801c088:	461c      	mov	r4, r3
 801c08a:	4615      	mov	r5, r2
 801c08c:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 801c090:	e00b      	b.n	801c0aa <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c094:	68db      	ldr	r3, [r3, #12]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d002      	beq.n	801c0a0 <pb_dec_varint+0x210>
 801c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c09c:	68db      	ldr	r3, [r3, #12]
 801c09e:	e000      	b.n	801c0a2 <pb_dec_varint+0x212>
 801c0a0:	4b0f      	ldr	r3, [pc, #60]	; (801c0e0 <pb_dec_varint+0x250>)
 801c0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c0a4:	60d3      	str	r3, [r2, #12]
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	e014      	b.n	801c0d4 <pb_dec_varint+0x244>

        if (clamped != svalue)
 801c0aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c0ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801c0b2:	4299      	cmp	r1, r3
 801c0b4:	bf08      	it	eq
 801c0b6:	4290      	cmpeq	r0, r2
 801c0b8:	d00b      	beq.n	801c0d2 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 801c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0bc:	68db      	ldr	r3, [r3, #12]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d002      	beq.n	801c0c8 <pb_dec_varint+0x238>
 801c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0c4:	68db      	ldr	r3, [r3, #12]
 801c0c6:	e000      	b.n	801c0ca <pb_dec_varint+0x23a>
 801c0c8:	4b06      	ldr	r3, [pc, #24]	; (801c0e4 <pb_dec_varint+0x254>)
 801c0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c0cc:	60d3      	str	r3, [r2, #12]
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	e000      	b.n	801c0d4 <pb_dec_varint+0x244>

        return true;
 801c0d2:	2301      	movs	r3, #1
    }
}
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	3750      	adds	r7, #80	; 0x50
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c0de:	bf00      	nop
 801c0e0:	08022014 	.word	0x08022014
 801c0e4:	08022028 	.word	0x08022028

0801c0e8 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b086      	sub	sp, #24
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	6078      	str	r0, [r7, #4]
 801c0f0:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 801c0f2:	f107 030c 	add.w	r3, r7, #12
 801c0f6:	4619      	mov	r1, r3
 801c0f8:	6878      	ldr	r0, [r7, #4]
 801c0fa:	f7fe fd97 	bl	801ac2c <pb_decode_varint32>
 801c0fe:	4603      	mov	r3, r0
 801c100:	f083 0301 	eor.w	r3, r3, #1
 801c104:	b2db      	uxtb	r3, r3
 801c106:	2b00      	cmp	r3, #0
 801c108:	d001      	beq.n	801c10e <pb_dec_bytes+0x26>
        return false;
 801c10a:	2300      	movs	r3, #0
 801c10c:	e055      	b.n	801c1ba <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c114:	d30b      	bcc.n	801c12e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	68db      	ldr	r3, [r3, #12]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d002      	beq.n	801c124 <pb_dec_bytes+0x3c>
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	68db      	ldr	r3, [r3, #12]
 801c122:	e000      	b.n	801c126 <pb_dec_bytes+0x3e>
 801c124:	4b27      	ldr	r3, [pc, #156]	; (801c1c4 <pb_dec_bytes+0xdc>)
 801c126:	687a      	ldr	r2, [r7, #4]
 801c128:	60d3      	str	r3, [r2, #12]
 801c12a:	2300      	movs	r3, #0
 801c12c:	e045      	b.n	801c1ba <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	3302      	adds	r3, #2
 801c132:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	697a      	ldr	r2, [r7, #20]
 801c138:	429a      	cmp	r2, r3
 801c13a:	d20b      	bcs.n	801c154 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	68db      	ldr	r3, [r3, #12]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d002      	beq.n	801c14a <pb_dec_bytes+0x62>
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	68db      	ldr	r3, [r3, #12]
 801c148:	e000      	b.n	801c14c <pb_dec_bytes+0x64>
 801c14a:	4b1f      	ldr	r3, [pc, #124]	; (801c1c8 <pb_dec_bytes+0xe0>)
 801c14c:	687a      	ldr	r2, [r7, #4]
 801c14e:	60d3      	str	r3, [r2, #12]
 801c150:	2300      	movs	r3, #0
 801c152:	e032      	b.n	801c1ba <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801c154:	683b      	ldr	r3, [r7, #0]
 801c156:	7d9b      	ldrb	r3, [r3, #22]
 801c158:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c15c:	2b80      	cmp	r3, #128	; 0x80
 801c15e:	d10b      	bne.n	801c178 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	68db      	ldr	r3, [r3, #12]
 801c164:	2b00      	cmp	r3, #0
 801c166:	d002      	beq.n	801c16e <pb_dec_bytes+0x86>
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	68db      	ldr	r3, [r3, #12]
 801c16c:	e000      	b.n	801c170 <pb_dec_bytes+0x88>
 801c16e:	4b17      	ldr	r3, [pc, #92]	; (801c1cc <pb_dec_bytes+0xe4>)
 801c170:	687a      	ldr	r2, [r7, #4]
 801c172:	60d3      	str	r3, [r2, #12]
 801c174:	2300      	movs	r3, #0
 801c176:	e020      	b.n	801c1ba <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 801c178:	683b      	ldr	r3, [r7, #0]
 801c17a:	8a5b      	ldrh	r3, [r3, #18]
 801c17c:	461a      	mov	r2, r3
 801c17e:	697b      	ldr	r3, [r7, #20]
 801c180:	4293      	cmp	r3, r2
 801c182:	d90b      	bls.n	801c19c <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	68db      	ldr	r3, [r3, #12]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d002      	beq.n	801c192 <pb_dec_bytes+0xaa>
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	68db      	ldr	r3, [r3, #12]
 801c190:	e000      	b.n	801c194 <pb_dec_bytes+0xac>
 801c192:	4b0c      	ldr	r3, [pc, #48]	; (801c1c4 <pb_dec_bytes+0xdc>)
 801c194:	687a      	ldr	r2, [r7, #4]
 801c196:	60d3      	str	r3, [r2, #12]
 801c198:	2300      	movs	r3, #0
 801c19a:	e00e      	b.n	801c1ba <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 801c19c:	683b      	ldr	r3, [r7, #0]
 801c19e:	69db      	ldr	r3, [r3, #28]
 801c1a0:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	b29a      	uxth	r2, r3
 801c1a6:	693b      	ldr	r3, [r7, #16]
 801c1a8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 801c1aa:	693b      	ldr	r3, [r7, #16]
 801c1ac:	3302      	adds	r3, #2
 801c1ae:	68fa      	ldr	r2, [r7, #12]
 801c1b0:	4619      	mov	r1, r3
 801c1b2:	6878      	ldr	r0, [r7, #4]
 801c1b4:	f7fe fbc0 	bl	801a938 <pb_read>
 801c1b8:	4603      	mov	r3, r0
}
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	3718      	adds	r7, #24
 801c1be:	46bd      	mov	sp, r7
 801c1c0:	bd80      	pop	{r7, pc}
 801c1c2:	bf00      	nop
 801c1c4:	0802203c 	.word	0x0802203c
 801c1c8:	0802204c 	.word	0x0802204c
 801c1cc:	08021f94 	.word	0x08021f94

0801c1d0 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	b086      	sub	sp, #24
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	6078      	str	r0, [r7, #4]
 801c1d8:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 801c1da:	683b      	ldr	r3, [r7, #0]
 801c1dc:	69db      	ldr	r3, [r3, #28]
 801c1de:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 801c1e0:	f107 030c 	add.w	r3, r7, #12
 801c1e4:	4619      	mov	r1, r3
 801c1e6:	6878      	ldr	r0, [r7, #4]
 801c1e8:	f7fe fd20 	bl	801ac2c <pb_decode_varint32>
 801c1ec:	4603      	mov	r3, r0
 801c1ee:	f083 0301 	eor.w	r3, r3, #1
 801c1f2:	b2db      	uxtb	r3, r3
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d001      	beq.n	801c1fc <pb_dec_string+0x2c>
        return false;
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	e05a      	b.n	801c2b2 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c202:	d10b      	bne.n	801c21c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	68db      	ldr	r3, [r3, #12]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d002      	beq.n	801c212 <pb_dec_string+0x42>
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	68db      	ldr	r3, [r3, #12]
 801c210:	e000      	b.n	801c214 <pb_dec_string+0x44>
 801c212:	4b2a      	ldr	r3, [pc, #168]	; (801c2bc <pb_dec_string+0xec>)
 801c214:	687a      	ldr	r2, [r7, #4]
 801c216:	60d3      	str	r3, [r2, #12]
 801c218:	2300      	movs	r3, #0
 801c21a:	e04a      	b.n	801c2b2 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 801c21c:	68fb      	ldr	r3, [r7, #12]
 801c21e:	3301      	adds	r3, #1
 801c220:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	693a      	ldr	r2, [r7, #16]
 801c226:	429a      	cmp	r2, r3
 801c228:	d20b      	bcs.n	801c242 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	68db      	ldr	r3, [r3, #12]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d002      	beq.n	801c238 <pb_dec_string+0x68>
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	68db      	ldr	r3, [r3, #12]
 801c236:	e000      	b.n	801c23a <pb_dec_string+0x6a>
 801c238:	4b20      	ldr	r3, [pc, #128]	; (801c2bc <pb_dec_string+0xec>)
 801c23a:	687a      	ldr	r2, [r7, #4]
 801c23c:	60d3      	str	r3, [r2, #12]
 801c23e:	2300      	movs	r3, #0
 801c240:	e037      	b.n	801c2b2 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	7d9b      	ldrb	r3, [r3, #22]
 801c246:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c24a:	2b80      	cmp	r3, #128	; 0x80
 801c24c:	d10b      	bne.n	801c266 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	68db      	ldr	r3, [r3, #12]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d002      	beq.n	801c25c <pb_dec_string+0x8c>
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	68db      	ldr	r3, [r3, #12]
 801c25a:	e000      	b.n	801c25e <pb_dec_string+0x8e>
 801c25c:	4b18      	ldr	r3, [pc, #96]	; (801c2c0 <pb_dec_string+0xf0>)
 801c25e:	687a      	ldr	r2, [r7, #4]
 801c260:	60d3      	str	r3, [r2, #12]
 801c262:	2300      	movs	r3, #0
 801c264:	e025      	b.n	801c2b2 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 801c266:	683b      	ldr	r3, [r7, #0]
 801c268:	8a5b      	ldrh	r3, [r3, #18]
 801c26a:	461a      	mov	r2, r3
 801c26c:	693b      	ldr	r3, [r7, #16]
 801c26e:	4293      	cmp	r3, r2
 801c270:	d90b      	bls.n	801c28a <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	68db      	ldr	r3, [r3, #12]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d002      	beq.n	801c280 <pb_dec_string+0xb0>
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	68db      	ldr	r3, [r3, #12]
 801c27e:	e000      	b.n	801c282 <pb_dec_string+0xb2>
 801c280:	4b10      	ldr	r3, [pc, #64]	; (801c2c4 <pb_dec_string+0xf4>)
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	60d3      	str	r3, [r2, #12]
 801c286:	2300      	movs	r3, #0
 801c288:	e013      	b.n	801c2b2 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 801c28a:	68fb      	ldr	r3, [r7, #12]
 801c28c:	697a      	ldr	r2, [r7, #20]
 801c28e:	4413      	add	r3, r2
 801c290:	2200      	movs	r2, #0
 801c292:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	461a      	mov	r2, r3
 801c298:	6979      	ldr	r1, [r7, #20]
 801c29a:	6878      	ldr	r0, [r7, #4]
 801c29c:	f7fe fb4c 	bl	801a938 <pb_read>
 801c2a0:	4603      	mov	r3, r0
 801c2a2:	f083 0301 	eor.w	r3, r3, #1
 801c2a6:	b2db      	uxtb	r3, r3
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d001      	beq.n	801c2b0 <pb_dec_string+0xe0>
        return false;
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	e000      	b.n	801c2b2 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 801c2b0:	2301      	movs	r3, #1
}
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	3718      	adds	r7, #24
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	bd80      	pop	{r7, pc}
 801c2ba:	bf00      	nop
 801c2bc:	0802204c 	.word	0x0802204c
 801c2c0:	08021f94 	.word	0x08021f94
 801c2c4:	0802205c 	.word	0x0802205c

0801c2c8 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b08a      	sub	sp, #40	; 0x28
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	6078      	str	r0, [r7, #4]
 801c2d0:	6039      	str	r1, [r7, #0]
    bool status = true;
 801c2d2:	2301      	movs	r3, #1
 801c2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 801c2d8:	2300      	movs	r3, #0
 801c2da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 801c2de:	f107 030c 	add.w	r3, r7, #12
 801c2e2:	4619      	mov	r1, r3
 801c2e4:	6878      	ldr	r0, [r7, #4]
 801c2e6:	f7fe fe2d 	bl	801af44 <pb_make_string_substream>
 801c2ea:	4603      	mov	r3, r0
 801c2ec:	f083 0301 	eor.w	r3, r3, #1
 801c2f0:	b2db      	uxtb	r3, r3
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d001      	beq.n	801c2fa <pb_dec_submessage+0x32>
        return false;
 801c2f6:	2300      	movs	r3, #0
 801c2f8:	e069      	b.n	801c3ce <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 801c2fa:	683b      	ldr	r3, [r7, #0]
 801c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d10b      	bne.n	801c31a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	68db      	ldr	r3, [r3, #12]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d002      	beq.n	801c310 <pb_dec_submessage+0x48>
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	68db      	ldr	r3, [r3, #12]
 801c30e:	e000      	b.n	801c312 <pb_dec_submessage+0x4a>
 801c310:	4b31      	ldr	r3, [pc, #196]	; (801c3d8 <pb_dec_submessage+0x110>)
 801c312:	687a      	ldr	r2, [r7, #4]
 801c314:	60d3      	str	r3, [r2, #12]
 801c316:	2300      	movs	r3, #0
 801c318:	e059      	b.n	801c3ce <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 801c31a:	683b      	ldr	r3, [r7, #0]
 801c31c:	7d9b      	ldrb	r3, [r3, #22]
 801c31e:	f003 030f 	and.w	r3, r3, #15
 801c322:	2b09      	cmp	r3, #9
 801c324:	d11c      	bne.n	801c360 <pb_dec_submessage+0x98>
 801c326:	683b      	ldr	r3, [r7, #0]
 801c328:	6a1b      	ldr	r3, [r3, #32]
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d018      	beq.n	801c360 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	6a1b      	ldr	r3, [r3, #32]
 801c332:	3b08      	subs	r3, #8
 801c334:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 801c336:	69fb      	ldr	r3, [r7, #28]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d010      	beq.n	801c360 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 801c33e:	69fb      	ldr	r3, [r7, #28]
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	69fa      	ldr	r2, [r7, #28]
 801c344:	3204      	adds	r2, #4
 801c346:	f107 000c 	add.w	r0, r7, #12
 801c34a:	6839      	ldr	r1, [r7, #0]
 801c34c:	4798      	blx	r3
 801c34e:	4603      	mov	r3, r0
 801c350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 801c354:	697b      	ldr	r3, [r7, #20]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d102      	bne.n	801c360 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 801c35a:	2301      	movs	r3, #1
 801c35c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 801c360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c364:	2b00      	cmp	r3, #0
 801c366:	d022      	beq.n	801c3ae <pb_dec_submessage+0xe6>
 801c368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c36c:	f083 0301 	eor.w	r3, r3, #1
 801c370:	b2db      	uxtb	r3, r3
 801c372:	2b00      	cmp	r3, #0
 801c374:	d01b      	beq.n	801c3ae <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 801c376:	2300      	movs	r3, #0
 801c378:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801c37a:	683b      	ldr	r3, [r7, #0]
 801c37c:	7d9b      	ldrb	r3, [r3, #22]
 801c37e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c382:	2b00      	cmp	r3, #0
 801c384:	d107      	bne.n	801c396 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 801c386:	683b      	ldr	r3, [r7, #0]
 801c388:	7d9b      	ldrb	r3, [r3, #22]
 801c38a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801c38e:	2b20      	cmp	r3, #32
 801c390:	d001      	beq.n	801c396 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 801c392:	2301      	movs	r3, #1
 801c394:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 801c396:	683b      	ldr	r3, [r7, #0]
 801c398:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801c39a:	683b      	ldr	r3, [r7, #0]
 801c39c:	69da      	ldr	r2, [r3, #28]
 801c39e:	f107 000c 	add.w	r0, r7, #12
 801c3a2:	6a3b      	ldr	r3, [r7, #32]
 801c3a4:	f7ff fafa 	bl	801b99c <pb_decode_inner>
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 801c3ae:	f107 030c 	add.w	r3, r7, #12
 801c3b2:	4619      	mov	r1, r3
 801c3b4:	6878      	ldr	r0, [r7, #4]
 801c3b6:	f7fe fdff 	bl	801afb8 <pb_close_string_substream>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	f083 0301 	eor.w	r3, r3, #1
 801c3c0:	b2db      	uxtb	r3, r3
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d001      	beq.n	801c3ca <pb_dec_submessage+0x102>
        return false;
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	e001      	b.n	801c3ce <pb_dec_submessage+0x106>

    return status;
 801c3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	3728      	adds	r7, #40	; 0x28
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	bd80      	pop	{r7, pc}
 801c3d6:	bf00      	nop
 801c3d8:	0802206c 	.word	0x0802206c

0801c3dc <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 801c3dc:	b580      	push	{r7, lr}
 801c3de:	b084      	sub	sp, #16
 801c3e0:	af00      	add	r7, sp, #0
 801c3e2:	6078      	str	r0, [r7, #4]
 801c3e4:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 801c3e6:	f107 030c 	add.w	r3, r7, #12
 801c3ea:	4619      	mov	r1, r3
 801c3ec:	6878      	ldr	r0, [r7, #4]
 801c3ee:	f7fe fc1d 	bl	801ac2c <pb_decode_varint32>
 801c3f2:	4603      	mov	r3, r0
 801c3f4:	f083 0301 	eor.w	r3, r3, #1
 801c3f8:	b2db      	uxtb	r3, r3
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d001      	beq.n	801c402 <pb_dec_fixed_length_bytes+0x26>
        return false;
 801c3fe:	2300      	movs	r3, #0
 801c400:	e037      	b.n	801c472 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c408:	d30b      	bcc.n	801c422 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	68db      	ldr	r3, [r3, #12]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d002      	beq.n	801c418 <pb_dec_fixed_length_bytes+0x3c>
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	68db      	ldr	r3, [r3, #12]
 801c416:	e000      	b.n	801c41a <pb_dec_fixed_length_bytes+0x3e>
 801c418:	4b18      	ldr	r3, [pc, #96]	; (801c47c <pb_dec_fixed_length_bytes+0xa0>)
 801c41a:	687a      	ldr	r2, [r7, #4]
 801c41c:	60d3      	str	r3, [r2, #12]
 801c41e:	2300      	movs	r3, #0
 801c420:	e027      	b.n	801c472 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d109      	bne.n	801c43c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 801c428:	683b      	ldr	r3, [r7, #0]
 801c42a:	69d8      	ldr	r0, [r3, #28]
 801c42c:	683b      	ldr	r3, [r7, #0]
 801c42e:	8a5b      	ldrh	r3, [r3, #18]
 801c430:	461a      	mov	r2, r3
 801c432:	2100      	movs	r1, #0
 801c434:	f001 f944 	bl	801d6c0 <memset>
        return true;
 801c438:	2301      	movs	r3, #1
 801c43a:	e01a      	b.n	801c472 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 801c43c:	683b      	ldr	r3, [r7, #0]
 801c43e:	8a5b      	ldrh	r3, [r3, #18]
 801c440:	461a      	mov	r2, r3
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	429a      	cmp	r2, r3
 801c446:	d00b      	beq.n	801c460 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	68db      	ldr	r3, [r3, #12]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d002      	beq.n	801c456 <pb_dec_fixed_length_bytes+0x7a>
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	68db      	ldr	r3, [r3, #12]
 801c454:	e000      	b.n	801c458 <pb_dec_fixed_length_bytes+0x7c>
 801c456:	4b0a      	ldr	r3, [pc, #40]	; (801c480 <pb_dec_fixed_length_bytes+0xa4>)
 801c458:	687a      	ldr	r2, [r7, #4]
 801c45a:	60d3      	str	r3, [r2, #12]
 801c45c:	2300      	movs	r3, #0
 801c45e:	e008      	b.n	801c472 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 801c460:	683b      	ldr	r3, [r7, #0]
 801c462:	69d9      	ldr	r1, [r3, #28]
 801c464:	683b      	ldr	r3, [r7, #0]
 801c466:	8a5b      	ldrh	r3, [r3, #18]
 801c468:	461a      	mov	r2, r3
 801c46a:	6878      	ldr	r0, [r7, #4]
 801c46c:	f7fe fa64 	bl	801a938 <pb_read>
 801c470:	4603      	mov	r3, r0
}
 801c472:	4618      	mov	r0, r3
 801c474:	3710      	adds	r7, #16
 801c476:	46bd      	mov	sp, r7
 801c478:	bd80      	pop	{r7, pc}
 801c47a:	bf00      	nop
 801c47c:	0802203c 	.word	0x0802203c
 801c480:	08022088 	.word	0x08022088

0801c484 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 801c484:	b580      	push	{r7, lr}
 801c486:	b086      	sub	sp, #24
 801c488:	af00      	add	r7, sp, #0
 801c48a:	60f8      	str	r0, [r7, #12]
 801c48c:	60b9      	str	r1, [r7, #8]
 801c48e:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	685b      	ldr	r3, [r3, #4]
 801c494:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 801c496:	697a      	ldr	r2, [r7, #20]
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	441a      	add	r2, r3
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 801c4a0:	687a      	ldr	r2, [r7, #4]
 801c4a2:	68b9      	ldr	r1, [r7, #8]
 801c4a4:	6978      	ldr	r0, [r7, #20]
 801c4a6:	f001 f8fd 	bl	801d6a4 <memcpy>
    
    return true;
 801c4aa:	2301      	movs	r3, #1
}
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	3718      	adds	r7, #24
 801c4b0:	46bd      	mov	sp, r7
 801c4b2:	bd80      	pop	{r7, pc}

0801c4b4 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 801c4b4:	b4b0      	push	{r4, r5, r7}
 801c4b6:	b08b      	sub	sp, #44	; 0x2c
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	60f8      	str	r0, [r7, #12]
 801c4bc:	60b9      	str	r1, [r7, #8]
 801c4be:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 801c4c0:	4b0b      	ldr	r3, [pc, #44]	; (801c4f0 <pb_ostream_from_buffer+0x3c>)
 801c4c2:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 801c4c4:	68bb      	ldr	r3, [r7, #8]
 801c4c6:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 801c4d0:	2300      	movs	r3, #0
 801c4d2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	461d      	mov	r5, r3
 801c4d8:	f107 0414 	add.w	r4, r7, #20
 801c4dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c4e0:	6823      	ldr	r3, [r4, #0]
 801c4e2:	602b      	str	r3, [r5, #0]
}
 801c4e4:	68f8      	ldr	r0, [r7, #12]
 801c4e6:	372c      	adds	r7, #44	; 0x2c
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bcb0      	pop	{r4, r5, r7}
 801c4ec:	4770      	bx	lr
 801c4ee:	bf00      	nop
 801c4f0:	0801c485 	.word	0x0801c485

0801c4f4 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b084      	sub	sp, #16
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	60f8      	str	r0, [r7, #12]
 801c4fc:	60b9      	str	r1, [r7, #8]
 801c4fe:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d037      	beq.n	801c576 <pb_write+0x82>
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d033      	beq.n	801c576 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	68da      	ldr	r2, [r3, #12]
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	441a      	add	r2, r3
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	68db      	ldr	r3, [r3, #12]
 801c51a:	429a      	cmp	r2, r3
 801c51c:	d307      	bcc.n	801c52e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	68da      	ldr	r2, [r3, #12]
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	441a      	add	r2, r3
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 801c52a:	429a      	cmp	r2, r3
 801c52c:	d90b      	bls.n	801c546 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	691b      	ldr	r3, [r3, #16]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d002      	beq.n	801c53c <pb_write+0x48>
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	691b      	ldr	r3, [r3, #16]
 801c53a:	e000      	b.n	801c53e <pb_write+0x4a>
 801c53c:	4b13      	ldr	r3, [pc, #76]	; (801c58c <pb_write+0x98>)
 801c53e:	68fa      	ldr	r2, [r7, #12]
 801c540:	6113      	str	r3, [r2, #16]
 801c542:	2300      	movs	r3, #0
 801c544:	e01e      	b.n	801c584 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	687a      	ldr	r2, [r7, #4]
 801c54c:	68b9      	ldr	r1, [r7, #8]
 801c54e:	68f8      	ldr	r0, [r7, #12]
 801c550:	4798      	blx	r3
 801c552:	4603      	mov	r3, r0
 801c554:	f083 0301 	eor.w	r3, r3, #1
 801c558:	b2db      	uxtb	r3, r3
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d00b      	beq.n	801c576 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	691b      	ldr	r3, [r3, #16]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d002      	beq.n	801c56c <pb_write+0x78>
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	691b      	ldr	r3, [r3, #16]
 801c56a:	e000      	b.n	801c56e <pb_write+0x7a>
 801c56c:	4b08      	ldr	r3, [pc, #32]	; (801c590 <pb_write+0x9c>)
 801c56e:	68fa      	ldr	r2, [r7, #12]
 801c570:	6113      	str	r3, [r2, #16]
 801c572:	2300      	movs	r3, #0
 801c574:	e006      	b.n	801c584 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	68da      	ldr	r2, [r3, #12]
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	441a      	add	r2, r3
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	60da      	str	r2, [r3, #12]
    return true;
 801c582:	2301      	movs	r3, #1
}
 801c584:	4618      	mov	r0, r3
 801c586:	3710      	adds	r7, #16
 801c588:	46bd      	mov	sp, r7
 801c58a:	bd80      	pop	{r7, pc}
 801c58c:	080220ac 	.word	0x080220ac
 801c590:	080220b8 	.word	0x080220b8

0801c594 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 801c594:	b480      	push	{r7}
 801c596:	b085      	sub	sp, #20
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	60fb      	str	r3, [r7, #12]
 801c5a4:	e00a      	b.n	801c5bc <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 801c5a6:	68ba      	ldr	r2, [r7, #8]
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	4413      	add	r3, r2
 801c5ac:	781b      	ldrb	r3, [r3, #0]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d001      	beq.n	801c5b6 <safe_read_bool+0x22>
            return true;
 801c5b2:	2301      	movs	r3, #1
 801c5b4:	e006      	b.n	801c5c4 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	3301      	adds	r3, #1
 801c5ba:	60fb      	str	r3, [r7, #12]
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d0f1      	beq.n	801c5a6 <safe_read_bool+0x12>
    }
    return false;
 801c5c2:	2300      	movs	r3, #0
}
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	3714      	adds	r7, #20
 801c5c8:	46bd      	mov	sp, r7
 801c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ce:	4770      	bx	lr

0801c5d0 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 801c5d0:	b5b0      	push	{r4, r5, r7, lr}
 801c5d2:	b08c      	sub	sp, #48	; 0x30
 801c5d4:	af00      	add	r7, sp, #0
 801c5d6:	6078      	str	r0, [r7, #4]
 801c5d8:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 801c5da:	683b      	ldr	r3, [r7, #0]
 801c5dc:	6a1b      	ldr	r3, [r3, #32]
 801c5de:	881b      	ldrh	r3, [r3, #0]
 801c5e0:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 801c5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d101      	bne.n	801c5ec <encode_array+0x1c>
        return true;
 801c5e8:	2301      	movs	r3, #1
 801c5ea:	e13d      	b.n	801c868 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 801c5ec:	683b      	ldr	r3, [r7, #0]
 801c5ee:	7d9b      	ldrb	r3, [r3, #22]
 801c5f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c5f4:	2b80      	cmp	r3, #128	; 0x80
 801c5f6:	d010      	beq.n	801c61a <encode_array+0x4a>
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	8a9b      	ldrh	r3, [r3, #20]
 801c5fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c5fe:	429a      	cmp	r2, r3
 801c600:	d90b      	bls.n	801c61a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	691b      	ldr	r3, [r3, #16]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d002      	beq.n	801c610 <encode_array+0x40>
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	691b      	ldr	r3, [r3, #16]
 801c60e:	e000      	b.n	801c612 <encode_array+0x42>
 801c610:	4b97      	ldr	r3, [pc, #604]	; (801c870 <encode_array+0x2a0>)
 801c612:	687a      	ldr	r2, [r7, #4]
 801c614:	6113      	str	r3, [r2, #16]
 801c616:	2300      	movs	r3, #0
 801c618:	e126      	b.n	801c868 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 801c61a:	683b      	ldr	r3, [r7, #0]
 801c61c:	7d9b      	ldrb	r3, [r3, #22]
 801c61e:	f003 030f 	and.w	r3, r3, #15
 801c622:	2b05      	cmp	r3, #5
 801c624:	f200 80b3 	bhi.w	801c78e <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 801c628:	683b      	ldr	r3, [r7, #0]
 801c62a:	8a1b      	ldrh	r3, [r3, #16]
 801c62c:	461a      	mov	r2, r3
 801c62e:	2102      	movs	r1, #2
 801c630:	6878      	ldr	r0, [r7, #4]
 801c632:	f000 fcdd 	bl	801cff0 <pb_encode_tag>
 801c636:	4603      	mov	r3, r0
 801c638:	f083 0301 	eor.w	r3, r3, #1
 801c63c:	b2db      	uxtb	r3, r3
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d001      	beq.n	801c646 <encode_array+0x76>
            return false;
 801c642:	2300      	movs	r3, #0
 801c644:	e110      	b.n	801c868 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	7d9b      	ldrb	r3, [r3, #22]
 801c64a:	f003 030f 	and.w	r3, r3, #15
 801c64e:	2b04      	cmp	r3, #4
 801c650:	d103      	bne.n	801c65a <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 801c652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c654:	009b      	lsls	r3, r3, #2
 801c656:	62bb      	str	r3, [r7, #40]	; 0x28
 801c658:	e047      	b.n	801c6ea <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801c65a:	683b      	ldr	r3, [r7, #0]
 801c65c:	7d9b      	ldrb	r3, [r3, #22]
 801c65e:	f003 030f 	and.w	r3, r3, #15
 801c662:	2b05      	cmp	r3, #5
 801c664:	d103      	bne.n	801c66e <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 801c666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c668:	00db      	lsls	r3, r3, #3
 801c66a:	62bb      	str	r3, [r7, #40]	; 0x28
 801c66c:	e03d      	b.n	801c6ea <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 801c66e:	f107 0308 	add.w	r3, r7, #8
 801c672:	2200      	movs	r2, #0
 801c674:	601a      	str	r2, [r3, #0]
 801c676:	605a      	str	r2, [r3, #4]
 801c678:	609a      	str	r2, [r3, #8]
 801c67a:	60da      	str	r2, [r3, #12]
 801c67c:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 801c67e:	683b      	ldr	r3, [r7, #0]
 801c680:	69db      	ldr	r3, [r3, #28]
 801c682:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 801c684:	2300      	movs	r3, #0
 801c686:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c688:	e026      	b.n	801c6d8 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 801c68a:	f107 0308 	add.w	r3, r7, #8
 801c68e:	6839      	ldr	r1, [r7, #0]
 801c690:	4618      	mov	r0, r3
 801c692:	f000 fdef 	bl	801d274 <pb_enc_varint>
 801c696:	4603      	mov	r3, r0
 801c698:	f083 0301 	eor.w	r3, r3, #1
 801c69c:	b2db      	uxtb	r3, r3
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d010      	beq.n	801c6c4 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	691b      	ldr	r3, [r3, #16]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d002      	beq.n	801c6b0 <encode_array+0xe0>
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	691b      	ldr	r3, [r3, #16]
 801c6ae:	e005      	b.n	801c6bc <encode_array+0xec>
 801c6b0:	69bb      	ldr	r3, [r7, #24]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d001      	beq.n	801c6ba <encode_array+0xea>
 801c6b6:	69bb      	ldr	r3, [r7, #24]
 801c6b8:	e000      	b.n	801c6bc <encode_array+0xec>
 801c6ba:	4b6e      	ldr	r3, [pc, #440]	; (801c874 <encode_array+0x2a4>)
 801c6bc:	687a      	ldr	r2, [r7, #4]
 801c6be:	6113      	str	r3, [r2, #16]
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	e0d1      	b.n	801c868 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 801c6c4:	683b      	ldr	r3, [r7, #0]
 801c6c6:	69db      	ldr	r3, [r3, #28]
 801c6c8:	683a      	ldr	r2, [r7, #0]
 801c6ca:	8a52      	ldrh	r2, [r2, #18]
 801c6cc:	441a      	add	r2, r3
 801c6ce:	683b      	ldr	r3, [r7, #0]
 801c6d0:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 801c6d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c6d4:	3301      	adds	r3, #1
 801c6d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c6d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c6da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d3d4      	bcc.n	801c68a <encode_array+0xba>
            }
            field->pData = pData_orig;
 801c6e0:	683b      	ldr	r3, [r7, #0]
 801c6e2:	69fa      	ldr	r2, [r7, #28]
 801c6e4:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	461c      	mov	r4, r3
 801c6f0:	4615      	mov	r5, r2
 801c6f2:	4622      	mov	r2, r4
 801c6f4:	462b      	mov	r3, r5
 801c6f6:	6878      	ldr	r0, [r7, #4]
 801c6f8:	f000 fbf7 	bl	801ceea <pb_encode_varint>
 801c6fc:	4603      	mov	r3, r0
 801c6fe:	f083 0301 	eor.w	r3, r3, #1
 801c702:	b2db      	uxtb	r3, r3
 801c704:	2b00      	cmp	r3, #0
 801c706:	d001      	beq.n	801c70c <encode_array+0x13c>
            return false;
 801c708:	2300      	movs	r3, #0
 801c70a:	e0ad      	b.n	801c868 <encode_array+0x298>
        
        if (stream->callback == NULL)
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d106      	bne.n	801c722 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 801c714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c716:	2100      	movs	r1, #0
 801c718:	6878      	ldr	r0, [r7, #4]
 801c71a:	f7ff feeb 	bl	801c4f4 <pb_write>
 801c71e:	4603      	mov	r3, r0
 801c720:	e0a2      	b.n	801c868 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 801c722:	2300      	movs	r3, #0
 801c724:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c726:	e02d      	b.n	801c784 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	7d9b      	ldrb	r3, [r3, #22]
 801c72c:	f003 030f 	and.w	r3, r3, #15
 801c730:	2b04      	cmp	r3, #4
 801c732:	d005      	beq.n	801c740 <encode_array+0x170>
 801c734:	683b      	ldr	r3, [r7, #0]
 801c736:	7d9b      	ldrb	r3, [r3, #22]
 801c738:	f003 030f 	and.w	r3, r3, #15
 801c73c:	2b05      	cmp	r3, #5
 801c73e:	d10b      	bne.n	801c758 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 801c740:	6839      	ldr	r1, [r7, #0]
 801c742:	6878      	ldr	r0, [r7, #4]
 801c744:	f000 fe58 	bl	801d3f8 <pb_enc_fixed>
 801c748:	4603      	mov	r3, r0
 801c74a:	f083 0301 	eor.w	r3, r3, #1
 801c74e:	b2db      	uxtb	r3, r3
 801c750:	2b00      	cmp	r3, #0
 801c752:	d00d      	beq.n	801c770 <encode_array+0x1a0>
                    return false;
 801c754:	2300      	movs	r3, #0
 801c756:	e087      	b.n	801c868 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 801c758:	6839      	ldr	r1, [r7, #0]
 801c75a:	6878      	ldr	r0, [r7, #4]
 801c75c:	f000 fd8a 	bl	801d274 <pb_enc_varint>
 801c760:	4603      	mov	r3, r0
 801c762:	f083 0301 	eor.w	r3, r3, #1
 801c766:	b2db      	uxtb	r3, r3
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d001      	beq.n	801c770 <encode_array+0x1a0>
                    return false;
 801c76c:	2300      	movs	r3, #0
 801c76e:	e07b      	b.n	801c868 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 801c770:	683b      	ldr	r3, [r7, #0]
 801c772:	69db      	ldr	r3, [r3, #28]
 801c774:	683a      	ldr	r2, [r7, #0]
 801c776:	8a52      	ldrh	r2, [r2, #18]
 801c778:	441a      	add	r2, r3
 801c77a:	683b      	ldr	r3, [r7, #0]
 801c77c:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 801c77e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c780:	3301      	adds	r3, #1
 801c782:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c784:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c788:	429a      	cmp	r2, r3
 801c78a:	d3cd      	bcc.n	801c728 <encode_array+0x158>
 801c78c:	e06b      	b.n	801c866 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 801c78e:	2300      	movs	r3, #0
 801c790:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c792:	e064      	b.n	801c85e <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 801c794:	683b      	ldr	r3, [r7, #0]
 801c796:	7d9b      	ldrb	r3, [r3, #22]
 801c798:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c79c:	2b80      	cmp	r3, #128	; 0x80
 801c79e:	d147      	bne.n	801c830 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	7d9b      	ldrb	r3, [r3, #22]
 801c7a4:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 801c7a8:	2b07      	cmp	r3, #7
 801c7aa:	d005      	beq.n	801c7b8 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 801c7ac:	683b      	ldr	r3, [r7, #0]
 801c7ae:	7d9b      	ldrb	r3, [r3, #22]
 801c7b0:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 801c7b4:	2b06      	cmp	r3, #6
 801c7b6:	d13b      	bne.n	801c830 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 801c7b8:	683b      	ldr	r3, [r7, #0]
 801c7ba:	69db      	ldr	r3, [r3, #28]
 801c7bc:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 801c7be:	683b      	ldr	r3, [r7, #0]
 801c7c0:	69db      	ldr	r3, [r3, #28]
 801c7c2:	681a      	ldr	r2, [r3, #0]
 801c7c4:	683b      	ldr	r3, [r7, #0]
 801c7c6:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 801c7c8:	683b      	ldr	r3, [r7, #0]
 801c7ca:	69db      	ldr	r3, [r3, #28]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d11c      	bne.n	801c80a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 801c7d0:	6839      	ldr	r1, [r7, #0]
 801c7d2:	6878      	ldr	r0, [r7, #4]
 801c7d4:	f000 fc36 	bl	801d044 <pb_encode_tag_for_field>
 801c7d8:	4603      	mov	r3, r0
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d00b      	beq.n	801c7f6 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 801c7de:	f04f 0200 	mov.w	r2, #0
 801c7e2:	f04f 0300 	mov.w	r3, #0
 801c7e6:	6878      	ldr	r0, [r7, #4]
 801c7e8:	f000 fb7f 	bl	801ceea <pb_encode_varint>
 801c7ec:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d001      	beq.n	801c7f6 <encode_array+0x226>
 801c7f2:	2301      	movs	r3, #1
 801c7f4:	e000      	b.n	801c7f8 <encode_array+0x228>
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c800:	f003 0301 	and.w	r3, r3, #1
 801c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c808:	e006      	b.n	801c818 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 801c80a:	6839      	ldr	r1, [r7, #0]
 801c80c:	6878      	ldr	r0, [r7, #4]
 801c80e:	f000 f951 	bl	801cab4 <encode_basic_field>
 801c812:	4603      	mov	r3, r0
 801c814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 801c818:	683b      	ldr	r3, [r7, #0]
 801c81a:	6a3a      	ldr	r2, [r7, #32]
 801c81c:	61da      	str	r2, [r3, #28]

                if (!status)
 801c81e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c822:	f083 0301 	eor.w	r3, r3, #1
 801c826:	b2db      	uxtb	r3, r3
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d00d      	beq.n	801c848 <encode_array+0x278>
                    return false;
 801c82c:	2300      	movs	r3, #0
 801c82e:	e01b      	b.n	801c868 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 801c830:	6839      	ldr	r1, [r7, #0]
 801c832:	6878      	ldr	r0, [r7, #4]
 801c834:	f000 f93e 	bl	801cab4 <encode_basic_field>
 801c838:	4603      	mov	r3, r0
 801c83a:	f083 0301 	eor.w	r3, r3, #1
 801c83e:	b2db      	uxtb	r3, r3
 801c840:	2b00      	cmp	r3, #0
 801c842:	d002      	beq.n	801c84a <encode_array+0x27a>
                    return false;
 801c844:	2300      	movs	r3, #0
 801c846:	e00f      	b.n	801c868 <encode_array+0x298>
            {
 801c848:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 801c84a:	683b      	ldr	r3, [r7, #0]
 801c84c:	69db      	ldr	r3, [r3, #28]
 801c84e:	683a      	ldr	r2, [r7, #0]
 801c850:	8a52      	ldrh	r2, [r2, #18]
 801c852:	441a      	add	r2, r3
 801c854:	683b      	ldr	r3, [r7, #0]
 801c856:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 801c858:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c85a:	3301      	adds	r3, #1
 801c85c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c85e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c862:	429a      	cmp	r2, r3
 801c864:	d396      	bcc.n	801c794 <encode_array+0x1c4>
        }
    }
    
    return true;
 801c866:	2301      	movs	r3, #1
}
 801c868:	4618      	mov	r0, r3
 801c86a:	3730      	adds	r7, #48	; 0x30
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bdb0      	pop	{r4, r5, r7, pc}
 801c870:	080220c4 	.word	0x080220c4
 801c874:	080220dc 	.word	0x080220dc

0801c878 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	b092      	sub	sp, #72	; 0x48
 801c87c:	af00      	add	r7, sp, #0
 801c87e:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	7d9b      	ldrb	r3, [r3, #22]
 801c884:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 801c888:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c88c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c890:	2b00      	cmp	r3, #0
 801c892:	f040 80c9 	bne.w	801ca28 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 801c896:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c89a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d101      	bne.n	801c8a6 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	e100      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 801c8a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c8aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c8ae:	2b20      	cmp	r3, #32
 801c8b0:	d108      	bne.n	801c8c4 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	6a1b      	ldr	r3, [r3, #32]
 801c8b6:	881b      	ldrh	r3, [r3, #0]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	bf0c      	ite	eq
 801c8bc:	2301      	moveq	r3, #1
 801c8be:	2300      	movne	r3, #0
 801c8c0:	b2db      	uxtb	r3, r3
 801c8c2:	e0f1      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 801c8c4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c8c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c8cc:	2b30      	cmp	r3, #48	; 0x30
 801c8ce:	d108      	bne.n	801c8e2 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	6a1b      	ldr	r3, [r3, #32]
 801c8d4:	881b      	ldrh	r3, [r3, #0]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	bf0c      	ite	eq
 801c8da:	2301      	moveq	r3, #1
 801c8dc:	2300      	movne	r3, #0
 801c8de:	b2db      	uxtb	r3, r3
 801c8e0:	e0e2      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 801c8e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c8e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801c8ea:	2b10      	cmp	r3, #16
 801c8ec:	d115      	bne.n	801c91a <pb_check_proto3_default_value+0xa2>
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	6a1b      	ldr	r3, [r3, #32]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d011      	beq.n	801c91a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	6a1b      	ldr	r3, [r3, #32]
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	f7ff fe4a 	bl	801c594 <safe_read_bool>
 801c900:	4603      	mov	r3, r0
 801c902:	2b00      	cmp	r3, #0
 801c904:	bf14      	ite	ne
 801c906:	2301      	movne	r3, #1
 801c908:	2300      	moveq	r3, #0
 801c90a:	b2db      	uxtb	r3, r3
 801c90c:	f083 0301 	eor.w	r3, r3, #1
 801c910:	b2db      	uxtb	r3, r3
 801c912:	f003 0301 	and.w	r3, r3, #1
 801c916:	b2db      	uxtb	r3, r3
 801c918:	e0c6      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	689b      	ldr	r3, [r3, #8]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d001      	beq.n	801c928 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 801c924:	2300      	movs	r3, #0
 801c926:	e0bf      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 801c928:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c92c:	f003 030f 	and.w	r3, r3, #15
 801c930:	2b05      	cmp	r3, #5
 801c932:	d81c      	bhi.n	801c96e <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	69db      	ldr	r3, [r3, #28]
 801c938:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 801c93a:	2300      	movs	r3, #0
 801c93c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801c940:	e00d      	b.n	801c95e <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 801c942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c948:	4413      	add	r3, r2
 801c94a:	781b      	ldrb	r3, [r3, #0]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d001      	beq.n	801c954 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 801c950:	2300      	movs	r3, #0
 801c952:	e0a9      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 801c954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c958:	3301      	adds	r3, #1
 801c95a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	8a5b      	ldrh	r3, [r3, #18]
 801c962:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c966:	429a      	cmp	r2, r3
 801c968:	d3eb      	bcc.n	801c942 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 801c96a:	2301      	movs	r3, #1
 801c96c:	e09c      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 801c96e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c972:	f003 030f 	and.w	r3, r3, #15
 801c976:	2b06      	cmp	r3, #6
 801c978:	d10a      	bne.n	801c990 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	69db      	ldr	r3, [r3, #28]
 801c97e:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 801c980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c982:	881b      	ldrh	r3, [r3, #0]
 801c984:	2b00      	cmp	r3, #0
 801c986:	bf0c      	ite	eq
 801c988:	2301      	moveq	r3, #1
 801c98a:	2300      	movne	r3, #0
 801c98c:	b2db      	uxtb	r3, r3
 801c98e:	e08b      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 801c990:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c994:	f003 030f 	and.w	r3, r3, #15
 801c998:	2b07      	cmp	r3, #7
 801c99a:	d108      	bne.n	801c9ae <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	69db      	ldr	r3, [r3, #28]
 801c9a0:	781b      	ldrb	r3, [r3, #0]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	bf0c      	ite	eq
 801c9a6:	2301      	moveq	r3, #1
 801c9a8:	2300      	movne	r3, #0
 801c9aa:	b2db      	uxtb	r3, r3
 801c9ac:	e07c      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 801c9ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c9b2:	f003 030f 	and.w	r3, r3, #15
 801c9b6:	2b0b      	cmp	r3, #11
 801c9b8:	d107      	bne.n	801c9ca <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	8a5b      	ldrh	r3, [r3, #18]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	bf0c      	ite	eq
 801c9c2:	2301      	moveq	r3, #1
 801c9c4:	2300      	movne	r3, #0
 801c9c6:	b2db      	uxtb	r3, r3
 801c9c8:	e06e      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 801c9ca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c9ce:	f003 030f 	and.w	r3, r3, #15
 801c9d2:	2b08      	cmp	r3, #8
 801c9d4:	d005      	beq.n	801c9e2 <pb_check_proto3_default_value+0x16a>
 801c9d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801c9da:	f003 030f 	and.w	r3, r3, #15
 801c9de:	2b09      	cmp	r3, #9
 801c9e0:	d161      	bne.n	801caa6 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	69da      	ldr	r2, [r3, #28]
 801c9ea:	f107 030c 	add.w	r3, r7, #12
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f7fd fe37 	bl	801a662 <pb_field_iter_begin>
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d014      	beq.n	801ca24 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 801c9fa:	f107 030c 	add.w	r3, r7, #12
 801c9fe:	4618      	mov	r0, r3
 801ca00:	f7ff ff3a 	bl	801c878 <pb_check_proto3_default_value>
 801ca04:	4603      	mov	r3, r0
 801ca06:	f083 0301 	eor.w	r3, r3, #1
 801ca0a:	b2db      	uxtb	r3, r3
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d001      	beq.n	801ca14 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 801ca10:	2300      	movs	r3, #0
 801ca12:	e049      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 801ca14:	f107 030c 	add.w	r3, r7, #12
 801ca18:	4618      	mov	r0, r3
 801ca1a:	f7fd fe6b 	bl	801a6f4 <pb_field_iter_next>
 801ca1e:	4603      	mov	r3, r0
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d1ea      	bne.n	801c9fa <pb_check_proto3_default_value+0x182>
            }
            return true;
 801ca24:	2301      	movs	r3, #1
 801ca26:	e03f      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 801ca28:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ca30:	2b80      	cmp	r3, #128	; 0x80
 801ca32:	d107      	bne.n	801ca44 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	69db      	ldr	r3, [r3, #28]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	bf0c      	ite	eq
 801ca3c:	2301      	moveq	r3, #1
 801ca3e:	2300      	movne	r3, #0
 801ca40:	b2db      	uxtb	r3, r3
 801ca42:	e031      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 801ca44:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ca4c:	2b40      	cmp	r3, #64	; 0x40
 801ca4e:	d12a      	bne.n	801caa6 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 801ca50:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801ca54:	f003 030f 	and.w	r3, r3, #15
 801ca58:	2b0a      	cmp	r3, #10
 801ca5a:	d10a      	bne.n	801ca72 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	69db      	ldr	r3, [r3, #28]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 801ca64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	bf0c      	ite	eq
 801ca6a:	2301      	moveq	r3, #1
 801ca6c:	2300      	movne	r3, #0
 801ca6e:	b2db      	uxtb	r3, r3
 801ca70:	e01a      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	68db      	ldr	r3, [r3, #12]
 801ca78:	4a0d      	ldr	r2, [pc, #52]	; (801cab0 <pb_check_proto3_default_value+0x238>)
 801ca7a:	4293      	cmp	r3, r2
 801ca7c:	d10a      	bne.n	801ca94 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	69db      	ldr	r3, [r3, #28]
 801ca82:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 801ca84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	bf0c      	ite	eq
 801ca8c:	2301      	moveq	r3, #1
 801ca8e:	2300      	movne	r3, #0
 801ca90:	b2db      	uxtb	r3, r3
 801ca92:	e009      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	68db      	ldr	r3, [r3, #12]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	bf0c      	ite	eq
 801ca9e:	2301      	moveq	r3, #1
 801caa0:	2300      	movne	r3, #0
 801caa2:	b2db      	uxtb	r3, r3
 801caa4:	e000      	b.n	801caa8 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 801caa6:	2300      	movs	r3, #0
}
 801caa8:	4618      	mov	r0, r3
 801caaa:	3748      	adds	r7, #72	; 0x48
 801caac:	46bd      	mov	sp, r7
 801caae:	bd80      	pop	{r7, pc}
 801cab0:	0801a897 	.word	0x0801a897

0801cab4 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801cab4:	b580      	push	{r7, lr}
 801cab6:	b082      	sub	sp, #8
 801cab8:	af00      	add	r7, sp, #0
 801caba:	6078      	str	r0, [r7, #4]
 801cabc:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 801cabe:	683b      	ldr	r3, [r7, #0]
 801cac0:	69db      	ldr	r3, [r3, #28]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d101      	bne.n	801caca <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 801cac6:	2301      	movs	r3, #1
 801cac8:	e061      	b.n	801cb8e <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 801caca:	6839      	ldr	r1, [r7, #0]
 801cacc:	6878      	ldr	r0, [r7, #4]
 801cace:	f000 fab9 	bl	801d044 <pb_encode_tag_for_field>
 801cad2:	4603      	mov	r3, r0
 801cad4:	f083 0301 	eor.w	r3, r3, #1
 801cad8:	b2db      	uxtb	r3, r3
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d001      	beq.n	801cae2 <encode_basic_field+0x2e>
        return false;
 801cade:	2300      	movs	r3, #0
 801cae0:	e055      	b.n	801cb8e <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	7d9b      	ldrb	r3, [r3, #22]
 801cae6:	f003 030f 	and.w	r3, r3, #15
 801caea:	2b0b      	cmp	r3, #11
 801caec:	d844      	bhi.n	801cb78 <encode_basic_field+0xc4>
 801caee:	a201      	add	r2, pc, #4	; (adr r2, 801caf4 <encode_basic_field+0x40>)
 801caf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801caf4:	0801cb25 	.word	0x0801cb25
 801caf8:	0801cb31 	.word	0x0801cb31
 801cafc:	0801cb31 	.word	0x0801cb31
 801cb00:	0801cb31 	.word	0x0801cb31
 801cb04:	0801cb3d 	.word	0x0801cb3d
 801cb08:	0801cb3d 	.word	0x0801cb3d
 801cb0c:	0801cb49 	.word	0x0801cb49
 801cb10:	0801cb55 	.word	0x0801cb55
 801cb14:	0801cb61 	.word	0x0801cb61
 801cb18:	0801cb61 	.word	0x0801cb61
 801cb1c:	0801cb79 	.word	0x0801cb79
 801cb20:	0801cb6d 	.word	0x0801cb6d
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 801cb24:	6839      	ldr	r1, [r7, #0]
 801cb26:	6878      	ldr	r0, [r7, #4]
 801cb28:	f000 fb8a 	bl	801d240 <pb_enc_bool>
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	e02e      	b.n	801cb8e <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 801cb30:	6839      	ldr	r1, [r7, #0]
 801cb32:	6878      	ldr	r0, [r7, #4]
 801cb34:	f000 fb9e 	bl	801d274 <pb_enc_varint>
 801cb38:	4603      	mov	r3, r0
 801cb3a:	e028      	b.n	801cb8e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 801cb3c:	6839      	ldr	r1, [r7, #0]
 801cb3e:	6878      	ldr	r0, [r7, #4]
 801cb40:	f000 fc5a 	bl	801d3f8 <pb_enc_fixed>
 801cb44:	4603      	mov	r3, r0
 801cb46:	e022      	b.n	801cb8e <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 801cb48:	6839      	ldr	r1, [r7, #0]
 801cb4a:	6878      	ldr	r0, [r7, #4]
 801cb4c:	f000 fc82 	bl	801d454 <pb_enc_bytes>
 801cb50:	4603      	mov	r3, r0
 801cb52:	e01c      	b.n	801cb8e <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 801cb54:	6839      	ldr	r1, [r7, #0]
 801cb56:	6878      	ldr	r0, [r7, #4]
 801cb58:	f000 fcba 	bl	801d4d0 <pb_enc_string>
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	e016      	b.n	801cb8e <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 801cb60:	6839      	ldr	r1, [r7, #0]
 801cb62:	6878      	ldr	r0, [r7, #4]
 801cb64:	f000 fd12 	bl	801d58c <pb_enc_submessage>
 801cb68:	4603      	mov	r3, r0
 801cb6a:	e010      	b.n	801cb8e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 801cb6c:	6839      	ldr	r1, [r7, #0]
 801cb6e:	6878      	ldr	r0, [r7, #4]
 801cb70:	f000 fd52 	bl	801d618 <pb_enc_fixed_length_bytes>
 801cb74:	4603      	mov	r3, r0
 801cb76:	e00a      	b.n	801cb8e <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	691b      	ldr	r3, [r3, #16]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d002      	beq.n	801cb86 <encode_basic_field+0xd2>
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	691b      	ldr	r3, [r3, #16]
 801cb84:	e000      	b.n	801cb88 <encode_basic_field+0xd4>
 801cb86:	4b04      	ldr	r3, [pc, #16]	; (801cb98 <encode_basic_field+0xe4>)
 801cb88:	687a      	ldr	r2, [r7, #4]
 801cb8a:	6113      	str	r3, [r2, #16]
 801cb8c:	2300      	movs	r3, #0
    }
}
 801cb8e:	4618      	mov	r0, r3
 801cb90:	3708      	adds	r7, #8
 801cb92:	46bd      	mov	sp, r7
 801cb94:	bd80      	pop	{r7, pc}
 801cb96:	bf00      	nop
 801cb98:	080220e4 	.word	0x080220e4

0801cb9c <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801cb9c:	b580      	push	{r7, lr}
 801cb9e:	b082      	sub	sp, #8
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	6078      	str	r0, [r7, #4]
 801cba4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	68db      	ldr	r3, [r3, #12]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d018      	beq.n	801cbe2 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 801cbb0:	683b      	ldr	r3, [r7, #0]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	68db      	ldr	r3, [r3, #12]
 801cbb6:	683a      	ldr	r2, [r7, #0]
 801cbb8:	6879      	ldr	r1, [r7, #4]
 801cbba:	2000      	movs	r0, #0
 801cbbc:	4798      	blx	r3
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	f083 0301 	eor.w	r3, r3, #1
 801cbc4:	b2db      	uxtb	r3, r3
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d00b      	beq.n	801cbe2 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	691b      	ldr	r3, [r3, #16]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d002      	beq.n	801cbd8 <encode_callback_field+0x3c>
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	691b      	ldr	r3, [r3, #16]
 801cbd6:	e000      	b.n	801cbda <encode_callback_field+0x3e>
 801cbd8:	4b04      	ldr	r3, [pc, #16]	; (801cbec <encode_callback_field+0x50>)
 801cbda:	687a      	ldr	r2, [r7, #4]
 801cbdc:	6113      	str	r3, [r2, #16]
 801cbde:	2300      	movs	r3, #0
 801cbe0:	e000      	b.n	801cbe4 <encode_callback_field+0x48>
    }
    return true;
 801cbe2:	2301      	movs	r3, #1
}
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	3708      	adds	r7, #8
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	bd80      	pop	{r7, pc}
 801cbec:	080220f8 	.word	0x080220f8

0801cbf0 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b082      	sub	sp, #8
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
 801cbf8:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 801cbfa:	683b      	ldr	r3, [r7, #0]
 801cbfc:	7d9b      	ldrb	r3, [r3, #22]
 801cbfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cc02:	2b30      	cmp	r3, #48	; 0x30
 801cc04:	d108      	bne.n	801cc18 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 801cc06:	683b      	ldr	r3, [r7, #0]
 801cc08:	6a1b      	ldr	r3, [r3, #32]
 801cc0a:	881a      	ldrh	r2, [r3, #0]
 801cc0c:	683b      	ldr	r3, [r7, #0]
 801cc0e:	8a1b      	ldrh	r3, [r3, #16]
 801cc10:	429a      	cmp	r2, r3
 801cc12:	d026      	beq.n	801cc62 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 801cc14:	2301      	movs	r3, #1
 801cc16:	e059      	b.n	801cccc <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	7d9b      	ldrb	r3, [r3, #22]
 801cc1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cc20:	2b10      	cmp	r3, #16
 801cc22:	d11e      	bne.n	801cc62 <encode_field+0x72>
    {
        if (field->pSize)
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	6a1b      	ldr	r3, [r3, #32]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d00c      	beq.n	801cc46 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	6a1b      	ldr	r3, [r3, #32]
 801cc30:	4618      	mov	r0, r3
 801cc32:	f7ff fcaf 	bl	801c594 <safe_read_bool>
 801cc36:	4603      	mov	r3, r0
 801cc38:	f083 0301 	eor.w	r3, r3, #1
 801cc3c:	b2db      	uxtb	r3, r3
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d00f      	beq.n	801cc62 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 801cc42:	2301      	movs	r3, #1
 801cc44:	e042      	b.n	801cccc <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 801cc46:	683b      	ldr	r3, [r7, #0]
 801cc48:	7d9b      	ldrb	r3, [r3, #22]
 801cc4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d107      	bne.n	801cc62 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 801cc52:	6838      	ldr	r0, [r7, #0]
 801cc54:	f7ff fe10 	bl	801c878 <pb_check_proto3_default_value>
 801cc58:	4603      	mov	r3, r0
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d001      	beq.n	801cc62 <encode_field+0x72>
                return true;
 801cc5e:	2301      	movs	r3, #1
 801cc60:	e034      	b.n	801cccc <encode_field+0xdc>
        }
    }

    if (!field->pData)
 801cc62:	683b      	ldr	r3, [r7, #0]
 801cc64:	69db      	ldr	r3, [r3, #28]
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d113      	bne.n	801cc92 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 801cc6a:	683b      	ldr	r3, [r7, #0]
 801cc6c:	7d9b      	ldrb	r3, [r3, #22]
 801cc6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d10b      	bne.n	801cc8e <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	691b      	ldr	r3, [r3, #16]
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d002      	beq.n	801cc84 <encode_field+0x94>
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	691b      	ldr	r3, [r3, #16]
 801cc82:	e000      	b.n	801cc86 <encode_field+0x96>
 801cc84:	4b13      	ldr	r3, [pc, #76]	; (801ccd4 <encode_field+0xe4>)
 801cc86:	687a      	ldr	r2, [r7, #4]
 801cc88:	6113      	str	r3, [r2, #16]
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	e01e      	b.n	801cccc <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 801cc8e:	2301      	movs	r3, #1
 801cc90:	e01c      	b.n	801cccc <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 801cc92:	683b      	ldr	r3, [r7, #0]
 801cc94:	7d9b      	ldrb	r3, [r3, #22]
 801cc96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cc9a:	2b40      	cmp	r3, #64	; 0x40
 801cc9c:	d105      	bne.n	801ccaa <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 801cc9e:	6839      	ldr	r1, [r7, #0]
 801cca0:	6878      	ldr	r0, [r7, #4]
 801cca2:	f7ff ff7b 	bl	801cb9c <encode_callback_field>
 801cca6:	4603      	mov	r3, r0
 801cca8:	e010      	b.n	801cccc <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 801ccaa:	683b      	ldr	r3, [r7, #0]
 801ccac:	7d9b      	ldrb	r3, [r3, #22]
 801ccae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ccb2:	2b20      	cmp	r3, #32
 801ccb4:	d105      	bne.n	801ccc2 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 801ccb6:	6839      	ldr	r1, [r7, #0]
 801ccb8:	6878      	ldr	r0, [r7, #4]
 801ccba:	f7ff fc89 	bl	801c5d0 <encode_array>
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	e004      	b.n	801cccc <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 801ccc2:	6839      	ldr	r1, [r7, #0]
 801ccc4:	6878      	ldr	r0, [r7, #4]
 801ccc6:	f7ff fef5 	bl	801cab4 <encode_basic_field>
 801ccca:	4603      	mov	r3, r0
    }
}
 801cccc:	4618      	mov	r0, r3
 801ccce:	3708      	adds	r7, #8
 801ccd0:	46bd      	mov	sp, r7
 801ccd2:	bd80      	pop	{r7, pc}
 801ccd4:	08022108 	.word	0x08022108

0801ccd8 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 801ccd8:	b580      	push	{r7, lr}
 801ccda:	b08c      	sub	sp, #48	; 0x30
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
 801cce0:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 801cce2:	f107 0308 	add.w	r3, r7, #8
 801cce6:	6839      	ldr	r1, [r7, #0]
 801cce8:	4618      	mov	r0, r3
 801ccea:	f7fd fdc2 	bl	801a872 <pb_field_iter_begin_extension_const>
 801ccee:	4603      	mov	r3, r0
 801ccf0:	f083 0301 	eor.w	r3, r3, #1
 801ccf4:	b2db      	uxtb	r3, r3
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d00b      	beq.n	801cd12 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	691b      	ldr	r3, [r3, #16]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d002      	beq.n	801cd08 <default_extension_encoder+0x30>
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	691b      	ldr	r3, [r3, #16]
 801cd06:	e000      	b.n	801cd0a <default_extension_encoder+0x32>
 801cd08:	4b07      	ldr	r3, [pc, #28]	; (801cd28 <default_extension_encoder+0x50>)
 801cd0a:	687a      	ldr	r2, [r7, #4]
 801cd0c:	6113      	str	r3, [r2, #16]
 801cd0e:	2300      	movs	r3, #0
 801cd10:	e006      	b.n	801cd20 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 801cd12:	f107 0308 	add.w	r3, r7, #8
 801cd16:	4619      	mov	r1, r3
 801cd18:	6878      	ldr	r0, [r7, #4]
 801cd1a:	f7ff ff69 	bl	801cbf0 <encode_field>
 801cd1e:	4603      	mov	r3, r0
}
 801cd20:	4618      	mov	r0, r3
 801cd22:	3730      	adds	r7, #48	; 0x30
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}
 801cd28:	08022120 	.word	0x08022120

0801cd2c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b084      	sub	sp, #16
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	6078      	str	r0, [r7, #4]
 801cd34:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 801cd36:	683b      	ldr	r3, [r7, #0]
 801cd38:	69db      	ldr	r3, [r3, #28]
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	60fb      	str	r3, [r7, #12]

    while (extension)
 801cd3e:	e01e      	b.n	801cd7e <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	685b      	ldr	r3, [r3, #4]
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d008      	beq.n	801cd5c <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	685b      	ldr	r3, [r3, #4]
 801cd50:	68f9      	ldr	r1, [r7, #12]
 801cd52:	6878      	ldr	r0, [r7, #4]
 801cd54:	4798      	blx	r3
 801cd56:	4603      	mov	r3, r0
 801cd58:	72fb      	strb	r3, [r7, #11]
 801cd5a:	e005      	b.n	801cd68 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 801cd5c:	68f9      	ldr	r1, [r7, #12]
 801cd5e:	6878      	ldr	r0, [r7, #4]
 801cd60:	f7ff ffba 	bl	801ccd8 <default_extension_encoder>
 801cd64:	4603      	mov	r3, r0
 801cd66:	72fb      	strb	r3, [r7, #11]

        if (!status)
 801cd68:	7afb      	ldrb	r3, [r7, #11]
 801cd6a:	f083 0301 	eor.w	r3, r3, #1
 801cd6e:	b2db      	uxtb	r3, r3
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d001      	beq.n	801cd78 <encode_extension_field+0x4c>
            return false;
 801cd74:	2300      	movs	r3, #0
 801cd76:	e006      	b.n	801cd86 <encode_extension_field+0x5a>
        
        extension = extension->next;
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	689b      	ldr	r3, [r3, #8]
 801cd7c:	60fb      	str	r3, [r7, #12]
    while (extension)
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d1dd      	bne.n	801cd40 <encode_extension_field+0x14>
    }
    
    return true;
 801cd84:	2301      	movs	r3, #1
}
 801cd86:	4618      	mov	r0, r3
 801cd88:	3710      	adds	r7, #16
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	bd80      	pop	{r7, pc}

0801cd8e <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 801cd8e:	b580      	push	{r7, lr}
 801cd90:	b08e      	sub	sp, #56	; 0x38
 801cd92:	af00      	add	r7, sp, #0
 801cd94:	60f8      	str	r0, [r7, #12]
 801cd96:	60b9      	str	r1, [r7, #8]
 801cd98:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 801cd9a:	f107 0310 	add.w	r3, r7, #16
 801cd9e:	687a      	ldr	r2, [r7, #4]
 801cda0:	68b9      	ldr	r1, [r7, #8]
 801cda2:	4618      	mov	r0, r3
 801cda4:	f7fd fd51 	bl	801a84a <pb_field_iter_begin_const>
 801cda8:	4603      	mov	r3, r0
 801cdaa:	f083 0301 	eor.w	r3, r3, #1
 801cdae:	b2db      	uxtb	r3, r3
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d001      	beq.n	801cdb8 <pb_encode+0x2a>
        return true; /* Empty message type */
 801cdb4:	2301      	movs	r3, #1
 801cdb6:	e02a      	b.n	801ce0e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 801cdb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cdbc:	f003 030f 	and.w	r3, r3, #15
 801cdc0:	2b0a      	cmp	r3, #10
 801cdc2:	d10d      	bne.n	801cde0 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 801cdc4:	f107 0310 	add.w	r3, r7, #16
 801cdc8:	4619      	mov	r1, r3
 801cdca:	68f8      	ldr	r0, [r7, #12]
 801cdcc:	f7ff ffae 	bl	801cd2c <encode_extension_field>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	f083 0301 	eor.w	r3, r3, #1
 801cdd6:	b2db      	uxtb	r3, r3
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d00f      	beq.n	801cdfc <pb_encode+0x6e>
                return false;
 801cddc:	2300      	movs	r3, #0
 801cdde:	e016      	b.n	801ce0e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 801cde0:	f107 0310 	add.w	r3, r7, #16
 801cde4:	4619      	mov	r1, r3
 801cde6:	68f8      	ldr	r0, [r7, #12]
 801cde8:	f7ff ff02 	bl	801cbf0 <encode_field>
 801cdec:	4603      	mov	r3, r0
 801cdee:	f083 0301 	eor.w	r3, r3, #1
 801cdf2:	b2db      	uxtb	r3, r3
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d001      	beq.n	801cdfc <pb_encode+0x6e>
                return false;
 801cdf8:	2300      	movs	r3, #0
 801cdfa:	e008      	b.n	801ce0e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 801cdfc:	f107 0310 	add.w	r3, r7, #16
 801ce00:	4618      	mov	r0, r3
 801ce02:	f7fd fc77 	bl	801a6f4 <pb_field_iter_next>
 801ce06:	4603      	mov	r3, r0
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d1d5      	bne.n	801cdb8 <pb_encode+0x2a>
    
    return true;
 801ce0c:	2301      	movs	r3, #1
}
 801ce0e:	4618      	mov	r0, r3
 801ce10:	3738      	adds	r7, #56	; 0x38
 801ce12:	46bd      	mov	sp, r7
 801ce14:	bd80      	pop	{r7, pc}

0801ce16 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 801ce16:	b580      	push	{r7, lr}
 801ce18:	b088      	sub	sp, #32
 801ce1a:	af00      	add	r7, sp, #0
 801ce1c:	60f8      	str	r0, [r7, #12]
 801ce1e:	60b9      	str	r1, [r7, #8]
 801ce20:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801ce22:	2300      	movs	r3, #0
 801ce24:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 801ce26:	68bb      	ldr	r3, [r7, #8]
 801ce28:	b2db      	uxtb	r3, r3
 801ce2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce2e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 801ce30:	68bb      	ldr	r3, [r7, #8]
 801ce32:	09db      	lsrs	r3, r3, #7
 801ce34:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 801ce36:	e013      	b.n	801ce60 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 801ce38:	7efb      	ldrb	r3, [r7, #27]
 801ce3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ce3e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 801ce40:	69fb      	ldr	r3, [r7, #28]
 801ce42:	1c5a      	adds	r2, r3, #1
 801ce44:	61fa      	str	r2, [r7, #28]
 801ce46:	3320      	adds	r3, #32
 801ce48:	443b      	add	r3, r7
 801ce4a:	7efa      	ldrb	r2, [r7, #27]
 801ce4c:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 801ce50:	68bb      	ldr	r3, [r7, #8]
 801ce52:	b2db      	uxtb	r3, r3
 801ce54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce58:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 801ce5a:	68bb      	ldr	r3, [r7, #8]
 801ce5c:	09db      	lsrs	r3, r3, #7
 801ce5e:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 801ce60:	69fb      	ldr	r3, [r7, #28]
 801ce62:	2b03      	cmp	r3, #3
 801ce64:	d805      	bhi.n	801ce72 <pb_encode_varint_32+0x5c>
 801ce66:	68bb      	ldr	r3, [r7, #8]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d1e5      	bne.n	801ce38 <pb_encode_varint_32+0x22>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d1e2      	bne.n	801ce38 <pb_encode_varint_32+0x22>
    }

    if (high)
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d024      	beq.n	801cec2 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	b2db      	uxtb	r3, r3
 801ce7c:	011b      	lsls	r3, r3, #4
 801ce7e:	b2db      	uxtb	r3, r3
 801ce80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801ce84:	b2da      	uxtb	r2, r3
 801ce86:	7efb      	ldrb	r3, [r7, #27]
 801ce88:	4313      	orrs	r3, r2
 801ce8a:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	08db      	lsrs	r3, r3, #3
 801ce90:	607b      	str	r3, [r7, #4]

        while (high)
 801ce92:	e013      	b.n	801cebc <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 801ce94:	7efb      	ldrb	r3, [r7, #27]
 801ce96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ce9a:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 801ce9c:	69fb      	ldr	r3, [r7, #28]
 801ce9e:	1c5a      	adds	r2, r3, #1
 801cea0:	61fa      	str	r2, [r7, #28]
 801cea2:	3320      	adds	r3, #32
 801cea4:	443b      	add	r3, r7
 801cea6:	7efa      	ldrb	r2, [r7, #27]
 801cea8:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	b2db      	uxtb	r3, r3
 801ceb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ceb4:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	09db      	lsrs	r3, r3, #7
 801ceba:	607b      	str	r3, [r7, #4]
        while (high)
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d1e8      	bne.n	801ce94 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 801cec2:	69fb      	ldr	r3, [r7, #28]
 801cec4:	1c5a      	adds	r2, r3, #1
 801cec6:	61fa      	str	r2, [r7, #28]
 801cec8:	3320      	adds	r3, #32
 801ceca:	443b      	add	r3, r7
 801cecc:	7efa      	ldrb	r2, [r7, #27]
 801cece:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 801ced2:	f107 0310 	add.w	r3, r7, #16
 801ced6:	69fa      	ldr	r2, [r7, #28]
 801ced8:	4619      	mov	r1, r3
 801ceda:	68f8      	ldr	r0, [r7, #12]
 801cedc:	f7ff fb0a 	bl	801c4f4 <pb_write>
 801cee0:	4603      	mov	r3, r0
}
 801cee2:	4618      	mov	r0, r3
 801cee4:	3720      	adds	r7, #32
 801cee6:	46bd      	mov	sp, r7
 801cee8:	bd80      	pop	{r7, pc}

0801ceea <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 801ceea:	b590      	push	{r4, r7, lr}
 801ceec:	b087      	sub	sp, #28
 801ceee:	af00      	add	r7, sp, #0
 801cef0:	60f8      	str	r0, [r7, #12]
 801cef2:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 801cef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cefa:	2a80      	cmp	r2, #128	; 0x80
 801cefc:	f173 0300 	sbcs.w	r3, r3, #0
 801cf00:	d20a      	bcs.n	801cf18 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 801cf02:	783b      	ldrb	r3, [r7, #0]
 801cf04:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 801cf06:	f107 0317 	add.w	r3, r7, #23
 801cf0a:	2201      	movs	r2, #1
 801cf0c:	4619      	mov	r1, r3
 801cf0e:	68f8      	ldr	r0, [r7, #12]
 801cf10:	f7ff faf0 	bl	801c4f4 <pb_write>
 801cf14:	4603      	mov	r3, r0
 801cf16:	e00f      	b.n	801cf38 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 801cf18:	683c      	ldr	r4, [r7, #0]
 801cf1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801cf1e:	f04f 0200 	mov.w	r2, #0
 801cf22:	f04f 0300 	mov.w	r3, #0
 801cf26:	000a      	movs	r2, r1
 801cf28:	2300      	movs	r3, #0
 801cf2a:	4613      	mov	r3, r2
 801cf2c:	461a      	mov	r2, r3
 801cf2e:	4621      	mov	r1, r4
 801cf30:	68f8      	ldr	r0, [r7, #12]
 801cf32:	f7ff ff70 	bl	801ce16 <pb_encode_varint_32>
 801cf36:	4603      	mov	r3, r0
#endif
    }
}
 801cf38:	4618      	mov	r0, r3
 801cf3a:	371c      	adds	r7, #28
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bd90      	pop	{r4, r7, pc}

0801cf40 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 801cf40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cf44:	b08a      	sub	sp, #40	; 0x28
 801cf46:	af00      	add	r7, sp, #0
 801cf48:	6178      	str	r0, [r7, #20]
 801cf4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 801cf4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cf52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801cf56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 801cf5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	da15      	bge.n	801cf8e <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 801cf62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801cf66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cf6a:	ea00 0402 	and.w	r4, r0, r2
 801cf6e:	ea01 0503 	and.w	r5, r1, r3
 801cf72:	1923      	adds	r3, r4, r4
 801cf74:	603b      	str	r3, [r7, #0]
 801cf76:	eb45 0305 	adc.w	r3, r5, r5
 801cf7a:	607b      	str	r3, [r7, #4]
 801cf7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cf80:	ea6f 0a02 	mvn.w	sl, r2
 801cf84:	ea6f 0b03 	mvn.w	fp, r3
 801cf88:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 801cf8c:	e007      	b.n	801cf9e <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 801cf8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cf92:	eb12 0802 	adds.w	r8, r2, r2
 801cf96:	eb43 0903 	adc.w	r9, r3, r3
 801cf9a:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 801cf9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cfa2:	6978      	ldr	r0, [r7, #20]
 801cfa4:	f7ff ffa1 	bl	801ceea <pb_encode_varint>
 801cfa8:	4603      	mov	r3, r0
}
 801cfaa:	4618      	mov	r0, r3
 801cfac:	3728      	adds	r7, #40	; 0x28
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801cfb4 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b082      	sub	sp, #8
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	6078      	str	r0, [r7, #4]
 801cfbc:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 801cfbe:	2204      	movs	r2, #4
 801cfc0:	6839      	ldr	r1, [r7, #0]
 801cfc2:	6878      	ldr	r0, [r7, #4]
 801cfc4:	f7ff fa96 	bl	801c4f4 <pb_write>
 801cfc8:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 801cfca:	4618      	mov	r0, r3
 801cfcc:	3708      	adds	r7, #8
 801cfce:	46bd      	mov	sp, r7
 801cfd0:	bd80      	pop	{r7, pc}

0801cfd2 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 801cfd2:	b580      	push	{r7, lr}
 801cfd4:	b082      	sub	sp, #8
 801cfd6:	af00      	add	r7, sp, #0
 801cfd8:	6078      	str	r0, [r7, #4]
 801cfda:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 801cfdc:	2208      	movs	r2, #8
 801cfde:	6839      	ldr	r1, [r7, #0]
 801cfe0:	6878      	ldr	r0, [r7, #4]
 801cfe2:	f7ff fa87 	bl	801c4f4 <pb_write>
 801cfe6:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 801cfe8:	4618      	mov	r0, r3
 801cfea:	3708      	adds	r7, #8
 801cfec:	46bd      	mov	sp, r7
 801cfee:	bd80      	pop	{r7, pc}

0801cff0 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 801cff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cff4:	b088      	sub	sp, #32
 801cff6:	af00      	add	r7, sp, #0
 801cff8:	6178      	str	r0, [r7, #20]
 801cffa:	460b      	mov	r3, r1
 801cffc:	60fa      	str	r2, [r7, #12]
 801cffe:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	2200      	movs	r2, #0
 801d004:	469a      	mov	sl, r3
 801d006:	4693      	mov	fp, r2
 801d008:	ea4f 755a 	mov.w	r5, sl, lsr #29
 801d00c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 801d010:	7cfb      	ldrb	r3, [r7, #19]
 801d012:	2200      	movs	r2, #0
 801d014:	4698      	mov	r8, r3
 801d016:	4691      	mov	r9, r2
 801d018:	ea44 0308 	orr.w	r3, r4, r8
 801d01c:	603b      	str	r3, [r7, #0]
 801d01e:	ea45 0309 	orr.w	r3, r5, r9
 801d022:	607b      	str	r3, [r7, #4]
 801d024:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d028:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 801d02c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d030:	6978      	ldr	r0, [r7, #20]
 801d032:	f7ff ff5a 	bl	801ceea <pb_encode_varint>
 801d036:	4603      	mov	r3, r0
}
 801d038:	4618      	mov	r0, r3
 801d03a:	3720      	adds	r7, #32
 801d03c:	46bd      	mov	sp, r7
 801d03e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0801d044 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 801d044:	b580      	push	{r7, lr}
 801d046:	b084      	sub	sp, #16
 801d048:	af00      	add	r7, sp, #0
 801d04a:	6078      	str	r0, [r7, #4]
 801d04c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 801d04e:	683b      	ldr	r3, [r7, #0]
 801d050:	7d9b      	ldrb	r3, [r3, #22]
 801d052:	f003 030f 	and.w	r3, r3, #15
 801d056:	2b0b      	cmp	r3, #11
 801d058:	d826      	bhi.n	801d0a8 <pb_encode_tag_for_field+0x64>
 801d05a:	a201      	add	r2, pc, #4	; (adr r2, 801d060 <pb_encode_tag_for_field+0x1c>)
 801d05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d060:	0801d091 	.word	0x0801d091
 801d064:	0801d091 	.word	0x0801d091
 801d068:	0801d091 	.word	0x0801d091
 801d06c:	0801d091 	.word	0x0801d091
 801d070:	0801d097 	.word	0x0801d097
 801d074:	0801d09d 	.word	0x0801d09d
 801d078:	0801d0a3 	.word	0x0801d0a3
 801d07c:	0801d0a3 	.word	0x0801d0a3
 801d080:	0801d0a3 	.word	0x0801d0a3
 801d084:	0801d0a3 	.word	0x0801d0a3
 801d088:	0801d0a9 	.word	0x0801d0a9
 801d08c:	0801d0a3 	.word	0x0801d0a3
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 801d090:	2300      	movs	r3, #0
 801d092:	73fb      	strb	r3, [r7, #15]
            break;
 801d094:	e014      	b.n	801d0c0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 801d096:	2305      	movs	r3, #5
 801d098:	73fb      	strb	r3, [r7, #15]
            break;
 801d09a:	e011      	b.n	801d0c0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 801d09c:	2301      	movs	r3, #1
 801d09e:	73fb      	strb	r3, [r7, #15]
            break;
 801d0a0:	e00e      	b.n	801d0c0 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 801d0a2:	2302      	movs	r3, #2
 801d0a4:	73fb      	strb	r3, [r7, #15]
            break;
 801d0a6:	e00b      	b.n	801d0c0 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	691b      	ldr	r3, [r3, #16]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d002      	beq.n	801d0b6 <pb_encode_tag_for_field+0x72>
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	691b      	ldr	r3, [r3, #16]
 801d0b4:	e000      	b.n	801d0b8 <pb_encode_tag_for_field+0x74>
 801d0b6:	4b09      	ldr	r3, [pc, #36]	; (801d0dc <pb_encode_tag_for_field+0x98>)
 801d0b8:	687a      	ldr	r2, [r7, #4]
 801d0ba:	6113      	str	r3, [r2, #16]
 801d0bc:	2300      	movs	r3, #0
 801d0be:	e008      	b.n	801d0d2 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 801d0c0:	683b      	ldr	r3, [r7, #0]
 801d0c2:	8a1b      	ldrh	r3, [r3, #16]
 801d0c4:	461a      	mov	r2, r3
 801d0c6:	7bfb      	ldrb	r3, [r7, #15]
 801d0c8:	4619      	mov	r1, r3
 801d0ca:	6878      	ldr	r0, [r7, #4]
 801d0cc:	f7ff ff90 	bl	801cff0 <pb_encode_tag>
 801d0d0:	4603      	mov	r3, r0
}
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	3710      	adds	r7, #16
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	bd80      	pop	{r7, pc}
 801d0da:	bf00      	nop
 801d0dc:	080220e4 	.word	0x080220e4

0801d0e0 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 801d0e0:	b5b0      	push	{r4, r5, r7, lr}
 801d0e2:	b084      	sub	sp, #16
 801d0e4:	af00      	add	r7, sp, #0
 801d0e6:	60f8      	str	r0, [r7, #12]
 801d0e8:	60b9      	str	r1, [r7, #8]
 801d0ea:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	2200      	movs	r2, #0
 801d0f0:	461c      	mov	r4, r3
 801d0f2:	4615      	mov	r5, r2
 801d0f4:	4622      	mov	r2, r4
 801d0f6:	462b      	mov	r3, r5
 801d0f8:	68f8      	ldr	r0, [r7, #12]
 801d0fa:	f7ff fef6 	bl	801ceea <pb_encode_varint>
 801d0fe:	4603      	mov	r3, r0
 801d100:	f083 0301 	eor.w	r3, r3, #1
 801d104:	b2db      	uxtb	r3, r3
 801d106:	2b00      	cmp	r3, #0
 801d108:	d001      	beq.n	801d10e <pb_encode_string+0x2e>
        return false;
 801d10a:	2300      	movs	r3, #0
 801d10c:	e005      	b.n	801d11a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 801d10e:	687a      	ldr	r2, [r7, #4]
 801d110:	68b9      	ldr	r1, [r7, #8]
 801d112:	68f8      	ldr	r0, [r7, #12]
 801d114:	f7ff f9ee 	bl	801c4f4 <pb_write>
 801d118:	4603      	mov	r3, r0
}
 801d11a:	4618      	mov	r0, r3
 801d11c:	3710      	adds	r7, #16
 801d11e:	46bd      	mov	sp, r7
 801d120:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d124 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 801d124:	b5b0      	push	{r4, r5, r7, lr}
 801d126:	b08c      	sub	sp, #48	; 0x30
 801d128:	af00      	add	r7, sp, #0
 801d12a:	60f8      	str	r0, [r7, #12]
 801d12c:	60b9      	str	r1, [r7, #8]
 801d12e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 801d130:	f107 0314 	add.w	r3, r7, #20
 801d134:	2200      	movs	r2, #0
 801d136:	601a      	str	r2, [r3, #0]
 801d138:	605a      	str	r2, [r3, #4]
 801d13a:	609a      	str	r2, [r3, #8]
 801d13c:	60da      	str	r2, [r3, #12]
 801d13e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 801d140:	f107 0314 	add.w	r3, r7, #20
 801d144:	687a      	ldr	r2, [r7, #4]
 801d146:	68b9      	ldr	r1, [r7, #8]
 801d148:	4618      	mov	r0, r3
 801d14a:	f7ff fe20 	bl	801cd8e <pb_encode>
 801d14e:	4603      	mov	r3, r0
 801d150:	f083 0301 	eor.w	r3, r3, #1
 801d154:	b2db      	uxtb	r3, r3
 801d156:	2b00      	cmp	r3, #0
 801d158:	d004      	beq.n	801d164 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 801d15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	611a      	str	r2, [r3, #16]
#endif
        return false;
 801d160:	2300      	movs	r3, #0
 801d162:	e065      	b.n	801d230 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 801d164:	6a3b      	ldr	r3, [r7, #32]
 801d166:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 801d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d16a:	2200      	movs	r2, #0
 801d16c:	461c      	mov	r4, r3
 801d16e:	4615      	mov	r5, r2
 801d170:	4622      	mov	r2, r4
 801d172:	462b      	mov	r3, r5
 801d174:	68f8      	ldr	r0, [r7, #12]
 801d176:	f7ff feb8 	bl	801ceea <pb_encode_varint>
 801d17a:	4603      	mov	r3, r0
 801d17c:	f083 0301 	eor.w	r3, r3, #1
 801d180:	b2db      	uxtb	r3, r3
 801d182:	2b00      	cmp	r3, #0
 801d184:	d001      	beq.n	801d18a <pb_encode_submessage+0x66>
        return false;
 801d186:	2300      	movs	r3, #0
 801d188:	e052      	b.n	801d230 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d106      	bne.n	801d1a0 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 801d192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d194:	2100      	movs	r1, #0
 801d196:	68f8      	ldr	r0, [r7, #12]
 801d198:	f7ff f9ac 	bl	801c4f4 <pb_write>
 801d19c:	4603      	mov	r3, r0
 801d19e:	e047      	b.n	801d230 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	68da      	ldr	r2, [r3, #12]
 801d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1a6:	441a      	add	r2, r3
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	689b      	ldr	r3, [r3, #8]
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	d90b      	bls.n	801d1c8 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	691b      	ldr	r3, [r3, #16]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d002      	beq.n	801d1be <pb_encode_submessage+0x9a>
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	691b      	ldr	r3, [r3, #16]
 801d1bc:	e000      	b.n	801d1c0 <pb_encode_submessage+0x9c>
 801d1be:	4b1e      	ldr	r3, [pc, #120]	; (801d238 <pb_encode_submessage+0x114>)
 801d1c0:	68fa      	ldr	r2, [r7, #12]
 801d1c2:	6113      	str	r3, [r2, #16]
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	e033      	b.n	801d230 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	685b      	ldr	r3, [r3, #4]
 801d1d2:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 801d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1d6:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 801d1d8:	2300      	movs	r3, #0
 801d1da:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 801d1dc:	2300      	movs	r3, #0
 801d1de:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 801d1e0:	f107 0314 	add.w	r3, r7, #20
 801d1e4:	687a      	ldr	r2, [r7, #4]
 801d1e6:	68b9      	ldr	r1, [r7, #8]
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	f7ff fdd0 	bl	801cd8e <pb_encode>
 801d1ee:	4603      	mov	r3, r0
 801d1f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	68da      	ldr	r2, [r3, #12]
 801d1f8:	6a3b      	ldr	r3, [r7, #32]
 801d1fa:	441a      	add	r2, r3
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 801d200:	69ba      	ldr	r2, [r7, #24]
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 801d206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 801d20c:	6a3b      	ldr	r3, [r7, #32]
 801d20e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d210:	429a      	cmp	r2, r3
 801d212:	d00b      	beq.n	801d22c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	691b      	ldr	r3, [r3, #16]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d002      	beq.n	801d222 <pb_encode_submessage+0xfe>
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	691b      	ldr	r3, [r3, #16]
 801d220:	e000      	b.n	801d224 <pb_encode_submessage+0x100>
 801d222:	4b06      	ldr	r3, [pc, #24]	; (801d23c <pb_encode_submessage+0x118>)
 801d224:	68fa      	ldr	r2, [r7, #12]
 801d226:	6113      	str	r3, [r2, #16]
 801d228:	2300      	movs	r3, #0
 801d22a:	e001      	b.n	801d230 <pb_encode_submessage+0x10c>
    
    return status;
 801d22c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801d230:	4618      	mov	r0, r3
 801d232:	3730      	adds	r7, #48	; 0x30
 801d234:	46bd      	mov	sp, r7
 801d236:	bdb0      	pop	{r4, r5, r7, pc}
 801d238:	080220ac 	.word	0x080220ac
 801d23c:	08022134 	.word	0x08022134

0801d240 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d240:	b5b0      	push	{r4, r5, r7, lr}
 801d242:	b084      	sub	sp, #16
 801d244:	af00      	add	r7, sp, #0
 801d246:	6078      	str	r0, [r7, #4]
 801d248:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 801d24a:	683b      	ldr	r3, [r7, #0]
 801d24c:	69db      	ldr	r3, [r3, #28]
 801d24e:	4618      	mov	r0, r3
 801d250:	f7ff f9a0 	bl	801c594 <safe_read_bool>
 801d254:	4603      	mov	r3, r0
 801d256:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	2200      	movs	r2, #0
 801d25c:	461c      	mov	r4, r3
 801d25e:	4615      	mov	r5, r2
 801d260:	4622      	mov	r2, r4
 801d262:	462b      	mov	r3, r5
 801d264:	6878      	ldr	r0, [r7, #4]
 801d266:	f7ff fe40 	bl	801ceea <pb_encode_varint>
 801d26a:	4603      	mov	r3, r0
}
 801d26c:	4618      	mov	r0, r3
 801d26e:	3710      	adds	r7, #16
 801d270:	46bd      	mov	sp, r7
 801d272:	bdb0      	pop	{r4, r5, r7, pc}

0801d274 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d278:	b08c      	sub	sp, #48	; 0x30
 801d27a:	af00      	add	r7, sp, #0
 801d27c:	61f8      	str	r0, [r7, #28]
 801d27e:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 801d280:	69bb      	ldr	r3, [r7, #24]
 801d282:	7d9b      	ldrb	r3, [r3, #22]
 801d284:	f003 030f 	and.w	r3, r3, #15
 801d288:	2b02      	cmp	r3, #2
 801d28a:	d152      	bne.n	801d332 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 801d28c:	f04f 0200 	mov.w	r2, #0
 801d290:	f04f 0300 	mov.w	r3, #0
 801d294:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 801d298:	69bb      	ldr	r3, [r7, #24]
 801d29a:	8a5b      	ldrh	r3, [r3, #18]
 801d29c:	2b01      	cmp	r3, #1
 801d29e:	d10b      	bne.n	801d2b8 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 801d2a0:	69bb      	ldr	r3, [r7, #24]
 801d2a2:	69db      	ldr	r3, [r3, #28]
 801d2a4:	781b      	ldrb	r3, [r3, #0]
 801d2a6:	b2db      	uxtb	r3, r3
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	613b      	str	r3, [r7, #16]
 801d2ac:	617a      	str	r2, [r7, #20]
 801d2ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d2b2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d2b6:	e035      	b.n	801d324 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 801d2b8:	69bb      	ldr	r3, [r7, #24]
 801d2ba:	8a5b      	ldrh	r3, [r3, #18]
 801d2bc:	2b02      	cmp	r3, #2
 801d2be:	d10b      	bne.n	801d2d8 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 801d2c0:	69bb      	ldr	r3, [r7, #24]
 801d2c2:	69db      	ldr	r3, [r3, #28]
 801d2c4:	881b      	ldrh	r3, [r3, #0]
 801d2c6:	b29b      	uxth	r3, r3
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	60bb      	str	r3, [r7, #8]
 801d2cc:	60fa      	str	r2, [r7, #12]
 801d2ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801d2d2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d2d6:	e025      	b.n	801d324 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 801d2d8:	69bb      	ldr	r3, [r7, #24]
 801d2da:	8a5b      	ldrh	r3, [r3, #18]
 801d2dc:	2b04      	cmp	r3, #4
 801d2de:	d10a      	bne.n	801d2f6 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 801d2e0:	69bb      	ldr	r3, [r7, #24]
 801d2e2:	69db      	ldr	r3, [r3, #28]
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	603b      	str	r3, [r7, #0]
 801d2ea:	607a      	str	r2, [r7, #4]
 801d2ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d2f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801d2f4:	e016      	b.n	801d324 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 801d2f6:	69bb      	ldr	r3, [r7, #24]
 801d2f8:	8a5b      	ldrh	r3, [r3, #18]
 801d2fa:	2b08      	cmp	r3, #8
 801d2fc:	d106      	bne.n	801d30c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 801d2fe:	69bb      	ldr	r3, [r7, #24]
 801d300:	69db      	ldr	r3, [r3, #28]
 801d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d306:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801d30a:	e00b      	b.n	801d324 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801d30c:	69fb      	ldr	r3, [r7, #28]
 801d30e:	691b      	ldr	r3, [r3, #16]
 801d310:	2b00      	cmp	r3, #0
 801d312:	d002      	beq.n	801d31a <pb_enc_varint+0xa6>
 801d314:	69fb      	ldr	r3, [r7, #28]
 801d316:	691b      	ldr	r3, [r3, #16]
 801d318:	e000      	b.n	801d31c <pb_enc_varint+0xa8>
 801d31a:	4b36      	ldr	r3, [pc, #216]	; (801d3f4 <pb_enc_varint+0x180>)
 801d31c:	69fa      	ldr	r2, [r7, #28]
 801d31e:	6113      	str	r3, [r2, #16]
 801d320:	2300      	movs	r3, #0
 801d322:	e061      	b.n	801d3e8 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 801d324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d328:	69f8      	ldr	r0, [r7, #28]
 801d32a:	f7ff fdde 	bl	801ceea <pb_encode_varint>
 801d32e:	4603      	mov	r3, r0
 801d330:	e05a      	b.n	801d3e8 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 801d332:	f04f 0200 	mov.w	r2, #0
 801d336:	f04f 0300 	mov.w	r3, #0
 801d33a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 801d33e:	69bb      	ldr	r3, [r7, #24]
 801d340:	8a5b      	ldrh	r3, [r3, #18]
 801d342:	2b01      	cmp	r3, #1
 801d344:	d10a      	bne.n	801d35c <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 801d346:	69bb      	ldr	r3, [r7, #24]
 801d348:	69db      	ldr	r3, [r3, #28]
 801d34a:	f993 3000 	ldrsb.w	r3, [r3]
 801d34e:	b25b      	sxtb	r3, r3
 801d350:	17da      	asrs	r2, r3, #31
 801d352:	469a      	mov	sl, r3
 801d354:	4693      	mov	fp, r2
 801d356:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 801d35a:	e032      	b.n	801d3c2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 801d35c:	69bb      	ldr	r3, [r7, #24]
 801d35e:	8a5b      	ldrh	r3, [r3, #18]
 801d360:	2b02      	cmp	r3, #2
 801d362:	d10a      	bne.n	801d37a <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 801d364:	69bb      	ldr	r3, [r7, #24]
 801d366:	69db      	ldr	r3, [r3, #28]
 801d368:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d36c:	b21b      	sxth	r3, r3
 801d36e:	17da      	asrs	r2, r3, #31
 801d370:	4698      	mov	r8, r3
 801d372:	4691      	mov	r9, r2
 801d374:	e9c7 8908 	strd	r8, r9, [r7, #32]
 801d378:	e023      	b.n	801d3c2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 801d37a:	69bb      	ldr	r3, [r7, #24]
 801d37c:	8a5b      	ldrh	r3, [r3, #18]
 801d37e:	2b04      	cmp	r3, #4
 801d380:	d108      	bne.n	801d394 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 801d382:	69bb      	ldr	r3, [r7, #24]
 801d384:	69db      	ldr	r3, [r3, #28]
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	17da      	asrs	r2, r3, #31
 801d38a:	461c      	mov	r4, r3
 801d38c:	4615      	mov	r5, r2
 801d38e:	e9c7 4508 	strd	r4, r5, [r7, #32]
 801d392:	e016      	b.n	801d3c2 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 801d394:	69bb      	ldr	r3, [r7, #24]
 801d396:	8a5b      	ldrh	r3, [r3, #18]
 801d398:	2b08      	cmp	r3, #8
 801d39a:	d106      	bne.n	801d3aa <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 801d39c:	69bb      	ldr	r3, [r7, #24]
 801d39e:	69db      	ldr	r3, [r3, #28]
 801d3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801d3a8:	e00b      	b.n	801d3c2 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 801d3aa:	69fb      	ldr	r3, [r7, #28]
 801d3ac:	691b      	ldr	r3, [r3, #16]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d002      	beq.n	801d3b8 <pb_enc_varint+0x144>
 801d3b2:	69fb      	ldr	r3, [r7, #28]
 801d3b4:	691b      	ldr	r3, [r3, #16]
 801d3b6:	e000      	b.n	801d3ba <pb_enc_varint+0x146>
 801d3b8:	4b0e      	ldr	r3, [pc, #56]	; (801d3f4 <pb_enc_varint+0x180>)
 801d3ba:	69fa      	ldr	r2, [r7, #28]
 801d3bc:	6113      	str	r3, [r2, #16]
 801d3be:	2300      	movs	r3, #0
 801d3c0:	e012      	b.n	801d3e8 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 801d3c2:	69bb      	ldr	r3, [r7, #24]
 801d3c4:	7d9b      	ldrb	r3, [r3, #22]
 801d3c6:	f003 030f 	and.w	r3, r3, #15
 801d3ca:	2b03      	cmp	r3, #3
 801d3cc:	d106      	bne.n	801d3dc <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 801d3ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d3d2:	69f8      	ldr	r0, [r7, #28]
 801d3d4:	f7ff fdb4 	bl	801cf40 <pb_encode_svarint>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	e005      	b.n	801d3e8 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 801d3dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d3e0:	69f8      	ldr	r0, [r7, #28]
 801d3e2:	f7ff fd82 	bl	801ceea <pb_encode_varint>
 801d3e6:	4603      	mov	r3, r0

    }
}
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	3730      	adds	r7, #48	; 0x30
 801d3ec:	46bd      	mov	sp, r7
 801d3ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d3f2:	bf00      	nop
 801d3f4:	08022148 	.word	0x08022148

0801d3f8 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d3f8:	b580      	push	{r7, lr}
 801d3fa:	b082      	sub	sp, #8
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 801d402:	683b      	ldr	r3, [r7, #0]
 801d404:	8a5b      	ldrh	r3, [r3, #18]
 801d406:	2b04      	cmp	r3, #4
 801d408:	d107      	bne.n	801d41a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 801d40a:	683b      	ldr	r3, [r7, #0]
 801d40c:	69db      	ldr	r3, [r3, #28]
 801d40e:	4619      	mov	r1, r3
 801d410:	6878      	ldr	r0, [r7, #4]
 801d412:	f7ff fdcf 	bl	801cfb4 <pb_encode_fixed32>
 801d416:	4603      	mov	r3, r0
 801d418:	e016      	b.n	801d448 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 801d41a:	683b      	ldr	r3, [r7, #0]
 801d41c:	8a5b      	ldrh	r3, [r3, #18]
 801d41e:	2b08      	cmp	r3, #8
 801d420:	d107      	bne.n	801d432 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 801d422:	683b      	ldr	r3, [r7, #0]
 801d424:	69db      	ldr	r3, [r3, #28]
 801d426:	4619      	mov	r1, r3
 801d428:	6878      	ldr	r0, [r7, #4]
 801d42a:	f7ff fdd2 	bl	801cfd2 <pb_encode_fixed64>
 801d42e:	4603      	mov	r3, r0
 801d430:	e00a      	b.n	801d448 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	691b      	ldr	r3, [r3, #16]
 801d436:	2b00      	cmp	r3, #0
 801d438:	d002      	beq.n	801d440 <pb_enc_fixed+0x48>
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	691b      	ldr	r3, [r3, #16]
 801d43e:	e000      	b.n	801d442 <pb_enc_fixed+0x4a>
 801d440:	4b03      	ldr	r3, [pc, #12]	; (801d450 <pb_enc_fixed+0x58>)
 801d442:	687a      	ldr	r2, [r7, #4]
 801d444:	6113      	str	r3, [r2, #16]
 801d446:	2300      	movs	r3, #0
    }
}
 801d448:	4618      	mov	r0, r3
 801d44a:	3708      	adds	r7, #8
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd80      	pop	{r7, pc}
 801d450:	08022148 	.word	0x08022148

0801d454 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d454:	b580      	push	{r7, lr}
 801d456:	b084      	sub	sp, #16
 801d458:	af00      	add	r7, sp, #0
 801d45a:	6078      	str	r0, [r7, #4]
 801d45c:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 801d45e:	2300      	movs	r3, #0
 801d460:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 801d462:	683b      	ldr	r3, [r7, #0]
 801d464:	69db      	ldr	r3, [r3, #28]
 801d466:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d106      	bne.n	801d47c <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 801d46e:	2200      	movs	r2, #0
 801d470:	2100      	movs	r1, #0
 801d472:	6878      	ldr	r0, [r7, #4]
 801d474:	f7ff fe34 	bl	801d0e0 <pb_encode_string>
 801d478:	4603      	mov	r3, r0
 801d47a:	e022      	b.n	801d4c2 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801d47c:	683b      	ldr	r3, [r7, #0]
 801d47e:	7d9b      	ldrb	r3, [r3, #22]
 801d480:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d484:	2b00      	cmp	r3, #0
 801d486:	d113      	bne.n	801d4b0 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	881b      	ldrh	r3, [r3, #0]
 801d48c:	461a      	mov	r2, r3
 801d48e:	683b      	ldr	r3, [r7, #0]
 801d490:	8a5b      	ldrh	r3, [r3, #18]
 801d492:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 801d494:	429a      	cmp	r2, r3
 801d496:	d90b      	bls.n	801d4b0 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	691b      	ldr	r3, [r3, #16]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d002      	beq.n	801d4a6 <pb_enc_bytes+0x52>
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	691b      	ldr	r3, [r3, #16]
 801d4a4:	e000      	b.n	801d4a8 <pb_enc_bytes+0x54>
 801d4a6:	4b09      	ldr	r3, [pc, #36]	; (801d4cc <pb_enc_bytes+0x78>)
 801d4a8:	687a      	ldr	r2, [r7, #4]
 801d4aa:	6113      	str	r3, [r2, #16]
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	e008      	b.n	801d4c2 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	1c99      	adds	r1, r3, #2
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	881b      	ldrh	r3, [r3, #0]
 801d4b8:	461a      	mov	r2, r3
 801d4ba:	6878      	ldr	r0, [r7, #4]
 801d4bc:	f7ff fe10 	bl	801d0e0 <pb_encode_string>
 801d4c0:	4603      	mov	r3, r0
}
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	3710      	adds	r7, #16
 801d4c6:	46bd      	mov	sp, r7
 801d4c8:	bd80      	pop	{r7, pc}
 801d4ca:	bf00      	nop
 801d4cc:	0802215c 	.word	0x0802215c

0801d4d0 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b086      	sub	sp, #24
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	6078      	str	r0, [r7, #4]
 801d4d8:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 801d4da:	2300      	movs	r3, #0
 801d4dc:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 801d4de:	683b      	ldr	r3, [r7, #0]
 801d4e0:	8a5b      	ldrh	r3, [r3, #18]
 801d4e2:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 801d4e4:	683b      	ldr	r3, [r7, #0]
 801d4e6:	69db      	ldr	r3, [r3, #28]
 801d4e8:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 801d4ea:	683b      	ldr	r3, [r7, #0]
 801d4ec:	7d9b      	ldrb	r3, [r3, #22]
 801d4ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d4f2:	2b80      	cmp	r3, #128	; 0x80
 801d4f4:	d103      	bne.n	801d4fe <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 801d4f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4fa:	613b      	str	r3, [r7, #16]
 801d4fc:	e011      	b.n	801d522 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 801d4fe:	693b      	ldr	r3, [r7, #16]
 801d500:	2b00      	cmp	r3, #0
 801d502:	d10b      	bne.n	801d51c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	691b      	ldr	r3, [r3, #16]
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d002      	beq.n	801d512 <pb_enc_string+0x42>
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	691b      	ldr	r3, [r3, #16]
 801d510:	e000      	b.n	801d514 <pb_enc_string+0x44>
 801d512:	4b1c      	ldr	r3, [pc, #112]	; (801d584 <pb_enc_string+0xb4>)
 801d514:	687a      	ldr	r2, [r7, #4]
 801d516:	6113      	str	r3, [r2, #16]
 801d518:	2300      	movs	r3, #0
 801d51a:	e02f      	b.n	801d57c <pb_enc_string+0xac>

        max_size -= 1;
 801d51c:	693b      	ldr	r3, [r7, #16]
 801d51e:	3b01      	subs	r3, #1
 801d520:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 801d522:	68bb      	ldr	r3, [r7, #8]
 801d524:	2b00      	cmp	r3, #0
 801d526:	d102      	bne.n	801d52e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 801d528:	2300      	movs	r3, #0
 801d52a:	617b      	str	r3, [r7, #20]
 801d52c:	e020      	b.n	801d570 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 801d52e:	68bb      	ldr	r3, [r7, #8]
 801d530:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 801d532:	e005      	b.n	801d540 <pb_enc_string+0x70>
        {
            size++;
 801d534:	697b      	ldr	r3, [r7, #20]
 801d536:	3301      	adds	r3, #1
 801d538:	617b      	str	r3, [r7, #20]
            p++;
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	3301      	adds	r3, #1
 801d53e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 801d540:	697a      	ldr	r2, [r7, #20]
 801d542:	693b      	ldr	r3, [r7, #16]
 801d544:	429a      	cmp	r2, r3
 801d546:	d203      	bcs.n	801d550 <pb_enc_string+0x80>
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	781b      	ldrb	r3, [r3, #0]
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d1f1      	bne.n	801d534 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	781b      	ldrb	r3, [r3, #0]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d00b      	beq.n	801d570 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	691b      	ldr	r3, [r3, #16]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d002      	beq.n	801d566 <pb_enc_string+0x96>
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	691b      	ldr	r3, [r3, #16]
 801d564:	e000      	b.n	801d568 <pb_enc_string+0x98>
 801d566:	4b08      	ldr	r3, [pc, #32]	; (801d588 <pb_enc_string+0xb8>)
 801d568:	687a      	ldr	r2, [r7, #4]
 801d56a:	6113      	str	r3, [r2, #16]
 801d56c:	2300      	movs	r3, #0
 801d56e:	e005      	b.n	801d57c <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 801d570:	697a      	ldr	r2, [r7, #20]
 801d572:	68b9      	ldr	r1, [r7, #8]
 801d574:	6878      	ldr	r0, [r7, #4]
 801d576:	f7ff fdb3 	bl	801d0e0 <pb_encode_string>
 801d57a:	4603      	mov	r3, r0
}
 801d57c:	4618      	mov	r0, r3
 801d57e:	3718      	adds	r7, #24
 801d580:	46bd      	mov	sp, r7
 801d582:	bd80      	pop	{r7, pc}
 801d584:	08022170 	.word	0x08022170
 801d588:	08022184 	.word	0x08022184

0801d58c <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d58c:	b580      	push	{r7, lr}
 801d58e:	b084      	sub	sp, #16
 801d590:	af00      	add	r7, sp, #0
 801d592:	6078      	str	r0, [r7, #4]
 801d594:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 801d596:	683b      	ldr	r3, [r7, #0]
 801d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d10b      	bne.n	801d5b6 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	691b      	ldr	r3, [r3, #16]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d002      	beq.n	801d5ac <pb_enc_submessage+0x20>
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	691b      	ldr	r3, [r3, #16]
 801d5aa:	e000      	b.n	801d5ae <pb_enc_submessage+0x22>
 801d5ac:	4b19      	ldr	r3, [pc, #100]	; (801d614 <pb_enc_submessage+0x88>)
 801d5ae:	687a      	ldr	r2, [r7, #4]
 801d5b0:	6113      	str	r3, [r2, #16]
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	e029      	b.n	801d60a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 801d5b6:	683b      	ldr	r3, [r7, #0]
 801d5b8:	7d9b      	ldrb	r3, [r3, #22]
 801d5ba:	f003 030f 	and.w	r3, r3, #15
 801d5be:	2b09      	cmp	r3, #9
 801d5c0:	d11a      	bne.n	801d5f8 <pb_enc_submessage+0x6c>
 801d5c2:	683b      	ldr	r3, [r7, #0]
 801d5c4:	6a1b      	ldr	r3, [r3, #32]
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d016      	beq.n	801d5f8 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 801d5ca:	683b      	ldr	r3, [r7, #0]
 801d5cc:	6a1b      	ldr	r3, [r3, #32]
 801d5ce:	3b08      	subs	r3, #8
 801d5d0:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d00e      	beq.n	801d5f8 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	68fa      	ldr	r2, [r7, #12]
 801d5e0:	3204      	adds	r2, #4
 801d5e2:	6839      	ldr	r1, [r7, #0]
 801d5e4:	6878      	ldr	r0, [r7, #4]
 801d5e6:	4798      	blx	r3
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	f083 0301 	eor.w	r3, r3, #1
 801d5ee:	b2db      	uxtb	r3, r3
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d001      	beq.n	801d5f8 <pb_enc_submessage+0x6c>
                return false;
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	e008      	b.n	801d60a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 801d5f8:	683b      	ldr	r3, [r7, #0]
 801d5fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801d5fc:	683b      	ldr	r3, [r7, #0]
 801d5fe:	69db      	ldr	r3, [r3, #28]
 801d600:	461a      	mov	r2, r3
 801d602:	6878      	ldr	r0, [r7, #4]
 801d604:	f7ff fd8e 	bl	801d124 <pb_encode_submessage>
 801d608:	4603      	mov	r3, r0
}
 801d60a:	4618      	mov	r0, r3
 801d60c:	3710      	adds	r7, #16
 801d60e:	46bd      	mov	sp, r7
 801d610:	bd80      	pop	{r7, pc}
 801d612:	bf00      	nop
 801d614:	08022198 	.word	0x08022198

0801d618 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801d618:	b580      	push	{r7, lr}
 801d61a:	b082      	sub	sp, #8
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
 801d620:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 801d622:	683b      	ldr	r3, [r7, #0]
 801d624:	69d9      	ldr	r1, [r3, #28]
 801d626:	683b      	ldr	r3, [r7, #0]
 801d628:	8a5b      	ldrh	r3, [r3, #18]
 801d62a:	461a      	mov	r2, r3
 801d62c:	6878      	ldr	r0, [r7, #4]
 801d62e:	f7ff fd57 	bl	801d0e0 <pb_encode_string>
 801d632:	4603      	mov	r3, r0
}
 801d634:	4618      	mov	r0, r3
 801d636:	3708      	adds	r7, #8
 801d638:	46bd      	mov	sp, r7
 801d63a:	bd80      	pop	{r7, pc}

0801d63c <__libc_init_array>:
 801d63c:	b570      	push	{r4, r5, r6, lr}
 801d63e:	4d0d      	ldr	r5, [pc, #52]	; (801d674 <__libc_init_array+0x38>)
 801d640:	4c0d      	ldr	r4, [pc, #52]	; (801d678 <__libc_init_array+0x3c>)
 801d642:	1b64      	subs	r4, r4, r5
 801d644:	10a4      	asrs	r4, r4, #2
 801d646:	2600      	movs	r6, #0
 801d648:	42a6      	cmp	r6, r4
 801d64a:	d109      	bne.n	801d660 <__libc_init_array+0x24>
 801d64c:	4d0b      	ldr	r5, [pc, #44]	; (801d67c <__libc_init_array+0x40>)
 801d64e:	4c0c      	ldr	r4, [pc, #48]	; (801d680 <__libc_init_array+0x44>)
 801d650:	f001 f920 	bl	801e894 <_init>
 801d654:	1b64      	subs	r4, r4, r5
 801d656:	10a4      	asrs	r4, r4, #2
 801d658:	2600      	movs	r6, #0
 801d65a:	42a6      	cmp	r6, r4
 801d65c:	d105      	bne.n	801d66a <__libc_init_array+0x2e>
 801d65e:	bd70      	pop	{r4, r5, r6, pc}
 801d660:	f855 3b04 	ldr.w	r3, [r5], #4
 801d664:	4798      	blx	r3
 801d666:	3601      	adds	r6, #1
 801d668:	e7ee      	b.n	801d648 <__libc_init_array+0xc>
 801d66a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d66e:	4798      	blx	r3
 801d670:	3601      	adds	r6, #1
 801d672:	e7f2      	b.n	801d65a <__libc_init_array+0x1e>
 801d674:	08022590 	.word	0x08022590
 801d678:	08022590 	.word	0x08022590
 801d67c:	08022590 	.word	0x08022590
 801d680:	08022594 	.word	0x08022594

0801d684 <memcmp>:
 801d684:	b510      	push	{r4, lr}
 801d686:	3901      	subs	r1, #1
 801d688:	4402      	add	r2, r0
 801d68a:	4290      	cmp	r0, r2
 801d68c:	d101      	bne.n	801d692 <memcmp+0xe>
 801d68e:	2000      	movs	r0, #0
 801d690:	e005      	b.n	801d69e <memcmp+0x1a>
 801d692:	7803      	ldrb	r3, [r0, #0]
 801d694:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d698:	42a3      	cmp	r3, r4
 801d69a:	d001      	beq.n	801d6a0 <memcmp+0x1c>
 801d69c:	1b18      	subs	r0, r3, r4
 801d69e:	bd10      	pop	{r4, pc}
 801d6a0:	3001      	adds	r0, #1
 801d6a2:	e7f2      	b.n	801d68a <memcmp+0x6>

0801d6a4 <memcpy>:
 801d6a4:	440a      	add	r2, r1
 801d6a6:	4291      	cmp	r1, r2
 801d6a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d6ac:	d100      	bne.n	801d6b0 <memcpy+0xc>
 801d6ae:	4770      	bx	lr
 801d6b0:	b510      	push	{r4, lr}
 801d6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d6b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d6ba:	4291      	cmp	r1, r2
 801d6bc:	d1f9      	bne.n	801d6b2 <memcpy+0xe>
 801d6be:	bd10      	pop	{r4, pc}

0801d6c0 <memset>:
 801d6c0:	4402      	add	r2, r0
 801d6c2:	4603      	mov	r3, r0
 801d6c4:	4293      	cmp	r3, r2
 801d6c6:	d100      	bne.n	801d6ca <memset+0xa>
 801d6c8:	4770      	bx	lr
 801d6ca:	f803 1b01 	strb.w	r1, [r3], #1
 801d6ce:	e7f9      	b.n	801d6c4 <memset+0x4>

0801d6d0 <iprintf>:
 801d6d0:	b40f      	push	{r0, r1, r2, r3}
 801d6d2:	4b0a      	ldr	r3, [pc, #40]	; (801d6fc <iprintf+0x2c>)
 801d6d4:	b513      	push	{r0, r1, r4, lr}
 801d6d6:	681c      	ldr	r4, [r3, #0]
 801d6d8:	b124      	cbz	r4, 801d6e4 <iprintf+0x14>
 801d6da:	69a3      	ldr	r3, [r4, #24]
 801d6dc:	b913      	cbnz	r3, 801d6e4 <iprintf+0x14>
 801d6de:	4620      	mov	r0, r4
 801d6e0:	f000 fad6 	bl	801dc90 <__sinit>
 801d6e4:	ab05      	add	r3, sp, #20
 801d6e6:	9a04      	ldr	r2, [sp, #16]
 801d6e8:	68a1      	ldr	r1, [r4, #8]
 801d6ea:	9301      	str	r3, [sp, #4]
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f000 fcf9 	bl	801e0e4 <_vfiprintf_r>
 801d6f2:	b002      	add	sp, #8
 801d6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6f8:	b004      	add	sp, #16
 801d6fa:	4770      	bx	lr
 801d6fc:	20000030 	.word	0x20000030

0801d700 <_puts_r>:
 801d700:	b570      	push	{r4, r5, r6, lr}
 801d702:	460e      	mov	r6, r1
 801d704:	4605      	mov	r5, r0
 801d706:	b118      	cbz	r0, 801d710 <_puts_r+0x10>
 801d708:	6983      	ldr	r3, [r0, #24]
 801d70a:	b90b      	cbnz	r3, 801d710 <_puts_r+0x10>
 801d70c:	f000 fac0 	bl	801dc90 <__sinit>
 801d710:	69ab      	ldr	r3, [r5, #24]
 801d712:	68ac      	ldr	r4, [r5, #8]
 801d714:	b913      	cbnz	r3, 801d71c <_puts_r+0x1c>
 801d716:	4628      	mov	r0, r5
 801d718:	f000 faba 	bl	801dc90 <__sinit>
 801d71c:	4b2c      	ldr	r3, [pc, #176]	; (801d7d0 <_puts_r+0xd0>)
 801d71e:	429c      	cmp	r4, r3
 801d720:	d120      	bne.n	801d764 <_puts_r+0x64>
 801d722:	686c      	ldr	r4, [r5, #4]
 801d724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d726:	07db      	lsls	r3, r3, #31
 801d728:	d405      	bmi.n	801d736 <_puts_r+0x36>
 801d72a:	89a3      	ldrh	r3, [r4, #12]
 801d72c:	0598      	lsls	r0, r3, #22
 801d72e:	d402      	bmi.n	801d736 <_puts_r+0x36>
 801d730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d732:	f000 fb5d 	bl	801ddf0 <__retarget_lock_acquire_recursive>
 801d736:	89a3      	ldrh	r3, [r4, #12]
 801d738:	0719      	lsls	r1, r3, #28
 801d73a:	d51d      	bpl.n	801d778 <_puts_r+0x78>
 801d73c:	6923      	ldr	r3, [r4, #16]
 801d73e:	b1db      	cbz	r3, 801d778 <_puts_r+0x78>
 801d740:	3e01      	subs	r6, #1
 801d742:	68a3      	ldr	r3, [r4, #8]
 801d744:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d748:	3b01      	subs	r3, #1
 801d74a:	60a3      	str	r3, [r4, #8]
 801d74c:	bb39      	cbnz	r1, 801d79e <_puts_r+0x9e>
 801d74e:	2b00      	cmp	r3, #0
 801d750:	da38      	bge.n	801d7c4 <_puts_r+0xc4>
 801d752:	4622      	mov	r2, r4
 801d754:	210a      	movs	r1, #10
 801d756:	4628      	mov	r0, r5
 801d758:	f000 f8a2 	bl	801d8a0 <__swbuf_r>
 801d75c:	3001      	adds	r0, #1
 801d75e:	d011      	beq.n	801d784 <_puts_r+0x84>
 801d760:	250a      	movs	r5, #10
 801d762:	e011      	b.n	801d788 <_puts_r+0x88>
 801d764:	4b1b      	ldr	r3, [pc, #108]	; (801d7d4 <_puts_r+0xd4>)
 801d766:	429c      	cmp	r4, r3
 801d768:	d101      	bne.n	801d76e <_puts_r+0x6e>
 801d76a:	68ac      	ldr	r4, [r5, #8]
 801d76c:	e7da      	b.n	801d724 <_puts_r+0x24>
 801d76e:	4b1a      	ldr	r3, [pc, #104]	; (801d7d8 <_puts_r+0xd8>)
 801d770:	429c      	cmp	r4, r3
 801d772:	bf08      	it	eq
 801d774:	68ec      	ldreq	r4, [r5, #12]
 801d776:	e7d5      	b.n	801d724 <_puts_r+0x24>
 801d778:	4621      	mov	r1, r4
 801d77a:	4628      	mov	r0, r5
 801d77c:	f000 f8e2 	bl	801d944 <__swsetup_r>
 801d780:	2800      	cmp	r0, #0
 801d782:	d0dd      	beq.n	801d740 <_puts_r+0x40>
 801d784:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801d788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d78a:	07da      	lsls	r2, r3, #31
 801d78c:	d405      	bmi.n	801d79a <_puts_r+0x9a>
 801d78e:	89a3      	ldrh	r3, [r4, #12]
 801d790:	059b      	lsls	r3, r3, #22
 801d792:	d402      	bmi.n	801d79a <_puts_r+0x9a>
 801d794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d796:	f000 fb2c 	bl	801ddf2 <__retarget_lock_release_recursive>
 801d79a:	4628      	mov	r0, r5
 801d79c:	bd70      	pop	{r4, r5, r6, pc}
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	da04      	bge.n	801d7ac <_puts_r+0xac>
 801d7a2:	69a2      	ldr	r2, [r4, #24]
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	dc06      	bgt.n	801d7b6 <_puts_r+0xb6>
 801d7a8:	290a      	cmp	r1, #10
 801d7aa:	d004      	beq.n	801d7b6 <_puts_r+0xb6>
 801d7ac:	6823      	ldr	r3, [r4, #0]
 801d7ae:	1c5a      	adds	r2, r3, #1
 801d7b0:	6022      	str	r2, [r4, #0]
 801d7b2:	7019      	strb	r1, [r3, #0]
 801d7b4:	e7c5      	b.n	801d742 <_puts_r+0x42>
 801d7b6:	4622      	mov	r2, r4
 801d7b8:	4628      	mov	r0, r5
 801d7ba:	f000 f871 	bl	801d8a0 <__swbuf_r>
 801d7be:	3001      	adds	r0, #1
 801d7c0:	d1bf      	bne.n	801d742 <_puts_r+0x42>
 801d7c2:	e7df      	b.n	801d784 <_puts_r+0x84>
 801d7c4:	6823      	ldr	r3, [r4, #0]
 801d7c6:	250a      	movs	r5, #10
 801d7c8:	1c5a      	adds	r2, r3, #1
 801d7ca:	6022      	str	r2, [r4, #0]
 801d7cc:	701d      	strb	r5, [r3, #0]
 801d7ce:	e7db      	b.n	801d788 <_puts_r+0x88>
 801d7d0:	08022514 	.word	0x08022514
 801d7d4:	08022534 	.word	0x08022534
 801d7d8:	080224f4 	.word	0x080224f4

0801d7dc <puts>:
 801d7dc:	4b02      	ldr	r3, [pc, #8]	; (801d7e8 <puts+0xc>)
 801d7de:	4601      	mov	r1, r0
 801d7e0:	6818      	ldr	r0, [r3, #0]
 801d7e2:	f7ff bf8d 	b.w	801d700 <_puts_r>
 801d7e6:	bf00      	nop
 801d7e8:	20000030 	.word	0x20000030

0801d7ec <rand>:
 801d7ec:	4b16      	ldr	r3, [pc, #88]	; (801d848 <rand+0x5c>)
 801d7ee:	b510      	push	{r4, lr}
 801d7f0:	681c      	ldr	r4, [r3, #0]
 801d7f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d7f4:	b9b3      	cbnz	r3, 801d824 <rand+0x38>
 801d7f6:	2018      	movs	r0, #24
 801d7f8:	f000 fb62 	bl	801dec0 <malloc>
 801d7fc:	63a0      	str	r0, [r4, #56]	; 0x38
 801d7fe:	b928      	cbnz	r0, 801d80c <rand+0x20>
 801d800:	4602      	mov	r2, r0
 801d802:	4b12      	ldr	r3, [pc, #72]	; (801d84c <rand+0x60>)
 801d804:	4812      	ldr	r0, [pc, #72]	; (801d850 <rand+0x64>)
 801d806:	214e      	movs	r1, #78	; 0x4e
 801d808:	f000 f90a 	bl	801da20 <__assert_func>
 801d80c:	4a11      	ldr	r2, [pc, #68]	; (801d854 <rand+0x68>)
 801d80e:	4b12      	ldr	r3, [pc, #72]	; (801d858 <rand+0x6c>)
 801d810:	e9c0 2300 	strd	r2, r3, [r0]
 801d814:	4b11      	ldr	r3, [pc, #68]	; (801d85c <rand+0x70>)
 801d816:	6083      	str	r3, [r0, #8]
 801d818:	230b      	movs	r3, #11
 801d81a:	8183      	strh	r3, [r0, #12]
 801d81c:	2201      	movs	r2, #1
 801d81e:	2300      	movs	r3, #0
 801d820:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d824:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801d826:	4a0e      	ldr	r2, [pc, #56]	; (801d860 <rand+0x74>)
 801d828:	6920      	ldr	r0, [r4, #16]
 801d82a:	6963      	ldr	r3, [r4, #20]
 801d82c:	490d      	ldr	r1, [pc, #52]	; (801d864 <rand+0x78>)
 801d82e:	4342      	muls	r2, r0
 801d830:	fb01 2203 	mla	r2, r1, r3, r2
 801d834:	fba0 0101 	umull	r0, r1, r0, r1
 801d838:	1c43      	adds	r3, r0, #1
 801d83a:	eb42 0001 	adc.w	r0, r2, r1
 801d83e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801d842:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d846:	bd10      	pop	{r4, pc}
 801d848:	20000030 	.word	0x20000030
 801d84c:	08022444 	.word	0x08022444
 801d850:	0802245b 	.word	0x0802245b
 801d854:	abcd330e 	.word	0xabcd330e
 801d858:	e66d1234 	.word	0xe66d1234
 801d85c:	0005deec 	.word	0x0005deec
 801d860:	5851f42d 	.word	0x5851f42d
 801d864:	4c957f2d 	.word	0x4c957f2d

0801d868 <strcpy>:
 801d868:	4603      	mov	r3, r0
 801d86a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d86e:	f803 2b01 	strb.w	r2, [r3], #1
 801d872:	2a00      	cmp	r2, #0
 801d874:	d1f9      	bne.n	801d86a <strcpy+0x2>
 801d876:	4770      	bx	lr

0801d878 <strncmp>:
 801d878:	b510      	push	{r4, lr}
 801d87a:	b17a      	cbz	r2, 801d89c <strncmp+0x24>
 801d87c:	4603      	mov	r3, r0
 801d87e:	3901      	subs	r1, #1
 801d880:	1884      	adds	r4, r0, r2
 801d882:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d886:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d88a:	4290      	cmp	r0, r2
 801d88c:	d101      	bne.n	801d892 <strncmp+0x1a>
 801d88e:	42a3      	cmp	r3, r4
 801d890:	d101      	bne.n	801d896 <strncmp+0x1e>
 801d892:	1a80      	subs	r0, r0, r2
 801d894:	bd10      	pop	{r4, pc}
 801d896:	2800      	cmp	r0, #0
 801d898:	d1f3      	bne.n	801d882 <strncmp+0xa>
 801d89a:	e7fa      	b.n	801d892 <strncmp+0x1a>
 801d89c:	4610      	mov	r0, r2
 801d89e:	e7f9      	b.n	801d894 <strncmp+0x1c>

0801d8a0 <__swbuf_r>:
 801d8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8a2:	460e      	mov	r6, r1
 801d8a4:	4614      	mov	r4, r2
 801d8a6:	4605      	mov	r5, r0
 801d8a8:	b118      	cbz	r0, 801d8b2 <__swbuf_r+0x12>
 801d8aa:	6983      	ldr	r3, [r0, #24]
 801d8ac:	b90b      	cbnz	r3, 801d8b2 <__swbuf_r+0x12>
 801d8ae:	f000 f9ef 	bl	801dc90 <__sinit>
 801d8b2:	4b21      	ldr	r3, [pc, #132]	; (801d938 <__swbuf_r+0x98>)
 801d8b4:	429c      	cmp	r4, r3
 801d8b6:	d12b      	bne.n	801d910 <__swbuf_r+0x70>
 801d8b8:	686c      	ldr	r4, [r5, #4]
 801d8ba:	69a3      	ldr	r3, [r4, #24]
 801d8bc:	60a3      	str	r3, [r4, #8]
 801d8be:	89a3      	ldrh	r3, [r4, #12]
 801d8c0:	071a      	lsls	r2, r3, #28
 801d8c2:	d52f      	bpl.n	801d924 <__swbuf_r+0x84>
 801d8c4:	6923      	ldr	r3, [r4, #16]
 801d8c6:	b36b      	cbz	r3, 801d924 <__swbuf_r+0x84>
 801d8c8:	6923      	ldr	r3, [r4, #16]
 801d8ca:	6820      	ldr	r0, [r4, #0]
 801d8cc:	1ac0      	subs	r0, r0, r3
 801d8ce:	6963      	ldr	r3, [r4, #20]
 801d8d0:	b2f6      	uxtb	r6, r6
 801d8d2:	4283      	cmp	r3, r0
 801d8d4:	4637      	mov	r7, r6
 801d8d6:	dc04      	bgt.n	801d8e2 <__swbuf_r+0x42>
 801d8d8:	4621      	mov	r1, r4
 801d8da:	4628      	mov	r0, r5
 801d8dc:	f000 f944 	bl	801db68 <_fflush_r>
 801d8e0:	bb30      	cbnz	r0, 801d930 <__swbuf_r+0x90>
 801d8e2:	68a3      	ldr	r3, [r4, #8]
 801d8e4:	3b01      	subs	r3, #1
 801d8e6:	60a3      	str	r3, [r4, #8]
 801d8e8:	6823      	ldr	r3, [r4, #0]
 801d8ea:	1c5a      	adds	r2, r3, #1
 801d8ec:	6022      	str	r2, [r4, #0]
 801d8ee:	701e      	strb	r6, [r3, #0]
 801d8f0:	6963      	ldr	r3, [r4, #20]
 801d8f2:	3001      	adds	r0, #1
 801d8f4:	4283      	cmp	r3, r0
 801d8f6:	d004      	beq.n	801d902 <__swbuf_r+0x62>
 801d8f8:	89a3      	ldrh	r3, [r4, #12]
 801d8fa:	07db      	lsls	r3, r3, #31
 801d8fc:	d506      	bpl.n	801d90c <__swbuf_r+0x6c>
 801d8fe:	2e0a      	cmp	r6, #10
 801d900:	d104      	bne.n	801d90c <__swbuf_r+0x6c>
 801d902:	4621      	mov	r1, r4
 801d904:	4628      	mov	r0, r5
 801d906:	f000 f92f 	bl	801db68 <_fflush_r>
 801d90a:	b988      	cbnz	r0, 801d930 <__swbuf_r+0x90>
 801d90c:	4638      	mov	r0, r7
 801d90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d910:	4b0a      	ldr	r3, [pc, #40]	; (801d93c <__swbuf_r+0x9c>)
 801d912:	429c      	cmp	r4, r3
 801d914:	d101      	bne.n	801d91a <__swbuf_r+0x7a>
 801d916:	68ac      	ldr	r4, [r5, #8]
 801d918:	e7cf      	b.n	801d8ba <__swbuf_r+0x1a>
 801d91a:	4b09      	ldr	r3, [pc, #36]	; (801d940 <__swbuf_r+0xa0>)
 801d91c:	429c      	cmp	r4, r3
 801d91e:	bf08      	it	eq
 801d920:	68ec      	ldreq	r4, [r5, #12]
 801d922:	e7ca      	b.n	801d8ba <__swbuf_r+0x1a>
 801d924:	4621      	mov	r1, r4
 801d926:	4628      	mov	r0, r5
 801d928:	f000 f80c 	bl	801d944 <__swsetup_r>
 801d92c:	2800      	cmp	r0, #0
 801d92e:	d0cb      	beq.n	801d8c8 <__swbuf_r+0x28>
 801d930:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d934:	e7ea      	b.n	801d90c <__swbuf_r+0x6c>
 801d936:	bf00      	nop
 801d938:	08022514 	.word	0x08022514
 801d93c:	08022534 	.word	0x08022534
 801d940:	080224f4 	.word	0x080224f4

0801d944 <__swsetup_r>:
 801d944:	4b32      	ldr	r3, [pc, #200]	; (801da10 <__swsetup_r+0xcc>)
 801d946:	b570      	push	{r4, r5, r6, lr}
 801d948:	681d      	ldr	r5, [r3, #0]
 801d94a:	4606      	mov	r6, r0
 801d94c:	460c      	mov	r4, r1
 801d94e:	b125      	cbz	r5, 801d95a <__swsetup_r+0x16>
 801d950:	69ab      	ldr	r3, [r5, #24]
 801d952:	b913      	cbnz	r3, 801d95a <__swsetup_r+0x16>
 801d954:	4628      	mov	r0, r5
 801d956:	f000 f99b 	bl	801dc90 <__sinit>
 801d95a:	4b2e      	ldr	r3, [pc, #184]	; (801da14 <__swsetup_r+0xd0>)
 801d95c:	429c      	cmp	r4, r3
 801d95e:	d10f      	bne.n	801d980 <__swsetup_r+0x3c>
 801d960:	686c      	ldr	r4, [r5, #4]
 801d962:	89a3      	ldrh	r3, [r4, #12]
 801d964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d968:	0719      	lsls	r1, r3, #28
 801d96a:	d42c      	bmi.n	801d9c6 <__swsetup_r+0x82>
 801d96c:	06dd      	lsls	r5, r3, #27
 801d96e:	d411      	bmi.n	801d994 <__swsetup_r+0x50>
 801d970:	2309      	movs	r3, #9
 801d972:	6033      	str	r3, [r6, #0]
 801d974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d978:	81a3      	strh	r3, [r4, #12]
 801d97a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d97e:	e03e      	b.n	801d9fe <__swsetup_r+0xba>
 801d980:	4b25      	ldr	r3, [pc, #148]	; (801da18 <__swsetup_r+0xd4>)
 801d982:	429c      	cmp	r4, r3
 801d984:	d101      	bne.n	801d98a <__swsetup_r+0x46>
 801d986:	68ac      	ldr	r4, [r5, #8]
 801d988:	e7eb      	b.n	801d962 <__swsetup_r+0x1e>
 801d98a:	4b24      	ldr	r3, [pc, #144]	; (801da1c <__swsetup_r+0xd8>)
 801d98c:	429c      	cmp	r4, r3
 801d98e:	bf08      	it	eq
 801d990:	68ec      	ldreq	r4, [r5, #12]
 801d992:	e7e6      	b.n	801d962 <__swsetup_r+0x1e>
 801d994:	0758      	lsls	r0, r3, #29
 801d996:	d512      	bpl.n	801d9be <__swsetup_r+0x7a>
 801d998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d99a:	b141      	cbz	r1, 801d9ae <__swsetup_r+0x6a>
 801d99c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d9a0:	4299      	cmp	r1, r3
 801d9a2:	d002      	beq.n	801d9aa <__swsetup_r+0x66>
 801d9a4:	4630      	mov	r0, r6
 801d9a6:	f000 fa93 	bl	801ded0 <_free_r>
 801d9aa:	2300      	movs	r3, #0
 801d9ac:	6363      	str	r3, [r4, #52]	; 0x34
 801d9ae:	89a3      	ldrh	r3, [r4, #12]
 801d9b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d9b4:	81a3      	strh	r3, [r4, #12]
 801d9b6:	2300      	movs	r3, #0
 801d9b8:	6063      	str	r3, [r4, #4]
 801d9ba:	6923      	ldr	r3, [r4, #16]
 801d9bc:	6023      	str	r3, [r4, #0]
 801d9be:	89a3      	ldrh	r3, [r4, #12]
 801d9c0:	f043 0308 	orr.w	r3, r3, #8
 801d9c4:	81a3      	strh	r3, [r4, #12]
 801d9c6:	6923      	ldr	r3, [r4, #16]
 801d9c8:	b94b      	cbnz	r3, 801d9de <__swsetup_r+0x9a>
 801d9ca:	89a3      	ldrh	r3, [r4, #12]
 801d9cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d9d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d9d4:	d003      	beq.n	801d9de <__swsetup_r+0x9a>
 801d9d6:	4621      	mov	r1, r4
 801d9d8:	4630      	mov	r0, r6
 801d9da:	f000 fa31 	bl	801de40 <__smakebuf_r>
 801d9de:	89a0      	ldrh	r0, [r4, #12]
 801d9e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d9e4:	f010 0301 	ands.w	r3, r0, #1
 801d9e8:	d00a      	beq.n	801da00 <__swsetup_r+0xbc>
 801d9ea:	2300      	movs	r3, #0
 801d9ec:	60a3      	str	r3, [r4, #8]
 801d9ee:	6963      	ldr	r3, [r4, #20]
 801d9f0:	425b      	negs	r3, r3
 801d9f2:	61a3      	str	r3, [r4, #24]
 801d9f4:	6923      	ldr	r3, [r4, #16]
 801d9f6:	b943      	cbnz	r3, 801da0a <__swsetup_r+0xc6>
 801d9f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d9fc:	d1ba      	bne.n	801d974 <__swsetup_r+0x30>
 801d9fe:	bd70      	pop	{r4, r5, r6, pc}
 801da00:	0781      	lsls	r1, r0, #30
 801da02:	bf58      	it	pl
 801da04:	6963      	ldrpl	r3, [r4, #20]
 801da06:	60a3      	str	r3, [r4, #8]
 801da08:	e7f4      	b.n	801d9f4 <__swsetup_r+0xb0>
 801da0a:	2000      	movs	r0, #0
 801da0c:	e7f7      	b.n	801d9fe <__swsetup_r+0xba>
 801da0e:	bf00      	nop
 801da10:	20000030 	.word	0x20000030
 801da14:	08022514 	.word	0x08022514
 801da18:	08022534 	.word	0x08022534
 801da1c:	080224f4 	.word	0x080224f4

0801da20 <__assert_func>:
 801da20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da22:	4614      	mov	r4, r2
 801da24:	461a      	mov	r2, r3
 801da26:	4b09      	ldr	r3, [pc, #36]	; (801da4c <__assert_func+0x2c>)
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	4605      	mov	r5, r0
 801da2c:	68d8      	ldr	r0, [r3, #12]
 801da2e:	b14c      	cbz	r4, 801da44 <__assert_func+0x24>
 801da30:	4b07      	ldr	r3, [pc, #28]	; (801da50 <__assert_func+0x30>)
 801da32:	9100      	str	r1, [sp, #0]
 801da34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da38:	4906      	ldr	r1, [pc, #24]	; (801da54 <__assert_func+0x34>)
 801da3a:	462b      	mov	r3, r5
 801da3c:	f000 f9a6 	bl	801dd8c <fiprintf>
 801da40:	f000 fe7a 	bl	801e738 <abort>
 801da44:	4b04      	ldr	r3, [pc, #16]	; (801da58 <__assert_func+0x38>)
 801da46:	461c      	mov	r4, r3
 801da48:	e7f3      	b.n	801da32 <__assert_func+0x12>
 801da4a:	bf00      	nop
 801da4c:	20000030 	.word	0x20000030
 801da50:	080224b6 	.word	0x080224b6
 801da54:	080224c3 	.word	0x080224c3
 801da58:	080224f1 	.word	0x080224f1

0801da5c <__sflush_r>:
 801da5c:	898a      	ldrh	r2, [r1, #12]
 801da5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da62:	4605      	mov	r5, r0
 801da64:	0710      	lsls	r0, r2, #28
 801da66:	460c      	mov	r4, r1
 801da68:	d458      	bmi.n	801db1c <__sflush_r+0xc0>
 801da6a:	684b      	ldr	r3, [r1, #4]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	dc05      	bgt.n	801da7c <__sflush_r+0x20>
 801da70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801da72:	2b00      	cmp	r3, #0
 801da74:	dc02      	bgt.n	801da7c <__sflush_r+0x20>
 801da76:	2000      	movs	r0, #0
 801da78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da7e:	2e00      	cmp	r6, #0
 801da80:	d0f9      	beq.n	801da76 <__sflush_r+0x1a>
 801da82:	2300      	movs	r3, #0
 801da84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801da88:	682f      	ldr	r7, [r5, #0]
 801da8a:	602b      	str	r3, [r5, #0]
 801da8c:	d032      	beq.n	801daf4 <__sflush_r+0x98>
 801da8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801da90:	89a3      	ldrh	r3, [r4, #12]
 801da92:	075a      	lsls	r2, r3, #29
 801da94:	d505      	bpl.n	801daa2 <__sflush_r+0x46>
 801da96:	6863      	ldr	r3, [r4, #4]
 801da98:	1ac0      	subs	r0, r0, r3
 801da9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801da9c:	b10b      	cbz	r3, 801daa2 <__sflush_r+0x46>
 801da9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801daa0:	1ac0      	subs	r0, r0, r3
 801daa2:	2300      	movs	r3, #0
 801daa4:	4602      	mov	r2, r0
 801daa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801daa8:	6a21      	ldr	r1, [r4, #32]
 801daaa:	4628      	mov	r0, r5
 801daac:	47b0      	blx	r6
 801daae:	1c43      	adds	r3, r0, #1
 801dab0:	89a3      	ldrh	r3, [r4, #12]
 801dab2:	d106      	bne.n	801dac2 <__sflush_r+0x66>
 801dab4:	6829      	ldr	r1, [r5, #0]
 801dab6:	291d      	cmp	r1, #29
 801dab8:	d82c      	bhi.n	801db14 <__sflush_r+0xb8>
 801daba:	4a2a      	ldr	r2, [pc, #168]	; (801db64 <__sflush_r+0x108>)
 801dabc:	40ca      	lsrs	r2, r1
 801dabe:	07d6      	lsls	r6, r2, #31
 801dac0:	d528      	bpl.n	801db14 <__sflush_r+0xb8>
 801dac2:	2200      	movs	r2, #0
 801dac4:	6062      	str	r2, [r4, #4]
 801dac6:	04d9      	lsls	r1, r3, #19
 801dac8:	6922      	ldr	r2, [r4, #16]
 801daca:	6022      	str	r2, [r4, #0]
 801dacc:	d504      	bpl.n	801dad8 <__sflush_r+0x7c>
 801dace:	1c42      	adds	r2, r0, #1
 801dad0:	d101      	bne.n	801dad6 <__sflush_r+0x7a>
 801dad2:	682b      	ldr	r3, [r5, #0]
 801dad4:	b903      	cbnz	r3, 801dad8 <__sflush_r+0x7c>
 801dad6:	6560      	str	r0, [r4, #84]	; 0x54
 801dad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dada:	602f      	str	r7, [r5, #0]
 801dadc:	2900      	cmp	r1, #0
 801dade:	d0ca      	beq.n	801da76 <__sflush_r+0x1a>
 801dae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dae4:	4299      	cmp	r1, r3
 801dae6:	d002      	beq.n	801daee <__sflush_r+0x92>
 801dae8:	4628      	mov	r0, r5
 801daea:	f000 f9f1 	bl	801ded0 <_free_r>
 801daee:	2000      	movs	r0, #0
 801daf0:	6360      	str	r0, [r4, #52]	; 0x34
 801daf2:	e7c1      	b.n	801da78 <__sflush_r+0x1c>
 801daf4:	6a21      	ldr	r1, [r4, #32]
 801daf6:	2301      	movs	r3, #1
 801daf8:	4628      	mov	r0, r5
 801dafa:	47b0      	blx	r6
 801dafc:	1c41      	adds	r1, r0, #1
 801dafe:	d1c7      	bne.n	801da90 <__sflush_r+0x34>
 801db00:	682b      	ldr	r3, [r5, #0]
 801db02:	2b00      	cmp	r3, #0
 801db04:	d0c4      	beq.n	801da90 <__sflush_r+0x34>
 801db06:	2b1d      	cmp	r3, #29
 801db08:	d001      	beq.n	801db0e <__sflush_r+0xb2>
 801db0a:	2b16      	cmp	r3, #22
 801db0c:	d101      	bne.n	801db12 <__sflush_r+0xb6>
 801db0e:	602f      	str	r7, [r5, #0]
 801db10:	e7b1      	b.n	801da76 <__sflush_r+0x1a>
 801db12:	89a3      	ldrh	r3, [r4, #12]
 801db14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db18:	81a3      	strh	r3, [r4, #12]
 801db1a:	e7ad      	b.n	801da78 <__sflush_r+0x1c>
 801db1c:	690f      	ldr	r7, [r1, #16]
 801db1e:	2f00      	cmp	r7, #0
 801db20:	d0a9      	beq.n	801da76 <__sflush_r+0x1a>
 801db22:	0793      	lsls	r3, r2, #30
 801db24:	680e      	ldr	r6, [r1, #0]
 801db26:	bf08      	it	eq
 801db28:	694b      	ldreq	r3, [r1, #20]
 801db2a:	600f      	str	r7, [r1, #0]
 801db2c:	bf18      	it	ne
 801db2e:	2300      	movne	r3, #0
 801db30:	eba6 0807 	sub.w	r8, r6, r7
 801db34:	608b      	str	r3, [r1, #8]
 801db36:	f1b8 0f00 	cmp.w	r8, #0
 801db3a:	dd9c      	ble.n	801da76 <__sflush_r+0x1a>
 801db3c:	6a21      	ldr	r1, [r4, #32]
 801db3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801db40:	4643      	mov	r3, r8
 801db42:	463a      	mov	r2, r7
 801db44:	4628      	mov	r0, r5
 801db46:	47b0      	blx	r6
 801db48:	2800      	cmp	r0, #0
 801db4a:	dc06      	bgt.n	801db5a <__sflush_r+0xfe>
 801db4c:	89a3      	ldrh	r3, [r4, #12]
 801db4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db52:	81a3      	strh	r3, [r4, #12]
 801db54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801db58:	e78e      	b.n	801da78 <__sflush_r+0x1c>
 801db5a:	4407      	add	r7, r0
 801db5c:	eba8 0800 	sub.w	r8, r8, r0
 801db60:	e7e9      	b.n	801db36 <__sflush_r+0xda>
 801db62:	bf00      	nop
 801db64:	20400001 	.word	0x20400001

0801db68 <_fflush_r>:
 801db68:	b538      	push	{r3, r4, r5, lr}
 801db6a:	690b      	ldr	r3, [r1, #16]
 801db6c:	4605      	mov	r5, r0
 801db6e:	460c      	mov	r4, r1
 801db70:	b913      	cbnz	r3, 801db78 <_fflush_r+0x10>
 801db72:	2500      	movs	r5, #0
 801db74:	4628      	mov	r0, r5
 801db76:	bd38      	pop	{r3, r4, r5, pc}
 801db78:	b118      	cbz	r0, 801db82 <_fflush_r+0x1a>
 801db7a:	6983      	ldr	r3, [r0, #24]
 801db7c:	b90b      	cbnz	r3, 801db82 <_fflush_r+0x1a>
 801db7e:	f000 f887 	bl	801dc90 <__sinit>
 801db82:	4b14      	ldr	r3, [pc, #80]	; (801dbd4 <_fflush_r+0x6c>)
 801db84:	429c      	cmp	r4, r3
 801db86:	d11b      	bne.n	801dbc0 <_fflush_r+0x58>
 801db88:	686c      	ldr	r4, [r5, #4]
 801db8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db8e:	2b00      	cmp	r3, #0
 801db90:	d0ef      	beq.n	801db72 <_fflush_r+0xa>
 801db92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801db94:	07d0      	lsls	r0, r2, #31
 801db96:	d404      	bmi.n	801dba2 <_fflush_r+0x3a>
 801db98:	0599      	lsls	r1, r3, #22
 801db9a:	d402      	bmi.n	801dba2 <_fflush_r+0x3a>
 801db9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db9e:	f000 f927 	bl	801ddf0 <__retarget_lock_acquire_recursive>
 801dba2:	4628      	mov	r0, r5
 801dba4:	4621      	mov	r1, r4
 801dba6:	f7ff ff59 	bl	801da5c <__sflush_r>
 801dbaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dbac:	07da      	lsls	r2, r3, #31
 801dbae:	4605      	mov	r5, r0
 801dbb0:	d4e0      	bmi.n	801db74 <_fflush_r+0xc>
 801dbb2:	89a3      	ldrh	r3, [r4, #12]
 801dbb4:	059b      	lsls	r3, r3, #22
 801dbb6:	d4dd      	bmi.n	801db74 <_fflush_r+0xc>
 801dbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dbba:	f000 f91a 	bl	801ddf2 <__retarget_lock_release_recursive>
 801dbbe:	e7d9      	b.n	801db74 <_fflush_r+0xc>
 801dbc0:	4b05      	ldr	r3, [pc, #20]	; (801dbd8 <_fflush_r+0x70>)
 801dbc2:	429c      	cmp	r4, r3
 801dbc4:	d101      	bne.n	801dbca <_fflush_r+0x62>
 801dbc6:	68ac      	ldr	r4, [r5, #8]
 801dbc8:	e7df      	b.n	801db8a <_fflush_r+0x22>
 801dbca:	4b04      	ldr	r3, [pc, #16]	; (801dbdc <_fflush_r+0x74>)
 801dbcc:	429c      	cmp	r4, r3
 801dbce:	bf08      	it	eq
 801dbd0:	68ec      	ldreq	r4, [r5, #12]
 801dbd2:	e7da      	b.n	801db8a <_fflush_r+0x22>
 801dbd4:	08022514 	.word	0x08022514
 801dbd8:	08022534 	.word	0x08022534
 801dbdc:	080224f4 	.word	0x080224f4

0801dbe0 <std>:
 801dbe0:	2300      	movs	r3, #0
 801dbe2:	b510      	push	{r4, lr}
 801dbe4:	4604      	mov	r4, r0
 801dbe6:	e9c0 3300 	strd	r3, r3, [r0]
 801dbea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbee:	6083      	str	r3, [r0, #8]
 801dbf0:	8181      	strh	r1, [r0, #12]
 801dbf2:	6643      	str	r3, [r0, #100]	; 0x64
 801dbf4:	81c2      	strh	r2, [r0, #14]
 801dbf6:	6183      	str	r3, [r0, #24]
 801dbf8:	4619      	mov	r1, r3
 801dbfa:	2208      	movs	r2, #8
 801dbfc:	305c      	adds	r0, #92	; 0x5c
 801dbfe:	f7ff fd5f 	bl	801d6c0 <memset>
 801dc02:	4b05      	ldr	r3, [pc, #20]	; (801dc18 <std+0x38>)
 801dc04:	6263      	str	r3, [r4, #36]	; 0x24
 801dc06:	4b05      	ldr	r3, [pc, #20]	; (801dc1c <std+0x3c>)
 801dc08:	62a3      	str	r3, [r4, #40]	; 0x28
 801dc0a:	4b05      	ldr	r3, [pc, #20]	; (801dc20 <std+0x40>)
 801dc0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dc0e:	4b05      	ldr	r3, [pc, #20]	; (801dc24 <std+0x44>)
 801dc10:	6224      	str	r4, [r4, #32]
 801dc12:	6323      	str	r3, [r4, #48]	; 0x30
 801dc14:	bd10      	pop	{r4, pc}
 801dc16:	bf00      	nop
 801dc18:	0801e68d 	.word	0x0801e68d
 801dc1c:	0801e6af 	.word	0x0801e6af
 801dc20:	0801e6e7 	.word	0x0801e6e7
 801dc24:	0801e70b 	.word	0x0801e70b

0801dc28 <_cleanup_r>:
 801dc28:	4901      	ldr	r1, [pc, #4]	; (801dc30 <_cleanup_r+0x8>)
 801dc2a:	f000 b8c1 	b.w	801ddb0 <_fwalk_reent>
 801dc2e:	bf00      	nop
 801dc30:	0801db69 	.word	0x0801db69

0801dc34 <__sfmoreglue>:
 801dc34:	b570      	push	{r4, r5, r6, lr}
 801dc36:	2268      	movs	r2, #104	; 0x68
 801dc38:	1e4d      	subs	r5, r1, #1
 801dc3a:	4355      	muls	r5, r2
 801dc3c:	460e      	mov	r6, r1
 801dc3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dc42:	f000 f9b1 	bl	801dfa8 <_malloc_r>
 801dc46:	4604      	mov	r4, r0
 801dc48:	b140      	cbz	r0, 801dc5c <__sfmoreglue+0x28>
 801dc4a:	2100      	movs	r1, #0
 801dc4c:	e9c0 1600 	strd	r1, r6, [r0]
 801dc50:	300c      	adds	r0, #12
 801dc52:	60a0      	str	r0, [r4, #8]
 801dc54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dc58:	f7ff fd32 	bl	801d6c0 <memset>
 801dc5c:	4620      	mov	r0, r4
 801dc5e:	bd70      	pop	{r4, r5, r6, pc}

0801dc60 <__sfp_lock_acquire>:
 801dc60:	4801      	ldr	r0, [pc, #4]	; (801dc68 <__sfp_lock_acquire+0x8>)
 801dc62:	f000 b8c5 	b.w	801ddf0 <__retarget_lock_acquire_recursive>
 801dc66:	bf00      	nop
 801dc68:	20011529 	.word	0x20011529

0801dc6c <__sfp_lock_release>:
 801dc6c:	4801      	ldr	r0, [pc, #4]	; (801dc74 <__sfp_lock_release+0x8>)
 801dc6e:	f000 b8c0 	b.w	801ddf2 <__retarget_lock_release_recursive>
 801dc72:	bf00      	nop
 801dc74:	20011529 	.word	0x20011529

0801dc78 <__sinit_lock_acquire>:
 801dc78:	4801      	ldr	r0, [pc, #4]	; (801dc80 <__sinit_lock_acquire+0x8>)
 801dc7a:	f000 b8b9 	b.w	801ddf0 <__retarget_lock_acquire_recursive>
 801dc7e:	bf00      	nop
 801dc80:	2001152a 	.word	0x2001152a

0801dc84 <__sinit_lock_release>:
 801dc84:	4801      	ldr	r0, [pc, #4]	; (801dc8c <__sinit_lock_release+0x8>)
 801dc86:	f000 b8b4 	b.w	801ddf2 <__retarget_lock_release_recursive>
 801dc8a:	bf00      	nop
 801dc8c:	2001152a 	.word	0x2001152a

0801dc90 <__sinit>:
 801dc90:	b510      	push	{r4, lr}
 801dc92:	4604      	mov	r4, r0
 801dc94:	f7ff fff0 	bl	801dc78 <__sinit_lock_acquire>
 801dc98:	69a3      	ldr	r3, [r4, #24]
 801dc9a:	b11b      	cbz	r3, 801dca4 <__sinit+0x14>
 801dc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dca0:	f7ff bff0 	b.w	801dc84 <__sinit_lock_release>
 801dca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dca8:	6523      	str	r3, [r4, #80]	; 0x50
 801dcaa:	4b13      	ldr	r3, [pc, #76]	; (801dcf8 <__sinit+0x68>)
 801dcac:	4a13      	ldr	r2, [pc, #76]	; (801dcfc <__sinit+0x6c>)
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	62a2      	str	r2, [r4, #40]	; 0x28
 801dcb2:	42a3      	cmp	r3, r4
 801dcb4:	bf04      	itt	eq
 801dcb6:	2301      	moveq	r3, #1
 801dcb8:	61a3      	streq	r3, [r4, #24]
 801dcba:	4620      	mov	r0, r4
 801dcbc:	f000 f820 	bl	801dd00 <__sfp>
 801dcc0:	6060      	str	r0, [r4, #4]
 801dcc2:	4620      	mov	r0, r4
 801dcc4:	f000 f81c 	bl	801dd00 <__sfp>
 801dcc8:	60a0      	str	r0, [r4, #8]
 801dcca:	4620      	mov	r0, r4
 801dccc:	f000 f818 	bl	801dd00 <__sfp>
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	60e0      	str	r0, [r4, #12]
 801dcd4:	2104      	movs	r1, #4
 801dcd6:	6860      	ldr	r0, [r4, #4]
 801dcd8:	f7ff ff82 	bl	801dbe0 <std>
 801dcdc:	68a0      	ldr	r0, [r4, #8]
 801dcde:	2201      	movs	r2, #1
 801dce0:	2109      	movs	r1, #9
 801dce2:	f7ff ff7d 	bl	801dbe0 <std>
 801dce6:	68e0      	ldr	r0, [r4, #12]
 801dce8:	2202      	movs	r2, #2
 801dcea:	2112      	movs	r1, #18
 801dcec:	f7ff ff78 	bl	801dbe0 <std>
 801dcf0:	2301      	movs	r3, #1
 801dcf2:	61a3      	str	r3, [r4, #24]
 801dcf4:	e7d2      	b.n	801dc9c <__sinit+0xc>
 801dcf6:	bf00      	nop
 801dcf8:	08022440 	.word	0x08022440
 801dcfc:	0801dc29 	.word	0x0801dc29

0801dd00 <__sfp>:
 801dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd02:	4607      	mov	r7, r0
 801dd04:	f7ff ffac 	bl	801dc60 <__sfp_lock_acquire>
 801dd08:	4b1e      	ldr	r3, [pc, #120]	; (801dd84 <__sfp+0x84>)
 801dd0a:	681e      	ldr	r6, [r3, #0]
 801dd0c:	69b3      	ldr	r3, [r6, #24]
 801dd0e:	b913      	cbnz	r3, 801dd16 <__sfp+0x16>
 801dd10:	4630      	mov	r0, r6
 801dd12:	f7ff ffbd 	bl	801dc90 <__sinit>
 801dd16:	3648      	adds	r6, #72	; 0x48
 801dd18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dd1c:	3b01      	subs	r3, #1
 801dd1e:	d503      	bpl.n	801dd28 <__sfp+0x28>
 801dd20:	6833      	ldr	r3, [r6, #0]
 801dd22:	b30b      	cbz	r3, 801dd68 <__sfp+0x68>
 801dd24:	6836      	ldr	r6, [r6, #0]
 801dd26:	e7f7      	b.n	801dd18 <__sfp+0x18>
 801dd28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dd2c:	b9d5      	cbnz	r5, 801dd64 <__sfp+0x64>
 801dd2e:	4b16      	ldr	r3, [pc, #88]	; (801dd88 <__sfp+0x88>)
 801dd30:	60e3      	str	r3, [r4, #12]
 801dd32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dd36:	6665      	str	r5, [r4, #100]	; 0x64
 801dd38:	f000 f859 	bl	801ddee <__retarget_lock_init_recursive>
 801dd3c:	f7ff ff96 	bl	801dc6c <__sfp_lock_release>
 801dd40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dd44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dd48:	6025      	str	r5, [r4, #0]
 801dd4a:	61a5      	str	r5, [r4, #24]
 801dd4c:	2208      	movs	r2, #8
 801dd4e:	4629      	mov	r1, r5
 801dd50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dd54:	f7ff fcb4 	bl	801d6c0 <memset>
 801dd58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dd5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dd60:	4620      	mov	r0, r4
 801dd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd64:	3468      	adds	r4, #104	; 0x68
 801dd66:	e7d9      	b.n	801dd1c <__sfp+0x1c>
 801dd68:	2104      	movs	r1, #4
 801dd6a:	4638      	mov	r0, r7
 801dd6c:	f7ff ff62 	bl	801dc34 <__sfmoreglue>
 801dd70:	4604      	mov	r4, r0
 801dd72:	6030      	str	r0, [r6, #0]
 801dd74:	2800      	cmp	r0, #0
 801dd76:	d1d5      	bne.n	801dd24 <__sfp+0x24>
 801dd78:	f7ff ff78 	bl	801dc6c <__sfp_lock_release>
 801dd7c:	230c      	movs	r3, #12
 801dd7e:	603b      	str	r3, [r7, #0]
 801dd80:	e7ee      	b.n	801dd60 <__sfp+0x60>
 801dd82:	bf00      	nop
 801dd84:	08022440 	.word	0x08022440
 801dd88:	ffff0001 	.word	0xffff0001

0801dd8c <fiprintf>:
 801dd8c:	b40e      	push	{r1, r2, r3}
 801dd8e:	b503      	push	{r0, r1, lr}
 801dd90:	4601      	mov	r1, r0
 801dd92:	ab03      	add	r3, sp, #12
 801dd94:	4805      	ldr	r0, [pc, #20]	; (801ddac <fiprintf+0x20>)
 801dd96:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd9a:	6800      	ldr	r0, [r0, #0]
 801dd9c:	9301      	str	r3, [sp, #4]
 801dd9e:	f000 f9a1 	bl	801e0e4 <_vfiprintf_r>
 801dda2:	b002      	add	sp, #8
 801dda4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dda8:	b003      	add	sp, #12
 801ddaa:	4770      	bx	lr
 801ddac:	20000030 	.word	0x20000030

0801ddb0 <_fwalk_reent>:
 801ddb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ddb4:	4606      	mov	r6, r0
 801ddb6:	4688      	mov	r8, r1
 801ddb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ddbc:	2700      	movs	r7, #0
 801ddbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ddc2:	f1b9 0901 	subs.w	r9, r9, #1
 801ddc6:	d505      	bpl.n	801ddd4 <_fwalk_reent+0x24>
 801ddc8:	6824      	ldr	r4, [r4, #0]
 801ddca:	2c00      	cmp	r4, #0
 801ddcc:	d1f7      	bne.n	801ddbe <_fwalk_reent+0xe>
 801ddce:	4638      	mov	r0, r7
 801ddd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddd4:	89ab      	ldrh	r3, [r5, #12]
 801ddd6:	2b01      	cmp	r3, #1
 801ddd8:	d907      	bls.n	801ddea <_fwalk_reent+0x3a>
 801ddda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ddde:	3301      	adds	r3, #1
 801dde0:	d003      	beq.n	801ddea <_fwalk_reent+0x3a>
 801dde2:	4629      	mov	r1, r5
 801dde4:	4630      	mov	r0, r6
 801dde6:	47c0      	blx	r8
 801dde8:	4307      	orrs	r7, r0
 801ddea:	3568      	adds	r5, #104	; 0x68
 801ddec:	e7e9      	b.n	801ddc2 <_fwalk_reent+0x12>

0801ddee <__retarget_lock_init_recursive>:
 801ddee:	4770      	bx	lr

0801ddf0 <__retarget_lock_acquire_recursive>:
 801ddf0:	4770      	bx	lr

0801ddf2 <__retarget_lock_release_recursive>:
 801ddf2:	4770      	bx	lr

0801ddf4 <__swhatbuf_r>:
 801ddf4:	b570      	push	{r4, r5, r6, lr}
 801ddf6:	460e      	mov	r6, r1
 801ddf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddfc:	2900      	cmp	r1, #0
 801ddfe:	b096      	sub	sp, #88	; 0x58
 801de00:	4614      	mov	r4, r2
 801de02:	461d      	mov	r5, r3
 801de04:	da08      	bge.n	801de18 <__swhatbuf_r+0x24>
 801de06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801de0a:	2200      	movs	r2, #0
 801de0c:	602a      	str	r2, [r5, #0]
 801de0e:	061a      	lsls	r2, r3, #24
 801de10:	d410      	bmi.n	801de34 <__swhatbuf_r+0x40>
 801de12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de16:	e00e      	b.n	801de36 <__swhatbuf_r+0x42>
 801de18:	466a      	mov	r2, sp
 801de1a:	f000 fca5 	bl	801e768 <_fstat_r>
 801de1e:	2800      	cmp	r0, #0
 801de20:	dbf1      	blt.n	801de06 <__swhatbuf_r+0x12>
 801de22:	9a01      	ldr	r2, [sp, #4]
 801de24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801de28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801de2c:	425a      	negs	r2, r3
 801de2e:	415a      	adcs	r2, r3
 801de30:	602a      	str	r2, [r5, #0]
 801de32:	e7ee      	b.n	801de12 <__swhatbuf_r+0x1e>
 801de34:	2340      	movs	r3, #64	; 0x40
 801de36:	2000      	movs	r0, #0
 801de38:	6023      	str	r3, [r4, #0]
 801de3a:	b016      	add	sp, #88	; 0x58
 801de3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801de40 <__smakebuf_r>:
 801de40:	898b      	ldrh	r3, [r1, #12]
 801de42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801de44:	079d      	lsls	r5, r3, #30
 801de46:	4606      	mov	r6, r0
 801de48:	460c      	mov	r4, r1
 801de4a:	d507      	bpl.n	801de5c <__smakebuf_r+0x1c>
 801de4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801de50:	6023      	str	r3, [r4, #0]
 801de52:	6123      	str	r3, [r4, #16]
 801de54:	2301      	movs	r3, #1
 801de56:	6163      	str	r3, [r4, #20]
 801de58:	b002      	add	sp, #8
 801de5a:	bd70      	pop	{r4, r5, r6, pc}
 801de5c:	ab01      	add	r3, sp, #4
 801de5e:	466a      	mov	r2, sp
 801de60:	f7ff ffc8 	bl	801ddf4 <__swhatbuf_r>
 801de64:	9900      	ldr	r1, [sp, #0]
 801de66:	4605      	mov	r5, r0
 801de68:	4630      	mov	r0, r6
 801de6a:	f000 f89d 	bl	801dfa8 <_malloc_r>
 801de6e:	b948      	cbnz	r0, 801de84 <__smakebuf_r+0x44>
 801de70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de74:	059a      	lsls	r2, r3, #22
 801de76:	d4ef      	bmi.n	801de58 <__smakebuf_r+0x18>
 801de78:	f023 0303 	bic.w	r3, r3, #3
 801de7c:	f043 0302 	orr.w	r3, r3, #2
 801de80:	81a3      	strh	r3, [r4, #12]
 801de82:	e7e3      	b.n	801de4c <__smakebuf_r+0xc>
 801de84:	4b0d      	ldr	r3, [pc, #52]	; (801debc <__smakebuf_r+0x7c>)
 801de86:	62b3      	str	r3, [r6, #40]	; 0x28
 801de88:	89a3      	ldrh	r3, [r4, #12]
 801de8a:	6020      	str	r0, [r4, #0]
 801de8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de90:	81a3      	strh	r3, [r4, #12]
 801de92:	9b00      	ldr	r3, [sp, #0]
 801de94:	6163      	str	r3, [r4, #20]
 801de96:	9b01      	ldr	r3, [sp, #4]
 801de98:	6120      	str	r0, [r4, #16]
 801de9a:	b15b      	cbz	r3, 801deb4 <__smakebuf_r+0x74>
 801de9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dea0:	4630      	mov	r0, r6
 801dea2:	f000 fc73 	bl	801e78c <_isatty_r>
 801dea6:	b128      	cbz	r0, 801deb4 <__smakebuf_r+0x74>
 801dea8:	89a3      	ldrh	r3, [r4, #12]
 801deaa:	f023 0303 	bic.w	r3, r3, #3
 801deae:	f043 0301 	orr.w	r3, r3, #1
 801deb2:	81a3      	strh	r3, [r4, #12]
 801deb4:	89a0      	ldrh	r0, [r4, #12]
 801deb6:	4305      	orrs	r5, r0
 801deb8:	81a5      	strh	r5, [r4, #12]
 801deba:	e7cd      	b.n	801de58 <__smakebuf_r+0x18>
 801debc:	0801dc29 	.word	0x0801dc29

0801dec0 <malloc>:
 801dec0:	4b02      	ldr	r3, [pc, #8]	; (801decc <malloc+0xc>)
 801dec2:	4601      	mov	r1, r0
 801dec4:	6818      	ldr	r0, [r3, #0]
 801dec6:	f000 b86f 	b.w	801dfa8 <_malloc_r>
 801deca:	bf00      	nop
 801decc:	20000030 	.word	0x20000030

0801ded0 <_free_r>:
 801ded0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ded2:	2900      	cmp	r1, #0
 801ded4:	d044      	beq.n	801df60 <_free_r+0x90>
 801ded6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801deda:	9001      	str	r0, [sp, #4]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	f1a1 0404 	sub.w	r4, r1, #4
 801dee2:	bfb8      	it	lt
 801dee4:	18e4      	addlt	r4, r4, r3
 801dee6:	f000 fc73 	bl	801e7d0 <__malloc_lock>
 801deea:	4a1e      	ldr	r2, [pc, #120]	; (801df64 <_free_r+0x94>)
 801deec:	9801      	ldr	r0, [sp, #4]
 801deee:	6813      	ldr	r3, [r2, #0]
 801def0:	b933      	cbnz	r3, 801df00 <_free_r+0x30>
 801def2:	6063      	str	r3, [r4, #4]
 801def4:	6014      	str	r4, [r2, #0]
 801def6:	b003      	add	sp, #12
 801def8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801defc:	f000 bc6e 	b.w	801e7dc <__malloc_unlock>
 801df00:	42a3      	cmp	r3, r4
 801df02:	d908      	bls.n	801df16 <_free_r+0x46>
 801df04:	6825      	ldr	r5, [r4, #0]
 801df06:	1961      	adds	r1, r4, r5
 801df08:	428b      	cmp	r3, r1
 801df0a:	bf01      	itttt	eq
 801df0c:	6819      	ldreq	r1, [r3, #0]
 801df0e:	685b      	ldreq	r3, [r3, #4]
 801df10:	1949      	addeq	r1, r1, r5
 801df12:	6021      	streq	r1, [r4, #0]
 801df14:	e7ed      	b.n	801def2 <_free_r+0x22>
 801df16:	461a      	mov	r2, r3
 801df18:	685b      	ldr	r3, [r3, #4]
 801df1a:	b10b      	cbz	r3, 801df20 <_free_r+0x50>
 801df1c:	42a3      	cmp	r3, r4
 801df1e:	d9fa      	bls.n	801df16 <_free_r+0x46>
 801df20:	6811      	ldr	r1, [r2, #0]
 801df22:	1855      	adds	r5, r2, r1
 801df24:	42a5      	cmp	r5, r4
 801df26:	d10b      	bne.n	801df40 <_free_r+0x70>
 801df28:	6824      	ldr	r4, [r4, #0]
 801df2a:	4421      	add	r1, r4
 801df2c:	1854      	adds	r4, r2, r1
 801df2e:	42a3      	cmp	r3, r4
 801df30:	6011      	str	r1, [r2, #0]
 801df32:	d1e0      	bne.n	801def6 <_free_r+0x26>
 801df34:	681c      	ldr	r4, [r3, #0]
 801df36:	685b      	ldr	r3, [r3, #4]
 801df38:	6053      	str	r3, [r2, #4]
 801df3a:	4421      	add	r1, r4
 801df3c:	6011      	str	r1, [r2, #0]
 801df3e:	e7da      	b.n	801def6 <_free_r+0x26>
 801df40:	d902      	bls.n	801df48 <_free_r+0x78>
 801df42:	230c      	movs	r3, #12
 801df44:	6003      	str	r3, [r0, #0]
 801df46:	e7d6      	b.n	801def6 <_free_r+0x26>
 801df48:	6825      	ldr	r5, [r4, #0]
 801df4a:	1961      	adds	r1, r4, r5
 801df4c:	428b      	cmp	r3, r1
 801df4e:	bf04      	itt	eq
 801df50:	6819      	ldreq	r1, [r3, #0]
 801df52:	685b      	ldreq	r3, [r3, #4]
 801df54:	6063      	str	r3, [r4, #4]
 801df56:	bf04      	itt	eq
 801df58:	1949      	addeq	r1, r1, r5
 801df5a:	6021      	streq	r1, [r4, #0]
 801df5c:	6054      	str	r4, [r2, #4]
 801df5e:	e7ca      	b.n	801def6 <_free_r+0x26>
 801df60:	b003      	add	sp, #12
 801df62:	bd30      	pop	{r4, r5, pc}
 801df64:	2001152c 	.word	0x2001152c

0801df68 <sbrk_aligned>:
 801df68:	b570      	push	{r4, r5, r6, lr}
 801df6a:	4e0e      	ldr	r6, [pc, #56]	; (801dfa4 <sbrk_aligned+0x3c>)
 801df6c:	460c      	mov	r4, r1
 801df6e:	6831      	ldr	r1, [r6, #0]
 801df70:	4605      	mov	r5, r0
 801df72:	b911      	cbnz	r1, 801df7a <sbrk_aligned+0x12>
 801df74:	f000 fb7a 	bl	801e66c <_sbrk_r>
 801df78:	6030      	str	r0, [r6, #0]
 801df7a:	4621      	mov	r1, r4
 801df7c:	4628      	mov	r0, r5
 801df7e:	f000 fb75 	bl	801e66c <_sbrk_r>
 801df82:	1c43      	adds	r3, r0, #1
 801df84:	d00a      	beq.n	801df9c <sbrk_aligned+0x34>
 801df86:	1cc4      	adds	r4, r0, #3
 801df88:	f024 0403 	bic.w	r4, r4, #3
 801df8c:	42a0      	cmp	r0, r4
 801df8e:	d007      	beq.n	801dfa0 <sbrk_aligned+0x38>
 801df90:	1a21      	subs	r1, r4, r0
 801df92:	4628      	mov	r0, r5
 801df94:	f000 fb6a 	bl	801e66c <_sbrk_r>
 801df98:	3001      	adds	r0, #1
 801df9a:	d101      	bne.n	801dfa0 <sbrk_aligned+0x38>
 801df9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801dfa0:	4620      	mov	r0, r4
 801dfa2:	bd70      	pop	{r4, r5, r6, pc}
 801dfa4:	20011530 	.word	0x20011530

0801dfa8 <_malloc_r>:
 801dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfac:	1ccd      	adds	r5, r1, #3
 801dfae:	f025 0503 	bic.w	r5, r5, #3
 801dfb2:	3508      	adds	r5, #8
 801dfb4:	2d0c      	cmp	r5, #12
 801dfb6:	bf38      	it	cc
 801dfb8:	250c      	movcc	r5, #12
 801dfba:	2d00      	cmp	r5, #0
 801dfbc:	4607      	mov	r7, r0
 801dfbe:	db01      	blt.n	801dfc4 <_malloc_r+0x1c>
 801dfc0:	42a9      	cmp	r1, r5
 801dfc2:	d905      	bls.n	801dfd0 <_malloc_r+0x28>
 801dfc4:	230c      	movs	r3, #12
 801dfc6:	603b      	str	r3, [r7, #0]
 801dfc8:	2600      	movs	r6, #0
 801dfca:	4630      	mov	r0, r6
 801dfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfd0:	4e2e      	ldr	r6, [pc, #184]	; (801e08c <_malloc_r+0xe4>)
 801dfd2:	f000 fbfd 	bl	801e7d0 <__malloc_lock>
 801dfd6:	6833      	ldr	r3, [r6, #0]
 801dfd8:	461c      	mov	r4, r3
 801dfda:	bb34      	cbnz	r4, 801e02a <_malloc_r+0x82>
 801dfdc:	4629      	mov	r1, r5
 801dfde:	4638      	mov	r0, r7
 801dfe0:	f7ff ffc2 	bl	801df68 <sbrk_aligned>
 801dfe4:	1c43      	adds	r3, r0, #1
 801dfe6:	4604      	mov	r4, r0
 801dfe8:	d14d      	bne.n	801e086 <_malloc_r+0xde>
 801dfea:	6834      	ldr	r4, [r6, #0]
 801dfec:	4626      	mov	r6, r4
 801dfee:	2e00      	cmp	r6, #0
 801dff0:	d140      	bne.n	801e074 <_malloc_r+0xcc>
 801dff2:	6823      	ldr	r3, [r4, #0]
 801dff4:	4631      	mov	r1, r6
 801dff6:	4638      	mov	r0, r7
 801dff8:	eb04 0803 	add.w	r8, r4, r3
 801dffc:	f000 fb36 	bl	801e66c <_sbrk_r>
 801e000:	4580      	cmp	r8, r0
 801e002:	d13a      	bne.n	801e07a <_malloc_r+0xd2>
 801e004:	6821      	ldr	r1, [r4, #0]
 801e006:	3503      	adds	r5, #3
 801e008:	1a6d      	subs	r5, r5, r1
 801e00a:	f025 0503 	bic.w	r5, r5, #3
 801e00e:	3508      	adds	r5, #8
 801e010:	2d0c      	cmp	r5, #12
 801e012:	bf38      	it	cc
 801e014:	250c      	movcc	r5, #12
 801e016:	4629      	mov	r1, r5
 801e018:	4638      	mov	r0, r7
 801e01a:	f7ff ffa5 	bl	801df68 <sbrk_aligned>
 801e01e:	3001      	adds	r0, #1
 801e020:	d02b      	beq.n	801e07a <_malloc_r+0xd2>
 801e022:	6823      	ldr	r3, [r4, #0]
 801e024:	442b      	add	r3, r5
 801e026:	6023      	str	r3, [r4, #0]
 801e028:	e00e      	b.n	801e048 <_malloc_r+0xa0>
 801e02a:	6822      	ldr	r2, [r4, #0]
 801e02c:	1b52      	subs	r2, r2, r5
 801e02e:	d41e      	bmi.n	801e06e <_malloc_r+0xc6>
 801e030:	2a0b      	cmp	r2, #11
 801e032:	d916      	bls.n	801e062 <_malloc_r+0xba>
 801e034:	1961      	adds	r1, r4, r5
 801e036:	42a3      	cmp	r3, r4
 801e038:	6025      	str	r5, [r4, #0]
 801e03a:	bf18      	it	ne
 801e03c:	6059      	strne	r1, [r3, #4]
 801e03e:	6863      	ldr	r3, [r4, #4]
 801e040:	bf08      	it	eq
 801e042:	6031      	streq	r1, [r6, #0]
 801e044:	5162      	str	r2, [r4, r5]
 801e046:	604b      	str	r3, [r1, #4]
 801e048:	4638      	mov	r0, r7
 801e04a:	f104 060b 	add.w	r6, r4, #11
 801e04e:	f000 fbc5 	bl	801e7dc <__malloc_unlock>
 801e052:	f026 0607 	bic.w	r6, r6, #7
 801e056:	1d23      	adds	r3, r4, #4
 801e058:	1af2      	subs	r2, r6, r3
 801e05a:	d0b6      	beq.n	801dfca <_malloc_r+0x22>
 801e05c:	1b9b      	subs	r3, r3, r6
 801e05e:	50a3      	str	r3, [r4, r2]
 801e060:	e7b3      	b.n	801dfca <_malloc_r+0x22>
 801e062:	6862      	ldr	r2, [r4, #4]
 801e064:	42a3      	cmp	r3, r4
 801e066:	bf0c      	ite	eq
 801e068:	6032      	streq	r2, [r6, #0]
 801e06a:	605a      	strne	r2, [r3, #4]
 801e06c:	e7ec      	b.n	801e048 <_malloc_r+0xa0>
 801e06e:	4623      	mov	r3, r4
 801e070:	6864      	ldr	r4, [r4, #4]
 801e072:	e7b2      	b.n	801dfda <_malloc_r+0x32>
 801e074:	4634      	mov	r4, r6
 801e076:	6876      	ldr	r6, [r6, #4]
 801e078:	e7b9      	b.n	801dfee <_malloc_r+0x46>
 801e07a:	230c      	movs	r3, #12
 801e07c:	603b      	str	r3, [r7, #0]
 801e07e:	4638      	mov	r0, r7
 801e080:	f000 fbac 	bl	801e7dc <__malloc_unlock>
 801e084:	e7a1      	b.n	801dfca <_malloc_r+0x22>
 801e086:	6025      	str	r5, [r4, #0]
 801e088:	e7de      	b.n	801e048 <_malloc_r+0xa0>
 801e08a:	bf00      	nop
 801e08c:	2001152c 	.word	0x2001152c

0801e090 <__sfputc_r>:
 801e090:	6893      	ldr	r3, [r2, #8]
 801e092:	3b01      	subs	r3, #1
 801e094:	2b00      	cmp	r3, #0
 801e096:	b410      	push	{r4}
 801e098:	6093      	str	r3, [r2, #8]
 801e09a:	da08      	bge.n	801e0ae <__sfputc_r+0x1e>
 801e09c:	6994      	ldr	r4, [r2, #24]
 801e09e:	42a3      	cmp	r3, r4
 801e0a0:	db01      	blt.n	801e0a6 <__sfputc_r+0x16>
 801e0a2:	290a      	cmp	r1, #10
 801e0a4:	d103      	bne.n	801e0ae <__sfputc_r+0x1e>
 801e0a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0aa:	f7ff bbf9 	b.w	801d8a0 <__swbuf_r>
 801e0ae:	6813      	ldr	r3, [r2, #0]
 801e0b0:	1c58      	adds	r0, r3, #1
 801e0b2:	6010      	str	r0, [r2, #0]
 801e0b4:	7019      	strb	r1, [r3, #0]
 801e0b6:	4608      	mov	r0, r1
 801e0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0bc:	4770      	bx	lr

0801e0be <__sfputs_r>:
 801e0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0c0:	4606      	mov	r6, r0
 801e0c2:	460f      	mov	r7, r1
 801e0c4:	4614      	mov	r4, r2
 801e0c6:	18d5      	adds	r5, r2, r3
 801e0c8:	42ac      	cmp	r4, r5
 801e0ca:	d101      	bne.n	801e0d0 <__sfputs_r+0x12>
 801e0cc:	2000      	movs	r0, #0
 801e0ce:	e007      	b.n	801e0e0 <__sfputs_r+0x22>
 801e0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0d4:	463a      	mov	r2, r7
 801e0d6:	4630      	mov	r0, r6
 801e0d8:	f7ff ffda 	bl	801e090 <__sfputc_r>
 801e0dc:	1c43      	adds	r3, r0, #1
 801e0de:	d1f3      	bne.n	801e0c8 <__sfputs_r+0xa>
 801e0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e0e4 <_vfiprintf_r>:
 801e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0e8:	460d      	mov	r5, r1
 801e0ea:	b09d      	sub	sp, #116	; 0x74
 801e0ec:	4614      	mov	r4, r2
 801e0ee:	4698      	mov	r8, r3
 801e0f0:	4606      	mov	r6, r0
 801e0f2:	b118      	cbz	r0, 801e0fc <_vfiprintf_r+0x18>
 801e0f4:	6983      	ldr	r3, [r0, #24]
 801e0f6:	b90b      	cbnz	r3, 801e0fc <_vfiprintf_r+0x18>
 801e0f8:	f7ff fdca 	bl	801dc90 <__sinit>
 801e0fc:	4b89      	ldr	r3, [pc, #548]	; (801e324 <_vfiprintf_r+0x240>)
 801e0fe:	429d      	cmp	r5, r3
 801e100:	d11b      	bne.n	801e13a <_vfiprintf_r+0x56>
 801e102:	6875      	ldr	r5, [r6, #4]
 801e104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e106:	07d9      	lsls	r1, r3, #31
 801e108:	d405      	bmi.n	801e116 <_vfiprintf_r+0x32>
 801e10a:	89ab      	ldrh	r3, [r5, #12]
 801e10c:	059a      	lsls	r2, r3, #22
 801e10e:	d402      	bmi.n	801e116 <_vfiprintf_r+0x32>
 801e110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e112:	f7ff fe6d 	bl	801ddf0 <__retarget_lock_acquire_recursive>
 801e116:	89ab      	ldrh	r3, [r5, #12]
 801e118:	071b      	lsls	r3, r3, #28
 801e11a:	d501      	bpl.n	801e120 <_vfiprintf_r+0x3c>
 801e11c:	692b      	ldr	r3, [r5, #16]
 801e11e:	b9eb      	cbnz	r3, 801e15c <_vfiprintf_r+0x78>
 801e120:	4629      	mov	r1, r5
 801e122:	4630      	mov	r0, r6
 801e124:	f7ff fc0e 	bl	801d944 <__swsetup_r>
 801e128:	b1c0      	cbz	r0, 801e15c <_vfiprintf_r+0x78>
 801e12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e12c:	07dc      	lsls	r4, r3, #31
 801e12e:	d50e      	bpl.n	801e14e <_vfiprintf_r+0x6a>
 801e130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e134:	b01d      	add	sp, #116	; 0x74
 801e136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e13a:	4b7b      	ldr	r3, [pc, #492]	; (801e328 <_vfiprintf_r+0x244>)
 801e13c:	429d      	cmp	r5, r3
 801e13e:	d101      	bne.n	801e144 <_vfiprintf_r+0x60>
 801e140:	68b5      	ldr	r5, [r6, #8]
 801e142:	e7df      	b.n	801e104 <_vfiprintf_r+0x20>
 801e144:	4b79      	ldr	r3, [pc, #484]	; (801e32c <_vfiprintf_r+0x248>)
 801e146:	429d      	cmp	r5, r3
 801e148:	bf08      	it	eq
 801e14a:	68f5      	ldreq	r5, [r6, #12]
 801e14c:	e7da      	b.n	801e104 <_vfiprintf_r+0x20>
 801e14e:	89ab      	ldrh	r3, [r5, #12]
 801e150:	0598      	lsls	r0, r3, #22
 801e152:	d4ed      	bmi.n	801e130 <_vfiprintf_r+0x4c>
 801e154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e156:	f7ff fe4c 	bl	801ddf2 <__retarget_lock_release_recursive>
 801e15a:	e7e9      	b.n	801e130 <_vfiprintf_r+0x4c>
 801e15c:	2300      	movs	r3, #0
 801e15e:	9309      	str	r3, [sp, #36]	; 0x24
 801e160:	2320      	movs	r3, #32
 801e162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e166:	f8cd 800c 	str.w	r8, [sp, #12]
 801e16a:	2330      	movs	r3, #48	; 0x30
 801e16c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e330 <_vfiprintf_r+0x24c>
 801e170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e174:	f04f 0901 	mov.w	r9, #1
 801e178:	4623      	mov	r3, r4
 801e17a:	469a      	mov	sl, r3
 801e17c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e180:	b10a      	cbz	r2, 801e186 <_vfiprintf_r+0xa2>
 801e182:	2a25      	cmp	r2, #37	; 0x25
 801e184:	d1f9      	bne.n	801e17a <_vfiprintf_r+0x96>
 801e186:	ebba 0b04 	subs.w	fp, sl, r4
 801e18a:	d00b      	beq.n	801e1a4 <_vfiprintf_r+0xc0>
 801e18c:	465b      	mov	r3, fp
 801e18e:	4622      	mov	r2, r4
 801e190:	4629      	mov	r1, r5
 801e192:	4630      	mov	r0, r6
 801e194:	f7ff ff93 	bl	801e0be <__sfputs_r>
 801e198:	3001      	adds	r0, #1
 801e19a:	f000 80aa 	beq.w	801e2f2 <_vfiprintf_r+0x20e>
 801e19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e1a0:	445a      	add	r2, fp
 801e1a2:	9209      	str	r2, [sp, #36]	; 0x24
 801e1a4:	f89a 3000 	ldrb.w	r3, [sl]
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	f000 80a2 	beq.w	801e2f2 <_vfiprintf_r+0x20e>
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e1b8:	f10a 0a01 	add.w	sl, sl, #1
 801e1bc:	9304      	str	r3, [sp, #16]
 801e1be:	9307      	str	r3, [sp, #28]
 801e1c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e1c4:	931a      	str	r3, [sp, #104]	; 0x68
 801e1c6:	4654      	mov	r4, sl
 801e1c8:	2205      	movs	r2, #5
 801e1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1ce:	4858      	ldr	r0, [pc, #352]	; (801e330 <_vfiprintf_r+0x24c>)
 801e1d0:	f7e2 f84e 	bl	8000270 <memchr>
 801e1d4:	9a04      	ldr	r2, [sp, #16]
 801e1d6:	b9d8      	cbnz	r0, 801e210 <_vfiprintf_r+0x12c>
 801e1d8:	06d1      	lsls	r1, r2, #27
 801e1da:	bf44      	itt	mi
 801e1dc:	2320      	movmi	r3, #32
 801e1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e1e2:	0713      	lsls	r3, r2, #28
 801e1e4:	bf44      	itt	mi
 801e1e6:	232b      	movmi	r3, #43	; 0x2b
 801e1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e1ec:	f89a 3000 	ldrb.w	r3, [sl]
 801e1f0:	2b2a      	cmp	r3, #42	; 0x2a
 801e1f2:	d015      	beq.n	801e220 <_vfiprintf_r+0x13c>
 801e1f4:	9a07      	ldr	r2, [sp, #28]
 801e1f6:	4654      	mov	r4, sl
 801e1f8:	2000      	movs	r0, #0
 801e1fa:	f04f 0c0a 	mov.w	ip, #10
 801e1fe:	4621      	mov	r1, r4
 801e200:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e204:	3b30      	subs	r3, #48	; 0x30
 801e206:	2b09      	cmp	r3, #9
 801e208:	d94e      	bls.n	801e2a8 <_vfiprintf_r+0x1c4>
 801e20a:	b1b0      	cbz	r0, 801e23a <_vfiprintf_r+0x156>
 801e20c:	9207      	str	r2, [sp, #28]
 801e20e:	e014      	b.n	801e23a <_vfiprintf_r+0x156>
 801e210:	eba0 0308 	sub.w	r3, r0, r8
 801e214:	fa09 f303 	lsl.w	r3, r9, r3
 801e218:	4313      	orrs	r3, r2
 801e21a:	9304      	str	r3, [sp, #16]
 801e21c:	46a2      	mov	sl, r4
 801e21e:	e7d2      	b.n	801e1c6 <_vfiprintf_r+0xe2>
 801e220:	9b03      	ldr	r3, [sp, #12]
 801e222:	1d19      	adds	r1, r3, #4
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	9103      	str	r1, [sp, #12]
 801e228:	2b00      	cmp	r3, #0
 801e22a:	bfbb      	ittet	lt
 801e22c:	425b      	neglt	r3, r3
 801e22e:	f042 0202 	orrlt.w	r2, r2, #2
 801e232:	9307      	strge	r3, [sp, #28]
 801e234:	9307      	strlt	r3, [sp, #28]
 801e236:	bfb8      	it	lt
 801e238:	9204      	strlt	r2, [sp, #16]
 801e23a:	7823      	ldrb	r3, [r4, #0]
 801e23c:	2b2e      	cmp	r3, #46	; 0x2e
 801e23e:	d10c      	bne.n	801e25a <_vfiprintf_r+0x176>
 801e240:	7863      	ldrb	r3, [r4, #1]
 801e242:	2b2a      	cmp	r3, #42	; 0x2a
 801e244:	d135      	bne.n	801e2b2 <_vfiprintf_r+0x1ce>
 801e246:	9b03      	ldr	r3, [sp, #12]
 801e248:	1d1a      	adds	r2, r3, #4
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	9203      	str	r2, [sp, #12]
 801e24e:	2b00      	cmp	r3, #0
 801e250:	bfb8      	it	lt
 801e252:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e256:	3402      	adds	r4, #2
 801e258:	9305      	str	r3, [sp, #20]
 801e25a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e340 <_vfiprintf_r+0x25c>
 801e25e:	7821      	ldrb	r1, [r4, #0]
 801e260:	2203      	movs	r2, #3
 801e262:	4650      	mov	r0, sl
 801e264:	f7e2 f804 	bl	8000270 <memchr>
 801e268:	b140      	cbz	r0, 801e27c <_vfiprintf_r+0x198>
 801e26a:	2340      	movs	r3, #64	; 0x40
 801e26c:	eba0 000a 	sub.w	r0, r0, sl
 801e270:	fa03 f000 	lsl.w	r0, r3, r0
 801e274:	9b04      	ldr	r3, [sp, #16]
 801e276:	4303      	orrs	r3, r0
 801e278:	3401      	adds	r4, #1
 801e27a:	9304      	str	r3, [sp, #16]
 801e27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e280:	482c      	ldr	r0, [pc, #176]	; (801e334 <_vfiprintf_r+0x250>)
 801e282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e286:	2206      	movs	r2, #6
 801e288:	f7e1 fff2 	bl	8000270 <memchr>
 801e28c:	2800      	cmp	r0, #0
 801e28e:	d03f      	beq.n	801e310 <_vfiprintf_r+0x22c>
 801e290:	4b29      	ldr	r3, [pc, #164]	; (801e338 <_vfiprintf_r+0x254>)
 801e292:	bb1b      	cbnz	r3, 801e2dc <_vfiprintf_r+0x1f8>
 801e294:	9b03      	ldr	r3, [sp, #12]
 801e296:	3307      	adds	r3, #7
 801e298:	f023 0307 	bic.w	r3, r3, #7
 801e29c:	3308      	adds	r3, #8
 801e29e:	9303      	str	r3, [sp, #12]
 801e2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2a2:	443b      	add	r3, r7
 801e2a4:	9309      	str	r3, [sp, #36]	; 0x24
 801e2a6:	e767      	b.n	801e178 <_vfiprintf_r+0x94>
 801e2a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801e2ac:	460c      	mov	r4, r1
 801e2ae:	2001      	movs	r0, #1
 801e2b0:	e7a5      	b.n	801e1fe <_vfiprintf_r+0x11a>
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	3401      	adds	r4, #1
 801e2b6:	9305      	str	r3, [sp, #20]
 801e2b8:	4619      	mov	r1, r3
 801e2ba:	f04f 0c0a 	mov.w	ip, #10
 801e2be:	4620      	mov	r0, r4
 801e2c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e2c4:	3a30      	subs	r2, #48	; 0x30
 801e2c6:	2a09      	cmp	r2, #9
 801e2c8:	d903      	bls.n	801e2d2 <_vfiprintf_r+0x1ee>
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d0c5      	beq.n	801e25a <_vfiprintf_r+0x176>
 801e2ce:	9105      	str	r1, [sp, #20]
 801e2d0:	e7c3      	b.n	801e25a <_vfiprintf_r+0x176>
 801e2d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801e2d6:	4604      	mov	r4, r0
 801e2d8:	2301      	movs	r3, #1
 801e2da:	e7f0      	b.n	801e2be <_vfiprintf_r+0x1da>
 801e2dc:	ab03      	add	r3, sp, #12
 801e2de:	9300      	str	r3, [sp, #0]
 801e2e0:	462a      	mov	r2, r5
 801e2e2:	4b16      	ldr	r3, [pc, #88]	; (801e33c <_vfiprintf_r+0x258>)
 801e2e4:	a904      	add	r1, sp, #16
 801e2e6:	4630      	mov	r0, r6
 801e2e8:	f3af 8000 	nop.w
 801e2ec:	4607      	mov	r7, r0
 801e2ee:	1c78      	adds	r0, r7, #1
 801e2f0:	d1d6      	bne.n	801e2a0 <_vfiprintf_r+0x1bc>
 801e2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e2f4:	07d9      	lsls	r1, r3, #31
 801e2f6:	d405      	bmi.n	801e304 <_vfiprintf_r+0x220>
 801e2f8:	89ab      	ldrh	r3, [r5, #12]
 801e2fa:	059a      	lsls	r2, r3, #22
 801e2fc:	d402      	bmi.n	801e304 <_vfiprintf_r+0x220>
 801e2fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e300:	f7ff fd77 	bl	801ddf2 <__retarget_lock_release_recursive>
 801e304:	89ab      	ldrh	r3, [r5, #12]
 801e306:	065b      	lsls	r3, r3, #25
 801e308:	f53f af12 	bmi.w	801e130 <_vfiprintf_r+0x4c>
 801e30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e30e:	e711      	b.n	801e134 <_vfiprintf_r+0x50>
 801e310:	ab03      	add	r3, sp, #12
 801e312:	9300      	str	r3, [sp, #0]
 801e314:	462a      	mov	r2, r5
 801e316:	4b09      	ldr	r3, [pc, #36]	; (801e33c <_vfiprintf_r+0x258>)
 801e318:	a904      	add	r1, sp, #16
 801e31a:	4630      	mov	r0, r6
 801e31c:	f000 f880 	bl	801e420 <_printf_i>
 801e320:	e7e4      	b.n	801e2ec <_vfiprintf_r+0x208>
 801e322:	bf00      	nop
 801e324:	08022514 	.word	0x08022514
 801e328:	08022534 	.word	0x08022534
 801e32c:	080224f4 	.word	0x080224f4
 801e330:	08022554 	.word	0x08022554
 801e334:	0802255e 	.word	0x0802255e
 801e338:	00000000 	.word	0x00000000
 801e33c:	0801e0bf 	.word	0x0801e0bf
 801e340:	0802255a 	.word	0x0802255a

0801e344 <_printf_common>:
 801e344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e348:	4616      	mov	r6, r2
 801e34a:	4699      	mov	r9, r3
 801e34c:	688a      	ldr	r2, [r1, #8]
 801e34e:	690b      	ldr	r3, [r1, #16]
 801e350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e354:	4293      	cmp	r3, r2
 801e356:	bfb8      	it	lt
 801e358:	4613      	movlt	r3, r2
 801e35a:	6033      	str	r3, [r6, #0]
 801e35c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e360:	4607      	mov	r7, r0
 801e362:	460c      	mov	r4, r1
 801e364:	b10a      	cbz	r2, 801e36a <_printf_common+0x26>
 801e366:	3301      	adds	r3, #1
 801e368:	6033      	str	r3, [r6, #0]
 801e36a:	6823      	ldr	r3, [r4, #0]
 801e36c:	0699      	lsls	r1, r3, #26
 801e36e:	bf42      	ittt	mi
 801e370:	6833      	ldrmi	r3, [r6, #0]
 801e372:	3302      	addmi	r3, #2
 801e374:	6033      	strmi	r3, [r6, #0]
 801e376:	6825      	ldr	r5, [r4, #0]
 801e378:	f015 0506 	ands.w	r5, r5, #6
 801e37c:	d106      	bne.n	801e38c <_printf_common+0x48>
 801e37e:	f104 0a19 	add.w	sl, r4, #25
 801e382:	68e3      	ldr	r3, [r4, #12]
 801e384:	6832      	ldr	r2, [r6, #0]
 801e386:	1a9b      	subs	r3, r3, r2
 801e388:	42ab      	cmp	r3, r5
 801e38a:	dc26      	bgt.n	801e3da <_printf_common+0x96>
 801e38c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e390:	1e13      	subs	r3, r2, #0
 801e392:	6822      	ldr	r2, [r4, #0]
 801e394:	bf18      	it	ne
 801e396:	2301      	movne	r3, #1
 801e398:	0692      	lsls	r2, r2, #26
 801e39a:	d42b      	bmi.n	801e3f4 <_printf_common+0xb0>
 801e39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e3a0:	4649      	mov	r1, r9
 801e3a2:	4638      	mov	r0, r7
 801e3a4:	47c0      	blx	r8
 801e3a6:	3001      	adds	r0, #1
 801e3a8:	d01e      	beq.n	801e3e8 <_printf_common+0xa4>
 801e3aa:	6823      	ldr	r3, [r4, #0]
 801e3ac:	68e5      	ldr	r5, [r4, #12]
 801e3ae:	6832      	ldr	r2, [r6, #0]
 801e3b0:	f003 0306 	and.w	r3, r3, #6
 801e3b4:	2b04      	cmp	r3, #4
 801e3b6:	bf08      	it	eq
 801e3b8:	1aad      	subeq	r5, r5, r2
 801e3ba:	68a3      	ldr	r3, [r4, #8]
 801e3bc:	6922      	ldr	r2, [r4, #16]
 801e3be:	bf0c      	ite	eq
 801e3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e3c4:	2500      	movne	r5, #0
 801e3c6:	4293      	cmp	r3, r2
 801e3c8:	bfc4      	itt	gt
 801e3ca:	1a9b      	subgt	r3, r3, r2
 801e3cc:	18ed      	addgt	r5, r5, r3
 801e3ce:	2600      	movs	r6, #0
 801e3d0:	341a      	adds	r4, #26
 801e3d2:	42b5      	cmp	r5, r6
 801e3d4:	d11a      	bne.n	801e40c <_printf_common+0xc8>
 801e3d6:	2000      	movs	r0, #0
 801e3d8:	e008      	b.n	801e3ec <_printf_common+0xa8>
 801e3da:	2301      	movs	r3, #1
 801e3dc:	4652      	mov	r2, sl
 801e3de:	4649      	mov	r1, r9
 801e3e0:	4638      	mov	r0, r7
 801e3e2:	47c0      	blx	r8
 801e3e4:	3001      	adds	r0, #1
 801e3e6:	d103      	bne.n	801e3f0 <_printf_common+0xac>
 801e3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3f0:	3501      	adds	r5, #1
 801e3f2:	e7c6      	b.n	801e382 <_printf_common+0x3e>
 801e3f4:	18e1      	adds	r1, r4, r3
 801e3f6:	1c5a      	adds	r2, r3, #1
 801e3f8:	2030      	movs	r0, #48	; 0x30
 801e3fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e3fe:	4422      	add	r2, r4
 801e400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e408:	3302      	adds	r3, #2
 801e40a:	e7c7      	b.n	801e39c <_printf_common+0x58>
 801e40c:	2301      	movs	r3, #1
 801e40e:	4622      	mov	r2, r4
 801e410:	4649      	mov	r1, r9
 801e412:	4638      	mov	r0, r7
 801e414:	47c0      	blx	r8
 801e416:	3001      	adds	r0, #1
 801e418:	d0e6      	beq.n	801e3e8 <_printf_common+0xa4>
 801e41a:	3601      	adds	r6, #1
 801e41c:	e7d9      	b.n	801e3d2 <_printf_common+0x8e>
	...

0801e420 <_printf_i>:
 801e420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e424:	7e0f      	ldrb	r7, [r1, #24]
 801e426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e428:	2f78      	cmp	r7, #120	; 0x78
 801e42a:	4691      	mov	r9, r2
 801e42c:	4680      	mov	r8, r0
 801e42e:	460c      	mov	r4, r1
 801e430:	469a      	mov	sl, r3
 801e432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e436:	d807      	bhi.n	801e448 <_printf_i+0x28>
 801e438:	2f62      	cmp	r7, #98	; 0x62
 801e43a:	d80a      	bhi.n	801e452 <_printf_i+0x32>
 801e43c:	2f00      	cmp	r7, #0
 801e43e:	f000 80d8 	beq.w	801e5f2 <_printf_i+0x1d2>
 801e442:	2f58      	cmp	r7, #88	; 0x58
 801e444:	f000 80a3 	beq.w	801e58e <_printf_i+0x16e>
 801e448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e44c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e450:	e03a      	b.n	801e4c8 <_printf_i+0xa8>
 801e452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e456:	2b15      	cmp	r3, #21
 801e458:	d8f6      	bhi.n	801e448 <_printf_i+0x28>
 801e45a:	a101      	add	r1, pc, #4	; (adr r1, 801e460 <_printf_i+0x40>)
 801e45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e460:	0801e4b9 	.word	0x0801e4b9
 801e464:	0801e4cd 	.word	0x0801e4cd
 801e468:	0801e449 	.word	0x0801e449
 801e46c:	0801e449 	.word	0x0801e449
 801e470:	0801e449 	.word	0x0801e449
 801e474:	0801e449 	.word	0x0801e449
 801e478:	0801e4cd 	.word	0x0801e4cd
 801e47c:	0801e449 	.word	0x0801e449
 801e480:	0801e449 	.word	0x0801e449
 801e484:	0801e449 	.word	0x0801e449
 801e488:	0801e449 	.word	0x0801e449
 801e48c:	0801e5d9 	.word	0x0801e5d9
 801e490:	0801e4fd 	.word	0x0801e4fd
 801e494:	0801e5bb 	.word	0x0801e5bb
 801e498:	0801e449 	.word	0x0801e449
 801e49c:	0801e449 	.word	0x0801e449
 801e4a0:	0801e5fb 	.word	0x0801e5fb
 801e4a4:	0801e449 	.word	0x0801e449
 801e4a8:	0801e4fd 	.word	0x0801e4fd
 801e4ac:	0801e449 	.word	0x0801e449
 801e4b0:	0801e449 	.word	0x0801e449
 801e4b4:	0801e5c3 	.word	0x0801e5c3
 801e4b8:	682b      	ldr	r3, [r5, #0]
 801e4ba:	1d1a      	adds	r2, r3, #4
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	602a      	str	r2, [r5, #0]
 801e4c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e4c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e4c8:	2301      	movs	r3, #1
 801e4ca:	e0a3      	b.n	801e614 <_printf_i+0x1f4>
 801e4cc:	6820      	ldr	r0, [r4, #0]
 801e4ce:	6829      	ldr	r1, [r5, #0]
 801e4d0:	0606      	lsls	r6, r0, #24
 801e4d2:	f101 0304 	add.w	r3, r1, #4
 801e4d6:	d50a      	bpl.n	801e4ee <_printf_i+0xce>
 801e4d8:	680e      	ldr	r6, [r1, #0]
 801e4da:	602b      	str	r3, [r5, #0]
 801e4dc:	2e00      	cmp	r6, #0
 801e4de:	da03      	bge.n	801e4e8 <_printf_i+0xc8>
 801e4e0:	232d      	movs	r3, #45	; 0x2d
 801e4e2:	4276      	negs	r6, r6
 801e4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e4e8:	485e      	ldr	r0, [pc, #376]	; (801e664 <_printf_i+0x244>)
 801e4ea:	230a      	movs	r3, #10
 801e4ec:	e019      	b.n	801e522 <_printf_i+0x102>
 801e4ee:	680e      	ldr	r6, [r1, #0]
 801e4f0:	602b      	str	r3, [r5, #0]
 801e4f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e4f6:	bf18      	it	ne
 801e4f8:	b236      	sxthne	r6, r6
 801e4fa:	e7ef      	b.n	801e4dc <_printf_i+0xbc>
 801e4fc:	682b      	ldr	r3, [r5, #0]
 801e4fe:	6820      	ldr	r0, [r4, #0]
 801e500:	1d19      	adds	r1, r3, #4
 801e502:	6029      	str	r1, [r5, #0]
 801e504:	0601      	lsls	r1, r0, #24
 801e506:	d501      	bpl.n	801e50c <_printf_i+0xec>
 801e508:	681e      	ldr	r6, [r3, #0]
 801e50a:	e002      	b.n	801e512 <_printf_i+0xf2>
 801e50c:	0646      	lsls	r6, r0, #25
 801e50e:	d5fb      	bpl.n	801e508 <_printf_i+0xe8>
 801e510:	881e      	ldrh	r6, [r3, #0]
 801e512:	4854      	ldr	r0, [pc, #336]	; (801e664 <_printf_i+0x244>)
 801e514:	2f6f      	cmp	r7, #111	; 0x6f
 801e516:	bf0c      	ite	eq
 801e518:	2308      	moveq	r3, #8
 801e51a:	230a      	movne	r3, #10
 801e51c:	2100      	movs	r1, #0
 801e51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e522:	6865      	ldr	r5, [r4, #4]
 801e524:	60a5      	str	r5, [r4, #8]
 801e526:	2d00      	cmp	r5, #0
 801e528:	bfa2      	ittt	ge
 801e52a:	6821      	ldrge	r1, [r4, #0]
 801e52c:	f021 0104 	bicge.w	r1, r1, #4
 801e530:	6021      	strge	r1, [r4, #0]
 801e532:	b90e      	cbnz	r6, 801e538 <_printf_i+0x118>
 801e534:	2d00      	cmp	r5, #0
 801e536:	d04d      	beq.n	801e5d4 <_printf_i+0x1b4>
 801e538:	4615      	mov	r5, r2
 801e53a:	fbb6 f1f3 	udiv	r1, r6, r3
 801e53e:	fb03 6711 	mls	r7, r3, r1, r6
 801e542:	5dc7      	ldrb	r7, [r0, r7]
 801e544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e548:	4637      	mov	r7, r6
 801e54a:	42bb      	cmp	r3, r7
 801e54c:	460e      	mov	r6, r1
 801e54e:	d9f4      	bls.n	801e53a <_printf_i+0x11a>
 801e550:	2b08      	cmp	r3, #8
 801e552:	d10b      	bne.n	801e56c <_printf_i+0x14c>
 801e554:	6823      	ldr	r3, [r4, #0]
 801e556:	07de      	lsls	r6, r3, #31
 801e558:	d508      	bpl.n	801e56c <_printf_i+0x14c>
 801e55a:	6923      	ldr	r3, [r4, #16]
 801e55c:	6861      	ldr	r1, [r4, #4]
 801e55e:	4299      	cmp	r1, r3
 801e560:	bfde      	ittt	le
 801e562:	2330      	movle	r3, #48	; 0x30
 801e564:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e568:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e56c:	1b52      	subs	r2, r2, r5
 801e56e:	6122      	str	r2, [r4, #16]
 801e570:	f8cd a000 	str.w	sl, [sp]
 801e574:	464b      	mov	r3, r9
 801e576:	aa03      	add	r2, sp, #12
 801e578:	4621      	mov	r1, r4
 801e57a:	4640      	mov	r0, r8
 801e57c:	f7ff fee2 	bl	801e344 <_printf_common>
 801e580:	3001      	adds	r0, #1
 801e582:	d14c      	bne.n	801e61e <_printf_i+0x1fe>
 801e584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e588:	b004      	add	sp, #16
 801e58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e58e:	4835      	ldr	r0, [pc, #212]	; (801e664 <_printf_i+0x244>)
 801e590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e594:	6829      	ldr	r1, [r5, #0]
 801e596:	6823      	ldr	r3, [r4, #0]
 801e598:	f851 6b04 	ldr.w	r6, [r1], #4
 801e59c:	6029      	str	r1, [r5, #0]
 801e59e:	061d      	lsls	r5, r3, #24
 801e5a0:	d514      	bpl.n	801e5cc <_printf_i+0x1ac>
 801e5a2:	07df      	lsls	r7, r3, #31
 801e5a4:	bf44      	itt	mi
 801e5a6:	f043 0320 	orrmi.w	r3, r3, #32
 801e5aa:	6023      	strmi	r3, [r4, #0]
 801e5ac:	b91e      	cbnz	r6, 801e5b6 <_printf_i+0x196>
 801e5ae:	6823      	ldr	r3, [r4, #0]
 801e5b0:	f023 0320 	bic.w	r3, r3, #32
 801e5b4:	6023      	str	r3, [r4, #0]
 801e5b6:	2310      	movs	r3, #16
 801e5b8:	e7b0      	b.n	801e51c <_printf_i+0xfc>
 801e5ba:	6823      	ldr	r3, [r4, #0]
 801e5bc:	f043 0320 	orr.w	r3, r3, #32
 801e5c0:	6023      	str	r3, [r4, #0]
 801e5c2:	2378      	movs	r3, #120	; 0x78
 801e5c4:	4828      	ldr	r0, [pc, #160]	; (801e668 <_printf_i+0x248>)
 801e5c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e5ca:	e7e3      	b.n	801e594 <_printf_i+0x174>
 801e5cc:	0659      	lsls	r1, r3, #25
 801e5ce:	bf48      	it	mi
 801e5d0:	b2b6      	uxthmi	r6, r6
 801e5d2:	e7e6      	b.n	801e5a2 <_printf_i+0x182>
 801e5d4:	4615      	mov	r5, r2
 801e5d6:	e7bb      	b.n	801e550 <_printf_i+0x130>
 801e5d8:	682b      	ldr	r3, [r5, #0]
 801e5da:	6826      	ldr	r6, [r4, #0]
 801e5dc:	6961      	ldr	r1, [r4, #20]
 801e5de:	1d18      	adds	r0, r3, #4
 801e5e0:	6028      	str	r0, [r5, #0]
 801e5e2:	0635      	lsls	r5, r6, #24
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	d501      	bpl.n	801e5ec <_printf_i+0x1cc>
 801e5e8:	6019      	str	r1, [r3, #0]
 801e5ea:	e002      	b.n	801e5f2 <_printf_i+0x1d2>
 801e5ec:	0670      	lsls	r0, r6, #25
 801e5ee:	d5fb      	bpl.n	801e5e8 <_printf_i+0x1c8>
 801e5f0:	8019      	strh	r1, [r3, #0]
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	6123      	str	r3, [r4, #16]
 801e5f6:	4615      	mov	r5, r2
 801e5f8:	e7ba      	b.n	801e570 <_printf_i+0x150>
 801e5fa:	682b      	ldr	r3, [r5, #0]
 801e5fc:	1d1a      	adds	r2, r3, #4
 801e5fe:	602a      	str	r2, [r5, #0]
 801e600:	681d      	ldr	r5, [r3, #0]
 801e602:	6862      	ldr	r2, [r4, #4]
 801e604:	2100      	movs	r1, #0
 801e606:	4628      	mov	r0, r5
 801e608:	f7e1 fe32 	bl	8000270 <memchr>
 801e60c:	b108      	cbz	r0, 801e612 <_printf_i+0x1f2>
 801e60e:	1b40      	subs	r0, r0, r5
 801e610:	6060      	str	r0, [r4, #4]
 801e612:	6863      	ldr	r3, [r4, #4]
 801e614:	6123      	str	r3, [r4, #16]
 801e616:	2300      	movs	r3, #0
 801e618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e61c:	e7a8      	b.n	801e570 <_printf_i+0x150>
 801e61e:	6923      	ldr	r3, [r4, #16]
 801e620:	462a      	mov	r2, r5
 801e622:	4649      	mov	r1, r9
 801e624:	4640      	mov	r0, r8
 801e626:	47d0      	blx	sl
 801e628:	3001      	adds	r0, #1
 801e62a:	d0ab      	beq.n	801e584 <_printf_i+0x164>
 801e62c:	6823      	ldr	r3, [r4, #0]
 801e62e:	079b      	lsls	r3, r3, #30
 801e630:	d413      	bmi.n	801e65a <_printf_i+0x23a>
 801e632:	68e0      	ldr	r0, [r4, #12]
 801e634:	9b03      	ldr	r3, [sp, #12]
 801e636:	4298      	cmp	r0, r3
 801e638:	bfb8      	it	lt
 801e63a:	4618      	movlt	r0, r3
 801e63c:	e7a4      	b.n	801e588 <_printf_i+0x168>
 801e63e:	2301      	movs	r3, #1
 801e640:	4632      	mov	r2, r6
 801e642:	4649      	mov	r1, r9
 801e644:	4640      	mov	r0, r8
 801e646:	47d0      	blx	sl
 801e648:	3001      	adds	r0, #1
 801e64a:	d09b      	beq.n	801e584 <_printf_i+0x164>
 801e64c:	3501      	adds	r5, #1
 801e64e:	68e3      	ldr	r3, [r4, #12]
 801e650:	9903      	ldr	r1, [sp, #12]
 801e652:	1a5b      	subs	r3, r3, r1
 801e654:	42ab      	cmp	r3, r5
 801e656:	dcf2      	bgt.n	801e63e <_printf_i+0x21e>
 801e658:	e7eb      	b.n	801e632 <_printf_i+0x212>
 801e65a:	2500      	movs	r5, #0
 801e65c:	f104 0619 	add.w	r6, r4, #25
 801e660:	e7f5      	b.n	801e64e <_printf_i+0x22e>
 801e662:	bf00      	nop
 801e664:	08022565 	.word	0x08022565
 801e668:	08022576 	.word	0x08022576

0801e66c <_sbrk_r>:
 801e66c:	b538      	push	{r3, r4, r5, lr}
 801e66e:	4d06      	ldr	r5, [pc, #24]	; (801e688 <_sbrk_r+0x1c>)
 801e670:	2300      	movs	r3, #0
 801e672:	4604      	mov	r4, r0
 801e674:	4608      	mov	r0, r1
 801e676:	602b      	str	r3, [r5, #0]
 801e678:	f7e3 fa06 	bl	8001a88 <_sbrk>
 801e67c:	1c43      	adds	r3, r0, #1
 801e67e:	d102      	bne.n	801e686 <_sbrk_r+0x1a>
 801e680:	682b      	ldr	r3, [r5, #0]
 801e682:	b103      	cbz	r3, 801e686 <_sbrk_r+0x1a>
 801e684:	6023      	str	r3, [r4, #0]
 801e686:	bd38      	pop	{r3, r4, r5, pc}
 801e688:	20011524 	.word	0x20011524

0801e68c <__sread>:
 801e68c:	b510      	push	{r4, lr}
 801e68e:	460c      	mov	r4, r1
 801e690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e694:	f000 f8a8 	bl	801e7e8 <_read_r>
 801e698:	2800      	cmp	r0, #0
 801e69a:	bfab      	itete	ge
 801e69c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e69e:	89a3      	ldrhlt	r3, [r4, #12]
 801e6a0:	181b      	addge	r3, r3, r0
 801e6a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e6a6:	bfac      	ite	ge
 801e6a8:	6563      	strge	r3, [r4, #84]	; 0x54
 801e6aa:	81a3      	strhlt	r3, [r4, #12]
 801e6ac:	bd10      	pop	{r4, pc}

0801e6ae <__swrite>:
 801e6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6b2:	461f      	mov	r7, r3
 801e6b4:	898b      	ldrh	r3, [r1, #12]
 801e6b6:	05db      	lsls	r3, r3, #23
 801e6b8:	4605      	mov	r5, r0
 801e6ba:	460c      	mov	r4, r1
 801e6bc:	4616      	mov	r6, r2
 801e6be:	d505      	bpl.n	801e6cc <__swrite+0x1e>
 801e6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6c4:	2302      	movs	r3, #2
 801e6c6:	2200      	movs	r2, #0
 801e6c8:	f000 f870 	bl	801e7ac <_lseek_r>
 801e6cc:	89a3      	ldrh	r3, [r4, #12]
 801e6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e6d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e6d6:	81a3      	strh	r3, [r4, #12]
 801e6d8:	4632      	mov	r2, r6
 801e6da:	463b      	mov	r3, r7
 801e6dc:	4628      	mov	r0, r5
 801e6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e6e2:	f000 b817 	b.w	801e714 <_write_r>

0801e6e6 <__sseek>:
 801e6e6:	b510      	push	{r4, lr}
 801e6e8:	460c      	mov	r4, r1
 801e6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6ee:	f000 f85d 	bl	801e7ac <_lseek_r>
 801e6f2:	1c43      	adds	r3, r0, #1
 801e6f4:	89a3      	ldrh	r3, [r4, #12]
 801e6f6:	bf15      	itete	ne
 801e6f8:	6560      	strne	r0, [r4, #84]	; 0x54
 801e6fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e6fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e702:	81a3      	strheq	r3, [r4, #12]
 801e704:	bf18      	it	ne
 801e706:	81a3      	strhne	r3, [r4, #12]
 801e708:	bd10      	pop	{r4, pc}

0801e70a <__sclose>:
 801e70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e70e:	f000 b81b 	b.w	801e748 <_close_r>
	...

0801e714 <_write_r>:
 801e714:	b538      	push	{r3, r4, r5, lr}
 801e716:	4d07      	ldr	r5, [pc, #28]	; (801e734 <_write_r+0x20>)
 801e718:	4604      	mov	r4, r0
 801e71a:	4608      	mov	r0, r1
 801e71c:	4611      	mov	r1, r2
 801e71e:	2200      	movs	r2, #0
 801e720:	602a      	str	r2, [r5, #0]
 801e722:	461a      	mov	r2, r3
 801e724:	f7e3 f95f 	bl	80019e6 <_write>
 801e728:	1c43      	adds	r3, r0, #1
 801e72a:	d102      	bne.n	801e732 <_write_r+0x1e>
 801e72c:	682b      	ldr	r3, [r5, #0]
 801e72e:	b103      	cbz	r3, 801e732 <_write_r+0x1e>
 801e730:	6023      	str	r3, [r4, #0]
 801e732:	bd38      	pop	{r3, r4, r5, pc}
 801e734:	20011524 	.word	0x20011524

0801e738 <abort>:
 801e738:	b508      	push	{r3, lr}
 801e73a:	2006      	movs	r0, #6
 801e73c:	f000 f88e 	bl	801e85c <raise>
 801e740:	2001      	movs	r0, #1
 801e742:	f7e3 f929 	bl	8001998 <_exit>
	...

0801e748 <_close_r>:
 801e748:	b538      	push	{r3, r4, r5, lr}
 801e74a:	4d06      	ldr	r5, [pc, #24]	; (801e764 <_close_r+0x1c>)
 801e74c:	2300      	movs	r3, #0
 801e74e:	4604      	mov	r4, r0
 801e750:	4608      	mov	r0, r1
 801e752:	602b      	str	r3, [r5, #0]
 801e754:	f7e3 f963 	bl	8001a1e <_close>
 801e758:	1c43      	adds	r3, r0, #1
 801e75a:	d102      	bne.n	801e762 <_close_r+0x1a>
 801e75c:	682b      	ldr	r3, [r5, #0]
 801e75e:	b103      	cbz	r3, 801e762 <_close_r+0x1a>
 801e760:	6023      	str	r3, [r4, #0]
 801e762:	bd38      	pop	{r3, r4, r5, pc}
 801e764:	20011524 	.word	0x20011524

0801e768 <_fstat_r>:
 801e768:	b538      	push	{r3, r4, r5, lr}
 801e76a:	4d07      	ldr	r5, [pc, #28]	; (801e788 <_fstat_r+0x20>)
 801e76c:	2300      	movs	r3, #0
 801e76e:	4604      	mov	r4, r0
 801e770:	4608      	mov	r0, r1
 801e772:	4611      	mov	r1, r2
 801e774:	602b      	str	r3, [r5, #0]
 801e776:	f7e3 f95e 	bl	8001a36 <_fstat>
 801e77a:	1c43      	adds	r3, r0, #1
 801e77c:	d102      	bne.n	801e784 <_fstat_r+0x1c>
 801e77e:	682b      	ldr	r3, [r5, #0]
 801e780:	b103      	cbz	r3, 801e784 <_fstat_r+0x1c>
 801e782:	6023      	str	r3, [r4, #0]
 801e784:	bd38      	pop	{r3, r4, r5, pc}
 801e786:	bf00      	nop
 801e788:	20011524 	.word	0x20011524

0801e78c <_isatty_r>:
 801e78c:	b538      	push	{r3, r4, r5, lr}
 801e78e:	4d06      	ldr	r5, [pc, #24]	; (801e7a8 <_isatty_r+0x1c>)
 801e790:	2300      	movs	r3, #0
 801e792:	4604      	mov	r4, r0
 801e794:	4608      	mov	r0, r1
 801e796:	602b      	str	r3, [r5, #0]
 801e798:	f7e3 f95d 	bl	8001a56 <_isatty>
 801e79c:	1c43      	adds	r3, r0, #1
 801e79e:	d102      	bne.n	801e7a6 <_isatty_r+0x1a>
 801e7a0:	682b      	ldr	r3, [r5, #0]
 801e7a2:	b103      	cbz	r3, 801e7a6 <_isatty_r+0x1a>
 801e7a4:	6023      	str	r3, [r4, #0]
 801e7a6:	bd38      	pop	{r3, r4, r5, pc}
 801e7a8:	20011524 	.word	0x20011524

0801e7ac <_lseek_r>:
 801e7ac:	b538      	push	{r3, r4, r5, lr}
 801e7ae:	4d07      	ldr	r5, [pc, #28]	; (801e7cc <_lseek_r+0x20>)
 801e7b0:	4604      	mov	r4, r0
 801e7b2:	4608      	mov	r0, r1
 801e7b4:	4611      	mov	r1, r2
 801e7b6:	2200      	movs	r2, #0
 801e7b8:	602a      	str	r2, [r5, #0]
 801e7ba:	461a      	mov	r2, r3
 801e7bc:	f7e3 f956 	bl	8001a6c <_lseek>
 801e7c0:	1c43      	adds	r3, r0, #1
 801e7c2:	d102      	bne.n	801e7ca <_lseek_r+0x1e>
 801e7c4:	682b      	ldr	r3, [r5, #0]
 801e7c6:	b103      	cbz	r3, 801e7ca <_lseek_r+0x1e>
 801e7c8:	6023      	str	r3, [r4, #0]
 801e7ca:	bd38      	pop	{r3, r4, r5, pc}
 801e7cc:	20011524 	.word	0x20011524

0801e7d0 <__malloc_lock>:
 801e7d0:	4801      	ldr	r0, [pc, #4]	; (801e7d8 <__malloc_lock+0x8>)
 801e7d2:	f7ff bb0d 	b.w	801ddf0 <__retarget_lock_acquire_recursive>
 801e7d6:	bf00      	nop
 801e7d8:	20011528 	.word	0x20011528

0801e7dc <__malloc_unlock>:
 801e7dc:	4801      	ldr	r0, [pc, #4]	; (801e7e4 <__malloc_unlock+0x8>)
 801e7de:	f7ff bb08 	b.w	801ddf2 <__retarget_lock_release_recursive>
 801e7e2:	bf00      	nop
 801e7e4:	20011528 	.word	0x20011528

0801e7e8 <_read_r>:
 801e7e8:	b538      	push	{r3, r4, r5, lr}
 801e7ea:	4d07      	ldr	r5, [pc, #28]	; (801e808 <_read_r+0x20>)
 801e7ec:	4604      	mov	r4, r0
 801e7ee:	4608      	mov	r0, r1
 801e7f0:	4611      	mov	r1, r2
 801e7f2:	2200      	movs	r2, #0
 801e7f4:	602a      	str	r2, [r5, #0]
 801e7f6:	461a      	mov	r2, r3
 801e7f8:	f7e3 f8d8 	bl	80019ac <_read>
 801e7fc:	1c43      	adds	r3, r0, #1
 801e7fe:	d102      	bne.n	801e806 <_read_r+0x1e>
 801e800:	682b      	ldr	r3, [r5, #0]
 801e802:	b103      	cbz	r3, 801e806 <_read_r+0x1e>
 801e804:	6023      	str	r3, [r4, #0]
 801e806:	bd38      	pop	{r3, r4, r5, pc}
 801e808:	20011524 	.word	0x20011524

0801e80c <_raise_r>:
 801e80c:	291f      	cmp	r1, #31
 801e80e:	b538      	push	{r3, r4, r5, lr}
 801e810:	4604      	mov	r4, r0
 801e812:	460d      	mov	r5, r1
 801e814:	d904      	bls.n	801e820 <_raise_r+0x14>
 801e816:	2316      	movs	r3, #22
 801e818:	6003      	str	r3, [r0, #0]
 801e81a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e81e:	bd38      	pop	{r3, r4, r5, pc}
 801e820:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e822:	b112      	cbz	r2, 801e82a <_raise_r+0x1e>
 801e824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e828:	b94b      	cbnz	r3, 801e83e <_raise_r+0x32>
 801e82a:	4620      	mov	r0, r4
 801e82c:	f000 f830 	bl	801e890 <_getpid_r>
 801e830:	462a      	mov	r2, r5
 801e832:	4601      	mov	r1, r0
 801e834:	4620      	mov	r0, r4
 801e836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e83a:	f000 b817 	b.w	801e86c <_kill_r>
 801e83e:	2b01      	cmp	r3, #1
 801e840:	d00a      	beq.n	801e858 <_raise_r+0x4c>
 801e842:	1c59      	adds	r1, r3, #1
 801e844:	d103      	bne.n	801e84e <_raise_r+0x42>
 801e846:	2316      	movs	r3, #22
 801e848:	6003      	str	r3, [r0, #0]
 801e84a:	2001      	movs	r0, #1
 801e84c:	e7e7      	b.n	801e81e <_raise_r+0x12>
 801e84e:	2400      	movs	r4, #0
 801e850:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e854:	4628      	mov	r0, r5
 801e856:	4798      	blx	r3
 801e858:	2000      	movs	r0, #0
 801e85a:	e7e0      	b.n	801e81e <_raise_r+0x12>

0801e85c <raise>:
 801e85c:	4b02      	ldr	r3, [pc, #8]	; (801e868 <raise+0xc>)
 801e85e:	4601      	mov	r1, r0
 801e860:	6818      	ldr	r0, [r3, #0]
 801e862:	f7ff bfd3 	b.w	801e80c <_raise_r>
 801e866:	bf00      	nop
 801e868:	20000030 	.word	0x20000030

0801e86c <_kill_r>:
 801e86c:	b538      	push	{r3, r4, r5, lr}
 801e86e:	4d07      	ldr	r5, [pc, #28]	; (801e88c <_kill_r+0x20>)
 801e870:	2300      	movs	r3, #0
 801e872:	4604      	mov	r4, r0
 801e874:	4608      	mov	r0, r1
 801e876:	4611      	mov	r1, r2
 801e878:	602b      	str	r3, [r5, #0]
 801e87a:	f7e3 f87b 	bl	8001974 <_kill>
 801e87e:	1c43      	adds	r3, r0, #1
 801e880:	d102      	bne.n	801e888 <_kill_r+0x1c>
 801e882:	682b      	ldr	r3, [r5, #0]
 801e884:	b103      	cbz	r3, 801e888 <_kill_r+0x1c>
 801e886:	6023      	str	r3, [r4, #0]
 801e888:	bd38      	pop	{r3, r4, r5, pc}
 801e88a:	bf00      	nop
 801e88c:	20011524 	.word	0x20011524

0801e890 <_getpid_r>:
 801e890:	f7e3 b868 	b.w	8001964 <_getpid>

0801e894 <_init>:
 801e894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e896:	bf00      	nop
 801e898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e89a:	bc08      	pop	{r3}
 801e89c:	469e      	mov	lr, r3
 801e89e:	4770      	bx	lr

0801e8a0 <_fini>:
 801e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8a2:	bf00      	nop
 801e8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8a6:	bc08      	pop	{r3}
 801e8a8:	469e      	mov	lr, r3
 801e8aa:	4770      	bx	lr
