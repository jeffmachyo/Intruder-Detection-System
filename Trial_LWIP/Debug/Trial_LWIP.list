
Trial_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d1c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039f0  08019f1c  08019f1c  00029f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d90c  0801d90c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d90c  0801d90c  0002d90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d914  0801d914  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d914  0801d914  0002d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d918  0801d918  0002d918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801d91c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0801d9b0  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801da50  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000111d8  200001d4  0801daf0  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200113ac  0801daf0  000313ac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b713  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000091a5  00000000  00000000  0006b915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ab0  00000000  00000000  00074ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002920  00000000  00000000  00077570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c2a6  00000000  00000000  00079e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041075  00000000  00000000  000b6136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00124678  00000000  00000000  000f71ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021b823  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b980  00000000  00000000  0021b874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08019f04 	.word	0x08019f04

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08019f04 	.word	0x08019f04

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <vApplicationGetIdleTaskMemory+0x2c>)
 8000624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vApplicationGetIdleTaskMemory+0x30>)
 800062a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000e78 	.word	0x20000e78
 8000644:	20000ecc 	.word	0x20000ecc

08000648 <MqttClientSubTask>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MqttClientSubTask+0x60>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d007      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MqttClientSubTask+0x60>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <MqttClientSubTask+0x20>
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MqttClientSubTask+0x60>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f006 f966 	bl	800693c <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000670:	e7ee      	b.n	8000650 <MqttClientSubTask+0x8>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MqttClientSubTask+0x64>)
 8000674:	f018 fbf2 	bl	8018e5c <puts>
			break;
 8000678:	bf00      	nop
//	MqttConnectBroker();
//				osDelay(1000);

	while(1)
	{
		if(!mqttClient.isconnected)
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MqttClientSubTask+0x68>)
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <MqttClientSubTask+0x4e>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <MqttClientSubTask+0x68>)
 8000684:	f017 facc 	bl	8017c20 <MQTTDisconnect>
			MqttConnectBroker();
 8000688:	f000 f838 	bl	80006fc <MqttConnectBroker>
			osDelay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f006 f954 	bl	800693c <osDelay>
 8000694:	e7f1      	b.n	800067a <MqttClientSubTask+0x32>
		}
		else
		{
//			EngagePin1();
			MQTTYield(&mqttClient, 1000); //handle timer
 8000696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MqttClientSubTask+0x68>)
 800069c:	f016 fffa 	bl	8017694 <MQTTYield>
			osDelay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f006 f94b 	bl	800693c <osDelay>
		if(!mqttClient.isconnected)
 80006a6:	e7e8      	b.n	800067a <MqttClientSubTask+0x32>
 80006a8:	200018b4 	.word	0x200018b4
 80006ac:	08019f1c 	.word	0x08019f1c
 80006b0:	20000210 	.word	0x20000210

080006b4 <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	const char* str = "MQTT message from STM32";
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MqttClientPubTask+0x3c>)
 80006be:	61fb      	str	r3, [r7, #28]
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MqttClientPubTask+0x40>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00d      	beq.n	80006e4 <MqttClientPubTask+0x30>
		{
			message.payload = (void*)str;
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	617b      	str	r3, [r7, #20]
			message.payloadlen = strlen(str);
 80006cc:	69f8      	ldr	r0, [r7, #28]
 80006ce:	f7ff fdc1 	bl	8000254 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	61bb      	str	r3, [r7, #24]

			MQTTPublish(&mqttClient, "test", &message); //publish a message
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	461a      	mov	r2, r3
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <MqttClientPubTask+0x44>)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MqttClientPubTask+0x40>)
 80006e0:	f017 f9d8 	bl	8017a94 <MQTTPublish>
		}

		osDelay(5000);
 80006e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80006e8:	f006 f928 	bl	800693c <osDelay>
		if(mqttClient.isconnected)
 80006ec:	e7e8      	b.n	80006c0 <MqttClientPubTask+0xc>
 80006ee:	bf00      	nop
 80006f0:	08019f30 	.word	0x08019f30
 80006f4:	20000210 	.word	0x20000210
 80006f8:	08019f48 	.word	0x08019f48

080006fc <MqttConnectBroker>:
	}
}

int MqttConnectBroker()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	; 0x70
 8000700:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 8000702:	4832      	ldr	r0, [pc, #200]	; (80007cc <MqttConnectBroker+0xd0>)
 8000704:	f017 fb24 	bl	8017d50 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 8000708:	f240 725b 	movw	r2, #1883	; 0x75b
 800070c:	4930      	ldr	r1, [pc, #192]	; (80007d0 <MqttConnectBroker+0xd4>)
 800070e:	482f      	ldr	r0, [pc, #188]	; (80007cc <MqttConnectBroker+0xd0>)
 8000710:	f017 fb40 	bl	8017d94 <ConnectNetwork>
 8000714:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 8000716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <MqttConnectBroker+0xd8>)
 800071e:	f018 fb9d 	bl	8018e5c <puts>
		return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000726:	e04c      	b.n	80007c2 <MqttConnectBroker+0xc6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MqttConnectBroker+0xdc>)
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MqttConnectBroker+0xe0>)
 800073a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073e:	4923      	ldr	r1, [pc, #140]	; (80007cc <MqttConnectBroker+0xd0>)
 8000740:	4827      	ldr	r0, [pc, #156]	; (80007e0 <MqttConnectBroker+0xe4>)
 8000742:	f016 fc47 	bl	8016fd4 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8000746:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <MqttConnectBroker+0xe8>)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4611      	mov	r1, r2
 800074c:	2258      	movs	r2, #88	; 0x58
 800074e:	4618      	mov	r0, r3
 8000750:	f018 fae8 	bl	8018d24 <memcpy>
	data.willFlag = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 8000758:	2303      	movs	r3, #3
 800075a:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F4";
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MqttConnectBroker+0xec>)
 800075e:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F4";
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MqttConnectBroker+0xec>)
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
	data.password.cstring = "";
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MqttConnectBroker+0xf0>)
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
	data.keepAliveInterval = 60;
 8000768:	233c      	movs	r3, #60	; 0x3c
 800076a:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <MqttConnectBroker+0xe4>)
 8000776:	f017 f86f 	bl	8017858 <MQTTConnect>
 800077a:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 800077c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 8000782:	481b      	ldr	r0, [pc, #108]	; (80007f0 <MqttConnectBroker+0xf4>)
 8000784:	f018 fb6a 	bl	8018e5c <puts>
		return ret;
 8000788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800078a:	e01a      	b.n	80007c2 <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 800078c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000790:	f006 f8d4 	bl	800693c <osDelay>

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MqttConnectBroker+0xf8>)
 8000796:	2200      	movs	r2, #0
 8000798:	4917      	ldr	r1, [pc, #92]	; (80007f8 <MqttConnectBroker+0xfc>)
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MqttConnectBroker+0xe4>)
 800079c:	f017 f964 	bl	8017a68 <MQTTSubscribe>
 80007a0:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ret != MQTT_SUCCESS)
 80007a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <MqttConnectBroker+0xb6>
	{
		printf("MQTTSubscribe failed.\n");
 80007a8:	4814      	ldr	r0, [pc, #80]	; (80007fc <MqttConnectBroker+0x100>)
 80007aa:	f018 fb57 	bl	8018e5c <puts>
		return ret;
 80007ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b0:	e007      	b.n	80007c2 <MqttConnectBroker+0xc6>
	}
	osDelay(500);
 80007b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b6:	f006 f8c1 	bl	800693c <osDelay>

	printf("MQTT_ConnectBroker O.K.\n");
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MqttConnectBroker+0x104>)
 80007bc:	f018 fb4e 	bl	8018e5c <puts>
	return MQTT_SUCCESS;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3760      	adds	r7, #96	; 0x60
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001f8 	.word	0x200001f8
 80007d0:	08019f50 	.word	0x08019f50
 80007d4:	08019f5c 	.word	0x08019f5c
 80007d8:	20000678 	.word	0x20000678
 80007dc:	20000278 	.word	0x20000278
 80007e0:	20000210 	.word	0x20000210
 80007e4:	08019fc4 	.word	0x08019fc4
 80007e8:	08019f74 	.word	0x08019f74
 80007ec:	08019f7c 	.word	0x08019f7c
 80007f0:	08019f80 	.word	0x08019f80
 80007f4:	08000805 	.word	0x08000805
 80007f8:	08019f48 	.word	0x08019f48
 80007fc:	08019f94 	.word	0x08019f94
 8000800:	08019fac 	.word	0x08019fac

08000804 <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin); //toggle pin when new message arrived
 800080c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <MqttMessageArrived+0x4c>)
 8000812:	f002 fca8 	bl	8003166 <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	60fb      	str	r3, [r7, #12]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 800081c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000820:	2100      	movs	r1, #0
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MqttMessageArrived+0x50>)
 8000824:	f018 fa8c 	bl	8018d40 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6899      	ldr	r1, [r3, #8]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	461a      	mov	r2, r3
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <MqttMessageArrived+0x50>)
 8000834:	f018 fa76 	bl	8018d24 <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <MqttMessageArrived+0x50>)
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MqttMessageArrived+0x54>)
 8000842:	f018 fa85 	bl	8018d50 <iprintf>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020400 	.word	0x40020400
 8000854:	20000a78 	.word	0x20000a78
 8000858:	0801a01c 	.word	0x0801a01c

0800085c <EngagePin>:

void EngagePin(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <EngagePin+0x10>)
 8000864:	f002 fc7f 	bl	8003166 <HAL_GPIO_TogglePin>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020400 	.word	0x40020400

08000870 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000874:	f3bf 8f4f 	dsb	sy
}
 8000878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800087a:	f3bf 8f6f 	isb	sy
}
 800087e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <SCB_EnableICache+0x48>)
 8000882:	2200      	movs	r2, #0
 8000884:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000888:	f3bf 8f4f 	dsb	sy
}
 800088c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088e:	f3bf 8f6f 	isb	sy
}
 8000892:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <SCB_EnableICache+0x48>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <SCB_EnableICache+0x48>)
 800089a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a0:	f3bf 8f4f 	dsb	sy
}
 80008a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008a6:	f3bf 8f6f 	isb	sy
}
 80008aa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <SCB_EnableDCache+0x84>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
}
 80008ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <SCB_EnableDCache+0x84>)
 80008d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008d6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0b5b      	lsrs	r3, r3, #13
 80008dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	015a      	lsls	r2, r3, #5
 80008f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fa:	4911      	ldr	r1, [pc, #68]	; (8000940 <SCB_EnableDCache+0x84>)
 80008fc:	4313      	orrs	r3, r2
 80008fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	60ba      	str	r2, [r7, #8]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1ef      	bne.n	80008ec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	1e5a      	subs	r2, r3, #1
 8000910:	60fa      	str	r2, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1e5      	bne.n	80008e2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000916:	f3bf 8f4f 	dsb	sy
}
 800091a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <SCB_EnableDCache+0x84>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <SCB_EnableDCache+0x84>)
 8000922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000928:	f3bf 8f4f 	dsb	sy
}
 800092c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800092e:	f3bf 8f6f 	isb	sy
}
 8000932:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800094a:	f000 f9d3 	bl	8000cf4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800094e:	f7ff ff8f 	bl	8000870 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000952:	f7ff ffb3 	bl	80008bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 fe43 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f81f 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 f8eb 	bl	8000b38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000962:	f000 f88b 	bl	8000a7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000966:	f000 f8b9 	bl	8000adc <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <main+0x50>)
 800096c:	1d3c      	adds	r4, r7, #4
 800096e:	461d      	mov	r5, r3
 8000970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000974:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f005 ff8f 	bl	80068a4 <osThreadCreate>
 8000986:	4603      	mov	r3, r0
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <main+0x54>)
 800098a:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800098c:	f005 ff73 	bl	8006876 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000990:	e7fe      	b.n	8000990 <main+0x4c>
 8000992:	bf00      	nop
 8000994:	0801a064 	.word	0x0801a064
 8000998:	2000185c 	.word	0x2000185c

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f018 f9c8 	bl	8018d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009c0:	f002 fd34 	bl	800342c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <SystemClock_Config+0xd8>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <SystemClock_Config+0xd8>)
 80009ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ce:	6413      	str	r3, [r2, #64]	; 0x40
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <SystemClock_Config+0xd8>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <SystemClock_Config+0xdc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a25      	ldr	r2, [pc, #148]	; (8000a78 <SystemClock_Config+0xdc>)
 80009e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <SystemClock_Config+0xdc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a0c:	23d8      	movs	r3, #216	; 0xd8
 8000a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a14:	2309      	movs	r3, #9
 8000a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fd63 	bl	80034ec <HAL_RCC_OscConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a2c:	f000 f9c6 	bl	8000dbc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a30:	f002 fd0c 	bl	800344c <HAL_PWREx_EnableOverDrive>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a3a:	f000 f9bf 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2302      	movs	r3, #2
 8000a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2107      	movs	r1, #7
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fff3 	bl	8003a48 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a68:	f000 f9a8 	bl	8000dbc <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3750      	adds	r7, #80	; 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <MX_USART3_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART3_UART_Init+0x58>)
 8000ac0:	f004 f922 	bl	8004d08 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 f977 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200012cc 	.word	0x200012cc
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aea:	2206      	movs	r2, #6
 8000aec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	f002 fb3b 	bl	800319a <HAL_PCD_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f000 f947 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20001354 	.word	0x20001354

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a46      	ldr	r2, [pc, #280]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a40      	ldr	r2, [pc, #256]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a3a      	ldr	r2, [pc, #232]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0x134>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000be4:	4822      	ldr	r0, [pc, #136]	; (8000c70 <MX_GPIO_Init+0x138>)
 8000be6:	f002 faa5 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4821      	ldr	r0, [pc, #132]	; (8000c74 <MX_GPIO_Init+0x13c>)
 8000bf0:	f002 faa0 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481b      	ldr	r0, [pc, #108]	; (8000c78 <MX_GPIO_Init+0x140>)
 8000c0c:	f002 f8e6 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_GPIO_Init+0x138>)
 8000c2a:	f002 f8d7 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c2e:	2340      	movs	r3, #64	; 0x40
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <MX_GPIO_Init+0x13c>)
 8000c46:	f002 f8c9 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_GPIO_Init+0x13c>)
 8000c5e:	f002 f8bd 	bl	8002ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c62:	bf00      	nop
 8000c64:	3730      	adds	r7, #48	; 0x30
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40021800 	.word	0x40021800
 8000c78:	40020800 	.word	0x40020800

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	b090      	sub	sp, #64	; 0x40
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c84:	f004 ff9c 	bl	8005bc0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //subscribe task
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <StartDefaultTask+0x68>)
 8000c8a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c8e:	461d      	mov	r5, r3
 8000c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*2); //publish task
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <StartDefaultTask+0x6c>)
 8000c9e:	f107 0408 	add.w	r4, r7, #8
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 fdf4 	bl	80068a4 <osThreadCreate>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <StartDefaultTask+0x70>)
 8000cc0:	6013      	str	r3, [r2, #0]
  	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fdeb 	bl	80068a4 <osThreadCreate>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <StartDefaultTask+0x74>)
 8000cd2:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {
	  EngagePin();
 8000cd4:	f7ff fdc2 	bl	800085c <EngagePin>
//	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin); //toggle running led
    osDelay(500);
 8000cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cdc:	f005 fe2e 	bl	800693c <osDelay>
	  EngagePin();
 8000ce0:	e7f8      	b.n	8000cd4 <StartDefaultTask+0x58>
 8000ce2:	bf00      	nop
 8000ce4:	0801a080 	.word	0x0801a080
 8000ce8:	0801a09c 	.word	0x0801a09c
 8000cec:	200001f0 	.word	0x200001f0
 8000cf0:	200001f4 	.word	0x200001f4

08000cf4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d06:	f000 fd9f 	bl	8001848 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d16:	231f      	movs	r3, #31
 8000d18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d1a:	2387      	movs	r3, #135	; 0x87
 8000d1c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d26:	2301      	movs	r3, #1
 8000d28:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fdbd 	bl	80018b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000d42:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000d46:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d54:	2303      	movs	r3, #3
 8000d56:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fdaa 	bl	80018b8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24020000;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MPU_Config+0xa0>)
 8000d6a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d74:	2301      	movs	r3, #1
 8000d76:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fd9a 	bl	80018b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d84:	2004      	movs	r0, #4
 8000d86:	f000 fd77 	bl	8001878 <HAL_MPU_Enable>

}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24020000 	.word	0x24020000

08000d98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000daa:	f000 fc27 	bl	80015fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40001000 	.word	0x40001000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f000 fcf5 	bl	80017f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ae      	sub	sp, #184	; 0xb8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2290      	movs	r2, #144	; 0x90
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f017 ff81 	bl	8018d40 <memset>
  if(huart->Instance==USART3)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <HAL_UART_MspInit+0xb4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d13c      	bne.n	8000ec2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 f84e 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e62:	f7ff ffab 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_UART_MspInit+0xb8>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_UART_MspInit+0xb8>)
 8000e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0xb8>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_MspInit+0xb8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_UART_MspInit+0xb8>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0xb8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0xbc>)
 8000ebe:	f001 ff8d 	bl	8002ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	37b8      	adds	r7, #184	; 0xb8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0ae      	sub	sp, #184	; 0xb8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2290      	movs	r2, #144	; 0x90
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f017 ff21 	bl	8018d40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f06:	d159      	bne.n	8000fbc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 ffed 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f24:	f7ff ff4a 	bl	8000dbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f40:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <HAL_PCD_MspInit+0xf0>)
 8000f68:	f001 ff38 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <HAL_PCD_MspInit+0xf0>)
 8000f88:	f001 ff28 	bl	8002ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f90:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f96:	6353      	str	r3, [r2, #52]	; 0x34
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fae:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_PCD_MspInit+0xec>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37b8      	adds	r7, #184	; 0xb8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	; 0x38
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <HAL_InitTick+0xe0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a32      	ldr	r2, [pc, #200]	; (80010ac <HAL_InitTick+0xe0>)
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_InitTick+0xe0>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff4:	f107 0210 	add.w	r2, r7, #16
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 ff48 	bl	8003e94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800100e:	f002 ff19 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 8001012:	6378      	str	r0, [r7, #52]	; 0x34
 8001014:	e004      	b.n	8001020 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001016:	f002 ff15 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 800101a:	4603      	mov	r3, r0
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <HAL_InitTick+0xe4>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	0c9b      	lsrs	r3, r3, #18
 800102a:	3b01      	subs	r3, #1
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_InitTick+0xe8>)
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_InitTick+0xec>)
 8001032:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_InitTick+0xe8>)
 8001036:	f240 32e7 	movw	r2, #999	; 0x3e7
 800103a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_InitTick+0xe8>)
 800103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001040:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_InitTick+0xe8>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_InitTick+0xe8>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_InitTick+0xe8>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <HAL_InitTick+0xe8>)
 8001056:	f003 fb77 	bl	8004748 <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001064:	2b00      	cmp	r3, #0
 8001066:	d11b      	bne.n	80010a0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <HAL_InitTick+0xe8>)
 800106a:	f003 fbcf 	bl	800480c <HAL_TIM_Base_Start_IT>
 800106e:	4603      	mov	r3, r0
 8001070:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001074:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001078:	2b00      	cmp	r3, #0
 800107a:	d111      	bne.n	80010a0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800107c:	2036      	movs	r0, #54	; 0x36
 800107e:	f000 fbd5 	bl	800182c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d808      	bhi.n	800109a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	2036      	movs	r0, #54	; 0x36
 800108e:	f000 fbb1 	bl	80017f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_InitTick+0xf0>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e002      	b.n	80010a0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3738      	adds	r7, #56	; 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	431bde83 	.word	0x431bde83
 80010b4:	20001860 	.word	0x20001860
 80010b8:	40001000 	.word	0x40001000
 80010bc:	20000004 	.word	0x20000004

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM6_DAC_IRQHandler+0x10>)
 80010f2:	f003 fc03 	bl	80048fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20001860 	.word	0x20001860

08001100 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <ETH_IRQHandler+0x10>)
 8001106:	f000 ff95 	bl	8002034 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20006294 	.word	0x20006294

08001114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_kill>:

int _kill(int pid, int sig)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <_kill+0x20>)
 8001130:	2216      	movs	r2, #22
 8001132:	601a      	str	r2, [r3, #0]
  return -1;
 8001134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	2001139c 	.word	0x2001139c

08001148 <_exit>:

void _exit (int status)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffe5 	bl	8001124 <_kill>
  while (1) {}    /* Make sure we hang here */
 800115a:	e7fe      	b.n	800115a <_exit+0x12>

0800115c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00a      	b.n	8001184 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800116e:	f3af 8000 	nop.w
 8001172:	4601      	mov	r1, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf0      	blt.n	800116e <_read+0x12>
  }

  return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e009      	b.n	80011bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf1      	blt.n	80011a8 <_write+0x12>
  }
  return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_close>:

int _close(int file)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f6:	605a      	str	r2, [r3, #4]
  return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_isatty>:

int _isatty(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d205      	bcs.n	8001274 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <_sbrk+0x6c>)
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001272:	e009      	b.n	8001288 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a06      	ldr	r2, [pc, #24]	; (800129c <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	20080000 	.word	0x20080000
 8001298:	00000400 	.word	0x00000400
 800129c:	200018ac 	.word	0x200018ac
 80012a0:	200113b0 	.word	0x200113b0
 80012a4:	2001139c 	.word	0x2001139c

080012a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e8:	4c0b      	ldr	r4, [pc, #44]	; (8001318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ffd7 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f017 fcdf 	bl	8018cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff fb21 	bl	8000944 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001304:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001310:	0801d91c 	.word	0x0801d91c
  ldr r2, =_sbss
 8001314:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001318:	200113ac 	.word	0x200113ac

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>

0800131e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <LAN8742_RegisterBusIO+0x28>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <LAN8742_RegisterBusIO+0x28>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <LAN8742_RegisterBusIO+0x28>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134a:	e014      	b.n	8001376 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d17c      	bne.n	800149c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2220      	movs	r2, #32
 80013b4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e01c      	b.n	80013f6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f107 0208 	add.w	r2, r7, #8
 80013c4:	2112      	movs	r1, #18
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	4798      	blx	r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da03      	bge.n	80013d8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80013d0:	f06f 0304 	mvn.w	r3, #4
 80013d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80013d6:	e00b      	b.n	80013f0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d105      	bne.n	80013f0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
         break;
 80013ee:	e005      	b.n	80013fc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b1f      	cmp	r3, #31
 80013fa:	d9df      	bls.n	80013bc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b1f      	cmp	r3, #31
 8001402:	d902      	bls.n	800140a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001404:	f06f 0302 	mvn.w	r3, #2
 8001408:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d145      	bne.n	800149c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6810      	ldr	r0, [r2, #0]
 8001418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800141c:	2100      	movs	r1, #0
 800141e:	4798      	blx	r3
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	db37      	blt.n	8001496 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6810      	ldr	r0, [r2, #0]
 800142e:	f107 0208 	add.w	r2, r7, #8
 8001432:	2100      	movs	r1, #0
 8001434:	4798      	blx	r3
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	db28      	blt.n	800148e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4798      	blx	r3
 8001442:	4603      	mov	r3, r0
 8001444:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001446:	e01c      	b.n	8001482 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4798      	blx	r3
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800145a:	d80e      	bhi.n	800147a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6810      	ldr	r0, [r2, #0]
 8001464:	f107 0208 	add.w	r2, r7, #8
 8001468:	2100      	movs	r1, #0
 800146a:	4798      	blx	r3
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	da07      	bge.n	8001482 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001472:	f06f 0304 	mvn.w	r3, #4
 8001476:	613b      	str	r3, [r7, #16]
                 break;
 8001478:	e010      	b.n	800149c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800147a:	f06f 0301 	mvn.w	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
               break;
 8001480:	e00c      	b.n	800149c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1dd      	bne.n	8001448 <LAN8742_Init+0xc6>
 800148c:	e006      	b.n	800149c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800148e:	f06f 0304 	mvn.w	r3, #4
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	e002      	b.n	800149c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001496:	f06f 0303 	mvn.w	r3, #3
 800149a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d112      	bne.n	80014c8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4798      	blx	r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014ac:	bf00      	nop
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4798      	blx	r3
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014c0:	d9f5      	bls.n	80014ae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014c8:	693b      	ldr	r3, [r7, #16]
 }
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6810      	ldr	r0, [r2, #0]
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	2101      	movs	r1, #1
 80014ec:	4798      	blx	r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da02      	bge.n	80014fa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014f4:	f06f 0304 	mvn.w	r3, #4
 80014f8:	e06e      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6810      	ldr	r0, [r2, #0]
 8001502:	f107 020c 	add.w	r2, r7, #12
 8001506:	2101      	movs	r1, #1
 8001508:	4798      	blx	r3
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	da02      	bge.n	8001516 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001510:	f06f 0304 	mvn.w	r3, #4
 8001514:	e060      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001520:	2301      	movs	r3, #1
 8001522:	e059      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6810      	ldr	r0, [r2, #0]
 800152c:	f107 020c 	add.w	r2, r7, #12
 8001530:	2100      	movs	r1, #0
 8001532:	4798      	blx	r3
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	da02      	bge.n	8001540 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800153a:	f06f 0304 	mvn.w	r3, #4
 800153e:	e04b      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11b      	bne.n	8001582 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <LAN8742_GetLinkState+0x90>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800155e:	2302      	movs	r3, #2
 8001560:	e03a      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800156c:	2303      	movs	r3, #3
 800156e:	e033      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800157a:	2304      	movs	r3, #4
 800157c:	e02c      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800157e:	2305      	movs	r3, #5
 8001580:	e02a      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6810      	ldr	r0, [r2, #0]
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	211f      	movs	r1, #31
 8001590:	4798      	blx	r3
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	da02      	bge.n	800159e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001598:	f06f 0304 	mvn.w	r3, #4
 800159c:	e01c      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015a8:	2306      	movs	r3, #6
 80015aa:	e015      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 031c 	and.w	r3, r3, #28
 80015b2:	2b18      	cmp	r3, #24
 80015b4:	d101      	bne.n	80015ba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015b6:	2302      	movs	r3, #2
 80015b8:	e00e      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 031c 	and.w	r3, r3, #28
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d101      	bne.n	80015c8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e007      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 031c 	and.w	r3, r3, #28
 80015ce:	2b14      	cmp	r3, #20
 80015d0:	d101      	bne.n	80015d6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015d2:	2304      	movs	r3, #4
 80015d4:	e000      	b.n	80015d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015d6:	2305      	movs	r3, #5
    }				
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f8fa 	bl	80017de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	200f      	movs	r0, #15
 80015ec:	f7ff fcee 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fbea 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008
 8001620:	200018b0 	.word	0x200018b0

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200018b0 	.word	0x200018b0

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <__NVIC_SetPriorityGrouping>:
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x40>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	05fa0000 	.word	0x05fa0000

080016cc <__NVIC_GetPriorityGrouping>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ff4c 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001806:	f7ff ff61 	bl	80016cc <__NVIC_GetPriorityGrouping>
 800180a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	6978      	ldr	r0, [r7, #20]
 8001812:	f7ff ffb1 	bl	8001778 <NVIC_EncodePriority>
 8001816:	4602      	mov	r2, r0
 8001818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff80 	bl	8001724 <__NVIC_SetPriority>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff54 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800184c:	f3bf 8f5f 	dmb	sy
}
 8001850:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_MPU_Disable+0x28>)
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_MPU_Disable+0x28>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_MPU_Disable+0x2c>)
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	e000ed90 	.word	0xe000ed90

08001878 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_MPU_Enable+0x38>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_MPU_Enable+0x3c>)
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_MPU_Enable+0x3c>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001896:	f3bf 8f4f 	dsb	sy
}
 800189a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189c:	f3bf 8f6f 	isb	sy
}
 80018a0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed90 	.word	0xe000ed90
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	785a      	ldrb	r2, [r3, #1]
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_MPU_ConfigRegion+0x84>)
 80018c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d029      	beq.n	8001924 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80018d0:	4a1a      	ldr	r2, [pc, #104]	; (800193c <HAL_MPU_ConfigRegion+0x84>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7b1b      	ldrb	r3, [r3, #12]
 80018dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7adb      	ldrb	r3, [r3, #11]
 80018e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7a9b      	ldrb	r3, [r3, #10]
 80018ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7b5b      	ldrb	r3, [r3, #13]
 80018f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7b9b      	ldrb	r3, [r3, #14]
 80018fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7bdb      	ldrb	r3, [r3, #15]
 8001902:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001904:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a5b      	ldrb	r3, [r3, #9]
 800190a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800190c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7a1b      	ldrb	r3, [r3, #8]
 8001912:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001914:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800191e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001920:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001922:	e005      	b.n	8001930 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_MPU_ConfigRegion+0x84>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <HAL_MPU_ConfigRegion+0x84>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed90 	.word	0xe000ed90

08001940 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e06a      	b.n	8001a28 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001958:	2b00      	cmp	r3, #0
 800195a:	d106      	bne.n	800196a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2223      	movs	r2, #35	; 0x23
 8001960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f004 fd43 	bl	80063f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_ETH_Init+0xf0>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a30      	ldr	r2, [pc, #192]	; (8001a30 <HAL_ETH_Init+0xf0>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <HAL_ETH_Init+0xf0>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_ETH_Init+0xf4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a2b      	ldr	r2, [pc, #172]	; (8001a34 <HAL_ETH_Init+0xf4>)
 8001988:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800198c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_ETH_Init+0xf4>)
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4927      	ldr	r1, [pc, #156]	; (8001a34 <HAL_ETH_Init+0xf4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_ETH_Init+0xf4>)
 800199e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b8:	f7ff fe34 	bl	8001624 <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019be:	e011      	b.n	80019e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019c0:	f7ff fe30 	bl	8001624 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019ce:	d909      	bls.n	80019e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2204      	movs	r2, #4
 80019d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	22e0      	movs	r2, #224	; 0xe0
 80019dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e021      	b.n	8001a28 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1e4      	bne.n	80019c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 ff4c 	bl	8002894 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fff3 	bl	80029e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f001 f849 	bl	8002a9a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2100      	movs	r1, #0
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 ffb1 	bl	8002978 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2210      	movs	r2, #16
 8001a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800

08001a38 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d17b      	bne.n	8001b42 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2223      	movs	r2, #35	; 0x23
 8001a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_ETH_Start_IT+0x114>)
 8001a76:	430b      	orrs	r3, r1
 8001a78:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001a8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f9fc 	bl	8001e94 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0208 	orr.w	r2, r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff fdc1 	bl	800163c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0204 	orr.w	r2, r2, #4
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff fdae 	bl	800163c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fd74 	bl	80025d6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b04:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b1c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b26:	69d9      	ldr	r1, [r3, #28]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_ETH_Start_IT+0x118>)
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b34:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2223      	movs	r2, #35	; 0x23
 8001b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	00020060 	.word	0x00020060
 8001b50:	0001a0c1 	.word	0x0001a0c1

08001b54 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b62:	2b23      	cmp	r3, #35	; 0x23
 8001b64:	d16e      	bne.n	8001c44 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2223      	movs	r2, #35	; 0x23
 8001b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b76:	69d9      	ldr	r1, [r3, #28]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_ETH_Stop_IT+0xfc>)
 8001b7e:	400b      	ands	r3, r1
 8001b80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b84:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b9c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	f023 0302 	bic.w	r3, r3, #2
 8001bb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0204 	bic.w	r2, r2, #4
 8001bc4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fd34 	bl	800163c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fcfa 	bl	80025d6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0208 	bic.w	r2, r2, #8
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff fd1e 	bl	800163c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e00e      	b.n	8001c2c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	3212      	adds	r2, #18
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d9ed      	bls.n	8001c0e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	fffe5f3e 	.word	0xfffe5f3e

08001c54 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e045      	b.n	8001d04 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c7e:	2b23      	cmp	r3, #35	; 0x23
 8001c80:	d13f      	bne.n	8001d02 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 ff70 	bl	8002b74 <ETH_Prepare_Tx_Descriptors>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca0:	f043 0202 	orr.w	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e02a      	b.n	8001d04 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
}
 8001cb2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d904      	bls.n	8001cd0 <HAL_ETH_Transmit_IT+0x7c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	1f1a      	subs	r2, r3, #4
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00d      	beq.n	8001cfe <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	461a      	mov	r2, r3
 8001cec:	2304      	movs	r3, #4
 8001cee:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0a8      	b.n	8001e8a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3e:	2b23      	cmp	r3, #35	; 0x23
 8001d40:	d001      	beq.n	8001d46 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0a1      	b.n	8001e8a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	3212      	adds	r2, #18
 8001d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d5c:	f1c3 0304 	rsb	r3, r3, #4
 8001d60:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d62:	e06a      	b.n	8001e3a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <HAL_ETH_ReadData+0x88>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d040      	beq.n	8001e16 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0c1b      	lsrs	r3, r3, #16
 8001dc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001dc8:	3b04      	subs	r3, #4
 8001dca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001df0:	461a      	mov	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f004 fcc7 	bl	8006788 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	441a      	add	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d902      	bls.n	8001e28 <HAL_ETH_ReadData+0x11c>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b04      	subs	r3, #4
 8001e26:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	3212      	adds	r2, #18
 8001e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e32:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db06      	blt.n	8001e50 <HAL_ETH_ReadData+0x144>
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d202      	bcs.n	8001e50 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d089      	beq.n	8001d64 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	441a      	add	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f815 	bl	8001e94 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ea8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	3212      	adds	r2, #18
 8001eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ebc:	e040      	b.n	8001f40 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d112      	bne.n	8001eec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 fc2c 	bl	8006728 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	74fb      	strb	r3, [r7, #19]
 8001eda:	e007      	b.n	8001eec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d026      	beq.n	8001f40 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <ETH_UpdateDescriptor+0xe4>)
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	e003      	b.n	8001f0a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001f08:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001f0a:	f3bf 8f5f 	dmb	sy
}
 8001f0e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d902      	bls.n	8001f2e <ETH_UpdateDescriptor+0x9a>
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	3212      	adds	r2, #18
 8001f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f38:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <ETH_UpdateDescriptor+0xb8>
 8001f46:	7cfb      	ldrb	r3, [r7, #19]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1b8      	bne.n	8001ebe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d00c      	beq.n	8001f70 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	80004600 	.word	0x80004600

08001f7c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3318      	adds	r3, #24
 8001f88:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f9a:	e03f      	b.n	800201c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	3304      	adds	r3, #4
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d028      	beq.n	800201c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db1b      	blt.n	8002018 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fc0d 	bl	800680c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	3301      	adds	r3, #1
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
 8002016:	e001      	b.n	800201c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_ETH_ReleaseTxPacket+0xac>
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1b9      	bne.n	8001f9c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d112      	bne.n	8002074 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d109      	bne.n	8002074 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	461a      	mov	r2, r3
 800206a:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_ETH_IRQHandler+0x178>)
 800206c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f003 ff22 	bl	8005eb8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d113      	bne.n	80020ae <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10a      	bne.n	80020ae <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	461a      	mov	r2, r3
 80020a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80020a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f003 ff15 	bl	8005ed8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c0:	d14c      	bne.n	800215c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d4:	d142      	bne.n	800215c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f043 0208 	orr.w	r2, r3, #8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f8:	d11a      	bne.n	8002130 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_ETH_IRQHandler+0x17c>)
 8002106:	4013      	ands	r3, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002120:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002124:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	22e0      	movs	r2, #224	; 0xe0
 800212a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800212e:	e012      	b.n	8002156 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	f248 6380 	movw	r3, #34432	; 0x8680
 800213e:	4013      	ands	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	461a      	mov	r2, r3
 8002150:	f248 6380 	movw	r3, #34432	; 0x8680
 8002154:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f003 fece 	bl	8005ef8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b08      	cmp	r3, #8
 8002168:	d10e      	bne.n	8002188 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f81c 	bl	80021b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_ETH_IRQHandler+0x180>)
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_ETH_IRQHandler+0x180>)
 8002196:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800219a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f815 	bl	80021cc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	00010040 	.word	0x00010040
 80021b0:	007e2000 	.word	0x007e2000
 80021b4:	40013c00 	.word	0x40013c00

080021b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 031c 	and.w	r3, r3, #28
 80021fc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	02db      	lsls	r3, r3, #11
 8002202:	b29b      	uxth	r3, r3
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0302 	bic.w	r3, r3, #2
 800221e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002230:	f7ff f9f8 	bl	8001624 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002236:	e00d      	b.n	8002254 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002238:	f7ff f9f4 	bl	8001624 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002246:	d301      	bcc.n	800224c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e010      	b.n	800226e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ec      	bne.n	8002238 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	b29b      	uxth	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 031c 	and.w	r3, r3, #28
 8002292:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	02db      	lsls	r3, r3, #11
 8002298:	b29b      	uxth	r3, r3
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	019b      	lsls	r3, r3, #6
 80022a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7ff f9a8 	bl	8001624 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022d6:	e00d      	b.n	80022f4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022d8:	f7ff f9a4 	bl	8001624 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d301      	bcc.n	80022ec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e009      	b.n	8002300 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ec      	bne.n	80022d8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0d9      	b.n	80024d0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf14      	ite	ne
 80023a4:	2301      	movne	r3, #1
 80023a6:	2300      	moveq	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b29a      	uxth	r2, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e00b      	b.n	8002508 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d105      	bne.n	8002506 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f88f 	bl	8002620 <ETH_SetMACConfig>

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 031c 	bic.w	r3, r3, #28
 8002526:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002528:	f001 fc80 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 800252c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d908      	bls.n	8002548 <HAL_ETH_SetMDIOClockRange+0x38>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d804      	bhi.n	8002548 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	e027      	b.n	8002598 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d908      	bls.n	8002562 <HAL_ETH_SetMDIOClockRange+0x52>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d204      	bcs.n	8002562 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f043 030c 	orr.w	r3, r3, #12
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e01a      	b.n	8002598 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d303      	bcc.n	8002572 <HAL_ETH_SetMDIOClockRange+0x62>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d911      	bls.n	8002596 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d908      	bls.n	800258c <HAL_ETH_SetMDIOClockRange+0x7c>
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d804      	bhi.n	800258c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e005      	b.n	8002598 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f043 0310 	orr.w	r3, r3, #16
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	e000      	b.n	8002598 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002596:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	611a      	str	r2, [r3, #16]
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	01312cff 	.word	0x01312cff
 80025ac:	02160ebf 	.word	0x02160ebf
 80025b0:	03938700 	.word	0x03938700
 80025b4:	05f5e0ff 	.word	0x05f5e0ff
 80025b8:	08f0d17f 	.word	0x08f0d17f

080025bc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff f818 	bl	800163c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002616:	6193      	str	r3, [r2, #24]
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4b51      	ldr	r3, [pc, #324]	; (800277c <ETH_SetMACConfig+0x15c>)
 8002636:	4013      	ands	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	7c1b      	ldrb	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <ETH_SetMACConfig+0x28>
 8002642:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002646:	e000      	b.n	800264a <ETH_SetMACConfig+0x2a>
 8002648:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7c5b      	ldrb	r3, [r3, #17]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <ETH_SetMACConfig+0x38>
 8002652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002656:	e000      	b.n	800265a <ETH_SetMACConfig+0x3a>
 8002658:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800265a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002660:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7fdb      	ldrb	r3, [r3, #31]
 8002666:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002668:	431a      	orrs	r2, r3
                        macconf->Speed |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800266e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	7f92      	ldrb	r2, [r2, #30]
 8002674:	2a00      	cmp	r2, #0
 8002676:	d102      	bne.n	800267e <ETH_SetMACConfig+0x5e>
 8002678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267c:	e000      	b.n	8002680 <ETH_SetMACConfig+0x60>
 800267e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002680:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	7f1b      	ldrb	r3, [r3, #28]
 8002686:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002688:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800268e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002696:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800269e:	2a00      	cmp	r2, #0
 80026a0:	d102      	bne.n	80026a8 <ETH_SetMACConfig+0x88>
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	e000      	b.n	80026aa <ETH_SetMACConfig+0x8a>
 80026a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	7bdb      	ldrb	r3, [r3, #15]
 80026b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026c2:	4313      	orrs	r3, r2
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026da:	2001      	movs	r0, #1
 80026dc:	f7fe ffae 	bl	800163c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026f6:	4013      	ands	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002706:	2a00      	cmp	r2, #0
 8002708:	d101      	bne.n	800270e <ETH_SetMACConfig+0xee>
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	e000      	b.n	8002710 <ETH_SetMACConfig+0xf0>
 800270e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002710:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002716:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800271e:	2a01      	cmp	r2, #1
 8002720:	d101      	bne.n	8002726 <ETH_SetMACConfig+0x106>
 8002722:	2208      	movs	r2, #8
 8002724:	e000      	b.n	8002728 <ETH_SetMACConfig+0x108>
 8002726:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002728:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002730:	2a01      	cmp	r2, #1
 8002732:	d101      	bne.n	8002738 <ETH_SetMACConfig+0x118>
 8002734:	2204      	movs	r2, #4
 8002736:	e000      	b.n	800273a <ETH_SetMACConfig+0x11a>
 8002738:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800273a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002742:	2a01      	cmp	r2, #1
 8002744:	d101      	bne.n	800274a <ETH_SetMACConfig+0x12a>
 8002746:	2202      	movs	r2, #2
 8002748:	e000      	b.n	800274c <ETH_SetMACConfig+0x12c>
 800274a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800274c:	4313      	orrs	r3, r2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002764:	2001      	movs	r0, #1
 8002766:	f7fe ff69 	bl	800163c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	ff20810f 	.word	0xff20810f

08002780 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <ETH_SetDMAConfig+0x110>)
 800279a:	4013      	ands	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	7b1b      	ldrb	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <ETH_SetDMAConfig+0x2c>
 80027a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027aa:	e000      	b.n	80027ae <ETH_SetDMAConfig+0x2e>
 80027ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	7b5b      	ldrb	r3, [r3, #13]
 80027b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	7f52      	ldrb	r2, [r2, #29]
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	d102      	bne.n	80027c4 <ETH_SetDMAConfig+0x44>
 80027be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027c2:	e000      	b.n	80027c6 <ETH_SetDMAConfig+0x46>
 80027c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	7b9b      	ldrb	r3, [r3, #14]
 80027cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7f1b      	ldrb	r3, [r3, #28]
 80027da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7f9b      	ldrb	r3, [r3, #30]
 80027e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027f4:	4313      	orrs	r3, r2
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002804:	461a      	mov	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002816:	2001      	movs	r0, #1
 8002818:	f7fe ff10 	bl	800163c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002834:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800283a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002840:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002848:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800284a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002852:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002858:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002862:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002866:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002874:	2001      	movs	r0, #1
 8002876:	f7fe fee1 	bl	800163c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	f8de3f23 	.word	0xf8de3f23

08002894 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0a6      	sub	sp, #152	; 0x98
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028d0:	2300      	movs	r3, #0
 80028d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002900:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002908:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fe86 	bl	8002620 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002914:	2301      	movs	r3, #1
 8002916:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002918:	2301      	movs	r3, #1
 800291a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002922:	2301      	movs	r3, #1
 8002924:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002936:	2300      	movs	r3, #0
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002940:	2301      	movs	r3, #1
 8002942:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002948:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800294a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800294e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002954:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800295c:	2300      	movs	r3, #0
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff08 	bl	8002780 <ETH_SetDMAConfig>
}
 8002970:	bf00      	nop
 8002972:	3798      	adds	r7, #152	; 0x98
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3305      	adds	r3, #5
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	3204      	adds	r2, #4
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <ETH_MACAddressConfig+0x68>)
 800299a:	4413      	add	r3, r2
 800299c:	461a      	mov	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3303      	adds	r3, #3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	061a      	lsls	r2, r3, #24
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3302      	adds	r3, #2
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3301      	adds	r3, #1
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	4313      	orrs	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	7812      	ldrb	r2, [r2, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <ETH_MACAddressConfig+0x6c>)
 80029ca:	4413      	add	r3, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	6013      	str	r3, [r2, #0]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40028040 	.word	0x40028040
 80029e4:	40028044 	.word	0x40028044

080029e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e03e      	b.n	8002a74 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68d9      	ldr	r1, [r3, #12]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	3206      	adds	r2, #6
 8002a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d80c      	bhi.n	8002a58 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68d9      	ldr	r1, [r3, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	e004      	b.n	8002a62 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3301      	adds	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d9bd      	bls.n	80029f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8c:	611a      	str	r2, [r3, #16]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e046      	b.n	8002b36 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6919      	ldr	r1, [r3, #16]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ae4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002aec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	3212      	adds	r2, #18
 8002b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d80c      	bhi.n	8002b26 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6919      	ldr	r1, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	e004      	b.n	8002b30 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d9b5      	bls.n	8002aa8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b08d      	sub	sp, #52	; 0x34
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3318      	adds	r3, #24
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb6:	d007      	beq.n	8002bc8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0ff      	b.n	8002dcc <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	3301      	adds	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	6852      	ldr	r2, [r2, #4]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c4e:	f3bf 8f5f 	dmb	sy
}
 8002c52:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c60:	e082      	b.n	8002d68 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e005      	b.n	8002c8e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	3301      	adds	r3, #1
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d902      	bls.n	8002ca0 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	3b04      	subs	r3, #4
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cc2:	d007      	beq.n	8002cd4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	3304      	adds	r3, #4
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d029      	beq.n	8002d28 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce6:	e019      	b.n	8002d1c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ce8:	f3bf 8f5f 	dmb	sy
}
 8002cec:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d902      	bls.n	8002d0c <ETH_Prepare_Tx_Descriptors+0x198>
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	3b04      	subs	r3, #4
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	3301      	adds	r3, #1
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3e1      	bcc.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d24:	2302      	movs	r3, #2
 8002d26:	e051      	b.n	8002dcc <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	6852      	ldr	r2, [r2, #4]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	3301      	adds	r3, #1
 8002d54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d56:	f3bf 8f5f 	dmb	sy
}
 8002d5a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f af78 	bne.w	8002c62 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e005      	b.n	8002d92 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da2:	6979      	ldr	r1, [r7, #20]
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	3304      	adds	r3, #4
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002db4:	b672      	cpsid	i
}
 8002db6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002dc6:	b662      	cpsie	i
}
 8002dc8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3734      	adds	r7, #52	; 0x34
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	ffffe000 	.word	0xffffe000

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e175      	b.n	80030e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8164 	bne.w	80030e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d005      	beq.n	8002e32 <HAL_GPIO_Init+0x56>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d130      	bne.n	8002e94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 0201 	and.w	r2, r3, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d017      	beq.n	8002ed0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d123      	bne.n	8002f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80be 	beq.w	80030e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_GPIO_Init+0x324>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f7e:	4a61      	ldr	r2, [pc, #388]	; (8003104 <HAL_GPIO_Init+0x328>)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	3302      	adds	r3, #2
 8002f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	220f      	movs	r2, #15
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_GPIO_Init+0x32c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d037      	beq.n	800301a <HAL_GPIO_Init+0x23e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_GPIO_Init+0x330>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d031      	beq.n	8003016 <HAL_GPIO_Init+0x23a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a56      	ldr	r2, [pc, #344]	; (8003110 <HAL_GPIO_Init+0x334>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <HAL_GPIO_Init+0x236>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a55      	ldr	r2, [pc, #340]	; (8003114 <HAL_GPIO_Init+0x338>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d025      	beq.n	800300e <HAL_GPIO_Init+0x232>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_GPIO_Init+0x33c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01f      	beq.n	800300a <HAL_GPIO_Init+0x22e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a53      	ldr	r2, [pc, #332]	; (800311c <HAL_GPIO_Init+0x340>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d019      	beq.n	8003006 <HAL_GPIO_Init+0x22a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_GPIO_Init+0x344>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_GPIO_Init+0x226>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a51      	ldr	r2, [pc, #324]	; (8003124 <HAL_GPIO_Init+0x348>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00d      	beq.n	8002ffe <HAL_GPIO_Init+0x222>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a50      	ldr	r2, [pc, #320]	; (8003128 <HAL_GPIO_Init+0x34c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <HAL_GPIO_Init+0x21e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4f      	ldr	r2, [pc, #316]	; (800312c <HAL_GPIO_Init+0x350>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_GPIO_Init+0x21a>
 8002ff2:	2309      	movs	r3, #9
 8002ff4:	e012      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	e010      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	e00e      	b.n	800301c <HAL_GPIO_Init+0x240>
 8002ffe:	2307      	movs	r3, #7
 8003000:	e00c      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003002:	2306      	movs	r3, #6
 8003004:	e00a      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003006:	2305      	movs	r3, #5
 8003008:	e008      	b.n	800301c <HAL_GPIO_Init+0x240>
 800300a:	2304      	movs	r3, #4
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x240>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x240>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x240>
 800301a:	2300      	movs	r3, #0
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800302c:	4935      	ldr	r1, [pc, #212]	; (8003104 <HAL_GPIO_Init+0x328>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303a:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <HAL_GPIO_Init+0x354>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305e:	4a34      	ldr	r2, [pc, #208]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003088:	4a29      	ldr	r2, [pc, #164]	; (8003130 <HAL_GPIO_Init+0x354>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_GPIO_Init+0x354>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b2:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <HAL_GPIO_Init+0x354>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f67f ae86 	bls.w	8002dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40021400 	.word	0x40021400
 8003120:	40021800 	.word	0x40021800
 8003124:	40021c00 	.word	0x40021c00
 8003128:	40022000 	.word	0x40022000
 800312c:	40022400 	.word	0x40022400
 8003130:	40013c00 	.word	0x40013c00

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003150:	e003      	b.n	800315a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	041a      	lsls	r2, r3, #16
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43d9      	mvns	r1, r3
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	400b      	ands	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	619a      	str	r2, [r3, #24]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800319a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319c:	b08f      	sub	sp, #60	; 0x3c
 800319e:	af0a      	add	r7, sp, #40	; 0x28
 80031a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e116      	b.n	80033da <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fe86 	bl	8000ed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2203      	movs	r2, #3
 80031d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fa4c 	bl	8005688 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	687e      	ldr	r6, [r7, #4]
 80031f8:	466d      	mov	r5, sp
 80031fa:	f106 0410 	add.w	r4, r6, #16
 80031fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003206:	e894 0003 	ldmia.w	r4, {r0, r1}
 800320a:	e885 0003 	stmia.w	r5, {r0, r1}
 800320e:	1d33      	adds	r3, r6, #4
 8003210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	f002 f9e0 	bl	80055d8 <USB_CoreInit>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0d7      	b.n	80033da <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f002 fa3a 	bl	80056aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e04a      	b.n	80032d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	333d      	adds	r3, #61	; 0x3d
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	333c      	adds	r3, #60	; 0x3c
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	b298      	uxth	r0, r3
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	3344      	adds	r3, #68	; 0x44
 8003278:	4602      	mov	r2, r0
 800327a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3340      	adds	r3, #64	; 0x40
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3348      	adds	r3, #72	; 0x48
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334c      	adds	r3, #76	; 0x4c
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3354      	adds	r3, #84	; 0x54
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	3301      	adds	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3af      	bcc.n	800323c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
 80032e0:	e044      	b.n	800336c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800333a:	7bfa      	ldrb	r2, [r7, #15]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	3301      	adds	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3b5      	bcc.n	80032e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	687e      	ldr	r6, [r7, #4]
 800337e:	466d      	mov	r5, sp
 8003380:	f106 0410 	add.w	r4, r6, #16
 8003384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003390:	e885 0003 	stmia.w	r5, {r0, r1}
 8003394:	1d33      	adds	r3, r6, #4
 8003396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f002 f9d3 	bl	8005744 <USB_DevInit>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e014      	b.n	80033da <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d102      	bne.n	80033ce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f80b 	bl	80033e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fb91 	bl	8005afa <USB_DevDisconnect>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080033e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_PCDEx_ActivateLPM+0x44>)
 8003414:	4313      	orrs	r3, r2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	10000003 	.word	0x10000003

0800342c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40007000 	.word	0x40007000

0800344c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800345c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800347a:	f7fe f8d3 	bl	8001624 <HAL_GetTick>
 800347e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003480:	e009      	b.n	8003496 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003482:	f7fe f8cf 	bl	8001624 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003490:	d901      	bls.n	8003496 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e022      	b.n	80034dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a2:	d1ee      	bne.n	8003482 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034b0:	f7fe f8b8 	bl	8001624 <HAL_GetTick>
 80034b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034b6:	e009      	b.n	80034cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034b8:	f7fe f8b4 	bl	8001624 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c6:	d901      	bls.n	80034cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e007      	b.n	80034dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d8:	d1ee      	bne.n	80034b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40007000 	.word	0x40007000

080034ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e29b      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8087 	beq.w	800361e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003510:	4b96      	ldr	r3, [pc, #600]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b04      	cmp	r3, #4
 800351a:	d00c      	beq.n	8003536 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351c:	4b93      	ldr	r3, [pc, #588]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d112      	bne.n	800354e <HAL_RCC_OscConfig+0x62>
 8003528:	4b90      	ldr	r3, [pc, #576]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003534:	d10b      	bne.n	800354e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003536:	4b8d      	ldr	r3, [pc, #564]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d06c      	beq.n	800361c <HAL_RCC_OscConfig+0x130>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d168      	bne.n	800361c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e275      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x7a>
 8003558:	4b84      	ldr	r3, [pc, #528]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a83      	ldr	r2, [pc, #524]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e02e      	b.n	80035c4 <HAL_RCC_OscConfig+0xd8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x9c>
 800356e:	4b7f      	ldr	r3, [pc, #508]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7e      	ldr	r2, [pc, #504]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b7c      	ldr	r3, [pc, #496]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7b      	ldr	r2, [pc, #492]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0xd8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0xc0>
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a72      	ldr	r2, [pc, #456]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0xd8>
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6e      	ldr	r2, [pc, #440]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b6c      	ldr	r3, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe f82a 	bl	8001624 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f826 	bl	8001624 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e229      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b61      	ldr	r3, [pc, #388]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f816 	bl	8001624 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe f812 	bl	8001624 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e215      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b57      	ldr	r3, [pc, #348]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x110>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d069      	beq.n	80036fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800362a:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b4d      	ldr	r3, [pc, #308]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	d11c      	bne.n	800367c <HAL_RCC_OscConfig+0x190>
 8003642:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x17a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e1e9      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	493d      	ldr	r1, [pc, #244]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367a:	e040      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	4b39      	ldr	r3, [pc, #228]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a38      	ldr	r2, [pc, #224]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd ffc8 	bl	8001624 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fd ffc4 	bl	8001624 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e1c7      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b30      	ldr	r3, [pc, #192]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b6:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4929      	ldr	r1, [pc, #164]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
 80036ca:	e018      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036cc:	4b27      	ldr	r3, [pc, #156]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd ffa4 	bl	8001624 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e0:	f7fd ffa0 	bl	8001624 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e1a3      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_RCC_OscConfig+0x280>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d038      	beq.n	800377c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d019      	beq.n	8003746 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	4a15      	ldr	r2, [pc, #84]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fd ff81 	bl	8001624 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003726:	f7fd ff7d 	bl	8001624 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e180      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x23a>
 8003744:	e01a      	b.n	800377c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_OscConfig+0x280>)
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <HAL_RCC_OscConfig+0x280>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fd ff67 	bl	8001624 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375a:	f7fd ff63 	bl	8001624 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d903      	bls.n	8003770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e166      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
 800376c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	4b92      	ldr	r3, [pc, #584]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80a4 	beq.w	80038d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378a:	4b8c      	ldr	r3, [pc, #560]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b89      	ldr	r3, [pc, #548]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a88      	ldr	r2, [pc, #544]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b86      	ldr	r3, [pc, #536]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b2:	4b83      	ldr	r3, [pc, #524]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037be:	4b80      	ldr	r3, [pc, #512]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a7f      	ldr	r2, [pc, #508]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fd ff2b 	bl	8001624 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fd ff27 	bl	8001624 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	; 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e12a      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e4:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x4d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x31a>
 80037f8:	4b70      	ldr	r3, [pc, #448]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a6f      	ldr	r2, [pc, #444]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e02d      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x33c>
 800380e:	4b6b      	ldr	r3, [pc, #428]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a6a      	ldr	r2, [pc, #424]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b68      	ldr	r3, [pc, #416]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a67      	ldr	r2, [pc, #412]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e01c      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d10c      	bne.n	800384a <HAL_RCC_OscConfig+0x35e>
 8003830:	4b62      	ldr	r3, [pc, #392]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4a61      	ldr	r2, [pc, #388]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003836:	f043 0304 	orr.w	r3, r3, #4
 800383a:	6713      	str	r3, [r2, #112]	; 0x70
 800383c:	4b5f      	ldr	r3, [pc, #380]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a5e      	ldr	r2, [pc, #376]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	e00b      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
 800384a:	4b5c      	ldr	r3, [pc, #368]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a5b      	ldr	r2, [pc, #364]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d015      	beq.n	8003896 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd fedb 	bl	8001624 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd fed7 	bl	8001624 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e0d8      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003888:	4b4c      	ldr	r3, [pc, #304]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ee      	beq.n	8003872 <HAL_RCC_OscConfig+0x386>
 8003894:	e014      	b.n	80038c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd fec5 	bl	8001624 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fd fec1 	bl	8001624 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0c2      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b4:	4b41      	ldr	r3, [pc, #260]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ee      	bne.n	800389e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80ae 	beq.w	8003a38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038dc:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d06d      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d14b      	bne.n	8003988 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b32      	ldr	r3, [pc, #200]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fe92 	bl	8001624 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fe8e 	bl	8001624 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e091      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	071b      	lsls	r3, r3, #28
 800394e:	491b      	ldr	r1, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fe60 	bl	8001624 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fe5c 	bl	8001624 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e05f      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x47c>
 8003986:	e057      	b.n	8003a38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 800398e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fd fe46 	bl	8001624 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399c:	f7fd fe42 	bl	8001624 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e045      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_RCC_OscConfig+0x4d0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x4b0>
 80039ba:	e03d      	b.n	8003a38 <HAL_RCC_OscConfig+0x54c>
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_RCC_OscConfig+0x558>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d030      	beq.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d129      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d122      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d119      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d10f      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0d0      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d910      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b67      	ldr	r3, [pc, #412]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	4965      	ldr	r1, [pc, #404]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0b8      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa8:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b50      	ldr	r3, [pc, #320]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	494d      	ldr	r1, [pc, #308]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d040      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d115      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e073      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06b      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4936      	ldr	r1, [pc, #216]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fd72 	bl	8001624 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fd fd6e 	bl	8001624 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e053      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d210      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 020f 	bic.w	r2, r3, #15
 8003b82:	4922      	ldr	r1, [pc, #136]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e032      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4916      	ldr	r1, [pc, #88]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490e      	ldr	r1, [pc, #56]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bda:	f000 f821 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	490a      	ldr	r1, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x1cc>)
 8003bec:	5ccb      	ldrb	r3, [r1, r3]
 8003bee:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1d0>)
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1d4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd f9e6 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023c00 	.word	0x40023c00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	0801d56c 	.word	0x0801d56c
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	20000004 	.word	0x20000004

08003c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b094      	sub	sp, #80	; 0x50
 8003c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	2300      	movs	r3, #0
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c38:	4b79      	ldr	r3, [pc, #484]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d00d      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x40>
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	f200 80e1 	bhi.w	8003e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x34>
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c52:	e0db      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b73      	ldr	r3, [pc, #460]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c58:	e0db      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5a:	4b73      	ldr	r3, [pc, #460]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c5e:	e0d8      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c60:	4b6f      	ldr	r3, [pc, #444]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c6a:	4b6d      	ldr	r3, [pc, #436]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d063      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c92:	4622      	mov	r2, r4
 8003c94:	462b      	mov	r3, r5
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4621      	mov	r1, r4
 8003cac:	1a51      	subs	r1, r2, r1
 8003cae:	6139      	str	r1, [r7, #16]
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	018b      	lsls	r3, r1, #6
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cce:	4651      	mov	r1, sl
 8003cd0:	018a      	lsls	r2, r1, #6
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8003cd8:	4659      	mov	r1, fp
 8003cda:	eb63 0901 	sbc.w	r9, r3, r1
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cf2:	4690      	mov	r8, r2
 8003cf4:	4699      	mov	r9, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	eb18 0303 	adds.w	r3, r8, r3
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	462b      	mov	r3, r5
 8003d00:	eb49 0303 	adc.w	r3, r9, r3
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d12:	4629      	mov	r1, r5
 8003d14:	024b      	lsls	r3, r1, #9
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	024a      	lsls	r2, r1, #9
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d26:	2200      	movs	r2, #0
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d30:	f7fc faee 	bl	8000310 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3c:	e058      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	2200      	movs	r2, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	4611      	mov	r1, r2
 8003d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d4e:	623b      	str	r3, [r7, #32]
 8003d50:	2300      	movs	r3, #0
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
 8003d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d58:	4642      	mov	r2, r8
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	f04f 0000 	mov.w	r0, #0
 8003d60:	f04f 0100 	mov.w	r1, #0
 8003d64:	0159      	lsls	r1, r3, #5
 8003d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6a:	0150      	lsls	r0, r2, #5
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4641      	mov	r1, r8
 8003d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d76:	4649      	mov	r1, r9
 8003d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d90:	ebb2 040a 	subs.w	r4, r2, sl
 8003d94:	eb63 050b 	sbc.w	r5, r3, fp
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	00eb      	lsls	r3, r5, #3
 8003da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da6:	00e2      	lsls	r2, r4, #3
 8003da8:	4614      	mov	r4, r2
 8003daa:	461d      	mov	r5, r3
 8003dac:	4643      	mov	r3, r8
 8003dae:	18e3      	adds	r3, r4, r3
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	464b      	mov	r3, r9
 8003db4:	eb45 0303 	adc.w	r3, r5, r3
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	028b      	lsls	r3, r1, #10
 8003dca:	4621      	mov	r1, r4
 8003dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	028a      	lsls	r2, r1, #10
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	61fa      	str	r2, [r7, #28]
 8003de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de4:	f7fc fa94 	bl	8000310 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e0a:	e002      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3750      	adds	r7, #80	; 0x50
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400
 8003e28:	007a1200 	.word	0x007a1200

08003e2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000000 	.word	0x20000000

08003e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e48:	f7ff fff0 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0a9b      	lsrs	r3, r3, #10
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4903      	ldr	r1, [pc, #12]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	0801d57c 	.word	0x0801d57c

08003e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e70:	f7ff ffdc 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0b5b      	lsrs	r3, r3, #13
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	0801d57c 	.word	0x0801d57c

08003e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0203 	and.w	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	08db      	lsrs	r3, r3, #3
 8003ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ed6:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <HAL_RCC_GetClockConfig+0x60>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 020f 	and.w	r2, r3, #15
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40023c00 	.word	0x40023c00

08003ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d012      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f20:	4b69      	ldr	r3, [pc, #420]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a68      	ldr	r2, [pc, #416]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f2a:	6093      	str	r3, [r2, #8]
 8003f2c:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	4964      	ldr	r1, [pc, #400]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d017      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f52:	4b5d      	ldr	r3, [pc, #372]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	4959      	ldr	r1, [pc, #356]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d017      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f8e:	4b4e      	ldr	r3, [pc, #312]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	494a      	ldr	r1, [pc, #296]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 808b 	beq.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4a39      	ldr	r2, [pc, #228]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe8:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a34      	ldr	r2, [pc, #208]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fd fb10 	bl	8001624 <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004008:	f7fd fb0c 	bl	8001624 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e38f      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d035      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d02e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004066:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800406c:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d114      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fad4 	bl	8001624 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407e:	e00a      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fd fad0 	bl	8001624 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e351      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ee      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ae:	d111      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040be:	400b      	ands	r3, r1
 80040c0:	4901      	ldr	r1, [pc, #4]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40007000 	.word	0x40007000
 80040d0:	0ffffcff 	.word	0x0ffffcff
 80040d4:	4bac      	ldr	r3, [pc, #688]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4aab      	ldr	r2, [pc, #684]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040de:	6093      	str	r3, [r2, #8]
 80040e0:	4ba9      	ldr	r3, [pc, #676]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	49a6      	ldr	r1, [pc, #664]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040fe:	4ba2      	ldr	r3, [pc, #648]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004104:	4aa0      	ldr	r2, [pc, #640]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800410e:	4b9e      	ldr	r3, [pc, #632]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004110:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	499b      	ldr	r1, [pc, #620]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412c:	4b96      	ldr	r3, [pc, #600]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413a:	4993      	ldr	r1, [pc, #588]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800414e:	4b8e      	ldr	r3, [pc, #568]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415c:	498a      	ldr	r1, [pc, #552]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004170:	4b85      	ldr	r3, [pc, #532]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417e:	4982      	ldr	r1, [pc, #520]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004192:	4b7d      	ldr	r3, [pc, #500]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	4979      	ldr	r1, [pc, #484]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041b4:	4b74      	ldr	r3, [pc, #464]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	4971      	ldr	r1, [pc, #452]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041d6:	4b6c      	ldr	r3, [pc, #432]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f023 020c 	bic.w	r2, r3, #12
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e4:	4968      	ldr	r1, [pc, #416]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041f8:	4b63      	ldr	r3, [pc, #396]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	4960      	ldr	r1, [pc, #384]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800421a:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	4957      	ldr	r1, [pc, #348]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800423c:	4b52      	ldr	r3, [pc, #328]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	494f      	ldr	r1, [pc, #316]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800425e:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	4946      	ldr	r1, [pc, #280]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004280:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	493e      	ldr	r1, [pc, #248]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	4935      	ldr	r1, [pc, #212]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042c4:	4b30      	ldr	r3, [pc, #192]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d2:	492d      	ldr	r1, [pc, #180]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d011      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042e6:	4b28      	ldr	r3, [pc, #160]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f4:	4924      	ldr	r1, [pc, #144]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004304:	d101      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004334:	4914      	ldr	r1, [pc, #80]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004358:	490b      	ldr	r1, [pc, #44]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00f      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	4902      	ldr	r1, [pc, #8]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004384:	e002      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004398:	4b8a      	ldr	r3, [pc, #552]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	4986      	ldr	r1, [pc, #536]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043bc:	4b81      	ldr	r3, [pc, #516]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	497d      	ldr	r1, [pc, #500]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d006      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80d6 	beq.w	8004594 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043e8:	4b76      	ldr	r3, [pc, #472]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a75      	ldr	r2, [pc, #468]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f4:	f7fd f916 	bl	8001624 <HAL_GetTick>
 80043f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043fc:	f7fd f912 	bl	8001624 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e195      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800440e:	4b6d      	ldr	r3, [pc, #436]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d021      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11d      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800443c:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800443e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004442:	0e1b      	lsrs	r3, r3, #24
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	019a      	lsls	r2, r3, #6
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	071b      	lsls	r3, r3, #28
 8004462:	4958      	ldr	r1, [pc, #352]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d004      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02e      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004494:	d129      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004496:	4b4b      	ldr	r3, [pc, #300]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044a4:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	0f1b      	lsrs	r3, r3, #28
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	019a      	lsls	r2, r3, #6
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	061b      	lsls	r3, r3, #24
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	493e      	ldr	r1, [pc, #248]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044d2:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d8:	f023 021f 	bic.w	r2, r3, #31
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	3b01      	subs	r3, #1
 80044e2:	4938      	ldr	r1, [pc, #224]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01d      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044f6:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	0e1b      	lsrs	r3, r3, #24
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004504:	4b2f      	ldr	r3, [pc, #188]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450a:	0f1b      	lsrs	r3, r3, #28
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	019a      	lsls	r2, r3, #6
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	431a      	orrs	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	4926      	ldr	r1, [pc, #152]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d011      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	019a      	lsls	r2, r3, #6
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	071b      	lsls	r3, r3, #28
 800455a:	491a      	ldr	r1, [pc, #104]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800456c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456e:	f7fd f859 	bl	8001624 <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004576:	f7fd f855 	bl	8001624 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	; 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e0d8      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004588:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 80ce 	bne.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a8:	f7fd f83c 	bl	8001624 <HAL_GetTick>
 80045ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045ae:	e00b      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045b0:	f7fd f838 	bl	8001624 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d904      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0bb      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045c8:	4b5e      	ldr	r3, [pc, #376]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d4:	d0ec      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02e      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12a      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045fe:	4b51      	ldr	r3, [pc, #324]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800460c:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	0f1b      	lsrs	r3, r3, #28
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	019a      	lsls	r2, r3, #6
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	4944      	ldr	r1, [pc, #272]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800463a:	4b42      	ldr	r3, [pc, #264]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	493d      	ldr	r1, [pc, #244]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d022      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004668:	d11d      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004678:	4b32      	ldr	r3, [pc, #200]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	0f1b      	lsrs	r3, r3, #28
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	019a      	lsls	r2, r3, #6
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	431a      	orrs	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	061b      	lsls	r3, r3, #24
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	4929      	ldr	r1, [pc, #164]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d028      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	0e1b      	lsrs	r3, r3, #24
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	019a      	lsls	r2, r3, #6
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	071b      	lsls	r3, r3, #28
 80046e6:	4917      	ldr	r1, [pc, #92]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4911      	ldr	r1, [pc, #68]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004710:	f7fc ff88 	bl	8001624 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004718:	f7fc ff84 	bl	8001624 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e007      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004736:	d1ef      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e049      	b.n	80047ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f841 	bl	80047f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f000 fa00 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e054      	b.n	80048ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a26      	ldr	r2, [pc, #152]	; (80048dc <HAL_TIM_Base_Start_IT+0xd0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d022      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d01d      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_TIM_Base_Start_IT+0xe0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x80>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d115      	bne.n	80048b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_TIM_Base_Start_IT+0xec>)
 8004894:	4013      	ands	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d015      	beq.n	80048ca <HAL_TIM_Base_Start_IT+0xbe>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d011      	beq.n	80048ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	e008      	b.n	80048ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e000      	b.n	80048cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800
 80048f8:	00010007 	.word	0x00010007

080048fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0202 	mvn.w	r2, #2
 8004928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f905 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8f7 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f908 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0204 	mvn.w	r2, #4
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8db 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8cd 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8de 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d122      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d11b      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0208 	mvn.w	r2, #8
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2204      	movs	r2, #4
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8b1 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8a3 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f8b4 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d122      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d11b      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0210 	mvn.w	r2, #16
 8004a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f887 	bl	8004b4e <HAL_TIM_IC_CaptureCallback>
 8004a40:	e005      	b.n	8004a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f879 	bl	8004b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f88a 	bl	8004b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0201 	mvn.w	r2, #1
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc f98c 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b80      	cmp	r3, #128	; 0x80
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f91a 	bl	8004ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aba:	d10e      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f90d 	bl	8004cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d10e      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d107      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f838 	bl	8004b76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d10e      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d107      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0220 	mvn.w	r2, #32
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f8cd 	bl	8004ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a40      	ldr	r2, [pc, #256]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d00f      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a3d      	ldr	r2, [pc, #244]	; (8004ca4 <TIM_Base_SetConfig+0x118>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00b      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a3c      	ldr	r2, [pc, #240]	; (8004ca8 <TIM_Base_SetConfig+0x11c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <TIM_Base_SetConfig+0x120>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a3a      	ldr	r2, [pc, #232]	; (8004cb0 <TIM_Base_SetConfig+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d108      	bne.n	8004bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2f      	ldr	r2, [pc, #188]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02b      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d027      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <TIM_Base_SetConfig+0x118>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d023      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2b      	ldr	r2, [pc, #172]	; (8004ca8 <TIM_Base_SetConfig+0x11c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01f      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2a      	ldr	r2, [pc, #168]	; (8004cac <TIM_Base_SetConfig+0x120>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01b      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <TIM_Base_SetConfig+0x124>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d017      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <TIM_Base_SetConfig+0x128>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <TIM_Base_SetConfig+0x12c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00f      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <TIM_Base_SetConfig+0x130>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <TIM_Base_SetConfig+0x134>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a24      	ldr	r2, [pc, #144]	; (8004cc4 <TIM_Base_SetConfig+0x138>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <TIM_Base_SetConfig+0x13c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_Base_SetConfig+0xf8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <TIM_Base_SetConfig+0x124>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d103      	bne.n	8004c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	615a      	str	r2, [r3, #20]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800
 8004cc0:	40001800 	.word	0x40001800
 8004cc4:	40001c00 	.word	0x40001c00
 8004cc8:	40002000 	.word	0x40002000

08004ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e040      	b.n	8004d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc f874 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f82c 	bl	8004da4 <UART_SetConfig>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e022      	b.n	8004d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa84 	bl	800526c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fb0b 	bl	80053b0 <UART_CheckIdleState>
 8004d9a:	4603      	mov	r3, r0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4ba6      	ldr	r3, [pc, #664]	; (8005068 <UART_SetConfig+0x2c4>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	6979      	ldr	r1, [r7, #20]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a94      	ldr	r2, [pc, #592]	; (800506c <UART_SetConfig+0x2c8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d120      	bne.n	8004e62 <UART_SetConfig+0xbe>
 8004e20:	4b93      	ldr	r3, [pc, #588]	; (8005070 <UART_SetConfig+0x2cc>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d816      	bhi.n	8004e5c <UART_SetConfig+0xb8>
 8004e2e:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <UART_SetConfig+0x90>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e51 	.word	0x08004e51
 8004e3c:	08004e4b 	.word	0x08004e4b
 8004e40:	08004e57 	.word	0x08004e57
 8004e44:	2301      	movs	r3, #1
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e150      	b.n	80050ec <UART_SetConfig+0x348>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	77fb      	strb	r3, [r7, #31]
 8004e4e:	e14d      	b.n	80050ec <UART_SetConfig+0x348>
 8004e50:	2304      	movs	r3, #4
 8004e52:	77fb      	strb	r3, [r7, #31]
 8004e54:	e14a      	b.n	80050ec <UART_SetConfig+0x348>
 8004e56:	2308      	movs	r3, #8
 8004e58:	77fb      	strb	r3, [r7, #31]
 8004e5a:	e147      	b.n	80050ec <UART_SetConfig+0x348>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e144      	b.n	80050ec <UART_SetConfig+0x348>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a83      	ldr	r2, [pc, #524]	; (8005074 <UART_SetConfig+0x2d0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d132      	bne.n	8004ed2 <UART_SetConfig+0x12e>
 8004e6c:	4b80      	ldr	r3, [pc, #512]	; (8005070 <UART_SetConfig+0x2cc>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	d828      	bhi.n	8004ecc <UART_SetConfig+0x128>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0xdc>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004eb5 	.word	0x08004eb5
 8004e84:	08004ecd 	.word	0x08004ecd
 8004e88:	08004ecd 	.word	0x08004ecd
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ec1 	.word	0x08004ec1
 8004e94:	08004ecd 	.word	0x08004ecd
 8004e98:	08004ecd 	.word	0x08004ecd
 8004e9c:	08004ecd 	.word	0x08004ecd
 8004ea0:	08004ebb 	.word	0x08004ebb
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ecd 	.word	0x08004ecd
 8004eb0:	08004ec7 	.word	0x08004ec7
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e118      	b.n	80050ec <UART_SetConfig+0x348>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e115      	b.n	80050ec <UART_SetConfig+0x348>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e112      	b.n	80050ec <UART_SetConfig+0x348>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e10f      	b.n	80050ec <UART_SetConfig+0x348>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e10c      	b.n	80050ec <UART_SetConfig+0x348>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a68      	ldr	r2, [pc, #416]	; (8005078 <UART_SetConfig+0x2d4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d120      	bne.n	8004f1e <UART_SetConfig+0x17a>
 8004edc:	4b64      	ldr	r3, [pc, #400]	; (8005070 <UART_SetConfig+0x2cc>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ee6:	2b30      	cmp	r3, #48	; 0x30
 8004ee8:	d013      	beq.n	8004f12 <UART_SetConfig+0x16e>
 8004eea:	2b30      	cmp	r3, #48	; 0x30
 8004eec:	d814      	bhi.n	8004f18 <UART_SetConfig+0x174>
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d009      	beq.n	8004f06 <UART_SetConfig+0x162>
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d810      	bhi.n	8004f18 <UART_SetConfig+0x174>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <UART_SetConfig+0x15c>
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d006      	beq.n	8004f0c <UART_SetConfig+0x168>
 8004efe:	e00b      	b.n	8004f18 <UART_SetConfig+0x174>
 8004f00:	2300      	movs	r3, #0
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e0f2      	b.n	80050ec <UART_SetConfig+0x348>
 8004f06:	2302      	movs	r3, #2
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e0ef      	b.n	80050ec <UART_SetConfig+0x348>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e0ec      	b.n	80050ec <UART_SetConfig+0x348>
 8004f12:	2308      	movs	r3, #8
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e0e9      	b.n	80050ec <UART_SetConfig+0x348>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e0e6      	b.n	80050ec <UART_SetConfig+0x348>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a56      	ldr	r2, [pc, #344]	; (800507c <UART_SetConfig+0x2d8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d120      	bne.n	8004f6a <UART_SetConfig+0x1c6>
 8004f28:	4b51      	ldr	r3, [pc, #324]	; (8005070 <UART_SetConfig+0x2cc>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f32:	2bc0      	cmp	r3, #192	; 0xc0
 8004f34:	d013      	beq.n	8004f5e <UART_SetConfig+0x1ba>
 8004f36:	2bc0      	cmp	r3, #192	; 0xc0
 8004f38:	d814      	bhi.n	8004f64 <UART_SetConfig+0x1c0>
 8004f3a:	2b80      	cmp	r3, #128	; 0x80
 8004f3c:	d009      	beq.n	8004f52 <UART_SetConfig+0x1ae>
 8004f3e:	2b80      	cmp	r3, #128	; 0x80
 8004f40:	d810      	bhi.n	8004f64 <UART_SetConfig+0x1c0>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <UART_SetConfig+0x1a8>
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d006      	beq.n	8004f58 <UART_SetConfig+0x1b4>
 8004f4a:	e00b      	b.n	8004f64 <UART_SetConfig+0x1c0>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e0cc      	b.n	80050ec <UART_SetConfig+0x348>
 8004f52:	2302      	movs	r3, #2
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e0c9      	b.n	80050ec <UART_SetConfig+0x348>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e0c6      	b.n	80050ec <UART_SetConfig+0x348>
 8004f5e:	2308      	movs	r3, #8
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e0c3      	b.n	80050ec <UART_SetConfig+0x348>
 8004f64:	2310      	movs	r3, #16
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e0c0      	b.n	80050ec <UART_SetConfig+0x348>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a44      	ldr	r2, [pc, #272]	; (8005080 <UART_SetConfig+0x2dc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d125      	bne.n	8004fc0 <UART_SetConfig+0x21c>
 8004f74:	4b3e      	ldr	r3, [pc, #248]	; (8005070 <UART_SetConfig+0x2cc>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f82:	d017      	beq.n	8004fb4 <UART_SetConfig+0x210>
 8004f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f88:	d817      	bhi.n	8004fba <UART_SetConfig+0x216>
 8004f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8e:	d00b      	beq.n	8004fa8 <UART_SetConfig+0x204>
 8004f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f94:	d811      	bhi.n	8004fba <UART_SetConfig+0x216>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <UART_SetConfig+0x1fe>
 8004f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9e:	d006      	beq.n	8004fae <UART_SetConfig+0x20a>
 8004fa0:	e00b      	b.n	8004fba <UART_SetConfig+0x216>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e0a1      	b.n	80050ec <UART_SetConfig+0x348>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e09e      	b.n	80050ec <UART_SetConfig+0x348>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e09b      	b.n	80050ec <UART_SetConfig+0x348>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e098      	b.n	80050ec <UART_SetConfig+0x348>
 8004fba:	2310      	movs	r3, #16
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e095      	b.n	80050ec <UART_SetConfig+0x348>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2f      	ldr	r2, [pc, #188]	; (8005084 <UART_SetConfig+0x2e0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d125      	bne.n	8005016 <UART_SetConfig+0x272>
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <UART_SetConfig+0x2cc>)
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd8:	d017      	beq.n	800500a <UART_SetConfig+0x266>
 8004fda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fde:	d817      	bhi.n	8005010 <UART_SetConfig+0x26c>
 8004fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe4:	d00b      	beq.n	8004ffe <UART_SetConfig+0x25a>
 8004fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fea:	d811      	bhi.n	8005010 <UART_SetConfig+0x26c>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <UART_SetConfig+0x254>
 8004ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff4:	d006      	beq.n	8005004 <UART_SetConfig+0x260>
 8004ff6:	e00b      	b.n	8005010 <UART_SetConfig+0x26c>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e076      	b.n	80050ec <UART_SetConfig+0x348>
 8004ffe:	2302      	movs	r3, #2
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e073      	b.n	80050ec <UART_SetConfig+0x348>
 8005004:	2304      	movs	r3, #4
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e070      	b.n	80050ec <UART_SetConfig+0x348>
 800500a:	2308      	movs	r3, #8
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e06d      	b.n	80050ec <UART_SetConfig+0x348>
 8005010:	2310      	movs	r3, #16
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e06a      	b.n	80050ec <UART_SetConfig+0x348>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <UART_SetConfig+0x2e4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d138      	bne.n	8005092 <UART_SetConfig+0x2ee>
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <UART_SetConfig+0x2cc>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800502a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800502e:	d017      	beq.n	8005060 <UART_SetConfig+0x2bc>
 8005030:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005034:	d82a      	bhi.n	800508c <UART_SetConfig+0x2e8>
 8005036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503a:	d00b      	beq.n	8005054 <UART_SetConfig+0x2b0>
 800503c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005040:	d824      	bhi.n	800508c <UART_SetConfig+0x2e8>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <UART_SetConfig+0x2aa>
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504a:	d006      	beq.n	800505a <UART_SetConfig+0x2b6>
 800504c:	e01e      	b.n	800508c <UART_SetConfig+0x2e8>
 800504e:	2300      	movs	r3, #0
 8005050:	77fb      	strb	r3, [r7, #31]
 8005052:	e04b      	b.n	80050ec <UART_SetConfig+0x348>
 8005054:	2302      	movs	r3, #2
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e048      	b.n	80050ec <UART_SetConfig+0x348>
 800505a:	2304      	movs	r3, #4
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e045      	b.n	80050ec <UART_SetConfig+0x348>
 8005060:	2308      	movs	r3, #8
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e042      	b.n	80050ec <UART_SetConfig+0x348>
 8005066:	bf00      	nop
 8005068:	efff69f3 	.word	0xefff69f3
 800506c:	40011000 	.word	0x40011000
 8005070:	40023800 	.word	0x40023800
 8005074:	40004400 	.word	0x40004400
 8005078:	40004800 	.word	0x40004800
 800507c:	40004c00 	.word	0x40004c00
 8005080:	40005000 	.word	0x40005000
 8005084:	40011400 	.word	0x40011400
 8005088:	40007800 	.word	0x40007800
 800508c:	2310      	movs	r3, #16
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e02c      	b.n	80050ec <UART_SetConfig+0x348>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a72      	ldr	r2, [pc, #456]	; (8005260 <UART_SetConfig+0x4bc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d125      	bne.n	80050e8 <UART_SetConfig+0x344>
 800509c:	4b71      	ldr	r3, [pc, #452]	; (8005264 <UART_SetConfig+0x4c0>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050aa:	d017      	beq.n	80050dc <UART_SetConfig+0x338>
 80050ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050b0:	d817      	bhi.n	80050e2 <UART_SetConfig+0x33e>
 80050b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b6:	d00b      	beq.n	80050d0 <UART_SetConfig+0x32c>
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	d811      	bhi.n	80050e2 <UART_SetConfig+0x33e>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <UART_SetConfig+0x326>
 80050c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c6:	d006      	beq.n	80050d6 <UART_SetConfig+0x332>
 80050c8:	e00b      	b.n	80050e2 <UART_SetConfig+0x33e>
 80050ca:	2300      	movs	r3, #0
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e00d      	b.n	80050ec <UART_SetConfig+0x348>
 80050d0:	2302      	movs	r3, #2
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e00a      	b.n	80050ec <UART_SetConfig+0x348>
 80050d6:	2304      	movs	r3, #4
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e007      	b.n	80050ec <UART_SetConfig+0x348>
 80050dc:	2308      	movs	r3, #8
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e004      	b.n	80050ec <UART_SetConfig+0x348>
 80050e2:	2310      	movs	r3, #16
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e001      	b.n	80050ec <UART_SetConfig+0x348>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f4:	d15b      	bne.n	80051ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050f6:	7ffb      	ldrb	r3, [r7, #31]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d828      	bhi.n	800514e <UART_SetConfig+0x3aa>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x360>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	0800514f 	.word	0x0800514f
 8005114:	0800513f 	.word	0x0800513f
 8005118:	0800514f 	.word	0x0800514f
 800511c:	0800514f 	.word	0x0800514f
 8005120:	0800514f 	.word	0x0800514f
 8005124:	08005147 	.word	0x08005147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fe fe8c 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 800512c:	61b8      	str	r0, [r7, #24]
        break;
 800512e:	e013      	b.n	8005158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005130:	f7fe fe9c 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 8005134:	61b8      	str	r0, [r7, #24]
        break;
 8005136:	e00f      	b.n	8005158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005138:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <UART_SetConfig+0x4c4>)
 800513a:	61bb      	str	r3, [r7, #24]
        break;
 800513c:	e00c      	b.n	8005158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513e:	f7fe fd6f 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8005142:	61b8      	str	r0, [r7, #24]
        break;
 8005144:	e008      	b.n	8005158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514a:	61bb      	str	r3, [r7, #24]
        break;
 800514c:	e004      	b.n	8005158 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	77bb      	strb	r3, [r7, #30]
        break;
 8005156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d074      	beq.n	8005248 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	005a      	lsls	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b0f      	cmp	r3, #15
 8005178:	d916      	bls.n	80051a8 <UART_SetConfig+0x404>
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d212      	bcs.n	80051a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f023 030f 	bic.w	r3, r3, #15
 800518a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	b29b      	uxth	r3, r3
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	b29a      	uxth	r2, r3
 8005198:	89fb      	ldrh	r3, [r7, #14]
 800519a:	4313      	orrs	r3, r2
 800519c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	89fa      	ldrh	r2, [r7, #14]
 80051a4:	60da      	str	r2, [r3, #12]
 80051a6:	e04f      	b.n	8005248 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	77bb      	strb	r3, [r7, #30]
 80051ac:	e04c      	b.n	8005248 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ae:	7ffb      	ldrb	r3, [r7, #31]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d828      	bhi.n	8005206 <UART_SetConfig+0x462>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x418>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051f1 	.word	0x080051f1
 80051c8:	08005207 	.word	0x08005207
 80051cc:	080051f7 	.word	0x080051f7
 80051d0:	08005207 	.word	0x08005207
 80051d4:	08005207 	.word	0x08005207
 80051d8:	08005207 	.word	0x08005207
 80051dc:	080051ff 	.word	0x080051ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fe fe30 	bl	8003e44 <HAL_RCC_GetPCLK1Freq>
 80051e4:	61b8      	str	r0, [r7, #24]
        break;
 80051e6:	e013      	b.n	8005210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e8:	f7fe fe40 	bl	8003e6c <HAL_RCC_GetPCLK2Freq>
 80051ec:	61b8      	str	r0, [r7, #24]
        break;
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f0:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <UART_SetConfig+0x4c4>)
 80051f2:	61bb      	str	r3, [r7, #24]
        break;
 80051f4:	e00c      	b.n	8005210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fe fd13 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 80051fa:	61b8      	str	r0, [r7, #24]
        break;
 80051fc:	e008      	b.n	8005210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	61bb      	str	r3, [r7, #24]
        break;
 8005204:	e004      	b.n	8005210 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	77bb      	strb	r3, [r7, #30]
        break;
 800520e:	bf00      	nop
    }

    if (pclk != 0U)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d018      	beq.n	8005248 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	085a      	lsrs	r2, r3, #1
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	441a      	add	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d909      	bls.n	8005244 <UART_SetConfig+0x4a0>
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005236:	d205      	bcs.n	8005244 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	b29a      	uxth	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	e001      	b.n	8005248 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005254:	7fbb      	ldrb	r3, [r7, #30]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40007c00 	.word	0x40007c00
 8005264:	40023800 	.word	0x40023800
 8005268:	00f42400 	.word	0x00f42400

0800526c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01a      	beq.n	8005382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536a:	d10a      	bne.n	8005382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053c0:	f7fc f930 	bl	8001624 <HAL_GetTick>
 80053c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d10e      	bne.n	80053f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f831 	bl	800544a <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e027      	b.n	8005442 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d10e      	bne.n	800541e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f81b 	bl	800544a <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e011      	b.n	8005442 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b09c      	sub	sp, #112	; 0x70
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	4613      	mov	r3, r2
 8005458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545a:	e0a7      	b.n	80055ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005462:	f000 80a3 	beq.w	80055ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fc f8dd 	bl	8001624 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <UART_WaitOnFlagUntilTimeout+0x32>
 8005476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005478:	2b00      	cmp	r3, #0
 800547a:	d13f      	bne.n	80054fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800548a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005490:	667b      	str	r3, [r7, #100]	; 0x64
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800549a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800549c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e6      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	663b      	str	r3, [r7, #96]	; 0x60
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80054d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e068      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d050      	beq.n	80055ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005518:	d148      	bne.n	80055ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005522:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	637b      	str	r3, [r7, #52]	; 0x34
 8005544:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e6      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3308      	adds	r3, #8
 800555c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	613b      	str	r3, [r7, #16]
   return(result);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	66bb      	str	r3, [r7, #104]	; 0x68
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005576:	623a      	str	r2, [r7, #32]
 8005578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	69f9      	ldr	r1, [r7, #28]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	61bb      	str	r3, [r7, #24]
   return(result);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e5      	bne.n	8005556 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e010      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69da      	ldr	r2, [r3, #28]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	f43f af48 	beq.w	800545c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3770      	adds	r7, #112	; 0x70
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d8:	b084      	sub	sp, #16
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	f107 001c 	add.w	r0, r7, #28
 80055e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d120      	bne.n	8005632 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	4b20      	ldr	r3, [pc, #128]	; (8005684 <USB_CoreInit+0xac>)
 8005602:	4013      	ands	r3, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa96 	bl	8005b58 <USB_CoreReset>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e010      	b.n	8005654 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fa8a 	bl	8005b58 <USB_CoreReset>
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10b      	bne.n	8005672 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f043 0206 	orr.w	r2, r3, #6
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800567e:	b004      	add	sp, #16
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	ffbdffbf 	.word	0xffbdffbf

08005688 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 0201 	bic.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d115      	bne.n	80056f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056d8:	2001      	movs	r0, #1
 80056da:	f7fb ffaf 	bl	800163c <HAL_Delay>
      ms++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fa29 	bl	8005b3c <USB_GetMode>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d01e      	beq.n	800572e <USB_SetCurrentMode+0x84>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b31      	cmp	r3, #49	; 0x31
 80056f4:	d9f0      	bls.n	80056d8 <USB_SetCurrentMode+0x2e>
 80056f6:	e01a      	b.n	800572e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d115      	bne.n	800572a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800570a:	2001      	movs	r0, #1
 800570c:	f7fb ff96 	bl	800163c <HAL_Delay>
      ms++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa10 	bl	8005b3c <USB_GetMode>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <USB_SetCurrentMode+0x84>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b31      	cmp	r3, #49	; 0x31
 8005726:	d9f0      	bls.n	800570a <USB_SetCurrentMode+0x60>
 8005728:	e001      	b.n	800572e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e005      	b.n	800573a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b32      	cmp	r3, #50	; 0x32
 8005732:	d101      	bne.n	8005738 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005744:	b084      	sub	sp, #16
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e009      	b.n	8005778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3340      	adds	r3, #64	; 0x40
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	2200      	movs	r2, #0
 8005770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3301      	adds	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b0e      	cmp	r3, #14
 800577c:	d9f2      	bls.n	8005764 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d11c      	bne.n	80057be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005792:	f043 0302 	orr.w	r3, r3, #2
 8005796:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e005      	b.n	80057ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	4619      	mov	r1, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	461a      	mov	r2, r3
 80057e6:	680b      	ldr	r3, [r1, #0]
 80057e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d10c      	bne.n	800580a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057f6:	2100      	movs	r1, #0
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f965 	bl	8005ac8 <USB_SetDevSpeed>
 80057fe:	e008      	b.n	8005812 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005800:	2101      	movs	r1, #1
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f960 	bl	8005ac8 <USB_SetDevSpeed>
 8005808:	e003      	b.n	8005812 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800580a:	2103      	movs	r1, #3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f95b 	bl	8005ac8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005812:	2110      	movs	r1, #16
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8f3 	bl	8005a00 <USB_FlushTxFifo>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f91f 	bl	8005a68 <USB_FlushRxFifo>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	461a      	mov	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e043      	b.n	80058e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005874:	d118      	bne.n	80058a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005888:	461a      	mov	r2, r3
 800588a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e013      	b.n	80058ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	461a      	mov	r2, r3
 80058a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e008      	b.n	80058ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	461a      	mov	r2, r3
 80058c8:	2300      	movs	r3, #0
 80058ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	461a      	mov	r2, r3
 80058da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3301      	adds	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d3b7      	bcc.n	800585e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	e043      	b.n	800597c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590a:	d118      	bne.n	800593e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	461a      	mov	r2, r3
 8005920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e013      	b.n	8005950 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e008      	b.n	8005950 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	461a      	mov	r2, r3
 800594c:	2300      	movs	r3, #0
 800594e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	461a      	mov	r2, r3
 800595e:	2300      	movs	r3, #0
 8005960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	461a      	mov	r2, r3
 8005970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3301      	adds	r3, #1
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d3b7      	bcc.n	80058f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005996:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f043 0210 	orr.w	r2, r3, #16
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <USB_DevInit+0x2b4>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d105      	bne.n	80059e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	4b06      	ldr	r3, [pc, #24]	; (80059fc <USB_DevInit+0x2b8>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059f4:	b004      	add	sp, #16
 80059f6:	4770      	bx	lr
 80059f8:	803c3800 	.word	0x803c3800
 80059fc:	40000004 	.word	0x40000004

08005a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <USB_FlushTxFifo+0x64>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d901      	bls.n	8005a20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e01b      	b.n	8005a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	daf2      	bge.n	8005a0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	019b      	lsls	r3, r3, #6
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <USB_FlushTxFifo+0x64>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e006      	b.n	8005a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d0f0      	beq.n	8005a38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	00030d40 	.word	0x00030d40

08005a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a11      	ldr	r2, [pc, #68]	; (8005ac4 <USB_FlushRxFifo+0x5c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e018      	b.n	8005ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	daf2      	bge.n	8005a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2210      	movs	r2, #16
 8005a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <USB_FlushRxFifo+0x5c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e006      	b.n	8005ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d0f0      	beq.n	8005a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	00030d40 	.word	0x00030d40

08005ac8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b14:	f023 0303 	bic.w	r3, r3, #3
 8005b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b28:	f043 0302 	orr.w	r3, r3, #2
 8005b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0301 	and.w	r3, r3, #1
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <USB_CoreReset+0x64>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e01b      	b.n	8005bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	daf2      	bge.n	8005b64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <USB_CoreReset+0x64>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e006      	b.n	8005bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d0f0      	beq.n	8005b8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	00030d40 	.word	0x00030d40

08005bc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005bc0:	b5b0      	push	{r4, r5, r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005bc6:	4b96      	ldr	r3, [pc, #600]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005bc8:	220a      	movs	r2, #10
 8005bca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8005bcc:	4b94      	ldr	r3, [pc, #592]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005bce:	222a      	movs	r2, #42	; 0x2a
 8005bd0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005bd2:	4b93      	ldr	r3, [pc, #588]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 15;
 8005bd8:	4b91      	ldr	r3, [pc, #580]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005bda:	220f      	movs	r2, #15
 8005bdc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005bde:	4b91      	ldr	r3, [pc, #580]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005be0:	22ff      	movs	r2, #255	; 0xff
 8005be2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005be4:	4b8f      	ldr	r3, [pc, #572]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005be6:	22ff      	movs	r2, #255	; 0xff
 8005be8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005bea:	4b8e      	ldr	r3, [pc, #568]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005bf0:	4b8c      	ldr	r3, [pc, #560]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005bf6:	4b8c      	ldr	r3, [pc, #560]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005bf8:	220a      	movs	r2, #10
 8005bfa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8005bfc:	4b8a      	ldr	r3, [pc, #552]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005bfe:	222a      	movs	r2, #42	; 0x2a
 8005c00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005c02:	4b89      	ldr	r3, [pc, #548]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005c08:	4b87      	ldr	r3, [pc, #540]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005c0e:	2100      	movs	r1, #0
 8005c10:	2000      	movs	r0, #0
 8005c12:	f005 ff8f 	bl	800bb34 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005c16:	4b82      	ldr	r3, [pc, #520]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	061a      	lsls	r2, r3, #24
 8005c1c:	4b80      	ldr	r3, [pc, #512]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	431a      	orrs	r2, r3
 8005c24:	4b7e      	ldr	r3, [pc, #504]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c26:	789b      	ldrb	r3, [r3, #2]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	4a7c      	ldr	r2, [pc, #496]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c2e:	78d2      	ldrb	r2, [r2, #3]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	061a      	lsls	r2, r3, #24
 8005c34:	4b7a      	ldr	r3, [pc, #488]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	0619      	lsls	r1, r3, #24
 8005c3a:	4b79      	ldr	r3, [pc, #484]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	4319      	orrs	r1, r3
 8005c42:	4b77      	ldr	r3, [pc, #476]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c44:	789b      	ldrb	r3, [r3, #2]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	4975      	ldr	r1, [pc, #468]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c4c:	78c9      	ldrb	r1, [r1, #3]
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c56:	431a      	orrs	r2, r3
 8005c58:	4b71      	ldr	r3, [pc, #452]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	0619      	lsls	r1, r3, #24
 8005c5e:	4b70      	ldr	r3, [pc, #448]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	4319      	orrs	r1, r3
 8005c66:	4b6e      	ldr	r3, [pc, #440]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c68:	789b      	ldrb	r3, [r3, #2]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	496c      	ldr	r1, [pc, #432]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c70:	78c9      	ldrb	r1, [r1, #3]
 8005c72:	430b      	orrs	r3, r1
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	4b68      	ldr	r3, [pc, #416]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	0619      	lsls	r1, r3, #24
 8005c82:	4b67      	ldr	r3, [pc, #412]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	4319      	orrs	r1, r3
 8005c8a:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c8c:	789b      	ldrb	r3, [r3, #2]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	430b      	orrs	r3, r1
 8005c92:	4963      	ldr	r1, [pc, #396]	; (8005e20 <MX_LWIP_Init+0x260>)
 8005c94:	78c9      	ldrb	r1, [r1, #3]
 8005c96:	430b      	orrs	r3, r1
 8005c98:	0e1b      	lsrs	r3, r3, #24
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	4a63      	ldr	r2, [pc, #396]	; (8005e2c <MX_LWIP_Init+0x26c>)
 8005c9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005ca0:	4b60      	ldr	r3, [pc, #384]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	061a      	lsls	r2, r3, #24
 8005ca6:	4b5f      	ldr	r3, [pc, #380]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	431a      	orrs	r2, r3
 8005cae:	4b5d      	ldr	r3, [pc, #372]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cb0:	789b      	ldrb	r3, [r3, #2]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	4a5b      	ldr	r2, [pc, #364]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cb8:	78d2      	ldrb	r2, [r2, #3]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	061a      	lsls	r2, r3, #24
 8005cbe:	4b59      	ldr	r3, [pc, #356]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	0619      	lsls	r1, r3, #24
 8005cc4:	4b57      	ldr	r3, [pc, #348]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	041b      	lsls	r3, r3, #16
 8005cca:	4319      	orrs	r1, r3
 8005ccc:	4b55      	ldr	r3, [pc, #340]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cce:	789b      	ldrb	r3, [r3, #2]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	4953      	ldr	r1, [pc, #332]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cd6:	78c9      	ldrb	r1, [r1, #3]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	4b50      	ldr	r3, [pc, #320]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	0619      	lsls	r1, r3, #24
 8005ce8:	4b4e      	ldr	r3, [pc, #312]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	4319      	orrs	r1, r3
 8005cf0:	4b4c      	ldr	r3, [pc, #304]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cf2:	789b      	ldrb	r3, [r3, #2]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	494a      	ldr	r1, [pc, #296]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005cfa:	78c9      	ldrb	r1, [r1, #3]
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d04:	431a      	orrs	r2, r3
 8005d06:	4b47      	ldr	r3, [pc, #284]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	0619      	lsls	r1, r3, #24
 8005d0c:	4b45      	ldr	r3, [pc, #276]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	4319      	orrs	r1, r3
 8005d14:	4b43      	ldr	r3, [pc, #268]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005d16:	789b      	ldrb	r3, [r3, #2]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	4941      	ldr	r1, [pc, #260]	; (8005e24 <MX_LWIP_Init+0x264>)
 8005d1e:	78c9      	ldrb	r1, [r1, #3]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	0e1b      	lsrs	r3, r3, #24
 8005d24:	4313      	orrs	r3, r2
 8005d26:	4a42      	ldr	r2, [pc, #264]	; (8005e30 <MX_LWIP_Init+0x270>)
 8005d28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005d2a:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	061a      	lsls	r2, r3, #24
 8005d30:	4b3d      	ldr	r3, [pc, #244]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	431a      	orrs	r2, r3
 8005d38:	4b3b      	ldr	r3, [pc, #236]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d3a:	789b      	ldrb	r3, [r3, #2]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	4a39      	ldr	r2, [pc, #228]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d42:	78d2      	ldrb	r2, [r2, #3]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	061a      	lsls	r2, r3, #24
 8005d48:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	0619      	lsls	r1, r3, #24
 8005d4e:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	4319      	orrs	r1, r3
 8005d56:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d58:	789b      	ldrb	r3, [r3, #2]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	4932      	ldr	r1, [pc, #200]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d60:	78c9      	ldrb	r1, [r1, #3]
 8005d62:	430b      	orrs	r3, r1
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	0619      	lsls	r1, r3, #24
 8005d72:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	4319      	orrs	r1, r3
 8005d7a:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d7c:	789b      	ldrb	r3, [r3, #2]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	430b      	orrs	r3, r1
 8005d82:	4929      	ldr	r1, [pc, #164]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d84:	78c9      	ldrb	r1, [r1, #3]
 8005d86:	430b      	orrs	r3, r1
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	0619      	lsls	r1, r3, #24
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	4319      	orrs	r1, r3
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005da0:	789b      	ldrb	r3, [r3, #2]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	430b      	orrs	r3, r1
 8005da6:	4920      	ldr	r1, [pc, #128]	; (8005e28 <MX_LWIP_Init+0x268>)
 8005da8:	78c9      	ldrb	r1, [r1, #3]
 8005daa:	430b      	orrs	r3, r1
 8005dac:	0e1b      	lsrs	r3, r3, #24
 8005dae:	4313      	orrs	r3, r2
 8005db0:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <MX_LWIP_Init+0x274>)
 8005db2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005db4:	4b20      	ldr	r3, [pc, #128]	; (8005e38 <MX_LWIP_Init+0x278>)
 8005db6:	9302      	str	r3, [sp, #8]
 8005db8:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <MX_LWIP_Init+0x27c>)
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <MX_LWIP_Init+0x274>)
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <MX_LWIP_Init+0x270>)
 8005dc4:	4919      	ldr	r1, [pc, #100]	; (8005e2c <MX_LWIP_Init+0x26c>)
 8005dc6:	481e      	ldr	r0, [pc, #120]	; (8005e40 <MX_LWIP_Init+0x280>)
 8005dc8:	f006 fc8e 	bl	800c6e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005dcc:	481c      	ldr	r0, [pc, #112]	; (8005e40 <MX_LWIP_Init+0x280>)
 8005dce:	f006 fe3d 	bl	800ca4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <MX_LWIP_Init+0x280>)
 8005dd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005de4:	4816      	ldr	r0, [pc, #88]	; (8005e40 <MX_LWIP_Init+0x280>)
 8005de6:	f006 fe41 	bl	800ca6c <netif_set_up>
 8005dea:	e002      	b.n	8005df2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005dec:	4814      	ldr	r0, [pc, #80]	; (8005e40 <MX_LWIP_Init+0x280>)
 8005dee:	f006 fea9 	bl	800cb44 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005df2:	4914      	ldr	r1, [pc, #80]	; (8005e44 <MX_LWIP_Init+0x284>)
 8005df4:	4812      	ldr	r0, [pc, #72]	; (8005e40 <MX_LWIP_Init+0x280>)
 8005df6:	f006 ff3b 	bl	800cc70 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <MX_LWIP_Init+0x288>)
 8005dfc:	1d3c      	adds	r4, r7, #4
 8005dfe:	461d      	mov	r5, r3
 8005e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005e0c:	1d3b      	adds	r3, r7, #4
 8005e0e:	490c      	ldr	r1, [pc, #48]	; (8005e40 <MX_LWIP_Init+0x280>)
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fd47 	bl	80068a4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005e16:	bf00      	nop
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200018f4 	.word	0x200018f4
 8005e24:	200018f8 	.word	0x200018f8
 8005e28:	200018fc 	.word	0x200018fc
 8005e2c:	200018e8 	.word	0x200018e8
 8005e30:	200018ec 	.word	0x200018ec
 8005e34:	200018f0 	.word	0x200018f0
 8005e38:	0800ba45 	.word	0x0800ba45
 8005e3c:	08006345 	.word	0x08006345
 8005e40:	200018b4 	.word	0x200018b4
 8005e44:	08005e4d 	.word	0x08005e4d
 8005e48:	0801a0c0 	.word	0x0801a0c0

08005e4c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005e72:	2320      	movs	r3, #32
 8005e74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e76:	f3bf 8f4f 	dsb	sy
}
 8005e7a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005e7c:	e00b      	b.n	8005e96 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005e7e:	4a0d      	ldr	r2, [pc, #52]	; (8005eb4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dcf0      	bgt.n	8005e7e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e9c:	f3bf 8f4f 	dsb	sy
}
 8005ea0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ea2:	f3bf 8f6f 	isb	sy
}
 8005ea6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <HAL_ETH_RxCpltCallback+0x1c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fe69 	bl	8006b9c <osSemaphoreRelease>
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	2000628c 	.word	0x2000628c

08005ed8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <HAL_ETH_TxCpltCallback+0x1c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fe59 	bl	8006b9c <osSemaphoreRelease>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20006290 	.word	0x20006290

08005ef8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fc fb5b 	bl	80025bc <HAL_ETH_GetDMAError>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d104      	bne.n	8005f1a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005f10:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <HAL_ETH_ErrorCallback+0x2c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fe41 	bl	8006b9c <osSemaphoreRelease>
  }
}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	2000628c 	.word	0x2000628c

08005f28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005f28:	b5b0      	push	{r4, r5, r7, lr}
 8005f2a:	b0a8      	sub	sp, #160	; 0xa0
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8005f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f46:	2264      	movs	r2, #100	; 0x64
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f012 fef8 	bl	8018d40 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005f50:	4b85      	ldr	r3, [pc, #532]	; (8006168 <low_level_init+0x240>)
 8005f52:	4a86      	ldr	r2, [pc, #536]	; (800616c <low_level_init+0x244>)
 8005f54:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005f56:	2300      	movs	r3, #0
 8005f58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8005f62:	23e1      	movs	r3, #225	; 0xe1
 8005f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005f7a:	4a7b      	ldr	r2, [pc, #492]	; (8006168 <low_level_init+0x240>)
 8005f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f80:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005f82:	4b79      	ldr	r3, [pc, #484]	; (8006168 <low_level_init+0x240>)
 8005f84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005f88:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005f8a:	4b77      	ldr	r3, [pc, #476]	; (8006168 <low_level_init+0x240>)
 8005f8c:	4a78      	ldr	r2, [pc, #480]	; (8006170 <low_level_init+0x248>)
 8005f8e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005f90:	4b75      	ldr	r3, [pc, #468]	; (8006168 <low_level_init+0x240>)
 8005f92:	4a78      	ldr	r2, [pc, #480]	; (8006174 <low_level_init+0x24c>)
 8005f94:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005f96:	4b74      	ldr	r3, [pc, #464]	; (8006168 <low_level_init+0x240>)
 8005f98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005f9c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005f9e:	4872      	ldr	r0, [pc, #456]	; (8006168 <low_level_init+0x240>)
 8005fa0:	f7fb fcce 	bl	8001940 <HAL_ETH_Init>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005faa:	2238      	movs	r2, #56	; 0x38
 8005fac:	2100      	movs	r1, #0
 8005fae:	4872      	ldr	r0, [pc, #456]	; (8006178 <low_level_init+0x250>)
 8005fb0:	f012 fec6 	bl	8018d40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005fb4:	4b70      	ldr	r3, [pc, #448]	; (8006178 <low_level_init+0x250>)
 8005fb6:	2221      	movs	r2, #33	; 0x21
 8005fb8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005fba:	4b6f      	ldr	r3, [pc, #444]	; (8006178 <low_level_init+0x250>)
 8005fbc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005fc0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	; (8006178 <low_level_init+0x250>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005fc8:	486c      	ldr	r0, [pc, #432]	; (800617c <low_level_init+0x254>)
 8005fca:	f006 fa47 	bl	800c45c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2206      	movs	r2, #6
 8005fd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005fd6:	4b64      	ldr	r3, [pc, #400]	; (8006168 <low_level_init+0x240>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005fe2:	4b61      	ldr	r3, [pc, #388]	; (8006168 <low_level_init+0x240>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	785a      	ldrb	r2, [r3, #1]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005fee:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <low_level_init+0x240>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	789a      	ldrb	r2, [r3, #2]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ffa:	4b5b      	ldr	r3, [pc, #364]	; (8006168 <low_level_init+0x240>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	78da      	ldrb	r2, [r3, #3]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006006:	4b58      	ldr	r3, [pc, #352]	; (8006168 <low_level_init+0x240>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	791a      	ldrb	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006012:	4b55      	ldr	r3, [pc, #340]	; (8006168 <low_level_init+0x240>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	795a      	ldrb	r2, [r3, #5]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006024:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800602c:	f043 030a 	orr.w	r3, r3, #10
 8006030:	b2da      	uxtb	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8006038:	2203      	movs	r2, #3
 800603a:	2100      	movs	r1, #0
 800603c:	2001      	movs	r0, #1
 800603e:	f001 f89d 	bl	800717c <xQueueGenericCreate>
 8006042:	4603      	mov	r3, r0
 8006044:	4a4e      	ldr	r2, [pc, #312]	; (8006180 <low_level_init+0x258>)
 8006046:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8006048:	2203      	movs	r2, #3
 800604a:	2100      	movs	r1, #0
 800604c:	2001      	movs	r0, #1
 800604e:	f001 f895 	bl	800717c <xQueueGenericCreate>
 8006052:	4603      	mov	r3, r0
 8006054:	4a4b      	ldr	r2, [pc, #300]	; (8006184 <low_level_init+0x25c>)
 8006056:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006058:	4b4b      	ldr	r3, [pc, #300]	; (8006188 <low_level_init+0x260>)
 800605a:	f107 0408 	add.w	r4, r7, #8
 800605e:	461d      	mov	r5, r3
 8006060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006064:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006068:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800606c:	f107 0308 	add.w	r3, r7, #8
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fc16 	bl	80068a4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006078:	4944      	ldr	r1, [pc, #272]	; (800618c <low_level_init+0x264>)
 800607a:	4845      	ldr	r0, [pc, #276]	; (8006190 <low_level_init+0x268>)
 800607c:	f7fb f94f 	bl	800131e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006080:	4843      	ldr	r0, [pc, #268]	; (8006190 <low_level_init+0x268>)
 8006082:	f7fb f97e 	bl	8001382 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006086:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800608a:	2b00      	cmp	r3, #0
 800608c:	d165      	bne.n	800615a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800608e:	4840      	ldr	r0, [pc, #256]	; (8006190 <low_level_init+0x268>)
 8006090:	f7fb fa1f 	bl	80014d2 <LAN8742_GetLinkState>
 8006094:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006098:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800609c:	2b01      	cmp	r3, #1
 800609e:	dc06      	bgt.n	80060ae <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f006 fdb5 	bl	800cc10 <netif_set_link_down>
      netif_set_down(netif);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f006 fd4c 	bl	800cb44 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80060ac:	e057      	b.n	800615e <low_level_init+0x236>
      switch (PHYLinkState)
 80060ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060b2:	3b02      	subs	r3, #2
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d82b      	bhi.n	8006110 <low_level_init+0x1e8>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <low_level_init+0x198>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060e3 	.word	0x080060e3
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	08006103 	.word	0x08006103
        duplex = ETH_FULLDUPLEX_MODE;
 80060d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80060d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80060e0:	e01f      	b.n	8006122 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80060e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80060f0:	e017      	b.n	8006122 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80060f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80060fa:	2300      	movs	r3, #0
 80060fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006100:	e00f      	b.n	8006122 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006102:	2300      	movs	r3, #0
 8006104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800610e:	e008      	b.n	8006122 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800611c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006120:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006126:	4619      	mov	r1, r3
 8006128:	480f      	ldr	r0, [pc, #60]	; (8006168 <low_level_init+0x240>)
 800612a:	f7fc f8ed 	bl	8002308 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800612e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006132:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8006134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006138:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800613a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800613e:	4619      	mov	r1, r3
 8006140:	4809      	ldr	r0, [pc, #36]	; (8006168 <low_level_init+0x240>)
 8006142:	f7fc f9cb 	bl	80024dc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006146:	4808      	ldr	r0, [pc, #32]	; (8006168 <low_level_init+0x240>)
 8006148:	f7fb fc76 	bl	8001a38 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f006 fc8d 	bl	800ca6c <netif_set_up>
    netif_set_link_up(netif);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f006 fd28 	bl	800cba8 <netif_set_link_up>
}
 8006158:	e001      	b.n	800615e <low_level_init+0x236>
    Error_Handler();
 800615a:	f7fa fe2f 	bl	8000dbc <Error_Handler>
}
 800615e:	bf00      	nop
 8006160:	37a0      	adds	r7, #160	; 0xa0
 8006162:	46bd      	mov	sp, r7
 8006164:	bdb0      	pop	{r4, r5, r7, pc}
 8006166:	bf00      	nop
 8006168:	20006294 	.word	0x20006294
 800616c:	40028000 	.word	0x40028000
 8006170:	20000134 	.word	0x20000134
 8006174:	20000094 	.word	0x20000094
 8006178:	20006344 	.word	0x20006344
 800617c:	0801d584 	.word	0x0801d584
 8006180:	2000628c 	.word	0x2000628c
 8006184:	20006290 	.word	0x20006290
 8006188:	0801a0e4 	.word	0x0801a0e4
 800618c:	2000000c 	.word	0x2000000c
 8006190:	2000637c 	.word	0x2000637c

08006194 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b092      	sub	sp, #72	; 0x48
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80061ac:	f107 030c 	add.w	r3, r7, #12
 80061b0:	2230      	movs	r2, #48	; 0x30
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f012 fdc3 	bl	8018d40 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	2230      	movs	r2, #48	; 0x30
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f012 fdbc 	bl	8018d40 <memset>

  for(q = p; q != NULL; q = q->next)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	643b      	str	r3, [r7, #64]	; 0x40
 80061cc:	e045      	b.n	800625a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80061ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d902      	bls.n	80061da <low_level_output+0x46>
      return ERR_IF;
 80061d4:	f06f 030b 	mvn.w	r3, #11
 80061d8:	e065      	b.n	80062a6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80061da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e0:	4613      	mov	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	3348      	adds	r3, #72	; 0x48
 80061ea:	443b      	add	r3, r7
 80061ec:	3b3c      	subs	r3, #60	; 0x3c
 80061ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80061f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f2:	895b      	ldrh	r3, [r3, #10]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	3348      	adds	r3, #72	; 0x48
 8006202:	443b      	add	r3, r7
 8006204:	3b38      	subs	r3, #56	; 0x38
 8006206:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620a:	2b00      	cmp	r3, #0
 800620c:	d011      	beq.n	8006232 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800620e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006210:	1e5a      	subs	r2, r3, #1
 8006212:	f107 000c 	add.w	r0, r7, #12
 8006216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006218:	460b      	mov	r3, r1
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	440b      	add	r3, r1
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	18c1      	adds	r1, r0, r3
 8006222:	4613      	mov	r3, r2
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	3348      	adds	r3, #72	; 0x48
 800622c:	443b      	add	r3, r7
 800622e:	3b34      	subs	r3, #52	; 0x34
 8006230:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800623a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800623c:	4613      	mov	r3, r2
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	3348      	adds	r3, #72	; 0x48
 8006246:	443b      	add	r3, r7
 8006248:	3b34      	subs	r3, #52	; 0x34
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800624e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006250:	3301      	adds	r3, #1
 8006252:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	643b      	str	r3, [r7, #64]	; 0x40
 800625a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1b6      	bne.n	80061ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	891b      	ldrh	r3, [r3, #8]
 8006264:	461a      	mov	r2, r3
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <low_level_output+0x11c>)
 8006268:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800626a:	4a11      	ldr	r2, [pc, #68]	; (80062b0 <low_level_output+0x11c>)
 800626c:	f107 030c 	add.w	r3, r7, #12
 8006270:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006272:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <low_level_output+0x11c>)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006278:	6838      	ldr	r0, [r7, #0]
 800627a:	f007 f94d 	bl	800d518 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800627e:	490c      	ldr	r1, [pc, #48]	; (80062b0 <low_level_output+0x11c>)
 8006280:	480c      	ldr	r0, [pc, #48]	; (80062b4 <low_level_output+0x120>)
 8006282:	f7fb fce7 	bl	8001c54 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006286:	bf00      	nop
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <low_level_output+0x124>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fc35 	bl	8006b00 <osSemaphoreWait>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f5      	bne.n	8006288 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800629c:	4805      	ldr	r0, [pc, #20]	; (80062b4 <low_level_output+0x120>)
 800629e:	f7fb fe6d 	bl	8001f7c <HAL_ETH_ReleaseTxPacket>

  return errval;
 80062a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3748      	adds	r7, #72	; 0x48
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20006344 	.word	0x20006344
 80062b4:	20006294 	.word	0x20006294
 80062b8:	20006290 	.word	0x20006290

080062bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80062c8:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <low_level_input+0x2c>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d105      	bne.n	80062dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80062d0:	f107 030c 	add.w	r3, r7, #12
 80062d4:	4619      	mov	r1, r3
 80062d6:	4805      	ldr	r0, [pc, #20]	; (80062ec <low_level_input+0x30>)
 80062d8:	f7fb fd18 	bl	8001d0c <HAL_ETH_ReadData>
  }

  return p;
 80062dc:	68fb      	ldr	r3, [r7, #12]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20006288 	.word	0x20006288
 80062ec:	20006294 	.word	0x20006294

080062f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <ethernetif_input+0x50>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fbf9 	bl	8006b00 <osSemaphoreWait>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f5      	bne.n	8006300 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f7ff ffd1 	bl	80062bc <low_level_input>
 800631a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	4798      	blx	r3
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f007 f84a 	bl	800d3cc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1ea      	bne.n	8006314 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800633e:	e7df      	b.n	8006300 <ethernetif_input+0x10>
 8006340:	2000628c 	.word	0x2000628c

08006344 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <ethernetif_init+0x1c>
 8006352:	4b0e      	ldr	r3, [pc, #56]	; (800638c <ethernetif_init+0x48>)
 8006354:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006358:	490d      	ldr	r1, [pc, #52]	; (8006390 <ethernetif_init+0x4c>)
 800635a:	480e      	ldr	r0, [pc, #56]	; (8006394 <ethernetif_init+0x50>)
 800635c:	f012 fcf8 	bl	8018d50 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2273      	movs	r2, #115	; 0x73
 8006364:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2274      	movs	r2, #116	; 0x74
 800636c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a09      	ldr	r2, [pc, #36]	; (8006398 <ethernetif_init+0x54>)
 8006374:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a08      	ldr	r2, [pc, #32]	; (800639c <ethernetif_init+0x58>)
 800637a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff fdd3 	bl	8005f28 <low_level_init>

  return ERR_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	0801a100 	.word	0x0801a100
 8006390:	0801a11c 	.word	0x0801a11c
 8006394:	0801a12c 	.word	0x0801a12c
 8006398:	08014be1 	.word	0x08014be1
 800639c:	08006195 	.word	0x08006195

080063a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80063ac:	68f9      	ldr	r1, [r7, #12]
 80063ae:	4809      	ldr	r0, [pc, #36]	; (80063d4 <pbuf_free_custom+0x34>)
 80063b0:	f006 f944 	bl	800c63c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80063b4:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <pbuf_free_custom+0x38>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d107      	bne.n	80063cc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <pbuf_free_custom+0x38>)
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <pbuf_free_custom+0x3c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fbe8 	bl	8006b9c <osSemaphoreRelease>
  }
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	0801d584 	.word	0x0801d584
 80063d8:	20006288 	.word	0x20006288
 80063dc:	2000628c 	.word	0x2000628c

080063e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80063e4:	f7fb f91e 	bl	8001624 <HAL_GetTick>
 80063e8:	4603      	mov	r3, r0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	; 0x38
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	60da      	str	r2, [r3, #12]
 8006406:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a52      	ldr	r2, [pc, #328]	; (8006558 <HAL_ETH_MspInit+0x168>)
 800640e:	4293      	cmp	r3, r2
 8006410:	f040 809e 	bne.w	8006550 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006414:	4b51      	ldr	r3, [pc, #324]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	4a50      	ldr	r2, [pc, #320]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800641a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800641e:	6313      	str	r3, [r2, #48]	; 0x30
 8006420:	4b4e      	ldr	r3, [pc, #312]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	4b4b      	ldr	r3, [pc, #300]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	4a4a      	ldr	r2, [pc, #296]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006436:	6313      	str	r3, [r2, #48]	; 0x30
 8006438:	4b48      	ldr	r3, [pc, #288]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4b45      	ldr	r3, [pc, #276]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	4a44      	ldr	r2, [pc, #272]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800644a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800644e:	6313      	str	r3, [r2, #48]	; 0x30
 8006450:	4b42      	ldr	r3, [pc, #264]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800645c:	4b3f      	ldr	r3, [pc, #252]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	4a3e      	ldr	r2, [pc, #248]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006462:	f043 0304 	orr.w	r3, r3, #4
 8006466:	6313      	str	r3, [r2, #48]	; 0x30
 8006468:	4b3c      	ldr	r3, [pc, #240]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006474:	4b39      	ldr	r3, [pc, #228]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	4a38      	ldr	r2, [pc, #224]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6313      	str	r3, [r2, #48]	; 0x30
 8006480:	4b36      	ldr	r3, [pc, #216]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800648c:	4b33      	ldr	r3, [pc, #204]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	4a32      	ldr	r2, [pc, #200]	; (800655c <HAL_ETH_MspInit+0x16c>)
 8006492:	f043 0302 	orr.w	r3, r3, #2
 8006496:	6313      	str	r3, [r2, #48]	; 0x30
 8006498:	4b30      	ldr	r3, [pc, #192]	; (800655c <HAL_ETH_MspInit+0x16c>)
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80064a4:	4b2d      	ldr	r3, [pc, #180]	; (800655c <HAL_ETH_MspInit+0x16c>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	4a2c      	ldr	r2, [pc, #176]	; (800655c <HAL_ETH_MspInit+0x16c>)
 80064aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ae:	6313      	str	r3, [r2, #48]	; 0x30
 80064b0:	4b2a      	ldr	r3, [pc, #168]	; (800655c <HAL_ETH_MspInit+0x16c>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80064bc:	2332      	movs	r3, #50	; 0x32
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c0:	2302      	movs	r3, #2
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064c8:	2303      	movs	r3, #3
 80064ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064cc:	230b      	movs	r3, #11
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d4:	4619      	mov	r1, r3
 80064d6:	4822      	ldr	r0, [pc, #136]	; (8006560 <HAL_ETH_MspInit+0x170>)
 80064d8:	f7fc fc80 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80064dc:	2386      	movs	r3, #134	; 0x86
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e0:	2302      	movs	r3, #2
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e8:	2303      	movs	r3, #3
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064ec:	230b      	movs	r3, #11
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f4:	4619      	mov	r1, r3
 80064f6:	481b      	ldr	r0, [pc, #108]	; (8006564 <HAL_ETH_MspInit+0x174>)
 80064f8:	f7fc fc70 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80064fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006502:	2302      	movs	r3, #2
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006506:	2300      	movs	r3, #0
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650a:	2303      	movs	r3, #3
 800650c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800650e:	230b      	movs	r3, #11
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006516:	4619      	mov	r1, r3
 8006518:	4813      	ldr	r0, [pc, #76]	; (8006568 <HAL_ETH_MspInit+0x178>)
 800651a:	f7fc fc5f 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800651e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006524:	2302      	movs	r3, #2
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006528:	2300      	movs	r3, #0
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800652c:	2303      	movs	r3, #3
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006530:	230b      	movs	r3, #11
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006538:	4619      	mov	r1, r3
 800653a:	480c      	ldr	r0, [pc, #48]	; (800656c <HAL_ETH_MspInit+0x17c>)
 800653c:	f7fc fc4e 	bl	8002ddc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006540:	2200      	movs	r2, #0
 8006542:	2105      	movs	r1, #5
 8006544:	203d      	movs	r0, #61	; 0x3d
 8006546:	f7fb f955 	bl	80017f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800654a:	203d      	movs	r0, #61	; 0x3d
 800654c:	f7fb f96e 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006550:	bf00      	nop
 8006552:	3738      	adds	r7, #56	; 0x38
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40028000 	.word	0x40028000
 800655c:	40023800 	.word	0x40023800
 8006560:	40020800 	.word	0x40020800
 8006564:	40020000 	.word	0x40020000
 8006568:	40020400 	.word	0x40020400
 800656c:	40021800 	.word	0x40021800

08006570 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006574:	4802      	ldr	r0, [pc, #8]	; (8006580 <ETH_PHY_IO_Init+0x10>)
 8006576:	f7fb ffcb 	bl	8002510 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20006294 	.word	0x20006294

08006584 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  return 0;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	68f9      	ldr	r1, [r7, #12]
 80065a6:	4807      	ldr	r0, [pc, #28]	; (80065c4 <ETH_PHY_IO_ReadReg+0x30>)
 80065a8:	f7fb fe1a 	bl	80021e0 <HAL_ETH_ReadPHYRegister>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065b6:	e000      	b.n	80065ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20006294 	.word	0x20006294

080065c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	4807      	ldr	r0, [pc, #28]	; (80065f8 <ETH_PHY_IO_WriteReg+0x30>)
 80065dc:	f7fb fe4b 	bl	8002276 <HAL_ETH_WritePHYRegister>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ea:	e000      	b.n	80065ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20006294 	.word	0x20006294

080065fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006600:	f7fb f810 	bl	8001624 <HAL_GetTick>
 8006604:	4603      	mov	r3, r0
}
 8006606:	4618      	mov	r0, r3
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b0a0      	sub	sp, #128	; 0x80
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006614:	f107 0308 	add.w	r3, r7, #8
 8006618:	2264      	movs	r2, #100	; 0x64
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f012 fb8f 	bl	8018d40 <memset>
  int32_t PHYLinkState = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800662a:	2300      	movs	r3, #0
 800662c:	67bb      	str	r3, [r7, #120]	; 0x78
 800662e:	2300      	movs	r3, #0
 8006630:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006636:	483a      	ldr	r0, [pc, #232]	; (8006720 <ethernet_link_thread+0x114>)
 8006638:	f7fa ff4b 	bl	80014d2 <LAN8742_GetLinkState>
 800663c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800663e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006640:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006644:	089b      	lsrs	r3, r3, #2
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <ethernet_link_thread+0x5e>
 8006650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006652:	2b01      	cmp	r3, #1
 8006654:	dc09      	bgt.n	800666a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006656:	4833      	ldr	r0, [pc, #204]	; (8006724 <ethernet_link_thread+0x118>)
 8006658:	f7fb fa7c 	bl	8001b54 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800665c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800665e:	f006 fa71 	bl	800cb44 <netif_set_down>
    netif_set_link_down(netif);
 8006662:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006664:	f006 fad4 	bl	800cc10 <netif_set_link_down>
 8006668:	e055      	b.n	8006716 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800666a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d14e      	bne.n	8006716 <ethernet_link_thread+0x10a>
 8006678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800667a:	2b01      	cmp	r3, #1
 800667c:	dd4b      	ble.n	8006716 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800667e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006680:	3b02      	subs	r3, #2
 8006682:	2b03      	cmp	r3, #3
 8006684:	d82a      	bhi.n	80066dc <ethernet_link_thread+0xd0>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <ethernet_link_thread+0x80>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066af 	.word	0x080066af
 8006694:	080066bf 	.word	0x080066bf
 8006698:	080066cf 	.word	0x080066cf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800669c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80066a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066a8:	2301      	movs	r3, #1
 80066aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066ac:	e017      	b.n	80066de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80066b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066b8:	2301      	movs	r3, #1
 80066ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066bc:	e00f      	b.n	80066de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80066be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066c2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80066c4:	2300      	movs	r3, #0
 80066c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066c8:	2301      	movs	r3, #1
 80066ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066cc:	e007      	b.n	80066de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80066d2:	2300      	movs	r3, #0
 80066d4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80066d6:	2301      	movs	r3, #1
 80066d8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80066da:	e000      	b.n	80066de <ethernet_link_thread+0xd2>
    default:
      break;
 80066dc:	bf00      	nop
    }

    if(linkchanged)
 80066de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d018      	beq.n	8006716 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80066e4:	f107 0308 	add.w	r3, r7, #8
 80066e8:	4619      	mov	r1, r3
 80066ea:	480e      	ldr	r0, [pc, #56]	; (8006724 <ethernet_link_thread+0x118>)
 80066ec:	f7fb fe0c 	bl	8002308 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80066f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80066f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80066f8:	f107 0308 	add.w	r3, r7, #8
 80066fc:	4619      	mov	r1, r3
 80066fe:	4809      	ldr	r0, [pc, #36]	; (8006724 <ethernet_link_thread+0x118>)
 8006700:	f7fb feec 	bl	80024dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006704:	4807      	ldr	r0, [pc, #28]	; (8006724 <ethernet_link_thread+0x118>)
 8006706:	f7fb f997 	bl	8001a38 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800670a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800670c:	f006 f9ae 	bl	800ca6c <netif_set_up>
      netif_set_link_up(netif);
 8006710:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006712:	f006 fa49 	bl	800cba8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006716:	2064      	movs	r0, #100	; 0x64
 8006718:	f000 f910 	bl	800693c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800671c:	e78b      	b.n	8006636 <ethernet_link_thread+0x2a>
 800671e:	bf00      	nop
 8006720:	2000637c 	.word	0x2000637c
 8006724:	20006294 	.word	0x20006294

08006728 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af02      	add	r7, sp, #8
 800672e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006730:	4812      	ldr	r0, [pc, #72]	; (800677c <HAL_ETH_RxAllocateCallback+0x54>)
 8006732:	f005 ff0f 	bl	800c554 <memp_malloc_pool>
 8006736:	60f8      	str	r0, [r7, #12]
  if (p)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d014      	beq.n	8006768 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f103 0220 	add.w	r2, r3, #32
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a0d      	ldr	r2, [pc, #52]	; (8006780 <HAL_ETH_RxAllocateCallback+0x58>)
 800674c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006756:	9201      	str	r2, [sp, #4]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2241      	movs	r2, #65	; 0x41
 800675e:	2100      	movs	r1, #0
 8006760:	2000      	movs	r0, #0
 8006762:	f006 fc79 	bl	800d058 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006766:	e005      	b.n	8006774 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_ETH_RxAllocateCallback+0x5c>)
 800676a:	2201      	movs	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	0801d584 	.word	0x0801d584
 8006780:	080063a1 	.word	0x080063a1
 8006784:	20006288 	.word	0x20006288

08006788 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3b20      	subs	r3, #32
 80067a6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	2200      	movs	r2, #0
 80067b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	e003      	b.n	80067d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	e009      	b.n	80067f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	891a      	ldrh	r2, [r3, #8]
 80067e4:	887b      	ldrh	r3, [r7, #2]
 80067e6:	4413      	add	r3, r2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f2      	bne.n	80067e0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80067fa:	887b      	ldrh	r3, [r7, #2]
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fb2e 	bl	8005e60 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006804:	bf00      	nop
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f006 fdd9 	bl	800d3cc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	4603      	mov	r3, r0
 800682a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006834:	2b84      	cmp	r3, #132	; 0x84
 8006836:	d005      	beq.n	8006844 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006838:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	3303      	adds	r3, #3
 8006842:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006844:	68fb      	ldr	r3, [r7, #12]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006858:	f3ef 8305 	mrs	r3, IPSR
 800685c:	607b      	str	r3, [r7, #4]
  return(result);
 800685e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006860:	2b00      	cmp	r3, #0
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800687a:	f001 fd73 	bl	8008364 <vTaskStartScheduler>
  
  return osOK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd80      	pop	{r7, pc}

08006884 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006888:	f7ff ffe3 	bl	8006852 <inHandlerMode>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006892:	f001 fe87 	bl	80085a4 <xTaskGetTickCountFromISR>
 8006896:	4603      	mov	r3, r0
 8006898:	e002      	b.n	80068a0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800689a:	f001 fe73 	bl	8008584 <xTaskGetTickCount>
 800689e:	4603      	mov	r3, r0
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068a6:	b089      	sub	sp, #36	; 0x24
 80068a8:	af04      	add	r7, sp, #16
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d020      	beq.n	80068f8 <osThreadCreate+0x54>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01c      	beq.n	80068f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685c      	ldr	r4, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681d      	ldr	r5, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691e      	ldr	r6, [r3, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff ffa6 	bl	8006822 <makeFreeRtosPriority>
 80068d6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068e0:	9202      	str	r2, [sp, #8]
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	9100      	str	r1, [sp, #0]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	4632      	mov	r2, r6
 80068ea:	4629      	mov	r1, r5
 80068ec:	4620      	mov	r0, r4
 80068ee:	f001 fb67 	bl	8007fc0 <xTaskCreateStatic>
 80068f2:	4603      	mov	r3, r0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e01c      	b.n	8006932 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685c      	ldr	r4, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006904:	b29e      	uxth	r6, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff ff88 	bl	8006822 <makeFreeRtosPriority>
 8006912:	4602      	mov	r2, r0
 8006914:	f107 030c 	add.w	r3, r7, #12
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	9200      	str	r2, [sp, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	4632      	mov	r2, r6
 8006920:	4629      	mov	r1, r5
 8006922:	4620      	mov	r0, r4
 8006924:	f001 fbaf 	bl	8008086 <xTaskCreate>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006932:	68fb      	ldr	r3, [r7, #12]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800693c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <osDelay+0x16>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	e000      	b.n	8006954 <osDelay+0x18>
 8006952:	2301      	movs	r3, #1
 8006954:	4618      	mov	r0, r3
 8006956:	f001 fccf 	bl	80082f8 <vTaskDelay>
  
  return osOK;
 800695a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4619      	mov	r1, r3
 800697a:	2001      	movs	r0, #1
 800697c:	f000 fc91 	bl	80072a2 <xQueueCreateMutexStatic>
 8006980:	4603      	mov	r3, r0
 8006982:	e003      	b.n	800698c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006984:	2001      	movs	r0, #1
 8006986:	f000 fc74 	bl	8007272 <xQueueCreateMutex>
 800698a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <osMutexWait+0x18>
    return osErrorParameter;
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	e03a      	b.n	8006a22 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069b6:	d103      	bne.n	80069c0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e009      	b.n	80069d4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d006      	beq.n	80069d4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <osMutexWait+0x40>
      ticks = 1;
 80069d0:	2301      	movs	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80069d4:	f7ff ff3d 	bl	8006852 <inHandlerMode>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d017      	beq.n	8006a0e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	461a      	mov	r2, r3
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f8ac 	bl	8007b44 <xQueueReceiveFromISR>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d001      	beq.n	80069f6 <osMutexWait+0x62>
      return osErrorOS;
 80069f2:	23ff      	movs	r3, #255	; 0xff
 80069f4:	e015      	b.n	8006a22 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d011      	beq.n	8006a20 <osMutexWait+0x8c>
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <osMutexWait+0x98>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	e008      	b.n	8006a20 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 ff83 	bl	800791c <xQueueSemaphoreTake>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d001      	beq.n	8006a20 <osMutexWait+0x8c>
    return osErrorOS;
 8006a1c:	23ff      	movs	r3, #255	; 0xff
 8006a1e:	e000      	b.n	8006a22 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	e000ed04 	.word	0xe000ed04

08006a30 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006a40:	f7ff ff07 	bl	8006852 <inHandlerMode>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d016      	beq.n	8006a78 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006a4a:	f107 0308 	add.w	r3, r7, #8
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fde7 	bl	8007624 <xQueueGiveFromISR>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d001      	beq.n	8006a60 <osMutexRelease+0x30>
      return osErrorOS;
 8006a5c:	23ff      	movs	r3, #255	; 0xff
 8006a5e:	e017      	b.n	8006a90 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d013      	beq.n	8006a8e <osMutexRelease+0x5e>
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <osMutexRelease+0x68>)
 8006a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	e00a      	b.n	8006a8e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fc2a 	bl	80072d8 <xQueueGenericSend>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d001      	beq.n	8006a8e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006a8a:	23ff      	movs	r3, #255	; 0xff
 8006a8c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00f      	beq.n	8006ace <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d10a      	bne.n	8006aca <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2203      	movs	r2, #3
 8006aba:	9200      	str	r2, [sp, #0]
 8006abc:	2200      	movs	r2, #0
 8006abe:	2100      	movs	r1, #0
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	f000 fad9 	bl	8007078 <xQueueGenericCreateStatic>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	e016      	b.n	8006af8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e014      	b.n	8006af8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d110      	bne.n	8006af6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f000 fb4f 	bl	800717c <xQueueGenericCreate>
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <osSemaphoreCreate+0x56>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2100      	movs	r1, #0
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fbf3 	bl	80072d8 <xQueueGenericSend>
      return sema;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	e000      	b.n	8006af8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006af6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	e03a      	b.n	8006b8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b22:	d103      	bne.n	8006b2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e009      	b.n	8006b40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <osSemaphoreWait+0x40>
      ticks = 1;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006b40:	f7ff fe87 	bl	8006852 <inHandlerMode>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d017      	beq.n	8006b7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006b4a:	f107 0308 	add.w	r3, r7, #8
 8006b4e:	461a      	mov	r2, r3
 8006b50:	2100      	movs	r1, #0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fff6 	bl	8007b44 <xQueueReceiveFromISR>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d001      	beq.n	8006b62 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006b5e:	23ff      	movs	r3, #255	; 0xff
 8006b60:	e015      	b.n	8006b8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <osSemaphoreWait+0x8c>
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <osSemaphoreWait+0x98>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	e008      	b.n	8006b8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fecd 	bl	800791c <xQueueSemaphoreTake>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006b88:	23ff      	movs	r3, #255	; 0xff
 8006b8a:	e000      	b.n	8006b8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006bac:	f7ff fe51 	bl	8006852 <inHandlerMode>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d016      	beq.n	8006be4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006bb6:	f107 0308 	add.w	r3, r7, #8
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fd31 	bl	8007624 <xQueueGiveFromISR>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d001      	beq.n	8006bcc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006bc8:	23ff      	movs	r3, #255	; 0xff
 8006bca:	e017      	b.n	8006bfc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d013      	beq.n	8006bfa <osSemaphoreRelease+0x5e>
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <osSemaphoreRelease+0x68>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	e00a      	b.n	8006bfa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006be4:	2300      	movs	r3, #0
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fb74 	bl	80072d8 <xQueueGenericSend>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d001      	beq.n	8006bfa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006bf6:	23ff      	movs	r3, #255	; 0xff
 8006bf8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006c10:	f7ff fe1f 	bl	8006852 <inHandlerMode>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006c1a:	2382      	movs	r3, #130	; 0x82
 8006c1c:	e003      	b.n	8006c26 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f001 f856 	bl	8007cd0 <vQueueDelete>

  return osOK; 
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006c2e:	b590      	push	{r4, r7, lr}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af02      	add	r7, sp, #8
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d011      	beq.n	8006c64 <osMessageCreate+0x36>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6859      	ldr	r1, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2400      	movs	r4, #0
 8006c5a:	9400      	str	r4, [sp, #0]
 8006c5c:	f000 fa0c 	bl	8007078 <xQueueGenericCreateStatic>
 8006c60:	4603      	mov	r3, r0
 8006c62:	e008      	b.n	8006c76 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4619      	mov	r1, r3
 8006c70:	f000 fa84 	bl	800717c <xQueueGenericCreate>
 8006c74:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd90      	pop	{r4, r7, pc}
	...

08006c80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <osMessagePut+0x1e>
    ticks = 1;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006c9e:	f7ff fdd8 	bl	8006852 <inHandlerMode>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d018      	beq.n	8006cda <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006ca8:	f107 0210 	add.w	r2, r7, #16
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fc16 	bl	80074e4 <xQueueGenericSendFromISR>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d001      	beq.n	8006cc2 <osMessagePut+0x42>
      return osErrorOS;
 8006cbe:	23ff      	movs	r3, #255	; 0xff
 8006cc0:	e018      	b.n	8006cf4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d014      	beq.n	8006cf2 <osMessagePut+0x72>
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <osMessagePut+0x7c>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	e00b      	b.n	8006cf2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006cda:	f107 0108 	add.w	r1, r7, #8
 8006cde:	2300      	movs	r3, #0
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 faf8 	bl	80072d8 <xQueueGenericSend>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <osMessagePut+0x72>
      return osErrorOS;
 8006cee:	23ff      	movs	r3, #255	; 0xff
 8006cf0:	e000      	b.n	8006cf4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b08b      	sub	sp, #44	; 0x2c
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006d1a:	2380      	movs	r3, #128	; 0x80
 8006d1c:	617b      	str	r3, [r7, #20]
    return event;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	461c      	mov	r4, r3
 8006d22:	f107 0314 	add.w	r3, r7, #20
 8006d26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d2e:	e054      	b.n	8006dda <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3e:	d103      	bne.n	8006d48 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
 8006d46:	e009      	b.n	8006d5c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d006      	beq.n	8006d5c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <osMessageGet+0x5c>
      ticks = 1;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006d5c:	f7ff fd79 	bl	8006852 <inHandlerMode>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01c      	beq.n	8006da0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006d66:	f107 0220 	add.w	r2, r7, #32
 8006d6a:	f107 0314 	add.w	r3, r7, #20
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	68b8      	ldr	r0, [r7, #8]
 8006d74:	f000 fee6 	bl	8007b44 <xQueueReceiveFromISR>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d102      	bne.n	8006d84 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006d7e:	2310      	movs	r3, #16
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e001      	b.n	8006d88 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01d      	beq.n	8006dca <osMessageGet+0xca>
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <osMessageGet+0xe4>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	e014      	b.n	8006dca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006da0:	f107 0314 	add.w	r3, r7, #20
 8006da4:	3304      	adds	r3, #4
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	4619      	mov	r1, r3
 8006daa:	68b8      	ldr	r0, [r7, #8]
 8006dac:	f000 fcd0 	bl	8007750 <xQueueReceive>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d102      	bne.n	8006dbc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006db6:	2310      	movs	r3, #16
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	e006      	b.n	8006dca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <osMessageGet+0xc6>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e000      	b.n	8006dc8 <osMessageGet+0xc8>
 8006dc6:	2340      	movs	r3, #64	; 0x40
 8006dc8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	461c      	mov	r4, r3
 8006dce:	f107 0314 	add.w	r3, r7, #20
 8006dd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	372c      	adds	r7, #44	; 0x2c
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd90      	pop	{r4, r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006df0:	f7ff fd2f 	bl	8006852 <inHandlerMode>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ff48 	bl	8007c90 <uxQueueMessagesWaitingFromISR>
 8006e00:	4603      	mov	r3, r0
 8006e02:	e003      	b.n	8006e0c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 ff23 	bl	8007c50 <uxQueueMessagesWaiting>
 8006e0a:	4603      	mov	r3, r0
  }
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006e1c:	f7ff fd19 	bl	8006852 <inHandlerMode>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <osMessageDelete+0x16>
    return osErrorISR;
 8006e26:	2382      	movs	r3, #130	; 0x82
 8006e28:	e003      	b.n	8006e32 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 ff50 	bl	8007cd0 <vQueueDelete>

  return osOK; 
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f103 0208 	add.w	r2, r3, #8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f103 0208 	add.w	r2, r3, #8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f103 0208 	add.w	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef2:	d103      	bne.n	8006efc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e00c      	b.n	8006f16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3308      	adds	r3, #8
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	e002      	b.n	8006f0a <vListInsert+0x2e>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d2f6      	bcs.n	8006f04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]
}
 8006f42:	bf00      	nop
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6892      	ldr	r2, [r2, #8]
 8006f64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6852      	ldr	r2, [r2, #4]
 8006f6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d103      	bne.n	8006f82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fce:	bf00      	nop
 8006fd0:	e7fe      	b.n	8006fd0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006fd2:	f002 f94b 	bl	800926c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fe2:	fb01 f303 	mul.w	r3, r1, r3
 8006fe6:	441a      	add	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007002:	3b01      	subs	r3, #1
 8007004:	68f9      	ldr	r1, [r7, #12]
 8007006:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	441a      	add	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d114      	bne.n	8007052 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01a      	beq.n	8007066 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3310      	adds	r3, #16
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fc05 	bl	8008844 <xTaskRemoveFromEventList>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d012      	beq.n	8007066 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <xQueueGenericReset+0xd0>)
 8007042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	e009      	b.n	8007066 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3310      	adds	r3, #16
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff feef 	bl	8006e3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3324      	adds	r3, #36	; 0x24
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff feea 	bl	8006e3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007066:	f002 f935 	bl	80092d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800706a:	2301      	movs	r3, #1
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08e      	sub	sp, #56	; 0x38
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10c      	bne.n	80070a6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	b672      	cpsid	i
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	b662      	cpsie	i
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10c      	bne.n	80070c6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	b672      	cpsid	i
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	b662      	cpsie	i
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <xQueueGenericCreateStatic+0x5a>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <xQueueGenericCreateStatic+0x5e>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <xQueueGenericCreateStatic+0x60>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10c      	bne.n	80070f6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	b672      	cpsid	i
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	b662      	cpsie	i
 80070f0:	623b      	str	r3, [r7, #32]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <xQueueGenericCreateStatic+0x8a>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <xQueueGenericCreateStatic+0x8e>
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <xQueueGenericCreateStatic+0x90>
 8007106:	2300      	movs	r3, #0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10c      	bne.n	8007126 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	b672      	cpsid	i
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	b662      	cpsie	i
 8007120:	61fb      	str	r3, [r7, #28]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007126:	2348      	movs	r3, #72	; 0x48
 8007128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b48      	cmp	r3, #72	; 0x48
 800712e:	d00c      	beq.n	800714a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	61bb      	str	r3, [r7, #24]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800714a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00d      	beq.n	8007172 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800715e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4613      	mov	r3, r2
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f847 	bl	8007200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007174:	4618      	mov	r0, r3
 8007176:	3730      	adds	r7, #48	; 0x30
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08a      	sub	sp, #40	; 0x28
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10c      	bne.n	80071aa <xQueueGenericCreate+0x2e>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	b672      	cpsid	i
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	b662      	cpsie	i
 80071a4:	613b      	str	r3, [r7, #16]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	e004      	b.n	80071c0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	fb02 f303 	mul.w	r3, r2, r3
 80071be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	3348      	adds	r3, #72	; 0x48
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 f97d 	bl	80094c4 <pvPortMalloc>
 80071ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d011      	beq.n	80071f6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	3348      	adds	r3, #72	; 0x48
 80071da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071e4:	79fa      	ldrb	r2, [r7, #7]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f805 	bl	8007200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071f6:	69bb      	ldr	r3, [r7, #24]
	}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e002      	b.n	8007222 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800722e:	2101      	movs	r1, #1
 8007230:	69b8      	ldr	r0, [r7, #24]
 8007232:	f7ff feb7 	bl	8006fa4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00e      	beq.n	800726a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800725e:	2300      	movs	r3, #0
 8007260:	2200      	movs	r2, #0
 8007262:	2100      	movs	r1, #0
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f837 	bl	80072d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	4603      	mov	r3, r0
 800727a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	461a      	mov	r2, r3
 8007288:	6939      	ldr	r1, [r7, #16]
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff ff76 	bl	800717c <xQueueGenericCreate>
 8007290:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff ffd3 	bl	800723e <prvInitialiseMutex>

		return xNewQueue;
 8007298:	68fb      	ldr	r3, [r7, #12]
	}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b088      	sub	sp, #32
 80072a6:	af02      	add	r7, sp, #8
 80072a8:	4603      	mov	r3, r0
 80072aa:	6039      	str	r1, [r7, #0]
 80072ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072ae:	2301      	movs	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2200      	movs	r2, #0
 80072be:	6939      	ldr	r1, [r7, #16]
 80072c0:	6978      	ldr	r0, [r7, #20]
 80072c2:	f7ff fed9 	bl	8007078 <xQueueGenericCreateStatic>
 80072c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff ffb8 	bl	800723e <prvInitialiseMutex>

		return xNewQueue;
 80072ce:	68fb      	ldr	r3, [r7, #12]
	}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072e6:	2300      	movs	r3, #0
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10c      	bne.n	800730e <xQueueGenericSend+0x36>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	b672      	cpsid	i
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	b662      	cpsie	i
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <xQueueGenericSend+0x44>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <xQueueGenericSend+0x48>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <xQueueGenericSend+0x4a>
 8007320:	2300      	movs	r3, #0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <xQueueGenericSend+0x68>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	b672      	cpsid	i
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	b662      	cpsie	i
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d103      	bne.n	800734e <xQueueGenericSend+0x76>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <xQueueGenericSend+0x7a>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <xQueueGenericSend+0x7c>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10c      	bne.n	8007372 <xQueueGenericSend+0x9a>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	b672      	cpsid	i
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	b662      	cpsie	i
 800736c:	623b      	str	r3, [r7, #32]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007372:	f001 fc2b 	bl	8008bcc <xTaskGetSchedulerState>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <xQueueGenericSend+0xaa>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <xQueueGenericSend+0xae>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <xQueueGenericSend+0xb0>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <xQueueGenericSend+0xce>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	b672      	cpsid	i
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	b662      	cpsie	i
 80073a0:	61fb      	str	r3, [r7, #28]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a6:	f001 ff61 	bl	800926c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d302      	bcc.n	80073bc <xQueueGenericSend+0xe4>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d129      	bne.n	8007410 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c2:	f000 fcc2 	bl	8007d4a <prvCopyDataToQueue>
 80073c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	3324      	adds	r3, #36	; 0x24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fa35 	bl	8008844 <xTaskRemoveFromEventList>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d013      	beq.n	8007408 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073e0:	4b3f      	ldr	r3, [pc, #252]	; (80074e0 <xQueueGenericSend+0x208>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	e00a      	b.n	8007408 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073f8:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <xQueueGenericSend+0x208>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007408:	f001 ff64 	bl	80092d4 <vPortExitCritical>
				return pdPASS;
 800740c:	2301      	movs	r3, #1
 800740e:	e063      	b.n	80074d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007416:	f001 ff5d 	bl	80092d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800741a:	2300      	movs	r3, #0
 800741c:	e05c      	b.n	80074d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007424:	f107 0314 	add.w	r3, r7, #20
 8007428:	4618      	mov	r0, r3
 800742a:	f001 fa6f 	bl	800890c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800742e:	2301      	movs	r3, #1
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007432:	f001 ff4f 	bl	80092d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007436:	f000 fff9 	bl	800842c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800743a:	f001 ff17 	bl	800926c <vPortEnterCritical>
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007444:	b25b      	sxtb	r3, r3
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744a:	d103      	bne.n	8007454 <xQueueGenericSend+0x17c>
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800745a:	b25b      	sxtb	r3, r3
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007460:	d103      	bne.n	800746a <xQueueGenericSend+0x192>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800746a:	f001 ff33 	bl	80092d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800746e:	1d3a      	adds	r2, r7, #4
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fa5e 	bl	8008938 <xTaskCheckForTimeOut>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d124      	bne.n	80074cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007484:	f000 fd59 	bl	8007f3a <prvIsQueueFull>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d018      	beq.n	80074c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	3310      	adds	r3, #16
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f001 f9ae 	bl	80087f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800749c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749e:	f000 fce4 	bl	8007e6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074a2:	f000 ffd1 	bl	8008448 <xTaskResumeAll>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f af7c 	bne.w	80073a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <xQueueGenericSend+0x208>)
 80074b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	e772      	b.n	80073a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c2:	f000 fcd2 	bl	8007e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074c6:	f000 ffbf 	bl	8008448 <xTaskResumeAll>
 80074ca:	e76c      	b.n	80073a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ce:	f000 fccc 	bl	8007e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074d2:	f000 ffb9 	bl	8008448 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3738      	adds	r7, #56	; 0x38
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	; 0x38
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10c      	bne.n	8007516 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	b672      	cpsid	i
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	b662      	cpsie	i
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d103      	bne.n	8007524 <xQueueGenericSendFromISR+0x40>
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <xQueueGenericSendFromISR+0x44>
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <xQueueGenericSendFromISR+0x46>
 8007528:	2300      	movs	r3, #0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10c      	bne.n	8007548 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	b672      	cpsid	i
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	b662      	cpsie	i
 8007542:	623b      	str	r3, [r7, #32]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d103      	bne.n	8007556 <xQueueGenericSendFromISR+0x72>
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <xQueueGenericSendFromISR+0x76>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <xQueueGenericSendFromISR+0x78>
 800755a:	2300      	movs	r3, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10c      	bne.n	800757a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	61fb      	str	r3, [r7, #28]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800757a:	f001 ff5f 	bl	800943c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800757e:	f3ef 8211 	mrs	r2, BASEPRI
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	61ba      	str	r2, [r7, #24]
 8007598:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800759a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d302      	bcc.n	80075b0 <xQueueGenericSendFromISR+0xcc>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d12c      	bne.n	800760a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c0:	f000 fbc3 	bl	8007d4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075cc:	d112      	bne.n	80075f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	3324      	adds	r3, #36	; 0x24
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f932 	bl	8008844 <xTaskRemoveFromEventList>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00e      	beq.n	8007604 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e007      	b.n	8007604 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	b25a      	sxtb	r2, r3
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007604:	2301      	movs	r3, #1
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007608:	e001      	b.n	800760e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800760a:	2300      	movs	r3, #0
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007618:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800761c:	4618      	mov	r0, r3
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08e      	sub	sp, #56	; 0x38
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10c      	bne.n	8007652 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	623b      	str	r3, [r7, #32]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00c      	beq.n	8007674 <xQueueGiveFromISR+0x50>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	b672      	cpsid	i
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	b662      	cpsie	i
 800766e:	61fb      	str	r3, [r7, #28]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <xQueueGiveFromISR+0x60>
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <xQueueGiveFromISR+0x64>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <xQueueGiveFromISR+0x66>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10c      	bne.n	80076a8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	b672      	cpsid	i
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	b662      	cpsie	i
 80076a2:	61bb      	str	r3, [r7, #24]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076a8:	f001 fec8 	bl	800943c <vPortValidateInterruptPriority>
	__asm volatile
 80076ac:	f3ef 8211 	mrs	r2, BASEPRI
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	b672      	cpsid	i
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	b662      	cpsie	i
 80076c4:	617a      	str	r2, [r7, #20]
 80076c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d8:	429a      	cmp	r2, r3
 80076da:	d22b      	bcs.n	8007734 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f6:	d112      	bne.n	800771e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d016      	beq.n	800772e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	3324      	adds	r3, #36	; 0x24
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f89d 	bl	8008844 <xTaskRemoveFromEventList>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00e      	beq.n	800772e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e007      	b.n	800772e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800771e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007722:	3301      	adds	r3, #1
 8007724:	b2db      	uxtb	r3, r3
 8007726:	b25a      	sxtb	r2, r3
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800772e:	2301      	movs	r3, #1
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
 8007732:	e001      	b.n	8007738 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007734:	2300      	movs	r3, #0
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f383 8811 	msr	BASEPRI, r3
}
 8007742:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007746:	4618      	mov	r0, r3
 8007748:	3738      	adds	r7, #56	; 0x38
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	; 0x30
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800775c:	2300      	movs	r3, #0
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10c      	bne.n	8007784 <xQueueReceive+0x34>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	b672      	cpsid	i
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	b662      	cpsie	i
 800777e:	623b      	str	r3, [r7, #32]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d103      	bne.n	8007792 <xQueueReceive+0x42>
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <xQueueReceive+0x46>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <xQueueReceive+0x48>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10c      	bne.n	80077b6 <xQueueReceive+0x66>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	b672      	cpsid	i
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	b662      	cpsie	i
 80077b0:	61fb      	str	r3, [r7, #28]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077b6:	f001 fa09 	bl	8008bcc <xTaskGetSchedulerState>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <xQueueReceive+0x76>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <xQueueReceive+0x7a>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <xQueueReceive+0x7c>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10c      	bne.n	80077ea <xQueueReceive+0x9a>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	b672      	cpsid	i
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	b662      	cpsie	i
 80077e4:	61bb      	str	r3, [r7, #24]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077ea:	f001 fd3f 	bl	800926c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01f      	beq.n	800783a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fe:	f000 fb0e 	bl	8007e1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	1e5a      	subs	r2, r3, #1
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00f      	beq.n	8007832 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	3310      	adds	r3, #16
 8007816:	4618      	mov	r0, r3
 8007818:	f001 f814 	bl	8008844 <xTaskRemoveFromEventList>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007822:	4b3d      	ldr	r3, [pc, #244]	; (8007918 <xQueueReceive+0x1c8>)
 8007824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007832:	f001 fd4f 	bl	80092d4 <vPortExitCritical>
				return pdPASS;
 8007836:	2301      	movs	r3, #1
 8007838:	e069      	b.n	800790e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d103      	bne.n	8007848 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007840:	f001 fd48 	bl	80092d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007844:	2300      	movs	r3, #0
 8007846:	e062      	b.n	800790e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800784e:	f107 0310 	add.w	r3, r7, #16
 8007852:	4618      	mov	r0, r3
 8007854:	f001 f85a 	bl	800890c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007858:	2301      	movs	r3, #1
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800785c:	f001 fd3a 	bl	80092d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007860:	f000 fde4 	bl	800842c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007864:	f001 fd02 	bl	800926c <vPortEnterCritical>
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800786e:	b25b      	sxtb	r3, r3
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007874:	d103      	bne.n	800787e <xQueueReceive+0x12e>
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007884:	b25b      	sxtb	r3, r3
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788a:	d103      	bne.n	8007894 <xQueueReceive+0x144>
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007894:	f001 fd1e 	bl	80092d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007898:	1d3a      	adds	r2, r7, #4
 800789a:	f107 0310 	add.w	r3, r7, #16
 800789e:	4611      	mov	r1, r2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 f849 	bl	8008938 <xTaskCheckForTimeOut>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d123      	bne.n	80078f4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ae:	f000 fb2e 	bl	8007f0e <prvIsQueueEmpty>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	3324      	adds	r3, #36	; 0x24
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 ff99 	bl	80087f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c8:	f000 facf 	bl	8007e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078cc:	f000 fdbc 	bl	8008448 <xTaskResumeAll>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d189      	bne.n	80077ea <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <xQueueReceive+0x1c8>)
 80078d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	e780      	b.n	80077ea <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ea:	f000 fabe 	bl	8007e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ee:	f000 fdab 	bl	8008448 <xTaskResumeAll>
 80078f2:	e77a      	b.n	80077ea <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f6:	f000 fab8 	bl	8007e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078fa:	f000 fda5 	bl	8008448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007900:	f000 fb05 	bl	8007f0e <prvIsQueueEmpty>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	f43f af6f 	beq.w	80077ea <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800790c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800790e:	4618      	mov	r0, r3
 8007910:	3730      	adds	r7, #48	; 0x30
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08e      	sub	sp, #56	; 0x38
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800792e:	2300      	movs	r3, #0
 8007930:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10c      	bne.n	8007952 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793c:	b672      	cpsid	i
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	b662      	cpsie	i
 800794c:	623b      	str	r3, [r7, #32]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00c      	beq.n	8007974 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	b672      	cpsid	i
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	b662      	cpsie	i
 800796e:	61fb      	str	r3, [r7, #28]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007974:	f001 f92a 	bl	8008bcc <xTaskGetSchedulerState>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <xQueueSemaphoreTake+0x68>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <xQueueSemaphoreTake+0x6c>
 8007984:	2301      	movs	r3, #1
 8007986:	e000      	b.n	800798a <xQueueSemaphoreTake+0x6e>
 8007988:	2300      	movs	r3, #0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10c      	bne.n	80079a8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	b672      	cpsid	i
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	b662      	cpsie	i
 80079a2:	61bb      	str	r3, [r7, #24]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079a8:	f001 fc60 	bl	800926c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d024      	beq.n	8007a02 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	1e5a      	subs	r2, r3, #1
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079c8:	f001 fac6 	bl	8008f58 <pvTaskIncrementMutexHeldCount>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00f      	beq.n	80079fa <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	3310      	adds	r3, #16
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 ff30 	bl	8008844 <xTaskRemoveFromEventList>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079ea:	4b55      	ldr	r3, [pc, #340]	; (8007b40 <xQueueSemaphoreTake+0x224>)
 80079ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079fa:	f001 fc6b 	bl	80092d4 <vPortExitCritical>
				return pdPASS;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e099      	b.n	8007b36 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d113      	bne.n	8007a30 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	b672      	cpsid	i
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	b662      	cpsie	i
 8007a22:	617b      	str	r3, [r7, #20]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a28:	f001 fc54 	bl	80092d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e082      	b.n	8007b36 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a36:	f107 030c 	add.w	r3, r7, #12
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 ff66 	bl	800890c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a40:	2301      	movs	r3, #1
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a44:	f001 fc46 	bl	80092d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a48:	f000 fcf0 	bl	800842c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a4c:	f001 fc0e 	bl	800926c <vPortEnterCritical>
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a56:	b25b      	sxtb	r3, r3
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a5c:	d103      	bne.n	8007a66 <xQueueSemaphoreTake+0x14a>
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a6c:	b25b      	sxtb	r3, r3
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a72:	d103      	bne.n	8007a7c <xQueueSemaphoreTake+0x160>
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a7c:	f001 fc2a 	bl	80092d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a80:	463a      	mov	r2, r7
 8007a82:	f107 030c 	add.w	r3, r7, #12
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 ff55 	bl	8008938 <xTaskCheckForTimeOut>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d132      	bne.n	8007afa <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a96:	f000 fa3a 	bl	8007f0e <prvIsQueueEmpty>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d026      	beq.n	8007aee <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007aa8:	f001 fbe0 	bl	800926c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 f8a9 	bl	8008c08 <xTaskPriorityInherit>
 8007ab6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ab8:	f001 fc0c 	bl	80092d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	3324      	adds	r3, #36	; 0x24
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fe97 	bl	80087f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007acc:	f000 f9cd 	bl	8007e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ad0:	f000 fcba 	bl	8008448 <xTaskResumeAll>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f47f af66 	bne.w	80079a8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007adc:	4b18      	ldr	r3, [pc, #96]	; (8007b40 <xQueueSemaphoreTake+0x224>)
 8007ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	e75c      	b.n	80079a8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007af0:	f000 f9bb 	bl	8007e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007af4:	f000 fca8 	bl	8008448 <xTaskResumeAll>
 8007af8:	e756      	b.n	80079a8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007afc:	f000 f9b5 	bl	8007e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b00:	f000 fca2 	bl	8008448 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b06:	f000 fa02 	bl	8007f0e <prvIsQueueEmpty>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f43f af4b 	beq.w	80079a8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00d      	beq.n	8007b34 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007b18:	f001 fba8 	bl	800926c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b1e:	f000 f8fc 	bl	8007d1a <prvGetDisinheritPriorityAfterTimeout>
 8007b22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 f976 	bl	8008e1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b30:	f001 fbd0 	bl	80092d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3738      	adds	r7, #56	; 0x38
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08e      	sub	sp, #56	; 0x38
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10c      	bne.n	8007b74 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	b672      	cpsid	i
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	b662      	cpsie	i
 8007b6e:	623b      	str	r3, [r7, #32]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <xQueueReceiveFromISR+0x3e>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <xQueueReceiveFromISR+0x42>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <xQueueReceiveFromISR+0x44>
 8007b86:	2300      	movs	r3, #0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10c      	bne.n	8007ba6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	61fb      	str	r3, [r7, #28]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ba6:	f001 fc49 	bl	800943c <vPortValidateInterruptPriority>
	__asm volatile
 8007baa:	f3ef 8211 	mrs	r2, BASEPRI
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	b672      	cpsid	i
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	b662      	cpsie	i
 8007bc2:	61ba      	str	r2, [r7, #24]
 8007bc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02f      	beq.n	8007c36 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007be4:	f000 f91b 	bl	8007e1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	1e5a      	subs	r2, r3, #1
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf8:	d112      	bne.n	8007c20 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	3310      	adds	r3, #16
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fe1c 	bl	8008844 <xTaskRemoveFromEventList>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e007      	b.n	8007c30 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c24:	3301      	adds	r3, #1
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	b25a      	sxtb	r2, r3
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	637b      	str	r3, [r7, #52]	; 0x34
 8007c34:	e001      	b.n	8007c3a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f383 8811 	msr	BASEPRI, r3
}
 8007c44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3738      	adds	r7, #56	; 0x38
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10c      	bne.n	8007c78 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	b672      	cpsid	i
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	b662      	cpsie	i
 8007c72:	60bb      	str	r3, [r7, #8]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007c78:	f001 faf8 	bl	800926c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007c82:	f001 fb27 	bl	80092d4 <vPortExitCritical>

	return uxReturn;
 8007c86:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10c      	bne.n	8007cbc <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	b672      	cpsid	i
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	b662      	cpsie	i
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007cc2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <vQueueDelete+0x2c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	60bb      	str	r3, [r7, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f935 	bl	8007f6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f001 fca3 	bl	8009658 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d006      	beq.n	8007d38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1c3 0307 	rsb	r3, r3, #7
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	e001      	b.n	8007d3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
	}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b086      	sub	sp, #24
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10d      	bne.n	8007d84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d14d      	bne.n	8007e0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 ffc7 	bl	8008d08 <xTaskPriorityDisinherit>
 8007d7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	609a      	str	r2, [r3, #8]
 8007d82:	e043      	b.n	8007e0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d119      	bne.n	8007dbe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6858      	ldr	r0, [r3, #4]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	461a      	mov	r2, r3
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	f010 ffc5 	bl	8018d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	441a      	add	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d32b      	bcc.n	8007e0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	605a      	str	r2, [r3, #4]
 8007dbc:	e026      	b.n	8007e0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68d8      	ldr	r0, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	f010 ffab 	bl	8018d24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	425b      	negs	r3, r3
 8007dd8:	441a      	add	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d207      	bcs.n	8007dfa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	425b      	negs	r3, r3
 8007df4:	441a      	add	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d105      	bne.n	8007e0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e14:	697b      	ldr	r3, [r7, #20]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d018      	beq.n	8007e62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	441a      	add	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d303      	bcc.n	8007e52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68d9      	ldr	r1, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6838      	ldr	r0, [r7, #0]
 8007e5e:	f010 ff61 	bl	8018d24 <memcpy>
	}
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e72:	f001 f9fb 	bl	800926c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e7e:	e011      	b.n	8007ea4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d012      	beq.n	8007eae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3324      	adds	r3, #36	; 0x24
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fcd9 	bl	8008844 <xTaskRemoveFromEventList>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e98:	f000 fdb4 	bl	8008a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dce9      	bgt.n	8007e80 <prvUnlockQueue+0x16>
 8007eac:	e000      	b.n	8007eb0 <prvUnlockQueue+0x46>
					break;
 8007eae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	22ff      	movs	r2, #255	; 0xff
 8007eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007eb8:	f001 fa0c 	bl	80092d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ebc:	f001 f9d6 	bl	800926c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ec8:	e011      	b.n	8007eee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d012      	beq.n	8007ef8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3310      	adds	r3, #16
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fcb4 	bl	8008844 <xTaskRemoveFromEventList>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ee2:	f000 fd8f 	bl	8008a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dce9      	bgt.n	8007eca <prvUnlockQueue+0x60>
 8007ef6:	e000      	b.n	8007efa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ef8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	22ff      	movs	r2, #255	; 0xff
 8007efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f02:	f001 f9e7 	bl	80092d4 <vPortExitCritical>
}
 8007f06:	bf00      	nop
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f16:	f001 f9a9 	bl	800926c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	e001      	b.n	8007f2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f2c:	f001 f9d2 	bl	80092d4 <vPortExitCritical>

	return xReturn;
 8007f30:	68fb      	ldr	r3, [r7, #12]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f42:	f001 f993 	bl	800926c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d102      	bne.n	8007f58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e001      	b.n	8007f5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f5c:	f001 f9ba 	bl	80092d4 <vPortExitCritical>

	return xReturn;
 8007f60:	68fb      	ldr	r3, [r7, #12]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e016      	b.n	8007fa8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f7a:	4a10      	ldr	r2, [pc, #64]	; (8007fbc <vQueueUnregisterQueue+0x50>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	4413      	add	r3, r2
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d10b      	bne.n	8007fa2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f8a:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <vQueueUnregisterQueue+0x50>)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f94:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <vQueueUnregisterQueue+0x50>)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	605a      	str	r2, [r3, #4]
				break;
 8007fa0:	e006      	b.n	8007fb0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b07      	cmp	r3, #7
 8007fac:	d9e5      	bls.n	8007f7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007fae:	bf00      	nop
 8007fb0:	bf00      	nop
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	2000639c 	.word	0x2000639c

08007fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10c      	bne.n	8007fee <xTaskCreateStatic+0x2e>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	b672      	cpsid	i
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	b662      	cpsie	i
 8007fe8:	623b      	str	r3, [r7, #32]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10c      	bne.n	800800e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	b672      	cpsid	i
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	b662      	cpsie	i
 8008008:	61fb      	str	r3, [r7, #28]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800800e:	2354      	movs	r3, #84	; 0x54
 8008010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b54      	cmp	r3, #84	; 0x54
 8008016:	d00c      	beq.n	8008032 <xTaskCreateStatic+0x72>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	b672      	cpsid	i
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	b662      	cpsie	i
 800802c:	61bb      	str	r3, [r7, #24]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008032:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01e      	beq.n	8008078 <xTaskCreateStatic+0xb8>
 800803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01b      	beq.n	8008078 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2202      	movs	r2, #2
 800804e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008052:	2300      	movs	r3, #0
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	f107 0314 	add.w	r3, r7, #20
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 f850 	bl	8008110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008072:	f000 f8d7 	bl	8008224 <prvAddNewTaskToReadyList>
 8008076:	e001      	b.n	800807c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800807c:	697b      	ldr	r3, [r7, #20]
	}
 800807e:	4618      	mov	r0, r3
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008086:	b580      	push	{r7, lr}
 8008088:	b08c      	sub	sp, #48	; 0x30
 800808a:	af04      	add	r7, sp, #16
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	603b      	str	r3, [r7, #0]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4618      	mov	r0, r3
 800809c:	f001 fa12 	bl	80094c4 <pvPortMalloc>
 80080a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00e      	beq.n	80080c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080a8:	2054      	movs	r0, #84	; 0x54
 80080aa:	f001 fa0b 	bl	80094c4 <pvPortMalloc>
 80080ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
 80080bc:	e005      	b.n	80080ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080be:	6978      	ldr	r0, [r7, #20]
 80080c0:	f001 faca 	bl	8009658 <vPortFree>
 80080c4:	e001      	b.n	80080ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d017      	beq.n	8008100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	2300      	movs	r3, #0
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 f80e 	bl	8008110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080f4:	69f8      	ldr	r0, [r7, #28]
 80080f6:	f000 f895 	bl	8008224 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080fa:	2301      	movs	r3, #1
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	e002      	b.n	8008106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008106:	69bb      	ldr	r3, [r7, #24]
	}
 8008108:	4618      	mov	r0, r3
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008128:	440b      	add	r3, r1
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	f023 0307 	bic.w	r3, r3, #7
 8008136:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00c      	beq.n	800815c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	b672      	cpsid	i
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	b662      	cpsie	i
 8008156:	617b      	str	r3, [r7, #20]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d01f      	beq.n	80081a2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008162:	2300      	movs	r3, #0
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	e012      	b.n	800818e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	7819      	ldrb	r1, [r3, #0]
 8008170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	3334      	adds	r3, #52	; 0x34
 8008178:	460a      	mov	r2, r1
 800817a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d006      	beq.n	8008196 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	3301      	adds	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	2b0f      	cmp	r3, #15
 8008192:	d9e9      	bls.n	8008168 <prvInitialiseNewTask+0x58>
 8008194:	e000      	b.n	8008198 <prvInitialiseNewTask+0x88>
			{
				break;
 8008196:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081a0:	e003      	b.n	80081aa <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	d901      	bls.n	80081b4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081b0:	2306      	movs	r3, #6
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	2200      	movs	r2, #0
 80081c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe fe55 	bl	8006e7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	3318      	adds	r3, #24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fe50 	bl	8006e7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	f1c3 0207 	rsb	r2, r3, #7
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	2200      	movs	r2, #0
 80081f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	68f9      	ldr	r1, [r7, #12]
 8008202:	69b8      	ldr	r0, [r7, #24]
 8008204:	f000 ff22 	bl	800904c <pxPortInitialiseStack>
 8008208:	4602      	mov	r2, r0
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800820e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008218:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800821a:	bf00      	nop
 800821c:	3720      	adds	r7, #32
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800822c:	f001 f81e 	bl	800926c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008230:	4b2a      	ldr	r3, [pc, #168]	; (80082dc <prvAddNewTaskToReadyList+0xb8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3301      	adds	r3, #1
 8008236:	4a29      	ldr	r2, [pc, #164]	; (80082dc <prvAddNewTaskToReadyList+0xb8>)
 8008238:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800823a:	4b29      	ldr	r3, [pc, #164]	; (80082e0 <prvAddNewTaskToReadyList+0xbc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008242:	4a27      	ldr	r2, [pc, #156]	; (80082e0 <prvAddNewTaskToReadyList+0xbc>)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008248:	4b24      	ldr	r3, [pc, #144]	; (80082dc <prvAddNewTaskToReadyList+0xb8>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d110      	bne.n	8008272 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008250:	f000 fbfc 	bl	8008a4c <prvInitialiseTaskLists>
 8008254:	e00d      	b.n	8008272 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008256:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <prvAddNewTaskToReadyList+0xc0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800825e:	4b20      	ldr	r3, [pc, #128]	; (80082e0 <prvAddNewTaskToReadyList+0xbc>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	429a      	cmp	r2, r3
 800826a:	d802      	bhi.n	8008272 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800826c:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <prvAddNewTaskToReadyList+0xbc>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008272:	4b1d      	ldr	r3, [pc, #116]	; (80082e8 <prvAddNewTaskToReadyList+0xc4>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3301      	adds	r3, #1
 8008278:	4a1b      	ldr	r2, [pc, #108]	; (80082e8 <prvAddNewTaskToReadyList+0xc4>)
 800827a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	2201      	movs	r2, #1
 8008282:	409a      	lsls	r2, r3
 8008284:	4b19      	ldr	r3, [pc, #100]	; (80082ec <prvAddNewTaskToReadyList+0xc8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4313      	orrs	r3, r2
 800828a:	4a18      	ldr	r2, [pc, #96]	; (80082ec <prvAddNewTaskToReadyList+0xc8>)
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <prvAddNewTaskToReadyList+0xcc>)
 800829c:	441a      	add	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f7fe fdf5 	bl	8006e94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082aa:	f001 f813 	bl	80092d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <prvAddNewTaskToReadyList+0xc0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00e      	beq.n	80082d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082b6:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <prvAddNewTaskToReadyList+0xbc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d207      	bcs.n	80082d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <prvAddNewTaskToReadyList+0xd0>)
 80082c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200064dc 	.word	0x200064dc
 80082e0:	200063dc 	.word	0x200063dc
 80082e4:	200064e8 	.word	0x200064e8
 80082e8:	200064f8 	.word	0x200064f8
 80082ec:	200064e4 	.word	0x200064e4
 80082f0:	200063e0 	.word	0x200063e0
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d019      	beq.n	800833e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <vTaskDelay+0x64>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00c      	beq.n	800832c <vTaskDelay+0x34>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	b672      	cpsid	i
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	b662      	cpsie	i
 8008326:	60bb      	str	r3, [r7, #8]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800832c:	f000 f87e 	bl	800842c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008330:	2100      	movs	r1, #0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fe24 	bl	8008f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008338:	f000 f886 	bl	8008448 <xTaskResumeAll>
 800833c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d107      	bne.n	8008354 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008344:	4b06      	ldr	r3, [pc, #24]	; (8008360 <vTaskDelay+0x68>)
 8008346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20006504 	.word	0x20006504
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	; 0x28
 8008368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008372:	463a      	mov	r2, r7
 8008374:	1d39      	adds	r1, r7, #4
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	4618      	mov	r0, r3
 800837c:	f7f8 f94a 	bl	8000614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	9202      	str	r2, [sp, #8]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	2300      	movs	r3, #0
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2300      	movs	r3, #0
 8008390:	460a      	mov	r2, r1
 8008392:	4920      	ldr	r1, [pc, #128]	; (8008414 <vTaskStartScheduler+0xb0>)
 8008394:	4820      	ldr	r0, [pc, #128]	; (8008418 <vTaskStartScheduler+0xb4>)
 8008396:	f7ff fe13 	bl	8007fc0 <xTaskCreateStatic>
 800839a:	4603      	mov	r3, r0
 800839c:	4a1f      	ldr	r2, [pc, #124]	; (800841c <vTaskStartScheduler+0xb8>)
 800839e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083a0:	4b1e      	ldr	r3, [pc, #120]	; (800841c <vTaskStartScheduler+0xb8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e001      	b.n	80083b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d118      	bne.n	80083ea <vTaskStartScheduler+0x86>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	b672      	cpsid	i
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	b662      	cpsie	i
 80083cc:	613b      	str	r3, [r7, #16]
}
 80083ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083d0:	4b13      	ldr	r3, [pc, #76]	; (8008420 <vTaskStartScheduler+0xbc>)
 80083d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083d8:	4b12      	ldr	r3, [pc, #72]	; (8008424 <vTaskStartScheduler+0xc0>)
 80083da:	2201      	movs	r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083de:	4b12      	ldr	r3, [pc, #72]	; (8008428 <vTaskStartScheduler+0xc4>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083e4:	f000 fec4 	bl	8009170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083e8:	e010      	b.n	800840c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f0:	d10c      	bne.n	800840c <vTaskStartScheduler+0xa8>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	b672      	cpsid	i
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	b662      	cpsie	i
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <vTaskStartScheduler+0xa6>
}
 800840c:	bf00      	nop
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	0801a154 	.word	0x0801a154
 8008418:	08008a1d 	.word	0x08008a1d
 800841c:	20006500 	.word	0x20006500
 8008420:	200064fc 	.word	0x200064fc
 8008424:	200064e8 	.word	0x200064e8
 8008428:	200064e0 	.word	0x200064e0

0800842c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008430:	4b04      	ldr	r3, [pc, #16]	; (8008444 <vTaskSuspendAll+0x18>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	4a03      	ldr	r2, [pc, #12]	; (8008444 <vTaskSuspendAll+0x18>)
 8008438:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800843a:	bf00      	nop
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	20006504 	.word	0x20006504

08008448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008452:	2300      	movs	r3, #0
 8008454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008456:	4b42      	ldr	r3, [pc, #264]	; (8008560 <xTaskResumeAll+0x118>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10c      	bne.n	8008478 <xTaskResumeAll+0x30>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	b672      	cpsid	i
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	b662      	cpsie	i
 8008472:	603b      	str	r3, [r7, #0]
}
 8008474:	bf00      	nop
 8008476:	e7fe      	b.n	8008476 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008478:	f000 fef8 	bl	800926c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800847c:	4b38      	ldr	r3, [pc, #224]	; (8008560 <xTaskResumeAll+0x118>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3b01      	subs	r3, #1
 8008482:	4a37      	ldr	r2, [pc, #220]	; (8008560 <xTaskResumeAll+0x118>)
 8008484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008486:	4b36      	ldr	r3, [pc, #216]	; (8008560 <xTaskResumeAll+0x118>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d161      	bne.n	8008552 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800848e:	4b35      	ldr	r3, [pc, #212]	; (8008564 <xTaskResumeAll+0x11c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d05d      	beq.n	8008552 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008496:	e02e      	b.n	80084f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008498:	4b33      	ldr	r3, [pc, #204]	; (8008568 <xTaskResumeAll+0x120>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3318      	adds	r3, #24
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe fd52 	bl	8006f4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fd4d 	bl	8006f4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	4b2b      	ldr	r3, [pc, #172]	; (800856c <xTaskResumeAll+0x124>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	4a2a      	ldr	r2, [pc, #168]	; (800856c <xTaskResumeAll+0x124>)
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4a27      	ldr	r2, [pc, #156]	; (8008570 <xTaskResumeAll+0x128>)
 80084d4:	441a      	add	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3304      	adds	r3, #4
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f7fe fcd9 	bl	8006e94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e6:	4b23      	ldr	r3, [pc, #140]	; (8008574 <xTaskResumeAll+0x12c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d302      	bcc.n	80084f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80084f0:	4b21      	ldr	r3, [pc, #132]	; (8008578 <xTaskResumeAll+0x130>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084f6:	4b1c      	ldr	r3, [pc, #112]	; (8008568 <xTaskResumeAll+0x120>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1cc      	bne.n	8008498 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008504:	f000 fb42 	bl	8008b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008508:	4b1c      	ldr	r3, [pc, #112]	; (800857c <xTaskResumeAll+0x134>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d010      	beq.n	8008536 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008514:	f000 f858 	bl	80085c8 <xTaskIncrementTick>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800851e:	4b16      	ldr	r3, [pc, #88]	; (8008578 <xTaskResumeAll+0x130>)
 8008520:	2201      	movs	r2, #1
 8008522:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3b01      	subs	r3, #1
 8008528:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1f1      	bne.n	8008514 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008530:	4b12      	ldr	r3, [pc, #72]	; (800857c <xTaskResumeAll+0x134>)
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008536:	4b10      	ldr	r3, [pc, #64]	; (8008578 <xTaskResumeAll+0x130>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800853e:	2301      	movs	r3, #1
 8008540:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <xTaskResumeAll+0x138>)
 8008544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008552:	f000 febf 	bl	80092d4 <vPortExitCritical>

	return xAlreadyYielded;
 8008556:	68bb      	ldr	r3, [r7, #8]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20006504 	.word	0x20006504
 8008564:	200064dc 	.word	0x200064dc
 8008568:	2000649c 	.word	0x2000649c
 800856c:	200064e4 	.word	0x200064e4
 8008570:	200063e0 	.word	0x200063e0
 8008574:	200063dc 	.word	0x200063dc
 8008578:	200064f0 	.word	0x200064f0
 800857c:	200064ec 	.word	0x200064ec
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <xTaskGetTickCount+0x1c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008590:	687b      	ldr	r3, [r7, #4]
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	200064e0 	.word	0x200064e0

080085a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085aa:	f000 ff47 	bl	800943c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80085ae:	2300      	movs	r3, #0
 80085b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80085b2:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <xTaskGetTickCountFromISR+0x20>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085b8:	683b      	ldr	r3, [r7, #0]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	200064e0 	.word	0x200064e0

080085c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d2:	4b4f      	ldr	r3, [pc, #316]	; (8008710 <xTaskIncrementTick+0x148>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f040 808a 	bne.w	80086f0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085dc:	4b4d      	ldr	r3, [pc, #308]	; (8008714 <xTaskIncrementTick+0x14c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085e4:	4a4b      	ldr	r2, [pc, #300]	; (8008714 <xTaskIncrementTick+0x14c>)
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d122      	bne.n	8008636 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80085f0:	4b49      	ldr	r3, [pc, #292]	; (8008718 <xTaskIncrementTick+0x150>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00c      	beq.n	8008614 <xTaskIncrementTick+0x4c>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	b672      	cpsid	i
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	b662      	cpsie	i
 800860e:	603b      	str	r3, [r7, #0]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <xTaskIncrementTick+0x4a>
 8008614:	4b40      	ldr	r3, [pc, #256]	; (8008718 <xTaskIncrementTick+0x150>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	4b40      	ldr	r3, [pc, #256]	; (800871c <xTaskIncrementTick+0x154>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a3e      	ldr	r2, [pc, #248]	; (8008718 <xTaskIncrementTick+0x150>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	4a3e      	ldr	r2, [pc, #248]	; (800871c <xTaskIncrementTick+0x154>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b3d      	ldr	r3, [pc, #244]	; (8008720 <xTaskIncrementTick+0x158>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	4a3c      	ldr	r2, [pc, #240]	; (8008720 <xTaskIncrementTick+0x158>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	f000 faab 	bl	8008b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008636:	4b3b      	ldr	r3, [pc, #236]	; (8008724 <xTaskIncrementTick+0x15c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	429a      	cmp	r2, r3
 800863e:	d348      	bcc.n	80086d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008640:	4b35      	ldr	r3, [pc, #212]	; (8008718 <xTaskIncrementTick+0x150>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d104      	bne.n	8008654 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864a:	4b36      	ldr	r3, [pc, #216]	; (8008724 <xTaskIncrementTick+0x15c>)
 800864c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008650:	601a      	str	r2, [r3, #0]
					break;
 8008652:	e03e      	b.n	80086d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008654:	4b30      	ldr	r3, [pc, #192]	; (8008718 <xTaskIncrementTick+0x150>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	429a      	cmp	r2, r3
 800866a:	d203      	bcs.n	8008674 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800866c:	4a2d      	ldr	r2, [pc, #180]	; (8008724 <xTaskIncrementTick+0x15c>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008672:	e02e      	b.n	80086d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3304      	adds	r3, #4
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe fc68 	bl	8006f4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	3318      	adds	r3, #24
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fc5f 	bl	8006f4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	2201      	movs	r2, #1
 8008696:	409a      	lsls	r2, r3
 8008698:	4b23      	ldr	r3, [pc, #140]	; (8008728 <xTaskIncrementTick+0x160>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4313      	orrs	r3, r2
 800869e:	4a22      	ldr	r2, [pc, #136]	; (8008728 <xTaskIncrementTick+0x160>)
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4a1f      	ldr	r2, [pc, #124]	; (800872c <xTaskIncrementTick+0x164>)
 80086b0:	441a      	add	r2, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4619      	mov	r1, r3
 80086b8:	4610      	mov	r0, r2
 80086ba:	f7fe fbeb 	bl	8006e94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c2:	4b1b      	ldr	r3, [pc, #108]	; (8008730 <xTaskIncrementTick+0x168>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d3b9      	bcc.n	8008640 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d0:	e7b6      	b.n	8008640 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086d2:	4b17      	ldr	r3, [pc, #92]	; (8008730 <xTaskIncrementTick+0x168>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d8:	4914      	ldr	r1, [pc, #80]	; (800872c <xTaskIncrementTick+0x164>)
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d907      	bls.n	80086fa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80086ea:	2301      	movs	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	e004      	b.n	80086fa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086f0:	4b10      	ldr	r3, [pc, #64]	; (8008734 <xTaskIncrementTick+0x16c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3301      	adds	r3, #1
 80086f6:	4a0f      	ldr	r2, [pc, #60]	; (8008734 <xTaskIncrementTick+0x16c>)
 80086f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086fa:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <xTaskIncrementTick+0x170>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008702:	2301      	movs	r3, #1
 8008704:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008706:	697b      	ldr	r3, [r7, #20]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20006504 	.word	0x20006504
 8008714:	200064e0 	.word	0x200064e0
 8008718:	20006494 	.word	0x20006494
 800871c:	20006498 	.word	0x20006498
 8008720:	200064f4 	.word	0x200064f4
 8008724:	200064fc 	.word	0x200064fc
 8008728:	200064e4 	.word	0x200064e4
 800872c:	200063e0 	.word	0x200063e0
 8008730:	200063dc 	.word	0x200063dc
 8008734:	200064ec 	.word	0x200064ec
 8008738:	200064f0 	.word	0x200064f0

0800873c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008742:	4b28      	ldr	r3, [pc, #160]	; (80087e4 <vTaskSwitchContext+0xa8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800874a:	4b27      	ldr	r3, [pc, #156]	; (80087e8 <vTaskSwitchContext+0xac>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008750:	e041      	b.n	80087d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008752:	4b25      	ldr	r3, [pc, #148]	; (80087e8 <vTaskSwitchContext+0xac>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008758:	4b24      	ldr	r3, [pc, #144]	; (80087ec <vTaskSwitchContext+0xb0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	fab3 f383 	clz	r3, r3
 8008764:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	f1c3 031f 	rsb	r3, r3, #31
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	4920      	ldr	r1, [pc, #128]	; (80087f0 <vTaskSwitchContext+0xb4>)
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10c      	bne.n	800879c <vTaskSwitchContext+0x60>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	b672      	cpsid	i
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	b662      	cpsie	i
 8008796:	607b      	str	r3, [r7, #4]
}
 8008798:	bf00      	nop
 800879a:	e7fe      	b.n	800879a <vTaskSwitchContext+0x5e>
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4a12      	ldr	r2, [pc, #72]	; (80087f0 <vTaskSwitchContext+0xb4>)
 80087a8:	4413      	add	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	605a      	str	r2, [r3, #4]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	3308      	adds	r3, #8
 80087be:	429a      	cmp	r2, r3
 80087c0:	d104      	bne.n	80087cc <vTaskSwitchContext+0x90>
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	605a      	str	r2, [r3, #4]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	4a08      	ldr	r2, [pc, #32]	; (80087f4 <vTaskSwitchContext+0xb8>)
 80087d4:	6013      	str	r3, [r2, #0]
}
 80087d6:	bf00      	nop
 80087d8:	371c      	adds	r7, #28
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20006504 	.word	0x20006504
 80087e8:	200064f0 	.word	0x200064f0
 80087ec:	200064e4 	.word	0x200064e4
 80087f0:	200063e0 	.word	0x200063e0
 80087f4:	200063dc 	.word	0x200063dc

080087f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10c      	bne.n	8008822 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	b672      	cpsid	i
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	b662      	cpsie	i
 800881c:	60fb      	str	r3, [r7, #12]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <vTaskPlaceOnEventList+0x48>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3318      	adds	r3, #24
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7fe fb56 	bl	8006edc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008830:	2101      	movs	r1, #1
 8008832:	6838      	ldr	r0, [r7, #0]
 8008834:	f000 fba4 	bl	8008f80 <prvAddCurrentTaskToDelayedList>
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	200063dc 	.word	0x200063dc

08008844 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10c      	bne.n	8008874 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	b672      	cpsid	i
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	b662      	cpsie	i
 800886e:	60fb      	str	r3, [r7, #12]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	3318      	adds	r3, #24
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fb68 	bl	8006f4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800887e:	4b1d      	ldr	r3, [pc, #116]	; (80088f4 <xTaskRemoveFromEventList+0xb0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d11c      	bne.n	80088c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	3304      	adds	r3, #4
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fb5f 	bl	8006f4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	2201      	movs	r2, #1
 8008896:	409a      	lsls	r2, r3
 8008898:	4b17      	ldr	r3, [pc, #92]	; (80088f8 <xTaskRemoveFromEventList+0xb4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4313      	orrs	r3, r2
 800889e:	4a16      	ldr	r2, [pc, #88]	; (80088f8 <xTaskRemoveFromEventList+0xb4>)
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4a13      	ldr	r2, [pc, #76]	; (80088fc <xTaskRemoveFromEventList+0xb8>)
 80088b0:	441a      	add	r2, r3
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3304      	adds	r3, #4
 80088b6:	4619      	mov	r1, r3
 80088b8:	4610      	mov	r0, r2
 80088ba:	f7fe faeb 	bl	8006e94 <vListInsertEnd>
 80088be:	e005      	b.n	80088cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	3318      	adds	r3, #24
 80088c4:	4619      	mov	r1, r3
 80088c6:	480e      	ldr	r0, [pc, #56]	; (8008900 <xTaskRemoveFromEventList+0xbc>)
 80088c8:	f7fe fae4 	bl	8006e94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <xTaskRemoveFromEventList+0xc0>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d905      	bls.n	80088e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088da:	2301      	movs	r3, #1
 80088dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <xTaskRemoveFromEventList+0xc4>)
 80088e0:	2201      	movs	r2, #1
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	e001      	b.n	80088ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088ea:	697b      	ldr	r3, [r7, #20]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20006504 	.word	0x20006504
 80088f8:	200064e4 	.word	0x200064e4
 80088fc:	200063e0 	.word	0x200063e0
 8008900:	2000649c 	.word	0x2000649c
 8008904:	200063dc 	.word	0x200063dc
 8008908:	200064f0 	.word	0x200064f0

0800890c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <vTaskInternalSetTimeOutState+0x24>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <vTaskInternalSetTimeOutState+0x28>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	605a      	str	r2, [r3, #4]
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	200064f4 	.word	0x200064f4
 8008934:	200064e0 	.word	0x200064e0

08008938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10c      	bne.n	8008962 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	b672      	cpsid	i
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	b662      	cpsie	i
 800895c:	613b      	str	r3, [r7, #16]
}
 800895e:	bf00      	nop
 8008960:	e7fe      	b.n	8008960 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10c      	bne.n	8008982 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	b672      	cpsid	i
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	b662      	cpsie	i
 800897c:	60fb      	str	r3, [r7, #12]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008982:	f000 fc73 	bl	800926c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008986:	4b1d      	ldr	r3, [pc, #116]	; (80089fc <xTaskCheckForTimeOut+0xc4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800899e:	d102      	bne.n	80089a6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	e023      	b.n	80089ee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <xTaskCheckForTimeOut+0xc8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d007      	beq.n	80089c2 <xTaskCheckForTimeOut+0x8a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d302      	bcc.n	80089c2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	e015      	b.n	80089ee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d20b      	bcs.n	80089e4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff97 	bl	800890c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	e004      	b.n	80089ee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089ea:	2301      	movs	r3, #1
 80089ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089ee:	f000 fc71 	bl	80092d4 <vPortExitCritical>

	return xReturn;
 80089f2:	69fb      	ldr	r3, [r7, #28]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3720      	adds	r7, #32
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	200064e0 	.word	0x200064e0
 8008a00:	200064f4 	.word	0x200064f4

08008a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a08:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <vTaskMissedYield+0x14>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	200064f0 	.word	0x200064f0

08008a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a24:	f000 f852 	bl	8008acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a28:	4b06      	ldr	r3, [pc, #24]	; (8008a44 <prvIdleTask+0x28>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d9f9      	bls.n	8008a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <prvIdleTask+0x2c>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a40:	e7f0      	b.n	8008a24 <prvIdleTask+0x8>
 8008a42:	bf00      	nop
 8008a44:	200063e0 	.word	0x200063e0
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
 8008a56:	e00c      	b.n	8008a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4a12      	ldr	r2, [pc, #72]	; (8008aac <prvInitialiseTaskLists+0x60>)
 8008a64:	4413      	add	r3, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe f9e7 	bl	8006e3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b06      	cmp	r3, #6
 8008a76:	d9ef      	bls.n	8008a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a78:	480d      	ldr	r0, [pc, #52]	; (8008ab0 <prvInitialiseTaskLists+0x64>)
 8008a7a:	f7fe f9de 	bl	8006e3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a7e:	480d      	ldr	r0, [pc, #52]	; (8008ab4 <prvInitialiseTaskLists+0x68>)
 8008a80:	f7fe f9db 	bl	8006e3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a84:	480c      	ldr	r0, [pc, #48]	; (8008ab8 <prvInitialiseTaskLists+0x6c>)
 8008a86:	f7fe f9d8 	bl	8006e3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a8a:	480c      	ldr	r0, [pc, #48]	; (8008abc <prvInitialiseTaskLists+0x70>)
 8008a8c:	f7fe f9d5 	bl	8006e3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a90:	480b      	ldr	r0, [pc, #44]	; (8008ac0 <prvInitialiseTaskLists+0x74>)
 8008a92:	f7fe f9d2 	bl	8006e3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a96:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <prvInitialiseTaskLists+0x78>)
 8008a98:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <prvInitialiseTaskLists+0x64>)
 8008a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <prvInitialiseTaskLists+0x7c>)
 8008a9e:	4a05      	ldr	r2, [pc, #20]	; (8008ab4 <prvInitialiseTaskLists+0x68>)
 8008aa0:	601a      	str	r2, [r3, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200063e0 	.word	0x200063e0
 8008ab0:	2000646c 	.word	0x2000646c
 8008ab4:	20006480 	.word	0x20006480
 8008ab8:	2000649c 	.word	0x2000649c
 8008abc:	200064b0 	.word	0x200064b0
 8008ac0:	200064c8 	.word	0x200064c8
 8008ac4:	20006494 	.word	0x20006494
 8008ac8:	20006498 	.word	0x20006498

08008acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ad2:	e019      	b.n	8008b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ad4:	f000 fbca 	bl	800926c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad8:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <prvCheckTasksWaitingTermination+0x50>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fa32 	bl	8006f4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <prvCheckTasksWaitingTermination+0x54>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	4a0b      	ldr	r2, [pc, #44]	; (8008b20 <prvCheckTasksWaitingTermination+0x54>)
 8008af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008af4:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <prvCheckTasksWaitingTermination+0x58>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	4a0a      	ldr	r2, [pc, #40]	; (8008b24 <prvCheckTasksWaitingTermination+0x58>)
 8008afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008afe:	f000 fbe9 	bl	80092d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f810 	bl	8008b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b08:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <prvCheckTasksWaitingTermination+0x58>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e1      	bne.n	8008ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200064b0 	.word	0x200064b0
 8008b20:	200064dc 	.word	0x200064dc
 8008b24:	200064c4 	.word	0x200064c4

08008b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d108      	bne.n	8008b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fd8a 	bl	8009658 <vPortFree>
				vPortFree( pxTCB );
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fd87 	bl	8009658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b4a:	e01a      	b.n	8008b82 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d103      	bne.n	8008b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fd7e 	bl	8009658 <vPortFree>
	}
 8008b5c:	e011      	b.n	8008b82 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d00c      	beq.n	8008b82 <prvDeleteTCB+0x5a>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	b672      	cpsid	i
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	b662      	cpsie	i
 8008b7c:	60fb      	str	r3, [r7, #12]
}
 8008b7e:	bf00      	nop
 8008b80:	e7fe      	b.n	8008b80 <prvDeleteTCB+0x58>
	}
 8008b82:	bf00      	nop
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b92:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <prvResetNextTaskUnblockTime+0x38>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ba2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ba4:	e008      	b.n	8008bb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba6:	4b07      	ldr	r3, [pc, #28]	; (8008bc4 <prvResetNextTaskUnblockTime+0x38>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4a04      	ldr	r2, [pc, #16]	; (8008bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008bb6:	6013      	str	r3, [r2, #0]
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	20006494 	.word	0x20006494
 8008bc8:	200064fc 	.word	0x200064fc

08008bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bd2:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <xTaskGetSchedulerState+0x34>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d102      	bne.n	8008be0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	607b      	str	r3, [r7, #4]
 8008bde:	e008      	b.n	8008bf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be0:	4b08      	ldr	r3, [pc, #32]	; (8008c04 <xTaskGetSchedulerState+0x38>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d102      	bne.n	8008bee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008be8:	2302      	movs	r3, #2
 8008bea:	607b      	str	r3, [r7, #4]
 8008bec:	e001      	b.n	8008bf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bf2:	687b      	ldr	r3, [r7, #4]
	}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	200064e8 	.word	0x200064e8
 8008c04:	20006504 	.word	0x20006504

08008c08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d069      	beq.n	8008cf2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c22:	4b36      	ldr	r3, [pc, #216]	; (8008cfc <xTaskPriorityInherit+0xf4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d259      	bcs.n	8008ce0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	db06      	blt.n	8008c42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c34:	4b31      	ldr	r3, [pc, #196]	; (8008cfc <xTaskPriorityInherit+0xf4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	f1c3 0207 	rsb	r2, r3, #7
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6959      	ldr	r1, [r3, #20]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4a2b      	ldr	r2, [pc, #172]	; (8008d00 <xTaskPriorityInherit+0xf8>)
 8008c54:	4413      	add	r3, r2
 8008c56:	4299      	cmp	r1, r3
 8008c58:	d13a      	bne.n	8008cd0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe f975 	bl	8006f4e <uxListRemove>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d115      	bne.n	8008c96 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6e:	4924      	ldr	r1, [pc, #144]	; (8008d00 <xTaskPriorityInherit+0xf8>)
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <xTaskPriorityInherit+0x8e>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	2201      	movs	r2, #1
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43da      	mvns	r2, r3
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	; (8008d04 <xTaskPriorityInherit+0xfc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4013      	ands	r3, r2
 8008c92:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <xTaskPriorityInherit+0xfc>)
 8008c94:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c96:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <xTaskPriorityInherit+0xf4>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	409a      	lsls	r2, r3
 8008ca8:	4b16      	ldr	r3, [pc, #88]	; (8008d04 <xTaskPriorityInherit+0xfc>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <xTaskPriorityInherit+0xfc>)
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <xTaskPriorityInherit+0xf8>)
 8008cc0:	441a      	add	r2, r3
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4610      	mov	r0, r2
 8008cca:	f7fe f8e3 	bl	8006e94 <vListInsertEnd>
 8008cce:	e004      	b.n	8008cda <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <xTaskPriorityInherit+0xf4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	e008      	b.n	8008cf2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <xTaskPriorityInherit+0xf4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d201      	bcs.n	8008cf2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
	}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200063dc 	.word	0x200063dc
 8008d00:	200063e0 	.word	0x200063e0
 8008d04:	200064e4 	.word	0x200064e4

08008d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d072      	beq.n	8008e04 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d1e:	4b3c      	ldr	r3, [pc, #240]	; (8008e10 <xTaskPriorityDisinherit+0x108>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d00c      	beq.n	8008d42 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	b672      	cpsid	i
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	b662      	cpsie	i
 8008d3c:	60fb      	str	r3, [r7, #12]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10c      	bne.n	8008d64 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	b672      	cpsid	i
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	b662      	cpsie	i
 8008d5e:	60bb      	str	r3, [r7, #8]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d68:	1e5a      	subs	r2, r3, #1
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d044      	beq.n	8008e04 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d140      	bne.n	8008e04 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe f8e1 	bl	8006f4e <uxListRemove>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d115      	bne.n	8008dbe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d96:	491f      	ldr	r1, [pc, #124]	; (8008e14 <xTaskPriorityDisinherit+0x10c>)
 8008d98:	4613      	mov	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <xTaskPriorityDisinherit+0xb6>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	2201      	movs	r2, #1
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	43da      	mvns	r2, r3
 8008db4:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <xTaskPriorityDisinherit+0x110>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4013      	ands	r3, r2
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <xTaskPriorityDisinherit+0x110>)
 8008dbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dca:	f1c3 0207 	rsb	r2, r3, #7
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	409a      	lsls	r2, r3
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <xTaskPriorityDisinherit+0x110>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	4a0d      	ldr	r2, [pc, #52]	; (8008e18 <xTaskPriorityDisinherit+0x110>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <xTaskPriorityDisinherit+0x10c>)
 8008df2:	441a      	add	r2, r3
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	f7fe f84a 	bl	8006e94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e04:	697b      	ldr	r3, [r7, #20]
	}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	200063dc 	.word	0x200063dc
 8008e14:	200063e0 	.word	0x200063e0
 8008e18:	200064e4 	.word	0x200064e4

08008e1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8087 	beq.w	8008f44 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10c      	bne.n	8008e58 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	b672      	cpsid	i
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	b662      	cpsie	i
 8008e52:	60fb      	str	r3, [r7, #12]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d902      	bls.n	8008e68 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	e002      	b.n	8008e6e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d065      	beq.n	8008f44 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d160      	bne.n	8008f44 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e82:	4b32      	ldr	r3, [pc, #200]	; (8008f4c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d10c      	bne.n	8008ea6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	b672      	cpsid	i
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	b662      	cpsie	i
 8008ea0:	60bb      	str	r3, [r7, #8]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eaa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	db04      	blt.n	8008ec4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	f1c3 0207 	rsb	r2, r3, #7
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	6959      	ldr	r1, [r3, #20]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4a1f      	ldr	r2, [pc, #124]	; (8008f50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ed4:	4413      	add	r3, r2
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	d134      	bne.n	8008f44 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	3304      	adds	r3, #4
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe f835 	bl	8006f4e <uxListRemove>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d115      	bne.n	8008f16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eee:	4918      	ldr	r1, [pc, #96]	; (8008f50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	2201      	movs	r2, #1
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	43da      	mvns	r2, r3
 8008f0c:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4013      	ands	r3, r2
 8008f12:	4a10      	ldr	r2, [pc, #64]	; (8008f54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008f14:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	409a      	lsls	r2, r3
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	4a0b      	ldr	r2, [pc, #44]	; (8008f54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4a06      	ldr	r2, [pc, #24]	; (8008f50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008f36:	441a      	add	r2, r3
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	f7fd ffa8 	bl	8006e94 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f44:	bf00      	nop
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	200063dc 	.word	0x200063dc
 8008f50:	200063e0 	.word	0x200063e0
 8008f54:	200064e4 	.word	0x200064e4

08008f58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f5c:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008f6e:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008f70:	681b      	ldr	r3, [r3, #0]
	}
 8008f72:	4618      	mov	r0, r3
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	200063dc 	.word	0x200063dc

08008f80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f8a:	4b29      	ldr	r3, [pc, #164]	; (8009030 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fd ffd9 	bl	8006f4e <uxListRemove>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10b      	bne.n	8008fba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	2201      	movs	r2, #1
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	43da      	mvns	r2, r3
 8008fb0:	4b21      	ldr	r3, [pc, #132]	; (8009038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	4a20      	ldr	r2, [pc, #128]	; (8009038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fc0:	d10a      	bne.n	8008fd8 <prvAddCurrentTaskToDelayedList+0x58>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fc8:	4b1a      	ldr	r3, [pc, #104]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	481a      	ldr	r0, [pc, #104]	; (800903c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008fd2:	f7fd ff5f 	bl	8006e94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fd6:	e026      	b.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fe0:	4b14      	ldr	r3, [pc, #80]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d209      	bcs.n	8009004 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ff0:	4b13      	ldr	r3, [pc, #76]	; (8009040 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7fd ff6d 	bl	8006edc <vListInsert>
}
 8009002:	e010      	b.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009004:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3304      	adds	r3, #4
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7fd ff63 	bl	8006edc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	429a      	cmp	r2, r3
 800901e:	d202      	bcs.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009020:	4a09      	ldr	r2, [pc, #36]	; (8009048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6013      	str	r3, [r2, #0]
}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200064e0 	.word	0x200064e0
 8009034:	200063dc 	.word	0x200063dc
 8009038:	200064e4 	.word	0x200064e4
 800903c:	200064c8 	.word	0x200064c8
 8009040:	20006498 	.word	0x20006498
 8009044:	20006494 	.word	0x20006494
 8009048:	200064fc 	.word	0x200064fc

0800904c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3b04      	subs	r3, #4
 800905c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b04      	subs	r3, #4
 800906a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b04      	subs	r3, #4
 800907a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800907c:	4a0c      	ldr	r2, [pc, #48]	; (80090b0 <pxPortInitialiseStack+0x64>)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b14      	subs	r3, #20
 8009086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b04      	subs	r3, #4
 8009092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f06f 0202 	mvn.w	r2, #2
 800909a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3b20      	subs	r3, #32
 80090a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090a2:	68fb      	ldr	r3, [r7, #12]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	080090b5 	.word	0x080090b5

080090b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090be:	4b14      	ldr	r3, [pc, #80]	; (8009110 <prvTaskExitError+0x5c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c6:	d00c      	beq.n	80090e2 <prvTaskExitError+0x2e>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	b672      	cpsid	i
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	b662      	cpsie	i
 80090dc:	60fb      	str	r3, [r7, #12]
}
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <prvTaskExitError+0x2c>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	b672      	cpsid	i
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	b662      	cpsie	i
 80090f6:	60bb      	str	r3, [r7, #8]
}
 80090f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090fa:	bf00      	nop
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0fc      	beq.n	80090fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009102:	bf00      	nop
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000020 	.word	0x20000020
	...

08009120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009120:	4b07      	ldr	r3, [pc, #28]	; (8009140 <pxCurrentTCBConst2>)
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	6808      	ldr	r0, [r1, #0]
 8009126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912a:	f380 8809 	msr	PSP, r0
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f04f 0000 	mov.w	r0, #0
 8009136:	f380 8811 	msr	BASEPRI, r0
 800913a:	4770      	bx	lr
 800913c:	f3af 8000 	nop.w

08009140 <pxCurrentTCBConst2>:
 8009140:	200063dc 	.word	0x200063dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop

08009148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009148:	4808      	ldr	r0, [pc, #32]	; (800916c <prvPortStartFirstTask+0x24>)
 800914a:	6800      	ldr	r0, [r0, #0]
 800914c:	6800      	ldr	r0, [r0, #0]
 800914e:	f380 8808 	msr	MSP, r0
 8009152:	f04f 0000 	mov.w	r0, #0
 8009156:	f380 8814 	msr	CONTROL, r0
 800915a:	b662      	cpsie	i
 800915c:	b661      	cpsie	f
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	df00      	svc	0
 8009168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800916a:	bf00      	nop
 800916c:	e000ed08 	.word	0xe000ed08

08009170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009176:	4b37      	ldr	r3, [pc, #220]	; (8009254 <xPortStartScheduler+0xe4>)
 8009178:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	b2db      	uxtb	r3, r3
 8009180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	22ff      	movs	r2, #255	; 0xff
 8009186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009198:	b2da      	uxtb	r2, r3
 800919a:	4b2f      	ldr	r3, [pc, #188]	; (8009258 <xPortStartScheduler+0xe8>)
 800919c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800919e:	4b2f      	ldr	r3, [pc, #188]	; (800925c <xPortStartScheduler+0xec>)
 80091a0:	2207      	movs	r2, #7
 80091a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091a4:	e009      	b.n	80091ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80091a6:	4b2d      	ldr	r3, [pc, #180]	; (800925c <xPortStartScheduler+0xec>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	4a2b      	ldr	r2, [pc, #172]	; (800925c <xPortStartScheduler+0xec>)
 80091ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c2:	2b80      	cmp	r3, #128	; 0x80
 80091c4:	d0ef      	beq.n	80091a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091c6:	4b25      	ldr	r3, [pc, #148]	; (800925c <xPortStartScheduler+0xec>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f1c3 0307 	rsb	r3, r3, #7
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d00c      	beq.n	80091ec <xPortStartScheduler+0x7c>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	b672      	cpsid	i
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	b662      	cpsie	i
 80091e6:	60bb      	str	r3, [r7, #8]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091ec:	4b1b      	ldr	r3, [pc, #108]	; (800925c <xPortStartScheduler+0xec>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	021b      	lsls	r3, r3, #8
 80091f2:	4a1a      	ldr	r2, [pc, #104]	; (800925c <xPortStartScheduler+0xec>)
 80091f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <xPortStartScheduler+0xec>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091fe:	4a17      	ldr	r2, [pc, #92]	; (800925c <xPortStartScheduler+0xec>)
 8009200:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	b2da      	uxtb	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800920a:	4b15      	ldr	r3, [pc, #84]	; (8009260 <xPortStartScheduler+0xf0>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a14      	ldr	r2, [pc, #80]	; (8009260 <xPortStartScheduler+0xf0>)
 8009210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009214:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009216:	4b12      	ldr	r3, [pc, #72]	; (8009260 <xPortStartScheduler+0xf0>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a11      	ldr	r2, [pc, #68]	; (8009260 <xPortStartScheduler+0xf0>)
 800921c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009220:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009222:	f000 f8dd 	bl	80093e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009226:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <xPortStartScheduler+0xf4>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800922c:	f000 f8fc 	bl	8009428 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009230:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <xPortStartScheduler+0xf8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a0c      	ldr	r2, [pc, #48]	; (8009268 <xPortStartScheduler+0xf8>)
 8009236:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800923a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800923c:	f7ff ff84 	bl	8009148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009240:	f7ff fa7c 	bl	800873c <vTaskSwitchContext>
	prvTaskExitError();
 8009244:	f7ff ff36 	bl	80090b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	e000e400 	.word	0xe000e400
 8009258:	20006508 	.word	0x20006508
 800925c:	2000650c 	.word	0x2000650c
 8009260:	e000ed20 	.word	0xe000ed20
 8009264:	20000020 	.word	0x20000020
 8009268:	e000ef34 	.word	0xe000ef34

0800926c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	b672      	cpsid	i
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	b662      	cpsie	i
 8009286:	607b      	str	r3, [r7, #4]
}
 8009288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800928a:	4b10      	ldr	r3, [pc, #64]	; (80092cc <vPortEnterCritical+0x60>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	4a0e      	ldr	r2, [pc, #56]	; (80092cc <vPortEnterCritical+0x60>)
 8009292:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009294:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <vPortEnterCritical+0x60>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d111      	bne.n	80092c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800929c:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <vPortEnterCritical+0x64>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00c      	beq.n	80092c0 <vPortEnterCritical+0x54>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	b672      	cpsid	i
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	b662      	cpsie	i
 80092ba:	603b      	str	r3, [r7, #0]
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <vPortEnterCritical+0x52>
	}
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	20000020 	.word	0x20000020
 80092d0:	e000ed04 	.word	0xe000ed04

080092d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092da:	4b13      	ldr	r3, [pc, #76]	; (8009328 <vPortExitCritical+0x54>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10c      	bne.n	80092fc <vPortExitCritical+0x28>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	b672      	cpsid	i
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	b662      	cpsie	i
 80092f6:	607b      	str	r3, [r7, #4]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80092fc:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <vPortExitCritical+0x54>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3b01      	subs	r3, #1
 8009302:	4a09      	ldr	r2, [pc, #36]	; (8009328 <vPortExitCritical+0x54>)
 8009304:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009306:	4b08      	ldr	r3, [pc, #32]	; (8009328 <vPortExitCritical+0x54>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d105      	bne.n	800931a <vPortExitCritical+0x46>
 800930e:	2300      	movs	r3, #0
 8009310:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	f383 8811 	msr	BASEPRI, r3
}
 8009318:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	20000020 	.word	0x20000020
 800932c:	00000000 	.word	0x00000000

08009330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009330:	f3ef 8009 	mrs	r0, PSP
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	4b15      	ldr	r3, [pc, #84]	; (8009390 <pxCurrentTCBConst>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	f01e 0f10 	tst.w	lr, #16
 8009340:	bf08      	it	eq
 8009342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934a:	6010      	str	r0, [r2, #0]
 800934c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009354:	b672      	cpsid	i
 8009356:	f380 8811 	msr	BASEPRI, r0
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	b662      	cpsie	i
 8009364:	f7ff f9ea 	bl	800873c <vTaskSwitchContext>
 8009368:	f04f 0000 	mov.w	r0, #0
 800936c:	f380 8811 	msr	BASEPRI, r0
 8009370:	bc09      	pop	{r0, r3}
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	f01e 0f10 	tst.w	lr, #16
 800937e:	bf08      	it	eq
 8009380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009384:	f380 8809 	msr	PSP, r0
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop

08009390 <pxCurrentTCBConst>:
 8009390:	200063dc 	.word	0x200063dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	b672      	cpsid	i
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	b662      	cpsie	i
 80093b2:	607b      	str	r3, [r7, #4]
}
 80093b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093b6:	f7ff f907 	bl	80085c8 <xTaskIncrementTick>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093c0:	4b06      	ldr	r3, [pc, #24]	; (80093dc <SysTick_Handler+0x44>)
 80093c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	2300      	movs	r3, #0
 80093ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	f383 8811 	msr	BASEPRI, r3
}
 80093d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093e4:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <vPortSetupTimerInterrupt+0x34>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093ea:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <vPortSetupTimerInterrupt+0x38>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093f0:	4b0a      	ldr	r3, [pc, #40]	; (800941c <vPortSetupTimerInterrupt+0x3c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a0a      	ldr	r2, [pc, #40]	; (8009420 <vPortSetupTimerInterrupt+0x40>)
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	099b      	lsrs	r3, r3, #6
 80093fc:	4a09      	ldr	r2, [pc, #36]	; (8009424 <vPortSetupTimerInterrupt+0x44>)
 80093fe:	3b01      	subs	r3, #1
 8009400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009402:	4b04      	ldr	r3, [pc, #16]	; (8009414 <vPortSetupTimerInterrupt+0x34>)
 8009404:	2207      	movs	r2, #7
 8009406:	601a      	str	r2, [r3, #0]
}
 8009408:	bf00      	nop
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	e000e010 	.word	0xe000e010
 8009418:	e000e018 	.word	0xe000e018
 800941c:	20000000 	.word	0x20000000
 8009420:	10624dd3 	.word	0x10624dd3
 8009424:	e000e014 	.word	0xe000e014

08009428 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009428:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009438 <vPortEnableVFP+0x10>
 800942c:	6801      	ldr	r1, [r0, #0]
 800942e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009432:	6001      	str	r1, [r0, #0]
 8009434:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009436:	bf00      	nop
 8009438:	e000ed88 	.word	0xe000ed88

0800943c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009442:	f3ef 8305 	mrs	r3, IPSR
 8009446:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b0f      	cmp	r3, #15
 800944c:	d916      	bls.n	800947c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800944e:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <vPortValidateInterruptPriority+0x78>)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009458:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <vPortValidateInterruptPriority+0x7c>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	7afa      	ldrb	r2, [r7, #11]
 800945e:	429a      	cmp	r2, r3
 8009460:	d20c      	bcs.n	800947c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	b672      	cpsid	i
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	b662      	cpsie	i
 8009476:	607b      	str	r3, [r7, #4]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800947c:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <vPortValidateInterruptPriority+0x80>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009484:	4b0e      	ldr	r3, [pc, #56]	; (80094c0 <vPortValidateInterruptPriority+0x84>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d90c      	bls.n	80094a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	b672      	cpsid	i
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	b662      	cpsie	i
 80094a0:	603b      	str	r3, [r7, #0]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <vPortValidateInterruptPriority+0x68>
	}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	e000e3f0 	.word	0xe000e3f0
 80094b8:	20006508 	.word	0x20006508
 80094bc:	e000ed0c 	.word	0xe000ed0c
 80094c0:	2000650c 	.word	0x2000650c

080094c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b08a      	sub	sp, #40	; 0x28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094d0:	f7fe ffac 	bl	800842c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094d4:	4b5b      	ldr	r3, [pc, #364]	; (8009644 <pvPortMalloc+0x180>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094dc:	f000 f91a 	bl	8009714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094e0:	4b59      	ldr	r3, [pc, #356]	; (8009648 <pvPortMalloc+0x184>)
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4013      	ands	r3, r2
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f040 8092 	bne.w	8009612 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d01f      	beq.n	8009534 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80094f4:	2208      	movs	r2, #8
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	2b00      	cmp	r3, #0
 8009504:	d016      	beq.n	8009534 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f023 0307 	bic.w	r3, r3, #7
 800950c:	3308      	adds	r3, #8
 800950e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00c      	beq.n	8009534 <pvPortMalloc+0x70>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	b672      	cpsid	i
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	b662      	cpsie	i
 800952e:	617b      	str	r3, [r7, #20]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d06b      	beq.n	8009612 <pvPortMalloc+0x14e>
 800953a:	4b44      	ldr	r3, [pc, #272]	; (800964c <pvPortMalloc+0x188>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d866      	bhi.n	8009612 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009544:	4b42      	ldr	r3, [pc, #264]	; (8009650 <pvPortMalloc+0x18c>)
 8009546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009548:	4b41      	ldr	r3, [pc, #260]	; (8009650 <pvPortMalloc+0x18c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800954e:	e004      	b.n	800955a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d903      	bls.n	800956c <pvPortMalloc+0xa8>
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f1      	bne.n	8009550 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800956c:	4b35      	ldr	r3, [pc, #212]	; (8009644 <pvPortMalloc+0x180>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009572:	429a      	cmp	r2, r3
 8009574:	d04d      	beq.n	8009612 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2208      	movs	r2, #8
 800957c:	4413      	add	r3, r2
 800957e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	2308      	movs	r3, #8
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	429a      	cmp	r2, r3
 8009596:	d921      	bls.n	80095dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00c      	beq.n	80095c4 <pvPortMalloc+0x100>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	b672      	cpsid	i
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	b662      	cpsie	i
 80095be:	613b      	str	r3, [r7, #16]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	1ad2      	subs	r2, r2, r3
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095d6:	69b8      	ldr	r0, [r7, #24]
 80095d8:	f000 f8fe 	bl	80097d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095dc:	4b1b      	ldr	r3, [pc, #108]	; (800964c <pvPortMalloc+0x188>)
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	4a19      	ldr	r2, [pc, #100]	; (800964c <pvPortMalloc+0x188>)
 80095e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095ea:	4b18      	ldr	r3, [pc, #96]	; (800964c <pvPortMalloc+0x188>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4b19      	ldr	r3, [pc, #100]	; (8009654 <pvPortMalloc+0x190>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d203      	bcs.n	80095fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095f6:	4b15      	ldr	r3, [pc, #84]	; (800964c <pvPortMalloc+0x188>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a16      	ldr	r2, [pc, #88]	; (8009654 <pvPortMalloc+0x190>)
 80095fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	4b11      	ldr	r3, [pc, #68]	; (8009648 <pvPortMalloc+0x184>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	431a      	orrs	r2, r3
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009612:	f7fe ff19 	bl	8008448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00c      	beq.n	800963a <pvPortMalloc+0x176>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	b672      	cpsid	i
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	b662      	cpsie	i
 8009634:	60fb      	str	r3, [r7, #12]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <pvPortMalloc+0x174>
	return pvReturn;
 800963a:	69fb      	ldr	r3, [r7, #28]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3728      	adds	r7, #40	; 0x28
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	2000a118 	.word	0x2000a118
 8009648:	2000a124 	.word	0x2000a124
 800964c:	2000a11c 	.word	0x2000a11c
 8009650:	2000a110 	.word	0x2000a110
 8009654:	2000a120 	.word	0x2000a120

08009658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d04c      	beq.n	8009704 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800966a:	2308      	movs	r3, #8
 800966c:	425b      	negs	r3, r3
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	4413      	add	r3, r2
 8009672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4b23      	ldr	r3, [pc, #140]	; (800970c <vPortFree+0xb4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4013      	ands	r3, r2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10c      	bne.n	80096a0 <vPortFree+0x48>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	b672      	cpsid	i
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	b662      	cpsie	i
 800969a:	60fb      	str	r3, [r7, #12]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00c      	beq.n	80096c2 <vPortFree+0x6a>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	b672      	cpsid	i
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	b662      	cpsie	i
 80096bc:	60bb      	str	r3, [r7, #8]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	4b11      	ldr	r3, [pc, #68]	; (800970c <vPortFree+0xb4>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4013      	ands	r3, r2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d019      	beq.n	8009704 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d115      	bne.n	8009704 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	4b0b      	ldr	r3, [pc, #44]	; (800970c <vPortFree+0xb4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	401a      	ands	r2, r3
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096e8:	f7fe fea0 	bl	800842c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <vPortFree+0xb8>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4413      	add	r3, r2
 80096f6:	4a06      	ldr	r2, [pc, #24]	; (8009710 <vPortFree+0xb8>)
 80096f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096fa:	6938      	ldr	r0, [r7, #16]
 80096fc:	f000 f86c 	bl	80097d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009700:	f7fe fea2 	bl	8008448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009704:	bf00      	nop
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	2000a124 	.word	0x2000a124
 8009710:	2000a11c 	.word	0x2000a11c

08009714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800971a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800971e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009720:	4b27      	ldr	r3, [pc, #156]	; (80097c0 <prvHeapInit+0xac>)
 8009722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00c      	beq.n	8009748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3307      	adds	r3, #7
 8009732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	4a1f      	ldr	r2, [pc, #124]	; (80097c0 <prvHeapInit+0xac>)
 8009744:	4413      	add	r3, r2
 8009746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800974c:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <prvHeapInit+0xb0>)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <prvHeapInit+0xb0>)
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	4413      	add	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009760:	2208      	movs	r2, #8
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	1a9b      	subs	r3, r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0307 	bic.w	r3, r3, #7
 800976e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a15      	ldr	r2, [pc, #84]	; (80097c8 <prvHeapInit+0xb4>)
 8009774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009776:	4b14      	ldr	r3, [pc, #80]	; (80097c8 <prvHeapInit+0xb4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2200      	movs	r2, #0
 800977c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800977e:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <prvHeapInit+0xb4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2200      	movs	r2, #0
 8009784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	1ad2      	subs	r2, r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009794:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <prvHeapInit+0xb4>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a0a      	ldr	r2, [pc, #40]	; (80097cc <prvHeapInit+0xb8>)
 80097a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <prvHeapInit+0xbc>)
 80097aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <prvHeapInit+0xc0>)
 80097ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097b2:	601a      	str	r2, [r3, #0]
}
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	20006510 	.word	0x20006510
 80097c4:	2000a110 	.word	0x2000a110
 80097c8:	2000a118 	.word	0x2000a118
 80097cc:	2000a120 	.word	0x2000a120
 80097d0:	2000a11c 	.word	0x2000a11c
 80097d4:	2000a124 	.word	0x2000a124

080097d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097e0:	4b28      	ldr	r3, [pc, #160]	; (8009884 <prvInsertBlockIntoFreeList+0xac>)
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e002      	b.n	80097ec <prvInsertBlockIntoFreeList+0x14>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d8f7      	bhi.n	80097e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	4413      	add	r3, r2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d108      	bne.n	800981a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	441a      	add	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	441a      	add	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d118      	bne.n	8009860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b15      	ldr	r3, [pc, #84]	; (8009888 <prvInsertBlockIntoFreeList+0xb0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	429a      	cmp	r2, r3
 8009838:	d00d      	beq.n	8009856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	441a      	add	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e008      	b.n	8009868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009856:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <prvInsertBlockIntoFreeList+0xb0>)
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	e003      	b.n	8009868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	429a      	cmp	r2, r3
 800986e:	d002      	beq.n	8009876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	2000a110 	.word	0x2000a110
 8009888:	2000a118 	.word	0x2000a118

0800988c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	330c      	adds	r3, #12
 800989c:	461a      	mov	r2, r3
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f002 f931 	bl	800bb08 <tcpip_send_msg_wait_sem>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80098aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <netconn_apimsg+0x2e>
    return apimsg->err;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80098b8:	e001      	b.n	80098be <netconn_apimsg+0x32>
  }
  return err;
 80098ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08c      	sub	sp, #48	; 0x30
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	603a      	str	r2, [r7, #0]
 80098d2:	71fb      	strb	r3, [r7, #7]
 80098d4:	460b      	mov	r3, r1
 80098d6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 ffaf 	bl	800a840 <netconn_alloc>
 80098e2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d054      	beq.n	8009994 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80098ea:	79bb      	ldrb	r3, [r7, #6]
 80098ec:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	4619      	mov	r1, r3
 80098f8:	4829      	ldr	r0, [pc, #164]	; (80099a0 <netconn_new_with_proto_and_callback+0xd8>)
 80098fa:	f7ff ffc7 	bl	800988c <netconn_apimsg>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009904:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009908:	2b00      	cmp	r3, #0
 800990a:	d043      	beq.n	8009994 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <netconn_new_with_proto_and_callback+0x58>
 8009914:	4b23      	ldr	r3, [pc, #140]	; (80099a4 <netconn_new_with_proto_and_callback+0xdc>)
 8009916:	22a3      	movs	r2, #163	; 0xa3
 8009918:	4923      	ldr	r1, [pc, #140]	; (80099a8 <netconn_new_with_proto_and_callback+0xe0>)
 800991a:	4824      	ldr	r0, [pc, #144]	; (80099ac <netconn_new_with_proto_and_callback+0xe4>)
 800991c:	f00f fa18 	bl	8018d50 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	3310      	adds	r3, #16
 8009924:	4618      	mov	r0, r3
 8009926:	f00d f9a8 	bl	8016c7a <sys_mbox_valid>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <netconn_new_with_proto_and_callback+0x74>
 8009930:	4b1c      	ldr	r3, [pc, #112]	; (80099a4 <netconn_new_with_proto_and_callback+0xdc>)
 8009932:	22a4      	movs	r2, #164	; 0xa4
 8009934:	491e      	ldr	r1, [pc, #120]	; (80099b0 <netconn_new_with_proto_and_callback+0xe8>)
 8009936:	481d      	ldr	r0, [pc, #116]	; (80099ac <netconn_new_with_proto_and_callback+0xe4>)
 8009938:	f00f fa0a 	bl	8018d50 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	3314      	adds	r3, #20
 8009940:	4618      	mov	r0, r3
 8009942:	f00d f99a 	bl	8016c7a <sys_mbox_valid>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <netconn_new_with_proto_and_callback+0x90>
 800994c:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <netconn_new_with_proto_and_callback+0xdc>)
 800994e:	22a6      	movs	r2, #166	; 0xa6
 8009950:	4918      	ldr	r1, [pc, #96]	; (80099b4 <netconn_new_with_proto_and_callback+0xec>)
 8009952:	4816      	ldr	r0, [pc, #88]	; (80099ac <netconn_new_with_proto_and_callback+0xe4>)
 8009954:	f00f f9fc 	bl	8018d50 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995a:	330c      	adds	r3, #12
 800995c:	4618      	mov	r0, r3
 800995e:	f00d fa1d 	bl	8016d9c <sys_sem_valid>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d105      	bne.n	8009974 <netconn_new_with_proto_and_callback+0xac>
 8009968:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <netconn_new_with_proto_and_callback+0xdc>)
 800996a:	22a9      	movs	r2, #169	; 0xa9
 800996c:	4912      	ldr	r1, [pc, #72]	; (80099b8 <netconn_new_with_proto_and_callback+0xf0>)
 800996e:	480f      	ldr	r0, [pc, #60]	; (80099ac <netconn_new_with_proto_and_callback+0xe4>)
 8009970:	f00f f9ee 	bl	8018d50 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	330c      	adds	r3, #12
 8009978:	4618      	mov	r0, r3
 800997a:	f00d fa02 	bl	8016d82 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	3310      	adds	r3, #16
 8009982:	4618      	mov	r0, r3
 8009984:	f00d f8f2 	bl	8016b6c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800998a:	2007      	movs	r0, #7
 800998c:	f002 fe7a 	bl	800c684 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009990:	2300      	movs	r3, #0
 8009992:	e000      	b.n	8009996 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009996:	4618      	mov	r0, r3
 8009998:	3730      	adds	r7, #48	; 0x30
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	0800a815 	.word	0x0800a815
 80099a4:	0801a15c 	.word	0x0801a15c
 80099a8:	0801a190 	.word	0x0801a190
 80099ac:	0801a1b4 	.word	0x0801a1b4
 80099b0:	0801a1dc 	.word	0x0801a1dc
 80099b4:	0801a1f4 	.word	0x0801a1f4
 80099b8:	0801a218 	.word	0x0801a218

080099bc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08c      	sub	sp, #48	; 0x30
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <netconn_prepare_delete+0x12>
    return ERR_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e014      	b.n	80099f8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80099d2:	2329      	movs	r3, #41	; 0x29
 80099d4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80099d6:	f107 030c 	add.w	r3, r7, #12
 80099da:	4619      	mov	r1, r3
 80099dc:	4808      	ldr	r0, [pc, #32]	; (8009a00 <netconn_prepare_delete+0x44>)
 80099de:	f7ff ff55 	bl	800988c <netconn_apimsg>
 80099e2:	4603      	mov	r3, r0
 80099e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80099e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <netconn_prepare_delete+0x3a>
    return err;
 80099f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099f4:	e000      	b.n	80099f8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3730      	adds	r7, #48	; 0x30
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	0800ad81 	.word	0x0800ad81

08009a04 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <netconn_delete+0x12>
    return ERR_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e00d      	b.n	8009a32 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff ffd0 	bl	80099bc <netconn_prepare_delete>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <netconn_delete+0x2a>
    netconn_free(conn);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 ff77 	bl	800a91c <netconn_free>
  }
  return err;
 8009a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08e      	sub	sp, #56	; 0x38
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	4613      	mov	r3, r2
 8009a48:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d109      	bne.n	8009a64 <netconn_connect+0x28>
 8009a50:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <netconn_connect+0x5c>)
 8009a52:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009a56:	4911      	ldr	r1, [pc, #68]	; (8009a9c <netconn_connect+0x60>)
 8009a58:	4811      	ldr	r0, [pc, #68]	; (8009aa0 <netconn_connect+0x64>)
 8009a5a:	f00f f979 	bl	8018d50 <iprintf>
 8009a5e:	f06f 030f 	mvn.w	r3, #15
 8009a62:	e015      	b.n	8009a90 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8009a6a:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <netconn_connect+0x68>)
 8009a6c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8009a7a:	f107 0314 	add.w	r3, r7, #20
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <netconn_connect+0x6c>)
 8009a82:	f7ff ff03 	bl	800988c <netconn_apimsg>
 8009a86:	4603      	mov	r3, r0
 8009a88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009a8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3738      	adds	r7, #56	; 0x38
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	0801a15c 	.word	0x0801a15c
 8009a9c:	0801a2d0 	.word	0x0801a2d0
 8009aa0:	0801a1b4 	.word	0x0801a1b4
 8009aa4:	0801d6a4 	.word	0x0801d6a4
 8009aa8:	0800b069 	.word	0x0800b069

08009aac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d109      	bne.n	8009ad8 <netconn_recv_data+0x2c>
 8009ac4:	4b58      	ldr	r3, [pc, #352]	; (8009c28 <netconn_recv_data+0x17c>)
 8009ac6:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009aca:	4958      	ldr	r1, [pc, #352]	; (8009c2c <netconn_recv_data+0x180>)
 8009acc:	4858      	ldr	r0, [pc, #352]	; (8009c30 <netconn_recv_data+0x184>)
 8009ace:	f00f f93f 	bl	8018d50 <iprintf>
 8009ad2:	f06f 030f 	mvn.w	r3, #15
 8009ad6:	e0a2      	b.n	8009c1e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d109      	bne.n	8009af8 <netconn_recv_data+0x4c>
 8009ae4:	4b50      	ldr	r3, [pc, #320]	; (8009c28 <netconn_recv_data+0x17c>)
 8009ae6:	f240 224a 	movw	r2, #586	; 0x24a
 8009aea:	4952      	ldr	r1, [pc, #328]	; (8009c34 <netconn_recv_data+0x188>)
 8009aec:	4850      	ldr	r0, [pc, #320]	; (8009c30 <netconn_recv_data+0x184>)
 8009aee:	f00f f92f 	bl	8018d50 <iprintf>
 8009af2:	f06f 030f 	mvn.w	r3, #15
 8009af6:	e092      	b.n	8009c1e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3310      	adds	r3, #16
 8009afc:	4618      	mov	r0, r3
 8009afe:	f00d f8bc 	bl	8016c7a <sys_mbox_valid>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10e      	bne.n	8009b26 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fad4 	bl	800a0b6 <netconn_err>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009b12:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009b1a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009b1e:	e07e      	b.n	8009c1e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009b20:	f06f 030a 	mvn.w	r3, #10
 8009b24:	e07b      	b.n	8009c1e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	7f1b      	ldrb	r3, [r3, #28]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10f      	bne.n	8009b52 <netconn_recv_data+0xa6>
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	7f1b      	ldrb	r3, [r3, #28]
 8009b40:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d104      	bne.n	8009b52 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d023      	beq.n	8009b9a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3310      	adds	r3, #16
 8009b56:	f107 0218 	add.w	r2, r7, #24
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f00d f870 	bl	8016c42 <sys_arch_mbox_tryfetch>
 8009b62:	4603      	mov	r3, r0
 8009b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b68:	d11f      	bne.n	8009baa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 faa3 	bl	800a0b6 <netconn_err>
 8009b70:	4603      	mov	r3, r0
 8009b72:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009b74:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009b7c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009b80:	e04d      	b.n	8009c1e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	7f1b      	ldrb	r3, [r3, #28]
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009b8e:	f06f 030a 	mvn.w	r3, #10
 8009b92:	e044      	b.n	8009c1e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009b94:	f06f 0306 	mvn.w	r3, #6
 8009b98:	e041      	b.n	8009c1e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3310      	adds	r3, #16
 8009b9e:	f107 0118 	add.w	r1, r7, #24
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f00d f80d 	bl	8016bc4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d117      	bne.n	8009be6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	f107 0217 	add.w	r2, r7, #23
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 faca 	bl	800a158 <lwip_netconn_is_err_msg>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d009      	beq.n	8009bde <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009bca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bce:	f113 0f0f 	cmn.w	r3, #15
 8009bd2:	d101      	bne.n	8009bd8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e022      	b.n	8009c1e <netconn_recv_data+0x172>
      }
      return err;
 8009bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bdc:	e01f      	b.n	8009c1e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	891b      	ldrh	r3, [r3, #8]
 8009be2:	83fb      	strh	r3, [r7, #30]
 8009be4:	e00d      	b.n	8009c02 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d106      	bne.n	8009bfa <netconn_recv_data+0x14e>
 8009bec:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <netconn_recv_data+0x17c>)
 8009bee:	f240 2291 	movw	r2, #657	; 0x291
 8009bf2:	4911      	ldr	r1, [pc, #68]	; (8009c38 <netconn_recv_data+0x18c>)
 8009bf4:	480e      	ldr	r0, [pc, #56]	; (8009c30 <netconn_recv_data+0x184>)
 8009bf6:	f00f f8ab 	bl	8018d50 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	891b      	ldrh	r3, [r3, #8]
 8009c00:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d005      	beq.n	8009c16 <netconn_recv_data+0x16a>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0e:	8bfa      	ldrh	r2, [r7, #30]
 8009c10:	2101      	movs	r1, #1
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3720      	adds	r7, #32
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	0801a15c 	.word	0x0801a15c
 8009c2c:	0801a374 	.word	0x0801a374
 8009c30:	0801a1b4 	.word	0x0801a1b4
 8009c34:	0801a394 	.word	0x0801a394
 8009c38:	0801a3b0 	.word	0x0801a3b0

08009c3c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d005      	beq.n	8009c5a <netconn_tcp_recvd_msg+0x1e>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c56:	2b10      	cmp	r3, #16
 8009c58:	d009      	beq.n	8009c6e <netconn_tcp_recvd_msg+0x32>
 8009c5a:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <netconn_tcp_recvd_msg+0x50>)
 8009c5c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009c60:	490b      	ldr	r1, [pc, #44]	; (8009c90 <netconn_tcp_recvd_msg+0x54>)
 8009c62:	480c      	ldr	r0, [pc, #48]	; (8009c94 <netconn_tcp_recvd_msg+0x58>)
 8009c64:	f00f f874 	bl	8018d50 <iprintf>
 8009c68:	f06f 030f 	mvn.w	r3, #15
 8009c6c:	e00a      	b.n	8009c84 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009c7a:	6879      	ldr	r1, [r7, #4]
 8009c7c:	4806      	ldr	r0, [pc, #24]	; (8009c98 <netconn_tcp_recvd_msg+0x5c>)
 8009c7e:	f7ff fe05 	bl	800988c <netconn_apimsg>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	0801a15c 	.word	0x0801a15c
 8009c90:	0801a3bc 	.word	0x0801a3bc
 8009c94:	0801a1b4 	.word	0x0801a1b4
 8009c98:	0800b1e5 	.word	0x0800b1e5

08009c9c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b090      	sub	sp, #64	; 0x40
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3310      	adds	r3, #16
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f00c ffe3 	bl	8016c7a <sys_mbox_valid>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d102      	bne.n	8009cc0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009cba:	f06f 030a 	mvn.w	r3, #10
 8009cbe:	e06d      	b.n	8009d9c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	7f1b      	ldrb	r3, [r3, #28]
 8009cc4:	b25b      	sxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da07      	bge.n	8009cda <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	7f1b      	ldrb	r3, [r3, #28]
 8009cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009cd8:	e039      	b.n	8009d4e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7ff fee3 	bl	8009aac <netconn_recv_data>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009cec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009cf4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009cf8:	e050      	b.n	8009d9c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10e      	bne.n	8009d28 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <netconn_recv_data_tcp+0x7a>
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	891b      	ldrh	r3, [r3, #8]
 8009d14:	e000      	b.n	8009d18 <netconn_recv_data_tcp+0x7c>
 8009d16:	2301      	movs	r3, #1
 8009d18:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d1c:	f107 0214 	add.w	r2, r7, #20
 8009d20:	4619      	mov	r1, r3
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff ff8a 	bl	8009c3c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d134      	bne.n	8009d98 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	f003 0310 	and.w	r3, r3, #16
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d009      	beq.n	8009d4c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	7f1b      	ldrb	r3, [r3, #28]
 8009d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009d46:	f06f 0306 	mvn.w	r3, #6
 8009d4a:	e027      	b.n	8009d9c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009d4c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <netconn_recv_data_tcp+0xc6>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10f      	bne.n	8009d8a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f9a3 	bl	800a0b6 <netconn_err>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009d76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <netconn_recv_data_tcp+0xe8>
          return err;
 8009d7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d82:	e00b      	b.n	8009d9c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009d84:	f06f 030d 	mvn.w	r3, #13
 8009d88:	e008      	b.n	8009d9c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 f955 	bl	800a03c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009d92:	f06f 030e 	mvn.w	r3, #14
 8009d96:	e001      	b.n	8009d9c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009d98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3740      	adds	r7, #64	; 0x40
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d109      	bne.n	8009dcc <netconn_recv+0x28>
 8009db8:	4b32      	ldr	r3, [pc, #200]	; (8009e84 <netconn_recv+0xe0>)
 8009dba:	f240 3263 	movw	r2, #867	; 0x363
 8009dbe:	4932      	ldr	r1, [pc, #200]	; (8009e88 <netconn_recv+0xe4>)
 8009dc0:	4832      	ldr	r0, [pc, #200]	; (8009e8c <netconn_recv+0xe8>)
 8009dc2:	f00e ffc5 	bl	8018d50 <iprintf>
 8009dc6:	f06f 030f 	mvn.w	r3, #15
 8009dca:	e056      	b.n	8009e7a <netconn_recv+0xd6>
  *new_buf = NULL;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d109      	bne.n	8009dec <netconn_recv+0x48>
 8009dd8:	4b2a      	ldr	r3, [pc, #168]	; (8009e84 <netconn_recv+0xe0>)
 8009dda:	f240 3265 	movw	r2, #869	; 0x365
 8009dde:	492c      	ldr	r1, [pc, #176]	; (8009e90 <netconn_recv+0xec>)
 8009de0:	482a      	ldr	r0, [pc, #168]	; (8009e8c <netconn_recv+0xe8>)
 8009de2:	f00e ffb5 	bl	8018d50 <iprintf>
 8009de6:	f06f 030f 	mvn.w	r3, #15
 8009dea:	e046      	b.n	8009e7a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009df4:	2b10      	cmp	r3, #16
 8009df6:	d13a      	bne.n	8009e6e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009dfc:	2006      	movs	r0, #6
 8009dfe:	f002 fbcb 	bl	800c598 <memp_malloc>
 8009e02:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <netconn_recv+0x6c>
      return ERR_MEM;
 8009e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e0e:	e034      	b.n	8009e7a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009e10:	f107 030c 	add.w	r3, r7, #12
 8009e14:	2200      	movs	r2, #0
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff ff3f 	bl	8009c9c <netconn_recv_data_tcp>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009e22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009e2a:	6979      	ldr	r1, [r7, #20]
 8009e2c:	2006      	movs	r0, #6
 8009e2e:	f002 fc29 	bl	800c684 <memp_free>
      return err;
 8009e32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e36:	e020      	b.n	8009e7a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <netconn_recv+0xa8>
 8009e3e:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <netconn_recv+0xe0>)
 8009e40:	f240 3279 	movw	r2, #889	; 0x379
 8009e44:	4913      	ldr	r1, [pc, #76]	; (8009e94 <netconn_recv+0xf0>)
 8009e46:	4811      	ldr	r0, [pc, #68]	; (8009e8c <netconn_recv+0xe8>)
 8009e48:	f00e ff82 	bl	8018d50 <iprintf>

    buf->p = p;
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2200      	movs	r2, #0
 8009e62:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e005      	b.n	8009e7a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009e6e:	2200      	movs	r2, #0
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7ff fe1a 	bl	8009aac <netconn_recv_data>
 8009e78:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	0801a15c 	.word	0x0801a15c
 8009e88:	0801a374 	.word	0x0801a374
 8009e8c:	0801a1b4 	.word	0x0801a1b4
 8009e90:	0801a394 	.word	0x0801a394
 8009e94:	0801a40c 	.word	0x0801a40c

08009e98 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009eae:	78fa      	ldrb	r2, [r7, #3]
 8009eb0:	f107 0110 	add.w	r1, r7, #16
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	2201      	movs	r2, #1
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 f805 	bl	8009ecc <netconn_write_vectors_partly>
 8009ec2:	4603      	mov	r3, r0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b092      	sub	sp, #72	; 0x48
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	461a      	mov	r2, r3
 8009eda:	460b      	mov	r3, r1
 8009edc:	80fb      	strh	r3, [r7, #6]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d109      	bne.n	8009efc <netconn_write_vectors_partly+0x30>
 8009ee8:	4b4e      	ldr	r3, [pc, #312]	; (800a024 <netconn_write_vectors_partly+0x158>)
 8009eea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009eee:	494e      	ldr	r1, [pc, #312]	; (800a028 <netconn_write_vectors_partly+0x15c>)
 8009ef0:	484e      	ldr	r0, [pc, #312]	; (800a02c <netconn_write_vectors_partly+0x160>)
 8009ef2:	f00e ff2d 	bl	8018d50 <iprintf>
 8009ef6:	f06f 030f 	mvn.w	r3, #15
 8009efa:	e08e      	b.n	800a01a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f04:	2b10      	cmp	r3, #16
 8009f06:	d009      	beq.n	8009f1c <netconn_write_vectors_partly+0x50>
 8009f08:	4b46      	ldr	r3, [pc, #280]	; (800a024 <netconn_write_vectors_partly+0x158>)
 8009f0a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009f0e:	4948      	ldr	r1, [pc, #288]	; (800a030 <netconn_write_vectors_partly+0x164>)
 8009f10:	4846      	ldr	r0, [pc, #280]	; (800a02c <netconn_write_vectors_partly+0x160>)
 8009f12:	f00e ff1d 	bl	8018d50 <iprintf>
 8009f16:	f06f 0305 	mvn.w	r3, #5
 8009f1a:	e07e      	b.n	800a01a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	7f1b      	ldrb	r3, [r3, #28]
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <netconn_write_vectors_partly+0x66>
 8009f28:	797b      	ldrb	r3, [r7, #5]
 8009f2a:	f003 0304 	and.w	r3, r3, #4
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <netconn_write_vectors_partly+0x6a>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e000      	b.n	8009f38 <netconn_write_vectors_partly+0x6c>
 8009f36:	2300      	movs	r3, #0
 8009f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009f3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <netconn_write_vectors_partly+0x84>
 8009f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009f4a:	f06f 0305 	mvn.w	r3, #5
 8009f4e:	e064      	b.n	800a01a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009f54:	2300      	movs	r3, #0
 8009f56:	643b      	str	r3, [r7, #64]	; 0x40
 8009f58:	e015      	b.n	8009f86 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	4413      	add	r3, r2
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f66:	4413      	add	r3, r2
 8009f68:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4413      	add	r3, r2
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d202      	bcs.n	8009f80 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009f7a:	f06f 0305 	mvn.w	r3, #5
 8009f7e:	e04c      	b.n	800a01a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f82:	3301      	adds	r3, #1
 8009f84:	643b      	str	r3, [r7, #64]	; 0x40
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	dbe5      	blt.n	8009f5a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	e040      	b.n	800a01a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	da0a      	bge.n	8009fb4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d102      	bne.n	8009faa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009fa4:	f06f 0305 	mvn.w	r3, #5
 8009fa8:	e037      	b.n	800a01a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009faa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009fae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009fbc:	88fb      	ldrh	r3, [r7, #6]
 8009fbe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009fc4:	797b      	ldrb	r3, [r7, #5]
 8009fc6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009fd2:	f107 0314 	add.w	r3, r7, #20
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4816      	ldr	r0, [pc, #88]	; (800a034 <netconn_write_vectors_partly+0x168>)
 8009fda:	f7ff fc57 	bl	800988c <netconn_apimsg>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009fe4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d114      	bne.n	800a016 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009ff8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10a      	bne.n	800a016 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a004:	429a      	cmp	r2, r3
 800a006:	d006      	beq.n	800a016 <netconn_write_vectors_partly+0x14a>
 800a008:	4b06      	ldr	r3, [pc, #24]	; (800a024 <netconn_write_vectors_partly+0x158>)
 800a00a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a00e:	490a      	ldr	r1, [pc, #40]	; (800a038 <netconn_write_vectors_partly+0x16c>)
 800a010:	4806      	ldr	r0, [pc, #24]	; (800a02c <netconn_write_vectors_partly+0x160>)
 800a012:	f00e fe9d 	bl	8018d50 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a016:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3748      	adds	r7, #72	; 0x48
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	0801a15c 	.word	0x0801a15c
 800a028:	0801a434 	.word	0x0801a434
 800a02c:	0801a1b4 	.word	0x0801a1b4
 800a030:	0801a450 	.word	0x0801a450
 800a034:	0800b5e9 	.word	0x0800b5e9
 800a038:	0801a474 	.word	0x0801a474

0800a03c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08c      	sub	sp, #48	; 0x30
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <netconn_close_shutdown+0x26>
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <netconn_close_shutdown+0x50>)
 800a050:	f240 4247 	movw	r2, #1095	; 0x447
 800a054:	490e      	ldr	r1, [pc, #56]	; (800a090 <netconn_close_shutdown+0x54>)
 800a056:	480f      	ldr	r0, [pc, #60]	; (800a094 <netconn_close_shutdown+0x58>)
 800a058:	f00e fe7a 	bl	8018d50 <iprintf>
 800a05c:	f06f 030f 	mvn.w	r3, #15
 800a060:	e010      	b.n	800a084 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a06a:	2329      	movs	r3, #41	; 0x29
 800a06c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a06e:	f107 030c 	add.w	r3, r7, #12
 800a072:	4619      	mov	r1, r3
 800a074:	4808      	ldr	r0, [pc, #32]	; (800a098 <netconn_close_shutdown+0x5c>)
 800a076:	f7ff fc09 	bl	800988c <netconn_apimsg>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a084:	4618      	mov	r0, r3
 800a086:	3730      	adds	r7, #48	; 0x30
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0801a15c 	.word	0x0801a15c
 800a090:	0801a498 	.word	0x0801a498
 800a094:	0801a1b4 	.word	0x0801a1b4
 800a098:	0800b701 	.word	0x0800b701

0800a09c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800a0a4:	2103      	movs	r1, #3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff ffc8 	bl	800a03c <netconn_close_shutdown>
 800a0ac:	4603      	mov	r3, r0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <netconn_err+0x12>
    return ERR_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e00d      	b.n	800a0e4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a0c8:	f00c fef2 	bl	8016eb0 <sys_arch_protect>
 800a0cc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7a1b      	ldrb	r3, [r3, #8]
 800a0d2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f00c fef6 	bl	8016ecc <sys_arch_unprotect>
  return err;
 800a0e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a0f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0fa:	f113 0f0d 	cmn.w	r3, #13
 800a0fe:	d009      	beq.n	800a114 <lwip_netconn_err_to_msg+0x28>
 800a100:	f113 0f0d 	cmn.w	r3, #13
 800a104:	dc0c      	bgt.n	800a120 <lwip_netconn_err_to_msg+0x34>
 800a106:	f113 0f0f 	cmn.w	r3, #15
 800a10a:	d007      	beq.n	800a11c <lwip_netconn_err_to_msg+0x30>
 800a10c:	f113 0f0e 	cmn.w	r3, #14
 800a110:	d002      	beq.n	800a118 <lwip_netconn_err_to_msg+0x2c>
 800a112:	e005      	b.n	800a120 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <lwip_netconn_err_to_msg+0x54>)
 800a116:	e00e      	b.n	800a136 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a118:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <lwip_netconn_err_to_msg+0x58>)
 800a11a:	e00c      	b.n	800a136 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <lwip_netconn_err_to_msg+0x5c>)
 800a11e:	e00a      	b.n	800a136 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <lwip_netconn_err_to_msg+0x48>
 800a128:	4b08      	ldr	r3, [pc, #32]	; (800a14c <lwip_netconn_err_to_msg+0x60>)
 800a12a:	227d      	movs	r2, #125	; 0x7d
 800a12c:	4908      	ldr	r1, [pc, #32]	; (800a150 <lwip_netconn_err_to_msg+0x64>)
 800a12e:	4809      	ldr	r0, [pc, #36]	; (800a154 <lwip_netconn_err_to_msg+0x68>)
 800a130:	f00e fe0e 	bl	8018d50 <iprintf>
      return NULL;
 800a134:	2300      	movs	r3, #0
  }
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	0801d590 	.word	0x0801d590
 800a144:	0801d591 	.word	0x0801d591
 800a148:	0801d592 	.word	0x0801d592
 800a14c:	0801a4b4 	.word	0x0801a4b4
 800a150:	0801a4e8 	.word	0x0801a4e8
 800a154:	0801a4f8 	.word	0x0801a4f8

0800a158 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d105      	bne.n	800a174 <lwip_netconn_is_err_msg+0x1c>
 800a168:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <lwip_netconn_is_err_msg+0x5c>)
 800a16a:	2285      	movs	r2, #133	; 0x85
 800a16c:	4912      	ldr	r1, [pc, #72]	; (800a1b8 <lwip_netconn_is_err_msg+0x60>)
 800a16e:	4813      	ldr	r0, [pc, #76]	; (800a1bc <lwip_netconn_is_err_msg+0x64>)
 800a170:	f00e fdee 	bl	8018d50 <iprintf>

  if (msg == &netconn_aborted) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a12      	ldr	r2, [pc, #72]	; (800a1c0 <lwip_netconn_is_err_msg+0x68>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d104      	bne.n	800a186 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	22f3      	movs	r2, #243	; 0xf3
 800a180:	701a      	strb	r2, [r3, #0]
    return 1;
 800a182:	2301      	movs	r3, #1
 800a184:	e012      	b.n	800a1ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a0e      	ldr	r2, [pc, #56]	; (800a1c4 <lwip_netconn_is_err_msg+0x6c>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d104      	bne.n	800a198 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	22f2      	movs	r2, #242	; 0xf2
 800a192:	701a      	strb	r2, [r3, #0]
    return 1;
 800a194:	2301      	movs	r3, #1
 800a196:	e009      	b.n	800a1ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a0b      	ldr	r2, [pc, #44]	; (800a1c8 <lwip_netconn_is_err_msg+0x70>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d104      	bne.n	800a1aa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	22f1      	movs	r2, #241	; 0xf1
 800a1a4:	701a      	strb	r2, [r3, #0]
    return 1;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e000      	b.n	800a1ac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	0801a4b4 	.word	0x0801a4b4
 800a1b8:	0801a520 	.word	0x0801a520
 800a1bc:	0801a4f8 	.word	0x0801a4f8
 800a1c0:	0801d590 	.word	0x0801d590
 800a1c4:	0801d591 	.word	0x0801d591
 800a1c8:	0801d592 	.word	0x0801d592

0800a1cc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d105      	bne.n	800a1ec <recv_udp+0x20>
 800a1e0:	4b34      	ldr	r3, [pc, #208]	; (800a2b4 <recv_udp+0xe8>)
 800a1e2:	22e5      	movs	r2, #229	; 0xe5
 800a1e4:	4934      	ldr	r1, [pc, #208]	; (800a2b8 <recv_udp+0xec>)
 800a1e6:	4835      	ldr	r0, [pc, #212]	; (800a2bc <recv_udp+0xf0>)
 800a1e8:	f00e fdb2 	bl	8018d50 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d105      	bne.n	800a1fe <recv_udp+0x32>
 800a1f2:	4b30      	ldr	r3, [pc, #192]	; (800a2b4 <recv_udp+0xe8>)
 800a1f4:	22e6      	movs	r2, #230	; 0xe6
 800a1f6:	4932      	ldr	r1, [pc, #200]	; (800a2c0 <recv_udp+0xf4>)
 800a1f8:	4830      	ldr	r0, [pc, #192]	; (800a2bc <recv_udp+0xf0>)
 800a1fa:	f00e fda9 	bl	8018d50 <iprintf>
  conn = (struct netconn *)arg;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d103      	bne.n	800a210 <recv_udp+0x44>
    pbuf_free(p);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f003 f8df 	bl	800d3cc <pbuf_free>
    return;
 800a20e:	e04d      	b.n	800a2ac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	429a      	cmp	r2, r3
 800a218:	d005      	beq.n	800a226 <recv_udp+0x5a>
 800a21a:	4b26      	ldr	r3, [pc, #152]	; (800a2b4 <recv_udp+0xe8>)
 800a21c:	22ee      	movs	r2, #238	; 0xee
 800a21e:	4929      	ldr	r1, [pc, #164]	; (800a2c4 <recv_udp+0xf8>)
 800a220:	4826      	ldr	r0, [pc, #152]	; (800a2bc <recv_udp+0xf0>)
 800a222:	f00e fd95 	bl	8018d50 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	3310      	adds	r3, #16
 800a22a:	4618      	mov	r0, r3
 800a22c:	f00c fd25 	bl	8016c7a <sys_mbox_valid>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d103      	bne.n	800a23e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f003 f8c8 	bl	800d3cc <pbuf_free>
    return;
 800a23c:	e036      	b.n	800a2ac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a23e:	2006      	movs	r0, #6
 800a240:	f002 f9aa 	bl	800c598 <memp_malloc>
 800a244:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d103      	bne.n	800a254 <recv_udp+0x88>
    pbuf_free(p);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f003 f8bd 	bl	800d3cc <pbuf_free>
    return;
 800a252:	e02b      	b.n	800a2ac <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <recv_udp+0xa0>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	e000      	b.n	800a26e <recv_udp+0xa2>
 800a26c:	2300      	movs	r3, #0
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a276:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	891b      	ldrh	r3, [r3, #8]
 800a27c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	3310      	adds	r3, #16
 800a282:	69b9      	ldr	r1, [r7, #24]
 800a284:	4618      	mov	r0, r3
 800a286:	f00c fc83 	bl	8016b90 <sys_mbox_trypost>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a290:	69b8      	ldr	r0, [r7, #24]
 800a292:	f001 fac1 	bl	800b818 <netbuf_delete>
    return;
 800a296:	e009      	b.n	800a2ac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <recv_udp+0xe0>
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	8afa      	ldrh	r2, [r7, #22]
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	69f8      	ldr	r0, [r7, #28]
 800a2aa:	4798      	blx	r3
  }
}
 800a2ac:	3720      	adds	r7, #32
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	0801a4b4 	.word	0x0801a4b4
 800a2b8:	0801a52c 	.word	0x0801a52c
 800a2bc:	0801a4f8 	.word	0x0801a4f8
 800a2c0:	0801a550 	.word	0x0801a550
 800a2c4:	0801a570 	.word	0x0801a570

0800a2c8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <recv_tcp+0x22>
 800a2dc:	4b36      	ldr	r3, [pc, #216]	; (800a3b8 <recv_tcp+0xf0>)
 800a2de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a2e2:	4936      	ldr	r1, [pc, #216]	; (800a3bc <recv_tcp+0xf4>)
 800a2e4:	4836      	ldr	r0, [pc, #216]	; (800a3c0 <recv_tcp+0xf8>)
 800a2e6:	f00e fd33 	bl	8018d50 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <recv_tcp+0x36>
 800a2f0:	4b31      	ldr	r3, [pc, #196]	; (800a3b8 <recv_tcp+0xf0>)
 800a2f2:	f240 122d 	movw	r2, #301	; 0x12d
 800a2f6:	4933      	ldr	r1, [pc, #204]	; (800a3c4 <recv_tcp+0xfc>)
 800a2f8:	4831      	ldr	r0, [pc, #196]	; (800a3c0 <recv_tcp+0xf8>)
 800a2fa:	f00e fd29 	bl	8018d50 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a2fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d006      	beq.n	800a314 <recv_tcp+0x4c>
 800a306:	4b2c      	ldr	r3, [pc, #176]	; (800a3b8 <recv_tcp+0xf0>)
 800a308:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a30c:	492e      	ldr	r1, [pc, #184]	; (800a3c8 <recv_tcp+0x100>)
 800a30e:	482c      	ldr	r0, [pc, #176]	; (800a3c0 <recv_tcp+0xf8>)
 800a310:	f00e fd1e 	bl	8018d50 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <recv_tcp+0x5c>
    return ERR_VAL;
 800a31e:	f06f 0305 	mvn.w	r3, #5
 800a322:	e045      	b.n	800a3b0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d006      	beq.n	800a33c <recv_tcp+0x74>
 800a32e:	4b22      	ldr	r3, [pc, #136]	; (800a3b8 <recv_tcp+0xf0>)
 800a330:	f240 1235 	movw	r2, #309	; 0x135
 800a334:	4925      	ldr	r1, [pc, #148]	; (800a3cc <recv_tcp+0x104>)
 800a336:	4822      	ldr	r0, [pc, #136]	; (800a3c0 <recv_tcp+0xf8>)
 800a338:	f00e fd0a 	bl	8018d50 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	3310      	adds	r3, #16
 800a340:	4618      	mov	r0, r3
 800a342:	f00c fc9a 	bl	8016c7a <sys_mbox_valid>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10d      	bne.n	800a368 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d008      	beq.n	800a364 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	891b      	ldrh	r3, [r3, #8]
 800a356:	4619      	mov	r1, r3
 800a358:	68b8      	ldr	r0, [r7, #8]
 800a35a:	f003 fe8d 	bl	800e078 <tcp_recved>
      pbuf_free(p);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f003 f834 	bl	800d3cc <pbuf_free>
    }
    return ERR_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	e023      	b.n	800a3b0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d005      	beq.n	800a37a <recv_tcp+0xb2>
    msg = p;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	891b      	ldrh	r3, [r3, #8]
 800a376:	83fb      	strh	r3, [r7, #30]
 800a378:	e003      	b.n	800a382 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a37a:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <recv_tcp+0x108>)
 800a37c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a37e:	2300      	movs	r3, #0
 800a380:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	3310      	adds	r3, #16
 800a386:	69b9      	ldr	r1, [r7, #24]
 800a388:	4618      	mov	r0, r3
 800a38a:	f00c fc01 	bl	8016b90 <sys_mbox_trypost>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a398:	e00a      	b.n	800a3b0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <recv_tcp+0xe6>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	8bfa      	ldrh	r2, [r7, #30]
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6978      	ldr	r0, [r7, #20]
 800a3ac:	4798      	blx	r3
  }

  return ERR_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3720      	adds	r7, #32
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0801a4b4 	.word	0x0801a4b4
 800a3bc:	0801a590 	.word	0x0801a590
 800a3c0:	0801a4f8 	.word	0x0801a4f8
 800a3c4:	0801a5b4 	.word	0x0801a5b4
 800a3c8:	0801a5d4 	.word	0x0801a5d4
 800a3cc:	0801a5ec 	.word	0x0801a5ec
 800a3d0:	0801d592 	.word	0x0801d592

0800a3d4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <poll_tcp+0x22>
 800a3e8:	4b29      	ldr	r3, [pc, #164]	; (800a490 <poll_tcp+0xbc>)
 800a3ea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a3ee:	4929      	ldr	r1, [pc, #164]	; (800a494 <poll_tcp+0xc0>)
 800a3f0:	4829      	ldr	r0, [pc, #164]	; (800a498 <poll_tcp+0xc4>)
 800a3f2:	f00e fcad 	bl	8018d50 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	785b      	ldrb	r3, [r3, #1]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d104      	bne.n	800a408 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a3fe:	2101      	movs	r1, #1
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 ff25 	bl	800b250 <lwip_netconn_do_writemore>
 800a406:	e016      	b.n	800a436 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d112      	bne.n	800a436 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00a      	beq.n	800a42e <poll_tcp+0x5a>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	7a5b      	ldrb	r3, [r3, #9]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	7a5a      	ldrb	r2, [r3, #9]
 800a428:	3a01      	subs	r2, #1
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a42e:	2101      	movs	r1, #1
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fb3b 	bl	800aaac <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	7f1b      	ldrb	r3, [r3, #28]
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d021      	beq.n	800a486 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d01d      	beq.n	800a486 <poll_tcp+0xb2>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a452:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a456:	d316      	bcc.n	800a486 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a460:	2b04      	cmp	r3, #4
 800a462:	d810      	bhi.n	800a486 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	7f1b      	ldrb	r3, [r3, #28]
 800a468:	f023 0310 	bic.w	r3, r3, #16
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <poll_tcp+0xb2>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2200      	movs	r2, #0
 800a480:	2102      	movs	r1, #2
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	0801a4b4 	.word	0x0801a4b4
 800a494:	0801a60c 	.word	0x0801a60c
 800a498:	0801a4f8 	.word	0x0801a4f8

0800a49c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d106      	bne.n	800a4c2 <sent_tcp+0x26>
 800a4b4:	4b20      	ldr	r3, [pc, #128]	; (800a538 <sent_tcp+0x9c>)
 800a4b6:	f240 1293 	movw	r2, #403	; 0x193
 800a4ba:	4920      	ldr	r1, [pc, #128]	; (800a53c <sent_tcp+0xa0>)
 800a4bc:	4820      	ldr	r0, [pc, #128]	; (800a540 <sent_tcp+0xa4>)
 800a4be:	f00e fc47 	bl	8018d50 <iprintf>

  if (conn) {
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d032      	beq.n	800a52e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	785b      	ldrb	r3, [r3, #1]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d104      	bne.n	800a4da <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	6978      	ldr	r0, [r7, #20]
 800a4d4:	f000 febc 	bl	800b250 <lwip_netconn_do_writemore>
 800a4d8:	e007      	b.n	800a4ea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d103      	bne.n	800a4ea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	6978      	ldr	r0, [r7, #20]
 800a4e6:	f000 fae1 	bl	800aaac <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01d      	beq.n	800a52e <sent_tcp+0x92>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a4fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a4fe:	d316      	bcc.n	800a52e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d810      	bhi.n	800a52e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	7f1b      	ldrb	r3, [r3, #28]
 800a510:	f023 0310 	bic.w	r3, r3, #16
 800a514:	b2da      	uxtb	r2, r3
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <sent_tcp+0x92>
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	88fa      	ldrh	r2, [r7, #6]
 800a528:	2102      	movs	r1, #2
 800a52a:	6978      	ldr	r0, [r7, #20]
 800a52c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	0801a4b4 	.word	0x0801a4b4
 800a53c:	0801a60c 	.word	0x0801a60c
 800a540:	0801a4f8 	.word	0x0801a4f8

0800a544 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <err_tcp+0x24>
 800a55a:	4b5f      	ldr	r3, [pc, #380]	; (800a6d8 <err_tcp+0x194>)
 800a55c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a560:	495e      	ldr	r1, [pc, #376]	; (800a6dc <err_tcp+0x198>)
 800a562:	485f      	ldr	r0, [pc, #380]	; (800a6e0 <err_tcp+0x19c>)
 800a564:	f00e fbf4 	bl	8018d50 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a568:	f00c fca2 	bl	8016eb0 <sys_arch_protect>
 800a56c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	2200      	movs	r2, #0
 800a572:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	7f1b      	ldrb	r3, [r3, #28]
 800a57e:	f043 0301 	orr.w	r3, r3, #1
 800a582:	b2da      	uxtb	r2, r3
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	2200      	movs	r2, #0
 800a592:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a594:	69b8      	ldr	r0, [r7, #24]
 800a596:	f00c fc99 	bl	8016ecc <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <err_tcp+0x6a>
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2104      	movs	r1, #4
 800a5aa:	69f8      	ldr	r0, [r7, #28]
 800a5ac:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d005      	beq.n	800a5c2 <err_tcp+0x7e>
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2100      	movs	r1, #0
 800a5be:	69f8      	ldr	r0, [r7, #28]
 800a5c0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <err_tcp+0x92>
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2102      	movs	r1, #2
 800a5d2:	69f8      	ldr	r0, [r7, #28]
 800a5d4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a5d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fd86 	bl	800a0ec <lwip_netconn_err_to_msg>
 800a5e0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	3310      	adds	r3, #16
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f00c fb47 	bl	8016c7a <sys_mbox_valid>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d005      	beq.n	800a5fe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	3310      	adds	r3, #16
 800a5f6:	6939      	ldr	r1, [r7, #16]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f00c fac9 	bl	8016b90 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	3314      	adds	r3, #20
 800a602:	4618      	mov	r0, r3
 800a604:	f00c fb39 	bl	8016c7a <sys_mbox_valid>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	3314      	adds	r3, #20
 800a612:	6939      	ldr	r1, [r7, #16]
 800a614:	4618      	mov	r0, r3
 800a616:	f00c fabb 	bl	8016b90 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d005      	beq.n	800a62c <err_tcp+0xe8>
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	2b04      	cmp	r3, #4
 800a624:	d002      	beq.n	800a62c <err_tcp+0xe8>
 800a626:	7dfb      	ldrb	r3, [r7, #23]
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d143      	bne.n	800a6b4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	7f1b      	ldrb	r3, [r3, #28]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	bf14      	ite	ne
 800a638:	2301      	movne	r3, #1
 800a63a:	2300      	moveq	r3, #0
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	7f1b      	ldrb	r3, [r3, #28]
 800a644:	f023 0304 	bic.w	r3, r3, #4
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d13b      	bne.n	800a6cc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d106      	bne.n	800a66a <err_tcp+0x126>
 800a65c:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <err_tcp+0x194>)
 800a65e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a662:	4920      	ldr	r1, [pc, #128]	; (800a6e4 <err_tcp+0x1a0>)
 800a664:	481e      	ldr	r0, [pc, #120]	; (800a6e0 <err_tcp+0x19c>)
 800a666:	f00e fb73 	bl	8018d50 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	2b04      	cmp	r3, #4
 800a66e:	d104      	bne.n	800a67a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	2200      	movs	r2, #0
 800a676:	711a      	strb	r2, [r3, #4]
 800a678:	e003      	b.n	800a682 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	78fa      	ldrb	r2, [r7, #3]
 800a680:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	330c      	adds	r3, #12
 800a68a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a68c:	68b8      	ldr	r0, [r7, #8]
 800a68e:	f00c fb85 	bl	8016d9c <sys_sem_valid>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d106      	bne.n	800a6a6 <err_tcp+0x162>
 800a698:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <err_tcp+0x194>)
 800a69a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a69e:	4912      	ldr	r1, [pc, #72]	; (800a6e8 <err_tcp+0x1a4>)
 800a6a0:	480f      	ldr	r0, [pc, #60]	; (800a6e0 <err_tcp+0x19c>)
 800a6a2:	f00e fb55 	bl	8018d50 <iprintf>
      conn->current_msg = NULL;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a6ac:	68b8      	ldr	r0, [r7, #8]
 800a6ae:	f00c fb5b 	bl	8016d68 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a6b2:	e00b      	b.n	800a6cc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	6a1b      	ldr	r3, [r3, #32]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d008      	beq.n	800a6ce <err_tcp+0x18a>
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <err_tcp+0x194>)
 800a6be:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a6c2:	490a      	ldr	r1, [pc, #40]	; (800a6ec <err_tcp+0x1a8>)
 800a6c4:	4806      	ldr	r0, [pc, #24]	; (800a6e0 <err_tcp+0x19c>)
 800a6c6:	f00e fb43 	bl	8018d50 <iprintf>
  }
}
 800a6ca:	e000      	b.n	800a6ce <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a6cc:	bf00      	nop
}
 800a6ce:	bf00      	nop
 800a6d0:	3720      	adds	r7, #32
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	0801a4b4 	.word	0x0801a4b4
 800a6dc:	0801a60c 	.word	0x0801a60c
 800a6e0:	0801a4f8 	.word	0x0801a4f8
 800a6e4:	0801a61c 	.word	0x0801a61c
 800a6e8:	0801a638 	.word	0x0801a638
 800a6ec:	0801a654 	.word	0x0801a654

0800a6f0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f004 fc97 	bl	800f034 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a706:	490a      	ldr	r1, [pc, #40]	; (800a730 <setup_tcp+0x40>)
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f004 fca5 	bl	800f058 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a70e:	4909      	ldr	r1, [pc, #36]	; (800a734 <setup_tcp+0x44>)
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f004 fcc3 	bl	800f09c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a716:	2202      	movs	r2, #2
 800a718:	4907      	ldr	r1, [pc, #28]	; (800a738 <setup_tcp+0x48>)
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f004 fd1a 	bl	800f154 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a720:	4906      	ldr	r1, [pc, #24]	; (800a73c <setup_tcp+0x4c>)
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f004 fcdc 	bl	800f0e0 <tcp_err>
}
 800a728:	bf00      	nop
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	0800a2c9 	.word	0x0800a2c9
 800a734:	0800a49d 	.word	0x0800a49d
 800a738:	0800a3d5 	.word	0x0800a3d5
 800a73c:	0800a545 	.word	0x0800a545

0800a740 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d006      	beq.n	800a764 <pcb_new+0x24>
 800a756:	4b2b      	ldr	r3, [pc, #172]	; (800a804 <pcb_new+0xc4>)
 800a758:	f240 2265 	movw	r2, #613	; 0x265
 800a75c:	492a      	ldr	r1, [pc, #168]	; (800a808 <pcb_new+0xc8>)
 800a75e:	482b      	ldr	r0, [pc, #172]	; (800a80c <pcb_new+0xcc>)
 800a760:	f00e faf6 	bl	8018d50 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a76e:	2b10      	cmp	r3, #16
 800a770:	d022      	beq.n	800a7b8 <pcb_new+0x78>
 800a772:	2b20      	cmp	r3, #32
 800a774:	d133      	bne.n	800a7de <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681c      	ldr	r4, [r3, #0]
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f009 fda6 	bl	80142ce <udp_new_ip_type>
 800a782:	4603      	mov	r3, r0
 800a784:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d02a      	beq.n	800a7e6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b22      	cmp	r3, #34	; 0x22
 800a798:	d104      	bne.n	800a7a4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6858      	ldr	r0, [r3, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4917      	ldr	r1, [pc, #92]	; (800a810 <pcb_new+0xd0>)
 800a7b2:	f009 fd13 	bl	80141dc <udp_recv>
      }
      break;
 800a7b6:	e016      	b.n	800a7e6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681c      	ldr	r4, [r3, #0]
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f004 fc2a 	bl	800f018 <tcp_new_ip_type>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00b      	beq.n	800a7ea <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff ff8a 	bl	800a6f0 <setup_tcp>
      }
      break;
 800a7dc:	e005      	b.n	800a7ea <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	22fa      	movs	r2, #250	; 0xfa
 800a7e2:	711a      	strb	r2, [r3, #4]
      return;
 800a7e4:	e00a      	b.n	800a7fc <pcb_new+0xbc>
      break;
 800a7e6:	bf00      	nop
 800a7e8:	e000      	b.n	800a7ec <pcb_new+0xac>
      break;
 800a7ea:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	22ff      	movs	r2, #255	; 0xff
 800a7fa:	711a      	strb	r2, [r3, #4]
  }
}
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd90      	pop	{r4, r7, pc}
 800a802:	bf00      	nop
 800a804:	0801a4b4 	.word	0x0801a4b4
 800a808:	0801a698 	.word	0x0801a698
 800a80c:	0801a4f8 	.word	0x0801a4f8
 800a810:	0800a1cd 	.word	0x0800a1cd

0800a814 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff ff85 	bl	800a740 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a836:	bf00      	nop
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a850:	2007      	movs	r0, #7
 800a852:	f001 fea1 	bl	800c598 <memp_malloc>
 800a856:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <netconn_alloc+0x22>
    return NULL;
 800a85e:	2300      	movs	r3, #0
 800a860:	e052      	b.n	800a908 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	79fa      	ldrb	r2, [r7, #7]
 800a86c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d004      	beq.n	800a888 <netconn_alloc+0x48>
 800a87e:	2b20      	cmp	r3, #32
 800a880:	d105      	bne.n	800a88e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a882:	2306      	movs	r3, #6
 800a884:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a886:	e00a      	b.n	800a89e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a888:	2306      	movs	r3, #6
 800a88a:	617b      	str	r3, [r7, #20]
      break;
 800a88c:	e007      	b.n	800a89e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a88e:	4b20      	ldr	r3, [pc, #128]	; (800a910 <netconn_alloc+0xd0>)
 800a890:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a894:	491f      	ldr	r1, [pc, #124]	; (800a914 <netconn_alloc+0xd4>)
 800a896:	4820      	ldr	r0, [pc, #128]	; (800a918 <netconn_alloc+0xd8>)
 800a898:	f00e fa5a 	bl	8018d50 <iprintf>
      goto free_and_return;
 800a89c:	e02f      	b.n	800a8fe <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3310      	adds	r3, #16
 800a8a2:	6979      	ldr	r1, [r7, #20]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f00c f93f 	bl	8016b28 <sys_mbox_new>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d125      	bne.n	800a8fc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	330c      	adds	r3, #12
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f00c f9fd 	bl	8016cb6 <sys_sem_new>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d005      	beq.n	800a8ce <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3310      	adds	r3, #16
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f00c f950 	bl	8016b6c <sys_mbox_free>
    goto free_and_return;
 800a8cc:	e017      	b.n	800a8fe <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3314      	adds	r3, #20
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f00c f9e2 	bl	8016c9c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8e4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	7cfa      	ldrb	r2, [r7, #19]
 800a8f6:	771a      	strb	r2, [r3, #28]
  return conn;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	e005      	b.n	800a908 <netconn_alloc+0xc8>
    goto free_and_return;
 800a8fc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	2007      	movs	r0, #7
 800a902:	f001 febf 	bl	800c684 <memp_free>
  return NULL;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	0801a4b4 	.word	0x0801a4b4
 800a914:	0801a6b8 	.word	0x0801a6b8
 800a918:	0801a4f8 	.word	0x0801a4f8

0800a91c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d006      	beq.n	800a93a <netconn_free+0x1e>
 800a92c:	4b1b      	ldr	r3, [pc, #108]	; (800a99c <netconn_free+0x80>)
 800a92e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a932:	491b      	ldr	r1, [pc, #108]	; (800a9a0 <netconn_free+0x84>)
 800a934:	481b      	ldr	r0, [pc, #108]	; (800a9a4 <netconn_free+0x88>)
 800a936:	f00e fa0b 	bl	8018d50 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3310      	adds	r3, #16
 800a93e:	4618      	mov	r0, r3
 800a940:	f00c f99b 	bl	8016c7a <sys_mbox_valid>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d006      	beq.n	800a958 <netconn_free+0x3c>
 800a94a:	4b14      	ldr	r3, [pc, #80]	; (800a99c <netconn_free+0x80>)
 800a94c:	f240 3223 	movw	r2, #803	; 0x323
 800a950:	4915      	ldr	r1, [pc, #84]	; (800a9a8 <netconn_free+0x8c>)
 800a952:	4814      	ldr	r0, [pc, #80]	; (800a9a4 <netconn_free+0x88>)
 800a954:	f00e f9fc 	bl	8018d50 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3314      	adds	r3, #20
 800a95c:	4618      	mov	r0, r3
 800a95e:	f00c f98c 	bl	8016c7a <sys_mbox_valid>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d006      	beq.n	800a976 <netconn_free+0x5a>
 800a968:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <netconn_free+0x80>)
 800a96a:	f240 3226 	movw	r2, #806	; 0x326
 800a96e:	490f      	ldr	r1, [pc, #60]	; (800a9ac <netconn_free+0x90>)
 800a970:	480c      	ldr	r0, [pc, #48]	; (800a9a4 <netconn_free+0x88>)
 800a972:	f00e f9ed 	bl	8018d50 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	330c      	adds	r3, #12
 800a97a:	4618      	mov	r0, r3
 800a97c:	f00c fa01 	bl	8016d82 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	330c      	adds	r3, #12
 800a984:	4618      	mov	r0, r3
 800a986:	f00c fa1a 	bl	8016dbe <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a98a:	6879      	ldr	r1, [r7, #4]
 800a98c:	2007      	movs	r0, #7
 800a98e:	f001 fe79 	bl	800c684 <memp_free>
}
 800a992:	bf00      	nop
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	0801a4b4 	.word	0x0801a4b4
 800a9a0:	0801a6e0 	.word	0x0801a6e0
 800a9a4:	0801a4f8 	.word	0x0801a4f8
 800a9a8:	0801a710 	.word	0x0801a710
 800a9ac:	0801a74c 	.word	0x0801a74c

0800a9b0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3310      	adds	r3, #16
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f00c f95c 	bl	8016c7a <sys_mbox_valid>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d02f      	beq.n	800aa28 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a9c8:	e018      	b.n	800a9fc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d2:	2b10      	cmp	r3, #16
 800a9d4:	d10e      	bne.n	800a9f4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f107 020f 	add.w	r2, r7, #15
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff fbba 	bl	800a158 <lwip_netconn_is_err_msg>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d108      	bne.n	800a9fc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f002 fced 	bl	800d3cc <pbuf_free>
 800a9f2:	e003      	b.n	800a9fc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 ff0e 	bl	800b818 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3310      	adds	r3, #16
 800aa00:	f107 0210 	add.w	r2, r7, #16
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f00c f91b 	bl	8016c42 <sys_arch_mbox_tryfetch>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa12:	d1da      	bne.n	800a9ca <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3310      	adds	r3, #16
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f00c f8a7 	bl	8016b6c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3310      	adds	r3, #16
 800aa22:	4618      	mov	r0, r3
 800aa24:	f00c f93a 	bl	8016c9c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3314      	adds	r3, #20
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f00c f924 	bl	8016c7a <sys_mbox_valid>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d034      	beq.n	800aaa2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aa38:	e01d      	b.n	800aa76 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f107 020e 	add.w	r2, r7, #14
 800aa40:	4611      	mov	r1, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff fb88 	bl	800a158 <lwip_netconn_is_err_msg>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d113      	bne.n	800aa76 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800aa52:	6978      	ldr	r0, [r7, #20]
 800aa54:	f7ff ffac 	bl	800a9b0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f003 faa1 	bl	800dfac <tcp_abort>
            newconn->pcb.tcp = NULL;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800aa70:	6978      	ldr	r0, [r7, #20]
 800aa72:	f7ff ff53 	bl	800a91c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3314      	adds	r3, #20
 800aa7a:	f107 0210 	add.w	r2, r7, #16
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f00c f8de 	bl	8016c42 <sys_arch_mbox_tryfetch>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa8c:	d1d5      	bne.n	800aa3a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3314      	adds	r3, #20
 800aa92:	4618      	mov	r0, r3
 800aa94:	f00c f86a 	bl	8016b6c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3314      	adds	r3, #20
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f00c f8fd 	bl	8016c9c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800aaa2:	bf00      	nop
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d106      	bne.n	800aad0 <lwip_netconn_do_close_internal+0x24>
 800aac2:	4b87      	ldr	r3, [pc, #540]	; (800ace0 <lwip_netconn_do_close_internal+0x234>)
 800aac4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800aac8:	4986      	ldr	r1, [pc, #536]	; (800ace4 <lwip_netconn_do_close_internal+0x238>)
 800aaca:	4887      	ldr	r0, [pc, #540]	; (800ace8 <lwip_netconn_do_close_internal+0x23c>)
 800aacc:	f00e f940 	bl	8018d50 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aad8:	2b10      	cmp	r3, #16
 800aada:	d006      	beq.n	800aaea <lwip_netconn_do_close_internal+0x3e>
 800aadc:	4b80      	ldr	r3, [pc, #512]	; (800ace0 <lwip_netconn_do_close_internal+0x234>)
 800aade:	f240 32a3 	movw	r2, #931	; 0x3a3
 800aae2:	4982      	ldr	r1, [pc, #520]	; (800acec <lwip_netconn_do_close_internal+0x240>)
 800aae4:	4880      	ldr	r0, [pc, #512]	; (800ace8 <lwip_netconn_do_close_internal+0x23c>)
 800aae6:	f00e f933 	bl	8018d50 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	785b      	ldrb	r3, [r3, #1]
 800aaee:	2b04      	cmp	r3, #4
 800aaf0:	d006      	beq.n	800ab00 <lwip_netconn_do_close_internal+0x54>
 800aaf2:	4b7b      	ldr	r3, [pc, #492]	; (800ace0 <lwip_netconn_do_close_internal+0x234>)
 800aaf4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800aaf8:	497d      	ldr	r1, [pc, #500]	; (800acf0 <lwip_netconn_do_close_internal+0x244>)
 800aafa:	487b      	ldr	r0, [pc, #492]	; (800ace8 <lwip_netconn_do_close_internal+0x23c>)
 800aafc:	f00e f928 	bl	8018d50 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d106      	bne.n	800ab16 <lwip_netconn_do_close_internal+0x6a>
 800ab08:	4b75      	ldr	r3, [pc, #468]	; (800ace0 <lwip_netconn_do_close_internal+0x234>)
 800ab0a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ab0e:	4979      	ldr	r1, [pc, #484]	; (800acf4 <lwip_netconn_do_close_internal+0x248>)
 800ab10:	4875      	ldr	r0, [pc, #468]	; (800ace8 <lwip_netconn_do_close_internal+0x23c>)
 800ab12:	f00e f91d 	bl	8018d50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d106      	bne.n	800ab2c <lwip_netconn_do_close_internal+0x80>
 800ab1e:	4b70      	ldr	r3, [pc, #448]	; (800ace0 <lwip_netconn_do_close_internal+0x234>)
 800ab20:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ab24:	4974      	ldr	r1, [pc, #464]	; (800acf8 <lwip_netconn_do_close_internal+0x24c>)
 800ab26:	4870      	ldr	r0, [pc, #448]	; (800ace8 <lwip_netconn_do_close_internal+0x23c>)
 800ab28:	f00e f912 	bl	8018d50 <iprintf>

  tpcb = conn->pcb.tcp;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	7a1b      	ldrb	r3, [r3, #8]
 800ab38:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ab3a:	7bfb      	ldrb	r3, [r7, #15]
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d102      	bne.n	800ab56 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ab50:	2301      	movs	r3, #1
 800ab52:	75bb      	strb	r3, [r7, #22]
 800ab54:	e01f      	b.n	800ab96 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00e      	beq.n	800ab7a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ab60:	2b05      	cmp	r3, #5
 800ab62:	d007      	beq.n	800ab74 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ab68:	2b06      	cmp	r3, #6
 800ab6a:	d003      	beq.n	800ab74 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ab70:	2b08      	cmp	r3, #8
 800ab72:	d102      	bne.n	800ab7a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ab74:	2301      	movs	r3, #1
 800ab76:	75bb      	strb	r3, [r7, #22]
 800ab78:	e00d      	b.n	800ab96 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ab7a:	7b7b      	ldrb	r3, [r7, #13]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d008      	beq.n	800ab92 <lwip_netconn_do_close_internal+0xe6>
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	8b5b      	ldrh	r3, [r3, #26]
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	75bb      	strb	r3, [r7, #22]
 800ab90:	e001      	b.n	800ab96 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ab96:	7dbb      	ldrb	r3, [r7, #22]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	6938      	ldr	r0, [r7, #16]
 800aba0:	f004 fa48 	bl	800f034 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	7d1b      	ldrb	r3, [r3, #20]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d104      	bne.n	800abb6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800abac:	2100      	movs	r1, #0
 800abae:	6938      	ldr	r0, [r7, #16]
 800abb0:	f004 fab8 	bl	800f124 <tcp_accept>
 800abb4:	e01d      	b.n	800abf2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d007      	beq.n	800abcc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800abbc:	2100      	movs	r1, #0
 800abbe:	6938      	ldr	r0, [r7, #16]
 800abc0:	f004 fa4a 	bl	800f058 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800abc4:	2100      	movs	r1, #0
 800abc6:	6938      	ldr	r0, [r7, #16]
 800abc8:	f004 faac 	bl	800f124 <tcp_accept>
    }
    if (shut_tx) {
 800abcc:	7b7b      	ldrb	r3, [r7, #13]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800abd2:	2100      	movs	r1, #0
 800abd4:	6938      	ldr	r0, [r7, #16]
 800abd6:	f004 fa61 	bl	800f09c <tcp_sent>
    }
    if (shut_close) {
 800abda:	7dbb      	ldrb	r3, [r7, #22]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d008      	beq.n	800abf2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800abe0:	2200      	movs	r2, #0
 800abe2:	2100      	movs	r1, #0
 800abe4:	6938      	ldr	r0, [r7, #16]
 800abe6:	f004 fab5 	bl	800f154 <tcp_poll>
      tcp_err(tpcb, NULL);
 800abea:	2100      	movs	r1, #0
 800abec:	6938      	ldr	r0, [r7, #16]
 800abee:	f004 fa77 	bl	800f0e0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800abf2:	7dbb      	ldrb	r3, [r7, #22]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800abf8:	6938      	ldr	r0, [r7, #16]
 800abfa:	f003 f891 	bl	800dd20 <tcp_close>
 800abfe:	4603      	mov	r3, r0
 800ac00:	75fb      	strb	r3, [r7, #23]
 800ac02:	e007      	b.n	800ac14 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	7b7a      	ldrb	r2, [r7, #13]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6938      	ldr	r0, [r7, #16]
 800ac0c:	f003 f8b4 	bl	800dd78 <tcp_shutdown>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ac14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	757b      	strb	r3, [r7, #21]
 800ac20:	e016      	b.n	800ac50 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ac22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac2a:	d10f      	bne.n	800ac4c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	7a5b      	ldrb	r3, [r3, #9]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10c      	bne.n	800ac50 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ac3a:	7dbb      	ldrb	r3, [r7, #22]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d007      	beq.n	800ac50 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ac40:	6938      	ldr	r0, [r7, #16]
 800ac42:	f003 f9b3 	bl	800dfac <tcp_abort>
          err = ERR_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	75fb      	strb	r3, [r7, #23]
 800ac4a:	e001      	b.n	800ac50 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ac50:	7d7b      	ldrb	r3, [r7, #21]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d052      	beq.n	800acfc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	330c      	adds	r3, #12
 800ac5e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	7dfa      	ldrb	r2, [r7, #23]
 800ac66:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ac74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d129      	bne.n	800acd0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ac7c:	7dbb      	ldrb	r3, [r7, #22]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00c      	beq.n	800ac9c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d005      	beq.n	800ac9c <lwip_netconn_do_close_internal+0x1f0>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	2200      	movs	r2, #0
 800ac96:	2104      	movs	r1, #4
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	4798      	blx	r3
      }
      if (shut_rx) {
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d005      	beq.n	800acb6 <lwip_netconn_do_close_internal+0x20a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	2200      	movs	r2, #0
 800acb0:	2100      	movs	r1, #0
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
      }
      if (shut_tx) {
 800acb6:	7b7b      	ldrb	r3, [r7, #13]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d009      	beq.n	800acd0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <lwip_netconn_do_close_internal+0x224>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	2200      	movs	r2, #0
 800acca:	2102      	movs	r1, #2
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800acd6:	68b8      	ldr	r0, [r7, #8]
 800acd8:	f00c f846 	bl	8016d68 <sys_sem_signal>
    }
    return ERR_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	e03c      	b.n	800ad5a <lwip_netconn_do_close_internal+0x2ae>
 800ace0:	0801a4b4 	.word	0x0801a4b4
 800ace4:	0801a788 	.word	0x0801a788
 800ace8:	0801a4f8 	.word	0x0801a4f8
 800acec:	0801a798 	.word	0x0801a798
 800acf0:	0801a7b8 	.word	0x0801a7b8
 800acf4:	0801a7dc 	.word	0x0801a7dc
 800acf8:	0801a61c 	.word	0x0801a61c
  }
  if (!close_finished) {
 800acfc:	7d7b      	ldrb	r3, [r7, #21]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d11e      	bne.n	800ad40 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	7d1b      	ldrb	r3, [r3, #20]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d106      	bne.n	800ad18 <lwip_netconn_do_close_internal+0x26c>
 800ad0a:	4b16      	ldr	r3, [pc, #88]	; (800ad64 <lwip_netconn_do_close_internal+0x2b8>)
 800ad0c:	f240 4241 	movw	r2, #1089	; 0x441
 800ad10:	4915      	ldr	r1, [pc, #84]	; (800ad68 <lwip_netconn_do_close_internal+0x2bc>)
 800ad12:	4816      	ldr	r0, [pc, #88]	; (800ad6c <lwip_netconn_do_close_internal+0x2c0>)
 800ad14:	f00e f81c 	bl	8018d50 <iprintf>
    if (shut_tx) {
 800ad18:	7b7b      	ldrb	r3, [r7, #13]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d003      	beq.n	800ad26 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800ad1e:	4914      	ldr	r1, [pc, #80]	; (800ad70 <lwip_netconn_do_close_internal+0x2c4>)
 800ad20:	6938      	ldr	r0, [r7, #16]
 800ad22:	f004 f9bb 	bl	800f09c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ad26:	2201      	movs	r2, #1
 800ad28:	4912      	ldr	r1, [pc, #72]	; (800ad74 <lwip_netconn_do_close_internal+0x2c8>)
 800ad2a:	6938      	ldr	r0, [r7, #16]
 800ad2c:	f004 fa12 	bl	800f154 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ad30:	4911      	ldr	r1, [pc, #68]	; (800ad78 <lwip_netconn_do_close_internal+0x2cc>)
 800ad32:	6938      	ldr	r0, [r7, #16]
 800ad34:	f004 f9d4 	bl	800f0e0 <tcp_err>
    tcp_arg(tpcb, conn);
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	6938      	ldr	r0, [r7, #16]
 800ad3c:	f004 f97a 	bl	800f034 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ad40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <lwip_netconn_do_close_internal+0x2aa>
 800ad48:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <lwip_netconn_do_close_internal+0x2b8>)
 800ad4a:	f240 424d 	movw	r2, #1101	; 0x44d
 800ad4e:	490b      	ldr	r1, [pc, #44]	; (800ad7c <lwip_netconn_do_close_internal+0x2d0>)
 800ad50:	4806      	ldr	r0, [pc, #24]	; (800ad6c <lwip_netconn_do_close_internal+0x2c0>)
 800ad52:	f00d fffd 	bl	8018d50 <iprintf>
  return err;
 800ad56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	0801a4b4 	.word	0x0801a4b4
 800ad68:	0801a7f0 	.word	0x0801a7f0
 800ad6c:	0801a4f8 	.word	0x0801a4f8
 800ad70:	0800a49d 	.word	0x0800a49d
 800ad74:	0800a3d5 	.word	0x0800a3d5
 800ad78:	0800a545 	.word	0x0800a545
 800ad7c:	0801a814 	.word	0x0801a814

0800ad80 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00d      	beq.n	800adb6 <lwip_netconn_do_delconn+0x36>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ada4:	2b10      	cmp	r3, #16
 800ada6:	d006      	beq.n	800adb6 <lwip_netconn_do_delconn+0x36>
 800ada8:	4b60      	ldr	r3, [pc, #384]	; (800af2c <lwip_netconn_do_delconn+0x1ac>)
 800adaa:	f240 425e 	movw	r2, #1118	; 0x45e
 800adae:	4960      	ldr	r1, [pc, #384]	; (800af30 <lwip_netconn_do_delconn+0x1b0>)
 800adb0:	4860      	ldr	r0, [pc, #384]	; (800af34 <lwip_netconn_do_delconn+0x1b4>)
 800adb2:	f00d ffcd 	bl	8018d50 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800adb6:	7afb      	ldrb	r3, [r7, #11]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <lwip_netconn_do_delconn+0x48>
 800adbc:	7afb      	ldrb	r3, [r7, #11]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d002      	beq.n	800adc8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800adc2:	7afb      	ldrb	r3, [r7, #11]
 800adc4:	2b03      	cmp	r3, #3
 800adc6:	d109      	bne.n	800addc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800adc8:	7afb      	ldrb	r3, [r7, #11]
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d10a      	bne.n	800ade4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	7f1b      	ldrb	r3, [r3, #28]
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	22fb      	movs	r2, #251	; 0xfb
 800ade0:	711a      	strb	r2, [r3, #4]
 800ade2:	e097      	b.n	800af14 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d10d      	bne.n	800ae06 <lwip_netconn_do_delconn+0x86>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	7f1b      	ldrb	r3, [r3, #28]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d106      	bne.n	800ae06 <lwip_netconn_do_delconn+0x86>
 800adf8:	4b4c      	ldr	r3, [pc, #304]	; (800af2c <lwip_netconn_do_delconn+0x1ac>)
 800adfa:	f240 427a 	movw	r2, #1146	; 0x47a
 800adfe:	494e      	ldr	r1, [pc, #312]	; (800af38 <lwip_netconn_do_delconn+0x1b8>)
 800ae00:	484c      	ldr	r0, [pc, #304]	; (800af34 <lwip_netconn_do_delconn+0x1b4>)
 800ae02:	f00d ffa5 	bl	8018d50 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fdcd 	bl	800a9b0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d05f      	beq.n	800aee0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae2a:	2b10      	cmp	r3, #16
 800ae2c:	d00d      	beq.n	800ae4a <lwip_netconn_do_delconn+0xca>
 800ae2e:	2b20      	cmp	r3, #32
 800ae30:	d151      	bne.n	800aed6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f009 f9ea 	bl	801421c <udp_remove>
          break;
 800ae48:	e046      	b.n	800aed8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d006      	beq.n	800ae62 <lwip_netconn_do_delconn+0xe2>
 800ae54:	4b35      	ldr	r3, [pc, #212]	; (800af2c <lwip_netconn_do_delconn+0x1ac>)
 800ae56:	f240 4294 	movw	r2, #1172	; 0x494
 800ae5a:	4938      	ldr	r1, [pc, #224]	; (800af3c <lwip_netconn_do_delconn+0x1bc>)
 800ae5c:	4835      	ldr	r0, [pc, #212]	; (800af34 <lwip_netconn_do_delconn+0x1b4>)
 800ae5e:	f00d ff77 	bl	8018d50 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2204      	movs	r2, #4
 800ae68:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2203      	movs	r2, #3
 800ae6e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff fe14 	bl	800aaac <lwip_netconn_do_close_internal>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d04b      	beq.n	800af22 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	785b      	ldrb	r3, [r3, #1]
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d006      	beq.n	800aea2 <lwip_netconn_do_delconn+0x122>
 800ae94:	4b25      	ldr	r3, [pc, #148]	; (800af2c <lwip_netconn_do_delconn+0x1ac>)
 800ae96:	f240 429a 	movw	r2, #1178	; 0x49a
 800ae9a:	4929      	ldr	r1, [pc, #164]	; (800af40 <lwip_netconn_do_delconn+0x1c0>)
 800ae9c:	4825      	ldr	r0, [pc, #148]	; (800af34 <lwip_netconn_do_delconn+0x1b4>)
 800ae9e:	f00d ff57 	bl	8018d50 <iprintf>
            UNLOCK_TCPIP_CORE();
 800aea2:	4828      	ldr	r0, [pc, #160]	; (800af44 <lwip_netconn_do_delconn+0x1c4>)
 800aea4:	f00b ffd1 	bl	8016e4a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	330c      	adds	r3, #12
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f00b ff28 	bl	8016d06 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aeb6:	4823      	ldr	r0, [pc, #140]	; (800af44 <lwip_netconn_do_delconn+0x1c4>)
 800aeb8:	f00b ffb8 	bl	8016e2c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	785b      	ldrb	r3, [r3, #1]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d02d      	beq.n	800af22 <lwip_netconn_do_delconn+0x1a2>
 800aec6:	4b19      	ldr	r3, [pc, #100]	; (800af2c <lwip_netconn_do_delconn+0x1ac>)
 800aec8:	f240 429e 	movw	r2, #1182	; 0x49e
 800aecc:	491c      	ldr	r1, [pc, #112]	; (800af40 <lwip_netconn_do_delconn+0x1c0>)
 800aece:	4819      	ldr	r0, [pc, #100]	; (800af34 <lwip_netconn_do_delconn+0x1b4>)
 800aed0:	f00d ff3e 	bl	8018d50 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aed4:	e025      	b.n	800af22 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aed6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2200      	movs	r2, #0
 800aede:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d007      	beq.n	800aefa <lwip_netconn_do_delconn+0x17a>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	6810      	ldr	r0, [r2, #0]
 800aef4:	2200      	movs	r2, #0
 800aef6:	2100      	movs	r1, #0
 800aef8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	d007      	beq.n	800af14 <lwip_netconn_do_delconn+0x194>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	6810      	ldr	r0, [r2, #0]
 800af0e:	2200      	movs	r2, #0
 800af10:	2102      	movs	r1, #2
 800af12:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	330c      	adds	r3, #12
 800af1a:	4618      	mov	r0, r3
 800af1c:	f00b ff3e 	bl	8016d9c <sys_sem_valid>
 800af20:	e000      	b.n	800af24 <lwip_netconn_do_delconn+0x1a4>
          return;
 800af22:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	0801a4b4 	.word	0x0801a4b4
 800af30:	0801a824 	.word	0x0801a824
 800af34:	0801a4f8 	.word	0x0801a4f8
 800af38:	0801a838 	.word	0x0801a838
 800af3c:	0801a858 	.word	0x0801a858
 800af40:	0801a874 	.word	0x0801a874
 800af44:	2000a134 	.word	0x2000a134

0800af48 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800af56:	2300      	movs	r3, #0
 800af58:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d102      	bne.n	800af6a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800af64:	f06f 0305 	mvn.w	r3, #5
 800af68:	e070      	b.n	800b04c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d006      	beq.n	800af80 <lwip_netconn_do_connected+0x38>
 800af72:	4b38      	ldr	r3, [pc, #224]	; (800b054 <lwip_netconn_do_connected+0x10c>)
 800af74:	f240 5223 	movw	r2, #1315	; 0x523
 800af78:	4937      	ldr	r1, [pc, #220]	; (800b058 <lwip_netconn_do_connected+0x110>)
 800af7a:	4838      	ldr	r0, [pc, #224]	; (800b05c <lwip_netconn_do_connected+0x114>)
 800af7c:	f00d fee8 	bl	8018d50 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10c      	bne.n	800afa2 <lwip_netconn_do_connected+0x5a>
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	7f1b      	ldrb	r3, [r3, #28]
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d106      	bne.n	800afa2 <lwip_netconn_do_connected+0x5a>
 800af94:	4b2f      	ldr	r3, [pc, #188]	; (800b054 <lwip_netconn_do_connected+0x10c>)
 800af96:	f240 5224 	movw	r2, #1316	; 0x524
 800af9a:	4931      	ldr	r1, [pc, #196]	; (800b060 <lwip_netconn_do_connected+0x118>)
 800af9c:	482f      	ldr	r0, [pc, #188]	; (800b05c <lwip_netconn_do_connected+0x114>)
 800af9e:	f00d fed7 	bl	8018d50 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d008      	beq.n	800afbc <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	79fa      	ldrb	r2, [r7, #7]
 800afb0:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	330c      	adds	r3, #12
 800afba:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afc4:	2b10      	cmp	r3, #16
 800afc6:	d106      	bne.n	800afd6 <lwip_netconn_do_connected+0x8e>
 800afc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800afd0:	69b8      	ldr	r0, [r7, #24]
 800afd2:	f7ff fb8d 	bl	800a6f0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	7f1b      	ldrb	r3, [r3, #28]
 800afda:	f003 0304 	and.w	r3, r3, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bf0c      	ite	eq
 800afe2:	2301      	moveq	r3, #1
 800afe4:	2300      	movne	r3, #0
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	7f1b      	ldrb	r3, [r3, #28]
 800afee:	f023 0304 	bic.w	r3, r3, #4
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d002      	beq.n	800b004 <lwip_netconn_do_connected+0xbc>
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10c      	bne.n	800b01e <lwip_netconn_do_connected+0xd6>
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <lwip_netconn_do_connected+0xc8>
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d006      	beq.n	800b01e <lwip_netconn_do_connected+0xd6>
 800b010:	4b10      	ldr	r3, [pc, #64]	; (800b054 <lwip_netconn_do_connected+0x10c>)
 800b012:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800b016:	4913      	ldr	r1, [pc, #76]	; (800b064 <lwip_netconn_do_connected+0x11c>)
 800b018:	4810      	ldr	r0, [pc, #64]	; (800b05c <lwip_netconn_do_connected+0x114>)
 800b01a:	f00d fe99 	bl	8018d50 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2200      	movs	r2, #0
 800b022:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	2200      	movs	r2, #0
 800b028:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <lwip_netconn_do_connected+0xf6>
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	2200      	movs	r2, #0
 800b038:	2102      	movs	r1, #2
 800b03a:	69b8      	ldr	r0, [r7, #24]
 800b03c:	4798      	blx	r3

  if (was_blocking) {
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800b044:	69f8      	ldr	r0, [r7, #28]
 800b046:	f00b fe8f 	bl	8016d68 <sys_sem_signal>
  }
  return ERR_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	0801a4b4 	.word	0x0801a4b4
 800b058:	0801a87c 	.word	0x0801a87c
 800b05c:	0801a4f8 	.word	0x0801a4f8
 800b060:	0801a89c 	.word	0x0801a89c
 800b064:	0801a8dc 	.word	0x0801a8dc

0800b068 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800b07e:	23f1      	movs	r3, #241	; 0xf1
 800b080:	75fb      	strb	r3, [r7, #23]
 800b082:	e09b      	b.n	800b1bc <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b08e:	2b10      	cmp	r3, #16
 800b090:	d00f      	beq.n	800b0b2 <lwip_netconn_do_connect+0x4a>
 800b092:	2b20      	cmp	r3, #32
 800b094:	f040 8087 	bne.w	800b1a6 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6858      	ldr	r0, [r3, #4]
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	6899      	ldr	r1, [r3, #8]
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	899b      	ldrh	r3, [r3, #12]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f009 f82a 	bl	8014100 <udp_connect>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	75fb      	strb	r3, [r7, #23]
        break;
 800b0b0:	e084      	b.n	800b1bc <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	785b      	ldrb	r3, [r3, #1]
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d102      	bne.n	800b0c2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800b0bc:	23f7      	movs	r3, #247	; 0xf7
 800b0be:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800b0c0:	e07b      	b.n	800b1ba <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800b0cc:	23f6      	movs	r3, #246	; 0xf6
 800b0ce:	75fb      	strb	r3, [r7, #23]
        break;
 800b0d0:	e073      	b.n	800b1ba <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff fb0a 	bl	800a6f0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6858      	ldr	r0, [r3, #4]
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6899      	ldr	r1, [r3, #8]
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	899a      	ldrh	r2, [r3, #12]
 800b0ea:	4b38      	ldr	r3, [pc, #224]	; (800b1cc <lwip_netconn_do_connect+0x164>)
 800b0ec:	f003 f85a 	bl	800e1a4 <tcp_connect>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800b0f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d15e      	bne.n	800b1ba <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	7f1b      	ldrb	r3, [r3, #28]
 800b102:	f003 0302 	and.w	r3, r3, #2
 800b106:	2b00      	cmp	r3, #0
 800b108:	bf14      	ite	ne
 800b10a:	2301      	movne	r3, #1
 800b10c:	2300      	moveq	r3, #0
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2203      	movs	r2, #3
 800b118:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d009      	beq.n	800b134 <lwip_netconn_do_connect+0xcc>
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	7f1a      	ldrb	r2, [r3, #28]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f042 0204 	orr.w	r2, r2, #4
 800b12e:	b2d2      	uxtb	r2, r2
 800b130:	771a      	strb	r2, [r3, #28]
 800b132:	e008      	b.n	800b146 <lwip_netconn_do_connect+0xde>
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	7f1a      	ldrb	r2, [r3, #28]
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f022 0204 	bic.w	r2, r2, #4
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800b14c:	23fb      	movs	r3, #251	; 0xfb
 800b14e:	75fb      	strb	r3, [r7, #23]
        break;
 800b150:	e033      	b.n	800b1ba <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	785b      	ldrb	r3, [r3, #1]
 800b160:	2b03      	cmp	r3, #3
 800b162:	d006      	beq.n	800b172 <lwip_netconn_do_connect+0x10a>
 800b164:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <lwip_netconn_do_connect+0x168>)
 800b166:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b16a:	491a      	ldr	r1, [pc, #104]	; (800b1d4 <lwip_netconn_do_connect+0x16c>)
 800b16c:	481a      	ldr	r0, [pc, #104]	; (800b1d8 <lwip_netconn_do_connect+0x170>)
 800b16e:	f00d fdef 	bl	8018d50 <iprintf>
              UNLOCK_TCPIP_CORE();
 800b172:	481a      	ldr	r0, [pc, #104]	; (800b1dc <lwip_netconn_do_connect+0x174>)
 800b174:	f00b fe69 	bl	8016e4a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	330c      	adds	r3, #12
 800b17e:	2100      	movs	r1, #0
 800b180:	4618      	mov	r0, r3
 800b182:	f00b fdc0 	bl	8016d06 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800b186:	4815      	ldr	r0, [pc, #84]	; (800b1dc <lwip_netconn_do_connect+0x174>)
 800b188:	f00b fe50 	bl	8016e2c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	785b      	ldrb	r3, [r3, #1]
 800b192:	2b03      	cmp	r3, #3
 800b194:	d116      	bne.n	800b1c4 <lwip_netconn_do_connect+0x15c>
 800b196:	4b0e      	ldr	r3, [pc, #56]	; (800b1d0 <lwip_netconn_do_connect+0x168>)
 800b198:	f240 5274 	movw	r2, #1396	; 0x574
 800b19c:	490d      	ldr	r1, [pc, #52]	; (800b1d4 <lwip_netconn_do_connect+0x16c>)
 800b19e:	480e      	ldr	r0, [pc, #56]	; (800b1d8 <lwip_netconn_do_connect+0x170>)
 800b1a0:	f00d fdd6 	bl	8018d50 <iprintf>
              return;
 800b1a4:	e00e      	b.n	800b1c4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b1a6:	4b0a      	ldr	r3, [pc, #40]	; (800b1d0 <lwip_netconn_do_connect+0x168>)
 800b1a8:	f240 527d 	movw	r2, #1405	; 0x57d
 800b1ac:	490c      	ldr	r1, [pc, #48]	; (800b1e0 <lwip_netconn_do_connect+0x178>)
 800b1ae:	480a      	ldr	r0, [pc, #40]	; (800b1d8 <lwip_netconn_do_connect+0x170>)
 800b1b0:	f00d fdce 	bl	8018d50 <iprintf>
 800b1b4:	23fa      	movs	r3, #250	; 0xfa
 800b1b6:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b1b8:	e000      	b.n	800b1bc <lwip_netconn_do_connect+0x154>
        break;
 800b1ba:	bf00      	nop
    }
  }
  msg->err = err;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	7dfa      	ldrb	r2, [r7, #23]
 800b1c0:	711a      	strb	r2, [r3, #4]
 800b1c2:	e000      	b.n	800b1c6 <lwip_netconn_do_connect+0x15e>
              return;
 800b1c4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	0800af49 	.word	0x0800af49
 800b1d0:	0801a4b4 	.word	0x0801a4b4
 800b1d4:	0801a874 	.word	0x0801a874
 800b1d8:	0801a4f8 	.word	0x0801a4f8
 800b1dc:	2000a134 	.word	0x2000a134
 800b1e0:	0801a8fc 	.word	0x0801a8fc

0800b1e4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d022      	beq.n	800b246 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b20a:	2b10      	cmp	r3, #16
 800b20c:	d11b      	bne.n	800b246 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b21a:	d202      	bcs.n	800b222 <lwip_netconn_do_recv+0x3e>
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	e001      	b.n	800b226 <lwip_netconn_do_recv+0x42>
 800b222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b226:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	89fa      	ldrh	r2, [r7, #14]
 800b230:	4611      	mov	r1, r2
 800b232:	4618      	mov	r0, r3
 800b234:	f002 ff20 	bl	800e078 <tcp_recved>
        remaining -= recved;
 800b238:	89fb      	ldrh	r3, [r7, #14]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1e6      	bne.n	800b214 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b246:	bf00      	nop
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b088      	sub	sp, #32
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <lwip_netconn_do_writemore+0x24>
 800b266:	4b96      	ldr	r3, [pc, #600]	; (800b4c0 <lwip_netconn_do_writemore+0x270>)
 800b268:	f240 6273 	movw	r2, #1651	; 0x673
 800b26c:	4995      	ldr	r1, [pc, #596]	; (800b4c4 <lwip_netconn_do_writemore+0x274>)
 800b26e:	4896      	ldr	r0, [pc, #600]	; (800b4c8 <lwip_netconn_do_writemore+0x278>)
 800b270:	f00d fd6e 	bl	8018d50 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d006      	beq.n	800b28a <lwip_netconn_do_writemore+0x3a>
 800b27c:	4b90      	ldr	r3, [pc, #576]	; (800b4c0 <lwip_netconn_do_writemore+0x270>)
 800b27e:	f240 6274 	movw	r2, #1652	; 0x674
 800b282:	4992      	ldr	r1, [pc, #584]	; (800b4cc <lwip_netconn_do_writemore+0x27c>)
 800b284:	4890      	ldr	r0, [pc, #576]	; (800b4c8 <lwip_netconn_do_writemore+0x278>)
 800b286:	f00d fd63 	bl	8018d50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d106      	bne.n	800b2a0 <lwip_netconn_do_writemore+0x50>
 800b292:	4b8b      	ldr	r3, [pc, #556]	; (800b4c0 <lwip_netconn_do_writemore+0x270>)
 800b294:	f240 6275 	movw	r2, #1653	; 0x675
 800b298:	498d      	ldr	r1, [pc, #564]	; (800b4d0 <lwip_netconn_do_writemore+0x280>)
 800b29a:	488b      	ldr	r0, [pc, #556]	; (800b4c8 <lwip_netconn_do_writemore+0x278>)
 800b29c:	f00d fd58 	bl	8018d50 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d106      	bne.n	800b2b6 <lwip_netconn_do_writemore+0x66>
 800b2a8:	4b85      	ldr	r3, [pc, #532]	; (800b4c0 <lwip_netconn_do_writemore+0x270>)
 800b2aa:	f240 6276 	movw	r2, #1654	; 0x676
 800b2ae:	4989      	ldr	r1, [pc, #548]	; (800b4d4 <lwip_netconn_do_writemore+0x284>)
 800b2b0:	4885      	ldr	r0, [pc, #532]	; (800b4c8 <lwip_netconn_do_writemore+0x278>)
 800b2b2:	f00d fd4d 	bl	8018d50 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	699a      	ldr	r2, [r3, #24]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d306      	bcc.n	800b2d4 <lwip_netconn_do_writemore+0x84>
 800b2c6:	4b7e      	ldr	r3, [pc, #504]	; (800b4c0 <lwip_netconn_do_writemore+0x270>)
 800b2c8:	f240 6277 	movw	r2, #1655	; 0x677
 800b2cc:	4982      	ldr	r1, [pc, #520]	; (800b4d8 <lwip_netconn_do_writemore+0x288>)
 800b2ce:	487e      	ldr	r0, [pc, #504]	; (800b4c8 <lwip_netconn_do_writemore+0x278>)
 800b2d0:	f00d fd3e 	bl	8018d50 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	899b      	ldrh	r3, [r3, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <lwip_netconn_do_writemore+0x9c>
 800b2de:	4b78      	ldr	r3, [pc, #480]	; (800b4c0 <lwip_netconn_do_writemore+0x270>)
 800b2e0:	f240 6279 	movw	r2, #1657	; 0x679
 800b2e4:	497d      	ldr	r1, [pc, #500]	; (800b4dc <lwip_netconn_do_writemore+0x28c>)
 800b2e6:	4878      	ldr	r0, [pc, #480]	; (800b4c8 <lwip_netconn_do_writemore+0x278>)
 800b2e8:	f00d fd32 	bl	8018d50 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	7f1b      	ldrb	r3, [r3, #28]
 800b2f2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7f1b      	ldrb	r3, [r3, #28]
 800b2f8:	f003 0302 	and.w	r3, r3, #2
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d104      	bne.n	800b30a <lwip_netconn_do_writemore+0xba>
 800b300:	7ebb      	ldrb	r3, [r7, #26]
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <lwip_netconn_do_writemore+0xbe>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <lwip_netconn_do_writemore+0xc0>
 800b30e:	2300      	movs	r3, #0
 800b310:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	4413      	add	r3, r2
 800b322:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a1b      	ldr	r3, [r3, #32]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a1b      	ldr	r3, [r3, #32]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33c:	d307      	bcc.n	800b34e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b33e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b342:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b344:	7ebb      	ldrb	r3, [r7, #26]
 800b346:	f043 0302 	orr.w	r3, r3, #2
 800b34a:	76bb      	strb	r3, [r7, #26]
 800b34c:	e001      	b.n	800b352 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b35a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b35c:	89fa      	ldrh	r2, [r7, #14]
 800b35e:	8bbb      	ldrh	r3, [r7, #28]
 800b360:	429a      	cmp	r2, r3
 800b362:	d216      	bcs.n	800b392 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b364:	89fb      	ldrh	r3, [r7, #14]
 800b366:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b368:	7e3b      	ldrb	r3, [r7, #24]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00d      	beq.n	800b38a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b36e:	8bbb      	ldrh	r3, [r7, #28]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10e      	bne.n	800b392 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a1b      	ldr	r3, [r3, #32]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <lwip_netconn_do_writemore+0x134>
 800b37e:	f06f 0306 	mvn.w	r3, #6
 800b382:	e000      	b.n	800b386 <lwip_netconn_do_writemore+0x136>
 800b384:	2300      	movs	r3, #0
 800b386:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b388:	e07d      	b.n	800b486 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b38a:	7ebb      	ldrb	r3, [r7, #26]
 800b38c:	f043 0302 	orr.w	r3, r3, #2
 800b390:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	691a      	ldr	r2, [r3, #16]
 800b398:	8bbb      	ldrh	r3, [r7, #28]
 800b39a:	441a      	add	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d906      	bls.n	800b3b6 <lwip_netconn_do_writemore+0x166>
 800b3a8:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <lwip_netconn_do_writemore+0x270>)
 800b3aa:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b3ae:	494c      	ldr	r1, [pc, #304]	; (800b4e0 <lwip_netconn_do_writemore+0x290>)
 800b3b0:	4845      	ldr	r0, [pc, #276]	; (800b4c8 <lwip_netconn_do_writemore+0x278>)
 800b3b2:	f00d fccd 	bl	8018d50 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b3b6:	8bbb      	ldrh	r3, [r7, #28]
 800b3b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d103      	bne.n	800b3c8 <lwip_netconn_do_writemore+0x178>
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3c6:	d209      	bcs.n	800b3dc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b3cc:	8bba      	ldrh	r2, [r7, #28]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d10b      	bne.n	800b3ea <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	899b      	ldrh	r3, [r3, #12]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d906      	bls.n	800b3ea <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b3e0:	7ebb      	ldrb	r3, [r7, #26]
 800b3e2:	f043 0302 	orr.w	r3, r3, #2
 800b3e6:	76bb      	strb	r3, [r7, #26]
 800b3e8:	e001      	b.n	800b3ee <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6858      	ldr	r0, [r3, #4]
 800b3f2:	7ebb      	ldrb	r3, [r7, #26]
 800b3f4:	8bba      	ldrh	r2, [r7, #28]
 800b3f6:	6979      	ldr	r1, [r7, #20]
 800b3f8:	f006 fd5e 	bl	8011eb8 <tcp_write>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b400:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d12c      	bne.n	800b462 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	6999      	ldr	r1, [r3, #24]
 800b40e:	8bba      	ldrh	r2, [r7, #28]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	440a      	add	r2, r1
 800b416:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	6919      	ldr	r1, [r3, #16]
 800b41e:	8bba      	ldrh	r2, [r7, #28]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	440a      	add	r2, r1
 800b426:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	691a      	ldr	r2, [r3, #16]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	429a      	cmp	r2, r3
 800b438:	d113      	bne.n	800b462 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	899a      	ldrh	r2, [r3, #12]
 800b440:	3a01      	subs	r2, #1
 800b442:	b292      	uxth	r2, r2
 800b444:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	899b      	ldrh	r3, [r3, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d008      	beq.n	800b462 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	3208      	adds	r2, #8
 800b458:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	2200      	movs	r2, #0
 800b460:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b462:	7e7b      	ldrb	r3, [r7, #25]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <lwip_netconn_do_writemore+0x222>
 800b468:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f43f af50 	beq.w	800b312 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b472:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d004      	beq.n	800b484 <lwip_netconn_do_writemore+0x234>
 800b47a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b47e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b482:	d146      	bne.n	800b512 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b484:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b486:	7e3b      	ldrb	r3, [r7, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d02b      	beq.n	800b4e4 <lwip_netconn_do_writemore+0x294>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a1b      	ldr	r3, [r3, #32]
 800b490:	699a      	ldr	r2, [r3, #24]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d223      	bcs.n	800b4e4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <lwip_netconn_do_writemore+0x260>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	2103      	movs	r1, #3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	7f1b      	ldrb	r3, [r3, #28]
 800b4b4:	f043 0310 	orr.w	r3, r3, #16
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	771a      	strb	r2, [r3, #28]
 800b4be:	e028      	b.n	800b512 <lwip_netconn_do_writemore+0x2c2>
 800b4c0:	0801a4b4 	.word	0x0801a4b4
 800b4c4:	0801a60c 	.word	0x0801a60c
 800b4c8:	0801a4f8 	.word	0x0801a4f8
 800b4cc:	0801a914 	.word	0x0801a914
 800b4d0:	0801a61c 	.word	0x0801a61c
 800b4d4:	0801a934 	.word	0x0801a934
 800b4d8:	0801a94c 	.word	0x0801a94c
 800b4dc:	0801a98c 	.word	0x0801a98c
 800b4e0:	0801a9b4 	.word	0x0801a9b4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b4ec:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b4f0:	d305      	bcc.n	800b4fe <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	d909      	bls.n	800b512 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	2b00      	cmp	r3, #0
 800b504:	d005      	beq.n	800b512 <lwip_netconn_do_writemore+0x2c2>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2200      	movs	r2, #0
 800b50c:	2103      	movs	r1, #3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b512:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d11d      	bne.n	800b556 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	699a      	ldr	r2, [r3, #24]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	429a      	cmp	r2, r3
 800b528:	d002      	beq.n	800b530 <lwip_netconn_do_writemore+0x2e0>
 800b52a:	7e3b      	ldrb	r3, [r7, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b530:	2301      	movs	r3, #1
 800b532:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	4618      	mov	r0, r3
 800b53a:	f007 faa7 	bl	8012a8c <tcp_output>
 800b53e:	4603      	mov	r3, r0
 800b540:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b542:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b546:	f113 0f04 	cmn.w	r3, #4
 800b54a:	d12c      	bne.n	800b5a6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b54c:	7b3b      	ldrb	r3, [r7, #12]
 800b54e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b550:	2301      	movs	r3, #1
 800b552:	76fb      	strb	r3, [r7, #27]
 800b554:	e027      	b.n	800b5a6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b55e:	d120      	bne.n	800b5a2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	4618      	mov	r0, r3
 800b566:	f007 fa91 	bl	8012a8c <tcp_output>
 800b56a:	4603      	mov	r3, r0
 800b56c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b56e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b572:	f113 0f04 	cmn.w	r3, #4
 800b576:	d104      	bne.n	800b582 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b578:	7b7b      	ldrb	r3, [r7, #13]
 800b57a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b57c:	2301      	movs	r3, #1
 800b57e:	76fb      	strb	r3, [r7, #27]
 800b580:	e011      	b.n	800b5a6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b582:	7e3b      	ldrb	r3, [r7, #24]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00e      	beq.n	800b5a6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <lwip_netconn_do_writemore+0x348>
 800b592:	f06f 0306 	mvn.w	r3, #6
 800b596:	e000      	b.n	800b59a <lwip_netconn_do_writemore+0x34a>
 800b598:	2300      	movs	r3, #0
 800b59a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b59c:	2301      	movs	r3, #1
 800b59e:	76fb      	strb	r3, [r7, #27]
 800b5a0:	e001      	b.n	800b5a6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b5a6:	7efb      	ldrb	r3, [r7, #27]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d015      	beq.n	800b5d8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	330c      	adds	r3, #12
 800b5b4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	7ffa      	ldrb	r2, [r7, #31]
 800b5bc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b5ca:	78fb      	ldrb	r3, [r7, #3]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b5d0:	68b8      	ldr	r0, [r7, #8]
 800b5d2:	f00b fbc9 	bl	8016d68 <sys_sem_signal>
 800b5d6:	e002      	b.n	800b5de <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b5d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5dc:	e000      	b.n	800b5e0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3720      	adds	r7, #32
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe fd5c 	bl	800a0b6 <netconn_err>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d166      	bne.n	800b6d8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b614:	2b10      	cmp	r3, #16
 800b616:	d15d      	bne.n	800b6d4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	785b      	ldrb	r3, [r3, #1]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b622:	23fb      	movs	r3, #251	; 0xfb
 800b624:	73fb      	strb	r3, [r7, #15]
 800b626:	e057      	b.n	800b6d8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d04d      	beq.n	800b6ce <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2201      	movs	r2, #1
 800b638:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d006      	beq.n	800b652 <lwip_netconn_do_write+0x6a>
 800b644:	4b28      	ldr	r3, [pc, #160]	; (800b6e8 <lwip_netconn_do_write+0x100>)
 800b646:	f240 7223 	movw	r2, #1827	; 0x723
 800b64a:	4928      	ldr	r1, [pc, #160]	; (800b6ec <lwip_netconn_do_write+0x104>)
 800b64c:	4828      	ldr	r0, [pc, #160]	; (800b6f0 <lwip_netconn_do_write+0x108>)
 800b64e:	f00d fb7f 	bl	8018d50 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <lwip_netconn_do_write+0x80>
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <lwip_netconn_do_write+0x100>)
 800b65c:	f240 7224 	movw	r2, #1828	; 0x724
 800b660:	4924      	ldr	r1, [pc, #144]	; (800b6f4 <lwip_netconn_do_write+0x10c>)
 800b662:	4823      	ldr	r0, [pc, #140]	; (800b6f0 <lwip_netconn_do_write+0x108>)
 800b664:	f00d fb74 	bl	8018d50 <iprintf>
        msg->conn->current_msg = msg;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2100      	movs	r1, #0
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff fdea 	bl	800b250 <lwip_netconn_do_writemore>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d02e      	beq.n	800b6e0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	785b      	ldrb	r3, [r3, #1]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d006      	beq.n	800b69a <lwip_netconn_do_write+0xb2>
 800b68c:	4b16      	ldr	r3, [pc, #88]	; (800b6e8 <lwip_netconn_do_write+0x100>)
 800b68e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b692:	4919      	ldr	r1, [pc, #100]	; (800b6f8 <lwip_netconn_do_write+0x110>)
 800b694:	4816      	ldr	r0, [pc, #88]	; (800b6f0 <lwip_netconn_do_write+0x108>)
 800b696:	f00d fb5b 	bl	8018d50 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b69a:	4818      	ldr	r0, [pc, #96]	; (800b6fc <lwip_netconn_do_write+0x114>)
 800b69c:	f00b fbd5 	bl	8016e4a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	330c      	adds	r3, #12
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f00b fb2c 	bl	8016d06 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b6ae:	4813      	ldr	r0, [pc, #76]	; (800b6fc <lwip_netconn_do_write+0x114>)
 800b6b0:	f00b fbbc 	bl	8016e2c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	785b      	ldrb	r3, [r3, #1]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d110      	bne.n	800b6e0 <lwip_netconn_do_write+0xf8>
 800b6be:	4b0a      	ldr	r3, [pc, #40]	; (800b6e8 <lwip_netconn_do_write+0x100>)
 800b6c0:	f240 722c 	movw	r2, #1836	; 0x72c
 800b6c4:	490c      	ldr	r1, [pc, #48]	; (800b6f8 <lwip_netconn_do_write+0x110>)
 800b6c6:	480a      	ldr	r0, [pc, #40]	; (800b6f0 <lwip_netconn_do_write+0x108>)
 800b6c8:	f00d fb42 	bl	8018d50 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b6cc:	e008      	b.n	800b6e0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b6ce:	23f5      	movs	r3, #245	; 0xf5
 800b6d0:	73fb      	strb	r3, [r7, #15]
 800b6d2:	e001      	b.n	800b6d8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b6d4:	23fa      	movs	r3, #250	; 0xfa
 800b6d6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	7bfa      	ldrb	r2, [r7, #15]
 800b6dc:	711a      	strb	r2, [r3, #4]
 800b6de:	e000      	b.n	800b6e2 <lwip_netconn_do_write+0xfa>
        return;
 800b6e0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	0801a4b4 	.word	0x0801a4b4
 800b6ec:	0801a858 	.word	0x0801a858
 800b6f0:	0801a4f8 	.word	0x0801a4f8
 800b6f4:	0801a9e0 	.word	0x0801a9e0
 800b6f8:	0801a874 	.word	0x0801a874
 800b6fc:	2000a134 	.word	0x2000a134

0800b700 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	785b      	ldrb	r3, [r3, #1]
 800b712:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d069      	beq.n	800b7f2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b728:	2b10      	cmp	r3, #16
 800b72a:	d162      	bne.n	800b7f2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b730:	2b03      	cmp	r3, #3
 800b732:	d002      	beq.n	800b73a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b734:	7afb      	ldrb	r3, [r7, #11]
 800b736:	2b02      	cmp	r3, #2
 800b738:	d05b      	beq.n	800b7f2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b73a:	7afb      	ldrb	r3, [r7, #11]
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d103      	bne.n	800b748 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	22f5      	movs	r2, #245	; 0xf5
 800b744:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b746:	e059      	b.n	800b7fc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b748:	7afb      	ldrb	r3, [r7, #11]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d103      	bne.n	800b756 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	22fb      	movs	r2, #251	; 0xfb
 800b752:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b754:	e052      	b.n	800b7fc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	7a1b      	ldrb	r3, [r3, #8]
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d004      	beq.n	800b76c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff f922 	bl	800a9b0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d006      	beq.n	800b784 <lwip_netconn_do_close+0x84>
 800b776:	4b23      	ldr	r3, [pc, #140]	; (800b804 <lwip_netconn_do_close+0x104>)
 800b778:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b77c:	4922      	ldr	r1, [pc, #136]	; (800b808 <lwip_netconn_do_close+0x108>)
 800b77e:	4823      	ldr	r0, [pc, #140]	; (800b80c <lwip_netconn_do_close+0x10c>)
 800b780:	f00d fae6 	bl	8018d50 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2204      	movs	r2, #4
 800b78a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2100      	movs	r1, #0
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff f986 	bl	800aaac <lwip_netconn_do_close_internal>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d029      	beq.n	800b7fa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	785b      	ldrb	r3, [r3, #1]
 800b7ac:	2b04      	cmp	r3, #4
 800b7ae:	d006      	beq.n	800b7be <lwip_netconn_do_close+0xbe>
 800b7b0:	4b14      	ldr	r3, [pc, #80]	; (800b804 <lwip_netconn_do_close+0x104>)
 800b7b2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b7b6:	4916      	ldr	r1, [pc, #88]	; (800b810 <lwip_netconn_do_close+0x110>)
 800b7b8:	4814      	ldr	r0, [pc, #80]	; (800b80c <lwip_netconn_do_close+0x10c>)
 800b7ba:	f00d fac9 	bl	8018d50 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b7be:	4815      	ldr	r0, [pc, #84]	; (800b814 <lwip_netconn_do_close+0x114>)
 800b7c0:	f00b fb43 	bl	8016e4a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	330c      	adds	r3, #12
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f00b fa9a 	bl	8016d06 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b7d2:	4810      	ldr	r0, [pc, #64]	; (800b814 <lwip_netconn_do_close+0x114>)
 800b7d4:	f00b fb2a 	bl	8016e2c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	785b      	ldrb	r3, [r3, #1]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00b      	beq.n	800b7fa <lwip_netconn_do_close+0xfa>
 800b7e2:	4b08      	ldr	r3, [pc, #32]	; (800b804 <lwip_netconn_do_close+0x104>)
 800b7e4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b7e8:	4909      	ldr	r1, [pc, #36]	; (800b810 <lwip_netconn_do_close+0x110>)
 800b7ea:	4808      	ldr	r0, [pc, #32]	; (800b80c <lwip_netconn_do_close+0x10c>)
 800b7ec:	f00d fab0 	bl	8018d50 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b7f0:	e003      	b.n	800b7fa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	22f5      	movs	r2, #245	; 0xf5
 800b7f6:	711a      	strb	r2, [r3, #4]
 800b7f8:	e000      	b.n	800b7fc <lwip_netconn_do_close+0xfc>
      return;
 800b7fa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	0801a4b4 	.word	0x0801a4b4
 800b808:	0801a858 	.word	0x0801a858
 800b80c:	0801a4f8 	.word	0x0801a4f8
 800b810:	0801a874 	.word	0x0801a874
 800b814:	2000a134 	.word	0x2000a134

0800b818 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d013      	beq.n	800b84e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4618      	mov	r0, r3
 800b834:	f001 fdca 	bl	800d3cc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	605a      	str	r2, [r3, #4]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	2006      	movs	r0, #6
 800b84a:	f000 ff1b 	bl	800c684 <memp_free>
  }
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b862:	f008 f9cb 	bl	8013bfc <sys_timeouts_sleeptime>
 800b866:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b86e:	d10b      	bne.n	800b888 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b870:	4813      	ldr	r0, [pc, #76]	; (800b8c0 <tcpip_timeouts_mbox_fetch+0x68>)
 800b872:	f00b faea 	bl	8016e4a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b876:	2200      	movs	r2, #0
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f00b f9a2 	bl	8016bc4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b880:	480f      	ldr	r0, [pc, #60]	; (800b8c0 <tcpip_timeouts_mbox_fetch+0x68>)
 800b882:	f00b fad3 	bl	8016e2c <sys_mutex_lock>
    return;
 800b886:	e018      	b.n	800b8ba <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d102      	bne.n	800b894 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b88e:	f008 f97b 	bl	8013b88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b892:	e7e6      	b.n	800b862 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b894:	480a      	ldr	r0, [pc, #40]	; (800b8c0 <tcpip_timeouts_mbox_fetch+0x68>)
 800b896:	f00b fad8 	bl	8016e4a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f00b f990 	bl	8016bc4 <sys_arch_mbox_fetch>
 800b8a4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b8a6:	4806      	ldr	r0, [pc, #24]	; (800b8c0 <tcpip_timeouts_mbox_fetch+0x68>)
 800b8a8:	f00b fac0 	bl	8016e2c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8b2:	d102      	bne.n	800b8ba <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b8b4:	f008 f968 	bl	8013b88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b8b8:	e7d3      	b.n	800b862 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	2000a134 	.word	0x2000a134

0800b8c4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b8cc:	4810      	ldr	r0, [pc, #64]	; (800b910 <tcpip_thread+0x4c>)
 800b8ce:	f00b faad 	bl	8016e2c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b8d2:	4b10      	ldr	r3, [pc, #64]	; (800b914 <tcpip_thread+0x50>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b8da:	4b0e      	ldr	r3, [pc, #56]	; (800b914 <tcpip_thread+0x50>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a0e      	ldr	r2, [pc, #56]	; (800b918 <tcpip_thread+0x54>)
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b8e6:	f107 030c 	add.w	r3, r7, #12
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	480b      	ldr	r0, [pc, #44]	; (800b91c <tcpip_thread+0x58>)
 800b8ee:	f7ff ffb3 	bl	800b858 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d106      	bne.n	800b906 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b8f8:	4b09      	ldr	r3, [pc, #36]	; (800b920 <tcpip_thread+0x5c>)
 800b8fa:	2291      	movs	r2, #145	; 0x91
 800b8fc:	4909      	ldr	r1, [pc, #36]	; (800b924 <tcpip_thread+0x60>)
 800b8fe:	480a      	ldr	r0, [pc, #40]	; (800b928 <tcpip_thread+0x64>)
 800b900:	f00d fa26 	bl	8018d50 <iprintf>
      continue;
 800b904:	e003      	b.n	800b90e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 f80f 	bl	800b92c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b90e:	e7ea      	b.n	800b8e6 <tcpip_thread+0x22>
 800b910:	2000a134 	.word	0x2000a134
 800b914:	2000a128 	.word	0x2000a128
 800b918:	2000a12c 	.word	0x2000a12c
 800b91c:	2000a130 	.word	0x2000a130
 800b920:	0801aa0c 	.word	0x0801aa0c
 800b924:	0801aa3c 	.word	0x0801aa3c
 800b928:	0801aa5c 	.word	0x0801aa5c

0800b92c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d026      	beq.n	800b98a <tcpip_thread_handle_msg+0x5e>
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	dc2b      	bgt.n	800b998 <tcpip_thread_handle_msg+0x6c>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <tcpip_thread_handle_msg+0x1e>
 800b944:	2b01      	cmp	r3, #1
 800b946:	d015      	beq.n	800b974 <tcpip_thread_handle_msg+0x48>
 800b948:	e026      	b.n	800b998 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	6850      	ldr	r0, [r2, #4]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6892      	ldr	r2, [r2, #8]
 800b956:	4611      	mov	r1, r2
 800b958:	4798      	blx	r3
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	4618      	mov	r0, r3
 800b966:	f001 fd31 	bl	800d3cc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	2009      	movs	r0, #9
 800b96e:	f000 fe89 	bl	800c684 <memp_free>
      break;
 800b972:	e018      	b.n	800b9a6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	6892      	ldr	r2, [r2, #8]
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b980:	6879      	ldr	r1, [r7, #4]
 800b982:	2008      	movs	r0, #8
 800b984:	f000 fe7e 	bl	800c684 <memp_free>
      break;
 800b988:	e00d      	b.n	800b9a6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	6892      	ldr	r2, [r2, #8]
 800b992:	4610      	mov	r0, r2
 800b994:	4798      	blx	r3
      break;
 800b996:	e006      	b.n	800b9a6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b998:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <tcpip_thread_handle_msg+0x84>)
 800b99a:	22cf      	movs	r2, #207	; 0xcf
 800b99c:	4905      	ldr	r1, [pc, #20]	; (800b9b4 <tcpip_thread_handle_msg+0x88>)
 800b99e:	4806      	ldr	r0, [pc, #24]	; (800b9b8 <tcpip_thread_handle_msg+0x8c>)
 800b9a0:	f00d f9d6 	bl	8018d50 <iprintf>
      break;
 800b9a4:	bf00      	nop
  }
}
 800b9a6:	bf00      	nop
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0801aa0c 	.word	0x0801aa0c
 800b9b4:	0801aa3c 	.word	0x0801aa3c
 800b9b8:	0801aa5c 	.word	0x0801aa5c

0800b9bc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b9c8:	481a      	ldr	r0, [pc, #104]	; (800ba34 <tcpip_inpkt+0x78>)
 800b9ca:	f00b f956 	bl	8016c7a <sys_mbox_valid>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d105      	bne.n	800b9e0 <tcpip_inpkt+0x24>
 800b9d4:	4b18      	ldr	r3, [pc, #96]	; (800ba38 <tcpip_inpkt+0x7c>)
 800b9d6:	22fc      	movs	r2, #252	; 0xfc
 800b9d8:	4918      	ldr	r1, [pc, #96]	; (800ba3c <tcpip_inpkt+0x80>)
 800b9da:	4819      	ldr	r0, [pc, #100]	; (800ba40 <tcpip_inpkt+0x84>)
 800b9dc:	f00d f9b8 	bl	8018d50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b9e0:	2009      	movs	r0, #9
 800b9e2:	f000 fdd9 	bl	800c598 <memp_malloc>
 800b9e6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b9ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9f2:	e01a      	b.n	800ba2a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ba0c:	6979      	ldr	r1, [r7, #20]
 800ba0e:	4809      	ldr	r0, [pc, #36]	; (800ba34 <tcpip_inpkt+0x78>)
 800ba10:	f00b f8be 	bl	8016b90 <sys_mbox_trypost>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d006      	beq.n	800ba28 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ba1a:	6979      	ldr	r1, [r7, #20]
 800ba1c:	2009      	movs	r0, #9
 800ba1e:	f000 fe31 	bl	800c684 <memp_free>
    return ERR_MEM;
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba26:	e000      	b.n	800ba2a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ba28:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2000a130 	.word	0x2000a130
 800ba38:	0801aa0c 	.word	0x0801aa0c
 800ba3c:	0801aa84 	.word	0x0801aa84
 800ba40:	0801aa5c 	.word	0x0801aa5c

0800ba44 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba54:	f003 0318 	and.w	r3, r3, #24
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d006      	beq.n	800ba6a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ba5c:	4a08      	ldr	r2, [pc, #32]	; (800ba80 <tcpip_input+0x3c>)
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff ffab 	bl	800b9bc <tcpip_inpkt>
 800ba66:	4603      	mov	r3, r0
 800ba68:	e005      	b.n	800ba76 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ba6a:	4a06      	ldr	r2, [pc, #24]	; (800ba84 <tcpip_input+0x40>)
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff ffa4 	bl	800b9bc <tcpip_inpkt>
 800ba74:	4603      	mov	r3, r0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	0801697d 	.word	0x0801697d
 800ba84:	08015631 	.word	0x08015631

0800ba88 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ba92:	4819      	ldr	r0, [pc, #100]	; (800baf8 <tcpip_try_callback+0x70>)
 800ba94:	f00b f8f1 	bl	8016c7a <sys_mbox_valid>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <tcpip_try_callback+0x24>
 800ba9e:	4b17      	ldr	r3, [pc, #92]	; (800bafc <tcpip_try_callback+0x74>)
 800baa0:	f240 125d 	movw	r2, #349	; 0x15d
 800baa4:	4916      	ldr	r1, [pc, #88]	; (800bb00 <tcpip_try_callback+0x78>)
 800baa6:	4817      	ldr	r0, [pc, #92]	; (800bb04 <tcpip_try_callback+0x7c>)
 800baa8:	f00d f952 	bl	8018d50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800baac:	2008      	movs	r0, #8
 800baae:	f000 fd73 	bl	800c598 <memp_malloc>
 800bab2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800baba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800babe:	e017      	b.n	800baf0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2201      	movs	r2, #1
 800bac4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bad2:	68f9      	ldr	r1, [r7, #12]
 800bad4:	4808      	ldr	r0, [pc, #32]	; (800baf8 <tcpip_try_callback+0x70>)
 800bad6:	f00b f85b 	bl	8016b90 <sys_mbox_trypost>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d006      	beq.n	800baee <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bae0:	68f9      	ldr	r1, [r7, #12]
 800bae2:	2008      	movs	r0, #8
 800bae4:	f000 fdce 	bl	800c684 <memp_free>
    return ERR_MEM;
 800bae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baec:	e000      	b.n	800baf0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	2000a130 	.word	0x2000a130
 800bafc:	0801aa0c 	.word	0x0801aa0c
 800bb00:	0801aa84 	.word	0x0801aa84
 800bb04:	0801aa5c 	.word	0x0801aa5c

0800bb08 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800bb14:	4806      	ldr	r0, [pc, #24]	; (800bb30 <tcpip_send_msg_wait_sem+0x28>)
 800bb16:	f00b f989 	bl	8016e2c <sys_mutex_lock>
  fn(apimsg);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	68b8      	ldr	r0, [r7, #8]
 800bb1e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800bb20:	4803      	ldr	r0, [pc, #12]	; (800bb30 <tcpip_send_msg_wait_sem+0x28>)
 800bb22:	f00b f992 	bl	8016e4a <sys_mutex_unlock>
  return ERR_OK;
 800bb26:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	2000a134 	.word	0x2000a134

0800bb34 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bb3e:	f000 f871 	bl	800bc24 <lwip_init>

  tcpip_init_done = initfunc;
 800bb42:	4a17      	ldr	r2, [pc, #92]	; (800bba0 <tcpip_init+0x6c>)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bb48:	4a16      	ldr	r2, [pc, #88]	; (800bba4 <tcpip_init+0x70>)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bb4e:	2106      	movs	r1, #6
 800bb50:	4815      	ldr	r0, [pc, #84]	; (800bba8 <tcpip_init+0x74>)
 800bb52:	f00a ffe9 	bl	8016b28 <sys_mbox_new>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d006      	beq.n	800bb6a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bb5c:	4b13      	ldr	r3, [pc, #76]	; (800bbac <tcpip_init+0x78>)
 800bb5e:	f240 2261 	movw	r2, #609	; 0x261
 800bb62:	4913      	ldr	r1, [pc, #76]	; (800bbb0 <tcpip_init+0x7c>)
 800bb64:	4813      	ldr	r0, [pc, #76]	; (800bbb4 <tcpip_init+0x80>)
 800bb66:	f00d f8f3 	bl	8018d50 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bb6a:	4813      	ldr	r0, [pc, #76]	; (800bbb8 <tcpip_init+0x84>)
 800bb6c:	f00b f942 	bl	8016df4 <sys_mutex_new>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d006      	beq.n	800bb84 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <tcpip_init+0x78>)
 800bb78:	f240 2265 	movw	r2, #613	; 0x265
 800bb7c:	490f      	ldr	r1, [pc, #60]	; (800bbbc <tcpip_init+0x88>)
 800bb7e:	480d      	ldr	r0, [pc, #52]	; (800bbb4 <tcpip_init+0x80>)
 800bb80:	f00d f8e6 	bl	8018d50 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bb84:	2300      	movs	r3, #0
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	490c      	ldr	r1, [pc, #48]	; (800bbc0 <tcpip_init+0x8c>)
 800bb90:	480c      	ldr	r0, [pc, #48]	; (800bbc4 <tcpip_init+0x90>)
 800bb92:	f00b f967 	bl	8016e64 <sys_thread_new>
}
 800bb96:	bf00      	nop
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	2000a128 	.word	0x2000a128
 800bba4:	2000a12c 	.word	0x2000a12c
 800bba8:	2000a130 	.word	0x2000a130
 800bbac:	0801aa0c 	.word	0x0801aa0c
 800bbb0:	0801aa94 	.word	0x0801aa94
 800bbb4:	0801aa5c 	.word	0x0801aa5c
 800bbb8:	2000a134 	.word	0x2000a134
 800bbbc:	0801aab8 	.word	0x0801aab8
 800bbc0:	0800b8c5 	.word	0x0800b8c5
 800bbc4:	0801aadc 	.word	0x0801aadc

0800bbc8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bbd2:	88fb      	ldrh	r3, [r7, #6]
 800bbd4:	021b      	lsls	r3, r3, #8
 800bbd6:	b21a      	sxth	r2, r3
 800bbd8:	88fb      	ldrh	r3, [r7, #6]
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	b21b      	sxth	r3, r3
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	b29b      	uxth	r3, r3
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	061a      	lsls	r2, r3, #24
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc06:	431a      	orrs	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	0a1b      	lsrs	r3, r3, #8
 800bc0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc10:	431a      	orrs	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	0e1b      	lsrs	r3, r3, #24
 800bc16:	4313      	orrs	r3, r2
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bc2e:	f00b f8d3 	bl	8016dd8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bc32:	f000 f8d9 	bl	800bde8 <mem_init>
  memp_init();
 800bc36:	f000 fc41 	bl	800c4bc <memp_init>
  pbuf_init();
  netif_init();
 800bc3a:	f000 fd4d 	bl	800c6d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bc3e:	f008 f815 	bl	8013c6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc42:	f001 fe5d 	bl	800d900 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bc46:	f007 ff57 	bl	8013af8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc4a:	bf00      	nop
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bc5e:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <ptr_to_mem+0x20>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	88fb      	ldrh	r3, [r7, #6]
 800bc64:	4413      	add	r3, r2
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	2000e14c 	.word	0x2000e14c

0800bc78 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bc80:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <mem_to_ptr+0x20>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	b29b      	uxth	r3, r3
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	2000e14c 	.word	0x2000e14c

0800bc9c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bca4:	4b47      	ldr	r3, [pc, #284]	; (800bdc4 <plug_holes+0x128>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d206      	bcs.n	800bcbc <plug_holes+0x20>
 800bcae:	4b46      	ldr	r3, [pc, #280]	; (800bdc8 <plug_holes+0x12c>)
 800bcb0:	f240 12df 	movw	r2, #479	; 0x1df
 800bcb4:	4945      	ldr	r1, [pc, #276]	; (800bdcc <plug_holes+0x130>)
 800bcb6:	4846      	ldr	r0, [pc, #280]	; (800bdd0 <plug_holes+0x134>)
 800bcb8:	f00d f84a 	bl	8018d50 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bcbc:	4b45      	ldr	r3, [pc, #276]	; (800bdd4 <plug_holes+0x138>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d306      	bcc.n	800bcd4 <plug_holes+0x38>
 800bcc6:	4b40      	ldr	r3, [pc, #256]	; (800bdc8 <plug_holes+0x12c>)
 800bcc8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bccc:	4942      	ldr	r1, [pc, #264]	; (800bdd8 <plug_holes+0x13c>)
 800bcce:	4840      	ldr	r0, [pc, #256]	; (800bdd0 <plug_holes+0x134>)
 800bcd0:	f00d f83e 	bl	8018d50 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	791b      	ldrb	r3, [r3, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d006      	beq.n	800bcea <plug_holes+0x4e>
 800bcdc:	4b3a      	ldr	r3, [pc, #232]	; (800bdc8 <plug_holes+0x12c>)
 800bcde:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bce2:	493e      	ldr	r1, [pc, #248]	; (800bddc <plug_holes+0x140>)
 800bce4:	483a      	ldr	r0, [pc, #232]	; (800bdd0 <plug_holes+0x134>)
 800bce6:	f00d f833 	bl	8018d50 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d906      	bls.n	800bd04 <plug_holes+0x68>
 800bcf6:	4b34      	ldr	r3, [pc, #208]	; (800bdc8 <plug_holes+0x12c>)
 800bcf8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bcfc:	4938      	ldr	r1, [pc, #224]	; (800bde0 <plug_holes+0x144>)
 800bcfe:	4834      	ldr	r0, [pc, #208]	; (800bdd0 <plug_holes+0x134>)
 800bd00:	f00d f826 	bl	8018d50 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff ffa3 	bl	800bc54 <ptr_to_mem>
 800bd0e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d025      	beq.n	800bd64 <plug_holes+0xc8>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	791b      	ldrb	r3, [r3, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d121      	bne.n	800bd64 <plug_holes+0xc8>
 800bd20:	4b2c      	ldr	r3, [pc, #176]	; (800bdd4 <plug_holes+0x138>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d01c      	beq.n	800bd64 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bd2a:	4b2e      	ldr	r3, [pc, #184]	; (800bde4 <plug_holes+0x148>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d102      	bne.n	800bd3a <plug_holes+0x9e>
      lfree = mem;
 800bd34:	4a2b      	ldr	r2, [pc, #172]	; (800bde4 <plug_holes+0x148>)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	881a      	ldrh	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d00a      	beq.n	800bd64 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff ff7e 	bl	800bc54 <ptr_to_mem>
 800bd58:	4604      	mov	r4, r0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7ff ff8c 	bl	800bc78 <mem_to_ptr>
 800bd60:	4603      	mov	r3, r0
 800bd62:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	885b      	ldrh	r3, [r3, #2]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff ff73 	bl	800bc54 <ptr_to_mem>
 800bd6e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d020      	beq.n	800bdba <plug_holes+0x11e>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	791b      	ldrb	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d11c      	bne.n	800bdba <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bd80:	4b18      	ldr	r3, [pc, #96]	; (800bde4 <plug_holes+0x148>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d102      	bne.n	800bd90 <plug_holes+0xf4>
      lfree = pmem;
 800bd8a:	4a16      	ldr	r2, [pc, #88]	; (800bde4 <plug_holes+0x148>)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	881a      	ldrh	r2, [r3, #0]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00a      	beq.n	800bdba <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff ff53 	bl	800bc54 <ptr_to_mem>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	68b8      	ldr	r0, [r7, #8]
 800bdb2:	f7ff ff61 	bl	800bc78 <mem_to_ptr>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bdba:	bf00      	nop
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd90      	pop	{r4, r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	2000e14c 	.word	0x2000e14c
 800bdc8:	0801aaec 	.word	0x0801aaec
 800bdcc:	0801ab1c 	.word	0x0801ab1c
 800bdd0:	0801ab34 	.word	0x0801ab34
 800bdd4:	2000e150 	.word	0x2000e150
 800bdd8:	0801ab5c 	.word	0x0801ab5c
 800bddc:	0801ab78 	.word	0x0801ab78
 800bde0:	0801ab94 	.word	0x0801ab94
 800bde4:	2000e158 	.word	0x2000e158

0800bde8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bdee:	4b1f      	ldr	r3, [pc, #124]	; (800be6c <mem_init+0x84>)
 800bdf0:	3303      	adds	r3, #3
 800bdf2:	f023 0303 	bic.w	r3, r3, #3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	4b1d      	ldr	r3, [pc, #116]	; (800be70 <mem_init+0x88>)
 800bdfa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bdfc:	4b1c      	ldr	r3, [pc, #112]	; (800be70 <mem_init+0x88>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800be08:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800be16:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800be1a:	f7ff ff1b 	bl	800bc54 <ptr_to_mem>
 800be1e:	4603      	mov	r3, r0
 800be20:	4a14      	ldr	r2, [pc, #80]	; (800be74 <mem_init+0x8c>)
 800be22:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800be24:	4b13      	ldr	r3, [pc, #76]	; (800be74 <mem_init+0x8c>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2201      	movs	r2, #1
 800be2a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800be2c:	4b11      	ldr	r3, [pc, #68]	; (800be74 <mem_init+0x8c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800be34:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800be36:	4b0f      	ldr	r3, [pc, #60]	; (800be74 <mem_init+0x8c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800be3e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800be40:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <mem_init+0x88>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a0c      	ldr	r2, [pc, #48]	; (800be78 <mem_init+0x90>)
 800be46:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800be48:	480c      	ldr	r0, [pc, #48]	; (800be7c <mem_init+0x94>)
 800be4a:	f00a ffd3 	bl	8016df4 <sys_mutex_new>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d006      	beq.n	800be62 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <mem_init+0x98>)
 800be56:	f240 221f 	movw	r2, #543	; 0x21f
 800be5a:	490a      	ldr	r1, [pc, #40]	; (800be84 <mem_init+0x9c>)
 800be5c:	480a      	ldr	r0, [pc, #40]	; (800be88 <mem_init+0xa0>)
 800be5e:	f00c ff77 	bl	8018d50 <iprintf>
  }
}
 800be62:	bf00      	nop
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	2000a150 	.word	0x2000a150
 800be70:	2000e14c 	.word	0x2000e14c
 800be74:	2000e150 	.word	0x2000e150
 800be78:	2000e158 	.word	0x2000e158
 800be7c:	2000e154 	.word	0x2000e154
 800be80:	0801aaec 	.word	0x0801aaec
 800be84:	0801abc0 	.word	0x0801abc0
 800be88:	0801ab34 	.word	0x0801ab34

0800be8c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7ff feef 	bl	800bc78 <mem_to_ptr>
 800be9a:	4603      	mov	r3, r0
 800be9c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7ff fed6 	bl	800bc54 <ptr_to_mem>
 800bea8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	885b      	ldrh	r3, [r3, #2]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fed0 	bl	800bc54 <ptr_to_mem>
 800beb4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d819      	bhi.n	800bef6 <mem_link_valid+0x6a>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	885b      	ldrh	r3, [r3, #2]
 800bec6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800beca:	4293      	cmp	r3, r2
 800becc:	d813      	bhi.n	800bef6 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bed2:	8afa      	ldrh	r2, [r7, #22]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d004      	beq.n	800bee2 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	881b      	ldrh	r3, [r3, #0]
 800bedc:	8afa      	ldrh	r2, [r7, #22]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d109      	bne.n	800bef6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bee2:	4b08      	ldr	r3, [pc, #32]	; (800bf04 <mem_link_valid+0x78>)
 800bee4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d006      	beq.n	800befa <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	885b      	ldrh	r3, [r3, #2]
 800bef0:	8afa      	ldrh	r2, [r7, #22]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d001      	beq.n	800befa <mem_link_valid+0x6e>
    return 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e000      	b.n	800befc <mem_link_valid+0x70>
  }
  return 1;
 800befa:	2301      	movs	r3, #1
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	2000e150 	.word	0x2000e150

0800bf08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d070      	beq.n	800bff8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f003 0303 	and.w	r3, r3, #3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00d      	beq.n	800bf3c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bf20:	4b37      	ldr	r3, [pc, #220]	; (800c000 <mem_free+0xf8>)
 800bf22:	f240 2273 	movw	r2, #627	; 0x273
 800bf26:	4937      	ldr	r1, [pc, #220]	; (800c004 <mem_free+0xfc>)
 800bf28:	4837      	ldr	r0, [pc, #220]	; (800c008 <mem_free+0x100>)
 800bf2a:	f00c ff11 	bl	8018d50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf2e:	f00a ffbf 	bl	8016eb0 <sys_arch_protect>
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f00a ffc9 	bl	8016ecc <sys_arch_unprotect>
    return;
 800bf3a:	e05e      	b.n	800bffa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	3b08      	subs	r3, #8
 800bf40:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bf42:	4b32      	ldr	r3, [pc, #200]	; (800c00c <mem_free+0x104>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d306      	bcc.n	800bf5a <mem_free+0x52>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f103 020c 	add.w	r2, r3, #12
 800bf52:	4b2f      	ldr	r3, [pc, #188]	; (800c010 <mem_free+0x108>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d90d      	bls.n	800bf76 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bf5a:	4b29      	ldr	r3, [pc, #164]	; (800c000 <mem_free+0xf8>)
 800bf5c:	f240 227f 	movw	r2, #639	; 0x27f
 800bf60:	492c      	ldr	r1, [pc, #176]	; (800c014 <mem_free+0x10c>)
 800bf62:	4829      	ldr	r0, [pc, #164]	; (800c008 <mem_free+0x100>)
 800bf64:	f00c fef4 	bl	8018d50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf68:	f00a ffa2 	bl	8016eb0 <sys_arch_protect>
 800bf6c:	6138      	str	r0, [r7, #16]
 800bf6e:	6938      	ldr	r0, [r7, #16]
 800bf70:	f00a ffac 	bl	8016ecc <sys_arch_unprotect>
    return;
 800bf74:	e041      	b.n	800bffa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bf76:	4828      	ldr	r0, [pc, #160]	; (800c018 <mem_free+0x110>)
 800bf78:	f00a ff58 	bl	8016e2c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	791b      	ldrb	r3, [r3, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d110      	bne.n	800bfa6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bf84:	4b1e      	ldr	r3, [pc, #120]	; (800c000 <mem_free+0xf8>)
 800bf86:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bf8a:	4924      	ldr	r1, [pc, #144]	; (800c01c <mem_free+0x114>)
 800bf8c:	481e      	ldr	r0, [pc, #120]	; (800c008 <mem_free+0x100>)
 800bf8e:	f00c fedf 	bl	8018d50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bf92:	4821      	ldr	r0, [pc, #132]	; (800c018 <mem_free+0x110>)
 800bf94:	f00a ff59 	bl	8016e4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf98:	f00a ff8a 	bl	8016eb0 <sys_arch_protect>
 800bf9c:	6178      	str	r0, [r7, #20]
 800bf9e:	6978      	ldr	r0, [r7, #20]
 800bfa0:	f00a ff94 	bl	8016ecc <sys_arch_unprotect>
    return;
 800bfa4:	e029      	b.n	800bffa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bfa6:	69f8      	ldr	r0, [r7, #28]
 800bfa8:	f7ff ff70 	bl	800be8c <mem_link_valid>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d110      	bne.n	800bfd4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bfb2:	4b13      	ldr	r3, [pc, #76]	; (800c000 <mem_free+0xf8>)
 800bfb4:	f240 2295 	movw	r2, #661	; 0x295
 800bfb8:	4919      	ldr	r1, [pc, #100]	; (800c020 <mem_free+0x118>)
 800bfba:	4813      	ldr	r0, [pc, #76]	; (800c008 <mem_free+0x100>)
 800bfbc:	f00c fec8 	bl	8018d50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bfc0:	4815      	ldr	r0, [pc, #84]	; (800c018 <mem_free+0x110>)
 800bfc2:	f00a ff42 	bl	8016e4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bfc6:	f00a ff73 	bl	8016eb0 <sys_arch_protect>
 800bfca:	61b8      	str	r0, [r7, #24]
 800bfcc:	69b8      	ldr	r0, [r7, #24]
 800bfce:	f00a ff7d 	bl	8016ecc <sys_arch_unprotect>
    return;
 800bfd2:	e012      	b.n	800bffa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bfda:	4b12      	ldr	r3, [pc, #72]	; (800c024 <mem_free+0x11c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69fa      	ldr	r2, [r7, #28]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d202      	bcs.n	800bfea <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bfe4:	4a0f      	ldr	r2, [pc, #60]	; (800c024 <mem_free+0x11c>)
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bfea:	69f8      	ldr	r0, [r7, #28]
 800bfec:	f7ff fe56 	bl	800bc9c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bff0:	4809      	ldr	r0, [pc, #36]	; (800c018 <mem_free+0x110>)
 800bff2:	f00a ff2a 	bl	8016e4a <sys_mutex_unlock>
 800bff6:	e000      	b.n	800bffa <mem_free+0xf2>
    return;
 800bff8:	bf00      	nop
}
 800bffa:	3720      	adds	r7, #32
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	0801aaec 	.word	0x0801aaec
 800c004:	0801abdc 	.word	0x0801abdc
 800c008:	0801ab34 	.word	0x0801ab34
 800c00c:	2000e14c 	.word	0x2000e14c
 800c010:	2000e150 	.word	0x2000e150
 800c014:	0801ac00 	.word	0x0801ac00
 800c018:	2000e154 	.word	0x2000e154
 800c01c:	0801ac1c 	.word	0x0801ac1c
 800c020:	0801ac44 	.word	0x0801ac44
 800c024:	2000e158 	.word	0x2000e158

0800c028 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b088      	sub	sp, #32
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c034:	887b      	ldrh	r3, [r7, #2]
 800c036:	3303      	adds	r3, #3
 800c038:	b29b      	uxth	r3, r3
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c040:	8bfb      	ldrh	r3, [r7, #30]
 800c042:	2b0b      	cmp	r3, #11
 800c044:	d801      	bhi.n	800c04a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c046:	230c      	movs	r3, #12
 800c048:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c04a:	8bfb      	ldrh	r3, [r7, #30]
 800c04c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c050:	4293      	cmp	r3, r2
 800c052:	d803      	bhi.n	800c05c <mem_trim+0x34>
 800c054:	8bfa      	ldrh	r2, [r7, #30]
 800c056:	887b      	ldrh	r3, [r7, #2]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d201      	bcs.n	800c060 <mem_trim+0x38>
    return NULL;
 800c05c:	2300      	movs	r3, #0
 800c05e:	e0dc      	b.n	800c21a <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c060:	4b70      	ldr	r3, [pc, #448]	; (800c224 <mem_trim+0x1fc>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	429a      	cmp	r2, r3
 800c068:	d304      	bcc.n	800c074 <mem_trim+0x4c>
 800c06a:	4b6f      	ldr	r3, [pc, #444]	; (800c228 <mem_trim+0x200>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	429a      	cmp	r2, r3
 800c072:	d306      	bcc.n	800c082 <mem_trim+0x5a>
 800c074:	4b6d      	ldr	r3, [pc, #436]	; (800c22c <mem_trim+0x204>)
 800c076:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c07a:	496d      	ldr	r1, [pc, #436]	; (800c230 <mem_trim+0x208>)
 800c07c:	486d      	ldr	r0, [pc, #436]	; (800c234 <mem_trim+0x20c>)
 800c07e:	f00c fe67 	bl	8018d50 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c082:	4b68      	ldr	r3, [pc, #416]	; (800c224 <mem_trim+0x1fc>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d304      	bcc.n	800c096 <mem_trim+0x6e>
 800c08c:	4b66      	ldr	r3, [pc, #408]	; (800c228 <mem_trim+0x200>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	429a      	cmp	r2, r3
 800c094:	d307      	bcc.n	800c0a6 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c096:	f00a ff0b 	bl	8016eb0 <sys_arch_protect>
 800c09a:	60b8      	str	r0, [r7, #8]
 800c09c:	68b8      	ldr	r0, [r7, #8]
 800c09e:	f00a ff15 	bl	8016ecc <sys_arch_unprotect>
    return rmem;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	e0b9      	b.n	800c21a <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	3b08      	subs	r3, #8
 800c0aa:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c0ac:	69b8      	ldr	r0, [r7, #24]
 800c0ae:	f7ff fde3 	bl	800bc78 <mem_to_ptr>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	881a      	ldrh	r2, [r3, #0]
 800c0ba:	8afb      	ldrh	r3, [r7, #22]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	3b08      	subs	r3, #8
 800c0c2:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c0c4:	8bfa      	ldrh	r2, [r7, #30]
 800c0c6:	8abb      	ldrh	r3, [r7, #20]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d906      	bls.n	800c0da <mem_trim+0xb2>
 800c0cc:	4b57      	ldr	r3, [pc, #348]	; (800c22c <mem_trim+0x204>)
 800c0ce:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c0d2:	4959      	ldr	r1, [pc, #356]	; (800c238 <mem_trim+0x210>)
 800c0d4:	4857      	ldr	r0, [pc, #348]	; (800c234 <mem_trim+0x20c>)
 800c0d6:	f00c fe3b 	bl	8018d50 <iprintf>
  if (newsize > size) {
 800c0da:	8bfa      	ldrh	r2, [r7, #30]
 800c0dc:	8abb      	ldrh	r3, [r7, #20]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d901      	bls.n	800c0e6 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e099      	b.n	800c21a <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800c0e6:	8bfa      	ldrh	r2, [r7, #30]
 800c0e8:	8abb      	ldrh	r3, [r7, #20]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d101      	bne.n	800c0f2 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	e093      	b.n	800c21a <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c0f2:	4852      	ldr	r0, [pc, #328]	; (800c23c <mem_trim+0x214>)
 800c0f4:	f00a fe9a 	bl	8016e2c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fda9 	bl	800bc54 <ptr_to_mem>
 800c102:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	791b      	ldrb	r3, [r3, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d141      	bne.n	800c190 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c114:	4293      	cmp	r3, r2
 800c116:	d106      	bne.n	800c126 <mem_trim+0xfe>
 800c118:	4b44      	ldr	r3, [pc, #272]	; (800c22c <mem_trim+0x204>)
 800c11a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c11e:	4948      	ldr	r1, [pc, #288]	; (800c240 <mem_trim+0x218>)
 800c120:	4844      	ldr	r0, [pc, #272]	; (800c234 <mem_trim+0x20c>)
 800c122:	f00c fe15 	bl	8018d50 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c12c:	8afa      	ldrh	r2, [r7, #22]
 800c12e:	8bfb      	ldrh	r3, [r7, #30]
 800c130:	4413      	add	r3, r2
 800c132:	b29b      	uxth	r3, r3
 800c134:	3308      	adds	r3, #8
 800c136:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c138:	4b42      	ldr	r3, [pc, #264]	; (800c244 <mem_trim+0x21c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d106      	bne.n	800c150 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800c142:	89fb      	ldrh	r3, [r7, #14]
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff fd85 	bl	800bc54 <ptr_to_mem>
 800c14a:	4603      	mov	r3, r0
 800c14c:	4a3d      	ldr	r2, [pc, #244]	; (800c244 <mem_trim+0x21c>)
 800c14e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c150:	89fb      	ldrh	r3, [r7, #14]
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fd7e 	bl	800bc54 <ptr_to_mem>
 800c158:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	2200      	movs	r2, #0
 800c15e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	89ba      	ldrh	r2, [r7, #12]
 800c164:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	8afa      	ldrh	r2, [r7, #22]
 800c16a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	89fa      	ldrh	r2, [r7, #14]
 800c170:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d049      	beq.n	800c212 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fd66 	bl	800bc54 <ptr_to_mem>
 800c188:	4602      	mov	r2, r0
 800c18a:	89fb      	ldrh	r3, [r7, #14]
 800c18c:	8053      	strh	r3, [r2, #2]
 800c18e:	e040      	b.n	800c212 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c190:	8bfb      	ldrh	r3, [r7, #30]
 800c192:	f103 0214 	add.w	r2, r3, #20
 800c196:	8abb      	ldrh	r3, [r7, #20]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d83a      	bhi.n	800c212 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c19c:	8afa      	ldrh	r2, [r7, #22]
 800c19e:	8bfb      	ldrh	r3, [r7, #30]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	881b      	ldrh	r3, [r3, #0]
 800c1ac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d106      	bne.n	800c1c2 <mem_trim+0x19a>
 800c1b4:	4b1d      	ldr	r3, [pc, #116]	; (800c22c <mem_trim+0x204>)
 800c1b6:	f240 3216 	movw	r2, #790	; 0x316
 800c1ba:	4921      	ldr	r1, [pc, #132]	; (800c240 <mem_trim+0x218>)
 800c1bc:	481d      	ldr	r0, [pc, #116]	; (800c234 <mem_trim+0x20c>)
 800c1be:	f00c fdc7 	bl	8018d50 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c1c2:	89fb      	ldrh	r3, [r7, #14]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7ff fd45 	bl	800bc54 <ptr_to_mem>
 800c1ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c1cc:	4b1d      	ldr	r3, [pc, #116]	; (800c244 <mem_trim+0x21c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d202      	bcs.n	800c1dc <mem_trim+0x1b4>
      lfree = mem2;
 800c1d6:	4a1b      	ldr	r2, [pc, #108]	; (800c244 <mem_trim+0x21c>)
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	881a      	ldrh	r2, [r3, #0]
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	8afa      	ldrh	r2, [r7, #22]
 800c1ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	89fa      	ldrh	r2, [r7, #14]
 800c1f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d007      	beq.n	800c212 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff fd24 	bl	800bc54 <ptr_to_mem>
 800c20c:	4602      	mov	r2, r0
 800c20e:	89fb      	ldrh	r3, [r7, #14]
 800c210:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c212:	480a      	ldr	r0, [pc, #40]	; (800c23c <mem_trim+0x214>)
 800c214:	f00a fe19 	bl	8016e4a <sys_mutex_unlock>
  return rmem;
 800c218:	687b      	ldr	r3, [r7, #4]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3720      	adds	r7, #32
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	2000e14c 	.word	0x2000e14c
 800c228:	2000e150 	.word	0x2000e150
 800c22c:	0801aaec 	.word	0x0801aaec
 800c230:	0801ac78 	.word	0x0801ac78
 800c234:	0801ab34 	.word	0x0801ab34
 800c238:	0801ac90 	.word	0x0801ac90
 800c23c:	2000e154 	.word	0x2000e154
 800c240:	0801acb0 	.word	0x0801acb0
 800c244:	2000e158 	.word	0x2000e158

0800c248 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c252:	88fb      	ldrh	r3, [r7, #6]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d101      	bne.n	800c25c <mem_malloc+0x14>
    return NULL;
 800c258:	2300      	movs	r3, #0
 800c25a:	e0e6      	b.n	800c42a <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c25c:	88fb      	ldrh	r3, [r7, #6]
 800c25e:	3303      	adds	r3, #3
 800c260:	b29b      	uxth	r3, r3
 800c262:	f023 0303 	bic.w	r3, r3, #3
 800c266:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c268:	8bbb      	ldrh	r3, [r7, #28]
 800c26a:	2b0b      	cmp	r3, #11
 800c26c:	d801      	bhi.n	800c272 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c26e:	230c      	movs	r3, #12
 800c270:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c272:	8bbb      	ldrh	r3, [r7, #28]
 800c274:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c278:	4293      	cmp	r3, r2
 800c27a:	d803      	bhi.n	800c284 <mem_malloc+0x3c>
 800c27c:	8bba      	ldrh	r2, [r7, #28]
 800c27e:	88fb      	ldrh	r3, [r7, #6]
 800c280:	429a      	cmp	r2, r3
 800c282:	d201      	bcs.n	800c288 <mem_malloc+0x40>
    return NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	e0d0      	b.n	800c42a <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c288:	486a      	ldr	r0, [pc, #424]	; (800c434 <mem_malloc+0x1ec>)
 800c28a:	f00a fdcf 	bl	8016e2c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c28e:	4b6a      	ldr	r3, [pc, #424]	; (800c438 <mem_malloc+0x1f0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff fcf0 	bl	800bc78 <mem_to_ptr>
 800c298:	4603      	mov	r3, r0
 800c29a:	83fb      	strh	r3, [r7, #30]
 800c29c:	e0b9      	b.n	800c412 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c29e:	8bfb      	ldrh	r3, [r7, #30]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fcd7 	bl	800bc54 <ptr_to_mem>
 800c2a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	791b      	ldrb	r3, [r3, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f040 80a9 	bne.w	800c404 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	f1a3 0208 	sub.w	r2, r3, #8
 800c2c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	f0c0 809e 	bcc.w	800c404 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	8bfb      	ldrh	r3, [r7, #30]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	f1a3 0208 	sub.w	r2, r3, #8
 800c2d6:	8bbb      	ldrh	r3, [r7, #28]
 800c2d8:	3314      	adds	r3, #20
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d335      	bcc.n	800c34a <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c2de:	8bfa      	ldrh	r2, [r7, #30]
 800c2e0:	8bbb      	ldrh	r3, [r7, #28]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c2ea:	8a7b      	ldrh	r3, [r7, #18]
 800c2ec:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d106      	bne.n	800c302 <mem_malloc+0xba>
 800c2f4:	4b51      	ldr	r3, [pc, #324]	; (800c43c <mem_malloc+0x1f4>)
 800c2f6:	f240 3287 	movw	r2, #903	; 0x387
 800c2fa:	4951      	ldr	r1, [pc, #324]	; (800c440 <mem_malloc+0x1f8>)
 800c2fc:	4851      	ldr	r0, [pc, #324]	; (800c444 <mem_malloc+0x1fc>)
 800c2fe:	f00c fd27 	bl	8018d50 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c302:	8a7b      	ldrh	r3, [r7, #18]
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff fca5 	bl	800bc54 <ptr_to_mem>
 800c30a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	881a      	ldrh	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	8bfa      	ldrh	r2, [r7, #30]
 800c31e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	8a7a      	ldrh	r2, [r7, #18]
 800c324:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2201      	movs	r2, #1
 800c32a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800c334:	4293      	cmp	r3, r2
 800c336:	d00b      	beq.n	800c350 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff fc89 	bl	800bc54 <ptr_to_mem>
 800c342:	4602      	mov	r2, r0
 800c344:	8a7b      	ldrh	r3, [r7, #18]
 800c346:	8053      	strh	r3, [r2, #2]
 800c348:	e002      	b.n	800c350 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2201      	movs	r2, #1
 800c34e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c350:	4b39      	ldr	r3, [pc, #228]	; (800c438 <mem_malloc+0x1f0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	429a      	cmp	r2, r3
 800c358:	d127      	bne.n	800c3aa <mem_malloc+0x162>
          struct mem *cur = lfree;
 800c35a:	4b37      	ldr	r3, [pc, #220]	; (800c438 <mem_malloc+0x1f0>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c360:	e005      	b.n	800c36e <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fc74 	bl	800bc54 <ptr_to_mem>
 800c36c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	791b      	ldrb	r3, [r3, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d004      	beq.n	800c380 <mem_malloc+0x138>
 800c376:	4b34      	ldr	r3, [pc, #208]	; (800c448 <mem_malloc+0x200>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d1f0      	bne.n	800c362 <mem_malloc+0x11a>
          }
          lfree = cur;
 800c380:	4a2d      	ldr	r2, [pc, #180]	; (800c438 <mem_malloc+0x1f0>)
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c386:	4b2c      	ldr	r3, [pc, #176]	; (800c438 <mem_malloc+0x1f0>)
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	4b2f      	ldr	r3, [pc, #188]	; (800c448 <mem_malloc+0x200>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d00b      	beq.n	800c3aa <mem_malloc+0x162>
 800c392:	4b29      	ldr	r3, [pc, #164]	; (800c438 <mem_malloc+0x1f0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	791b      	ldrb	r3, [r3, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d006      	beq.n	800c3aa <mem_malloc+0x162>
 800c39c:	4b27      	ldr	r3, [pc, #156]	; (800c43c <mem_malloc+0x1f4>)
 800c39e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c3a2:	492a      	ldr	r1, [pc, #168]	; (800c44c <mem_malloc+0x204>)
 800c3a4:	4827      	ldr	r0, [pc, #156]	; (800c444 <mem_malloc+0x1fc>)
 800c3a6:	f00c fcd3 	bl	8018d50 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c3aa:	4822      	ldr	r0, [pc, #136]	; (800c434 <mem_malloc+0x1ec>)
 800c3ac:	f00a fd4d 	bl	8016e4a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c3b0:	8bba      	ldrh	r2, [r7, #28]
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	4a23      	ldr	r2, [pc, #140]	; (800c448 <mem_malloc+0x200>)
 800c3ba:	6812      	ldr	r2, [r2, #0]
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d906      	bls.n	800c3ce <mem_malloc+0x186>
 800c3c0:	4b1e      	ldr	r3, [pc, #120]	; (800c43c <mem_malloc+0x1f4>)
 800c3c2:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c3c6:	4922      	ldr	r1, [pc, #136]	; (800c450 <mem_malloc+0x208>)
 800c3c8:	481e      	ldr	r0, [pc, #120]	; (800c444 <mem_malloc+0x1fc>)
 800c3ca:	f00c fcc1 	bl	8018d50 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f003 0303 	and.w	r3, r3, #3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d006      	beq.n	800c3e6 <mem_malloc+0x19e>
 800c3d8:	4b18      	ldr	r3, [pc, #96]	; (800c43c <mem_malloc+0x1f4>)
 800c3da:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c3de:	491d      	ldr	r1, [pc, #116]	; (800c454 <mem_malloc+0x20c>)
 800c3e0:	4818      	ldr	r0, [pc, #96]	; (800c444 <mem_malloc+0x1fc>)
 800c3e2:	f00c fcb5 	bl	8018d50 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f003 0303 	and.w	r3, r3, #3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <mem_malloc+0x1b6>
 800c3f0:	4b12      	ldr	r3, [pc, #72]	; (800c43c <mem_malloc+0x1f4>)
 800c3f2:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c3f6:	4918      	ldr	r1, [pc, #96]	; (800c458 <mem_malloc+0x210>)
 800c3f8:	4812      	ldr	r0, [pc, #72]	; (800c444 <mem_malloc+0x1fc>)
 800c3fa:	f00c fca9 	bl	8018d50 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	3308      	adds	r3, #8
 800c402:	e012      	b.n	800c42a <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800c404:	8bfb      	ldrh	r3, [r7, #30]
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff fc24 	bl	800bc54 <ptr_to_mem>
 800c40c:	4603      	mov	r3, r0
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c412:	8bfa      	ldrh	r2, [r7, #30]
 800c414:	8bb9      	ldrh	r1, [r7, #28]
 800c416:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800c41a:	1a5b      	subs	r3, r3, r1
 800c41c:	429a      	cmp	r2, r3
 800c41e:	f4ff af3e 	bcc.w	800c29e <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c422:	4804      	ldr	r0, [pc, #16]	; (800c434 <mem_malloc+0x1ec>)
 800c424:	f00a fd11 	bl	8016e4a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3720      	adds	r7, #32
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	2000e154 	.word	0x2000e154
 800c438:	2000e158 	.word	0x2000e158
 800c43c:	0801aaec 	.word	0x0801aaec
 800c440:	0801acb0 	.word	0x0801acb0
 800c444:	0801ab34 	.word	0x0801ab34
 800c448:	2000e150 	.word	0x2000e150
 800c44c:	0801acc4 	.word	0x0801acc4
 800c450:	0801ace0 	.word	0x0801ace0
 800c454:	0801ad10 	.word	0x0801ad10
 800c458:	0801ad40 	.word	0x0801ad40

0800c45c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	3303      	adds	r3, #3
 800c472:	f023 0303 	bic.w	r3, r3, #3
 800c476:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c478:	2300      	movs	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	e011      	b.n	800c4a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	461a      	mov	r2, r3
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	885b      	ldrh	r3, [r3, #2]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	dbe7      	blt.n	800c47e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c4ae:	bf00      	nop
 800c4b0:	bf00      	nop
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	80fb      	strh	r3, [r7, #6]
 800c4c6:	e009      	b.n	800c4dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c4c8:	88fb      	ldrh	r3, [r7, #6]
 800c4ca:	4a08      	ldr	r2, [pc, #32]	; (800c4ec <memp_init+0x30>)
 800c4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff ffc3 	bl	800c45c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4d6:	88fb      	ldrh	r3, [r7, #6]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	80fb      	strh	r3, [r7, #6]
 800c4dc:	88fb      	ldrh	r3, [r7, #6]
 800c4de:	2b0c      	cmp	r3, #12
 800c4e0:	d9f2      	bls.n	800c4c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c4e2:	bf00      	nop
 800c4e4:	bf00      	nop
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	0801d630 	.word	0x0801d630

0800c4f0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c4f8:	f00a fcda 	bl	8016eb0 <sys_arch_protect>
 800c4fc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d015      	beq.n	800c538 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	6812      	ldr	r2, [r2, #0]
 800c514:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	f003 0303 	and.w	r3, r3, #3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d006      	beq.n	800c52e <do_memp_malloc_pool+0x3e>
 800c520:	4b09      	ldr	r3, [pc, #36]	; (800c548 <do_memp_malloc_pool+0x58>)
 800c522:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c526:	4909      	ldr	r1, [pc, #36]	; (800c54c <do_memp_malloc_pool+0x5c>)
 800c528:	4809      	ldr	r0, [pc, #36]	; (800c550 <do_memp_malloc_pool+0x60>)
 800c52a:	f00c fc11 	bl	8018d50 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f00a fccc 	bl	8016ecc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	e003      	b.n	800c540 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f00a fcc7 	bl	8016ecc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	0801ad64 	.word	0x0801ad64
 800c54c:	0801ad94 	.word	0x0801ad94
 800c550:	0801adb8 	.word	0x0801adb8

0800c554 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d106      	bne.n	800c570 <memp_malloc_pool+0x1c>
 800c562:	4b0a      	ldr	r3, [pc, #40]	; (800c58c <memp_malloc_pool+0x38>)
 800c564:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c568:	4909      	ldr	r1, [pc, #36]	; (800c590 <memp_malloc_pool+0x3c>)
 800c56a:	480a      	ldr	r0, [pc, #40]	; (800c594 <memp_malloc_pool+0x40>)
 800c56c:	f00c fbf0 	bl	8018d50 <iprintf>
  if (desc == NULL) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <memp_malloc_pool+0x26>
    return NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	e003      	b.n	800c582 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff ffb8 	bl	800c4f0 <do_memp_malloc_pool>
 800c580:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	0801ad64 	.word	0x0801ad64
 800c590:	0801ade0 	.word	0x0801ade0
 800c594:	0801adb8 	.word	0x0801adb8

0800c598 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c5a2:	79fb      	ldrb	r3, [r7, #7]
 800c5a4:	2b0c      	cmp	r3, #12
 800c5a6:	d908      	bls.n	800c5ba <memp_malloc+0x22>
 800c5a8:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <memp_malloc+0x3c>)
 800c5aa:	f240 1257 	movw	r2, #343	; 0x157
 800c5ae:	490a      	ldr	r1, [pc, #40]	; (800c5d8 <memp_malloc+0x40>)
 800c5b0:	480a      	ldr	r0, [pc, #40]	; (800c5dc <memp_malloc+0x44>)
 800c5b2:	f00c fbcd 	bl	8018d50 <iprintf>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e008      	b.n	800c5cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	4a08      	ldr	r2, [pc, #32]	; (800c5e0 <memp_malloc+0x48>)
 800c5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff ff94 	bl	800c4f0 <do_memp_malloc_pool>
 800c5c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	0801ad64 	.word	0x0801ad64
 800c5d8:	0801adf4 	.word	0x0801adf4
 800c5dc:	0801adb8 	.word	0x0801adb8
 800c5e0:	0801d630 	.word	0x0801d630

0800c5e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	f003 0303 	and.w	r3, r3, #3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d006      	beq.n	800c606 <do_memp_free_pool+0x22>
 800c5f8:	4b0d      	ldr	r3, [pc, #52]	; (800c630 <do_memp_free_pool+0x4c>)
 800c5fa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c5fe:	490d      	ldr	r1, [pc, #52]	; (800c634 <do_memp_free_pool+0x50>)
 800c600:	480d      	ldr	r0, [pc, #52]	; (800c638 <do_memp_free_pool+0x54>)
 800c602:	f00c fba5 	bl	8018d50 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c60a:	f00a fc51 	bl	8016eb0 <sys_arch_protect>
 800c60e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c622:	68b8      	ldr	r0, [r7, #8]
 800c624:	f00a fc52 	bl	8016ecc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c628:	bf00      	nop
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	0801ad64 	.word	0x0801ad64
 800c634:	0801ae14 	.word	0x0801ae14
 800c638:	0801adb8 	.word	0x0801adb8

0800c63c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d106      	bne.n	800c65a <memp_free_pool+0x1e>
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <memp_free_pool+0x3c>)
 800c64e:	f240 1295 	movw	r2, #405	; 0x195
 800c652:	490a      	ldr	r1, [pc, #40]	; (800c67c <memp_free_pool+0x40>)
 800c654:	480a      	ldr	r0, [pc, #40]	; (800c680 <memp_free_pool+0x44>)
 800c656:	f00c fb7b 	bl	8018d50 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d007      	beq.n	800c670 <memp_free_pool+0x34>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff ffbb 	bl	800c5e4 <do_memp_free_pool>
 800c66e:	e000      	b.n	800c672 <memp_free_pool+0x36>
    return;
 800c670:	bf00      	nop
}
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	0801ad64 	.word	0x0801ad64
 800c67c:	0801ade0 	.word	0x0801ade0
 800c680:	0801adb8 	.word	0x0801adb8

0800c684 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	4603      	mov	r3, r0
 800c68c:	6039      	str	r1, [r7, #0]
 800c68e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c690:	79fb      	ldrb	r3, [r7, #7]
 800c692:	2b0c      	cmp	r3, #12
 800c694:	d907      	bls.n	800c6a6 <memp_free+0x22>
 800c696:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <memp_free+0x44>)
 800c698:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c69c:	490b      	ldr	r1, [pc, #44]	; (800c6cc <memp_free+0x48>)
 800c69e:	480c      	ldr	r0, [pc, #48]	; (800c6d0 <memp_free+0x4c>)
 800c6a0:	f00c fb56 	bl	8018d50 <iprintf>
 800c6a4:	e00c      	b.n	800c6c0 <memp_free+0x3c>

  if (mem == NULL) {
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d008      	beq.n	800c6be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	4a09      	ldr	r2, [pc, #36]	; (800c6d4 <memp_free+0x50>)
 800c6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff ff94 	bl	800c5e4 <do_memp_free_pool>
 800c6bc:	e000      	b.n	800c6c0 <memp_free+0x3c>
    return;
 800c6be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	0801ad64 	.word	0x0801ad64
 800c6cc:	0801ae34 	.word	0x0801ae34
 800c6d0:	0801adb8 	.word	0x0801adb8
 800c6d4:	0801d630 	.word	0x0801d630

0800c6d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c6dc:	bf00      	nop
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d108      	bne.n	800c70e <netif_add+0x26>
 800c6fc:	4b57      	ldr	r3, [pc, #348]	; (800c85c <netif_add+0x174>)
 800c6fe:	f240 1227 	movw	r2, #295	; 0x127
 800c702:	4957      	ldr	r1, [pc, #348]	; (800c860 <netif_add+0x178>)
 800c704:	4857      	ldr	r0, [pc, #348]	; (800c864 <netif_add+0x17c>)
 800c706:	f00c fb23 	bl	8018d50 <iprintf>
 800c70a:	2300      	movs	r3, #0
 800c70c:	e0a2      	b.n	800c854 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	d108      	bne.n	800c726 <netif_add+0x3e>
 800c714:	4b51      	ldr	r3, [pc, #324]	; (800c85c <netif_add+0x174>)
 800c716:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c71a:	4953      	ldr	r1, [pc, #332]	; (800c868 <netif_add+0x180>)
 800c71c:	4851      	ldr	r0, [pc, #324]	; (800c864 <netif_add+0x17c>)
 800c71e:	f00c fb17 	bl	8018d50 <iprintf>
 800c722:	2300      	movs	r3, #0
 800c724:	e096      	b.n	800c854 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c72c:	4b4f      	ldr	r3, [pc, #316]	; (800c86c <netif_add+0x184>)
 800c72e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c736:	4b4d      	ldr	r3, [pc, #308]	; (800c86c <netif_add+0x184>)
 800c738:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c740:	4b4a      	ldr	r3, [pc, #296]	; (800c86c <netif_add+0x184>)
 800c742:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	4a45      	ldr	r2, [pc, #276]	; (800c870 <netif_add+0x188>)
 800c75a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6a3a      	ldr	r2, [r7, #32]
 800c774:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c776:	4b3f      	ldr	r3, [pc, #252]	; (800c874 <netif_add+0x18c>)
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c784:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 f913 	bl	800c9b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	4798      	blx	r3
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <netif_add+0xba>
    return NULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e058      	b.n	800c854 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7a8:	2bff      	cmp	r3, #255	; 0xff
 800c7aa:	d103      	bne.n	800c7b4 <netif_add+0xcc>
        netif->num = 0;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c7b8:	4b2f      	ldr	r3, [pc, #188]	; (800c878 <netif_add+0x190>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	617b      	str	r3, [r7, #20]
 800c7be:	e02b      	b.n	800c818 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d106      	bne.n	800c7d6 <netif_add+0xee>
 800c7c8:	4b24      	ldr	r3, [pc, #144]	; (800c85c <netif_add+0x174>)
 800c7ca:	f240 128b 	movw	r2, #395	; 0x18b
 800c7ce:	492b      	ldr	r1, [pc, #172]	; (800c87c <netif_add+0x194>)
 800c7d0:	4824      	ldr	r0, [pc, #144]	; (800c864 <netif_add+0x17c>)
 800c7d2:	f00c fabd 	bl	8018d50 <iprintf>
        num_netifs++;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2bff      	cmp	r3, #255	; 0xff
 800c7e0:	dd06      	ble.n	800c7f0 <netif_add+0x108>
 800c7e2:	4b1e      	ldr	r3, [pc, #120]	; (800c85c <netif_add+0x174>)
 800c7e4:	f240 128d 	movw	r2, #397	; 0x18d
 800c7e8:	4925      	ldr	r1, [pc, #148]	; (800c880 <netif_add+0x198>)
 800c7ea:	481e      	ldr	r0, [pc, #120]	; (800c864 <netif_add+0x17c>)
 800c7ec:	f00c fab0 	bl	8018d50 <iprintf>
        if (netif2->num == netif->num) {
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d108      	bne.n	800c812 <netif_add+0x12a>
          netif->num++;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c806:	3301      	adds	r3, #1
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c810:	e005      	b.n	800c81e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	617b      	str	r3, [r7, #20]
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1d0      	bne.n	800c7c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1be      	bne.n	800c7a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c82a:	2bfe      	cmp	r3, #254	; 0xfe
 800c82c:	d103      	bne.n	800c836 <netif_add+0x14e>
    netif_num = 0;
 800c82e:	4b11      	ldr	r3, [pc, #68]	; (800c874 <netif_add+0x18c>)
 800c830:	2200      	movs	r2, #0
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	e006      	b.n	800c844 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c83c:	3301      	adds	r3, #1
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	4b0c      	ldr	r3, [pc, #48]	; (800c874 <netif_add+0x18c>)
 800c842:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c844:	4b0c      	ldr	r3, [pc, #48]	; (800c878 <netif_add+0x190>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c84c:	4a0a      	ldr	r2, [pc, #40]	; (800c878 <netif_add+0x190>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c852:	68fb      	ldr	r3, [r7, #12]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	0801ae50 	.word	0x0801ae50
 800c860:	0801aee4 	.word	0x0801aee4
 800c864:	0801aea0 	.word	0x0801aea0
 800c868:	0801af00 	.word	0x0801af00
 800c86c:	0801d6a4 	.word	0x0801d6a4
 800c870:	0800cc93 	.word	0x0800cc93
 800c874:	20011230 	.word	0x20011230
 800c878:	20011228 	.word	0x20011228
 800c87c:	0801af24 	.word	0x0801af24
 800c880:	0801af38 	.word	0x0801af38

0800c884 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f002 fe05 	bl	800f4a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f007 fd25 	bl	80142e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <netif_do_set_ipaddr+0x20>
 800c8ba:	4b1d      	ldr	r3, [pc, #116]	; (800c930 <netif_do_set_ipaddr+0x88>)
 800c8bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c8c0:	491c      	ldr	r1, [pc, #112]	; (800c934 <netif_do_set_ipaddr+0x8c>)
 800c8c2:	481d      	ldr	r0, [pc, #116]	; (800c938 <netif_do_set_ipaddr+0x90>)
 800c8c4:	f00c fa44 	bl	8018d50 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <netif_do_set_ipaddr+0x34>
 800c8ce:	4b18      	ldr	r3, [pc, #96]	; (800c930 <netif_do_set_ipaddr+0x88>)
 800c8d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c8d4:	4917      	ldr	r1, [pc, #92]	; (800c934 <netif_do_set_ipaddr+0x8c>)
 800c8d6:	4818      	ldr	r0, [pc, #96]	; (800c938 <netif_do_set_ipaddr+0x90>)
 800c8d8:	f00c fa3a 	bl	8018d50 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d01c      	beq.n	800c924 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c8fa:	f107 0314 	add.w	r3, r7, #20
 800c8fe:	4619      	mov	r1, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff ffbf 	bl	800c884 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <netif_do_set_ipaddr+0x6a>
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	e000      	b.n	800c914 <netif_do_set_ipaddr+0x6c>
 800c912:	2300      	movs	r3, #0
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c918:	2101      	movs	r1, #1
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f000 f8d2 	bl	800cac4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c920:	2301      	movs	r3, #1
 800c922:	e000      	b.n	800c926 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	0801ae50 	.word	0x0801ae50
 800c934:	0801af68 	.word	0x0801af68
 800c938:	0801aea0 	.word	0x0801aea0

0800c93c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3308      	adds	r3, #8
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d00a      	beq.n	800c96c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <netif_do_set_netmask+0x26>
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	e000      	b.n	800c964 <netif_do_set_netmask+0x28>
 800c962:	2300      	movs	r3, #0
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b085      	sub	sp, #20
 800c97e:	af00      	add	r7, sp, #0
 800c980:	60f8      	str	r0, [r7, #12]
 800c982:	60b9      	str	r1, [r7, #8]
 800c984:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	330c      	adds	r3, #12
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	429a      	cmp	r2, r3
 800c992:	d00a      	beq.n	800c9aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <netif_do_set_gw+0x26>
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	e000      	b.n	800c9a2 <netif_do_set_gw+0x28>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e000      	b.n	800c9ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c9d4:	4b1c      	ldr	r3, [pc, #112]	; (800ca48 <netif_set_addr+0x90>)
 800c9d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c9de:	4b1a      	ldr	r3, [pc, #104]	; (800ca48 <netif_set_addr+0x90>)
 800c9e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d101      	bne.n	800c9ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c9e8:	4b17      	ldr	r3, [pc, #92]	; (800ca48 <netif_set_addr+0x90>)
 800c9ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d003      	beq.n	800c9fa <netif_set_addr+0x42>
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <netif_set_addr+0x46>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <netif_set_addr+0x48>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d006      	beq.n	800ca16 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca08:	f107 0310 	add.w	r3, r7, #16
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	68b9      	ldr	r1, [r7, #8]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7ff ff49 	bl	800c8a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	6879      	ldr	r1, [r7, #4]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff ff8e 	bl	800c93c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f7ff ffa8 	bl	800c97a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d106      	bne.n	800ca3e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca30:	f107 0310 	add.w	r3, r7, #16
 800ca34:	461a      	mov	r2, r3
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f7ff ff35 	bl	800c8a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ca3e:	bf00      	nop
 800ca40:	3720      	adds	r7, #32
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	0801d6a4 	.word	0x0801d6a4

0800ca4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ca54:	4a04      	ldr	r2, [pc, #16]	; (800ca68 <netif_set_default+0x1c>)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	2001122c 	.word	0x2001122c

0800ca6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d107      	bne.n	800ca8a <netif_set_up+0x1e>
 800ca7a:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <netif_set_up+0x4c>)
 800ca7c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ca80:	490e      	ldr	r1, [pc, #56]	; (800cabc <netif_set_up+0x50>)
 800ca82:	480f      	ldr	r0, [pc, #60]	; (800cac0 <netif_set_up+0x54>)
 800ca84:	f00c f964 	bl	8018d50 <iprintf>
 800ca88:	e013      	b.n	800cab2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10c      	bne.n	800cab2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca9e:	f043 0301 	orr.w	r3, r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800caaa:	2103      	movs	r1, #3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f809 	bl	800cac4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	0801ae50 	.word	0x0801ae50
 800cabc:	0801afd8 	.word	0x0801afd8
 800cac0:	0801aea0 	.word	0x0801aea0

0800cac4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d106      	bne.n	800cae4 <netif_issue_reports+0x20>
 800cad6:	4b18      	ldr	r3, [pc, #96]	; (800cb38 <netif_issue_reports+0x74>)
 800cad8:	f240 326d 	movw	r2, #877	; 0x36d
 800cadc:	4917      	ldr	r1, [pc, #92]	; (800cb3c <netif_issue_reports+0x78>)
 800cade:	4818      	ldr	r0, [pc, #96]	; (800cb40 <netif_issue_reports+0x7c>)
 800cae0:	f00c f936 	bl	8018d50 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caea:	f003 0304 	and.w	r3, r3, #4
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d01e      	beq.n	800cb30 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800caf8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d017      	beq.n	800cb30 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	f003 0301 	and.w	r3, r3, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d013      	beq.n	800cb32 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00e      	beq.n	800cb32 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb1a:	f003 0308 	and.w	r3, r3, #8
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d007      	beq.n	800cb32 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f008 fb47 	bl	80151bc <etharp_request>
 800cb2e:	e000      	b.n	800cb32 <netif_issue_reports+0x6e>
    return;
 800cb30:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	0801ae50 	.word	0x0801ae50
 800cb3c:	0801aff4 	.word	0x0801aff4
 800cb40:	0801aea0 	.word	0x0801aea0

0800cb44 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d107      	bne.n	800cb62 <netif_set_down+0x1e>
 800cb52:	4b12      	ldr	r3, [pc, #72]	; (800cb9c <netif_set_down+0x58>)
 800cb54:	f240 329b 	movw	r2, #923	; 0x39b
 800cb58:	4911      	ldr	r1, [pc, #68]	; (800cba0 <netif_set_down+0x5c>)
 800cb5a:	4812      	ldr	r0, [pc, #72]	; (800cba4 <netif_set_down+0x60>)
 800cb5c:	f00c f8f8 	bl	8018d50 <iprintf>
 800cb60:	e019      	b.n	800cb96 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d012      	beq.n	800cb96 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb76:	f023 0301 	bic.w	r3, r3, #1
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb88:	f003 0308 	and.w	r3, r3, #8
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d002      	beq.n	800cb96 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f007 fed1 	bl	8014938 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	0801ae50 	.word	0x0801ae50
 800cba0:	0801b018 	.word	0x0801b018
 800cba4:	0801aea0 	.word	0x0801aea0

0800cba8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d107      	bne.n	800cbc6 <netif_set_link_up+0x1e>
 800cbb6:	4b13      	ldr	r3, [pc, #76]	; (800cc04 <netif_set_link_up+0x5c>)
 800cbb8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cbbc:	4912      	ldr	r1, [pc, #72]	; (800cc08 <netif_set_link_up+0x60>)
 800cbbe:	4813      	ldr	r0, [pc, #76]	; (800cc0c <netif_set_link_up+0x64>)
 800cbc0:	f00c f8c6 	bl	8018d50 <iprintf>
 800cbc4:	e01b      	b.n	800cbfe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbcc:	f003 0304 	and.w	r3, r3, #4
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d114      	bne.n	800cbfe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbda:	f043 0304 	orr.w	r3, r3, #4
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cbe6:	2103      	movs	r1, #3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff ff6b 	bl	800cac4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	69db      	ldr	r3, [r3, #28]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d003      	beq.n	800cbfe <netif_set_link_up+0x56>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	0801ae50 	.word	0x0801ae50
 800cc08:	0801b038 	.word	0x0801b038
 800cc0c:	0801aea0 	.word	0x0801aea0

0800cc10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d107      	bne.n	800cc2e <netif_set_link_down+0x1e>
 800cc1e:	4b11      	ldr	r3, [pc, #68]	; (800cc64 <netif_set_link_down+0x54>)
 800cc20:	f240 4206 	movw	r2, #1030	; 0x406
 800cc24:	4910      	ldr	r1, [pc, #64]	; (800cc68 <netif_set_link_down+0x58>)
 800cc26:	4811      	ldr	r0, [pc, #68]	; (800cc6c <netif_set_link_down+0x5c>)
 800cc28:	f00c f892 	bl	8018d50 <iprintf>
 800cc2c:	e017      	b.n	800cc5e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d010      	beq.n	800cc5e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc42:	f023 0304 	bic.w	r3, r3, #4
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	69db      	ldr	r3, [r3, #28]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d003      	beq.n	800cc5e <netif_set_link_down+0x4e>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	69db      	ldr	r3, [r3, #28]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	0801ae50 	.word	0x0801ae50
 800cc68:	0801b05c 	.word	0x0801b05c
 800cc6c:	0801aea0 	.word	0x0801aea0

0800cc70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	61da      	str	r2, [r3, #28]
  }
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b085      	sub	sp, #20
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	60f8      	str	r0, [r7, #12]
 800cc9a:	60b9      	str	r1, [r7, #8]
 800cc9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cc9e:	f06f 030b 	mvn.w	r3, #11
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
	...

0800ccb0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d013      	beq.n	800cce8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ccc0:	4b0d      	ldr	r3, [pc, #52]	; (800ccf8 <netif_get_by_index+0x48>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e00c      	b.n	800cce2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccce:	3301      	adds	r3, #1
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	79fa      	ldrb	r2, [r7, #7]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d101      	bne.n	800ccdc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	e006      	b.n	800ccea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1ef      	bne.n	800ccc8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	20011228 	.word	0x20011228

0800ccfc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cd02:	f00a f8d5 	bl	8016eb0 <sys_arch_protect>
 800cd06:	6038      	str	r0, [r7, #0]
 800cd08:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <pbuf_free_ooseq+0x44>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	6838      	ldr	r0, [r7, #0]
 800cd10:	f00a f8dc 	bl	8016ecc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cd14:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <pbuf_free_ooseq+0x48>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	607b      	str	r3, [r7, #4]
 800cd1a:	e00a      	b.n	800cd32 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d003      	beq.n	800cd2c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f002 fbf9 	bl	800f51c <tcp_free_ooseq>
      return;
 800cd2a:	e005      	b.n	800cd38 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	607b      	str	r3, [r7, #4]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1f1      	bne.n	800cd1c <pbuf_free_ooseq+0x20>
    }
  }
}
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20011231 	.word	0x20011231
 800cd44:	20011240 	.word	0x20011240

0800cd48 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cd50:	f7ff ffd4 	bl	800ccfc <pbuf_free_ooseq>
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cd62:	f00a f8a5 	bl	8016eb0 <sys_arch_protect>
 800cd66:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cd68:	4b0f      	ldr	r3, [pc, #60]	; (800cda8 <pbuf_pool_is_empty+0x4c>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cd6e:	4b0e      	ldr	r3, [pc, #56]	; (800cda8 <pbuf_pool_is_empty+0x4c>)
 800cd70:	2201      	movs	r2, #1
 800cd72:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f00a f8a9 	bl	8016ecc <sys_arch_unprotect>

  if (!queued) {
 800cd7a:	78fb      	ldrb	r3, [r7, #3]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10f      	bne.n	800cda0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cd80:	2100      	movs	r1, #0
 800cd82:	480a      	ldr	r0, [pc, #40]	; (800cdac <pbuf_pool_is_empty+0x50>)
 800cd84:	f7fe fe80 	bl	800ba88 <tcpip_try_callback>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d008      	beq.n	800cda0 <pbuf_pool_is_empty+0x44>
 800cd8e:	f00a f88f 	bl	8016eb0 <sys_arch_protect>
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <pbuf_pool_is_empty+0x4c>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	701a      	strb	r2, [r3, #0]
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f00a f896 	bl	8016ecc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20011231 	.word	0x20011231
 800cdac:	0800cd49 	.word	0x0800cd49

0800cdb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	4611      	mov	r1, r2
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	80fb      	strh	r3, [r7, #6]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	88fa      	ldrh	r2, [r7, #6]
 800cdd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	88ba      	ldrh	r2, [r7, #4]
 800cddc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cdde:	8b3b      	ldrh	r3, [r7, #24]
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	7f3a      	ldrb	r2, [r7, #28]
 800cdea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	73da      	strb	r2, [r3, #15]
}
 800cdf8:	bf00      	nop
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b08c      	sub	sp, #48	; 0x30
 800ce08:	af02      	add	r7, sp, #8
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	71fb      	strb	r3, [r7, #7]
 800ce0e:	460b      	mov	r3, r1
 800ce10:	80bb      	strh	r3, [r7, #4]
 800ce12:	4613      	mov	r3, r2
 800ce14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ce1a:	887b      	ldrh	r3, [r7, #2]
 800ce1c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ce20:	d07f      	beq.n	800cf22 <pbuf_alloc+0x11e>
 800ce22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ce26:	f300 80c8 	bgt.w	800cfba <pbuf_alloc+0x1b6>
 800ce2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ce2e:	d010      	beq.n	800ce52 <pbuf_alloc+0x4e>
 800ce30:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ce34:	f300 80c1 	bgt.w	800cfba <pbuf_alloc+0x1b6>
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d002      	beq.n	800ce42 <pbuf_alloc+0x3e>
 800ce3c:	2b41      	cmp	r3, #65	; 0x41
 800ce3e:	f040 80bc 	bne.w	800cfba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ce42:	887a      	ldrh	r2, [r7, #2]
 800ce44:	88bb      	ldrh	r3, [r7, #4]
 800ce46:	4619      	mov	r1, r3
 800ce48:	2000      	movs	r0, #0
 800ce4a:	f000 f8d1 	bl	800cff0 <pbuf_alloc_reference>
 800ce4e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ce50:	e0bd      	b.n	800cfce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ce52:	2300      	movs	r3, #0
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ce56:	2300      	movs	r3, #0
 800ce58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ce5a:	88bb      	ldrh	r3, [r7, #4]
 800ce5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ce5e:	200c      	movs	r0, #12
 800ce60:	f7ff fb9a 	bl	800c598 <memp_malloc>
 800ce64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d109      	bne.n	800ce80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ce6c:	f7ff ff76 	bl	800cd5c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <pbuf_alloc+0x78>
            pbuf_free(p);
 800ce76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce78:	f000 faa8 	bl	800d3cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	e0a7      	b.n	800cfd0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ce80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce82:	3303      	adds	r3, #3
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	f023 0303 	bic.w	r3, r3, #3
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	8b7a      	ldrh	r2, [r7, #26]
 800ce94:	4293      	cmp	r3, r2
 800ce96:	bf28      	it	cs
 800ce98:	4613      	movcs	r3, r2
 800ce9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ce9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce9e:	3310      	adds	r3, #16
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	4413      	add	r3, r2
 800cea4:	3303      	adds	r3, #3
 800cea6:	f023 0303 	bic.w	r3, r3, #3
 800ceaa:	4618      	mov	r0, r3
 800ceac:	89f9      	ldrh	r1, [r7, #14]
 800ceae:	8b7a      	ldrh	r2, [r7, #26]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	9301      	str	r3, [sp, #4]
 800ceb4:	887b      	ldrh	r3, [r7, #2]
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	4601      	mov	r1, r0
 800cebc:	6938      	ldr	r0, [r7, #16]
 800cebe:	f7ff ff77 	bl	800cdb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	f003 0303 	and.w	r3, r3, #3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d006      	beq.n	800cedc <pbuf_alloc+0xd8>
 800cece:	4b42      	ldr	r3, [pc, #264]	; (800cfd8 <pbuf_alloc+0x1d4>)
 800ced0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ced4:	4941      	ldr	r1, [pc, #260]	; (800cfdc <pbuf_alloc+0x1d8>)
 800ced6:	4842      	ldr	r0, [pc, #264]	; (800cfe0 <pbuf_alloc+0x1dc>)
 800ced8:	f00b ff3a 	bl	8018d50 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cedc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cede:	3303      	adds	r3, #3
 800cee0:	f023 0303 	bic.w	r3, r3, #3
 800cee4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cee8:	d106      	bne.n	800cef8 <pbuf_alloc+0xf4>
 800ceea:	4b3b      	ldr	r3, [pc, #236]	; (800cfd8 <pbuf_alloc+0x1d4>)
 800ceec:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cef0:	493c      	ldr	r1, [pc, #240]	; (800cfe4 <pbuf_alloc+0x1e0>)
 800cef2:	483b      	ldr	r0, [pc, #236]	; (800cfe0 <pbuf_alloc+0x1dc>)
 800cef4:	f00b ff2c 	bl	8018d50 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	627b      	str	r3, [r7, #36]	; 0x24
 800cf02:	e002      	b.n	800cf0a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cf0e:	8b7a      	ldrh	r2, [r7, #26]
 800cf10:	89fb      	ldrh	r3, [r7, #14]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cf1a:	8b7b      	ldrh	r3, [r7, #26]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d19e      	bne.n	800ce5e <pbuf_alloc+0x5a>
      break;
 800cf20:	e055      	b.n	800cfce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cf22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf24:	3303      	adds	r3, #3
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	f023 0303 	bic.w	r3, r3, #3
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	88bb      	ldrh	r3, [r7, #4]
 800cf30:	3303      	adds	r3, #3
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	f023 0303 	bic.w	r3, r3, #3
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	4413      	add	r3, r2
 800cf3c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cf3e:	8b3b      	ldrh	r3, [r7, #24]
 800cf40:	3310      	adds	r3, #16
 800cf42:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cf44:	8b3a      	ldrh	r2, [r7, #24]
 800cf46:	88bb      	ldrh	r3, [r7, #4]
 800cf48:	3303      	adds	r3, #3
 800cf4a:	f023 0303 	bic.w	r3, r3, #3
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d306      	bcc.n	800cf60 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cf52:	8afa      	ldrh	r2, [r7, #22]
 800cf54:	88bb      	ldrh	r3, [r7, #4]
 800cf56:	3303      	adds	r3, #3
 800cf58:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d201      	bcs.n	800cf64 <pbuf_alloc+0x160>
        return NULL;
 800cf60:	2300      	movs	r3, #0
 800cf62:	e035      	b.n	800cfd0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cf64:	8afb      	ldrh	r3, [r7, #22]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff f96e 	bl	800c248 <mem_malloc>
 800cf6c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <pbuf_alloc+0x174>
        return NULL;
 800cf74:	2300      	movs	r3, #0
 800cf76:	e02b      	b.n	800cfd0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cf78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf7a:	3310      	adds	r3, #16
 800cf7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf7e:	4413      	add	r3, r2
 800cf80:	3303      	adds	r3, #3
 800cf82:	f023 0303 	bic.w	r3, r3, #3
 800cf86:	4618      	mov	r0, r3
 800cf88:	88b9      	ldrh	r1, [r7, #4]
 800cf8a:	88ba      	ldrh	r2, [r7, #4]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	887b      	ldrh	r3, [r7, #2]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	460b      	mov	r3, r1
 800cf96:	4601      	mov	r1, r0
 800cf98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf9a:	f7ff ff09 	bl	800cdb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d010      	beq.n	800cfcc <pbuf_alloc+0x1c8>
 800cfaa:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <pbuf_alloc+0x1d4>)
 800cfac:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cfb0:	490d      	ldr	r1, [pc, #52]	; (800cfe8 <pbuf_alloc+0x1e4>)
 800cfb2:	480b      	ldr	r0, [pc, #44]	; (800cfe0 <pbuf_alloc+0x1dc>)
 800cfb4:	f00b fecc 	bl	8018d50 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cfb8:	e008      	b.n	800cfcc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cfba:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <pbuf_alloc+0x1d4>)
 800cfbc:	f240 1227 	movw	r2, #295	; 0x127
 800cfc0:	490a      	ldr	r1, [pc, #40]	; (800cfec <pbuf_alloc+0x1e8>)
 800cfc2:	4807      	ldr	r0, [pc, #28]	; (800cfe0 <pbuf_alloc+0x1dc>)
 800cfc4:	f00b fec4 	bl	8018d50 <iprintf>
      return NULL;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	e001      	b.n	800cfd0 <pbuf_alloc+0x1cc>
      break;
 800cfcc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3728      	adds	r7, #40	; 0x28
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	0801b080 	.word	0x0801b080
 800cfdc:	0801b0b0 	.word	0x0801b0b0
 800cfe0:	0801b0e0 	.word	0x0801b0e0
 800cfe4:	0801b108 	.word	0x0801b108
 800cfe8:	0801b13c 	.word	0x0801b13c
 800cfec:	0801b168 	.word	0x0801b168

0800cff0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af02      	add	r7, sp, #8
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	460b      	mov	r3, r1
 800cffa:	807b      	strh	r3, [r7, #2]
 800cffc:	4613      	mov	r3, r2
 800cffe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d000:	883b      	ldrh	r3, [r7, #0]
 800d002:	2b41      	cmp	r3, #65	; 0x41
 800d004:	d009      	beq.n	800d01a <pbuf_alloc_reference+0x2a>
 800d006:	883b      	ldrh	r3, [r7, #0]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d006      	beq.n	800d01a <pbuf_alloc_reference+0x2a>
 800d00c:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <pbuf_alloc_reference+0x5c>)
 800d00e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d012:	490f      	ldr	r1, [pc, #60]	; (800d050 <pbuf_alloc_reference+0x60>)
 800d014:	480f      	ldr	r0, [pc, #60]	; (800d054 <pbuf_alloc_reference+0x64>)
 800d016:	f00b fe9b 	bl	8018d50 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d01a:	200b      	movs	r0, #11
 800d01c:	f7ff fabc 	bl	800c598 <memp_malloc>
 800d020:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d101      	bne.n	800d02c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d028:	2300      	movs	r3, #0
 800d02a:	e00b      	b.n	800d044 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d02c:	8879      	ldrh	r1, [r7, #2]
 800d02e:	887a      	ldrh	r2, [r7, #2]
 800d030:	2300      	movs	r3, #0
 800d032:	9301      	str	r3, [sp, #4]
 800d034:	883b      	ldrh	r3, [r7, #0]
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	460b      	mov	r3, r1
 800d03a:	6879      	ldr	r1, [r7, #4]
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f7ff feb7 	bl	800cdb0 <pbuf_init_alloced_pbuf>
  return p;
 800d042:	68fb      	ldr	r3, [r7, #12]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	0801b080 	.word	0x0801b080
 800d050:	0801b184 	.word	0x0801b184
 800d054:	0801b0e0 	.word	0x0801b0e0

0800d058 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	607b      	str	r3, [r7, #4]
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]
 800d064:	460b      	mov	r3, r1
 800d066:	81bb      	strh	r3, [r7, #12]
 800d068:	4613      	mov	r3, r2
 800d06a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d070:	8a7b      	ldrh	r3, [r7, #18]
 800d072:	3303      	adds	r3, #3
 800d074:	f023 0203 	bic.w	r2, r3, #3
 800d078:	89bb      	ldrh	r3, [r7, #12]
 800d07a:	441a      	add	r2, r3
 800d07c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d07e:	429a      	cmp	r2, r3
 800d080:	d901      	bls.n	800d086 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d082:	2300      	movs	r3, #0
 800d084:	e018      	b.n	800d0b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d007      	beq.n	800d09c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d08c:	8a7b      	ldrh	r3, [r7, #18]
 800d08e:	3303      	adds	r3, #3
 800d090:	f023 0303 	bic.w	r3, r3, #3
 800d094:	6a3a      	ldr	r2, [r7, #32]
 800d096:	4413      	add	r3, r2
 800d098:	617b      	str	r3, [r7, #20]
 800d09a:	e001      	b.n	800d0a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	89b9      	ldrh	r1, [r7, #12]
 800d0a4:	89ba      	ldrh	r2, [r7, #12]
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	897b      	ldrh	r3, [r7, #10]
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	6979      	ldr	r1, [r7, #20]
 800d0b2:	f7ff fe7d 	bl	800cdb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d0b6:	687b      	ldr	r3, [r7, #4]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d106      	bne.n	800d0e0 <pbuf_realloc+0x20>
 800d0d2:	4b3a      	ldr	r3, [pc, #232]	; (800d1bc <pbuf_realloc+0xfc>)
 800d0d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d0d8:	4939      	ldr	r1, [pc, #228]	; (800d1c0 <pbuf_realloc+0x100>)
 800d0da:	483a      	ldr	r0, [pc, #232]	; (800d1c4 <pbuf_realloc+0x104>)
 800d0dc:	f00b fe38 	bl	8018d50 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	891b      	ldrh	r3, [r3, #8]
 800d0e4:	887a      	ldrh	r2, [r7, #2]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d263      	bcs.n	800d1b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	891a      	ldrh	r2, [r3, #8]
 800d0ee:	887b      	ldrh	r3, [r7, #2]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d0f4:	887b      	ldrh	r3, [r7, #2]
 800d0f6:	817b      	strh	r3, [r7, #10]
  q = p;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d0fc:	e018      	b.n	800d130 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	895b      	ldrh	r3, [r3, #10]
 800d102:	897a      	ldrh	r2, [r7, #10]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	891a      	ldrh	r2, [r3, #8]
 800d10c:	893b      	ldrh	r3, [r7, #8]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	b29a      	uxth	r2, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d106      	bne.n	800d130 <pbuf_realloc+0x70>
 800d122:	4b26      	ldr	r3, [pc, #152]	; (800d1bc <pbuf_realloc+0xfc>)
 800d124:	f240 12af 	movw	r2, #431	; 0x1af
 800d128:	4927      	ldr	r1, [pc, #156]	; (800d1c8 <pbuf_realloc+0x108>)
 800d12a:	4826      	ldr	r0, [pc, #152]	; (800d1c4 <pbuf_realloc+0x104>)
 800d12c:	f00b fe10 	bl	8018d50 <iprintf>
  while (rem_len > q->len) {
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	895b      	ldrh	r3, [r3, #10]
 800d134:	897a      	ldrh	r2, [r7, #10]
 800d136:	429a      	cmp	r2, r3
 800d138:	d8e1      	bhi.n	800d0fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	7b1b      	ldrb	r3, [r3, #12]
 800d13e:	f003 030f 	and.w	r3, r3, #15
 800d142:	2b00      	cmp	r3, #0
 800d144:	d121      	bne.n	800d18a <pbuf_realloc+0xca>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	895b      	ldrh	r3, [r3, #10]
 800d14a:	897a      	ldrh	r2, [r7, #10]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d01c      	beq.n	800d18a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	7b5b      	ldrb	r3, [r3, #13]
 800d154:	f003 0302 	and.w	r3, r3, #2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d116      	bne.n	800d18a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	b29a      	uxth	r2, r3
 800d166:	897b      	ldrh	r3, [r7, #10]
 800d168:	4413      	add	r3, r2
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	4619      	mov	r1, r3
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f7fe ff5a 	bl	800c028 <mem_trim>
 800d174:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d106      	bne.n	800d18a <pbuf_realloc+0xca>
 800d17c:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <pbuf_realloc+0xfc>)
 800d17e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d182:	4912      	ldr	r1, [pc, #72]	; (800d1cc <pbuf_realloc+0x10c>)
 800d184:	480f      	ldr	r0, [pc, #60]	; (800d1c4 <pbuf_realloc+0x104>)
 800d186:	f00b fde3 	bl	8018d50 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	897a      	ldrh	r2, [r7, #10]
 800d18e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	895a      	ldrh	r2, [r3, #10]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d004      	beq.n	800d1aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 f911 	bl	800d3cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	601a      	str	r2, [r3, #0]
 800d1b0:	e000      	b.n	800d1b4 <pbuf_realloc+0xf4>
    return;
 800d1b2:	bf00      	nop

}
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	0801b080 	.word	0x0801b080
 800d1c0:	0801b198 	.word	0x0801b198
 800d1c4:	0801b0e0 	.word	0x0801b0e0
 800d1c8:	0801b1b0 	.word	0x0801b1b0
 800d1cc:	0801b1c8 	.word	0x0801b1c8

0800d1d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d106      	bne.n	800d1f2 <pbuf_add_header_impl+0x22>
 800d1e4:	4b2b      	ldr	r3, [pc, #172]	; (800d294 <pbuf_add_header_impl+0xc4>)
 800d1e6:	f240 12df 	movw	r2, #479	; 0x1df
 800d1ea:	492b      	ldr	r1, [pc, #172]	; (800d298 <pbuf_add_header_impl+0xc8>)
 800d1ec:	482b      	ldr	r0, [pc, #172]	; (800d29c <pbuf_add_header_impl+0xcc>)
 800d1ee:	f00b fdaf 	bl	8018d50 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d003      	beq.n	800d200 <pbuf_add_header_impl+0x30>
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1fe:	d301      	bcc.n	800d204 <pbuf_add_header_impl+0x34>
    return 1;
 800d200:	2301      	movs	r3, #1
 800d202:	e043      	b.n	800d28c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <pbuf_add_header_impl+0x3e>
    return 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	e03e      	b.n	800d28c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	891a      	ldrh	r2, [r3, #8]
 800d216:	8a7b      	ldrh	r3, [r7, #18]
 800d218:	4413      	add	r3, r2
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	8a7a      	ldrh	r2, [r7, #18]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d901      	bls.n	800d226 <pbuf_add_header_impl+0x56>
    return 1;
 800d222:	2301      	movs	r3, #1
 800d224:	e032      	b.n	800d28c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	7b1b      	ldrb	r3, [r3, #12]
 800d22a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d22c:	8a3b      	ldrh	r3, [r7, #16]
 800d22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00c      	beq.n	800d250 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	685a      	ldr	r2, [r3, #4]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	425b      	negs	r3, r3
 800d23e:	4413      	add	r3, r2
 800d240:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3310      	adds	r3, #16
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d20d      	bcs.n	800d268 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e01d      	b.n	800d28c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d006      	beq.n	800d264 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	685a      	ldr	r2, [r3, #4]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	425b      	negs	r3, r3
 800d25e:	4413      	add	r3, r2
 800d260:	617b      	str	r3, [r7, #20]
 800d262:	e001      	b.n	800d268 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d264:	2301      	movs	r3, #1
 800d266:	e011      	b.n	800d28c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	895a      	ldrh	r2, [r3, #10]
 800d272:	8a7b      	ldrh	r3, [r7, #18]
 800d274:	4413      	add	r3, r2
 800d276:	b29a      	uxth	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	891a      	ldrh	r2, [r3, #8]
 800d280:	8a7b      	ldrh	r3, [r7, #18]
 800d282:	4413      	add	r3, r2
 800d284:	b29a      	uxth	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	811a      	strh	r2, [r3, #8]


  return 0;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3718      	adds	r7, #24
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	0801b080 	.word	0x0801b080
 800d298:	0801b1e4 	.word	0x0801b1e4
 800d29c:	0801b0e0 	.word	0x0801b0e0

0800d2a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff ff8e 	bl	800d1d0 <pbuf_add_header_impl>
 800d2b4:	4603      	mov	r3, r0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
	...

0800d2c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d106      	bne.n	800d2de <pbuf_remove_header+0x1e>
 800d2d0:	4b20      	ldr	r3, [pc, #128]	; (800d354 <pbuf_remove_header+0x94>)
 800d2d2:	f240 224b 	movw	r2, #587	; 0x24b
 800d2d6:	4920      	ldr	r1, [pc, #128]	; (800d358 <pbuf_remove_header+0x98>)
 800d2d8:	4820      	ldr	r0, [pc, #128]	; (800d35c <pbuf_remove_header+0x9c>)
 800d2da:	f00b fd39 	bl	8018d50 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <pbuf_remove_header+0x2c>
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ea:	d301      	bcc.n	800d2f0 <pbuf_remove_header+0x30>
    return 1;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e02c      	b.n	800d34a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d101      	bne.n	800d2fa <pbuf_remove_header+0x3a>
    return 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	e027      	b.n	800d34a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	895b      	ldrh	r3, [r3, #10]
 800d302:	89fa      	ldrh	r2, [r7, #14]
 800d304:	429a      	cmp	r2, r3
 800d306:	d908      	bls.n	800d31a <pbuf_remove_header+0x5a>
 800d308:	4b12      	ldr	r3, [pc, #72]	; (800d354 <pbuf_remove_header+0x94>)
 800d30a:	f240 2255 	movw	r2, #597	; 0x255
 800d30e:	4914      	ldr	r1, [pc, #80]	; (800d360 <pbuf_remove_header+0xa0>)
 800d310:	4812      	ldr	r0, [pc, #72]	; (800d35c <pbuf_remove_header+0x9c>)
 800d312:	f00b fd1d 	bl	8018d50 <iprintf>
 800d316:	2301      	movs	r3, #1
 800d318:	e017      	b.n	800d34a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685a      	ldr	r2, [r3, #4]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	441a      	add	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	895a      	ldrh	r2, [r3, #10]
 800d330:	89fb      	ldrh	r3, [r7, #14]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	b29a      	uxth	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	891a      	ldrh	r2, [r3, #8]
 800d33e:	89fb      	ldrh	r3, [r7, #14]
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	b29a      	uxth	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	0801b080 	.word	0x0801b080
 800d358:	0801b1e4 	.word	0x0801b1e4
 800d35c:	0801b0e0 	.word	0x0801b0e0
 800d360:	0801b1f0 	.word	0x0801b1f0

0800d364 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	807b      	strh	r3, [r7, #2]
 800d370:	4613      	mov	r3, r2
 800d372:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	da08      	bge.n	800d38e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d37c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d380:	425b      	negs	r3, r3
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff ff9b 	bl	800d2c0 <pbuf_remove_header>
 800d38a:	4603      	mov	r3, r0
 800d38c:	e007      	b.n	800d39e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d38e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d392:	787a      	ldrb	r2, [r7, #1]
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff ff1a 	bl	800d1d0 <pbuf_add_header_impl>
 800d39c:	4603      	mov	r3, r0
  }
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d3b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7ff ffd2 	bl	800d364 <pbuf_header_impl>
 800d3c0:	4603      	mov	r3, r0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
	...

0800d3cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b088      	sub	sp, #32
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10b      	bne.n	800d3f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <pbuf_free+0x22>
 800d3e0:	4b3b      	ldr	r3, [pc, #236]	; (800d4d0 <pbuf_free+0x104>)
 800d3e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d3e6:	493b      	ldr	r1, [pc, #236]	; (800d4d4 <pbuf_free+0x108>)
 800d3e8:	483b      	ldr	r0, [pc, #236]	; (800d4d8 <pbuf_free+0x10c>)
 800d3ea:	f00b fcb1 	bl	8018d50 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e069      	b.n	800d4c6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d3f6:	e062      	b.n	800d4be <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d3f8:	f009 fd5a 	bl	8016eb0 <sys_arch_protect>
 800d3fc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7b9b      	ldrb	r3, [r3, #14]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d106      	bne.n	800d414 <pbuf_free+0x48>
 800d406:	4b32      	ldr	r3, [pc, #200]	; (800d4d0 <pbuf_free+0x104>)
 800d408:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d40c:	4933      	ldr	r1, [pc, #204]	; (800d4dc <pbuf_free+0x110>)
 800d40e:	4832      	ldr	r0, [pc, #200]	; (800d4d8 <pbuf_free+0x10c>)
 800d410:	f00b fc9e 	bl	8018d50 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	7b9b      	ldrb	r3, [r3, #14]
 800d418:	3b01      	subs	r3, #1
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	739a      	strb	r2, [r3, #14]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	7b9b      	ldrb	r3, [r3, #14]
 800d424:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d426:	69b8      	ldr	r0, [r7, #24]
 800d428:	f009 fd50 	bl	8016ecc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d143      	bne.n	800d4ba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7b1b      	ldrb	r3, [r3, #12]
 800d43c:	f003 030f 	and.w	r3, r3, #15
 800d440:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	7b5b      	ldrb	r3, [r3, #13]
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d011      	beq.n	800d472 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <pbuf_free+0x9c>
 800d45a:	4b1d      	ldr	r3, [pc, #116]	; (800d4d0 <pbuf_free+0x104>)
 800d45c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d460:	491f      	ldr	r1, [pc, #124]	; (800d4e0 <pbuf_free+0x114>)
 800d462:	481d      	ldr	r0, [pc, #116]	; (800d4d8 <pbuf_free+0x10c>)
 800d464:	f00b fc74 	bl	8018d50 <iprintf>
        pc->custom_free_function(p);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	4798      	blx	r3
 800d470:	e01d      	b.n	800d4ae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	2b02      	cmp	r3, #2
 800d476:	d104      	bne.n	800d482 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d478:	6879      	ldr	r1, [r7, #4]
 800d47a:	200c      	movs	r0, #12
 800d47c:	f7ff f902 	bl	800c684 <memp_free>
 800d480:	e015      	b.n	800d4ae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d482:	7bfb      	ldrb	r3, [r7, #15]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d104      	bne.n	800d492 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	200b      	movs	r0, #11
 800d48c:	f7ff f8fa 	bl	800c684 <memp_free>
 800d490:	e00d      	b.n	800d4ae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d492:	7bfb      	ldrb	r3, [r7, #15]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d103      	bne.n	800d4a0 <pbuf_free+0xd4>
          mem_free(p);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7fe fd35 	bl	800bf08 <mem_free>
 800d49e:	e006      	b.n	800d4ae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <pbuf_free+0x104>)
 800d4a2:	f240 320f 	movw	r2, #783	; 0x30f
 800d4a6:	490f      	ldr	r1, [pc, #60]	; (800d4e4 <pbuf_free+0x118>)
 800d4a8:	480b      	ldr	r0, [pc, #44]	; (800d4d8 <pbuf_free+0x10c>)
 800d4aa:	f00b fc51 	bl	8018d50 <iprintf>
        }
      }
      count++;
 800d4ae:	7ffb      	ldrb	r3, [r7, #31]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	607b      	str	r3, [r7, #4]
 800d4b8:	e001      	b.n	800d4be <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d199      	bne.n	800d3f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d4c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	0801b080 	.word	0x0801b080
 800d4d4:	0801b1e4 	.word	0x0801b1e4
 800d4d8:	0801b0e0 	.word	0x0801b0e0
 800d4dc:	0801b210 	.word	0x0801b210
 800d4e0:	0801b228 	.word	0x0801b228
 800d4e4:	0801b24c 	.word	0x0801b24c

0800d4e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d4f4:	e005      	b.n	800d502 <pbuf_clen+0x1a>
    ++len;
 800d4f6:	89fb      	ldrh	r3, [r7, #14]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1f6      	bne.n	800d4f6 <pbuf_clen+0xe>
  }
  return len;
 800d508:	89fb      	ldrh	r3, [r7, #14]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
	...

0800d518 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d016      	beq.n	800d554 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d526:	f009 fcc3 	bl	8016eb0 <sys_arch_protect>
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	7b9b      	ldrb	r3, [r3, #14]
 800d530:	3301      	adds	r3, #1
 800d532:	b2da      	uxtb	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	739a      	strb	r2, [r3, #14]
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f009 fcc7 	bl	8016ecc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	7b9b      	ldrb	r3, [r3, #14]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d106      	bne.n	800d554 <pbuf_ref+0x3c>
 800d546:	4b05      	ldr	r3, [pc, #20]	; (800d55c <pbuf_ref+0x44>)
 800d548:	f240 3242 	movw	r2, #834	; 0x342
 800d54c:	4904      	ldr	r1, [pc, #16]	; (800d560 <pbuf_ref+0x48>)
 800d54e:	4805      	ldr	r0, [pc, #20]	; (800d564 <pbuf_ref+0x4c>)
 800d550:	f00b fbfe 	bl	8018d50 <iprintf>
  }
}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	0801b080 	.word	0x0801b080
 800d560:	0801b260 	.word	0x0801b260
 800d564:	0801b0e0 	.word	0x0801b0e0

0800d568 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <pbuf_cat+0x16>
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <pbuf_cat+0x26>
 800d57e:	4b20      	ldr	r3, [pc, #128]	; (800d600 <pbuf_cat+0x98>)
 800d580:	f240 3259 	movw	r2, #857	; 0x359
 800d584:	491f      	ldr	r1, [pc, #124]	; (800d604 <pbuf_cat+0x9c>)
 800d586:	4820      	ldr	r0, [pc, #128]	; (800d608 <pbuf_cat+0xa0>)
 800d588:	f00b fbe2 	bl	8018d50 <iprintf>
 800d58c:	e034      	b.n	800d5f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	60fb      	str	r3, [r7, #12]
 800d592:	e00a      	b.n	800d5aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	891a      	ldrh	r2, [r3, #8]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	891b      	ldrh	r3, [r3, #8]
 800d59c:	4413      	add	r3, r2
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	60fb      	str	r3, [r7, #12]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1f0      	bne.n	800d594 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	891a      	ldrh	r2, [r3, #8]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	895b      	ldrh	r3, [r3, #10]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d006      	beq.n	800d5cc <pbuf_cat+0x64>
 800d5be:	4b10      	ldr	r3, [pc, #64]	; (800d600 <pbuf_cat+0x98>)
 800d5c0:	f240 3262 	movw	r2, #866	; 0x362
 800d5c4:	4911      	ldr	r1, [pc, #68]	; (800d60c <pbuf_cat+0xa4>)
 800d5c6:	4810      	ldr	r0, [pc, #64]	; (800d608 <pbuf_cat+0xa0>)
 800d5c8:	f00b fbc2 	bl	8018d50 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d006      	beq.n	800d5e2 <pbuf_cat+0x7a>
 800d5d4:	4b0a      	ldr	r3, [pc, #40]	; (800d600 <pbuf_cat+0x98>)
 800d5d6:	f240 3263 	movw	r2, #867	; 0x363
 800d5da:	490d      	ldr	r1, [pc, #52]	; (800d610 <pbuf_cat+0xa8>)
 800d5dc:	480a      	ldr	r0, [pc, #40]	; (800d608 <pbuf_cat+0xa0>)
 800d5de:	f00b fbb7 	bl	8018d50 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	891a      	ldrh	r2, [r3, #8]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	891b      	ldrh	r3, [r3, #8]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	0801b080 	.word	0x0801b080
 800d604:	0801b274 	.word	0x0801b274
 800d608:	0801b0e0 	.word	0x0801b0e0
 800d60c:	0801b2ac 	.word	0x0801b2ac
 800d610:	0801b2dc 	.word	0x0801b2dc

0800d614 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d61e:	2300      	movs	r3, #0
 800d620:	617b      	str	r3, [r7, #20]
 800d622:	2300      	movs	r3, #0
 800d624:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d008      	beq.n	800d63e <pbuf_copy+0x2a>
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d005      	beq.n	800d63e <pbuf_copy+0x2a>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	891a      	ldrh	r2, [r3, #8]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	891b      	ldrh	r3, [r3, #8]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d209      	bcs.n	800d652 <pbuf_copy+0x3e>
 800d63e:	4b57      	ldr	r3, [pc, #348]	; (800d79c <pbuf_copy+0x188>)
 800d640:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d644:	4956      	ldr	r1, [pc, #344]	; (800d7a0 <pbuf_copy+0x18c>)
 800d646:	4857      	ldr	r0, [pc, #348]	; (800d7a4 <pbuf_copy+0x190>)
 800d648:	f00b fb82 	bl	8018d50 <iprintf>
 800d64c:	f06f 030f 	mvn.w	r3, #15
 800d650:	e09f      	b.n	800d792 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	895b      	ldrh	r3, [r3, #10]
 800d656:	461a      	mov	r2, r3
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	1ad2      	subs	r2, r2, r3
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	895b      	ldrh	r3, [r3, #10]
 800d660:	4619      	mov	r1, r3
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	1acb      	subs	r3, r1, r3
 800d666:	429a      	cmp	r2, r3
 800d668:	d306      	bcc.n	800d678 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	895b      	ldrh	r3, [r3, #10]
 800d66e:	461a      	mov	r2, r3
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	60fb      	str	r3, [r7, #12]
 800d676:	e005      	b.n	800d684 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	895b      	ldrh	r3, [r3, #10]
 800d67c:	461a      	mov	r2, r3
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	18d0      	adds	r0, r2, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	685a      	ldr	r2, [r3, #4]
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	4413      	add	r3, r2
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4619      	mov	r1, r3
 800d698:	f00b fb44 	bl	8018d24 <memcpy>
    offset_to += len;
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	895b      	ldrh	r3, [r3, #10]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d906      	bls.n	800d6c6 <pbuf_copy+0xb2>
 800d6b8:	4b38      	ldr	r3, [pc, #224]	; (800d79c <pbuf_copy+0x188>)
 800d6ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d6be:	493a      	ldr	r1, [pc, #232]	; (800d7a8 <pbuf_copy+0x194>)
 800d6c0:	4838      	ldr	r0, [pc, #224]	; (800d7a4 <pbuf_copy+0x190>)
 800d6c2:	f00b fb45 	bl	8018d50 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	895b      	ldrh	r3, [r3, #10]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d906      	bls.n	800d6e0 <pbuf_copy+0xcc>
 800d6d2:	4b32      	ldr	r3, [pc, #200]	; (800d79c <pbuf_copy+0x188>)
 800d6d4:	f240 32da 	movw	r2, #986	; 0x3da
 800d6d8:	4934      	ldr	r1, [pc, #208]	; (800d7ac <pbuf_copy+0x198>)
 800d6da:	4832      	ldr	r0, [pc, #200]	; (800d7a4 <pbuf_copy+0x190>)
 800d6dc:	f00b fb38 	bl	8018d50 <iprintf>
    if (offset_from >= p_from->len) {
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	895b      	ldrh	r3, [r3, #10]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d304      	bcc.n	800d6f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	895b      	ldrh	r3, [r3, #10]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d114      	bne.n	800d72c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10c      	bne.n	800d72c <pbuf_copy+0x118>
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d009      	beq.n	800d72c <pbuf_copy+0x118>
 800d718:	4b20      	ldr	r3, [pc, #128]	; (800d79c <pbuf_copy+0x188>)
 800d71a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d71e:	4924      	ldr	r1, [pc, #144]	; (800d7b0 <pbuf_copy+0x19c>)
 800d720:	4820      	ldr	r0, [pc, #128]	; (800d7a4 <pbuf_copy+0x190>)
 800d722:	f00b fb15 	bl	8018d50 <iprintf>
 800d726:	f06f 030f 	mvn.w	r3, #15
 800d72a:	e032      	b.n	800d792 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d013      	beq.n	800d75a <pbuf_copy+0x146>
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	895a      	ldrh	r2, [r3, #10]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	891b      	ldrh	r3, [r3, #8]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d10d      	bne.n	800d75a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <pbuf_copy+0x146>
 800d746:	4b15      	ldr	r3, [pc, #84]	; (800d79c <pbuf_copy+0x188>)
 800d748:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d74c:	4919      	ldr	r1, [pc, #100]	; (800d7b4 <pbuf_copy+0x1a0>)
 800d74e:	4815      	ldr	r0, [pc, #84]	; (800d7a4 <pbuf_copy+0x190>)
 800d750:	f00b fafe 	bl	8018d50 <iprintf>
 800d754:	f06f 0305 	mvn.w	r3, #5
 800d758:	e01b      	b.n	800d792 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d013      	beq.n	800d788 <pbuf_copy+0x174>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	895a      	ldrh	r2, [r3, #10]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	891b      	ldrh	r3, [r3, #8]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d10d      	bne.n	800d788 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d009      	beq.n	800d788 <pbuf_copy+0x174>
 800d774:	4b09      	ldr	r3, [pc, #36]	; (800d79c <pbuf_copy+0x188>)
 800d776:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d77a:	490e      	ldr	r1, [pc, #56]	; (800d7b4 <pbuf_copy+0x1a0>)
 800d77c:	4809      	ldr	r0, [pc, #36]	; (800d7a4 <pbuf_copy+0x190>)
 800d77e:	f00b fae7 	bl	8018d50 <iprintf>
 800d782:	f06f 0305 	mvn.w	r3, #5
 800d786:	e004      	b.n	800d792 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f47f af61 	bne.w	800d652 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	0801b080 	.word	0x0801b080
 800d7a0:	0801b328 	.word	0x0801b328
 800d7a4:	0801b0e0 	.word	0x0801b0e0
 800d7a8:	0801b358 	.word	0x0801b358
 800d7ac:	0801b370 	.word	0x0801b370
 800d7b0:	0801b38c 	.word	0x0801b38c
 800d7b4:	0801b39c 	.word	0x0801b39c

0800d7b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	80fb      	strh	r3, [r7, #6]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d108      	bne.n	800d7ee <pbuf_copy_partial+0x36>
 800d7dc:	4b2b      	ldr	r3, [pc, #172]	; (800d88c <pbuf_copy_partial+0xd4>)
 800d7de:	f240 420a 	movw	r2, #1034	; 0x40a
 800d7e2:	492b      	ldr	r1, [pc, #172]	; (800d890 <pbuf_copy_partial+0xd8>)
 800d7e4:	482b      	ldr	r0, [pc, #172]	; (800d894 <pbuf_copy_partial+0xdc>)
 800d7e6:	f00b fab3 	bl	8018d50 <iprintf>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e04a      	b.n	800d884 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d108      	bne.n	800d806 <pbuf_copy_partial+0x4e>
 800d7f4:	4b25      	ldr	r3, [pc, #148]	; (800d88c <pbuf_copy_partial+0xd4>)
 800d7f6:	f240 420b 	movw	r2, #1035	; 0x40b
 800d7fa:	4927      	ldr	r1, [pc, #156]	; (800d898 <pbuf_copy_partial+0xe0>)
 800d7fc:	4825      	ldr	r0, [pc, #148]	; (800d894 <pbuf_copy_partial+0xdc>)
 800d7fe:	f00b faa7 	bl	8018d50 <iprintf>
 800d802:	2300      	movs	r3, #0
 800d804:	e03e      	b.n	800d884 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	61fb      	str	r3, [r7, #28]
 800d80a:	e034      	b.n	800d876 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d80c:	88bb      	ldrh	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00a      	beq.n	800d828 <pbuf_copy_partial+0x70>
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	895b      	ldrh	r3, [r3, #10]
 800d816:	88ba      	ldrh	r2, [r7, #4]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d305      	bcc.n	800d828 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	895b      	ldrh	r3, [r3, #10]
 800d820:	88ba      	ldrh	r2, [r7, #4]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	80bb      	strh	r3, [r7, #4]
 800d826:	e023      	b.n	800d870 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	895a      	ldrh	r2, [r3, #10]
 800d82c:	88bb      	ldrh	r3, [r7, #4]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d832:	8b3a      	ldrh	r2, [r7, #24]
 800d834:	88fb      	ldrh	r3, [r7, #6]
 800d836:	429a      	cmp	r2, r3
 800d838:	d901      	bls.n	800d83e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d83a:	88fb      	ldrh	r3, [r7, #6]
 800d83c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d83e:	8b7b      	ldrh	r3, [r7, #26]
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	18d0      	adds	r0, r2, r3
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	88bb      	ldrh	r3, [r7, #4]
 800d84a:	4413      	add	r3, r2
 800d84c:	8b3a      	ldrh	r2, [r7, #24]
 800d84e:	4619      	mov	r1, r3
 800d850:	f00b fa68 	bl	8018d24 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d854:	8afa      	ldrh	r2, [r7, #22]
 800d856:	8b3b      	ldrh	r3, [r7, #24]
 800d858:	4413      	add	r3, r2
 800d85a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d85c:	8b7a      	ldrh	r2, [r7, #26]
 800d85e:	8b3b      	ldrh	r3, [r7, #24]
 800d860:	4413      	add	r3, r2
 800d862:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d864:	88fa      	ldrh	r2, [r7, #6]
 800d866:	8b3b      	ldrh	r3, [r7, #24]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d86c:	2300      	movs	r3, #0
 800d86e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	61fb      	str	r3, [r7, #28]
 800d876:	88fb      	ldrh	r3, [r7, #6]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <pbuf_copy_partial+0xca>
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1c4      	bne.n	800d80c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d882:	8afb      	ldrh	r3, [r7, #22]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3720      	adds	r7, #32
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	0801b080 	.word	0x0801b080
 800d890:	0801b3c8 	.word	0x0801b3c8
 800d894:	0801b0e0 	.word	0x0801b0e0
 800d898:	0801b3e8 	.word	0x0801b3e8

0800d89c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	603a      	str	r2, [r7, #0]
 800d8a6:	71fb      	strb	r3, [r7, #7]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	8919      	ldrh	r1, [r3, #8]
 800d8b0:	88ba      	ldrh	r2, [r7, #4]
 800d8b2:	79fb      	ldrb	r3, [r7, #7]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff faa5 	bl	800ce04 <pbuf_alloc>
 800d8ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <pbuf_clone+0x2a>
    return NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e011      	b.n	800d8ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7ff fea3 	bl	800d614 <pbuf_copy>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d8d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d006      	beq.n	800d8e8 <pbuf_clone+0x4c>
 800d8da:	4b06      	ldr	r3, [pc, #24]	; (800d8f4 <pbuf_clone+0x58>)
 800d8dc:	f240 5224 	movw	r2, #1316	; 0x524
 800d8e0:	4905      	ldr	r1, [pc, #20]	; (800d8f8 <pbuf_clone+0x5c>)
 800d8e2:	4806      	ldr	r0, [pc, #24]	; (800d8fc <pbuf_clone+0x60>)
 800d8e4:	f00b fa34 	bl	8018d50 <iprintf>
  return q;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	0801b080 	.word	0x0801b080
 800d8f8:	0801b4f4 	.word	0x0801b4f4
 800d8fc:	0801b0e0 	.word	0x0801b0e0

0800d900 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d904:	f00b fab2 	bl	8018e6c <rand>
 800d908:	4603      	mov	r3, r0
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d910:	b29b      	uxth	r3, r3
 800d912:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d916:	b29a      	uxth	r2, r3
 800d918:	4b01      	ldr	r3, [pc, #4]	; (800d920 <tcp_init+0x20>)
 800d91a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d91c:	bf00      	nop
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20000024 	.word	0x20000024

0800d924 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7d1b      	ldrb	r3, [r3, #20]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d105      	bne.n	800d940 <tcp_free+0x1c>
 800d934:	4b06      	ldr	r3, [pc, #24]	; (800d950 <tcp_free+0x2c>)
 800d936:	22d4      	movs	r2, #212	; 0xd4
 800d938:	4906      	ldr	r1, [pc, #24]	; (800d954 <tcp_free+0x30>)
 800d93a:	4807      	ldr	r0, [pc, #28]	; (800d958 <tcp_free+0x34>)
 800d93c:	f00b fa08 	bl	8018d50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d940:	6879      	ldr	r1, [r7, #4]
 800d942:	2001      	movs	r0, #1
 800d944:	f7fe fe9e 	bl	800c684 <memp_free>
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	0801b580 	.word	0x0801b580
 800d954:	0801b5b0 	.word	0x0801b5b0
 800d958:	0801b5c4 	.word	0x0801b5c4

0800d95c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	7d1b      	ldrb	r3, [r3, #20]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d105      	bne.n	800d978 <tcp_free_listen+0x1c>
 800d96c:	4b06      	ldr	r3, [pc, #24]	; (800d988 <tcp_free_listen+0x2c>)
 800d96e:	22df      	movs	r2, #223	; 0xdf
 800d970:	4906      	ldr	r1, [pc, #24]	; (800d98c <tcp_free_listen+0x30>)
 800d972:	4807      	ldr	r0, [pc, #28]	; (800d990 <tcp_free_listen+0x34>)
 800d974:	f00b f9ec 	bl	8018d50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d978:	6879      	ldr	r1, [r7, #4]
 800d97a:	2002      	movs	r0, #2
 800d97c:	f7fe fe82 	bl	800c684 <memp_free>
}
 800d980:	bf00      	nop
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	0801b580 	.word	0x0801b580
 800d98c:	0801b5ec 	.word	0x0801b5ec
 800d990:	0801b5c4 	.word	0x0801b5c4

0800d994 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d998:	f001 f85c 	bl	800ea54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d99c:	4b07      	ldr	r3, [pc, #28]	; (800d9bc <tcp_tmr+0x28>)
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	4b05      	ldr	r3, [pc, #20]	; (800d9bc <tcp_tmr+0x28>)
 800d9a6:	701a      	strb	r2, [r3, #0]
 800d9a8:	4b04      	ldr	r3, [pc, #16]	; (800d9bc <tcp_tmr+0x28>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d9b4:	f000 fd0e 	bl	800e3d4 <tcp_slowtmr>
  }
}
 800d9b8:	bf00      	nop
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	20011249 	.word	0x20011249

0800d9c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d105      	bne.n	800d9dc <tcp_remove_listener+0x1c>
 800d9d0:	4b0d      	ldr	r3, [pc, #52]	; (800da08 <tcp_remove_listener+0x48>)
 800d9d2:	22ff      	movs	r2, #255	; 0xff
 800d9d4:	490d      	ldr	r1, [pc, #52]	; (800da0c <tcp_remove_listener+0x4c>)
 800d9d6:	480e      	ldr	r0, [pc, #56]	; (800da10 <tcp_remove_listener+0x50>)
 800d9d8:	f00b f9ba 	bl	8018d50 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	60fb      	str	r3, [r7, #12]
 800d9e0:	e00a      	b.n	800d9f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d102      	bne.n	800d9f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	60fb      	str	r3, [r7, #12]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1f1      	bne.n	800d9e2 <tcp_remove_listener+0x22>
    }
  }
}
 800d9fe:	bf00      	nop
 800da00:	bf00      	nop
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	0801b580 	.word	0x0801b580
 800da0c:	0801b608 	.word	0x0801b608
 800da10:	0801b5c4 	.word	0x0801b5c4

0800da14 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d106      	bne.n	800da30 <tcp_listen_closed+0x1c>
 800da22:	4b14      	ldr	r3, [pc, #80]	; (800da74 <tcp_listen_closed+0x60>)
 800da24:	f240 1211 	movw	r2, #273	; 0x111
 800da28:	4913      	ldr	r1, [pc, #76]	; (800da78 <tcp_listen_closed+0x64>)
 800da2a:	4814      	ldr	r0, [pc, #80]	; (800da7c <tcp_listen_closed+0x68>)
 800da2c:	f00b f990 	bl	8018d50 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	7d1b      	ldrb	r3, [r3, #20]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d006      	beq.n	800da46 <tcp_listen_closed+0x32>
 800da38:	4b0e      	ldr	r3, [pc, #56]	; (800da74 <tcp_listen_closed+0x60>)
 800da3a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800da3e:	4910      	ldr	r1, [pc, #64]	; (800da80 <tcp_listen_closed+0x6c>)
 800da40:	480e      	ldr	r0, [pc, #56]	; (800da7c <tcp_listen_closed+0x68>)
 800da42:	f00b f985 	bl	8018d50 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800da46:	2301      	movs	r3, #1
 800da48:	60fb      	str	r3, [r7, #12]
 800da4a:	e00b      	b.n	800da64 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800da4c:	4a0d      	ldr	r2, [pc, #52]	; (800da84 <tcp_listen_closed+0x70>)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	6879      	ldr	r1, [r7, #4]
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff ffb1 	bl	800d9c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3301      	adds	r3, #1
 800da62:	60fb      	str	r3, [r7, #12]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b03      	cmp	r3, #3
 800da68:	d9f0      	bls.n	800da4c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800da6a:	bf00      	nop
 800da6c:	bf00      	nop
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	0801b580 	.word	0x0801b580
 800da78:	0801b630 	.word	0x0801b630
 800da7c:	0801b5c4 	.word	0x0801b5c4
 800da80:	0801b63c 	.word	0x0801b63c
 800da84:	0801d67c 	.word	0x0801d67c

0800da88 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800da88:	b5b0      	push	{r4, r5, r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af04      	add	r7, sp, #16
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <tcp_close_shutdown+0x20>
 800da9a:	4b63      	ldr	r3, [pc, #396]	; (800dc28 <tcp_close_shutdown+0x1a0>)
 800da9c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800daa0:	4962      	ldr	r1, [pc, #392]	; (800dc2c <tcp_close_shutdown+0x1a4>)
 800daa2:	4863      	ldr	r0, [pc, #396]	; (800dc30 <tcp_close_shutdown+0x1a8>)
 800daa4:	f00b f954 	bl	8018d50 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800daa8:	78fb      	ldrb	r3, [r7, #3]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d066      	beq.n	800db7c <tcp_close_shutdown+0xf4>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7d1b      	ldrb	r3, [r3, #20]
 800dab2:	2b04      	cmp	r3, #4
 800dab4:	d003      	beq.n	800dabe <tcp_close_shutdown+0x36>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	7d1b      	ldrb	r3, [r3, #20]
 800daba:	2b07      	cmp	r3, #7
 800dabc:	d15e      	bne.n	800db7c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d104      	bne.n	800dad0 <tcp_close_shutdown+0x48>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dace:	d055      	beq.n	800db7c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	8b5b      	ldrh	r3, [r3, #26]
 800dad4:	f003 0310 	and.w	r3, r3, #16
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d106      	bne.n	800daea <tcp_close_shutdown+0x62>
 800dadc:	4b52      	ldr	r3, [pc, #328]	; (800dc28 <tcp_close_shutdown+0x1a0>)
 800dade:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800dae2:	4954      	ldr	r1, [pc, #336]	; (800dc34 <tcp_close_shutdown+0x1ac>)
 800dae4:	4852      	ldr	r0, [pc, #328]	; (800dc30 <tcp_close_shutdown+0x1a8>)
 800dae6:	f00b f933 	bl	8018d50 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800daf2:	687d      	ldr	r5, [r7, #4]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	3304      	adds	r3, #4
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	8ad2      	ldrh	r2, [r2, #22]
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	8b09      	ldrh	r1, [r1, #24]
 800db00:	9102      	str	r1, [sp, #8]
 800db02:	9201      	str	r2, [sp, #4]
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	462b      	mov	r3, r5
 800db08:	4622      	mov	r2, r4
 800db0a:	4601      	mov	r1, r0
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f005 fd71 	bl	80135f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f001 fb4e 	bl	800f1b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800db18:	4b47      	ldr	r3, [pc, #284]	; (800dc38 <tcp_close_shutdown+0x1b0>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d105      	bne.n	800db2e <tcp_close_shutdown+0xa6>
 800db22:	4b45      	ldr	r3, [pc, #276]	; (800dc38 <tcp_close_shutdown+0x1b0>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	4a43      	ldr	r2, [pc, #268]	; (800dc38 <tcp_close_shutdown+0x1b0>)
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	e013      	b.n	800db56 <tcp_close_shutdown+0xce>
 800db2e:	4b42      	ldr	r3, [pc, #264]	; (800dc38 <tcp_close_shutdown+0x1b0>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	e00c      	b.n	800db50 <tcp_close_shutdown+0xc8>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d104      	bne.n	800db4a <tcp_close_shutdown+0xc2>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68da      	ldr	r2, [r3, #12]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	60da      	str	r2, [r3, #12]
 800db48:	e005      	b.n	800db56 <tcp_close_shutdown+0xce>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1ef      	bne.n	800db36 <tcp_close_shutdown+0xae>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	60da      	str	r2, [r3, #12]
 800db5c:	4b37      	ldr	r3, [pc, #220]	; (800dc3c <tcp_close_shutdown+0x1b4>)
 800db5e:	2201      	movs	r2, #1
 800db60:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800db62:	4b37      	ldr	r3, [pc, #220]	; (800dc40 <tcp_close_shutdown+0x1b8>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d102      	bne.n	800db72 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800db6c:	f003 ffe6 	bl	8011b3c <tcp_trigger_input_pcb_close>
 800db70:	e002      	b.n	800db78 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7ff fed6 	bl	800d924 <tcp_free>
      }
      return ERR_OK;
 800db78:	2300      	movs	r3, #0
 800db7a:	e050      	b.n	800dc1e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7d1b      	ldrb	r3, [r3, #20]
 800db80:	2b02      	cmp	r3, #2
 800db82:	d03b      	beq.n	800dbfc <tcp_close_shutdown+0x174>
 800db84:	2b02      	cmp	r3, #2
 800db86:	dc44      	bgt.n	800dc12 <tcp_close_shutdown+0x18a>
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d002      	beq.n	800db92 <tcp_close_shutdown+0x10a>
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d02a      	beq.n	800dbe6 <tcp_close_shutdown+0x15e>
 800db90:	e03f      	b.n	800dc12 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8adb      	ldrh	r3, [r3, #22]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d021      	beq.n	800dbde <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db9a:	4b2a      	ldr	r3, [pc, #168]	; (800dc44 <tcp_close_shutdown+0x1bc>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d105      	bne.n	800dbb0 <tcp_close_shutdown+0x128>
 800dba4:	4b27      	ldr	r3, [pc, #156]	; (800dc44 <tcp_close_shutdown+0x1bc>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	4a26      	ldr	r2, [pc, #152]	; (800dc44 <tcp_close_shutdown+0x1bc>)
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	e013      	b.n	800dbd8 <tcp_close_shutdown+0x150>
 800dbb0:	4b24      	ldr	r3, [pc, #144]	; (800dc44 <tcp_close_shutdown+0x1bc>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	60bb      	str	r3, [r7, #8]
 800dbb6:	e00c      	b.n	800dbd2 <tcp_close_shutdown+0x14a>
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d104      	bne.n	800dbcc <tcp_close_shutdown+0x144>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	60da      	str	r2, [r3, #12]
 800dbca:	e005      	b.n	800dbd8 <tcp_close_shutdown+0x150>
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	60bb      	str	r3, [r7, #8]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1ef      	bne.n	800dbb8 <tcp_close_shutdown+0x130>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7ff fea0 	bl	800d924 <tcp_free>
      break;
 800dbe4:	e01a      	b.n	800dc1c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff ff14 	bl	800da14 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	4816      	ldr	r0, [pc, #88]	; (800dc48 <tcp_close_shutdown+0x1c0>)
 800dbf0:	f001 fb30 	bl	800f254 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7ff feb1 	bl	800d95c <tcp_free_listen>
      break;
 800dbfa:	e00f      	b.n	800dc1c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	480e      	ldr	r0, [pc, #56]	; (800dc38 <tcp_close_shutdown+0x1b0>)
 800dc00:	f001 fb28 	bl	800f254 <tcp_pcb_remove>
 800dc04:	4b0d      	ldr	r3, [pc, #52]	; (800dc3c <tcp_close_shutdown+0x1b4>)
 800dc06:	2201      	movs	r2, #1
 800dc08:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7ff fe8a 	bl	800d924 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dc10:	e004      	b.n	800dc1c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f81a 	bl	800dc4c <tcp_close_shutdown_fin>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	e000      	b.n	800dc1e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bdb0      	pop	{r4, r5, r7, pc}
 800dc26:	bf00      	nop
 800dc28:	0801b580 	.word	0x0801b580
 800dc2c:	0801b654 	.word	0x0801b654
 800dc30:	0801b5c4 	.word	0x0801b5c4
 800dc34:	0801b674 	.word	0x0801b674
 800dc38:	20011240 	.word	0x20011240
 800dc3c:	20011248 	.word	0x20011248
 800dc40:	20011280 	.word	0x20011280
 800dc44:	20011238 	.word	0x20011238
 800dc48:	2001123c 	.word	0x2001123c

0800dc4c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d106      	bne.n	800dc68 <tcp_close_shutdown_fin+0x1c>
 800dc5a:	4b2e      	ldr	r3, [pc, #184]	; (800dd14 <tcp_close_shutdown_fin+0xc8>)
 800dc5c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dc60:	492d      	ldr	r1, [pc, #180]	; (800dd18 <tcp_close_shutdown_fin+0xcc>)
 800dc62:	482e      	ldr	r0, [pc, #184]	; (800dd1c <tcp_close_shutdown_fin+0xd0>)
 800dc64:	f00b f874 	bl	8018d50 <iprintf>

  switch (pcb->state) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	7d1b      	ldrb	r3, [r3, #20]
 800dc6c:	2b07      	cmp	r3, #7
 800dc6e:	d020      	beq.n	800dcb2 <tcp_close_shutdown_fin+0x66>
 800dc70:	2b07      	cmp	r3, #7
 800dc72:	dc2b      	bgt.n	800dccc <tcp_close_shutdown_fin+0x80>
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d002      	beq.n	800dc7e <tcp_close_shutdown_fin+0x32>
 800dc78:	2b04      	cmp	r3, #4
 800dc7a:	d00d      	beq.n	800dc98 <tcp_close_shutdown_fin+0x4c>
 800dc7c:	e026      	b.n	800dccc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f004 fdc6 	bl	8012810 <tcp_send_fin>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d11f      	bne.n	800dcd0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2205      	movs	r2, #5
 800dc94:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc96:	e01b      	b.n	800dcd0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f004 fdb9 	bl	8012810 <tcp_send_fin>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d114      	bne.n	800dcd4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2205      	movs	r2, #5
 800dcae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dcb0:	e010      	b.n	800dcd4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f004 fdac 	bl	8012810 <tcp_send_fin>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dcbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d109      	bne.n	800dcd8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2209      	movs	r2, #9
 800dcc8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dcca:	e005      	b.n	800dcd8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	e01c      	b.n	800dd0a <tcp_close_shutdown_fin+0xbe>
      break;
 800dcd0:	bf00      	nop
 800dcd2:	e002      	b.n	800dcda <tcp_close_shutdown_fin+0x8e>
      break;
 800dcd4:	bf00      	nop
 800dcd6:	e000      	b.n	800dcda <tcp_close_shutdown_fin+0x8e>
      break;
 800dcd8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dcda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d103      	bne.n	800dcea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f004 fed2 	bl	8012a8c <tcp_output>
 800dce8:	e00d      	b.n	800dd06 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dcea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcf2:	d108      	bne.n	800dd06 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	8b5b      	ldrh	r3, [r3, #26]
 800dcf8:	f043 0308 	orr.w	r3, r3, #8
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e001      	b.n	800dd0a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dd06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	0801b580 	.word	0x0801b580
 800dd18:	0801b630 	.word	0x0801b630
 800dd1c:	0801b5c4 	.word	0x0801b5c4

0800dd20 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d109      	bne.n	800dd42 <tcp_close+0x22>
 800dd2e:	4b0f      	ldr	r3, [pc, #60]	; (800dd6c <tcp_close+0x4c>)
 800dd30:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dd34:	490e      	ldr	r1, [pc, #56]	; (800dd70 <tcp_close+0x50>)
 800dd36:	480f      	ldr	r0, [pc, #60]	; (800dd74 <tcp_close+0x54>)
 800dd38:	f00b f80a 	bl	8018d50 <iprintf>
 800dd3c:	f06f 030f 	mvn.w	r3, #15
 800dd40:	e00f      	b.n	800dd62 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7d1b      	ldrb	r3, [r3, #20]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d006      	beq.n	800dd58 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	8b5b      	ldrh	r3, [r3, #26]
 800dd4e:	f043 0310 	orr.w	r3, r3, #16
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dd58:	2101      	movs	r1, #1
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7ff fe94 	bl	800da88 <tcp_close_shutdown>
 800dd60:	4603      	mov	r3, r0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	0801b580 	.word	0x0801b580
 800dd70:	0801b690 	.word	0x0801b690
 800dd74:	0801b5c4 	.word	0x0801b5c4

0800dd78 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d109      	bne.n	800dd9e <tcp_shutdown+0x26>
 800dd8a:	4b26      	ldr	r3, [pc, #152]	; (800de24 <tcp_shutdown+0xac>)
 800dd8c:	f240 2207 	movw	r2, #519	; 0x207
 800dd90:	4925      	ldr	r1, [pc, #148]	; (800de28 <tcp_shutdown+0xb0>)
 800dd92:	4826      	ldr	r0, [pc, #152]	; (800de2c <tcp_shutdown+0xb4>)
 800dd94:	f00a ffdc 	bl	8018d50 <iprintf>
 800dd98:	f06f 030f 	mvn.w	r3, #15
 800dd9c:	e03d      	b.n	800de1a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	7d1b      	ldrb	r3, [r3, #20]
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d102      	bne.n	800ddac <tcp_shutdown+0x34>
    return ERR_CONN;
 800dda6:	f06f 030a 	mvn.w	r3, #10
 800ddaa:	e036      	b.n	800de1a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d01b      	beq.n	800ddea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	8b5b      	ldrh	r3, [r3, #26]
 800ddb6:	f043 0310 	orr.w	r3, r3, #16
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d005      	beq.n	800ddd2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ddc6:	2101      	movs	r1, #1
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff fe5d 	bl	800da88 <tcp_close_shutdown>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	e023      	b.n	800de1a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d007      	beq.n	800ddea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7ff faf4 	bl	800d3cc <pbuf_free>
      pcb->refused_data = NULL;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2200      	movs	r2, #0
 800dde8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d013      	beq.n	800de18 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	7d1b      	ldrb	r3, [r3, #20]
 800ddf4:	2b04      	cmp	r3, #4
 800ddf6:	dc02      	bgt.n	800ddfe <tcp_shutdown+0x86>
 800ddf8:	2b03      	cmp	r3, #3
 800ddfa:	da02      	bge.n	800de02 <tcp_shutdown+0x8a>
 800ddfc:	e009      	b.n	800de12 <tcp_shutdown+0x9a>
 800ddfe:	2b07      	cmp	r3, #7
 800de00:	d107      	bne.n	800de12 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	b2db      	uxtb	r3, r3
 800de06:	4619      	mov	r1, r3
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f7ff fe3d 	bl	800da88 <tcp_close_shutdown>
 800de0e:	4603      	mov	r3, r0
 800de10:	e003      	b.n	800de1a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800de12:	f06f 030a 	mvn.w	r3, #10
 800de16:	e000      	b.n	800de1a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	0801b580 	.word	0x0801b580
 800de28:	0801b6a8 	.word	0x0801b6a8
 800de2c:	0801b5c4 	.word	0x0801b5c4

0800de30 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b08e      	sub	sp, #56	; 0x38
 800de34:	af04      	add	r7, sp, #16
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d107      	bne.n	800de50 <tcp_abandon+0x20>
 800de40:	4b52      	ldr	r3, [pc, #328]	; (800df8c <tcp_abandon+0x15c>)
 800de42:	f240 223d 	movw	r2, #573	; 0x23d
 800de46:	4952      	ldr	r1, [pc, #328]	; (800df90 <tcp_abandon+0x160>)
 800de48:	4852      	ldr	r0, [pc, #328]	; (800df94 <tcp_abandon+0x164>)
 800de4a:	f00a ff81 	bl	8018d50 <iprintf>
 800de4e:	e099      	b.n	800df84 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	7d1b      	ldrb	r3, [r3, #20]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d106      	bne.n	800de66 <tcp_abandon+0x36>
 800de58:	4b4c      	ldr	r3, [pc, #304]	; (800df8c <tcp_abandon+0x15c>)
 800de5a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800de5e:	494e      	ldr	r1, [pc, #312]	; (800df98 <tcp_abandon+0x168>)
 800de60:	484c      	ldr	r0, [pc, #304]	; (800df94 <tcp_abandon+0x164>)
 800de62:	f00a ff75 	bl	8018d50 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	7d1b      	ldrb	r3, [r3, #20]
 800de6a:	2b0a      	cmp	r3, #10
 800de6c:	d107      	bne.n	800de7e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	484a      	ldr	r0, [pc, #296]	; (800df9c <tcp_abandon+0x16c>)
 800de72:	f001 f9ef 	bl	800f254 <tcp_pcb_remove>
    tcp_free(pcb);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7ff fd54 	bl	800d924 <tcp_free>
 800de7c:	e082      	b.n	800df84 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de8a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de98:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	7d1b      	ldrb	r3, [r3, #20]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d126      	bne.n	800def6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	8adb      	ldrh	r3, [r3, #22]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d02e      	beq.n	800df0e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800deb0:	4b3b      	ldr	r3, [pc, #236]	; (800dfa0 <tcp_abandon+0x170>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d105      	bne.n	800dec6 <tcp_abandon+0x96>
 800deba:	4b39      	ldr	r3, [pc, #228]	; (800dfa0 <tcp_abandon+0x170>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	4a37      	ldr	r2, [pc, #220]	; (800dfa0 <tcp_abandon+0x170>)
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	e013      	b.n	800deee <tcp_abandon+0xbe>
 800dec6:	4b36      	ldr	r3, [pc, #216]	; (800dfa0 <tcp_abandon+0x170>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	61fb      	str	r3, [r7, #28]
 800decc:	e00c      	b.n	800dee8 <tcp_abandon+0xb8>
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d104      	bne.n	800dee2 <tcp_abandon+0xb2>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68da      	ldr	r2, [r3, #12]
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	60da      	str	r2, [r3, #12]
 800dee0:	e005      	b.n	800deee <tcp_abandon+0xbe>
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	61fb      	str	r3, [r7, #28]
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1ef      	bne.n	800dece <tcp_abandon+0x9e>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	60da      	str	r2, [r3, #12]
 800def4:	e00b      	b.n	800df0e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	8adb      	ldrh	r3, [r3, #22]
 800defe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	4828      	ldr	r0, [pc, #160]	; (800dfa4 <tcp_abandon+0x174>)
 800df04:	f001 f9a6 	bl	800f254 <tcp_pcb_remove>
 800df08:	4b27      	ldr	r3, [pc, #156]	; (800dfa8 <tcp_abandon+0x178>)
 800df0a:	2201      	movs	r2, #1
 800df0c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df12:	2b00      	cmp	r3, #0
 800df14:	d004      	beq.n	800df20 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 fe7a 	bl	800ec14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 fe71 	bl	800ec14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df36:	2b00      	cmp	r3, #0
 800df38:	d004      	beq.n	800df44 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 fe68 	bl	800ec14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00e      	beq.n	800df68 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800df4a:	6879      	ldr	r1, [r7, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	3304      	adds	r3, #4
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	8b12      	ldrh	r2, [r2, #24]
 800df54:	9202      	str	r2, [sp, #8]
 800df56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df58:	9201      	str	r2, [sp, #4]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	460b      	mov	r3, r1
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	69b9      	ldr	r1, [r7, #24]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f005 fb46 	bl	80135f4 <tcp_rst>
    }
    last_state = pcb->state;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	7d1b      	ldrb	r3, [r3, #20]
 800df6c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7ff fcd8 	bl	800d924 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d004      	beq.n	800df84 <tcp_abandon+0x154>
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	f06f 010c 	mvn.w	r1, #12
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	4798      	blx	r3
  }
}
 800df84:	3728      	adds	r7, #40	; 0x28
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	0801b580 	.word	0x0801b580
 800df90:	0801b6c4 	.word	0x0801b6c4
 800df94:	0801b5c4 	.word	0x0801b5c4
 800df98:	0801b6e0 	.word	0x0801b6e0
 800df9c:	20011244 	.word	0x20011244
 800dfa0:	20011238 	.word	0x20011238
 800dfa4:	20011240 	.word	0x20011240
 800dfa8:	20011248 	.word	0x20011248

0800dfac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7ff ff3a 	bl	800de30 <tcp_abandon>
}
 800dfbc:	bf00      	nop
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d106      	bne.n	800dfe0 <tcp_update_rcv_ann_wnd+0x1c>
 800dfd2:	4b25      	ldr	r3, [pc, #148]	; (800e068 <tcp_update_rcv_ann_wnd+0xa4>)
 800dfd4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dfd8:	4924      	ldr	r1, [pc, #144]	; (800e06c <tcp_update_rcv_ann_wnd+0xa8>)
 800dfda:	4825      	ldr	r0, [pc, #148]	; (800e070 <tcp_update_rcv_ann_wnd+0xac>)
 800dfdc:	f00a feb8 	bl	8018d50 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dfe8:	4413      	add	r3, r2
 800dfea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dff4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dff8:	bf28      	it	cs
 800dffa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dffe:	b292      	uxth	r2, r2
 800e000:	4413      	add	r3, r2
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	2b00      	cmp	r3, #0
 800e008:	db08      	blt.n	800e01c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	e020      	b.n	800e05e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	dd03      	ble.n	800e032 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e030:	e014      	b.n	800e05c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e044:	d306      	bcc.n	800e054 <tcp_update_rcv_ann_wnd+0x90>
 800e046:	4b08      	ldr	r3, [pc, #32]	; (800e068 <tcp_update_rcv_ann_wnd+0xa4>)
 800e048:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e04c:	4909      	ldr	r1, [pc, #36]	; (800e074 <tcp_update_rcv_ann_wnd+0xb0>)
 800e04e:	4808      	ldr	r0, [pc, #32]	; (800e070 <tcp_update_rcv_ann_wnd+0xac>)
 800e050:	f00a fe7e 	bl	8018d50 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	b29a      	uxth	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e05c:	2300      	movs	r3, #0
  }
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3710      	adds	r7, #16
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	0801b580 	.word	0x0801b580
 800e06c:	0801b7dc 	.word	0x0801b7dc
 800e070:	0801b5c4 	.word	0x0801b5c4
 800e074:	0801b800 	.word	0x0801b800

0800e078 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	460b      	mov	r3, r1
 800e082:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d107      	bne.n	800e09a <tcp_recved+0x22>
 800e08a:	4b1f      	ldr	r3, [pc, #124]	; (800e108 <tcp_recved+0x90>)
 800e08c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e090:	491e      	ldr	r1, [pc, #120]	; (800e10c <tcp_recved+0x94>)
 800e092:	481f      	ldr	r0, [pc, #124]	; (800e110 <tcp_recved+0x98>)
 800e094:	f00a fe5c 	bl	8018d50 <iprintf>
 800e098:	e032      	b.n	800e100 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	7d1b      	ldrb	r3, [r3, #20]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d106      	bne.n	800e0b0 <tcp_recved+0x38>
 800e0a2:	4b19      	ldr	r3, [pc, #100]	; (800e108 <tcp_recved+0x90>)
 800e0a4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e0a8:	491a      	ldr	r1, [pc, #104]	; (800e114 <tcp_recved+0x9c>)
 800e0aa:	4819      	ldr	r0, [pc, #100]	; (800e110 <tcp_recved+0x98>)
 800e0ac:	f00a fe50 	bl	8018d50 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0b4:	887b      	ldrh	r3, [r7, #2]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e0ba:	89fb      	ldrh	r3, [r7, #14]
 800e0bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0c0:	d804      	bhi.n	800e0cc <tcp_recved+0x54>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0c6:	89fa      	ldrh	r2, [r7, #14]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d204      	bcs.n	800e0d6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0d2:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0d4:	e002      	b.n	800e0dc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	89fa      	ldrh	r2, [r7, #14]
 800e0da:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7ff ff71 	bl	800dfc4 <tcp_update_rcv_ann_wnd>
 800e0e2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0ea:	d309      	bcc.n	800e100 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	8b5b      	ldrh	r3, [r3, #26]
 800e0f0:	f043 0302 	orr.w	r3, r3, #2
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f004 fcc6 	bl	8012a8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	0801b580 	.word	0x0801b580
 800e10c:	0801b81c 	.word	0x0801b81c
 800e110:	0801b5c4 	.word	0x0801b5c4
 800e114:	0801b834 	.word	0x0801b834

0800e118 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e122:	4b1e      	ldr	r3, [pc, #120]	; (800e19c <tcp_new_port+0x84>)
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	3301      	adds	r3, #1
 800e128:	b29a      	uxth	r2, r3
 800e12a:	4b1c      	ldr	r3, [pc, #112]	; (800e19c <tcp_new_port+0x84>)
 800e12c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e12e:	4b1b      	ldr	r3, [pc, #108]	; (800e19c <tcp_new_port+0x84>)
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e136:	4293      	cmp	r3, r2
 800e138:	d103      	bne.n	800e142 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e13a:	4b18      	ldr	r3, [pc, #96]	; (800e19c <tcp_new_port+0x84>)
 800e13c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e140:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e142:	2300      	movs	r3, #0
 800e144:	71fb      	strb	r3, [r7, #7]
 800e146:	e01e      	b.n	800e186 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e148:	79fb      	ldrb	r3, [r7, #7]
 800e14a:	4a15      	ldr	r2, [pc, #84]	; (800e1a0 <tcp_new_port+0x88>)
 800e14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	603b      	str	r3, [r7, #0]
 800e154:	e011      	b.n	800e17a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	8ada      	ldrh	r2, [r3, #22]
 800e15a:	4b10      	ldr	r3, [pc, #64]	; (800e19c <tcp_new_port+0x84>)
 800e15c:	881b      	ldrh	r3, [r3, #0]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d108      	bne.n	800e174 <tcp_new_port+0x5c>
        n++;
 800e162:	88bb      	ldrh	r3, [r7, #4]
 800e164:	3301      	adds	r3, #1
 800e166:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e168:	88bb      	ldrh	r3, [r7, #4]
 800e16a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e16e:	d3d8      	bcc.n	800e122 <tcp_new_port+0xa>
          return 0;
 800e170:	2300      	movs	r3, #0
 800e172:	e00d      	b.n	800e190 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	603b      	str	r3, [r7, #0]
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d1ea      	bne.n	800e156 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e180:	79fb      	ldrb	r3, [r7, #7]
 800e182:	3301      	adds	r3, #1
 800e184:	71fb      	strb	r3, [r7, #7]
 800e186:	79fb      	ldrb	r3, [r7, #7]
 800e188:	2b03      	cmp	r3, #3
 800e18a:	d9dd      	bls.n	800e148 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e18c:	4b03      	ldr	r3, [pc, #12]	; (800e19c <tcp_new_port+0x84>)
 800e18e:	881b      	ldrh	r3, [r3, #0]
}
 800e190:	4618      	mov	r0, r3
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr
 800e19c:	20000024 	.word	0x20000024
 800e1a0:	0801d67c 	.word	0x0801d67c

0800e1a4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08a      	sub	sp, #40	; 0x28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d109      	bne.n	800e1d2 <tcp_connect+0x2e>
 800e1be:	4b7d      	ldr	r3, [pc, #500]	; (800e3b4 <tcp_connect+0x210>)
 800e1c0:	f240 4235 	movw	r2, #1077	; 0x435
 800e1c4:	497c      	ldr	r1, [pc, #496]	; (800e3b8 <tcp_connect+0x214>)
 800e1c6:	487d      	ldr	r0, [pc, #500]	; (800e3bc <tcp_connect+0x218>)
 800e1c8:	f00a fdc2 	bl	8018d50 <iprintf>
 800e1cc:	f06f 030f 	mvn.w	r3, #15
 800e1d0:	e0ec      	b.n	800e3ac <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d109      	bne.n	800e1ec <tcp_connect+0x48>
 800e1d8:	4b76      	ldr	r3, [pc, #472]	; (800e3b4 <tcp_connect+0x210>)
 800e1da:	f240 4236 	movw	r2, #1078	; 0x436
 800e1de:	4978      	ldr	r1, [pc, #480]	; (800e3c0 <tcp_connect+0x21c>)
 800e1e0:	4876      	ldr	r0, [pc, #472]	; (800e3bc <tcp_connect+0x218>)
 800e1e2:	f00a fdb5 	bl	8018d50 <iprintf>
 800e1e6:	f06f 030f 	mvn.w	r3, #15
 800e1ea:	e0df      	b.n	800e3ac <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	7d1b      	ldrb	r3, [r3, #20]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d009      	beq.n	800e208 <tcp_connect+0x64>
 800e1f4:	4b6f      	ldr	r3, [pc, #444]	; (800e3b4 <tcp_connect+0x210>)
 800e1f6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e1fa:	4972      	ldr	r1, [pc, #456]	; (800e3c4 <tcp_connect+0x220>)
 800e1fc:	486f      	ldr	r0, [pc, #444]	; (800e3bc <tcp_connect+0x218>)
 800e1fe:	f00a fda7 	bl	8018d50 <iprintf>
 800e202:	f06f 0309 	mvn.w	r3, #9
 800e206:	e0d1      	b.n	800e3ac <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d002      	beq.n	800e214 <tcp_connect+0x70>
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	e000      	b.n	800e216 <tcp_connect+0x72>
 800e214:	2300      	movs	r3, #0
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	88fa      	ldrh	r2, [r7, #6]
 800e21e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	7a1b      	ldrb	r3, [r3, #8]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d006      	beq.n	800e236 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	7a1b      	ldrb	r3, [r3, #8]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fd3f 	bl	800ccb0 <netif_get_by_index>
 800e232:	6278      	str	r0, [r7, #36]	; 0x24
 800e234:	e005      	b.n	800e242 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f007 f95e 	bl	80154fc <ip4_route>
 800e240:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e248:	f06f 0303 	mvn.w	r3, #3
 800e24c:	e0ae      	b.n	800e3ac <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d003      	beq.n	800e25c <tcp_connect+0xb8>
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d111      	bne.n	800e280 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <tcp_connect+0xc4>
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	3304      	adds	r3, #4
 800e266:	e000      	b.n	800e26a <tcp_connect+0xc6>
 800e268:	2300      	movs	r3, #0
 800e26a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d102      	bne.n	800e278 <tcp_connect+0xd4>
      return ERR_RTE;
 800e272:	f06f 0303 	mvn.w	r3, #3
 800e276:	e099      	b.n	800e3ac <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	8adb      	ldrh	r3, [r3, #22]
 800e284:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	8adb      	ldrh	r3, [r3, #22]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10c      	bne.n	800e2a8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e28e:	f7ff ff43 	bl	800e118 <tcp_new_port>
 800e292:	4603      	mov	r3, r0
 800e294:	461a      	mov	r2, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	8adb      	ldrh	r3, [r3, #22]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d102      	bne.n	800e2a8 <tcp_connect+0x104>
      return ERR_BUF;
 800e2a2:	f06f 0301 	mvn.w	r3, #1
 800e2a6:	e081      	b.n	800e3ac <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f001 f867 	bl	800f37c <tcp_next_iss>
 800e2ae:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	697a      	ldr	r2, [r7, #20]
 800e2ba:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	1e5a      	subs	r2, r3, #1
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	1e5a      	subs	r2, r3, #1
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	1e5a      	subs	r2, r3, #1
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e2fc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3304      	adds	r3, #4
 800e306:	461a      	mov	r2, r3
 800e308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e30a:	f001 f85d 	bl	800f3c8 <tcp_eff_send_mss_netif>
 800e30e:	4603      	mov	r3, r0
 800e310:	461a      	mov	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	683a      	ldr	r2, [r7, #0]
 800e322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e326:	2102      	movs	r1, #2
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f004 fac1 	bl	80128b0 <tcp_enqueue_flags>
 800e32e:	4603      	mov	r3, r0
 800e330:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e332:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d136      	bne.n	800e3a8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2202      	movs	r2, #2
 800e33e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e340:	8b7b      	ldrh	r3, [r7, #26]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d021      	beq.n	800e38a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e346:	4b20      	ldr	r3, [pc, #128]	; (800e3c8 <tcp_connect+0x224>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d105      	bne.n	800e35c <tcp_connect+0x1b8>
 800e350:	4b1d      	ldr	r3, [pc, #116]	; (800e3c8 <tcp_connect+0x224>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	4a1c      	ldr	r2, [pc, #112]	; (800e3c8 <tcp_connect+0x224>)
 800e358:	6013      	str	r3, [r2, #0]
 800e35a:	e013      	b.n	800e384 <tcp_connect+0x1e0>
 800e35c:	4b1a      	ldr	r3, [pc, #104]	; (800e3c8 <tcp_connect+0x224>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	623b      	str	r3, [r7, #32]
 800e362:	e00c      	b.n	800e37e <tcp_connect+0x1da>
 800e364:	6a3b      	ldr	r3, [r7, #32]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d104      	bne.n	800e378 <tcp_connect+0x1d4>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	68da      	ldr	r2, [r3, #12]
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	60da      	str	r2, [r3, #12]
 800e376:	e005      	b.n	800e384 <tcp_connect+0x1e0>
 800e378:	6a3b      	ldr	r3, [r7, #32]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	623b      	str	r3, [r7, #32]
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1ef      	bne.n	800e364 <tcp_connect+0x1c0>
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e38a:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <tcp_connect+0x228>)
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	60da      	str	r2, [r3, #12]
 800e392:	4a0e      	ldr	r2, [pc, #56]	; (800e3cc <tcp_connect+0x228>)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	f005 faee 	bl	8013978 <tcp_timer_needed>
 800e39c:	4b0c      	ldr	r3, [pc, #48]	; (800e3d0 <tcp_connect+0x22c>)
 800e39e:	2201      	movs	r2, #1
 800e3a0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f004 fb72 	bl	8012a8c <tcp_output>
  }
  return ret;
 800e3a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3728      	adds	r7, #40	; 0x28
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	0801b580 	.word	0x0801b580
 800e3b8:	0801b85c 	.word	0x0801b85c
 800e3bc:	0801b5c4 	.word	0x0801b5c4
 800e3c0:	0801b878 	.word	0x0801b878
 800e3c4:	0801b894 	.word	0x0801b894
 800e3c8:	20011238 	.word	0x20011238
 800e3cc:	20011240 	.word	0x20011240
 800e3d0:	20011248 	.word	0x20011248

0800e3d4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e3d4:	b5b0      	push	{r4, r5, r7, lr}
 800e3d6:	b090      	sub	sp, #64	; 0x40
 800e3d8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e3e0:	4b94      	ldr	r3, [pc, #592]	; (800e634 <tcp_slowtmr+0x260>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	4a93      	ldr	r2, [pc, #588]	; (800e634 <tcp_slowtmr+0x260>)
 800e3e8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e3ea:	4b93      	ldr	r3, [pc, #588]	; (800e638 <tcp_slowtmr+0x264>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	4b91      	ldr	r3, [pc, #580]	; (800e638 <tcp_slowtmr+0x264>)
 800e3f4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e3fa:	4b90      	ldr	r3, [pc, #576]	; (800e63c <tcp_slowtmr+0x268>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e400:	e29d      	b.n	800e93e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e404:	7d1b      	ldrb	r3, [r3, #20]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d106      	bne.n	800e418 <tcp_slowtmr+0x44>
 800e40a:	4b8d      	ldr	r3, [pc, #564]	; (800e640 <tcp_slowtmr+0x26c>)
 800e40c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e410:	498c      	ldr	r1, [pc, #560]	; (800e644 <tcp_slowtmr+0x270>)
 800e412:	488d      	ldr	r0, [pc, #564]	; (800e648 <tcp_slowtmr+0x274>)
 800e414:	f00a fc9c 	bl	8018d50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41a:	7d1b      	ldrb	r3, [r3, #20]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d106      	bne.n	800e42e <tcp_slowtmr+0x5a>
 800e420:	4b87      	ldr	r3, [pc, #540]	; (800e640 <tcp_slowtmr+0x26c>)
 800e422:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e426:	4989      	ldr	r1, [pc, #548]	; (800e64c <tcp_slowtmr+0x278>)
 800e428:	4887      	ldr	r0, [pc, #540]	; (800e648 <tcp_slowtmr+0x274>)
 800e42a:	f00a fc91 	bl	8018d50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e430:	7d1b      	ldrb	r3, [r3, #20]
 800e432:	2b0a      	cmp	r3, #10
 800e434:	d106      	bne.n	800e444 <tcp_slowtmr+0x70>
 800e436:	4b82      	ldr	r3, [pc, #520]	; (800e640 <tcp_slowtmr+0x26c>)
 800e438:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e43c:	4984      	ldr	r1, [pc, #528]	; (800e650 <tcp_slowtmr+0x27c>)
 800e43e:	4882      	ldr	r0, [pc, #520]	; (800e648 <tcp_slowtmr+0x274>)
 800e440:	f00a fc86 	bl	8018d50 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	7f9a      	ldrb	r2, [r3, #30]
 800e448:	4b7b      	ldr	r3, [pc, #492]	; (800e638 <tcp_slowtmr+0x264>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d105      	bne.n	800e45c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e45a:	e270      	b.n	800e93e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e45c:	4b76      	ldr	r3, [pc, #472]	; (800e638 <tcp_slowtmr+0x264>)
 800e45e:	781a      	ldrb	r2, [r3, #0]
 800e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e462:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e472:	7d1b      	ldrb	r3, [r3, #20]
 800e474:	2b02      	cmp	r3, #2
 800e476:	d10a      	bne.n	800e48e <tcp_slowtmr+0xba>
 800e478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e47e:	2b05      	cmp	r3, #5
 800e480:	d905      	bls.n	800e48e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e486:	3301      	adds	r3, #1
 800e488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e48c:	e11e      	b.n	800e6cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e494:	2b0b      	cmp	r3, #11
 800e496:	d905      	bls.n	800e4a4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e49c:	3301      	adds	r3, #1
 800e49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4a2:	e113      	b.n	800e6cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d075      	beq.n	800e59a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d006      	beq.n	800e4c4 <tcp_slowtmr+0xf0>
 800e4b6:	4b62      	ldr	r3, [pc, #392]	; (800e640 <tcp_slowtmr+0x26c>)
 800e4b8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e4bc:	4965      	ldr	r1, [pc, #404]	; (800e654 <tcp_slowtmr+0x280>)
 800e4be:	4862      	ldr	r0, [pc, #392]	; (800e648 <tcp_slowtmr+0x274>)
 800e4c0:	f00a fc46 	bl	8018d50 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d106      	bne.n	800e4da <tcp_slowtmr+0x106>
 800e4cc:	4b5c      	ldr	r3, [pc, #368]	; (800e640 <tcp_slowtmr+0x26c>)
 800e4ce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e4d2:	4961      	ldr	r1, [pc, #388]	; (800e658 <tcp_slowtmr+0x284>)
 800e4d4:	485c      	ldr	r0, [pc, #368]	; (800e648 <tcp_slowtmr+0x274>)
 800e4d6:	f00a fc3b 	bl	8018d50 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e4e0:	2b0b      	cmp	r3, #11
 800e4e2:	d905      	bls.n	800e4f0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4ee:	e0ed      	b.n	800e6cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	4a58      	ldr	r2, [pc, #352]	; (800e65c <tcp_slowtmr+0x288>)
 800e4fa:	5cd3      	ldrb	r3, [r2, r3]
 800e4fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e504:	7c7a      	ldrb	r2, [r7, #17]
 800e506:	429a      	cmp	r2, r3
 800e508:	d907      	bls.n	800e51a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e510:	3301      	adds	r3, #1
 800e512:	b2da      	uxtb	r2, r3
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e520:	7c7a      	ldrb	r2, [r7, #17]
 800e522:	429a      	cmp	r2, r3
 800e524:	f200 80d2 	bhi.w	800e6cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e528:	2301      	movs	r3, #1
 800e52a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e532:	2b00      	cmp	r3, #0
 800e534:	d108      	bne.n	800e548 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e538:	f005 f950 	bl	80137dc <tcp_zero_window_probe>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d014      	beq.n	800e56c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e542:	2300      	movs	r3, #0
 800e544:	623b      	str	r3, [r7, #32]
 800e546:	e011      	b.n	800e56c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e54e:	4619      	mov	r1, r3
 800e550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e552:	f004 f815 	bl	8012580 <tcp_split_unsent_seg>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d107      	bne.n	800e56c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e55c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e55e:	f004 fa95 	bl	8012a8c <tcp_output>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d101      	bne.n	800e56c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e568:	2300      	movs	r3, #0
 800e56a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e56c:	6a3b      	ldr	r3, [r7, #32]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 80ac 	beq.w	800e6cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e576:	2200      	movs	r2, #0
 800e578:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e582:	2b06      	cmp	r3, #6
 800e584:	f200 80a2 	bhi.w	800e6cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e58e:	3301      	adds	r3, #1
 800e590:	b2da      	uxtb	r2, r3
 800e592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e594:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e598:	e098      	b.n	800e6cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	db0f      	blt.n	800e5c4 <tcp_slowtmr+0x1f0>
 800e5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d008      	beq.n	800e5c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	b21a      	sxth	r2, r3
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	db7b      	blt.n	800e6cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e5d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5d6:	f004 fd4b 	bl	8013070 <tcp_rexmit_rto_prepare>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d007      	beq.n	800e5f0 <tcp_slowtmr+0x21c>
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d171      	bne.n	800e6cc <tcp_slowtmr+0x2f8>
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d06d      	beq.n	800e6cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	7d1b      	ldrb	r3, [r3, #20]
 800e5f4:	2b02      	cmp	r3, #2
 800e5f6:	d03a      	beq.n	800e66e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5fe:	2b0c      	cmp	r3, #12
 800e600:	bf28      	it	cs
 800e602:	230c      	movcs	r3, #12
 800e604:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e608:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e60c:	10db      	asrs	r3, r3, #3
 800e60e:	b21b      	sxth	r3, r3
 800e610:	461a      	mov	r2, r3
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e618:	4413      	add	r3, r2
 800e61a:	7efa      	ldrb	r2, [r7, #27]
 800e61c:	4910      	ldr	r1, [pc, #64]	; (800e660 <tcp_slowtmr+0x28c>)
 800e61e:	5c8a      	ldrb	r2, [r1, r2]
 800e620:	4093      	lsls	r3, r2
 800e622:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e62a:	4293      	cmp	r3, r2
 800e62c:	dc1a      	bgt.n	800e664 <tcp_slowtmr+0x290>
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	b21a      	sxth	r2, r3
 800e632:	e019      	b.n	800e668 <tcp_slowtmr+0x294>
 800e634:	20011234 	.word	0x20011234
 800e638:	2001124a 	.word	0x2001124a
 800e63c:	20011240 	.word	0x20011240
 800e640:	0801b580 	.word	0x0801b580
 800e644:	0801b8c4 	.word	0x0801b8c4
 800e648:	0801b5c4 	.word	0x0801b5c4
 800e64c:	0801b8f0 	.word	0x0801b8f0
 800e650:	0801b91c 	.word	0x0801b91c
 800e654:	0801b94c 	.word	0x0801b94c
 800e658:	0801b980 	.word	0x0801b980
 800e65c:	0801d674 	.word	0x0801d674
 800e660:	0801d664 	.word	0x0801d664
 800e664:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	2200      	movs	r2, #0
 800e672:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e680:	4293      	cmp	r3, r2
 800e682:	bf28      	it	cs
 800e684:	4613      	movcs	r3, r2
 800e686:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e688:	8a7b      	ldrh	r3, [r7, #18]
 800e68a:	085b      	lsrs	r3, r3, #1
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e69e:	005b      	lsls	r3, r3, #1
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d206      	bcs.n	800e6b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e6c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6c8:	f004 fd42 	bl	8013150 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	7d1b      	ldrb	r3, [r3, #20]
 800e6d0:	2b06      	cmp	r3, #6
 800e6d2:	d111      	bne.n	800e6f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	8b5b      	ldrh	r3, [r3, #26]
 800e6d8:	f003 0310 	and.w	r3, r3, #16
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00b      	beq.n	800e6f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6e0:	4b9c      	ldr	r3, [pc, #624]	; (800e954 <tcp_slowtmr+0x580>)
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	6a1b      	ldr	r3, [r3, #32]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	2b28      	cmp	r3, #40	; 0x28
 800e6ec:	d904      	bls.n	800e6f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	7a5b      	ldrb	r3, [r3, #9]
 800e6fc:	f003 0308 	and.w	r3, r3, #8
 800e700:	2b00      	cmp	r3, #0
 800e702:	d04a      	beq.n	800e79a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e708:	2b04      	cmp	r3, #4
 800e70a:	d003      	beq.n	800e714 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e710:	2b07      	cmp	r3, #7
 800e712:	d142      	bne.n	800e79a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e714:	4b8f      	ldr	r3, [pc, #572]	; (800e954 <tcp_slowtmr+0x580>)
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71a:	6a1b      	ldr	r3, [r3, #32]
 800e71c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e724:	4b8c      	ldr	r3, [pc, #560]	; (800e958 <tcp_slowtmr+0x584>)
 800e726:	440b      	add	r3, r1
 800e728:	498c      	ldr	r1, [pc, #560]	; (800e95c <tcp_slowtmr+0x588>)
 800e72a:	fba1 1303 	umull	r1, r3, r1, r3
 800e72e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e730:	429a      	cmp	r2, r3
 800e732:	d90a      	bls.n	800e74a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e738:	3301      	adds	r3, #1
 800e73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e73e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e742:	3301      	adds	r3, #1
 800e744:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e748:	e027      	b.n	800e79a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e74a:	4b82      	ldr	r3, [pc, #520]	; (800e954 <tcp_slowtmr+0x580>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	6a1b      	ldr	r3, [r3, #32]
 800e752:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e756:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e760:	4618      	mov	r0, r3
 800e762:	4b7f      	ldr	r3, [pc, #508]	; (800e960 <tcp_slowtmr+0x58c>)
 800e764:	fb00 f303 	mul.w	r3, r0, r3
 800e768:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e76a:	497c      	ldr	r1, [pc, #496]	; (800e95c <tcp_slowtmr+0x588>)
 800e76c:	fba1 1303 	umull	r1, r3, r1, r3
 800e770:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e772:	429a      	cmp	r2, r3
 800e774:	d911      	bls.n	800e79a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e778:	f004 fff0 	bl	801375c <tcp_keepalive>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e782:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e786:	2b00      	cmp	r3, #0
 800e788:	d107      	bne.n	800e79a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e790:	3301      	adds	r3, #1
 800e792:	b2da      	uxtb	r2, r3
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d011      	beq.n	800e7c6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e7a2:	4b6c      	ldr	r3, [pc, #432]	; (800e954 <tcp_slowtmr+0x580>)
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	1ad2      	subs	r2, r2, r3
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	440b      	add	r3, r1
 800e7ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d302      	bcc.n	800e7c6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e7c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7c2:	f000 feab 	bl	800f51c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ca:	2b03      	cmp	r3, #3
 800e7cc:	d10b      	bne.n	800e7e6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ce:	4b61      	ldr	r3, [pc, #388]	; (800e954 <tcp_slowtmr+0x580>)
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	1ad3      	subs	r3, r2, r3
 800e7d8:	2b28      	cmp	r3, #40	; 0x28
 800e7da:	d904      	bls.n	800e7e6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ea:	2b09      	cmp	r3, #9
 800e7ec:	d10b      	bne.n	800e806 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7ee:	4b59      	ldr	r3, [pc, #356]	; (800e954 <tcp_slowtmr+0x580>)
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	2bf0      	cmp	r3, #240	; 0xf0
 800e7fa:	d904      	bls.n	800e806 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e800:	3301      	adds	r3, #1
 800e802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d060      	beq.n	800e8d0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e814:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e818:	f000 fccc 	bl	800f1b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d010      	beq.n	800e844 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e822:	4b50      	ldr	r3, [pc, #320]	; (800e964 <tcp_slowtmr+0x590>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e828:	429a      	cmp	r2, r3
 800e82a:	d106      	bne.n	800e83a <tcp_slowtmr+0x466>
 800e82c:	4b4e      	ldr	r3, [pc, #312]	; (800e968 <tcp_slowtmr+0x594>)
 800e82e:	f240 526d 	movw	r2, #1389	; 0x56d
 800e832:	494e      	ldr	r1, [pc, #312]	; (800e96c <tcp_slowtmr+0x598>)
 800e834:	484e      	ldr	r0, [pc, #312]	; (800e970 <tcp_slowtmr+0x59c>)
 800e836:	f00a fa8b 	bl	8018d50 <iprintf>
        prev->next = pcb->next;
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	68da      	ldr	r2, [r3, #12]
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	60da      	str	r2, [r3, #12]
 800e842:	e00f      	b.n	800e864 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e844:	4b47      	ldr	r3, [pc, #284]	; (800e964 <tcp_slowtmr+0x590>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d006      	beq.n	800e85c <tcp_slowtmr+0x488>
 800e84e:	4b46      	ldr	r3, [pc, #280]	; (800e968 <tcp_slowtmr+0x594>)
 800e850:	f240 5271 	movw	r2, #1393	; 0x571
 800e854:	4947      	ldr	r1, [pc, #284]	; (800e974 <tcp_slowtmr+0x5a0>)
 800e856:	4846      	ldr	r0, [pc, #280]	; (800e970 <tcp_slowtmr+0x59c>)
 800e858:	f00a fa7a 	bl	8018d50 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	4a40      	ldr	r2, [pc, #256]	; (800e964 <tcp_slowtmr+0x590>)
 800e862:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d013      	beq.n	800e894 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e872:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e874:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	3304      	adds	r3, #4
 800e87a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e87c:	8ad2      	ldrh	r2, [r2, #22]
 800e87e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e880:	8b09      	ldrh	r1, [r1, #24]
 800e882:	9102      	str	r1, [sp, #8]
 800e884:	9201      	str	r2, [sp, #4]
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	462b      	mov	r3, r5
 800e88a:	4622      	mov	r2, r4
 800e88c:	4601      	mov	r1, r0
 800e88e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e890:	f004 feb0 	bl	80135f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	7d1b      	ldrb	r3, [r3, #20]
 800e89e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e8aa:	6838      	ldr	r0, [r7, #0]
 800e8ac:	f7ff f83a 	bl	800d924 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e8b0:	4b31      	ldr	r3, [pc, #196]	; (800e978 <tcp_slowtmr+0x5a4>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d004      	beq.n	800e8c6 <tcp_slowtmr+0x4f2>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f06f 010c 	mvn.w	r1, #12
 800e8c2:	68b8      	ldr	r0, [r7, #8]
 800e8c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e8c6:	4b2c      	ldr	r3, [pc, #176]	; (800e978 <tcp_slowtmr+0x5a4>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d037      	beq.n	800e93e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e8ce:	e592      	b.n	800e3f6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	7f1b      	ldrb	r3, [r3, #28]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	b2da      	uxtb	r2, r3
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	7f1a      	ldrb	r2, [r3, #28]
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	7f5b      	ldrb	r3, [r3, #29]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d325      	bcc.n	800e93e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e8f8:	4b1f      	ldr	r3, [pc, #124]	; (800e978 <tcp_slowtmr+0x5a4>)
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00b      	beq.n	800e920 <tcp_slowtmr+0x54c>
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e90e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e910:	6912      	ldr	r2, [r2, #16]
 800e912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e914:	4610      	mov	r0, r2
 800e916:	4798      	blx	r3
 800e918:	4603      	mov	r3, r0
 800e91a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e91e:	e002      	b.n	800e926 <tcp_slowtmr+0x552>
 800e920:	2300      	movs	r3, #0
 800e922:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e926:	4b14      	ldr	r3, [pc, #80]	; (800e978 <tcp_slowtmr+0x5a4>)
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d000      	beq.n	800e930 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e92e:	e562      	b.n	800e3f6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e930:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e934:	2b00      	cmp	r3, #0
 800e936:	d102      	bne.n	800e93e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e93a:	f004 f8a7 	bl	8012a8c <tcp_output>
  while (pcb != NULL) {
 800e93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e940:	2b00      	cmp	r3, #0
 800e942:	f47f ad5e 	bne.w	800e402 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e946:	2300      	movs	r3, #0
 800e948:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e94a:	4b0c      	ldr	r3, [pc, #48]	; (800e97c <tcp_slowtmr+0x5a8>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e950:	e069      	b.n	800ea26 <tcp_slowtmr+0x652>
 800e952:	bf00      	nop
 800e954:	20011234 	.word	0x20011234
 800e958:	000a4cb8 	.word	0x000a4cb8
 800e95c:	10624dd3 	.word	0x10624dd3
 800e960:	000124f8 	.word	0x000124f8
 800e964:	20011240 	.word	0x20011240
 800e968:	0801b580 	.word	0x0801b580
 800e96c:	0801b9b8 	.word	0x0801b9b8
 800e970:	0801b5c4 	.word	0x0801b5c4
 800e974:	0801b9e4 	.word	0x0801b9e4
 800e978:	20011248 	.word	0x20011248
 800e97c:	20011244 	.word	0x20011244
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	7d1b      	ldrb	r3, [r3, #20]
 800e984:	2b0a      	cmp	r3, #10
 800e986:	d006      	beq.n	800e996 <tcp_slowtmr+0x5c2>
 800e988:	4b2b      	ldr	r3, [pc, #172]	; (800ea38 <tcp_slowtmr+0x664>)
 800e98a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e98e:	492b      	ldr	r1, [pc, #172]	; (800ea3c <tcp_slowtmr+0x668>)
 800e990:	482b      	ldr	r0, [pc, #172]	; (800ea40 <tcp_slowtmr+0x66c>)
 800e992:	f00a f9dd 	bl	8018d50 <iprintf>
    pcb_remove = 0;
 800e996:	2300      	movs	r3, #0
 800e998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e99c:	4b29      	ldr	r3, [pc, #164]	; (800ea44 <tcp_slowtmr+0x670>)
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	6a1b      	ldr	r3, [r3, #32]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2bf0      	cmp	r3, #240	; 0xf0
 800e9a8:	d904      	bls.n	800e9b4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e9aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d02f      	beq.n	800ea1c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9be:	f000 fbf9 	bl	800f1b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d010      	beq.n	800e9ea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9c8:	4b1f      	ldr	r3, [pc, #124]	; (800ea48 <tcp_slowtmr+0x674>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d106      	bne.n	800e9e0 <tcp_slowtmr+0x60c>
 800e9d2:	4b19      	ldr	r3, [pc, #100]	; (800ea38 <tcp_slowtmr+0x664>)
 800e9d4:	f240 52af 	movw	r2, #1455	; 0x5af
 800e9d8:	491c      	ldr	r1, [pc, #112]	; (800ea4c <tcp_slowtmr+0x678>)
 800e9da:	4819      	ldr	r0, [pc, #100]	; (800ea40 <tcp_slowtmr+0x66c>)
 800e9dc:	f00a f9b8 	bl	8018d50 <iprintf>
        prev->next = pcb->next;
 800e9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e2:	68da      	ldr	r2, [r3, #12]
 800e9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e6:	60da      	str	r2, [r3, #12]
 800e9e8:	e00f      	b.n	800ea0a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e9ea:	4b17      	ldr	r3, [pc, #92]	; (800ea48 <tcp_slowtmr+0x674>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d006      	beq.n	800ea02 <tcp_slowtmr+0x62e>
 800e9f4:	4b10      	ldr	r3, [pc, #64]	; (800ea38 <tcp_slowtmr+0x664>)
 800e9f6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e9fa:	4915      	ldr	r1, [pc, #84]	; (800ea50 <tcp_slowtmr+0x67c>)
 800e9fc:	4810      	ldr	r0, [pc, #64]	; (800ea40 <tcp_slowtmr+0x66c>)
 800e9fe:	f00a f9a7 	bl	8018d50 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	4a10      	ldr	r2, [pc, #64]	; (800ea48 <tcp_slowtmr+0x674>)
 800ea08:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ea0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea14:	69f8      	ldr	r0, [r7, #28]
 800ea16:	f7fe ff85 	bl	800d924 <tcp_free>
 800ea1a:	e004      	b.n	800ea26 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1a9      	bne.n	800e980 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea2c:	bf00      	nop
 800ea2e:	bf00      	nop
 800ea30:	3730      	adds	r7, #48	; 0x30
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bdb0      	pop	{r4, r5, r7, pc}
 800ea36:	bf00      	nop
 800ea38:	0801b580 	.word	0x0801b580
 800ea3c:	0801ba10 	.word	0x0801ba10
 800ea40:	0801b5c4 	.word	0x0801b5c4
 800ea44:	20011234 	.word	0x20011234
 800ea48:	20011244 	.word	0x20011244
 800ea4c:	0801ba40 	.word	0x0801ba40
 800ea50:	0801ba68 	.word	0x0801ba68

0800ea54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea5a:	4b2d      	ldr	r3, [pc, #180]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	b2da      	uxtb	r2, r3
 800ea62:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea66:	4b2b      	ldr	r3, [pc, #172]	; (800eb14 <tcp_fasttmr+0xc0>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea6c:	e048      	b.n	800eb00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	7f9a      	ldrb	r2, [r3, #30]
 800ea72:	4b27      	ldr	r3, [pc, #156]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d03f      	beq.n	800eafa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea7a:	4b25      	ldr	r3, [pc, #148]	; (800eb10 <tcp_fasttmr+0xbc>)
 800ea7c:	781a      	ldrb	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	8b5b      	ldrh	r3, [r3, #26]
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d010      	beq.n	800eab0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	8b5b      	ldrh	r3, [r3, #26]
 800ea92:	f043 0302 	orr.w	r3, r3, #2
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f003 fff5 	bl	8012a8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	8b5b      	ldrh	r3, [r3, #26]
 800eaa6:	f023 0303 	bic.w	r3, r3, #3
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	8b5b      	ldrh	r3, [r3, #26]
 800eab4:	f003 0308 	and.w	r3, r3, #8
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d009      	beq.n	800ead0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	8b5b      	ldrh	r3, [r3, #26]
 800eac0:	f023 0308 	bic.w	r3, r3, #8
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7ff f8be 	bl	800dc4c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00a      	beq.n	800eaf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eade:	4b0e      	ldr	r3, [pc, #56]	; (800eb18 <tcp_fasttmr+0xc4>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 f819 	bl	800eb1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eaea:	4b0b      	ldr	r3, [pc, #44]	; (800eb18 <tcp_fasttmr+0xc4>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d000      	beq.n	800eaf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eaf2:	e7b8      	b.n	800ea66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	607b      	str	r3, [r7, #4]
 800eaf8:	e002      	b.n	800eb00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1b3      	bne.n	800ea6e <tcp_fasttmr+0x1a>
    }
  }
}
 800eb06:	bf00      	nop
 800eb08:	bf00      	nop
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	2001124a 	.word	0x2001124a
 800eb14:	20011240 	.word	0x20011240
 800eb18:	20011248 	.word	0x20011248

0800eb1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb1c:	b590      	push	{r4, r7, lr}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d109      	bne.n	800eb3e <tcp_process_refused_data+0x22>
 800eb2a:	4b37      	ldr	r3, [pc, #220]	; (800ec08 <tcp_process_refused_data+0xec>)
 800eb2c:	f240 6209 	movw	r2, #1545	; 0x609
 800eb30:	4936      	ldr	r1, [pc, #216]	; (800ec0c <tcp_process_refused_data+0xf0>)
 800eb32:	4837      	ldr	r0, [pc, #220]	; (800ec10 <tcp_process_refused_data+0xf4>)
 800eb34:	f00a f90c 	bl	8018d50 <iprintf>
 800eb38:	f06f 030f 	mvn.w	r3, #15
 800eb3c:	e060      	b.n	800ec00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb42:	7b5b      	ldrb	r3, [r3, #13]
 800eb44:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb4a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00b      	beq.n	800eb74 <tcp_process_refused_data+0x58>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6918      	ldr	r0, [r3, #16]
 800eb66:	2300      	movs	r3, #0
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	6879      	ldr	r1, [r7, #4]
 800eb6c:	47a0      	blx	r4
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]
 800eb72:	e007      	b.n	800eb84 <tcp_process_refused_data+0x68>
 800eb74:	2300      	movs	r3, #0
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	f000 f8a4 	bl	800ecc8 <tcp_recv_null>
 800eb80:	4603      	mov	r3, r0
 800eb82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d12a      	bne.n	800ebe2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eb8c:	7bbb      	ldrb	r3, [r7, #14]
 800eb8e:	f003 0320 	and.w	r3, r3, #32
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d033      	beq.n	800ebfe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb9e:	d005      	beq.n	800ebac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eba4:	3301      	adds	r3, #1
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00b      	beq.n	800ebce <tcp_process_refused_data+0xb2>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6918      	ldr	r0, [r3, #16]
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	47a0      	blx	r4
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73fb      	strb	r3, [r7, #15]
 800ebcc:	e001      	b.n	800ebd2 <tcp_process_refused_data+0xb6>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ebd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebd6:	f113 0f0d 	cmn.w	r3, #13
 800ebda:	d110      	bne.n	800ebfe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ebdc:	f06f 030c 	mvn.w	r3, #12
 800ebe0:	e00e      	b.n	800ec00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ebe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebe6:	f113 0f0d 	cmn.w	r3, #13
 800ebea:	d102      	bne.n	800ebf2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ebec:	f06f 030c 	mvn.w	r3, #12
 800ebf0:	e006      	b.n	800ec00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ebf8:	f06f 0304 	mvn.w	r3, #4
 800ebfc:	e000      	b.n	800ec00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd90      	pop	{r4, r7, pc}
 800ec08:	0801b580 	.word	0x0801b580
 800ec0c:	0801ba90 	.word	0x0801ba90
 800ec10:	0801b5c4 	.word	0x0801b5c4

0800ec14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ec1c:	e007      	b.n	800ec2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 f80a 	bl	800ec3e <tcp_seg_free>
    seg = next;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1f4      	bne.n	800ec1e <tcp_segs_free+0xa>
  }
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00c      	beq.n	800ec66 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d004      	beq.n	800ec5e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fe fbb7 	bl	800d3cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	2003      	movs	r0, #3
 800ec62:	f7fd fd0f 	bl	800c684 <memp_free>
  }
}
 800ec66:	bf00      	nop
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d106      	bne.n	800ec8c <tcp_seg_copy+0x1c>
 800ec7e:	4b0f      	ldr	r3, [pc, #60]	; (800ecbc <tcp_seg_copy+0x4c>)
 800ec80:	f240 6282 	movw	r2, #1666	; 0x682
 800ec84:	490e      	ldr	r1, [pc, #56]	; (800ecc0 <tcp_seg_copy+0x50>)
 800ec86:	480f      	ldr	r0, [pc, #60]	; (800ecc4 <tcp_seg_copy+0x54>)
 800ec88:	f00a f862 	bl	8018d50 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec8c:	2003      	movs	r0, #3
 800ec8e:	f7fd fc83 	bl	800c598 <memp_malloc>
 800ec92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <tcp_seg_copy+0x2e>
    return NULL;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e00a      	b.n	800ecb4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec9e:	2210      	movs	r2, #16
 800eca0:	6879      	ldr	r1, [r7, #4]
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f00a f83e 	bl	8018d24 <memcpy>
  pbuf_ref(cseg->p);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fe fc33 	bl	800d518 <pbuf_ref>
  return cseg;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	0801b580 	.word	0x0801b580
 800ecc0:	0801bad4 	.word	0x0801bad4
 800ecc4:	0801b5c4 	.word	0x0801b5c4

0800ecc8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d109      	bne.n	800ecf0 <tcp_recv_null+0x28>
 800ecdc:	4b12      	ldr	r3, [pc, #72]	; (800ed28 <tcp_recv_null+0x60>)
 800ecde:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ece2:	4912      	ldr	r1, [pc, #72]	; (800ed2c <tcp_recv_null+0x64>)
 800ece4:	4812      	ldr	r0, [pc, #72]	; (800ed30 <tcp_recv_null+0x68>)
 800ece6:	f00a f833 	bl	8018d50 <iprintf>
 800ecea:	f06f 030f 	mvn.w	r3, #15
 800ecee:	e016      	b.n	800ed1e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d009      	beq.n	800ed0a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	891b      	ldrh	r3, [r3, #8]
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	68b8      	ldr	r0, [r7, #8]
 800ecfe:	f7ff f9bb 	bl	800e078 <tcp_recved>
    pbuf_free(p);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7fe fb62 	bl	800d3cc <pbuf_free>
 800ed08:	e008      	b.n	800ed1c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ed0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d104      	bne.n	800ed1c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ed12:	68b8      	ldr	r0, [r7, #8]
 800ed14:	f7ff f804 	bl	800dd20 <tcp_close>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	e000      	b.n	800ed1e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ed1c:	2300      	movs	r3, #0
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	0801b580 	.word	0x0801b580
 800ed2c:	0801baf0 	.word	0x0801baf0
 800ed30:	0801b5c4 	.word	0x0801b5c4

0800ed34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	db01      	blt.n	800ed4a <tcp_kill_prio+0x16>
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	e000      	b.n	800ed4c <tcp_kill_prio+0x18>
 800ed4a:	237f      	movs	r3, #127	; 0x7f
 800ed4c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed4e:	7afb      	ldrb	r3, [r7, #11]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d034      	beq.n	800edbe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed54:	7afb      	ldrb	r3, [r7, #11]
 800ed56:	3b01      	subs	r3, #1
 800ed58:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed62:	4b19      	ldr	r3, [pc, #100]	; (800edc8 <tcp_kill_prio+0x94>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	617b      	str	r3, [r7, #20]
 800ed68:	e01f      	b.n	800edaa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	7d5b      	ldrb	r3, [r3, #21]
 800ed6e:	7afa      	ldrb	r2, [r7, #11]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d80c      	bhi.n	800ed8e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed78:	7afa      	ldrb	r2, [r7, #11]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d112      	bne.n	800eda4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed7e:	4b13      	ldr	r3, [pc, #76]	; (800edcc <tcp_kill_prio+0x98>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	6a1b      	ldr	r3, [r3, #32]
 800ed86:	1ad3      	subs	r3, r2, r3
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d80a      	bhi.n	800eda4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ed8e:	4b0f      	ldr	r3, [pc, #60]	; (800edcc <tcp_kill_prio+0x98>)
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	6a1b      	ldr	r3, [r3, #32]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	7d5b      	ldrb	r3, [r3, #21]
 800eda2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	617b      	str	r3, [r7, #20]
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1dc      	bne.n	800ed6a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d004      	beq.n	800edc0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800edb6:	6938      	ldr	r0, [r7, #16]
 800edb8:	f7ff f8f8 	bl	800dfac <tcp_abort>
 800edbc:	e000      	b.n	800edc0 <tcp_kill_prio+0x8c>
    return;
 800edbe:	bf00      	nop
  }
}
 800edc0:	3718      	adds	r7, #24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	20011240 	.word	0x20011240
 800edcc:	20011234 	.word	0x20011234

0800edd0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	4603      	mov	r3, r0
 800edd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800edda:	79fb      	ldrb	r3, [r7, #7]
 800eddc:	2b08      	cmp	r3, #8
 800edde:	d009      	beq.n	800edf4 <tcp_kill_state+0x24>
 800ede0:	79fb      	ldrb	r3, [r7, #7]
 800ede2:	2b09      	cmp	r3, #9
 800ede4:	d006      	beq.n	800edf4 <tcp_kill_state+0x24>
 800ede6:	4b1a      	ldr	r3, [pc, #104]	; (800ee50 <tcp_kill_state+0x80>)
 800ede8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800edec:	4919      	ldr	r1, [pc, #100]	; (800ee54 <tcp_kill_state+0x84>)
 800edee:	481a      	ldr	r0, [pc, #104]	; (800ee58 <tcp_kill_state+0x88>)
 800edf0:	f009 ffae 	bl	8018d50 <iprintf>

  inactivity = 0;
 800edf4:	2300      	movs	r3, #0
 800edf6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edf8:	2300      	movs	r3, #0
 800edfa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edfc:	4b17      	ldr	r3, [pc, #92]	; (800ee5c <tcp_kill_state+0x8c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	617b      	str	r3, [r7, #20]
 800ee02:	e017      	b.n	800ee34 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	7d1b      	ldrb	r3, [r3, #20]
 800ee08:	79fa      	ldrb	r2, [r7, #7]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d10f      	bne.n	800ee2e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee0e:	4b14      	ldr	r3, [pc, #80]	; (800ee60 <tcp_kill_state+0x90>)
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d807      	bhi.n	800ee2e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ee1e:	4b10      	ldr	r3, [pc, #64]	; (800ee60 <tcp_kill_state+0x90>)
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	617b      	str	r3, [r7, #20]
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1e4      	bne.n	800ee04 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee40:	2100      	movs	r1, #0
 800ee42:	6938      	ldr	r0, [r7, #16]
 800ee44:	f7fe fff4 	bl	800de30 <tcp_abandon>
  }
}
 800ee48:	bf00      	nop
 800ee4a:	3718      	adds	r7, #24
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	0801b580 	.word	0x0801b580
 800ee54:	0801bb0c 	.word	0x0801bb0c
 800ee58:	0801b5c4 	.word	0x0801b5c4
 800ee5c:	20011240 	.word	0x20011240
 800ee60:	20011234 	.word	0x20011234

0800ee64 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee72:	4b12      	ldr	r3, [pc, #72]	; (800eebc <tcp_kill_timewait+0x58>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	e012      	b.n	800eea0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee7a:	4b11      	ldr	r3, [pc, #68]	; (800eec0 <tcp_kill_timewait+0x5c>)
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6a1b      	ldr	r3, [r3, #32]
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d807      	bhi.n	800ee9a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee8a:	4b0d      	ldr	r3, [pc, #52]	; (800eec0 <tcp_kill_timewait+0x5c>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6a1b      	ldr	r3, [r3, #32]
 800ee92:	1ad3      	subs	r3, r2, r3
 800ee94:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1e9      	bne.n	800ee7a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eeac:	68b8      	ldr	r0, [r7, #8]
 800eeae:	f7ff f87d 	bl	800dfac <tcp_abort>
  }
}
 800eeb2:	bf00      	nop
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	20011244 	.word	0x20011244
 800eec0:	20011234 	.word	0x20011234

0800eec4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eeca:	4b10      	ldr	r3, [pc, #64]	; (800ef0c <tcp_handle_closepend+0x48>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eed0:	e014      	b.n	800eefc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	8b5b      	ldrh	r3, [r3, #26]
 800eedc:	f003 0308 	and.w	r3, r3, #8
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d009      	beq.n	800eef8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	8b5b      	ldrh	r3, [r3, #26]
 800eee8:	f023 0308 	bic.w	r3, r3, #8
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f7fe feaa 	bl	800dc4c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1e7      	bne.n	800eed2 <tcp_handle_closepend+0xe>
  }
}
 800ef02:	bf00      	nop
 800ef04:	bf00      	nop
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	20011240 	.word	0x20011240

0800ef10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef1a:	2001      	movs	r0, #1
 800ef1c:	f7fd fb3c 	bl	800c598 <memp_malloc>
 800ef20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d126      	bne.n	800ef76 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef28:	f7ff ffcc 	bl	800eec4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef2c:	f7ff ff9a 	bl	800ee64 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef30:	2001      	movs	r0, #1
 800ef32:	f7fd fb31 	bl	800c598 <memp_malloc>
 800ef36:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d11b      	bne.n	800ef76 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef3e:	2009      	movs	r0, #9
 800ef40:	f7ff ff46 	bl	800edd0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef44:	2001      	movs	r0, #1
 800ef46:	f7fd fb27 	bl	800c598 <memp_malloc>
 800ef4a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d111      	bne.n	800ef76 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef52:	2008      	movs	r0, #8
 800ef54:	f7ff ff3c 	bl	800edd0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef58:	2001      	movs	r0, #1
 800ef5a:	f7fd fb1d 	bl	800c598 <memp_malloc>
 800ef5e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d107      	bne.n	800ef76 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef66:	79fb      	ldrb	r3, [r7, #7]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7ff fee3 	bl	800ed34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef6e:	2001      	movs	r0, #1
 800ef70:	f7fd fb12 	bl	800c598 <memp_malloc>
 800ef74:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d03f      	beq.n	800effc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef7c:	229c      	movs	r2, #156	; 0x9c
 800ef7e:	2100      	movs	r1, #0
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f009 fedd 	bl	8018d40 <memset>
    pcb->prio = prio;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	79fa      	ldrb	r2, [r7, #7]
 800ef8a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	22ff      	movs	r2, #255	; 0xff
 800efaa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f44f 7206 	mov.w	r2, #536	; 0x218
 800efb2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2206      	movs	r2, #6
 800efb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2206      	movs	r2, #6
 800efc0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efc8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2201      	movs	r2, #1
 800efce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800efd2:	4b0d      	ldr	r3, [pc, #52]	; (800f008 <tcp_alloc+0xf8>)
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800efda:	4b0c      	ldr	r3, [pc, #48]	; (800f00c <tcp_alloc+0xfc>)
 800efdc:	781a      	ldrb	r2, [r3, #0]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efe8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4a08      	ldr	r2, [pc, #32]	; (800f010 <tcp_alloc+0x100>)
 800eff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4a07      	ldr	r2, [pc, #28]	; (800f014 <tcp_alloc+0x104>)
 800eff8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800effc:	68fb      	ldr	r3, [r7, #12]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	20011234 	.word	0x20011234
 800f00c:	2001124a 	.word	0x2001124a
 800f010:	0800ecc9 	.word	0x0800ecc9
 800f014:	006ddd00 	.word	0x006ddd00

0800f018 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	4603      	mov	r3, r0
 800f020:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f022:	2040      	movs	r0, #64	; 0x40
 800f024:	f7ff ff74 	bl	800ef10 <tcp_alloc>
 800f028:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f02a:	68fb      	ldr	r3, [r7, #12]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d002      	beq.n	800f04a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	611a      	str	r2, [r3, #16]
  }
}
 800f04a:	bf00      	nop
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
	...

0800f058 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00e      	beq.n	800f086 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	7d1b      	ldrb	r3, [r3, #20]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d106      	bne.n	800f07e <tcp_recv+0x26>
 800f070:	4b07      	ldr	r3, [pc, #28]	; (800f090 <tcp_recv+0x38>)
 800f072:	f240 72df 	movw	r2, #2015	; 0x7df
 800f076:	4907      	ldr	r1, [pc, #28]	; (800f094 <tcp_recv+0x3c>)
 800f078:	4807      	ldr	r0, [pc, #28]	; (800f098 <tcp_recv+0x40>)
 800f07a:	f009 fe69 	bl	8018d50 <iprintf>
    pcb->recv = recv;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f086:	bf00      	nop
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	0801b580 	.word	0x0801b580
 800f094:	0801bb1c 	.word	0x0801bb1c
 800f098:	0801b5c4 	.word	0x0801b5c4

0800f09c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00e      	beq.n	800f0ca <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	7d1b      	ldrb	r3, [r3, #20]
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d106      	bne.n	800f0c2 <tcp_sent+0x26>
 800f0b4:	4b07      	ldr	r3, [pc, #28]	; (800f0d4 <tcp_sent+0x38>)
 800f0b6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f0ba:	4907      	ldr	r1, [pc, #28]	; (800f0d8 <tcp_sent+0x3c>)
 800f0bc:	4807      	ldr	r0, [pc, #28]	; (800f0dc <tcp_sent+0x40>)
 800f0be:	f009 fe47 	bl	8018d50 <iprintf>
    pcb->sent = sent;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f0ca:	bf00      	nop
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	0801b580 	.word	0x0801b580
 800f0d8:	0801bb44 	.word	0x0801bb44
 800f0dc:	0801b5c4 	.word	0x0801b5c4

0800f0e0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00e      	beq.n	800f10e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	7d1b      	ldrb	r3, [r3, #20]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d106      	bne.n	800f106 <tcp_err+0x26>
 800f0f8:	4b07      	ldr	r3, [pc, #28]	; (800f118 <tcp_err+0x38>)
 800f0fa:	f640 020d 	movw	r2, #2061	; 0x80d
 800f0fe:	4907      	ldr	r1, [pc, #28]	; (800f11c <tcp_err+0x3c>)
 800f100:	4807      	ldr	r0, [pc, #28]	; (800f120 <tcp_err+0x40>)
 800f102:	f009 fe25 	bl	8018d50 <iprintf>
    pcb->errf = err;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f10e:	bf00      	nop
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	0801b580 	.word	0x0801b580
 800f11c:	0801bb6c 	.word	0x0801bb6c
 800f120:	0801b5c4 	.word	0x0801b5c4

0800f124 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d008      	beq.n	800f146 <tcp_accept+0x22>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	7d1b      	ldrb	r3, [r3, #20]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d104      	bne.n	800f146 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	619a      	str	r2, [r3, #24]
  }
}
 800f146:	bf00      	nop
 800f148:	3714      	adds	r7, #20
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
	...

0800f154 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	4613      	mov	r3, r2
 800f160:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d107      	bne.n	800f178 <tcp_poll+0x24>
 800f168:	4b0e      	ldr	r3, [pc, #56]	; (800f1a4 <tcp_poll+0x50>)
 800f16a:	f640 023d 	movw	r2, #2109	; 0x83d
 800f16e:	490e      	ldr	r1, [pc, #56]	; (800f1a8 <tcp_poll+0x54>)
 800f170:	480e      	ldr	r0, [pc, #56]	; (800f1ac <tcp_poll+0x58>)
 800f172:	f009 fded 	bl	8018d50 <iprintf>
 800f176:	e011      	b.n	800f19c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	7d1b      	ldrb	r3, [r3, #20]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d106      	bne.n	800f18e <tcp_poll+0x3a>
 800f180:	4b08      	ldr	r3, [pc, #32]	; (800f1a4 <tcp_poll+0x50>)
 800f182:	f640 023e 	movw	r2, #2110	; 0x83e
 800f186:	490a      	ldr	r1, [pc, #40]	; (800f1b0 <tcp_poll+0x5c>)
 800f188:	4808      	ldr	r0, [pc, #32]	; (800f1ac <tcp_poll+0x58>)
 800f18a:	f009 fde1 	bl	8018d50 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	79fa      	ldrb	r2, [r7, #7]
 800f19a:	775a      	strb	r2, [r3, #29]
}
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	0801b580 	.word	0x0801b580
 800f1a8:	0801bb94 	.word	0x0801bb94
 800f1ac:	0801b5c4 	.word	0x0801b5c4
 800f1b0:	0801bbac 	.word	0x0801bbac

0800f1b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d107      	bne.n	800f1d2 <tcp_pcb_purge+0x1e>
 800f1c2:	4b21      	ldr	r3, [pc, #132]	; (800f248 <tcp_pcb_purge+0x94>)
 800f1c4:	f640 0251 	movw	r2, #2129	; 0x851
 800f1c8:	4920      	ldr	r1, [pc, #128]	; (800f24c <tcp_pcb_purge+0x98>)
 800f1ca:	4821      	ldr	r0, [pc, #132]	; (800f250 <tcp_pcb_purge+0x9c>)
 800f1cc:	f009 fdc0 	bl	8018d50 <iprintf>
 800f1d0:	e037      	b.n	800f242 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	7d1b      	ldrb	r3, [r3, #20]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d033      	beq.n	800f242 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1de:	2b0a      	cmp	r3, #10
 800f1e0:	d02f      	beq.n	800f242 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d02b      	beq.n	800f242 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d007      	beq.n	800f202 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fe f8e8 	bl	800d3cc <pbuf_free>
      pcb->refused_data = NULL;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f206:	2b00      	cmp	r3, #0
 800f208:	d002      	beq.n	800f210 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 f986 	bl	800f51c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f216:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7ff fcf9 	bl	800ec14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff fcf4 	bl	800ec14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	66da      	str	r2, [r3, #108]	; 0x6c
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	0801b580 	.word	0x0801b580
 800f24c:	0801bbcc 	.word	0x0801bbcc
 800f250:	0801b5c4 	.word	0x0801b5c4

0800f254 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d106      	bne.n	800f272 <tcp_pcb_remove+0x1e>
 800f264:	4b3e      	ldr	r3, [pc, #248]	; (800f360 <tcp_pcb_remove+0x10c>)
 800f266:	f640 0283 	movw	r2, #2179	; 0x883
 800f26a:	493e      	ldr	r1, [pc, #248]	; (800f364 <tcp_pcb_remove+0x110>)
 800f26c:	483e      	ldr	r0, [pc, #248]	; (800f368 <tcp_pcb_remove+0x114>)
 800f26e:	f009 fd6f 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d106      	bne.n	800f286 <tcp_pcb_remove+0x32>
 800f278:	4b39      	ldr	r3, [pc, #228]	; (800f360 <tcp_pcb_remove+0x10c>)
 800f27a:	f640 0284 	movw	r2, #2180	; 0x884
 800f27e:	493b      	ldr	r1, [pc, #236]	; (800f36c <tcp_pcb_remove+0x118>)
 800f280:	4839      	ldr	r0, [pc, #228]	; (800f368 <tcp_pcb_remove+0x114>)
 800f282:	f009 fd65 	bl	8018d50 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	683a      	ldr	r2, [r7, #0]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d105      	bne.n	800f29c <tcp_pcb_remove+0x48>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68da      	ldr	r2, [r3, #12]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	601a      	str	r2, [r3, #0]
 800f29a:	e013      	b.n	800f2c4 <tcp_pcb_remove+0x70>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	e00c      	b.n	800f2be <tcp_pcb_remove+0x6a>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d104      	bne.n	800f2b8 <tcp_pcb_remove+0x64>
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	68da      	ldr	r2, [r3, #12]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	60da      	str	r2, [r3, #12]
 800f2b6:	e005      	b.n	800f2c4 <tcp_pcb_remove+0x70>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	60fb      	str	r3, [r7, #12]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1ef      	bne.n	800f2a4 <tcp_pcb_remove+0x50>
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f2ca:	6838      	ldr	r0, [r7, #0]
 800f2cc:	f7ff ff72 	bl	800f1b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	7d1b      	ldrb	r3, [r3, #20]
 800f2d4:	2b0a      	cmp	r3, #10
 800f2d6:	d013      	beq.n	800f300 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d00f      	beq.n	800f300 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	8b5b      	ldrh	r3, [r3, #26]
 800f2e4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d009      	beq.n	800f300 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	8b5b      	ldrh	r3, [r3, #26]
 800f2f0:	f043 0302 	orr.w	r3, r3, #2
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2fa:	6838      	ldr	r0, [r7, #0]
 800f2fc:	f003 fbc6 	bl	8012a8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	7d1b      	ldrb	r3, [r3, #20]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d020      	beq.n	800f34a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d006      	beq.n	800f31e <tcp_pcb_remove+0xca>
 800f310:	4b13      	ldr	r3, [pc, #76]	; (800f360 <tcp_pcb_remove+0x10c>)
 800f312:	f640 0293 	movw	r2, #2195	; 0x893
 800f316:	4916      	ldr	r1, [pc, #88]	; (800f370 <tcp_pcb_remove+0x11c>)
 800f318:	4813      	ldr	r0, [pc, #76]	; (800f368 <tcp_pcb_remove+0x114>)
 800f31a:	f009 fd19 	bl	8018d50 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f322:	2b00      	cmp	r3, #0
 800f324:	d006      	beq.n	800f334 <tcp_pcb_remove+0xe0>
 800f326:	4b0e      	ldr	r3, [pc, #56]	; (800f360 <tcp_pcb_remove+0x10c>)
 800f328:	f640 0294 	movw	r2, #2196	; 0x894
 800f32c:	4911      	ldr	r1, [pc, #68]	; (800f374 <tcp_pcb_remove+0x120>)
 800f32e:	480e      	ldr	r0, [pc, #56]	; (800f368 <tcp_pcb_remove+0x114>)
 800f330:	f009 fd0e 	bl	8018d50 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d006      	beq.n	800f34a <tcp_pcb_remove+0xf6>
 800f33c:	4b08      	ldr	r3, [pc, #32]	; (800f360 <tcp_pcb_remove+0x10c>)
 800f33e:	f640 0296 	movw	r2, #2198	; 0x896
 800f342:	490d      	ldr	r1, [pc, #52]	; (800f378 <tcp_pcb_remove+0x124>)
 800f344:	4808      	ldr	r0, [pc, #32]	; (800f368 <tcp_pcb_remove+0x114>)
 800f346:	f009 fd03 	bl	8018d50 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	2200      	movs	r2, #0
 800f34e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	2200      	movs	r2, #0
 800f354:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f356:	bf00      	nop
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	0801b580 	.word	0x0801b580
 800f364:	0801bbe8 	.word	0x0801bbe8
 800f368:	0801b5c4 	.word	0x0801b5c4
 800f36c:	0801bc04 	.word	0x0801bc04
 800f370:	0801bc24 	.word	0x0801bc24
 800f374:	0801bc3c 	.word	0x0801bc3c
 800f378:	0801bc58 	.word	0x0801bc58

0800f37c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d106      	bne.n	800f398 <tcp_next_iss+0x1c>
 800f38a:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <tcp_next_iss+0x38>)
 800f38c:	f640 02af 	movw	r2, #2223	; 0x8af
 800f390:	4909      	ldr	r1, [pc, #36]	; (800f3b8 <tcp_next_iss+0x3c>)
 800f392:	480a      	ldr	r0, [pc, #40]	; (800f3bc <tcp_next_iss+0x40>)
 800f394:	f009 fcdc 	bl	8018d50 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <tcp_next_iss+0x44>)
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <tcp_next_iss+0x48>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	4a07      	ldr	r2, [pc, #28]	; (800f3c0 <tcp_next_iss+0x44>)
 800f3a4:	6013      	str	r3, [r2, #0]
  return iss;
 800f3a6:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <tcp_next_iss+0x44>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3708      	adds	r7, #8
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	0801b580 	.word	0x0801b580
 800f3b8:	0801bc70 	.word	0x0801bc70
 800f3bc:	0801b5c4 	.word	0x0801b5c4
 800f3c0:	20000028 	.word	0x20000028
 800f3c4:	20011234 	.word	0x20011234

0800f3c8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d106      	bne.n	800f3ea <tcp_eff_send_mss_netif+0x22>
 800f3dc:	4b14      	ldr	r3, [pc, #80]	; (800f430 <tcp_eff_send_mss_netif+0x68>)
 800f3de:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f3e2:	4914      	ldr	r1, [pc, #80]	; (800f434 <tcp_eff_send_mss_netif+0x6c>)
 800f3e4:	4814      	ldr	r0, [pc, #80]	; (800f438 <tcp_eff_send_mss_netif+0x70>)
 800f3e6:	f009 fcb3 	bl	8018d50 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d101      	bne.n	800f3f4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f3f0:	89fb      	ldrh	r3, [r7, #14]
 800f3f2:	e019      	b.n	800f428 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3f8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f3fa:	8afb      	ldrh	r3, [r7, #22]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d012      	beq.n	800f426 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f400:	2328      	movs	r3, #40	; 0x28
 800f402:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f404:	8afa      	ldrh	r2, [r7, #22]
 800f406:	8abb      	ldrh	r3, [r7, #20]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d904      	bls.n	800f416 <tcp_eff_send_mss_netif+0x4e>
 800f40c:	8afa      	ldrh	r2, [r7, #22]
 800f40e:	8abb      	ldrh	r3, [r7, #20]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	b29b      	uxth	r3, r3
 800f414:	e000      	b.n	800f418 <tcp_eff_send_mss_netif+0x50>
 800f416:	2300      	movs	r3, #0
 800f418:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f41a:	8a7a      	ldrh	r2, [r7, #18]
 800f41c:	89fb      	ldrh	r3, [r7, #14]
 800f41e:	4293      	cmp	r3, r2
 800f420:	bf28      	it	cs
 800f422:	4613      	movcs	r3, r2
 800f424:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f426:	89fb      	ldrh	r3, [r7, #14]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3718      	adds	r7, #24
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	0801b580 	.word	0x0801b580
 800f434:	0801bc8c 	.word	0x0801bc8c
 800f438:	0801b5c4 	.word	0x0801b5c4

0800f43c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d119      	bne.n	800f484 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f450:	4b10      	ldr	r3, [pc, #64]	; (800f494 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f452:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f456:	4910      	ldr	r1, [pc, #64]	; (800f498 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f458:	4810      	ldr	r0, [pc, #64]	; (800f49c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f45a:	f009 fc79 	bl	8018d50 <iprintf>

  while (pcb != NULL) {
 800f45e:	e011      	b.n	800f484 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d108      	bne.n	800f47e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f7fe fd9a 	bl	800dfac <tcp_abort>
      pcb = next;
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	60fb      	str	r3, [r7, #12]
 800f47c:	e002      	b.n	800f484 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d1ea      	bne.n	800f460 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f48a:	bf00      	nop
 800f48c:	bf00      	nop
 800f48e:	3710      	adds	r7, #16
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	0801b580 	.word	0x0801b580
 800f498:	0801bcb4 	.word	0x0801bcb4
 800f49c:	0801b5c4 	.word	0x0801b5c4

0800f4a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d02a      	beq.n	800f506 <tcp_netif_ip_addr_changed+0x66>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d026      	beq.n	800f506 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f4b8:	4b15      	ldr	r3, [pc, #84]	; (800f510 <tcp_netif_ip_addr_changed+0x70>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7ff ffbc 	bl	800f43c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f4c4:	4b13      	ldr	r3, [pc, #76]	; (800f514 <tcp_netif_ip_addr_changed+0x74>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f7ff ffb6 	bl	800f43c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d017      	beq.n	800f506 <tcp_netif_ip_addr_changed+0x66>
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d013      	beq.n	800f506 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4de:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <tcp_netif_ip_addr_changed+0x78>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	e00c      	b.n	800f500 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d103      	bne.n	800f4fa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1ef      	bne.n	800f4e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f506:	bf00      	nop
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	20011240 	.word	0x20011240
 800f514:	20011238 	.word	0x20011238
 800f518:	2001123c 	.word	0x2001123c

0800f51c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d007      	beq.n	800f53c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff fb6f 	bl	800ec14 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2200      	movs	r2, #0
 800f53a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f53c:	bf00      	nop
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b08d      	sub	sp, #52	; 0x34
 800f548:	af04      	add	r7, sp, #16
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d105      	bne.n	800f560 <tcp_input+0x1c>
 800f554:	4b9b      	ldr	r3, [pc, #620]	; (800f7c4 <tcp_input+0x280>)
 800f556:	2283      	movs	r2, #131	; 0x83
 800f558:	499b      	ldr	r1, [pc, #620]	; (800f7c8 <tcp_input+0x284>)
 800f55a:	489c      	ldr	r0, [pc, #624]	; (800f7cc <tcp_input+0x288>)
 800f55c:	f009 fbf8 	bl	8018d50 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	4a9a      	ldr	r2, [pc, #616]	; (800f7d0 <tcp_input+0x28c>)
 800f566:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	895b      	ldrh	r3, [r3, #10]
 800f56c:	2b13      	cmp	r3, #19
 800f56e:	f240 83d1 	bls.w	800fd14 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f572:	4b98      	ldr	r3, [pc, #608]	; (800f7d4 <tcp_input+0x290>)
 800f574:	695b      	ldr	r3, [r3, #20]
 800f576:	4a97      	ldr	r2, [pc, #604]	; (800f7d4 <tcp_input+0x290>)
 800f578:	6812      	ldr	r2, [r2, #0]
 800f57a:	4611      	mov	r1, r2
 800f57c:	4618      	mov	r0, r3
 800f57e:	f006 fa53 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	f040 83c7 	bne.w	800fd18 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f58a:	4b92      	ldr	r3, [pc, #584]	; (800f7d4 <tcp_input+0x290>)
 800f58c:	695b      	ldr	r3, [r3, #20]
 800f58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f592:	2be0      	cmp	r3, #224	; 0xe0
 800f594:	f000 83c0 	beq.w	800fd18 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f598:	4b8d      	ldr	r3, [pc, #564]	; (800f7d0 <tcp_input+0x28c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	899b      	ldrh	r3, [r3, #12]
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fc fb11 	bl	800bbc8 <lwip_htons>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	0b1b      	lsrs	r3, r3, #12
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f5b2:	7cbb      	ldrb	r3, [r7, #18]
 800f5b4:	2b13      	cmp	r3, #19
 800f5b6:	f240 83b1 	bls.w	800fd1c <tcp_input+0x7d8>
 800f5ba:	7cbb      	ldrb	r3, [r7, #18]
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	891b      	ldrh	r3, [r3, #8]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	f200 83aa 	bhi.w	800fd1c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f5c8:	7cbb      	ldrb	r3, [r7, #18]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	3b14      	subs	r3, #20
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	4b81      	ldr	r3, [pc, #516]	; (800f7d8 <tcp_input+0x294>)
 800f5d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5d4:	4b81      	ldr	r3, [pc, #516]	; (800f7dc <tcp_input+0x298>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	895a      	ldrh	r2, [r3, #10]
 800f5de:	7cbb      	ldrb	r3, [r7, #18]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d309      	bcc.n	800f5fa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5e6:	4b7c      	ldr	r3, [pc, #496]	; (800f7d8 <tcp_input+0x294>)
 800f5e8:	881a      	ldrh	r2, [r3, #0]
 800f5ea:	4b7d      	ldr	r3, [pc, #500]	; (800f7e0 <tcp_input+0x29c>)
 800f5ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f5ee:	7cbb      	ldrb	r3, [r7, #18]
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7fd fe64 	bl	800d2c0 <pbuf_remove_header>
 800f5f8:	e04e      	b.n	800f698 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d105      	bne.n	800f60e <tcp_input+0xca>
 800f602:	4b70      	ldr	r3, [pc, #448]	; (800f7c4 <tcp_input+0x280>)
 800f604:	22c2      	movs	r2, #194	; 0xc2
 800f606:	4977      	ldr	r1, [pc, #476]	; (800f7e4 <tcp_input+0x2a0>)
 800f608:	4870      	ldr	r0, [pc, #448]	; (800f7cc <tcp_input+0x288>)
 800f60a:	f009 fba1 	bl	8018d50 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f60e:	2114      	movs	r1, #20
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7fd fe55 	bl	800d2c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	895a      	ldrh	r2, [r3, #10]
 800f61a:	4b71      	ldr	r3, [pc, #452]	; (800f7e0 <tcp_input+0x29c>)
 800f61c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f61e:	4b6e      	ldr	r3, [pc, #440]	; (800f7d8 <tcp_input+0x294>)
 800f620:	881a      	ldrh	r2, [r3, #0]
 800f622:	4b6f      	ldr	r3, [pc, #444]	; (800f7e0 <tcp_input+0x29c>)
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	1ad3      	subs	r3, r2, r3
 800f628:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f62a:	4b6d      	ldr	r3, [pc, #436]	; (800f7e0 <tcp_input+0x29c>)
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	4619      	mov	r1, r3
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f7fd fe45 	bl	800d2c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	895b      	ldrh	r3, [r3, #10]
 800f63c:	8a3a      	ldrh	r2, [r7, #16]
 800f63e:	429a      	cmp	r2, r3
 800f640:	f200 836e 	bhi.w	800fd20 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	4a64      	ldr	r2, [pc, #400]	; (800f7dc <tcp_input+0x298>)
 800f64c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	8a3a      	ldrh	r2, [r7, #16]
 800f654:	4611      	mov	r1, r2
 800f656:	4618      	mov	r0, r3
 800f658:	f7fd fe32 	bl	800d2c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	891a      	ldrh	r2, [r3, #8]
 800f660:	8a3b      	ldrh	r3, [r7, #16]
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	b29a      	uxth	r2, r3
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	895b      	ldrh	r3, [r3, #10]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d005      	beq.n	800f67e <tcp_input+0x13a>
 800f672:	4b54      	ldr	r3, [pc, #336]	; (800f7c4 <tcp_input+0x280>)
 800f674:	22df      	movs	r2, #223	; 0xdf
 800f676:	495c      	ldr	r1, [pc, #368]	; (800f7e8 <tcp_input+0x2a4>)
 800f678:	4854      	ldr	r0, [pc, #336]	; (800f7cc <tcp_input+0x288>)
 800f67a:	f009 fb69 	bl	8018d50 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	891a      	ldrh	r2, [r3, #8]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	891b      	ldrh	r3, [r3, #8]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d005      	beq.n	800f698 <tcp_input+0x154>
 800f68c:	4b4d      	ldr	r3, [pc, #308]	; (800f7c4 <tcp_input+0x280>)
 800f68e:	22e0      	movs	r2, #224	; 0xe0
 800f690:	4956      	ldr	r1, [pc, #344]	; (800f7ec <tcp_input+0x2a8>)
 800f692:	484e      	ldr	r0, [pc, #312]	; (800f7cc <tcp_input+0x288>)
 800f694:	f009 fb5c 	bl	8018d50 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f698:	4b4d      	ldr	r3, [pc, #308]	; (800f7d0 <tcp_input+0x28c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	4a4b      	ldr	r2, [pc, #300]	; (800f7d0 <tcp_input+0x28c>)
 800f6a2:	6814      	ldr	r4, [r2, #0]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7fc fa8f 	bl	800bbc8 <lwip_htons>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f6ae:	4b48      	ldr	r3, [pc, #288]	; (800f7d0 <tcp_input+0x28c>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	885b      	ldrh	r3, [r3, #2]
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	4a46      	ldr	r2, [pc, #280]	; (800f7d0 <tcp_input+0x28c>)
 800f6b8:	6814      	ldr	r4, [r2, #0]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fc fa84 	bl	800bbc8 <lwip_htons>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f6c4:	4b42      	ldr	r3, [pc, #264]	; (800f7d0 <tcp_input+0x28c>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	4a41      	ldr	r2, [pc, #260]	; (800f7d0 <tcp_input+0x28c>)
 800f6cc:	6814      	ldr	r4, [r2, #0]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fc fa8f 	bl	800bbf2 <lwip_htonl>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	6063      	str	r3, [r4, #4]
 800f6d8:	6863      	ldr	r3, [r4, #4]
 800f6da:	4a45      	ldr	r2, [pc, #276]	; (800f7f0 <tcp_input+0x2ac>)
 800f6dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6de:	4b3c      	ldr	r3, [pc, #240]	; (800f7d0 <tcp_input+0x28c>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	4a3a      	ldr	r2, [pc, #232]	; (800f7d0 <tcp_input+0x28c>)
 800f6e6:	6814      	ldr	r4, [r2, #0]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fc fa82 	bl	800bbf2 <lwip_htonl>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	60a3      	str	r3, [r4, #8]
 800f6f2:	68a3      	ldr	r3, [r4, #8]
 800f6f4:	4a3f      	ldr	r2, [pc, #252]	; (800f7f4 <tcp_input+0x2b0>)
 800f6f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6f8:	4b35      	ldr	r3, [pc, #212]	; (800f7d0 <tcp_input+0x28c>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	89db      	ldrh	r3, [r3, #14]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	4a33      	ldr	r2, [pc, #204]	; (800f7d0 <tcp_input+0x28c>)
 800f702:	6814      	ldr	r4, [r2, #0]
 800f704:	4618      	mov	r0, r3
 800f706:	f7fc fa5f 	bl	800bbc8 <lwip_htons>
 800f70a:	4603      	mov	r3, r0
 800f70c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f70e:	4b30      	ldr	r3, [pc, #192]	; (800f7d0 <tcp_input+0x28c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	899b      	ldrh	r3, [r3, #12]
 800f714:	b29b      	uxth	r3, r3
 800f716:	4618      	mov	r0, r3
 800f718:	f7fc fa56 	bl	800bbc8 <lwip_htons>
 800f71c:	4603      	mov	r3, r0
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f724:	b2da      	uxtb	r2, r3
 800f726:	4b34      	ldr	r3, [pc, #208]	; (800f7f8 <tcp_input+0x2b4>)
 800f728:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	891a      	ldrh	r2, [r3, #8]
 800f72e:	4b33      	ldr	r3, [pc, #204]	; (800f7fc <tcp_input+0x2b8>)
 800f730:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f732:	4b31      	ldr	r3, [pc, #196]	; (800f7f8 <tcp_input+0x2b4>)
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	f003 0303 	and.w	r3, r3, #3
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d00c      	beq.n	800f758 <tcp_input+0x214>
    tcplen++;
 800f73e:	4b2f      	ldr	r3, [pc, #188]	; (800f7fc <tcp_input+0x2b8>)
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	3301      	adds	r3, #1
 800f744:	b29a      	uxth	r2, r3
 800f746:	4b2d      	ldr	r3, [pc, #180]	; (800f7fc <tcp_input+0x2b8>)
 800f748:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	891a      	ldrh	r2, [r3, #8]
 800f74e:	4b2b      	ldr	r3, [pc, #172]	; (800f7fc <tcp_input+0x2b8>)
 800f750:	881b      	ldrh	r3, [r3, #0]
 800f752:	429a      	cmp	r2, r3
 800f754:	f200 82e6 	bhi.w	800fd24 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f758:	2300      	movs	r3, #0
 800f75a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f75c:	4b28      	ldr	r3, [pc, #160]	; (800f800 <tcp_input+0x2bc>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	61fb      	str	r3, [r7, #28]
 800f762:	e09d      	b.n	800f8a0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	7d1b      	ldrb	r3, [r3, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d105      	bne.n	800f778 <tcp_input+0x234>
 800f76c:	4b15      	ldr	r3, [pc, #84]	; (800f7c4 <tcp_input+0x280>)
 800f76e:	22fb      	movs	r2, #251	; 0xfb
 800f770:	4924      	ldr	r1, [pc, #144]	; (800f804 <tcp_input+0x2c0>)
 800f772:	4816      	ldr	r0, [pc, #88]	; (800f7cc <tcp_input+0x288>)
 800f774:	f009 faec 	bl	8018d50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	7d1b      	ldrb	r3, [r3, #20]
 800f77c:	2b0a      	cmp	r3, #10
 800f77e:	d105      	bne.n	800f78c <tcp_input+0x248>
 800f780:	4b10      	ldr	r3, [pc, #64]	; (800f7c4 <tcp_input+0x280>)
 800f782:	22fc      	movs	r2, #252	; 0xfc
 800f784:	4920      	ldr	r1, [pc, #128]	; (800f808 <tcp_input+0x2c4>)
 800f786:	4811      	ldr	r0, [pc, #68]	; (800f7cc <tcp_input+0x288>)
 800f788:	f009 fae2 	bl	8018d50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	7d1b      	ldrb	r3, [r3, #20]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d105      	bne.n	800f7a0 <tcp_input+0x25c>
 800f794:	4b0b      	ldr	r3, [pc, #44]	; (800f7c4 <tcp_input+0x280>)
 800f796:	22fd      	movs	r2, #253	; 0xfd
 800f798:	491c      	ldr	r1, [pc, #112]	; (800f80c <tcp_input+0x2c8>)
 800f79a:	480c      	ldr	r0, [pc, #48]	; (800f7cc <tcp_input+0x288>)
 800f79c:	f009 fad8 	bl	8018d50 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	7a1b      	ldrb	r3, [r3, #8]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d033      	beq.n	800f810 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	7a1a      	ldrb	r2, [r3, #8]
 800f7ac:	4b09      	ldr	r3, [pc, #36]	; (800f7d4 <tcp_input+0x290>)
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d029      	beq.n	800f810 <tcp_input+0x2cc>
      prev = pcb;
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	61bb      	str	r3, [r7, #24]
      continue;
 800f7c0:	e06b      	b.n	800f89a <tcp_input+0x356>
 800f7c2:	bf00      	nop
 800f7c4:	0801bce8 	.word	0x0801bce8
 800f7c8:	0801bd1c 	.word	0x0801bd1c
 800f7cc:	0801bd34 	.word	0x0801bd34
 800f7d0:	2001125c 	.word	0x2001125c
 800f7d4:	2000a138 	.word	0x2000a138
 800f7d8:	20011260 	.word	0x20011260
 800f7dc:	20011264 	.word	0x20011264
 800f7e0:	20011262 	.word	0x20011262
 800f7e4:	0801bd5c 	.word	0x0801bd5c
 800f7e8:	0801bd6c 	.word	0x0801bd6c
 800f7ec:	0801bd78 	.word	0x0801bd78
 800f7f0:	2001126c 	.word	0x2001126c
 800f7f4:	20011270 	.word	0x20011270
 800f7f8:	20011278 	.word	0x20011278
 800f7fc:	20011276 	.word	0x20011276
 800f800:	20011240 	.word	0x20011240
 800f804:	0801bd98 	.word	0x0801bd98
 800f808:	0801bdc0 	.word	0x0801bdc0
 800f80c:	0801bdec 	.word	0x0801bdec
    }

    if (pcb->remote_port == tcphdr->src &&
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	8b1a      	ldrh	r2, [r3, #24]
 800f814:	4b72      	ldr	r3, [pc, #456]	; (800f9e0 <tcp_input+0x49c>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d13a      	bne.n	800f896 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	8ada      	ldrh	r2, [r3, #22]
 800f824:	4b6e      	ldr	r3, [pc, #440]	; (800f9e0 <tcp_input+0x49c>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	885b      	ldrh	r3, [r3, #2]
 800f82a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d132      	bne.n	800f896 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	685a      	ldr	r2, [r3, #4]
 800f834:	4b6b      	ldr	r3, [pc, #428]	; (800f9e4 <tcp_input+0x4a0>)
 800f836:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f838:	429a      	cmp	r2, r3
 800f83a:	d12c      	bne.n	800f896 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	4b68      	ldr	r3, [pc, #416]	; (800f9e4 <tcp_input+0x4a0>)
 800f842:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f844:	429a      	cmp	r2, r3
 800f846:	d126      	bne.n	800f896 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	69fa      	ldr	r2, [r7, #28]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d106      	bne.n	800f860 <tcp_input+0x31c>
 800f852:	4b65      	ldr	r3, [pc, #404]	; (800f9e8 <tcp_input+0x4a4>)
 800f854:	f240 120d 	movw	r2, #269	; 0x10d
 800f858:	4964      	ldr	r1, [pc, #400]	; (800f9ec <tcp_input+0x4a8>)
 800f85a:	4865      	ldr	r0, [pc, #404]	; (800f9f0 <tcp_input+0x4ac>)
 800f85c:	f009 fa78 	bl	8018d50 <iprintf>
      if (prev != NULL) {
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00a      	beq.n	800f87c <tcp_input+0x338>
        prev->next = pcb->next;
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	68da      	ldr	r2, [r3, #12]
 800f86a:	69bb      	ldr	r3, [r7, #24]
 800f86c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f86e:	4b61      	ldr	r3, [pc, #388]	; (800f9f4 <tcp_input+0x4b0>)
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f876:	4a5f      	ldr	r2, [pc, #380]	; (800f9f4 <tcp_input+0x4b0>)
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	69fa      	ldr	r2, [r7, #28]
 800f882:	429a      	cmp	r2, r3
 800f884:	d111      	bne.n	800f8aa <tcp_input+0x366>
 800f886:	4b58      	ldr	r3, [pc, #352]	; (800f9e8 <tcp_input+0x4a4>)
 800f888:	f240 1215 	movw	r2, #277	; 0x115
 800f88c:	495a      	ldr	r1, [pc, #360]	; (800f9f8 <tcp_input+0x4b4>)
 800f88e:	4858      	ldr	r0, [pc, #352]	; (800f9f0 <tcp_input+0x4ac>)
 800f890:	f009 fa5e 	bl	8018d50 <iprintf>
      break;
 800f894:	e009      	b.n	800f8aa <tcp_input+0x366>
    }
    prev = pcb;
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	61fb      	str	r3, [r7, #28]
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f47f af5e 	bne.w	800f764 <tcp_input+0x220>
 800f8a8:	e000      	b.n	800f8ac <tcp_input+0x368>
      break;
 800f8aa:	bf00      	nop
  }

  if (pcb == NULL) {
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f040 80aa 	bne.w	800fa08 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b4:	4b51      	ldr	r3, [pc, #324]	; (800f9fc <tcp_input+0x4b8>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	61fb      	str	r3, [r7, #28]
 800f8ba:	e03f      	b.n	800f93c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	7d1b      	ldrb	r3, [r3, #20]
 800f8c0:	2b0a      	cmp	r3, #10
 800f8c2:	d006      	beq.n	800f8d2 <tcp_input+0x38e>
 800f8c4:	4b48      	ldr	r3, [pc, #288]	; (800f9e8 <tcp_input+0x4a4>)
 800f8c6:	f240 121f 	movw	r2, #287	; 0x11f
 800f8ca:	494d      	ldr	r1, [pc, #308]	; (800fa00 <tcp_input+0x4bc>)
 800f8cc:	4848      	ldr	r0, [pc, #288]	; (800f9f0 <tcp_input+0x4ac>)
 800f8ce:	f009 fa3f 	bl	8018d50 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	7a1b      	ldrb	r3, [r3, #8]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d009      	beq.n	800f8ee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	7a1a      	ldrb	r2, [r3, #8]
 800f8de:	4b41      	ldr	r3, [pc, #260]	; (800f9e4 <tcp_input+0x4a0>)
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d122      	bne.n	800f934 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	8b1a      	ldrh	r2, [r3, #24]
 800f8f2:	4b3b      	ldr	r3, [pc, #236]	; (800f9e0 <tcp_input+0x49c>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	881b      	ldrh	r3, [r3, #0]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d11b      	bne.n	800f936 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	8ada      	ldrh	r2, [r3, #22]
 800f902:	4b37      	ldr	r3, [pc, #220]	; (800f9e0 <tcp_input+0x49c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	885b      	ldrh	r3, [r3, #2]
 800f908:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d113      	bne.n	800f936 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	685a      	ldr	r2, [r3, #4]
 800f912:	4b34      	ldr	r3, [pc, #208]	; (800f9e4 <tcp_input+0x4a0>)
 800f914:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f916:	429a      	cmp	r2, r3
 800f918:	d10d      	bne.n	800f936 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	4b31      	ldr	r3, [pc, #196]	; (800f9e4 <tcp_input+0x4a0>)
 800f920:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f922:	429a      	cmp	r2, r3
 800f924:	d107      	bne.n	800f936 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f926:	69f8      	ldr	r0, [r7, #28]
 800f928:	f000 fb56 	bl	800ffd8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7fd fd4d 	bl	800d3cc <pbuf_free>
        return;
 800f932:	e1fd      	b.n	800fd30 <tcp_input+0x7ec>
        continue;
 800f934:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	61fb      	str	r3, [r7, #28]
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1bc      	bne.n	800f8bc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f942:	2300      	movs	r3, #0
 800f944:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f946:	4b2f      	ldr	r3, [pc, #188]	; (800fa04 <tcp_input+0x4c0>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	617b      	str	r3, [r7, #20]
 800f94c:	e02a      	b.n	800f9a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	7a1b      	ldrb	r3, [r3, #8]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00c      	beq.n	800f970 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	7a1a      	ldrb	r2, [r3, #8]
 800f95a:	4b22      	ldr	r3, [pc, #136]	; (800f9e4 <tcp_input+0x4a0>)
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f962:	3301      	adds	r3, #1
 800f964:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f966:	429a      	cmp	r2, r3
 800f968:	d002      	beq.n	800f970 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	61bb      	str	r3, [r7, #24]
        continue;
 800f96e:	e016      	b.n	800f99e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	8ada      	ldrh	r2, [r3, #22]
 800f974:	4b1a      	ldr	r3, [pc, #104]	; (800f9e0 <tcp_input+0x49c>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	885b      	ldrh	r3, [r3, #2]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d10c      	bne.n	800f99a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	4b17      	ldr	r3, [pc, #92]	; (800f9e4 <tcp_input+0x4a0>)
 800f986:	695b      	ldr	r3, [r3, #20]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d00f      	beq.n	800f9ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00d      	beq.n	800f9ae <tcp_input+0x46a>
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d009      	beq.n	800f9ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	617b      	str	r3, [r7, #20]
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1d1      	bne.n	800f94e <tcp_input+0x40a>
 800f9aa:	e000      	b.n	800f9ae <tcp_input+0x46a>
            break;
 800f9ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d029      	beq.n	800fa08 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00a      	beq.n	800f9d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	68da      	ldr	r2, [r3, #12]
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f9c2:	4b10      	ldr	r3, [pc, #64]	; (800fa04 <tcp_input+0x4c0>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9ca:	4a0e      	ldr	r2, [pc, #56]	; (800fa04 <tcp_input+0x4c0>)
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9d0:	6978      	ldr	r0, [r7, #20]
 800f9d2:	f000 fa03 	bl	800fddc <tcp_listen_input>
      }
      pbuf_free(p);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7fd fcf8 	bl	800d3cc <pbuf_free>
      return;
 800f9dc:	e1a8      	b.n	800fd30 <tcp_input+0x7ec>
 800f9de:	bf00      	nop
 800f9e0:	2001125c 	.word	0x2001125c
 800f9e4:	2000a138 	.word	0x2000a138
 800f9e8:	0801bce8 	.word	0x0801bce8
 800f9ec:	0801be14 	.word	0x0801be14
 800f9f0:	0801bd34 	.word	0x0801bd34
 800f9f4:	20011240 	.word	0x20011240
 800f9f8:	0801be40 	.word	0x0801be40
 800f9fc:	20011244 	.word	0x20011244
 800fa00:	0801be6c 	.word	0x0801be6c
 800fa04:	2001123c 	.word	0x2001123c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f000 8158 	beq.w	800fcc0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fa10:	4b95      	ldr	r3, [pc, #596]	; (800fc68 <tcp_input+0x724>)
 800fa12:	2200      	movs	r2, #0
 800fa14:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	891a      	ldrh	r2, [r3, #8]
 800fa1a:	4b93      	ldr	r3, [pc, #588]	; (800fc68 <tcp_input+0x724>)
 800fa1c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fa1e:	4a92      	ldr	r2, [pc, #584]	; (800fc68 <tcp_input+0x724>)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fa24:	4b91      	ldr	r3, [pc, #580]	; (800fc6c <tcp_input+0x728>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4a8f      	ldr	r2, [pc, #572]	; (800fc68 <tcp_input+0x724>)
 800fa2a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa2c:	4b90      	ldr	r3, [pc, #576]	; (800fc70 <tcp_input+0x72c>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa32:	4b90      	ldr	r3, [pc, #576]	; (800fc74 <tcp_input+0x730>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa38:	4b8f      	ldr	r3, [pc, #572]	; (800fc78 <tcp_input+0x734>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa3e:	4b8f      	ldr	r3, [pc, #572]	; (800fc7c <tcp_input+0x738>)
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	f003 0308 	and.w	r3, r3, #8
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d006      	beq.n	800fa58 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	7b5b      	ldrb	r3, [r3, #13]
 800fa4e:	f043 0301 	orr.w	r3, r3, #1
 800fa52:	b2da      	uxtb	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d017      	beq.n	800fa90 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa60:	69f8      	ldr	r0, [r7, #28]
 800fa62:	f7ff f85b 	bl	800eb1c <tcp_process_refused_data>
 800fa66:	4603      	mov	r3, r0
 800fa68:	f113 0f0d 	cmn.w	r3, #13
 800fa6c:	d007      	beq.n	800fa7e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00c      	beq.n	800fa90 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa76:	4b82      	ldr	r3, [pc, #520]	; (800fc80 <tcp_input+0x73c>)
 800fa78:	881b      	ldrh	r3, [r3, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d008      	beq.n	800fa90 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f040 80e3 	bne.w	800fc4e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa88:	69f8      	ldr	r0, [r7, #28]
 800fa8a:	f003 fe05 	bl	8013698 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa8e:	e0de      	b.n	800fc4e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fa90:	4a7c      	ldr	r2, [pc, #496]	; (800fc84 <tcp_input+0x740>)
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa96:	69f8      	ldr	r0, [r7, #28]
 800fa98:	f000 fb18 	bl	80100cc <tcp_process>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800faa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800faa4:	f113 0f0d 	cmn.w	r3, #13
 800faa8:	f000 80d3 	beq.w	800fc52 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800faac:	4b71      	ldr	r3, [pc, #452]	; (800fc74 <tcp_input+0x730>)
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	f003 0308 	and.w	r3, r3, #8
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d015      	beq.n	800fae4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d008      	beq.n	800fad4 <tcp_input+0x590>
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fac8:	69fa      	ldr	r2, [r7, #28]
 800faca:	6912      	ldr	r2, [r2, #16]
 800facc:	f06f 010d 	mvn.w	r1, #13
 800fad0:	4610      	mov	r0, r2
 800fad2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fad4:	69f9      	ldr	r1, [r7, #28]
 800fad6:	486c      	ldr	r0, [pc, #432]	; (800fc88 <tcp_input+0x744>)
 800fad8:	f7ff fbbc 	bl	800f254 <tcp_pcb_remove>
        tcp_free(pcb);
 800fadc:	69f8      	ldr	r0, [r7, #28]
 800fade:	f7fd ff21 	bl	800d924 <tcp_free>
 800fae2:	e0da      	b.n	800fc9a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fae4:	2300      	movs	r3, #0
 800fae6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fae8:	4b63      	ldr	r3, [pc, #396]	; (800fc78 <tcp_input+0x734>)
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d01d      	beq.n	800fb2c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800faf0:	4b61      	ldr	r3, [pc, #388]	; (800fc78 <tcp_input+0x734>)
 800faf2:	881b      	ldrh	r3, [r3, #0]
 800faf4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00a      	beq.n	800fb16 <tcp_input+0x5d2>
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb06:	69fa      	ldr	r2, [r7, #28]
 800fb08:	6910      	ldr	r0, [r2, #16]
 800fb0a:	89fa      	ldrh	r2, [r7, #14]
 800fb0c:	69f9      	ldr	r1, [r7, #28]
 800fb0e:	4798      	blx	r3
 800fb10:	4603      	mov	r3, r0
 800fb12:	74fb      	strb	r3, [r7, #19]
 800fb14:	e001      	b.n	800fb1a <tcp_input+0x5d6>
 800fb16:	2300      	movs	r3, #0
 800fb18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb1e:	f113 0f0d 	cmn.w	r3, #13
 800fb22:	f000 8098 	beq.w	800fc56 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb26:	4b54      	ldr	r3, [pc, #336]	; (800fc78 <tcp_input+0x734>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb2c:	69f8      	ldr	r0, [r7, #28]
 800fb2e:	f000 f915 	bl	800fd5c <tcp_input_delayed_close>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f040 8090 	bne.w	800fc5a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb3a:	4b4d      	ldr	r3, [pc, #308]	; (800fc70 <tcp_input+0x72c>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d041      	beq.n	800fbc6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d006      	beq.n	800fb58 <tcp_input+0x614>
 800fb4a:	4b50      	ldr	r3, [pc, #320]	; (800fc8c <tcp_input+0x748>)
 800fb4c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb50:	494f      	ldr	r1, [pc, #316]	; (800fc90 <tcp_input+0x74c>)
 800fb52:	4850      	ldr	r0, [pc, #320]	; (800fc94 <tcp_input+0x750>)
 800fb54:	f009 f8fc 	bl	8018d50 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	8b5b      	ldrh	r3, [r3, #26]
 800fb5c:	f003 0310 	and.w	r3, r3, #16
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d008      	beq.n	800fb76 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb64:	4b42      	ldr	r3, [pc, #264]	; (800fc70 <tcp_input+0x72c>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fd fc2f 	bl	800d3cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb6e:	69f8      	ldr	r0, [r7, #28]
 800fb70:	f7fe fa1c 	bl	800dfac <tcp_abort>
            goto aborted;
 800fb74:	e091      	b.n	800fc9a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00c      	beq.n	800fb9a <tcp_input+0x656>
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	6918      	ldr	r0, [r3, #16]
 800fb8a:	4b39      	ldr	r3, [pc, #228]	; (800fc70 <tcp_input+0x72c>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	69f9      	ldr	r1, [r7, #28]
 800fb92:	47a0      	blx	r4
 800fb94:	4603      	mov	r3, r0
 800fb96:	74fb      	strb	r3, [r7, #19]
 800fb98:	e008      	b.n	800fbac <tcp_input+0x668>
 800fb9a:	4b35      	ldr	r3, [pc, #212]	; (800fc70 <tcp_input+0x72c>)
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	2300      	movs	r3, #0
 800fba0:	69f9      	ldr	r1, [r7, #28]
 800fba2:	2000      	movs	r0, #0
 800fba4:	f7ff f890 	bl	800ecc8 <tcp_recv_null>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fbac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbb0:	f113 0f0d 	cmn.w	r3, #13
 800fbb4:	d053      	beq.n	800fc5e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fbb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d003      	beq.n	800fbc6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fbbe:	4b2c      	ldr	r3, [pc, #176]	; (800fc70 <tcp_input+0x72c>)
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fbc6:	4b2b      	ldr	r3, [pc, #172]	; (800fc74 <tcp_input+0x730>)
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	f003 0320 	and.w	r3, r3, #32
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d030      	beq.n	800fc34 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d009      	beq.n	800fbee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbde:	7b5a      	ldrb	r2, [r3, #13]
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbe4:	f042 0220 	orr.w	r2, r2, #32
 800fbe8:	b2d2      	uxtb	r2, r2
 800fbea:	735a      	strb	r2, [r3, #13]
 800fbec:	e022      	b.n	800fc34 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbf6:	d005      	beq.n	800fc04 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00b      	beq.n	800fc26 <tcp_input+0x6e2>
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	6918      	ldr	r0, [r3, #16]
 800fc18:	2300      	movs	r3, #0
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	69f9      	ldr	r1, [r7, #28]
 800fc1e:	47a0      	blx	r4
 800fc20:	4603      	mov	r3, r0
 800fc22:	74fb      	strb	r3, [r7, #19]
 800fc24:	e001      	b.n	800fc2a <tcp_input+0x6e6>
 800fc26:	2300      	movs	r3, #0
 800fc28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc2e:	f113 0f0d 	cmn.w	r3, #13
 800fc32:	d016      	beq.n	800fc62 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc34:	4b13      	ldr	r3, [pc, #76]	; (800fc84 <tcp_input+0x740>)
 800fc36:	2200      	movs	r2, #0
 800fc38:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc3a:	69f8      	ldr	r0, [r7, #28]
 800fc3c:	f000 f88e 	bl	800fd5c <tcp_input_delayed_close>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d128      	bne.n	800fc98 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc46:	69f8      	ldr	r0, [r7, #28]
 800fc48:	f002 ff20 	bl	8012a8c <tcp_output>
 800fc4c:	e025      	b.n	800fc9a <tcp_input+0x756>
        goto aborted;
 800fc4e:	bf00      	nop
 800fc50:	e023      	b.n	800fc9a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc52:	bf00      	nop
 800fc54:	e021      	b.n	800fc9a <tcp_input+0x756>
              goto aborted;
 800fc56:	bf00      	nop
 800fc58:	e01f      	b.n	800fc9a <tcp_input+0x756>
          goto aborted;
 800fc5a:	bf00      	nop
 800fc5c:	e01d      	b.n	800fc9a <tcp_input+0x756>
            goto aborted;
 800fc5e:	bf00      	nop
 800fc60:	e01b      	b.n	800fc9a <tcp_input+0x756>
              goto aborted;
 800fc62:	bf00      	nop
 800fc64:	e019      	b.n	800fc9a <tcp_input+0x756>
 800fc66:	bf00      	nop
 800fc68:	2001124c 	.word	0x2001124c
 800fc6c:	2001125c 	.word	0x2001125c
 800fc70:	2001127c 	.word	0x2001127c
 800fc74:	20011279 	.word	0x20011279
 800fc78:	20011274 	.word	0x20011274
 800fc7c:	20011278 	.word	0x20011278
 800fc80:	20011276 	.word	0x20011276
 800fc84:	20011280 	.word	0x20011280
 800fc88:	20011240 	.word	0x20011240
 800fc8c:	0801bce8 	.word	0x0801bce8
 800fc90:	0801be9c 	.word	0x0801be9c
 800fc94:	0801bd34 	.word	0x0801bd34
          goto aborted;
 800fc98:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc9a:	4b27      	ldr	r3, [pc, #156]	; (800fd38 <tcp_input+0x7f4>)
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fca0:	4b26      	ldr	r3, [pc, #152]	; (800fd3c <tcp_input+0x7f8>)
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fca6:	4b26      	ldr	r3, [pc, #152]	; (800fd40 <tcp_input+0x7fc>)
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d03f      	beq.n	800fd2e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fcae:	4b24      	ldr	r3, [pc, #144]	; (800fd40 <tcp_input+0x7fc>)
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fd fb8a 	bl	800d3cc <pbuf_free>
      inseg.p = NULL;
 800fcb8:	4b21      	ldr	r3, [pc, #132]	; (800fd40 <tcp_input+0x7fc>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fcbe:	e036      	b.n	800fd2e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fcc0:	4b20      	ldr	r3, [pc, #128]	; (800fd44 <tcp_input+0x800>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	899b      	ldrh	r3, [r3, #12]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7fb ff7d 	bl	800bbc8 <lwip_htons>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	f003 0304 	and.w	r3, r3, #4
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d118      	bne.n	800fd0c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcda:	4b1b      	ldr	r3, [pc, #108]	; (800fd48 <tcp_input+0x804>)
 800fcdc:	6819      	ldr	r1, [r3, #0]
 800fcde:	4b1b      	ldr	r3, [pc, #108]	; (800fd4c <tcp_input+0x808>)
 800fce0:	881b      	ldrh	r3, [r3, #0]
 800fce2:	461a      	mov	r2, r3
 800fce4:	4b1a      	ldr	r3, [pc, #104]	; (800fd50 <tcp_input+0x80c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcea:	4b16      	ldr	r3, [pc, #88]	; (800fd44 <tcp_input+0x800>)
 800fcec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcee:	885b      	ldrh	r3, [r3, #2]
 800fcf0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcf2:	4a14      	ldr	r2, [pc, #80]	; (800fd44 <tcp_input+0x800>)
 800fcf4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf6:	8812      	ldrh	r2, [r2, #0]
 800fcf8:	b292      	uxth	r2, r2
 800fcfa:	9202      	str	r2, [sp, #8]
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	4b15      	ldr	r3, [pc, #84]	; (800fd54 <tcp_input+0x810>)
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	4b15      	ldr	r3, [pc, #84]	; (800fd58 <tcp_input+0x814>)
 800fd04:	4602      	mov	r2, r0
 800fd06:	2000      	movs	r0, #0
 800fd08:	f003 fc74 	bl	80135f4 <tcp_rst>
    pbuf_free(p);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7fd fb5d 	bl	800d3cc <pbuf_free>
  return;
 800fd12:	e00c      	b.n	800fd2e <tcp_input+0x7ea>
    goto dropped;
 800fd14:	bf00      	nop
 800fd16:	e006      	b.n	800fd26 <tcp_input+0x7e2>
    goto dropped;
 800fd18:	bf00      	nop
 800fd1a:	e004      	b.n	800fd26 <tcp_input+0x7e2>
    goto dropped;
 800fd1c:	bf00      	nop
 800fd1e:	e002      	b.n	800fd26 <tcp_input+0x7e2>
      goto dropped;
 800fd20:	bf00      	nop
 800fd22:	e000      	b.n	800fd26 <tcp_input+0x7e2>
      goto dropped;
 800fd24:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7fd fb50 	bl	800d3cc <pbuf_free>
 800fd2c:	e000      	b.n	800fd30 <tcp_input+0x7ec>
  return;
 800fd2e:	bf00      	nop
}
 800fd30:	3724      	adds	r7, #36	; 0x24
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd90      	pop	{r4, r7, pc}
 800fd36:	bf00      	nop
 800fd38:	20011280 	.word	0x20011280
 800fd3c:	2001127c 	.word	0x2001127c
 800fd40:	2001124c 	.word	0x2001124c
 800fd44:	2001125c 	.word	0x2001125c
 800fd48:	20011270 	.word	0x20011270
 800fd4c:	20011276 	.word	0x20011276
 800fd50:	2001126c 	.word	0x2001126c
 800fd54:	2000a148 	.word	0x2000a148
 800fd58:	2000a14c 	.word	0x2000a14c

0800fd5c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d106      	bne.n	800fd78 <tcp_input_delayed_close+0x1c>
 800fd6a:	4b17      	ldr	r3, [pc, #92]	; (800fdc8 <tcp_input_delayed_close+0x6c>)
 800fd6c:	f240 225a 	movw	r2, #602	; 0x25a
 800fd70:	4916      	ldr	r1, [pc, #88]	; (800fdcc <tcp_input_delayed_close+0x70>)
 800fd72:	4817      	ldr	r0, [pc, #92]	; (800fdd0 <tcp_input_delayed_close+0x74>)
 800fd74:	f008 ffec 	bl	8018d50 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd78:	4b16      	ldr	r3, [pc, #88]	; (800fdd4 <tcp_input_delayed_close+0x78>)
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	f003 0310 	and.w	r3, r3, #16
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d01c      	beq.n	800fdbe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	8b5b      	ldrh	r3, [r3, #26]
 800fd88:	f003 0310 	and.w	r3, r3, #16
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10d      	bne.n	800fdac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d008      	beq.n	800fdac <tcp_input_delayed_close+0x50>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	6912      	ldr	r2, [r2, #16]
 800fda4:	f06f 010e 	mvn.w	r1, #14
 800fda8:	4610      	mov	r0, r2
 800fdaa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fdac:	6879      	ldr	r1, [r7, #4]
 800fdae:	480a      	ldr	r0, [pc, #40]	; (800fdd8 <tcp_input_delayed_close+0x7c>)
 800fdb0:	f7ff fa50 	bl	800f254 <tcp_pcb_remove>
    tcp_free(pcb);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7fd fdb5 	bl	800d924 <tcp_free>
    return 1;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	0801bce8 	.word	0x0801bce8
 800fdcc:	0801beb8 	.word	0x0801beb8
 800fdd0:	0801bd34 	.word	0x0801bd34
 800fdd4:	20011279 	.word	0x20011279
 800fdd8:	20011240 	.word	0x20011240

0800fddc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fddc:	b590      	push	{r4, r7, lr}
 800fdde:	b08b      	sub	sp, #44	; 0x2c
 800fde0:	af04      	add	r7, sp, #16
 800fde2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fde4:	4b6f      	ldr	r3, [pc, #444]	; (800ffa4 <tcp_listen_input+0x1c8>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	f003 0304 	and.w	r3, r3, #4
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f040 80d2 	bne.w	800ff96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d106      	bne.n	800fe06 <tcp_listen_input+0x2a>
 800fdf8:	4b6b      	ldr	r3, [pc, #428]	; (800ffa8 <tcp_listen_input+0x1cc>)
 800fdfa:	f240 2281 	movw	r2, #641	; 0x281
 800fdfe:	496b      	ldr	r1, [pc, #428]	; (800ffac <tcp_listen_input+0x1d0>)
 800fe00:	486b      	ldr	r0, [pc, #428]	; (800ffb0 <tcp_listen_input+0x1d4>)
 800fe02:	f008 ffa5 	bl	8018d50 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fe06:	4b67      	ldr	r3, [pc, #412]	; (800ffa4 <tcp_listen_input+0x1c8>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	f003 0310 	and.w	r3, r3, #16
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d019      	beq.n	800fe46 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe12:	4b68      	ldr	r3, [pc, #416]	; (800ffb4 <tcp_listen_input+0x1d8>)
 800fe14:	6819      	ldr	r1, [r3, #0]
 800fe16:	4b68      	ldr	r3, [pc, #416]	; (800ffb8 <tcp_listen_input+0x1dc>)
 800fe18:	881b      	ldrh	r3, [r3, #0]
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	4b67      	ldr	r3, [pc, #412]	; (800ffbc <tcp_listen_input+0x1e0>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe22:	4b67      	ldr	r3, [pc, #412]	; (800ffc0 <tcp_listen_input+0x1e4>)
 800fe24:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe26:	885b      	ldrh	r3, [r3, #2]
 800fe28:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe2a:	4a65      	ldr	r2, [pc, #404]	; (800ffc0 <tcp_listen_input+0x1e4>)
 800fe2c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe2e:	8812      	ldrh	r2, [r2, #0]
 800fe30:	b292      	uxth	r2, r2
 800fe32:	9202      	str	r2, [sp, #8]
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	4b63      	ldr	r3, [pc, #396]	; (800ffc4 <tcp_listen_input+0x1e8>)
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	4b63      	ldr	r3, [pc, #396]	; (800ffc8 <tcp_listen_input+0x1ec>)
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f003 fbd8 	bl	80135f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe44:	e0a9      	b.n	800ff9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe46:	4b57      	ldr	r3, [pc, #348]	; (800ffa4 <tcp_listen_input+0x1c8>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 0302 	and.w	r3, r3, #2
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f000 80a3 	beq.w	800ff9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	7d5b      	ldrb	r3, [r3, #21]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff f859 	bl	800ef10 <tcp_alloc>
 800fe5e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d111      	bne.n	800fe8a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	699b      	ldr	r3, [r3, #24]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00a      	beq.n	800fe84 <tcp_listen_input+0xa8>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	699b      	ldr	r3, [r3, #24]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	6910      	ldr	r0, [r2, #16]
 800fe76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	4798      	blx	r3
 800fe7e:	4603      	mov	r3, r0
 800fe80:	73bb      	strb	r3, [r7, #14]
      return;
 800fe82:	e08b      	b.n	800ff9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe84:	23f0      	movs	r3, #240	; 0xf0
 800fe86:	73bb      	strb	r3, [r7, #14]
      return;
 800fe88:	e088      	b.n	800ff9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe8a:	4b50      	ldr	r3, [pc, #320]	; (800ffcc <tcp_listen_input+0x1f0>)
 800fe8c:	695a      	ldr	r2, [r3, #20]
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe92:	4b4e      	ldr	r3, [pc, #312]	; (800ffcc <tcp_listen_input+0x1f0>)
 800fe94:	691a      	ldr	r2, [r3, #16]
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	8ada      	ldrh	r2, [r3, #22]
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fea2:	4b47      	ldr	r3, [pc, #284]	; (800ffc0 <tcp_listen_input+0x1e4>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	881b      	ldrh	r3, [r3, #0]
 800fea8:	b29a      	uxth	r2, r3
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	2203      	movs	r2, #3
 800feb2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800feb4:	4b41      	ldr	r3, [pc, #260]	; (800ffbc <tcp_listen_input+0x1e0>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	1c5a      	adds	r2, r3, #1
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fec6:	6978      	ldr	r0, [r7, #20]
 800fec8:	f7ff fa58 	bl	800f37c <tcp_next_iss>
 800fecc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	693a      	ldr	r2, [r7, #16]
 800fed8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	693a      	ldr	r2, [r7, #16]
 800fede:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	693a      	ldr	r2, [r7, #16]
 800fee4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fee6:	4b35      	ldr	r3, [pc, #212]	; (800ffbc <tcp_listen_input+0x1e0>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	1e5a      	subs	r2, r3, #1
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	691a      	ldr	r2, [r3, #16]
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	7a5b      	ldrb	r3, [r3, #9]
 800ff02:	f003 030c 	and.w	r3, r3, #12
 800ff06:	b2da      	uxtb	r2, r3
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	7a1a      	ldrb	r2, [r3, #8]
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ff14:	4b2e      	ldr	r3, [pc, #184]	; (800ffd0 <tcp_listen_input+0x1f4>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	60da      	str	r2, [r3, #12]
 800ff1c:	4a2c      	ldr	r2, [pc, #176]	; (800ffd0 <tcp_listen_input+0x1f4>)
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	6013      	str	r3, [r2, #0]
 800ff22:	f003 fd29 	bl	8013978 <tcp_timer_needed>
 800ff26:	4b2b      	ldr	r3, [pc, #172]	; (800ffd4 <tcp_listen_input+0x1f8>)
 800ff28:	2201      	movs	r2, #1
 800ff2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff2c:	6978      	ldr	r0, [r7, #20]
 800ff2e:	f001 fd8f 	bl	8011a50 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff32:	4b23      	ldr	r3, [pc, #140]	; (800ffc0 <tcp_listen_input+0x1e4>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	89db      	ldrh	r3, [r3, #14]
 800ff38:	b29a      	uxth	r2, r3
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	3304      	adds	r3, #4
 800ff54:	4618      	mov	r0, r3
 800ff56:	f005 fad1 	bl	80154fc <ip4_route>
 800ff5a:	4601      	mov	r1, r0
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	3304      	adds	r3, #4
 800ff60:	461a      	mov	r2, r3
 800ff62:	4620      	mov	r0, r4
 800ff64:	f7ff fa30 	bl	800f3c8 <tcp_eff_send_mss_netif>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff70:	2112      	movs	r1, #18
 800ff72:	6978      	ldr	r0, [r7, #20]
 800ff74:	f002 fc9c 	bl	80128b0 <tcp_enqueue_flags>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d004      	beq.n	800ff8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff84:	2100      	movs	r1, #0
 800ff86:	6978      	ldr	r0, [r7, #20]
 800ff88:	f7fd ff52 	bl	800de30 <tcp_abandon>
      return;
 800ff8c:	e006      	b.n	800ff9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff8e:	6978      	ldr	r0, [r7, #20]
 800ff90:	f002 fd7c 	bl	8012a8c <tcp_output>
  return;
 800ff94:	e001      	b.n	800ff9a <tcp_listen_input+0x1be>
    return;
 800ff96:	bf00      	nop
 800ff98:	e000      	b.n	800ff9c <tcp_listen_input+0x1c0>
  return;
 800ff9a:	bf00      	nop
}
 800ff9c:	371c      	adds	r7, #28
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd90      	pop	{r4, r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20011278 	.word	0x20011278
 800ffa8:	0801bce8 	.word	0x0801bce8
 800ffac:	0801bee0 	.word	0x0801bee0
 800ffb0:	0801bd34 	.word	0x0801bd34
 800ffb4:	20011270 	.word	0x20011270
 800ffb8:	20011276 	.word	0x20011276
 800ffbc:	2001126c 	.word	0x2001126c
 800ffc0:	2001125c 	.word	0x2001125c
 800ffc4:	2000a148 	.word	0x2000a148
 800ffc8:	2000a14c 	.word	0x2000a14c
 800ffcc:	2000a138 	.word	0x2000a138
 800ffd0:	20011240 	.word	0x20011240
 800ffd4:	20011248 	.word	0x20011248

0800ffd8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af04      	add	r7, sp, #16
 800ffde:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ffe0:	4b2f      	ldr	r3, [pc, #188]	; (80100a0 <tcp_timewait_input+0xc8>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	f003 0304 	and.w	r3, r3, #4
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d153      	bne.n	8010094 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d106      	bne.n	8010000 <tcp_timewait_input+0x28>
 800fff2:	4b2c      	ldr	r3, [pc, #176]	; (80100a4 <tcp_timewait_input+0xcc>)
 800fff4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fff8:	492b      	ldr	r1, [pc, #172]	; (80100a8 <tcp_timewait_input+0xd0>)
 800fffa:	482c      	ldr	r0, [pc, #176]	; (80100ac <tcp_timewait_input+0xd4>)
 800fffc:	f008 fea8 	bl	8018d50 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010000:	4b27      	ldr	r3, [pc, #156]	; (80100a0 <tcp_timewait_input+0xc8>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	f003 0302 	and.w	r3, r3, #2
 8010008:	2b00      	cmp	r3, #0
 801000a:	d02a      	beq.n	8010062 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801000c:	4b28      	ldr	r3, [pc, #160]	; (80100b0 <tcp_timewait_input+0xd8>)
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	db2d      	blt.n	8010076 <tcp_timewait_input+0x9e>
 801001a:	4b25      	ldr	r3, [pc, #148]	; (80100b0 <tcp_timewait_input+0xd8>)
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010022:	6879      	ldr	r1, [r7, #4]
 8010024:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010026:	440b      	add	r3, r1
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	dc23      	bgt.n	8010076 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801002e:	4b21      	ldr	r3, [pc, #132]	; (80100b4 <tcp_timewait_input+0xdc>)
 8010030:	6819      	ldr	r1, [r3, #0]
 8010032:	4b21      	ldr	r3, [pc, #132]	; (80100b8 <tcp_timewait_input+0xe0>)
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	461a      	mov	r2, r3
 8010038:	4b1d      	ldr	r3, [pc, #116]	; (80100b0 <tcp_timewait_input+0xd8>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801003e:	4b1f      	ldr	r3, [pc, #124]	; (80100bc <tcp_timewait_input+0xe4>)
 8010040:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010042:	885b      	ldrh	r3, [r3, #2]
 8010044:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010046:	4a1d      	ldr	r2, [pc, #116]	; (80100bc <tcp_timewait_input+0xe4>)
 8010048:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801004a:	8812      	ldrh	r2, [r2, #0]
 801004c:	b292      	uxth	r2, r2
 801004e:	9202      	str	r2, [sp, #8]
 8010050:	9301      	str	r3, [sp, #4]
 8010052:	4b1b      	ldr	r3, [pc, #108]	; (80100c0 <tcp_timewait_input+0xe8>)
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	4b1b      	ldr	r3, [pc, #108]	; (80100c4 <tcp_timewait_input+0xec>)
 8010058:	4602      	mov	r2, r0
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f003 faca 	bl	80135f4 <tcp_rst>
      return;
 8010060:	e01b      	b.n	801009a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010062:	4b0f      	ldr	r3, [pc, #60]	; (80100a0 <tcp_timewait_input+0xc8>)
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	f003 0301 	and.w	r3, r3, #1
 801006a:	2b00      	cmp	r3, #0
 801006c:	d003      	beq.n	8010076 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801006e:	4b16      	ldr	r3, [pc, #88]	; (80100c8 <tcp_timewait_input+0xf0>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010076:	4b10      	ldr	r3, [pc, #64]	; (80100b8 <tcp_timewait_input+0xe0>)
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00c      	beq.n	8010098 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	8b5b      	ldrh	r3, [r3, #26]
 8010082:	f043 0302 	orr.w	r3, r3, #2
 8010086:	b29a      	uxth	r2, r3
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f002 fcfd 	bl	8012a8c <tcp_output>
  }
  return;
 8010092:	e001      	b.n	8010098 <tcp_timewait_input+0xc0>
    return;
 8010094:	bf00      	nop
 8010096:	e000      	b.n	801009a <tcp_timewait_input+0xc2>
  return;
 8010098:	bf00      	nop
}
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	20011278 	.word	0x20011278
 80100a4:	0801bce8 	.word	0x0801bce8
 80100a8:	0801bf00 	.word	0x0801bf00
 80100ac:	0801bd34 	.word	0x0801bd34
 80100b0:	2001126c 	.word	0x2001126c
 80100b4:	20011270 	.word	0x20011270
 80100b8:	20011276 	.word	0x20011276
 80100bc:	2001125c 	.word	0x2001125c
 80100c0:	2000a148 	.word	0x2000a148
 80100c4:	2000a14c 	.word	0x2000a14c
 80100c8:	20011234 	.word	0x20011234

080100cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100cc:	b590      	push	{r4, r7, lr}
 80100ce:	b08d      	sub	sp, #52	; 0x34
 80100d0:	af04      	add	r7, sp, #16
 80100d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100d4:	2300      	movs	r3, #0
 80100d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100d8:	2300      	movs	r3, #0
 80100da:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d106      	bne.n	80100f0 <tcp_process+0x24>
 80100e2:	4b9d      	ldr	r3, [pc, #628]	; (8010358 <tcp_process+0x28c>)
 80100e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80100e8:	499c      	ldr	r1, [pc, #624]	; (801035c <tcp_process+0x290>)
 80100ea:	489d      	ldr	r0, [pc, #628]	; (8010360 <tcp_process+0x294>)
 80100ec:	f008 fe30 	bl	8018d50 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80100f0:	4b9c      	ldr	r3, [pc, #624]	; (8010364 <tcp_process+0x298>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 0304 	and.w	r3, r3, #4
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d04e      	beq.n	801019a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	7d1b      	ldrb	r3, [r3, #20]
 8010100:	2b02      	cmp	r3, #2
 8010102:	d108      	bne.n	8010116 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010108:	4b97      	ldr	r3, [pc, #604]	; (8010368 <tcp_process+0x29c>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	429a      	cmp	r2, r3
 801010e:	d123      	bne.n	8010158 <tcp_process+0x8c>
        acceptable = 1;
 8010110:	2301      	movs	r3, #1
 8010112:	76fb      	strb	r3, [r7, #27]
 8010114:	e020      	b.n	8010158 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801011a:	4b94      	ldr	r3, [pc, #592]	; (801036c <tcp_process+0x2a0>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d102      	bne.n	8010128 <tcp_process+0x5c>
        acceptable = 1;
 8010122:	2301      	movs	r3, #1
 8010124:	76fb      	strb	r3, [r7, #27]
 8010126:	e017      	b.n	8010158 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010128:	4b90      	ldr	r3, [pc, #576]	; (801036c <tcp_process+0x2a0>)
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	2b00      	cmp	r3, #0
 8010134:	db10      	blt.n	8010158 <tcp_process+0x8c>
 8010136:	4b8d      	ldr	r3, [pc, #564]	; (801036c <tcp_process+0x2a0>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013e:	6879      	ldr	r1, [r7, #4]
 8010140:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010142:	440b      	add	r3, r1
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	dc06      	bgt.n	8010158 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	8b5b      	ldrh	r3, [r3, #26]
 801014e:	f043 0302 	orr.w	r3, r3, #2
 8010152:	b29a      	uxth	r2, r3
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010158:	7efb      	ldrb	r3, [r7, #27]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d01b      	beq.n	8010196 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7d1b      	ldrb	r3, [r3, #20]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d106      	bne.n	8010174 <tcp_process+0xa8>
 8010166:	4b7c      	ldr	r3, [pc, #496]	; (8010358 <tcp_process+0x28c>)
 8010168:	f44f 724e 	mov.w	r2, #824	; 0x338
 801016c:	4980      	ldr	r1, [pc, #512]	; (8010370 <tcp_process+0x2a4>)
 801016e:	487c      	ldr	r0, [pc, #496]	; (8010360 <tcp_process+0x294>)
 8010170:	f008 fdee 	bl	8018d50 <iprintf>
      recv_flags |= TF_RESET;
 8010174:	4b7f      	ldr	r3, [pc, #508]	; (8010374 <tcp_process+0x2a8>)
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	f043 0308 	orr.w	r3, r3, #8
 801017c:	b2da      	uxtb	r2, r3
 801017e:	4b7d      	ldr	r3, [pc, #500]	; (8010374 <tcp_process+0x2a8>)
 8010180:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	8b5b      	ldrh	r3, [r3, #26]
 8010186:	f023 0301 	bic.w	r3, r3, #1
 801018a:	b29a      	uxth	r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010190:	f06f 030d 	mvn.w	r3, #13
 8010194:	e37a      	b.n	801088c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010196:	2300      	movs	r3, #0
 8010198:	e378      	b.n	801088c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801019a:	4b72      	ldr	r3, [pc, #456]	; (8010364 <tcp_process+0x298>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 0302 	and.w	r3, r3, #2
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d010      	beq.n	80101c8 <tcp_process+0xfc>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	7d1b      	ldrb	r3, [r3, #20]
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d00c      	beq.n	80101c8 <tcp_process+0xfc>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	7d1b      	ldrb	r3, [r3, #20]
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d008      	beq.n	80101c8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	8b5b      	ldrh	r3, [r3, #26]
 80101ba:	f043 0302 	orr.w	r3, r3, #2
 80101be:	b29a      	uxth	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	e361      	b.n	801088c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	8b5b      	ldrh	r3, [r3, #26]
 80101cc:	f003 0310 	and.w	r3, r3, #16
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d103      	bne.n	80101dc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101d4:	4b68      	ldr	r3, [pc, #416]	; (8010378 <tcp_process+0x2ac>)
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f001 fc2f 	bl	8011a50 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	7d1b      	ldrb	r3, [r3, #20]
 80101f6:	3b02      	subs	r3, #2
 80101f8:	2b07      	cmp	r3, #7
 80101fa:	f200 8337 	bhi.w	801086c <tcp_process+0x7a0>
 80101fe:	a201      	add	r2, pc, #4	; (adr r2, 8010204 <tcp_process+0x138>)
 8010200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010204:	08010225 	.word	0x08010225
 8010208:	08010455 	.word	0x08010455
 801020c:	080105cd 	.word	0x080105cd
 8010210:	080105f7 	.word	0x080105f7
 8010214:	0801071b 	.word	0x0801071b
 8010218:	080105cd 	.word	0x080105cd
 801021c:	080107a7 	.word	0x080107a7
 8010220:	08010837 	.word	0x08010837
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010224:	4b4f      	ldr	r3, [pc, #316]	; (8010364 <tcp_process+0x298>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	f003 0310 	and.w	r3, r3, #16
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 80e4 	beq.w	80103fa <tcp_process+0x32e>
 8010232:	4b4c      	ldr	r3, [pc, #304]	; (8010364 <tcp_process+0x298>)
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	f003 0302 	and.w	r3, r3, #2
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 80dd 	beq.w	80103fa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010244:	1c5a      	adds	r2, r3, #1
 8010246:	4b48      	ldr	r3, [pc, #288]	; (8010368 <tcp_process+0x29c>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	429a      	cmp	r2, r3
 801024c:	f040 80d5 	bne.w	80103fa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010250:	4b46      	ldr	r3, [pc, #280]	; (801036c <tcp_process+0x2a0>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	1c5a      	adds	r2, r3, #1
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010262:	4b41      	ldr	r3, [pc, #260]	; (8010368 <tcp_process+0x29c>)
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801026a:	4b44      	ldr	r3, [pc, #272]	; (801037c <tcp_process+0x2b0>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	89db      	ldrh	r3, [r3, #14]
 8010270:	b29a      	uxth	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010284:	4b39      	ldr	r3, [pc, #228]	; (801036c <tcp_process+0x2a0>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	1e5a      	subs	r2, r3, #1
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2204      	movs	r2, #4
 8010292:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	3304      	adds	r3, #4
 801029c:	4618      	mov	r0, r3
 801029e:	f005 f92d 	bl	80154fc <ip4_route>
 80102a2:	4601      	mov	r1, r0
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	3304      	adds	r3, #4
 80102a8:	461a      	mov	r2, r3
 80102aa:	4620      	mov	r0, r4
 80102ac:	f7ff f88c 	bl	800f3c8 <tcp_eff_send_mss_netif>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102bc:	009a      	lsls	r2, r3, #2
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102c2:	005b      	lsls	r3, r3, #1
 80102c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80102c8:	428b      	cmp	r3, r1
 80102ca:	bf38      	it	cc
 80102cc:	460b      	movcc	r3, r1
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d204      	bcs.n	80102dc <tcp_process+0x210>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	b29b      	uxth	r3, r3
 80102da:	e00d      	b.n	80102f8 <tcp_process+0x22c>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d904      	bls.n	80102f4 <tcp_process+0x228>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102ee:	005b      	lsls	r3, r3, #1
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	e001      	b.n	80102f8 <tcp_process+0x22c>
 80102f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010304:	2b00      	cmp	r3, #0
 8010306:	d106      	bne.n	8010316 <tcp_process+0x24a>
 8010308:	4b13      	ldr	r3, [pc, #76]	; (8010358 <tcp_process+0x28c>)
 801030a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801030e:	491c      	ldr	r1, [pc, #112]	; (8010380 <tcp_process+0x2b4>)
 8010310:	4813      	ldr	r0, [pc, #76]	; (8010360 <tcp_process+0x294>)
 8010312:	f008 fd1d 	bl	8018d50 <iprintf>
        --pcb->snd_queuelen;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801031c:	3b01      	subs	r3, #1
 801031e:	b29a      	uxth	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801032a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d12a      	bne.n	8010388 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010336:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d106      	bne.n	801034c <tcp_process+0x280>
 801033e:	4b06      	ldr	r3, [pc, #24]	; (8010358 <tcp_process+0x28c>)
 8010340:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010344:	490f      	ldr	r1, [pc, #60]	; (8010384 <tcp_process+0x2b8>)
 8010346:	4806      	ldr	r0, [pc, #24]	; (8010360 <tcp_process+0x294>)
 8010348:	f008 fd02 	bl	8018d50 <iprintf>
          pcb->unsent = rseg->next;
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	66da      	str	r2, [r3, #108]	; 0x6c
 8010354:	e01c      	b.n	8010390 <tcp_process+0x2c4>
 8010356:	bf00      	nop
 8010358:	0801bce8 	.word	0x0801bce8
 801035c:	0801bf20 	.word	0x0801bf20
 8010360:	0801bd34 	.word	0x0801bd34
 8010364:	20011278 	.word	0x20011278
 8010368:	20011270 	.word	0x20011270
 801036c:	2001126c 	.word	0x2001126c
 8010370:	0801bf3c 	.word	0x0801bf3c
 8010374:	20011279 	.word	0x20011279
 8010378:	20011234 	.word	0x20011234
 801037c:	2001125c 	.word	0x2001125c
 8010380:	0801bf5c 	.word	0x0801bf5c
 8010384:	0801bf74 	.word	0x0801bf74
        } else {
          pcb->unacked = rseg->next;
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010390:	69f8      	ldr	r0, [r7, #28]
 8010392:	f7fe fc54 	bl	800ec3e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801039a:	2b00      	cmp	r3, #0
 801039c:	d104      	bne.n	80103a8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103a4:	861a      	strh	r2, [r3, #48]	; 0x30
 80103a6:	e006      	b.n	80103b6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2200      	movs	r2, #0
 80103b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00a      	beq.n	80103d6 <tcp_process+0x30a>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	6910      	ldr	r0, [r2, #16]
 80103ca:	2200      	movs	r2, #0
 80103cc:	6879      	ldr	r1, [r7, #4]
 80103ce:	4798      	blx	r3
 80103d0:	4603      	mov	r3, r0
 80103d2:	76bb      	strb	r3, [r7, #26]
 80103d4:	e001      	b.n	80103da <tcp_process+0x30e>
 80103d6:	2300      	movs	r3, #0
 80103d8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103de:	f113 0f0d 	cmn.w	r3, #13
 80103e2:	d102      	bne.n	80103ea <tcp_process+0x31e>
          return ERR_ABRT;
 80103e4:	f06f 030c 	mvn.w	r3, #12
 80103e8:	e250      	b.n	801088c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	8b5b      	ldrh	r3, [r3, #26]
 80103ee:	f043 0302 	orr.w	r3, r3, #2
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80103f8:	e23a      	b.n	8010870 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80103fa:	4b98      	ldr	r3, [pc, #608]	; (801065c <tcp_process+0x590>)
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	f003 0310 	and.w	r3, r3, #16
 8010402:	2b00      	cmp	r3, #0
 8010404:	f000 8234 	beq.w	8010870 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010408:	4b95      	ldr	r3, [pc, #596]	; (8010660 <tcp_process+0x594>)
 801040a:	6819      	ldr	r1, [r3, #0]
 801040c:	4b95      	ldr	r3, [pc, #596]	; (8010664 <tcp_process+0x598>)
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	461a      	mov	r2, r3
 8010412:	4b95      	ldr	r3, [pc, #596]	; (8010668 <tcp_process+0x59c>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010418:	4b94      	ldr	r3, [pc, #592]	; (801066c <tcp_process+0x5a0>)
 801041a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801041c:	885b      	ldrh	r3, [r3, #2]
 801041e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010420:	4a92      	ldr	r2, [pc, #584]	; (801066c <tcp_process+0x5a0>)
 8010422:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010424:	8812      	ldrh	r2, [r2, #0]
 8010426:	b292      	uxth	r2, r2
 8010428:	9202      	str	r2, [sp, #8]
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	4b90      	ldr	r3, [pc, #576]	; (8010670 <tcp_process+0x5a4>)
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	4b90      	ldr	r3, [pc, #576]	; (8010674 <tcp_process+0x5a8>)
 8010432:	4602      	mov	r2, r0
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f003 f8dd 	bl	80135f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010440:	2b05      	cmp	r3, #5
 8010442:	f200 8215 	bhi.w	8010870 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2200      	movs	r2, #0
 801044a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f002 fea7 	bl	80131a0 <tcp_rexmit_rto>
      break;
 8010452:	e20d      	b.n	8010870 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010454:	4b81      	ldr	r3, [pc, #516]	; (801065c <tcp_process+0x590>)
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 0310 	and.w	r3, r3, #16
 801045c:	2b00      	cmp	r3, #0
 801045e:	f000 80a1 	beq.w	80105a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010462:	4b7f      	ldr	r3, [pc, #508]	; (8010660 <tcp_process+0x594>)
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	3b01      	subs	r3, #1
 801046e:	2b00      	cmp	r3, #0
 8010470:	db7e      	blt.n	8010570 <tcp_process+0x4a4>
 8010472:	4b7b      	ldr	r3, [pc, #492]	; (8010660 <tcp_process+0x594>)
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801047a:	1ad3      	subs	r3, r2, r3
 801047c:	2b00      	cmp	r3, #0
 801047e:	dc77      	bgt.n	8010570 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2204      	movs	r2, #4
 8010484:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801048a:	2b00      	cmp	r3, #0
 801048c:	d102      	bne.n	8010494 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801048e:	23fa      	movs	r3, #250	; 0xfa
 8010490:	76bb      	strb	r3, [r7, #26]
 8010492:	e01d      	b.n	80104d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010498:	699b      	ldr	r3, [r3, #24]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d106      	bne.n	80104ac <tcp_process+0x3e0>
 801049e:	4b76      	ldr	r3, [pc, #472]	; (8010678 <tcp_process+0x5ac>)
 80104a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80104a4:	4975      	ldr	r1, [pc, #468]	; (801067c <tcp_process+0x5b0>)
 80104a6:	4876      	ldr	r0, [pc, #472]	; (8010680 <tcp_process+0x5b4>)
 80104a8:	f008 fc52 	bl	8018d50 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b0:	699b      	ldr	r3, [r3, #24]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00a      	beq.n	80104cc <tcp_process+0x400>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104ba:	699b      	ldr	r3, [r3, #24]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	6910      	ldr	r0, [r2, #16]
 80104c0:	2200      	movs	r2, #0
 80104c2:	6879      	ldr	r1, [r7, #4]
 80104c4:	4798      	blx	r3
 80104c6:	4603      	mov	r3, r0
 80104c8:	76bb      	strb	r3, [r7, #26]
 80104ca:	e001      	b.n	80104d0 <tcp_process+0x404>
 80104cc:	23f0      	movs	r3, #240	; 0xf0
 80104ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00a      	beq.n	80104ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104dc:	f113 0f0d 	cmn.w	r3, #13
 80104e0:	d002      	beq.n	80104e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f7fd fd62 	bl	800dfac <tcp_abort>
            }
            return ERR_ABRT;
 80104e8:	f06f 030c 	mvn.w	r3, #12
 80104ec:	e1ce      	b.n	801088c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 fae0 	bl	8010ab4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80104f4:	4b63      	ldr	r3, [pc, #396]	; (8010684 <tcp_process+0x5b8>)
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d005      	beq.n	8010508 <tcp_process+0x43c>
            recv_acked--;
 80104fc:	4b61      	ldr	r3, [pc, #388]	; (8010684 <tcp_process+0x5b8>)
 80104fe:	881b      	ldrh	r3, [r3, #0]
 8010500:	3b01      	subs	r3, #1
 8010502:	b29a      	uxth	r2, r3
 8010504:	4b5f      	ldr	r3, [pc, #380]	; (8010684 <tcp_process+0x5b8>)
 8010506:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801050c:	009a      	lsls	r2, r3, #2
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010512:	005b      	lsls	r3, r3, #1
 8010514:	f241 111c 	movw	r1, #4380	; 0x111c
 8010518:	428b      	cmp	r3, r1
 801051a:	bf38      	it	cc
 801051c:	460b      	movcc	r3, r1
 801051e:	429a      	cmp	r2, r3
 8010520:	d204      	bcs.n	801052c <tcp_process+0x460>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	b29b      	uxth	r3, r3
 801052a:	e00d      	b.n	8010548 <tcp_process+0x47c>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	f241 121c 	movw	r2, #4380	; 0x111c
 8010536:	4293      	cmp	r3, r2
 8010538:	d904      	bls.n	8010544 <tcp_process+0x478>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801053e:	005b      	lsls	r3, r3, #1
 8010540:	b29b      	uxth	r3, r3
 8010542:	e001      	b.n	8010548 <tcp_process+0x47c>
 8010544:	f241 131c 	movw	r3, #4380	; 0x111c
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801054e:	4b4e      	ldr	r3, [pc, #312]	; (8010688 <tcp_process+0x5bc>)
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	f003 0320 	and.w	r3, r3, #32
 8010556:	2b00      	cmp	r3, #0
 8010558:	d037      	beq.n	80105ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	8b5b      	ldrh	r3, [r3, #26]
 801055e:	f043 0302 	orr.w	r3, r3, #2
 8010562:	b29a      	uxth	r2, r3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2207      	movs	r2, #7
 801056c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801056e:	e02c      	b.n	80105ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010570:	4b3b      	ldr	r3, [pc, #236]	; (8010660 <tcp_process+0x594>)
 8010572:	6819      	ldr	r1, [r3, #0]
 8010574:	4b3b      	ldr	r3, [pc, #236]	; (8010664 <tcp_process+0x598>)
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	461a      	mov	r2, r3
 801057a:	4b3b      	ldr	r3, [pc, #236]	; (8010668 <tcp_process+0x59c>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010580:	4b3a      	ldr	r3, [pc, #232]	; (801066c <tcp_process+0x5a0>)
 8010582:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010584:	885b      	ldrh	r3, [r3, #2]
 8010586:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010588:	4a38      	ldr	r2, [pc, #224]	; (801066c <tcp_process+0x5a0>)
 801058a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801058c:	8812      	ldrh	r2, [r2, #0]
 801058e:	b292      	uxth	r2, r2
 8010590:	9202      	str	r2, [sp, #8]
 8010592:	9301      	str	r3, [sp, #4]
 8010594:	4b36      	ldr	r3, [pc, #216]	; (8010670 <tcp_process+0x5a4>)
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	4b36      	ldr	r3, [pc, #216]	; (8010674 <tcp_process+0x5a8>)
 801059a:	4602      	mov	r2, r0
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f003 f829 	bl	80135f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80105a2:	e167      	b.n	8010874 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80105a4:	4b2d      	ldr	r3, [pc, #180]	; (801065c <tcp_process+0x590>)
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	f003 0302 	and.w	r3, r3, #2
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 8161 	beq.w	8010874 <tcp_process+0x7a8>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b6:	1e5a      	subs	r2, r3, #1
 80105b8:	4b2b      	ldr	r3, [pc, #172]	; (8010668 <tcp_process+0x59c>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	429a      	cmp	r2, r3
 80105be:	f040 8159 	bne.w	8010874 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f002 fe0e 	bl	80131e4 <tcp_rexmit>
      break;
 80105c8:	e154      	b.n	8010874 <tcp_process+0x7a8>
 80105ca:	e153      	b.n	8010874 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f000 fa71 	bl	8010ab4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105d2:	4b2d      	ldr	r3, [pc, #180]	; (8010688 <tcp_process+0x5bc>)
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f003 0320 	and.w	r3, r3, #32
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 814c 	beq.w	8010878 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	8b5b      	ldrh	r3, [r3, #26]
 80105e4:	f043 0302 	orr.w	r3, r3, #2
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2207      	movs	r2, #7
 80105f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80105f4:	e140      	b.n	8010878 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fa5c 	bl	8010ab4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105fc:	4b22      	ldr	r3, [pc, #136]	; (8010688 <tcp_process+0x5bc>)
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	f003 0320 	and.w	r3, r3, #32
 8010604:	2b00      	cmp	r3, #0
 8010606:	d071      	beq.n	80106ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010608:	4b14      	ldr	r3, [pc, #80]	; (801065c <tcp_process+0x590>)
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	f003 0310 	and.w	r3, r3, #16
 8010610:	2b00      	cmp	r3, #0
 8010612:	d060      	beq.n	80106d6 <tcp_process+0x60a>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010618:	4b11      	ldr	r3, [pc, #68]	; (8010660 <tcp_process+0x594>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	429a      	cmp	r2, r3
 801061e:	d15a      	bne.n	80106d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010624:	2b00      	cmp	r3, #0
 8010626:	d156      	bne.n	80106d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	8b5b      	ldrh	r3, [r3, #26]
 801062c:	f043 0302 	orr.w	r3, r3, #2
 8010630:	b29a      	uxth	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f7fe fdbc 	bl	800f1b4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801063c:	4b13      	ldr	r3, [pc, #76]	; (801068c <tcp_process+0x5c0>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	429a      	cmp	r2, r3
 8010644:	d105      	bne.n	8010652 <tcp_process+0x586>
 8010646:	4b11      	ldr	r3, [pc, #68]	; (801068c <tcp_process+0x5c0>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	4a0f      	ldr	r2, [pc, #60]	; (801068c <tcp_process+0x5c0>)
 801064e:	6013      	str	r3, [r2, #0]
 8010650:	e02e      	b.n	80106b0 <tcp_process+0x5e4>
 8010652:	4b0e      	ldr	r3, [pc, #56]	; (801068c <tcp_process+0x5c0>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	617b      	str	r3, [r7, #20]
 8010658:	e027      	b.n	80106aa <tcp_process+0x5de>
 801065a:	bf00      	nop
 801065c:	20011278 	.word	0x20011278
 8010660:	20011270 	.word	0x20011270
 8010664:	20011276 	.word	0x20011276
 8010668:	2001126c 	.word	0x2001126c
 801066c:	2001125c 	.word	0x2001125c
 8010670:	2000a148 	.word	0x2000a148
 8010674:	2000a14c 	.word	0x2000a14c
 8010678:	0801bce8 	.word	0x0801bce8
 801067c:	0801bf88 	.word	0x0801bf88
 8010680:	0801bd34 	.word	0x0801bd34
 8010684:	20011274 	.word	0x20011274
 8010688:	20011279 	.word	0x20011279
 801068c:	20011240 	.word	0x20011240
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	68db      	ldr	r3, [r3, #12]
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	429a      	cmp	r2, r3
 8010698:	d104      	bne.n	80106a4 <tcp_process+0x5d8>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	68da      	ldr	r2, [r3, #12]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	60da      	str	r2, [r3, #12]
 80106a2:	e005      	b.n	80106b0 <tcp_process+0x5e4>
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	617b      	str	r3, [r7, #20]
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1ef      	bne.n	8010690 <tcp_process+0x5c4>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	60da      	str	r2, [r3, #12]
 80106b6:	4b77      	ldr	r3, [pc, #476]	; (8010894 <tcp_process+0x7c8>)
 80106b8:	2201      	movs	r2, #1
 80106ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	220a      	movs	r2, #10
 80106c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80106c2:	4b75      	ldr	r3, [pc, #468]	; (8010898 <tcp_process+0x7cc>)
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	60da      	str	r2, [r3, #12]
 80106ca:	4a73      	ldr	r2, [pc, #460]	; (8010898 <tcp_process+0x7cc>)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6013      	str	r3, [r2, #0]
 80106d0:	f003 f952 	bl	8013978 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106d4:	e0d2      	b.n	801087c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	8b5b      	ldrh	r3, [r3, #26]
 80106da:	f043 0302 	orr.w	r3, r3, #2
 80106de:	b29a      	uxth	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2208      	movs	r2, #8
 80106e8:	751a      	strb	r2, [r3, #20]
      break;
 80106ea:	e0c7      	b.n	801087c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106ec:	4b6b      	ldr	r3, [pc, #428]	; (801089c <tcp_process+0x7d0>)
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	f003 0310 	and.w	r3, r3, #16
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f000 80c1 	beq.w	801087c <tcp_process+0x7b0>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106fe:	4b68      	ldr	r3, [pc, #416]	; (80108a0 <tcp_process+0x7d4>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	429a      	cmp	r2, r3
 8010704:	f040 80ba 	bne.w	801087c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801070c:	2b00      	cmp	r3, #0
 801070e:	f040 80b5 	bne.w	801087c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2206      	movs	r2, #6
 8010716:	751a      	strb	r2, [r3, #20]
      break;
 8010718:	e0b0      	b.n	801087c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 f9ca 	bl	8010ab4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010720:	4b60      	ldr	r3, [pc, #384]	; (80108a4 <tcp_process+0x7d8>)
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	f003 0320 	and.w	r3, r3, #32
 8010728:	2b00      	cmp	r3, #0
 801072a:	f000 80a9 	beq.w	8010880 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	8b5b      	ldrh	r3, [r3, #26]
 8010732:	f043 0302 	orr.w	r3, r3, #2
 8010736:	b29a      	uxth	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f7fe fd39 	bl	800f1b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010742:	4b59      	ldr	r3, [pc, #356]	; (80108a8 <tcp_process+0x7dc>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	429a      	cmp	r2, r3
 801074a:	d105      	bne.n	8010758 <tcp_process+0x68c>
 801074c:	4b56      	ldr	r3, [pc, #344]	; (80108a8 <tcp_process+0x7dc>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	4a55      	ldr	r2, [pc, #340]	; (80108a8 <tcp_process+0x7dc>)
 8010754:	6013      	str	r3, [r2, #0]
 8010756:	e013      	b.n	8010780 <tcp_process+0x6b4>
 8010758:	4b53      	ldr	r3, [pc, #332]	; (80108a8 <tcp_process+0x7dc>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	613b      	str	r3, [r7, #16]
 801075e:	e00c      	b.n	801077a <tcp_process+0x6ae>
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	429a      	cmp	r2, r3
 8010768:	d104      	bne.n	8010774 <tcp_process+0x6a8>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	68da      	ldr	r2, [r3, #12]
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	60da      	str	r2, [r3, #12]
 8010772:	e005      	b.n	8010780 <tcp_process+0x6b4>
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	613b      	str	r3, [r7, #16]
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d1ef      	bne.n	8010760 <tcp_process+0x694>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	60da      	str	r2, [r3, #12]
 8010786:	4b43      	ldr	r3, [pc, #268]	; (8010894 <tcp_process+0x7c8>)
 8010788:	2201      	movs	r2, #1
 801078a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	220a      	movs	r2, #10
 8010790:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010792:	4b41      	ldr	r3, [pc, #260]	; (8010898 <tcp_process+0x7cc>)
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	60da      	str	r2, [r3, #12]
 801079a:	4a3f      	ldr	r2, [pc, #252]	; (8010898 <tcp_process+0x7cc>)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6013      	str	r3, [r2, #0]
 80107a0:	f003 f8ea 	bl	8013978 <tcp_timer_needed>
      }
      break;
 80107a4:	e06c      	b.n	8010880 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 f984 	bl	8010ab4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80107ac:	4b3b      	ldr	r3, [pc, #236]	; (801089c <tcp_process+0x7d0>)
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	f003 0310 	and.w	r3, r3, #16
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d065      	beq.n	8010884 <tcp_process+0x7b8>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107bc:	4b38      	ldr	r3, [pc, #224]	; (80108a0 <tcp_process+0x7d4>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d15f      	bne.n	8010884 <tcp_process+0x7b8>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d15b      	bne.n	8010884 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f7fe fcf1 	bl	800f1b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107d2:	4b35      	ldr	r3, [pc, #212]	; (80108a8 <tcp_process+0x7dc>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	687a      	ldr	r2, [r7, #4]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d105      	bne.n	80107e8 <tcp_process+0x71c>
 80107dc:	4b32      	ldr	r3, [pc, #200]	; (80108a8 <tcp_process+0x7dc>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	4a31      	ldr	r2, [pc, #196]	; (80108a8 <tcp_process+0x7dc>)
 80107e4:	6013      	str	r3, [r2, #0]
 80107e6:	e013      	b.n	8010810 <tcp_process+0x744>
 80107e8:	4b2f      	ldr	r3, [pc, #188]	; (80108a8 <tcp_process+0x7dc>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	60fb      	str	r3, [r7, #12]
 80107ee:	e00c      	b.n	801080a <tcp_process+0x73e>
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d104      	bne.n	8010804 <tcp_process+0x738>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	68da      	ldr	r2, [r3, #12]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	60da      	str	r2, [r3, #12]
 8010802:	e005      	b.n	8010810 <tcp_process+0x744>
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	60fb      	str	r3, [r7, #12]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d1ef      	bne.n	80107f0 <tcp_process+0x724>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	60da      	str	r2, [r3, #12]
 8010816:	4b1f      	ldr	r3, [pc, #124]	; (8010894 <tcp_process+0x7c8>)
 8010818:	2201      	movs	r2, #1
 801081a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	220a      	movs	r2, #10
 8010820:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010822:	4b1d      	ldr	r3, [pc, #116]	; (8010898 <tcp_process+0x7cc>)
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	60da      	str	r2, [r3, #12]
 801082a:	4a1b      	ldr	r2, [pc, #108]	; (8010898 <tcp_process+0x7cc>)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	f003 f8a2 	bl	8013978 <tcp_timer_needed>
      }
      break;
 8010834:	e026      	b.n	8010884 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 f93c 	bl	8010ab4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801083c:	4b17      	ldr	r3, [pc, #92]	; (801089c <tcp_process+0x7d0>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	f003 0310 	and.w	r3, r3, #16
 8010844:	2b00      	cmp	r3, #0
 8010846:	d01f      	beq.n	8010888 <tcp_process+0x7bc>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801084c:	4b14      	ldr	r3, [pc, #80]	; (80108a0 <tcp_process+0x7d4>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	429a      	cmp	r2, r3
 8010852:	d119      	bne.n	8010888 <tcp_process+0x7bc>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010858:	2b00      	cmp	r3, #0
 801085a:	d115      	bne.n	8010888 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801085c:	4b11      	ldr	r3, [pc, #68]	; (80108a4 <tcp_process+0x7d8>)
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	f043 0310 	orr.w	r3, r3, #16
 8010864:	b2da      	uxtb	r2, r3
 8010866:	4b0f      	ldr	r3, [pc, #60]	; (80108a4 <tcp_process+0x7d8>)
 8010868:	701a      	strb	r2, [r3, #0]
      }
      break;
 801086a:	e00d      	b.n	8010888 <tcp_process+0x7bc>
    default:
      break;
 801086c:	bf00      	nop
 801086e:	e00c      	b.n	801088a <tcp_process+0x7be>
      break;
 8010870:	bf00      	nop
 8010872:	e00a      	b.n	801088a <tcp_process+0x7be>
      break;
 8010874:	bf00      	nop
 8010876:	e008      	b.n	801088a <tcp_process+0x7be>
      break;
 8010878:	bf00      	nop
 801087a:	e006      	b.n	801088a <tcp_process+0x7be>
      break;
 801087c:	bf00      	nop
 801087e:	e004      	b.n	801088a <tcp_process+0x7be>
      break;
 8010880:	bf00      	nop
 8010882:	e002      	b.n	801088a <tcp_process+0x7be>
      break;
 8010884:	bf00      	nop
 8010886:	e000      	b.n	801088a <tcp_process+0x7be>
      break;
 8010888:	bf00      	nop
  }
  return ERR_OK;
 801088a:	2300      	movs	r3, #0
}
 801088c:	4618      	mov	r0, r3
 801088e:	3724      	adds	r7, #36	; 0x24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd90      	pop	{r4, r7, pc}
 8010894:	20011248 	.word	0x20011248
 8010898:	20011244 	.word	0x20011244
 801089c:	20011278 	.word	0x20011278
 80108a0:	20011270 	.word	0x20011270
 80108a4:	20011279 	.word	0x20011279
 80108a8:	20011240 	.word	0x20011240

080108ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80108ac:	b590      	push	{r4, r7, lr}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d106      	bne.n	80108ca <tcp_oos_insert_segment+0x1e>
 80108bc:	4b3b      	ldr	r3, [pc, #236]	; (80109ac <tcp_oos_insert_segment+0x100>)
 80108be:	f240 421f 	movw	r2, #1055	; 0x41f
 80108c2:	493b      	ldr	r1, [pc, #236]	; (80109b0 <tcp_oos_insert_segment+0x104>)
 80108c4:	483b      	ldr	r0, [pc, #236]	; (80109b4 <tcp_oos_insert_segment+0x108>)
 80108c6:	f008 fa43 	bl	8018d50 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	899b      	ldrh	r3, [r3, #12]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fb f978 	bl	800bbc8 <lwip_htons>
 80108d8:	4603      	mov	r3, r0
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d028      	beq.n	8010936 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80108e4:	6838      	ldr	r0, [r7, #0]
 80108e6:	f7fe f995 	bl	800ec14 <tcp_segs_free>
    next = NULL;
 80108ea:	2300      	movs	r3, #0
 80108ec:	603b      	str	r3, [r7, #0]
 80108ee:	e056      	b.n	801099e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	899b      	ldrh	r3, [r3, #12]
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fb f965 	bl	800bbc8 <lwip_htons>
 80108fe:	4603      	mov	r3, r0
 8010900:	b2db      	uxtb	r3, r3
 8010902:	f003 0301 	and.w	r3, r3, #1
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00d      	beq.n	8010926 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	899b      	ldrh	r3, [r3, #12]
 8010910:	b29c      	uxth	r4, r3
 8010912:	2001      	movs	r0, #1
 8010914:	f7fb f958 	bl	800bbc8 <lwip_htons>
 8010918:	4603      	mov	r3, r0
 801091a:	461a      	mov	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	4322      	orrs	r2, r4
 8010922:	b292      	uxth	r2, r2
 8010924:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010930:	68f8      	ldr	r0, [r7, #12]
 8010932:	f7fe f984 	bl	800ec3e <tcp_seg_free>
    while (next &&
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d00e      	beq.n	801095a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	891b      	ldrh	r3, [r3, #8]
 8010940:	461a      	mov	r2, r3
 8010942:	4b1d      	ldr	r3, [pc, #116]	; (80109b8 <tcp_oos_insert_segment+0x10c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	441a      	add	r2, r3
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	6839      	ldr	r1, [r7, #0]
 8010950:	8909      	ldrh	r1, [r1, #8]
 8010952:	440b      	add	r3, r1
 8010954:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010956:	2b00      	cmp	r3, #0
 8010958:	daca      	bge.n	80108f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d01e      	beq.n	801099e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	891b      	ldrh	r3, [r3, #8]
 8010964:	461a      	mov	r2, r3
 8010966:	4b14      	ldr	r3, [pc, #80]	; (80109b8 <tcp_oos_insert_segment+0x10c>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	441a      	add	r2, r3
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010974:	2b00      	cmp	r3, #0
 8010976:	dd12      	ble.n	801099e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	b29a      	uxth	r2, r3
 8010980:	4b0d      	ldr	r3, [pc, #52]	; (80109b8 <tcp_oos_insert_segment+0x10c>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	b29b      	uxth	r3, r3
 8010986:	1ad3      	subs	r3, r2, r3
 8010988:	b29a      	uxth	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685a      	ldr	r2, [r3, #4]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	891b      	ldrh	r3, [r3, #8]
 8010996:	4619      	mov	r1, r3
 8010998:	4610      	mov	r0, r2
 801099a:	f7fc fb91 	bl	800d0c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	683a      	ldr	r2, [r7, #0]
 80109a2:	601a      	str	r2, [r3, #0]
}
 80109a4:	bf00      	nop
 80109a6:	3714      	adds	r7, #20
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd90      	pop	{r4, r7, pc}
 80109ac:	0801bce8 	.word	0x0801bce8
 80109b0:	0801bfa8 	.word	0x0801bfa8
 80109b4:	0801bd34 	.word	0x0801bd34
 80109b8:	2001126c 	.word	0x2001126c

080109bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80109bc:	b5b0      	push	{r4, r5, r7, lr}
 80109be:	b086      	sub	sp, #24
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	607a      	str	r2, [r7, #4]
 80109c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80109ca:	e03e      	b.n	8010a4a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	4618      	mov	r0, r3
 80109dc:	f7fc fd84 	bl	800d4e8 <pbuf_clen>
 80109e0:	4603      	mov	r3, r0
 80109e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109ea:	8a7a      	ldrh	r2, [r7, #18]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d906      	bls.n	80109fe <tcp_free_acked_segments+0x42>
 80109f0:	4b2a      	ldr	r3, [pc, #168]	; (8010a9c <tcp_free_acked_segments+0xe0>)
 80109f2:	f240 4257 	movw	r2, #1111	; 0x457
 80109f6:	492a      	ldr	r1, [pc, #168]	; (8010aa0 <tcp_free_acked_segments+0xe4>)
 80109f8:	482a      	ldr	r0, [pc, #168]	; (8010aa4 <tcp_free_acked_segments+0xe8>)
 80109fa:	f008 f9a9 	bl	8018d50 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010a04:	8a7b      	ldrh	r3, [r7, #18]
 8010a06:	1ad3      	subs	r3, r2, r3
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	891a      	ldrh	r2, [r3, #8]
 8010a14:	4b24      	ldr	r3, [pc, #144]	; (8010aa8 <tcp_free_acked_segments+0xec>)
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	4413      	add	r3, r2
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	4b22      	ldr	r3, [pc, #136]	; (8010aa8 <tcp_free_acked_segments+0xec>)
 8010a1e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010a20:	6978      	ldr	r0, [r7, #20]
 8010a22:	f7fe f90c 	bl	800ec3e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00c      	beq.n	8010a4a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d109      	bne.n	8010a4a <tcp_free_acked_segments+0x8e>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d106      	bne.n	8010a4a <tcp_free_acked_segments+0x8e>
 8010a3c:	4b17      	ldr	r3, [pc, #92]	; (8010a9c <tcp_free_acked_segments+0xe0>)
 8010a3e:	f240 4261 	movw	r2, #1121	; 0x461
 8010a42:	491a      	ldr	r1, [pc, #104]	; (8010aac <tcp_free_acked_segments+0xf0>)
 8010a44:	4817      	ldr	r0, [pc, #92]	; (8010aa4 <tcp_free_acked_segments+0xe8>)
 8010a46:	f008 f983 	bl	8018d50 <iprintf>
  while (seg_list != NULL &&
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d020      	beq.n	8010a92 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fb f8cb 	bl	800bbf2 <lwip_htonl>
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	891b      	ldrh	r3, [r3, #8]
 8010a62:	461d      	mov	r5, r3
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	68db      	ldr	r3, [r3, #12]
 8010a68:	899b      	ldrh	r3, [r3, #12]
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fb f8ab 	bl	800bbc8 <lwip_htons>
 8010a72:	4603      	mov	r3, r0
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	f003 0303 	and.w	r3, r3, #3
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d001      	beq.n	8010a82 <tcp_free_acked_segments+0xc6>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e000      	b.n	8010a84 <tcp_free_acked_segments+0xc8>
 8010a82:	2300      	movs	r3, #0
 8010a84:	442b      	add	r3, r5
 8010a86:	18e2      	adds	r2, r4, r3
 8010a88:	4b09      	ldr	r3, [pc, #36]	; (8010ab0 <tcp_free_acked_segments+0xf4>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	dd9c      	ble.n	80109cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a92:	68bb      	ldr	r3, [r7, #8]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3718      	adds	r7, #24
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8010a9c:	0801bce8 	.word	0x0801bce8
 8010aa0:	0801bfd0 	.word	0x0801bfd0
 8010aa4:	0801bd34 	.word	0x0801bd34
 8010aa8:	20011274 	.word	0x20011274
 8010aac:	0801bff8 	.word	0x0801bff8
 8010ab0:	20011270 	.word	0x20011270

08010ab4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010ab4:	b5b0      	push	{r4, r5, r7, lr}
 8010ab6:	b094      	sub	sp, #80	; 0x50
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010abc:	2300      	movs	r3, #0
 8010abe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d106      	bne.n	8010ad4 <tcp_receive+0x20>
 8010ac6:	4b91      	ldr	r3, [pc, #580]	; (8010d0c <tcp_receive+0x258>)
 8010ac8:	f240 427b 	movw	r2, #1147	; 0x47b
 8010acc:	4990      	ldr	r1, [pc, #576]	; (8010d10 <tcp_receive+0x25c>)
 8010ace:	4891      	ldr	r0, [pc, #580]	; (8010d14 <tcp_receive+0x260>)
 8010ad0:	f008 f93e 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	7d1b      	ldrb	r3, [r3, #20]
 8010ad8:	2b03      	cmp	r3, #3
 8010ada:	d806      	bhi.n	8010aea <tcp_receive+0x36>
 8010adc:	4b8b      	ldr	r3, [pc, #556]	; (8010d0c <tcp_receive+0x258>)
 8010ade:	f240 427c 	movw	r2, #1148	; 0x47c
 8010ae2:	498d      	ldr	r1, [pc, #564]	; (8010d18 <tcp_receive+0x264>)
 8010ae4:	488b      	ldr	r0, [pc, #556]	; (8010d14 <tcp_receive+0x260>)
 8010ae6:	f008 f933 	bl	8018d50 <iprintf>

  if (flags & TCP_ACK) {
 8010aea:	4b8c      	ldr	r3, [pc, #560]	; (8010d1c <tcp_receive+0x268>)
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	f003 0310 	and.w	r3, r3, #16
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 8264 	beq.w	8010fc0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010afe:	461a      	mov	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b04:	4413      	add	r3, r2
 8010b06:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b0c:	4b84      	ldr	r3, [pc, #528]	; (8010d20 <tcp_receive+0x26c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	1ad3      	subs	r3, r2, r3
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	db1b      	blt.n	8010b4e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b1a:	4b81      	ldr	r3, [pc, #516]	; (8010d20 <tcp_receive+0x26c>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d106      	bne.n	8010b30 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b26:	4b7f      	ldr	r3, [pc, #508]	; (8010d24 <tcp_receive+0x270>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	db0e      	blt.n	8010b4e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b34:	4b7b      	ldr	r3, [pc, #492]	; (8010d24 <tcp_receive+0x270>)
 8010b36:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d125      	bne.n	8010b88 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b3c:	4b7a      	ldr	r3, [pc, #488]	; (8010d28 <tcp_receive+0x274>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	89db      	ldrh	r3, [r3, #14]
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d91c      	bls.n	8010b88 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b4e:	4b76      	ldr	r3, [pc, #472]	; (8010d28 <tcp_receive+0x274>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	89db      	ldrh	r3, [r3, #14]
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d205      	bcs.n	8010b78 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b78:	4b69      	ldr	r3, [pc, #420]	; (8010d20 <tcp_receive+0x26c>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010b80:	4b68      	ldr	r3, [pc, #416]	; (8010d24 <tcp_receive+0x270>)
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b88:	4b66      	ldr	r3, [pc, #408]	; (8010d24 <tcp_receive+0x270>)
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	dc58      	bgt.n	8010c48 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b96:	4b65      	ldr	r3, [pc, #404]	; (8010d2c <tcp_receive+0x278>)
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d14b      	bne.n	8010c36 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010ba8:	4413      	add	r3, r2
 8010baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d142      	bne.n	8010c36 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	db3d      	blt.n	8010c36 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bbe:	4b59      	ldr	r3, [pc, #356]	; (8010d24 <tcp_receive+0x270>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d137      	bne.n	8010c36 <tcp_receive+0x182>
              found_dupack = 1;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bd0:	2bff      	cmp	r3, #255	; 0xff
 8010bd2:	d007      	beq.n	8010be4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bda:	3301      	adds	r3, #1
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bea:	2b03      	cmp	r3, #3
 8010bec:	d91b      	bls.n	8010c26 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bf8:	4413      	add	r3, r2
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d30a      	bcc.n	8010c1c <tcp_receive+0x168>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c10:	4413      	add	r3, r2
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c1a:	e004      	b.n	8010c26 <tcp_receive+0x172>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	d902      	bls.n	8010c36 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f002 fb43 	bl	80132bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f040 8161 	bne.w	8010f00 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c46:	e15b      	b.n	8010f00 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c48:	4b36      	ldr	r3, [pc, #216]	; (8010d24 <tcp_receive+0x270>)
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c50:	1ad3      	subs	r3, r2, r3
 8010c52:	3b01      	subs	r3, #1
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	f2c0 814e 	blt.w	8010ef6 <tcp_receive+0x442>
 8010c5a:	4b32      	ldr	r3, [pc, #200]	; (8010d24 <tcp_receive+0x270>)
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	f300 8146 	bgt.w	8010ef6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	8b5b      	ldrh	r3, [r3, #26]
 8010c6e:	f003 0304 	and.w	r3, r3, #4
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d010      	beq.n	8010c98 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	8b5b      	ldrh	r3, [r3, #26]
 8010c7a:	f023 0304 	bic.w	r3, r3, #4
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ca6:	10db      	asrs	r3, r3, #3
 8010ca8:	b21b      	sxth	r3, r3
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	4413      	add	r3, r2
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	b21a      	sxth	r2, r3
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010cc0:	4b18      	ldr	r3, [pc, #96]	; (8010d24 <tcp_receive+0x270>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010cd8:	4b12      	ldr	r3, [pc, #72]	; (8010d24 <tcp_receive+0x270>)
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	7d1b      	ldrb	r3, [r3, #20]
 8010ce4:	2b03      	cmp	r3, #3
 8010ce6:	f240 8097 	bls.w	8010e18 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d245      	bcs.n	8010d86 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	8b5b      	ldrh	r3, [r3, #26]
 8010cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d014      	beq.n	8010d30 <tcp_receive+0x27c>
 8010d06:	2301      	movs	r3, #1
 8010d08:	e013      	b.n	8010d32 <tcp_receive+0x27e>
 8010d0a:	bf00      	nop
 8010d0c:	0801bce8 	.word	0x0801bce8
 8010d10:	0801c018 	.word	0x0801c018
 8010d14:	0801bd34 	.word	0x0801bd34
 8010d18:	0801c034 	.word	0x0801c034
 8010d1c:	20011278 	.word	0x20011278
 8010d20:	2001126c 	.word	0x2001126c
 8010d24:	20011270 	.word	0x20011270
 8010d28:	2001125c 	.word	0x2001125c
 8010d2c:	20011276 	.word	0x20011276
 8010d30:	2302      	movs	r3, #2
 8010d32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d40:	fb12 f303 	smulbb	r3, r2, r3
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	bf28      	it	cs
 8010d4c:	4613      	movcs	r3, r2
 8010d4e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d58:	4413      	add	r3, r2
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d309      	bcc.n	8010d7a <tcp_receive+0x2c6>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d6e:	4413      	add	r3, r2
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d78:	e04e      	b.n	8010e18 <tcp_receive+0x364>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d84:	e048      	b.n	8010e18 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d8e:	4413      	add	r3, r2
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d309      	bcc.n	8010db0 <tcp_receive+0x2fc>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010da2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010da4:	4413      	add	r3, r2
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010dae:	e004      	b.n	8010dba <tcp_receive+0x306>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010db6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d326      	bcc.n	8010e18 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dea:	4413      	add	r3, r2
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d30a      	bcc.n	8010e0e <tcp_receive+0x35a>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e02:	4413      	add	r3, r2
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e0c:	e004      	b.n	8010e18 <tcp_receive+0x364>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e20:	4a98      	ldr	r2, [pc, #608]	; (8011084 <tcp_receive+0x5d0>)
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7ff fdca 	bl	80109bc <tcp_free_acked_segments>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e36:	4a94      	ldr	r2, [pc, #592]	; (8011088 <tcp_receive+0x5d4>)
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f7ff fdbf 	bl	80109bc <tcp_free_acked_segments>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d104      	bne.n	8010e56 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e52:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e54:	e002      	b.n	8010e5c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d103      	bne.n	8010e72 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e78:	4b84      	ldr	r3, [pc, #528]	; (801108c <tcp_receive+0x5d8>)
 8010e7a:	881b      	ldrh	r3, [r3, #0]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	b29a      	uxth	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	8b5b      	ldrh	r3, [r3, #26]
 8010e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d035      	beq.n	8010efe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d118      	bne.n	8010ecc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00c      	beq.n	8010ebc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fa fe9f 	bl	800bbf2 <lwip_htonl>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	dc20      	bgt.n	8010efe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	8b5b      	ldrh	r3, [r3, #26]
 8010ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010eca:	e018      	b.n	8010efe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7fa fe8a 	bl	800bbf2 <lwip_htonl>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	1ae3      	subs	r3, r4, r3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	dc0b      	bgt.n	8010efe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	8b5b      	ldrh	r3, [r3, #26]
 8010eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ef4:	e003      	b.n	8010efe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f002 fbce 	bl	8013698 <tcp_send_empty_ack>
 8010efc:	e000      	b.n	8010f00 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010efe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d05b      	beq.n	8010fc0 <tcp_receive+0x50c>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f0c:	4b60      	ldr	r3, [pc, #384]	; (8011090 <tcp_receive+0x5dc>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	da54      	bge.n	8010fc0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010f16:	4b5f      	ldr	r3, [pc, #380]	; (8011094 <tcp_receive+0x5e0>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f2a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f34:	10db      	asrs	r3, r3, #3
 8010f36:	b21b      	sxth	r3, r3
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f4e:	4413      	add	r3, r2
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	b21a      	sxth	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010f58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	da05      	bge.n	8010f6c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f64:	425b      	negs	r3, r3
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f76:	109b      	asrs	r3, r3, #2
 8010f78:	b21b      	sxth	r3, r3
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	1ad3      	subs	r3, r2, r3
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f8a:	b29a      	uxth	r2, r3
 8010f8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f90:	4413      	add	r3, r2
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	b21a      	sxth	r2, r3
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010fa0:	10db      	asrs	r3, r3, #3
 8010fa2:	b21b      	sxth	r3, r3
 8010fa4:	b29a      	uxth	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	4413      	add	r3, r2
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	b21a      	sxth	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010fc0:	4b35      	ldr	r3, [pc, #212]	; (8011098 <tcp_receive+0x5e4>)
 8010fc2:	881b      	ldrh	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f000 84e2 	beq.w	801198e <tcp_receive+0xeda>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	7d1b      	ldrb	r3, [r3, #20]
 8010fce:	2b06      	cmp	r3, #6
 8010fd0:	f200 84dd 	bhi.w	801198e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fd8:	4b30      	ldr	r3, [pc, #192]	; (801109c <tcp_receive+0x5e8>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	1ad3      	subs	r3, r2, r3
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f2c0 808f 	blt.w	8011104 <tcp_receive+0x650>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fea:	4b2b      	ldr	r3, [pc, #172]	; (8011098 <tcp_receive+0x5e4>)
 8010fec:	881b      	ldrh	r3, [r3, #0]
 8010fee:	4619      	mov	r1, r3
 8010ff0:	4b2a      	ldr	r3, [pc, #168]	; (801109c <tcp_receive+0x5e8>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	440b      	add	r3, r1
 8010ff6:	1ad3      	subs	r3, r2, r3
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f300 8082 	bgt.w	8011104 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011000:	4b27      	ldr	r3, [pc, #156]	; (80110a0 <tcp_receive+0x5ec>)
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801100a:	4b24      	ldr	r3, [pc, #144]	; (801109c <tcp_receive+0x5e8>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011012:	4b23      	ldr	r3, [pc, #140]	; (80110a0 <tcp_receive+0x5ec>)
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d106      	bne.n	8011028 <tcp_receive+0x574>
 801101a:	4b22      	ldr	r3, [pc, #136]	; (80110a4 <tcp_receive+0x5f0>)
 801101c:	f240 5294 	movw	r2, #1428	; 0x594
 8011020:	4921      	ldr	r1, [pc, #132]	; (80110a8 <tcp_receive+0x5f4>)
 8011022:	4822      	ldr	r0, [pc, #136]	; (80110ac <tcp_receive+0x5f8>)
 8011024:	f007 fe94 	bl	8018d50 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801102e:	4293      	cmp	r3, r2
 8011030:	d906      	bls.n	8011040 <tcp_receive+0x58c>
 8011032:	4b1c      	ldr	r3, [pc, #112]	; (80110a4 <tcp_receive+0x5f0>)
 8011034:	f240 5295 	movw	r2, #1429	; 0x595
 8011038:	491d      	ldr	r1, [pc, #116]	; (80110b0 <tcp_receive+0x5fc>)
 801103a:	481c      	ldr	r0, [pc, #112]	; (80110ac <tcp_receive+0x5f8>)
 801103c:	f007 fe88 	bl	8018d50 <iprintf>
      off = (u16_t)off32;
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011046:	4b16      	ldr	r3, [pc, #88]	; (80110a0 <tcp_receive+0x5ec>)
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	891b      	ldrh	r3, [r3, #8]
 801104c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011050:	429a      	cmp	r2, r3
 8011052:	d906      	bls.n	8011062 <tcp_receive+0x5ae>
 8011054:	4b13      	ldr	r3, [pc, #76]	; (80110a4 <tcp_receive+0x5f0>)
 8011056:	f240 5297 	movw	r2, #1431	; 0x597
 801105a:	4916      	ldr	r1, [pc, #88]	; (80110b4 <tcp_receive+0x600>)
 801105c:	4813      	ldr	r0, [pc, #76]	; (80110ac <tcp_receive+0x5f8>)
 801105e:	f007 fe77 	bl	8018d50 <iprintf>
      inseg.len -= off;
 8011062:	4b0f      	ldr	r3, [pc, #60]	; (80110a0 <tcp_receive+0x5ec>)
 8011064:	891a      	ldrh	r2, [r3, #8]
 8011066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	b29a      	uxth	r2, r3
 801106e:	4b0c      	ldr	r3, [pc, #48]	; (80110a0 <tcp_receive+0x5ec>)
 8011070:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011072:	4b0b      	ldr	r3, [pc, #44]	; (80110a0 <tcp_receive+0x5ec>)
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	891a      	ldrh	r2, [r3, #8]
 8011078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801107c:	1ad3      	subs	r3, r2, r3
 801107e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011080:	e02a      	b.n	80110d8 <tcp_receive+0x624>
 8011082:	bf00      	nop
 8011084:	0801c050 	.word	0x0801c050
 8011088:	0801c058 	.word	0x0801c058
 801108c:	20011274 	.word	0x20011274
 8011090:	20011270 	.word	0x20011270
 8011094:	20011234 	.word	0x20011234
 8011098:	20011276 	.word	0x20011276
 801109c:	2001126c 	.word	0x2001126c
 80110a0:	2001124c 	.word	0x2001124c
 80110a4:	0801bce8 	.word	0x0801bce8
 80110a8:	0801c060 	.word	0x0801c060
 80110ac:	0801bd34 	.word	0x0801bd34
 80110b0:	0801c070 	.word	0x0801c070
 80110b4:	0801c080 	.word	0x0801c080
        off -= p->len;
 80110b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ba:	895b      	ldrh	r3, [r3, #10]
 80110bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80110c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110ca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ce:	2200      	movs	r2, #0
 80110d0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80110d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110da:	895b      	ldrh	r3, [r3, #10]
 80110dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d8e9      	bhi.n	80110b8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80110e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110e8:	4619      	mov	r1, r3
 80110ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80110ec:	f7fc f8e8 	bl	800d2c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f4:	4a91      	ldr	r2, [pc, #580]	; (801133c <tcp_receive+0x888>)
 80110f6:	6013      	str	r3, [r2, #0]
 80110f8:	4b91      	ldr	r3, [pc, #580]	; (8011340 <tcp_receive+0x88c>)
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	4a8f      	ldr	r2, [pc, #572]	; (801133c <tcp_receive+0x888>)
 80110fe:	6812      	ldr	r2, [r2, #0]
 8011100:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011102:	e00d      	b.n	8011120 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011104:	4b8d      	ldr	r3, [pc, #564]	; (801133c <tcp_receive+0x888>)
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	2b00      	cmp	r3, #0
 8011110:	da06      	bge.n	8011120 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8b5b      	ldrh	r3, [r3, #26]
 8011116:	f043 0302 	orr.w	r3, r3, #2
 801111a:	b29a      	uxth	r2, r3
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011120:	4b86      	ldr	r3, [pc, #536]	; (801133c <tcp_receive+0x888>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	f2c0 842a 	blt.w	8011984 <tcp_receive+0xed0>
 8011130:	4b82      	ldr	r3, [pc, #520]	; (801133c <tcp_receive+0x888>)
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011138:	6879      	ldr	r1, [r7, #4]
 801113a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801113c:	440b      	add	r3, r1
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	3301      	adds	r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	f300 841e 	bgt.w	8011984 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801114c:	4b7b      	ldr	r3, [pc, #492]	; (801133c <tcp_receive+0x888>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	429a      	cmp	r2, r3
 8011152:	f040 829a 	bne.w	801168a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011156:	4b7a      	ldr	r3, [pc, #488]	; (8011340 <tcp_receive+0x88c>)
 8011158:	891c      	ldrh	r4, [r3, #8]
 801115a:	4b79      	ldr	r3, [pc, #484]	; (8011340 <tcp_receive+0x88c>)
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	899b      	ldrh	r3, [r3, #12]
 8011160:	b29b      	uxth	r3, r3
 8011162:	4618      	mov	r0, r3
 8011164:	f7fa fd30 	bl	800bbc8 <lwip_htons>
 8011168:	4603      	mov	r3, r0
 801116a:	b2db      	uxtb	r3, r3
 801116c:	f003 0303 	and.w	r3, r3, #3
 8011170:	2b00      	cmp	r3, #0
 8011172:	d001      	beq.n	8011178 <tcp_receive+0x6c4>
 8011174:	2301      	movs	r3, #1
 8011176:	e000      	b.n	801117a <tcp_receive+0x6c6>
 8011178:	2300      	movs	r3, #0
 801117a:	4423      	add	r3, r4
 801117c:	b29a      	uxth	r2, r3
 801117e:	4b71      	ldr	r3, [pc, #452]	; (8011344 <tcp_receive+0x890>)
 8011180:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011186:	4b6f      	ldr	r3, [pc, #444]	; (8011344 <tcp_receive+0x890>)
 8011188:	881b      	ldrh	r3, [r3, #0]
 801118a:	429a      	cmp	r2, r3
 801118c:	d275      	bcs.n	801127a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801118e:	4b6c      	ldr	r3, [pc, #432]	; (8011340 <tcp_receive+0x88c>)
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	899b      	ldrh	r3, [r3, #12]
 8011194:	b29b      	uxth	r3, r3
 8011196:	4618      	mov	r0, r3
 8011198:	f7fa fd16 	bl	800bbc8 <lwip_htons>
 801119c:	4603      	mov	r3, r0
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	f003 0301 	and.w	r3, r3, #1
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d01f      	beq.n	80111e8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80111a8:	4b65      	ldr	r3, [pc, #404]	; (8011340 <tcp_receive+0x88c>)
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	899b      	ldrh	r3, [r3, #12]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	b21b      	sxth	r3, r3
 80111b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111b6:	b21c      	sxth	r4, r3
 80111b8:	4b61      	ldr	r3, [pc, #388]	; (8011340 <tcp_receive+0x88c>)
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	899b      	ldrh	r3, [r3, #12]
 80111be:	b29b      	uxth	r3, r3
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fa fd01 	bl	800bbc8 <lwip_htons>
 80111c6:	4603      	mov	r3, r0
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fa fcf8 	bl	800bbc8 <lwip_htons>
 80111d8:	4603      	mov	r3, r0
 80111da:	b21b      	sxth	r3, r3
 80111dc:	4323      	orrs	r3, r4
 80111de:	b21a      	sxth	r2, r3
 80111e0:	4b57      	ldr	r3, [pc, #348]	; (8011340 <tcp_receive+0x88c>)
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	b292      	uxth	r2, r2
 80111e6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111ec:	4b54      	ldr	r3, [pc, #336]	; (8011340 <tcp_receive+0x88c>)
 80111ee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111f0:	4b53      	ldr	r3, [pc, #332]	; (8011340 <tcp_receive+0x88c>)
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	899b      	ldrh	r3, [r3, #12]
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fa fce5 	bl	800bbc8 <lwip_htons>
 80111fe:	4603      	mov	r3, r0
 8011200:	b2db      	uxtb	r3, r3
 8011202:	f003 0302 	and.w	r3, r3, #2
 8011206:	2b00      	cmp	r3, #0
 8011208:	d005      	beq.n	8011216 <tcp_receive+0x762>
            inseg.len -= 1;
 801120a:	4b4d      	ldr	r3, [pc, #308]	; (8011340 <tcp_receive+0x88c>)
 801120c:	891b      	ldrh	r3, [r3, #8]
 801120e:	3b01      	subs	r3, #1
 8011210:	b29a      	uxth	r2, r3
 8011212:	4b4b      	ldr	r3, [pc, #300]	; (8011340 <tcp_receive+0x88c>)
 8011214:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011216:	4b4a      	ldr	r3, [pc, #296]	; (8011340 <tcp_receive+0x88c>)
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	4a49      	ldr	r2, [pc, #292]	; (8011340 <tcp_receive+0x88c>)
 801121c:	8912      	ldrh	r2, [r2, #8]
 801121e:	4611      	mov	r1, r2
 8011220:	4618      	mov	r0, r3
 8011222:	f7fb ff4d 	bl	800d0c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011226:	4b46      	ldr	r3, [pc, #280]	; (8011340 <tcp_receive+0x88c>)
 8011228:	891c      	ldrh	r4, [r3, #8]
 801122a:	4b45      	ldr	r3, [pc, #276]	; (8011340 <tcp_receive+0x88c>)
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	899b      	ldrh	r3, [r3, #12]
 8011230:	b29b      	uxth	r3, r3
 8011232:	4618      	mov	r0, r3
 8011234:	f7fa fcc8 	bl	800bbc8 <lwip_htons>
 8011238:	4603      	mov	r3, r0
 801123a:	b2db      	uxtb	r3, r3
 801123c:	f003 0303 	and.w	r3, r3, #3
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <tcp_receive+0x794>
 8011244:	2301      	movs	r3, #1
 8011246:	e000      	b.n	801124a <tcp_receive+0x796>
 8011248:	2300      	movs	r3, #0
 801124a:	4423      	add	r3, r4
 801124c:	b29a      	uxth	r2, r3
 801124e:	4b3d      	ldr	r3, [pc, #244]	; (8011344 <tcp_receive+0x890>)
 8011250:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011252:	4b3c      	ldr	r3, [pc, #240]	; (8011344 <tcp_receive+0x890>)
 8011254:	881b      	ldrh	r3, [r3, #0]
 8011256:	461a      	mov	r2, r3
 8011258:	4b38      	ldr	r3, [pc, #224]	; (801133c <tcp_receive+0x888>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	441a      	add	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011262:	6879      	ldr	r1, [r7, #4]
 8011264:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011266:	440b      	add	r3, r1
 8011268:	429a      	cmp	r2, r3
 801126a:	d006      	beq.n	801127a <tcp_receive+0x7c6>
 801126c:	4b36      	ldr	r3, [pc, #216]	; (8011348 <tcp_receive+0x894>)
 801126e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011272:	4936      	ldr	r1, [pc, #216]	; (801134c <tcp_receive+0x898>)
 8011274:	4836      	ldr	r0, [pc, #216]	; (8011350 <tcp_receive+0x89c>)
 8011276:	f007 fd6b 	bl	8018d50 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801127e:	2b00      	cmp	r3, #0
 8011280:	f000 80e7 	beq.w	8011452 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011284:	4b2e      	ldr	r3, [pc, #184]	; (8011340 <tcp_receive+0x88c>)
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	899b      	ldrh	r3, [r3, #12]
 801128a:	b29b      	uxth	r3, r3
 801128c:	4618      	mov	r0, r3
 801128e:	f7fa fc9b 	bl	800bbc8 <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	b2db      	uxtb	r3, r3
 8011296:	f003 0301 	and.w	r3, r3, #1
 801129a:	2b00      	cmp	r3, #0
 801129c:	d010      	beq.n	80112c0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801129e:	e00a      	b.n	80112b6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112a4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f7fd fcc4 	bl	800ec3e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d1f0      	bne.n	80112a0 <tcp_receive+0x7ec>
 80112be:	e0c8      	b.n	8011452 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112c4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80112c6:	e052      	b.n	801136e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	899b      	ldrh	r3, [r3, #12]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fa fc79 	bl	800bbc8 <lwip_htons>
 80112d6:	4603      	mov	r3, r0
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	f003 0301 	and.w	r3, r3, #1
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d03d      	beq.n	801135e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112e2:	4b17      	ldr	r3, [pc, #92]	; (8011340 <tcp_receive+0x88c>)
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	899b      	ldrh	r3, [r3, #12]
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fa fc6c 	bl	800bbc8 <lwip_htons>
 80112f0:	4603      	mov	r3, r0
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d130      	bne.n	801135e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80112fc:	4b10      	ldr	r3, [pc, #64]	; (8011340 <tcp_receive+0x88c>)
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	899b      	ldrh	r3, [r3, #12]
 8011302:	b29c      	uxth	r4, r3
 8011304:	2001      	movs	r0, #1
 8011306:	f7fa fc5f 	bl	800bbc8 <lwip_htons>
 801130a:	4603      	mov	r3, r0
 801130c:	461a      	mov	r2, r3
 801130e:	4b0c      	ldr	r3, [pc, #48]	; (8011340 <tcp_receive+0x88c>)
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	4322      	orrs	r2, r4
 8011314:	b292      	uxth	r2, r2
 8011316:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011318:	4b09      	ldr	r3, [pc, #36]	; (8011340 <tcp_receive+0x88c>)
 801131a:	891c      	ldrh	r4, [r3, #8]
 801131c:	4b08      	ldr	r3, [pc, #32]	; (8011340 <tcp_receive+0x88c>)
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	899b      	ldrh	r3, [r3, #12]
 8011322:	b29b      	uxth	r3, r3
 8011324:	4618      	mov	r0, r3
 8011326:	f7fa fc4f 	bl	800bbc8 <lwip_htons>
 801132a:	4603      	mov	r3, r0
 801132c:	b2db      	uxtb	r3, r3
 801132e:	f003 0303 	and.w	r3, r3, #3
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00e      	beq.n	8011354 <tcp_receive+0x8a0>
 8011336:	2301      	movs	r3, #1
 8011338:	e00d      	b.n	8011356 <tcp_receive+0x8a2>
 801133a:	bf00      	nop
 801133c:	2001126c 	.word	0x2001126c
 8011340:	2001124c 	.word	0x2001124c
 8011344:	20011276 	.word	0x20011276
 8011348:	0801bce8 	.word	0x0801bce8
 801134c:	0801c090 	.word	0x0801c090
 8011350:	0801bd34 	.word	0x0801bd34
 8011354:	2300      	movs	r3, #0
 8011356:	4423      	add	r3, r4
 8011358:	b29a      	uxth	r2, r3
 801135a:	4b98      	ldr	r3, [pc, #608]	; (80115bc <tcp_receive+0xb08>)
 801135c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801135e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011360:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011368:	6938      	ldr	r0, [r7, #16]
 801136a:	f7fd fc68 	bl	800ec3e <tcp_seg_free>
            while (next &&
 801136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011370:	2b00      	cmp	r3, #0
 8011372:	d00e      	beq.n	8011392 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011374:	4b91      	ldr	r3, [pc, #580]	; (80115bc <tcp_receive+0xb08>)
 8011376:	881b      	ldrh	r3, [r3, #0]
 8011378:	461a      	mov	r2, r3
 801137a:	4b91      	ldr	r3, [pc, #580]	; (80115c0 <tcp_receive+0xb0c>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	441a      	add	r2, r3
 8011380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011388:	8909      	ldrh	r1, [r1, #8]
 801138a:	440b      	add	r3, r1
 801138c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801138e:	2b00      	cmp	r3, #0
 8011390:	da9a      	bge.n	80112c8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011394:	2b00      	cmp	r3, #0
 8011396:	d059      	beq.n	801144c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011398:	4b88      	ldr	r3, [pc, #544]	; (80115bc <tcp_receive+0xb08>)
 801139a:	881b      	ldrh	r3, [r3, #0]
 801139c:	461a      	mov	r2, r3
 801139e:	4b88      	ldr	r3, [pc, #544]	; (80115c0 <tcp_receive+0xb0c>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	441a      	add	r2, r3
 80113a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	dd4d      	ble.n	801144c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80113b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	b29a      	uxth	r2, r3
 80113b8:	4b81      	ldr	r3, [pc, #516]	; (80115c0 <tcp_receive+0xb0c>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	b29b      	uxth	r3, r3
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	4b80      	ldr	r3, [pc, #512]	; (80115c4 <tcp_receive+0xb10>)
 80113c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113c6:	4b7f      	ldr	r3, [pc, #508]	; (80115c4 <tcp_receive+0xb10>)
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	899b      	ldrh	r3, [r3, #12]
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fa fbfa 	bl	800bbc8 <lwip_htons>
 80113d4:	4603      	mov	r3, r0
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	f003 0302 	and.w	r3, r3, #2
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d005      	beq.n	80113ec <tcp_receive+0x938>
                inseg.len -= 1;
 80113e0:	4b78      	ldr	r3, [pc, #480]	; (80115c4 <tcp_receive+0xb10>)
 80113e2:	891b      	ldrh	r3, [r3, #8]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	4b76      	ldr	r3, [pc, #472]	; (80115c4 <tcp_receive+0xb10>)
 80113ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80113ec:	4b75      	ldr	r3, [pc, #468]	; (80115c4 <tcp_receive+0xb10>)
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	4a74      	ldr	r2, [pc, #464]	; (80115c4 <tcp_receive+0xb10>)
 80113f2:	8912      	ldrh	r2, [r2, #8]
 80113f4:	4611      	mov	r1, r2
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fb fe62 	bl	800d0c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80113fc:	4b71      	ldr	r3, [pc, #452]	; (80115c4 <tcp_receive+0xb10>)
 80113fe:	891c      	ldrh	r4, [r3, #8]
 8011400:	4b70      	ldr	r3, [pc, #448]	; (80115c4 <tcp_receive+0xb10>)
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	899b      	ldrh	r3, [r3, #12]
 8011406:	b29b      	uxth	r3, r3
 8011408:	4618      	mov	r0, r3
 801140a:	f7fa fbdd 	bl	800bbc8 <lwip_htons>
 801140e:	4603      	mov	r3, r0
 8011410:	b2db      	uxtb	r3, r3
 8011412:	f003 0303 	and.w	r3, r3, #3
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <tcp_receive+0x96a>
 801141a:	2301      	movs	r3, #1
 801141c:	e000      	b.n	8011420 <tcp_receive+0x96c>
 801141e:	2300      	movs	r3, #0
 8011420:	4423      	add	r3, r4
 8011422:	b29a      	uxth	r2, r3
 8011424:	4b65      	ldr	r3, [pc, #404]	; (80115bc <tcp_receive+0xb08>)
 8011426:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011428:	4b64      	ldr	r3, [pc, #400]	; (80115bc <tcp_receive+0xb08>)
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	461a      	mov	r2, r3
 801142e:	4b64      	ldr	r3, [pc, #400]	; (80115c0 <tcp_receive+0xb0c>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	441a      	add	r2, r3
 8011434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	429a      	cmp	r2, r3
 801143c:	d006      	beq.n	801144c <tcp_receive+0x998>
 801143e:	4b62      	ldr	r3, [pc, #392]	; (80115c8 <tcp_receive+0xb14>)
 8011440:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011444:	4961      	ldr	r1, [pc, #388]	; (80115cc <tcp_receive+0xb18>)
 8011446:	4862      	ldr	r0, [pc, #392]	; (80115d0 <tcp_receive+0xb1c>)
 8011448:	f007 fc82 	bl	8018d50 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011450:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011452:	4b5a      	ldr	r3, [pc, #360]	; (80115bc <tcp_receive+0xb08>)
 8011454:	881b      	ldrh	r3, [r3, #0]
 8011456:	461a      	mov	r2, r3
 8011458:	4b59      	ldr	r3, [pc, #356]	; (80115c0 <tcp_receive+0xb0c>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	441a      	add	r2, r3
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011466:	4b55      	ldr	r3, [pc, #340]	; (80115bc <tcp_receive+0xb08>)
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	429a      	cmp	r2, r3
 801146c:	d206      	bcs.n	801147c <tcp_receive+0x9c8>
 801146e:	4b56      	ldr	r3, [pc, #344]	; (80115c8 <tcp_receive+0xb14>)
 8011470:	f240 6207 	movw	r2, #1543	; 0x607
 8011474:	4957      	ldr	r1, [pc, #348]	; (80115d4 <tcp_receive+0xb20>)
 8011476:	4856      	ldr	r0, [pc, #344]	; (80115d0 <tcp_receive+0xb1c>)
 8011478:	f007 fc6a 	bl	8018d50 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011480:	4b4e      	ldr	r3, [pc, #312]	; (80115bc <tcp_receive+0xb08>)
 8011482:	881b      	ldrh	r3, [r3, #0]
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	b29a      	uxth	r2, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7fc fd99 	bl	800dfc4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011492:	4b4c      	ldr	r3, [pc, #304]	; (80115c4 <tcp_receive+0xb10>)
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	891b      	ldrh	r3, [r3, #8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d006      	beq.n	80114aa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801149c:	4b49      	ldr	r3, [pc, #292]	; (80115c4 <tcp_receive+0xb10>)
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	4a4d      	ldr	r2, [pc, #308]	; (80115d8 <tcp_receive+0xb24>)
 80114a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80114a4:	4b47      	ldr	r3, [pc, #284]	; (80115c4 <tcp_receive+0xb10>)
 80114a6:	2200      	movs	r2, #0
 80114a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80114aa:	4b46      	ldr	r3, [pc, #280]	; (80115c4 <tcp_receive+0xb10>)
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	899b      	ldrh	r3, [r3, #12]
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fa fb88 	bl	800bbc8 <lwip_htons>
 80114b8:	4603      	mov	r3, r0
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	f003 0301 	and.w	r3, r3, #1
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	f000 80b8 	beq.w	8011636 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80114c6:	4b45      	ldr	r3, [pc, #276]	; (80115dc <tcp_receive+0xb28>)
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	f043 0320 	orr.w	r3, r3, #32
 80114ce:	b2da      	uxtb	r2, r3
 80114d0:	4b42      	ldr	r3, [pc, #264]	; (80115dc <tcp_receive+0xb28>)
 80114d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114d4:	e0af      	b.n	8011636 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	4a36      	ldr	r2, [pc, #216]	; (80115c0 <tcp_receive+0xb0c>)
 80114e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	891b      	ldrh	r3, [r3, #8]
 80114ec:	461c      	mov	r4, r3
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	899b      	ldrh	r3, [r3, #12]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fa fb66 	bl	800bbc8 <lwip_htons>
 80114fc:	4603      	mov	r3, r0
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	f003 0303 	and.w	r3, r3, #3
 8011504:	2b00      	cmp	r3, #0
 8011506:	d001      	beq.n	801150c <tcp_receive+0xa58>
 8011508:	2301      	movs	r3, #1
 801150a:	e000      	b.n	801150e <tcp_receive+0xa5a>
 801150c:	2300      	movs	r3, #0
 801150e:	191a      	adds	r2, r3, r4
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011514:	441a      	add	r2, r3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801151e:	461c      	mov	r4, r3
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	891b      	ldrh	r3, [r3, #8]
 8011524:	461d      	mov	r5, r3
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	899b      	ldrh	r3, [r3, #12]
 801152c:	b29b      	uxth	r3, r3
 801152e:	4618      	mov	r0, r3
 8011530:	f7fa fb4a 	bl	800bbc8 <lwip_htons>
 8011534:	4603      	mov	r3, r0
 8011536:	b2db      	uxtb	r3, r3
 8011538:	f003 0303 	and.w	r3, r3, #3
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <tcp_receive+0xa90>
 8011540:	2301      	movs	r3, #1
 8011542:	e000      	b.n	8011546 <tcp_receive+0xa92>
 8011544:	2300      	movs	r3, #0
 8011546:	442b      	add	r3, r5
 8011548:	429c      	cmp	r4, r3
 801154a:	d206      	bcs.n	801155a <tcp_receive+0xaa6>
 801154c:	4b1e      	ldr	r3, [pc, #120]	; (80115c8 <tcp_receive+0xb14>)
 801154e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011552:	4923      	ldr	r1, [pc, #140]	; (80115e0 <tcp_receive+0xb2c>)
 8011554:	481e      	ldr	r0, [pc, #120]	; (80115d0 <tcp_receive+0xb1c>)
 8011556:	f007 fbfb 	bl	8018d50 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	891b      	ldrh	r3, [r3, #8]
 801155e:	461c      	mov	r4, r3
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	899b      	ldrh	r3, [r3, #12]
 8011566:	b29b      	uxth	r3, r3
 8011568:	4618      	mov	r0, r3
 801156a:	f7fa fb2d 	bl	800bbc8 <lwip_htons>
 801156e:	4603      	mov	r3, r0
 8011570:	b2db      	uxtb	r3, r3
 8011572:	f003 0303 	and.w	r3, r3, #3
 8011576:	2b00      	cmp	r3, #0
 8011578:	d001      	beq.n	801157e <tcp_receive+0xaca>
 801157a:	2301      	movs	r3, #1
 801157c:	e000      	b.n	8011580 <tcp_receive+0xacc>
 801157e:	2300      	movs	r3, #0
 8011580:	1919      	adds	r1, r3, r4
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011586:	b28b      	uxth	r3, r1
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	b29a      	uxth	r2, r3
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f7fc fd17 	bl	800dfc4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	891b      	ldrh	r3, [r3, #8]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d028      	beq.n	80115f2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80115a0:	4b0d      	ldr	r3, [pc, #52]	; (80115d8 <tcp_receive+0xb24>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d01d      	beq.n	80115e4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80115a8:	4b0b      	ldr	r3, [pc, #44]	; (80115d8 <tcp_receive+0xb24>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	4619      	mov	r1, r3
 80115b2:	4610      	mov	r0, r2
 80115b4:	f7fb ffd8 	bl	800d568 <pbuf_cat>
 80115b8:	e018      	b.n	80115ec <tcp_receive+0xb38>
 80115ba:	bf00      	nop
 80115bc:	20011276 	.word	0x20011276
 80115c0:	2001126c 	.word	0x2001126c
 80115c4:	2001124c 	.word	0x2001124c
 80115c8:	0801bce8 	.word	0x0801bce8
 80115cc:	0801c0c8 	.word	0x0801c0c8
 80115d0:	0801bd34 	.word	0x0801bd34
 80115d4:	0801c104 	.word	0x0801c104
 80115d8:	2001127c 	.word	0x2001127c
 80115dc:	20011279 	.word	0x20011279
 80115e0:	0801c124 	.word	0x0801c124
            } else {
              recv_data = cseg->p;
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	4a70      	ldr	r2, [pc, #448]	; (80117ac <tcp_receive+0xcf8>)
 80115ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	2200      	movs	r2, #0
 80115f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	899b      	ldrh	r3, [r3, #12]
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fa fae4 	bl	800bbc8 <lwip_htons>
 8011600:	4603      	mov	r3, r0
 8011602:	b2db      	uxtb	r3, r3
 8011604:	f003 0301 	and.w	r3, r3, #1
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00d      	beq.n	8011628 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801160c:	4b68      	ldr	r3, [pc, #416]	; (80117b0 <tcp_receive+0xcfc>)
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	f043 0320 	orr.w	r3, r3, #32
 8011614:	b2da      	uxtb	r2, r3
 8011616:	4b66      	ldr	r3, [pc, #408]	; (80117b0 <tcp_receive+0xcfc>)
 8011618:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	7d1b      	ldrb	r3, [r3, #20]
 801161e:	2b04      	cmp	r3, #4
 8011620:	d102      	bne.n	8011628 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2207      	movs	r2, #7
 8011626:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011630:	68b8      	ldr	r0, [r7, #8]
 8011632:	f7fd fb04 	bl	800ec3e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801163a:	2b00      	cmp	r3, #0
 801163c:	d008      	beq.n	8011650 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801164a:	429a      	cmp	r2, r3
 801164c:	f43f af43 	beq.w	80114d6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	8b5b      	ldrh	r3, [r3, #26]
 8011654:	f003 0301 	and.w	r3, r3, #1
 8011658:	2b00      	cmp	r3, #0
 801165a:	d00e      	beq.n	801167a <tcp_receive+0xbc6>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	8b5b      	ldrh	r3, [r3, #26]
 8011660:	f023 0301 	bic.w	r3, r3, #1
 8011664:	b29a      	uxth	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	835a      	strh	r2, [r3, #26]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	8b5b      	ldrh	r3, [r3, #26]
 801166e:	f043 0302 	orr.w	r3, r3, #2
 8011672:	b29a      	uxth	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011678:	e188      	b.n	801198c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	8b5b      	ldrh	r3, [r3, #26]
 801167e:	f043 0301 	orr.w	r3, r3, #1
 8011682:	b29a      	uxth	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011688:	e180      	b.n	801198c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801168e:	2b00      	cmp	r3, #0
 8011690:	d106      	bne.n	80116a0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011692:	4848      	ldr	r0, [pc, #288]	; (80117b4 <tcp_receive+0xd00>)
 8011694:	f7fd faec 	bl	800ec70 <tcp_seg_copy>
 8011698:	4602      	mov	r2, r0
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	675a      	str	r2, [r3, #116]	; 0x74
 801169e:	e16d      	b.n	801197c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80116a0:	2300      	movs	r3, #0
 80116a2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80116aa:	e157      	b.n	801195c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80116ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	685a      	ldr	r2, [r3, #4]
 80116b2:	4b41      	ldr	r3, [pc, #260]	; (80117b8 <tcp_receive+0xd04>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d11d      	bne.n	80116f6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80116ba:	4b3e      	ldr	r3, [pc, #248]	; (80117b4 <tcp_receive+0xd00>)
 80116bc:	891a      	ldrh	r2, [r3, #8]
 80116be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c0:	891b      	ldrh	r3, [r3, #8]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	f240 814f 	bls.w	8011966 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116c8:	483a      	ldr	r0, [pc, #232]	; (80117b4 <tcp_receive+0xd00>)
 80116ca:	f7fd fad1 	bl	800ec70 <tcp_seg_copy>
 80116ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f000 8149 	beq.w	801196a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80116d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d003      	beq.n	80116e6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80116de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116e0:	697a      	ldr	r2, [r7, #20]
 80116e2:	601a      	str	r2, [r3, #0]
 80116e4:	e002      	b.n	80116ec <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	697a      	ldr	r2, [r7, #20]
 80116ea:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80116ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116ee:	6978      	ldr	r0, [r7, #20]
 80116f0:	f7ff f8dc 	bl	80108ac <tcp_oos_insert_segment>
                }
                break;
 80116f4:	e139      	b.n	801196a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80116f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d117      	bne.n	801172c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80116fc:	4b2e      	ldr	r3, [pc, #184]	; (80117b8 <tcp_receive+0xd04>)
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	1ad3      	subs	r3, r2, r3
 8011708:	2b00      	cmp	r3, #0
 801170a:	da57      	bge.n	80117bc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801170c:	4829      	ldr	r0, [pc, #164]	; (80117b4 <tcp_receive+0xd00>)
 801170e:	f7fd faaf 	bl	800ec70 <tcp_seg_copy>
 8011712:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	2b00      	cmp	r3, #0
 8011718:	f000 8129 	beq.w	801196e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	69ba      	ldr	r2, [r7, #24]
 8011720:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011724:	69b8      	ldr	r0, [r7, #24]
 8011726:	f7ff f8c1 	bl	80108ac <tcp_oos_insert_segment>
                  }
                  break;
 801172a:	e120      	b.n	801196e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801172c:	4b22      	ldr	r3, [pc, #136]	; (80117b8 <tcp_receive+0xd04>)
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	3b01      	subs	r3, #1
 801173a:	2b00      	cmp	r3, #0
 801173c:	db3e      	blt.n	80117bc <tcp_receive+0xd08>
 801173e:	4b1e      	ldr	r3, [pc, #120]	; (80117b8 <tcp_receive+0xd04>)
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	3301      	adds	r3, #1
 801174c:	2b00      	cmp	r3, #0
 801174e:	dc35      	bgt.n	80117bc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011750:	4818      	ldr	r0, [pc, #96]	; (80117b4 <tcp_receive+0xd00>)
 8011752:	f7fd fa8d 	bl	800ec70 <tcp_seg_copy>
 8011756:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	2b00      	cmp	r3, #0
 801175c:	f000 8109 	beq.w	8011972 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011762:	68db      	ldr	r3, [r3, #12]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011768:	8912      	ldrh	r2, [r2, #8]
 801176a:	441a      	add	r2, r3
 801176c:	4b12      	ldr	r3, [pc, #72]	; (80117b8 <tcp_receive+0xd04>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	2b00      	cmp	r3, #0
 8011774:	dd12      	ble.n	801179c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011776:	4b10      	ldr	r3, [pc, #64]	; (80117b8 <tcp_receive+0xd04>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	b29a      	uxth	r2, r3
 801177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	b29b      	uxth	r3, r3
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	b29a      	uxth	r2, r3
 8011788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801178a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801178e:	685a      	ldr	r2, [r3, #4]
 8011790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011792:	891b      	ldrh	r3, [r3, #8]
 8011794:	4619      	mov	r1, r3
 8011796:	4610      	mov	r0, r2
 8011798:	f7fb fc92 	bl	800d0c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801179e:	69fa      	ldr	r2, [r7, #28]
 80117a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80117a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80117a4:	69f8      	ldr	r0, [r7, #28]
 80117a6:	f7ff f881 	bl	80108ac <tcp_oos_insert_segment>
                  }
                  break;
 80117aa:	e0e2      	b.n	8011972 <tcp_receive+0xebe>
 80117ac:	2001127c 	.word	0x2001127c
 80117b0:	20011279 	.word	0x20011279
 80117b4:	2001124c 	.word	0x2001124c
 80117b8:	2001126c 	.word	0x2001126c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80117bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117be:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80117c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f040 80c6 	bne.w	8011956 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80117ca:	4b80      	ldr	r3, [pc, #512]	; (80119cc <tcp_receive+0xf18>)
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f340 80bd 	ble.w	8011956 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117de:	68db      	ldr	r3, [r3, #12]
 80117e0:	899b      	ldrh	r3, [r3, #12]
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fa f9ef 	bl	800bbc8 <lwip_htons>
 80117ea:	4603      	mov	r3, r0
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	f003 0301 	and.w	r3, r3, #1
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f040 80bf 	bne.w	8011976 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80117f8:	4875      	ldr	r0, [pc, #468]	; (80119d0 <tcp_receive+0xf1c>)
 80117fa:	f7fd fa39 	bl	800ec70 <tcp_seg_copy>
 80117fe:	4602      	mov	r2, r0
 8011800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011802:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	f000 80b6 	beq.w	801197a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011816:	8912      	ldrh	r2, [r2, #8]
 8011818:	441a      	add	r2, r3
 801181a:	4b6c      	ldr	r3, [pc, #432]	; (80119cc <tcp_receive+0xf18>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	1ad3      	subs	r3, r2, r3
 8011820:	2b00      	cmp	r3, #0
 8011822:	dd12      	ble.n	801184a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011824:	4b69      	ldr	r3, [pc, #420]	; (80119cc <tcp_receive+0xf18>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	b29a      	uxth	r2, r3
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	b29b      	uxth	r3, r3
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	b29a      	uxth	r2, r3
 8011836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011838:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183c:	685a      	ldr	r2, [r3, #4]
 801183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011840:	891b      	ldrh	r3, [r3, #8]
 8011842:	4619      	mov	r1, r3
 8011844:	4610      	mov	r0, r2
 8011846:	f7fb fc3b 	bl	800d0c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801184a:	4b62      	ldr	r3, [pc, #392]	; (80119d4 <tcp_receive+0xf20>)
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	4b5e      	ldr	r3, [pc, #376]	; (80119cc <tcp_receive+0xf18>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	441a      	add	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185a:	6879      	ldr	r1, [r7, #4]
 801185c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801185e:	440b      	add	r3, r1
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	2b00      	cmp	r3, #0
 8011864:	f340 8089 	ble.w	801197a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	899b      	ldrh	r3, [r3, #12]
 8011870:	b29b      	uxth	r3, r3
 8011872:	4618      	mov	r0, r3
 8011874:	f7fa f9a8 	bl	800bbc8 <lwip_htons>
 8011878:	4603      	mov	r3, r0
 801187a:	b2db      	uxtb	r3, r3
 801187c:	f003 0301 	and.w	r3, r3, #1
 8011880:	2b00      	cmp	r3, #0
 8011882:	d022      	beq.n	80118ca <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	899b      	ldrh	r3, [r3, #12]
 801188c:	b29b      	uxth	r3, r3
 801188e:	b21b      	sxth	r3, r3
 8011890:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011894:	b21c      	sxth	r4, r3
 8011896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	899b      	ldrh	r3, [r3, #12]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fa f991 	bl	800bbc8 <lwip_htons>
 80118a6:	4603      	mov	r3, r0
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fa f988 	bl	800bbc8 <lwip_htons>
 80118b8:	4603      	mov	r3, r0
 80118ba:	b21b      	sxth	r3, r3
 80118bc:	4323      	orrs	r3, r4
 80118be:	b21a      	sxth	r2, r3
 80118c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	b292      	uxth	r2, r2
 80118c8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118d4:	4413      	add	r3, r2
 80118d6:	b299      	uxth	r1, r3
 80118d8:	4b3c      	ldr	r3, [pc, #240]	; (80119cc <tcp_receive+0xf18>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	b29a      	uxth	r2, r3
 80118de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	1a8a      	subs	r2, r1, r2
 80118e4:	b292      	uxth	r2, r2
 80118e6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80118e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	685a      	ldr	r2, [r3, #4]
 80118ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	891b      	ldrh	r3, [r3, #8]
 80118f4:	4619      	mov	r1, r3
 80118f6:	4610      	mov	r0, r2
 80118f8:	f7fb fbe2 	bl	800d0c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80118fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	891c      	ldrh	r4, [r3, #8]
 8011902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	899b      	ldrh	r3, [r3, #12]
 801190a:	b29b      	uxth	r3, r3
 801190c:	4618      	mov	r0, r3
 801190e:	f7fa f95b 	bl	800bbc8 <lwip_htons>
 8011912:	4603      	mov	r3, r0
 8011914:	b2db      	uxtb	r3, r3
 8011916:	f003 0303 	and.w	r3, r3, #3
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <tcp_receive+0xe6e>
 801191e:	2301      	movs	r3, #1
 8011920:	e000      	b.n	8011924 <tcp_receive+0xe70>
 8011922:	2300      	movs	r3, #0
 8011924:	4423      	add	r3, r4
 8011926:	b29a      	uxth	r2, r3
 8011928:	4b2a      	ldr	r3, [pc, #168]	; (80119d4 <tcp_receive+0xf20>)
 801192a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801192c:	4b29      	ldr	r3, [pc, #164]	; (80119d4 <tcp_receive+0xf20>)
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	461a      	mov	r2, r3
 8011932:	4b26      	ldr	r3, [pc, #152]	; (80119cc <tcp_receive+0xf18>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	441a      	add	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801193c:	6879      	ldr	r1, [r7, #4]
 801193e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011940:	440b      	add	r3, r1
 8011942:	429a      	cmp	r2, r3
 8011944:	d019      	beq.n	801197a <tcp_receive+0xec6>
 8011946:	4b24      	ldr	r3, [pc, #144]	; (80119d8 <tcp_receive+0xf24>)
 8011948:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801194c:	4923      	ldr	r1, [pc, #140]	; (80119dc <tcp_receive+0xf28>)
 801194e:	4824      	ldr	r0, [pc, #144]	; (80119e0 <tcp_receive+0xf2c>)
 8011950:	f007 f9fe 	bl	8018d50 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011954:	e011      	b.n	801197a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	63bb      	str	r3, [r7, #56]	; 0x38
 801195c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195e:	2b00      	cmp	r3, #0
 8011960:	f47f aea4 	bne.w	80116ac <tcp_receive+0xbf8>
 8011964:	e00a      	b.n	801197c <tcp_receive+0xec8>
                break;
 8011966:	bf00      	nop
 8011968:	e008      	b.n	801197c <tcp_receive+0xec8>
                break;
 801196a:	bf00      	nop
 801196c:	e006      	b.n	801197c <tcp_receive+0xec8>
                  break;
 801196e:	bf00      	nop
 8011970:	e004      	b.n	801197c <tcp_receive+0xec8>
                  break;
 8011972:	bf00      	nop
 8011974:	e002      	b.n	801197c <tcp_receive+0xec8>
                  break;
 8011976:	bf00      	nop
 8011978:	e000      	b.n	801197c <tcp_receive+0xec8>
                break;
 801197a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f001 fe8b 	bl	8013698 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011982:	e003      	b.n	801198c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f001 fe87 	bl	8013698 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801198a:	e01a      	b.n	80119c2 <tcp_receive+0xf0e>
 801198c:	e019      	b.n	80119c2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801198e:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <tcp_receive+0xf18>)
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	2b00      	cmp	r3, #0
 801199a:	db0a      	blt.n	80119b2 <tcp_receive+0xefe>
 801199c:	4b0b      	ldr	r3, [pc, #44]	; (80119cc <tcp_receive+0xf18>)
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a4:	6879      	ldr	r1, [r7, #4]
 80119a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119a8:	440b      	add	r3, r1
 80119aa:	1ad3      	subs	r3, r2, r3
 80119ac:	3301      	adds	r3, #1
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	dd07      	ble.n	80119c2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	8b5b      	ldrh	r3, [r3, #26]
 80119b6:	f043 0302 	orr.w	r3, r3, #2
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80119c0:	e7ff      	b.n	80119c2 <tcp_receive+0xf0e>
 80119c2:	bf00      	nop
 80119c4:	3750      	adds	r7, #80	; 0x50
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bdb0      	pop	{r4, r5, r7, pc}
 80119ca:	bf00      	nop
 80119cc:	2001126c 	.word	0x2001126c
 80119d0:	2001124c 	.word	0x2001124c
 80119d4:	20011276 	.word	0x20011276
 80119d8:	0801bce8 	.word	0x0801bce8
 80119dc:	0801c090 	.word	0x0801c090
 80119e0:	0801bd34 	.word	0x0801bd34

080119e4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119ea:	4b15      	ldr	r3, [pc, #84]	; (8011a40 <tcp_get_next_optbyte+0x5c>)
 80119ec:	881b      	ldrh	r3, [r3, #0]
 80119ee:	1c5a      	adds	r2, r3, #1
 80119f0:	b291      	uxth	r1, r2
 80119f2:	4a13      	ldr	r2, [pc, #76]	; (8011a40 <tcp_get_next_optbyte+0x5c>)
 80119f4:	8011      	strh	r1, [r2, #0]
 80119f6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119f8:	4b12      	ldr	r3, [pc, #72]	; (8011a44 <tcp_get_next_optbyte+0x60>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d004      	beq.n	8011a0a <tcp_get_next_optbyte+0x26>
 8011a00:	4b11      	ldr	r3, [pc, #68]	; (8011a48 <tcp_get_next_optbyte+0x64>)
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	88fa      	ldrh	r2, [r7, #6]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d208      	bcs.n	8011a1c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011a0a:	4b10      	ldr	r3, [pc, #64]	; (8011a4c <tcp_get_next_optbyte+0x68>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	3314      	adds	r3, #20
 8011a10:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011a12:	88fb      	ldrh	r3, [r7, #6]
 8011a14:	683a      	ldr	r2, [r7, #0]
 8011a16:	4413      	add	r3, r2
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	e00b      	b.n	8011a34 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011a1c:	88fb      	ldrh	r3, [r7, #6]
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	4b09      	ldr	r3, [pc, #36]	; (8011a48 <tcp_get_next_optbyte+0x64>)
 8011a22:	881b      	ldrh	r3, [r3, #0]
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	1ad3      	subs	r3, r2, r3
 8011a28:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011a2a:	4b06      	ldr	r3, [pc, #24]	; (8011a44 <tcp_get_next_optbyte+0x60>)
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	797b      	ldrb	r3, [r7, #5]
 8011a30:	4413      	add	r3, r2
 8011a32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	20011268 	.word	0x20011268
 8011a44:	20011264 	.word	0x20011264
 8011a48:	20011262 	.word	0x20011262
 8011a4c:	2001125c 	.word	0x2001125c

08011a50 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d106      	bne.n	8011a6c <tcp_parseopt+0x1c>
 8011a5e:	4b32      	ldr	r3, [pc, #200]	; (8011b28 <tcp_parseopt+0xd8>)
 8011a60:	f240 727d 	movw	r2, #1917	; 0x77d
 8011a64:	4931      	ldr	r1, [pc, #196]	; (8011b2c <tcp_parseopt+0xdc>)
 8011a66:	4832      	ldr	r0, [pc, #200]	; (8011b30 <tcp_parseopt+0xe0>)
 8011a68:	f007 f972 	bl	8018d50 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a6c:	4b31      	ldr	r3, [pc, #196]	; (8011b34 <tcp_parseopt+0xe4>)
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d055      	beq.n	8011b20 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a74:	4b30      	ldr	r3, [pc, #192]	; (8011b38 <tcp_parseopt+0xe8>)
 8011a76:	2200      	movs	r2, #0
 8011a78:	801a      	strh	r2, [r3, #0]
 8011a7a:	e045      	b.n	8011b08 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011a7c:	f7ff ffb2 	bl	80119e4 <tcp_get_next_optbyte>
 8011a80:	4603      	mov	r3, r0
 8011a82:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a84:	7bfb      	ldrb	r3, [r7, #15]
 8011a86:	2b02      	cmp	r3, #2
 8011a88:	d006      	beq.n	8011a98 <tcp_parseopt+0x48>
 8011a8a:	2b02      	cmp	r3, #2
 8011a8c:	dc2b      	bgt.n	8011ae6 <tcp_parseopt+0x96>
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d041      	beq.n	8011b16 <tcp_parseopt+0xc6>
 8011a92:	2b01      	cmp	r3, #1
 8011a94:	d127      	bne.n	8011ae6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011a96:	e037      	b.n	8011b08 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a98:	f7ff ffa4 	bl	80119e4 <tcp_get_next_optbyte>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	2b04      	cmp	r3, #4
 8011aa0:	d13b      	bne.n	8011b1a <tcp_parseopt+0xca>
 8011aa2:	4b25      	ldr	r3, [pc, #148]	; (8011b38 <tcp_parseopt+0xe8>)
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	4a22      	ldr	r2, [pc, #136]	; (8011b34 <tcp_parseopt+0xe4>)
 8011aaa:	8812      	ldrh	r2, [r2, #0]
 8011aac:	4293      	cmp	r3, r2
 8011aae:	da34      	bge.n	8011b1a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011ab0:	f7ff ff98 	bl	80119e4 <tcp_get_next_optbyte>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	021b      	lsls	r3, r3, #8
 8011aba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011abc:	f7ff ff92 	bl	80119e4 <tcp_get_next_optbyte>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	89bb      	ldrh	r3, [r7, #12]
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011aca:	89bb      	ldrh	r3, [r7, #12]
 8011acc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011ad0:	d804      	bhi.n	8011adc <tcp_parseopt+0x8c>
 8011ad2:	89bb      	ldrh	r3, [r7, #12]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d001      	beq.n	8011adc <tcp_parseopt+0x8c>
 8011ad8:	89ba      	ldrh	r2, [r7, #12]
 8011ada:	e001      	b.n	8011ae0 <tcp_parseopt+0x90>
 8011adc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ae4:	e010      	b.n	8011b08 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ae6:	f7ff ff7d 	bl	80119e4 <tcp_get_next_optbyte>
 8011aea:	4603      	mov	r3, r0
 8011aec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011aee:	7afb      	ldrb	r3, [r7, #11]
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d914      	bls.n	8011b1e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011af4:	7afb      	ldrb	r3, [r7, #11]
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	4b0f      	ldr	r3, [pc, #60]	; (8011b38 <tcp_parseopt+0xe8>)
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	4413      	add	r3, r2
 8011afe:	b29b      	uxth	r3, r3
 8011b00:	3b02      	subs	r3, #2
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	4b0c      	ldr	r3, [pc, #48]	; (8011b38 <tcp_parseopt+0xe8>)
 8011b06:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011b08:	4b0b      	ldr	r3, [pc, #44]	; (8011b38 <tcp_parseopt+0xe8>)
 8011b0a:	881a      	ldrh	r2, [r3, #0]
 8011b0c:	4b09      	ldr	r3, [pc, #36]	; (8011b34 <tcp_parseopt+0xe4>)
 8011b0e:	881b      	ldrh	r3, [r3, #0]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d3b3      	bcc.n	8011a7c <tcp_parseopt+0x2c>
 8011b14:	e004      	b.n	8011b20 <tcp_parseopt+0xd0>
          return;
 8011b16:	bf00      	nop
 8011b18:	e002      	b.n	8011b20 <tcp_parseopt+0xd0>
            return;
 8011b1a:	bf00      	nop
 8011b1c:	e000      	b.n	8011b20 <tcp_parseopt+0xd0>
            return;
 8011b1e:	bf00      	nop
      }
    }
  }
}
 8011b20:	3710      	adds	r7, #16
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	0801bce8 	.word	0x0801bce8
 8011b2c:	0801c14c 	.word	0x0801c14c
 8011b30:	0801bd34 	.word	0x0801bd34
 8011b34:	20011260 	.word	0x20011260
 8011b38:	20011268 	.word	0x20011268

08011b3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b40:	4b05      	ldr	r3, [pc, #20]	; (8011b58 <tcp_trigger_input_pcb_close+0x1c>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	f043 0310 	orr.w	r3, r3, #16
 8011b48:	b2da      	uxtb	r2, r3
 8011b4a:	4b03      	ldr	r3, [pc, #12]	; (8011b58 <tcp_trigger_input_pcb_close+0x1c>)
 8011b4c:	701a      	strb	r2, [r3, #0]
}
 8011b4e:	bf00      	nop
 8011b50:	46bd      	mov	sp, r7
 8011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b56:	4770      	bx	lr
 8011b58:	20011279 	.word	0x20011279

08011b5c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d00a      	beq.n	8011b84 <tcp_route+0x28>
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	7a1b      	ldrb	r3, [r3, #8]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d006      	beq.n	8011b84 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	7a1b      	ldrb	r3, [r3, #8]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7fb f898 	bl	800ccb0 <netif_get_by_index>
 8011b80:	4603      	mov	r3, r0
 8011b82:	e003      	b.n	8011b8c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f003 fcb9 	bl	80154fc <ip4_route>
 8011b8a:	4603      	mov	r3, r0
  }
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3710      	adds	r7, #16
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b94:	b590      	push	{r4, r7, lr}
 8011b96:	b087      	sub	sp, #28
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	60f8      	str	r0, [r7, #12]
 8011b9c:	60b9      	str	r1, [r7, #8]
 8011b9e:	603b      	str	r3, [r7, #0]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d105      	bne.n	8011bb6 <tcp_create_segment+0x22>
 8011baa:	4b44      	ldr	r3, [pc, #272]	; (8011cbc <tcp_create_segment+0x128>)
 8011bac:	22a3      	movs	r2, #163	; 0xa3
 8011bae:	4944      	ldr	r1, [pc, #272]	; (8011cc0 <tcp_create_segment+0x12c>)
 8011bb0:	4844      	ldr	r0, [pc, #272]	; (8011cc4 <tcp_create_segment+0x130>)
 8011bb2:	f007 f8cd 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d105      	bne.n	8011bc8 <tcp_create_segment+0x34>
 8011bbc:	4b3f      	ldr	r3, [pc, #252]	; (8011cbc <tcp_create_segment+0x128>)
 8011bbe:	22a4      	movs	r2, #164	; 0xa4
 8011bc0:	4941      	ldr	r1, [pc, #260]	; (8011cc8 <tcp_create_segment+0x134>)
 8011bc2:	4840      	ldr	r0, [pc, #256]	; (8011cc4 <tcp_create_segment+0x130>)
 8011bc4:	f007 f8c4 	bl	8018d50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011bc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bcc:	009b      	lsls	r3, r3, #2
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	f003 0304 	and.w	r3, r3, #4
 8011bd4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011bd6:	2003      	movs	r0, #3
 8011bd8:	f7fa fcde 	bl	800c598 <memp_malloc>
 8011bdc:	6138      	str	r0, [r7, #16]
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d104      	bne.n	8011bee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011be4:	68b8      	ldr	r0, [r7, #8]
 8011be6:	f7fb fbf1 	bl	800d3cc <pbuf_free>
    return NULL;
 8011bea:	2300      	movs	r3, #0
 8011bec:	e061      	b.n	8011cb2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011bf4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	891a      	ldrh	r2, [r3, #8]
 8011c06:	7dfb      	ldrb	r3, [r7, #23]
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d205      	bcs.n	8011c1a <tcp_create_segment+0x86>
 8011c0e:	4b2b      	ldr	r3, [pc, #172]	; (8011cbc <tcp_create_segment+0x128>)
 8011c10:	22b0      	movs	r2, #176	; 0xb0
 8011c12:	492e      	ldr	r1, [pc, #184]	; (8011ccc <tcp_create_segment+0x138>)
 8011c14:	482b      	ldr	r0, [pc, #172]	; (8011cc4 <tcp_create_segment+0x130>)
 8011c16:	f007 f89b 	bl	8018d50 <iprintf>
  seg->len = p->tot_len - optlen;
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	891a      	ldrh	r2, [r3, #8]
 8011c1e:	7dfb      	ldrb	r3, [r7, #23]
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	1ad3      	subs	r3, r2, r3
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011c2a:	2114      	movs	r1, #20
 8011c2c:	68b8      	ldr	r0, [r7, #8]
 8011c2e:	f7fb fb37 	bl	800d2a0 <pbuf_add_header>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d004      	beq.n	8011c42 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c38:	6938      	ldr	r0, [r7, #16]
 8011c3a:	f7fd f800 	bl	800ec3e <tcp_seg_free>
    return NULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	e037      	b.n	8011cb2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	685a      	ldr	r2, [r3, #4]
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	8ada      	ldrh	r2, [r3, #22]
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	68dc      	ldr	r4, [r3, #12]
 8011c54:	4610      	mov	r0, r2
 8011c56:	f7f9 ffb7 	bl	800bbc8 <lwip_htons>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	8b1a      	ldrh	r2, [r3, #24]
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	68dc      	ldr	r4, [r3, #12]
 8011c66:	4610      	mov	r0, r2
 8011c68:	f7f9 ffae 	bl	800bbc8 <lwip_htons>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c70:	693b      	ldr	r3, [r7, #16]
 8011c72:	68dc      	ldr	r4, [r3, #12]
 8011c74:	6838      	ldr	r0, [r7, #0]
 8011c76:	f7f9 ffbc 	bl	800bbf2 <lwip_htonl>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c7e:	7dfb      	ldrb	r3, [r7, #23]
 8011c80:	089b      	lsrs	r3, r3, #2
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	3305      	adds	r3, #5
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	031b      	lsls	r3, r3, #12
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	79fb      	ldrb	r3, [r7, #7]
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	4313      	orrs	r3, r2
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	68dc      	ldr	r4, [r3, #12]
 8011c9a:	4610      	mov	r0, r2
 8011c9c:	f7f9 ff94 	bl	800bbc8 <lwip_htons>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	749a      	strb	r2, [r3, #18]
 8011cac:	2200      	movs	r2, #0
 8011cae:	74da      	strb	r2, [r3, #19]
  return seg;
 8011cb0:	693b      	ldr	r3, [r7, #16]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	371c      	adds	r7, #28
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd90      	pop	{r4, r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	0801c168 	.word	0x0801c168
 8011cc0:	0801c19c 	.word	0x0801c19c
 8011cc4:	0801c1bc 	.word	0x0801c1bc
 8011cc8:	0801c1e4 	.word	0x0801c1e4
 8011ccc:	0801c208 	.word	0x0801c208

08011cd0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b086      	sub	sp, #24
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	607b      	str	r3, [r7, #4]
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73fb      	strb	r3, [r7, #15]
 8011cdc:	460b      	mov	r3, r1
 8011cde:	81bb      	strh	r3, [r7, #12]
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011ce4:	89bb      	ldrh	r3, [r7, #12]
 8011ce6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d105      	bne.n	8011cfa <tcp_pbuf_prealloc+0x2a>
 8011cee:	4b30      	ldr	r3, [pc, #192]	; (8011db0 <tcp_pbuf_prealloc+0xe0>)
 8011cf0:	22e8      	movs	r2, #232	; 0xe8
 8011cf2:	4930      	ldr	r1, [pc, #192]	; (8011db4 <tcp_pbuf_prealloc+0xe4>)
 8011cf4:	4830      	ldr	r0, [pc, #192]	; (8011db8 <tcp_pbuf_prealloc+0xe8>)
 8011cf6:	f007 f82b 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011cfa:	6a3b      	ldr	r3, [r7, #32]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d105      	bne.n	8011d0c <tcp_pbuf_prealloc+0x3c>
 8011d00:	4b2b      	ldr	r3, [pc, #172]	; (8011db0 <tcp_pbuf_prealloc+0xe0>)
 8011d02:	22e9      	movs	r2, #233	; 0xe9
 8011d04:	492d      	ldr	r1, [pc, #180]	; (8011dbc <tcp_pbuf_prealloc+0xec>)
 8011d06:	482c      	ldr	r0, [pc, #176]	; (8011db8 <tcp_pbuf_prealloc+0xe8>)
 8011d08:	f007 f822 	bl	8018d50 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011d0c:	89ba      	ldrh	r2, [r7, #12]
 8011d0e:	897b      	ldrh	r3, [r7, #10]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d221      	bcs.n	8011d58 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d18:	f003 0302 	and.w	r3, r3, #2
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d111      	bne.n	8011d44 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011d20:	6a3b      	ldr	r3, [r7, #32]
 8011d22:	8b5b      	ldrh	r3, [r3, #26]
 8011d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d115      	bne.n	8011d58 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d007      	beq.n	8011d44 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d34:	6a3b      	ldr	r3, [r7, #32]
 8011d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d103      	bne.n	8011d44 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
 8011d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d009      	beq.n	8011d58 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d44:	89bb      	ldrh	r3, [r7, #12]
 8011d46:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011d4a:	f023 0203 	bic.w	r2, r3, #3
 8011d4e:	897b      	ldrh	r3, [r7, #10]
 8011d50:	4293      	cmp	r3, r2
 8011d52:	bf28      	it	cs
 8011d54:	4613      	movcs	r3, r2
 8011d56:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d58:	8af9      	ldrh	r1, [r7, #22]
 8011d5a:	7bfb      	ldrb	r3, [r7, #15]
 8011d5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fb f84f 	bl	800ce04 <pbuf_alloc>
 8011d66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d101      	bne.n	8011d72 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	e019      	b.n	8011da6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d006      	beq.n	8011d88 <tcp_pbuf_prealloc+0xb8>
 8011d7a:	4b0d      	ldr	r3, [pc, #52]	; (8011db0 <tcp_pbuf_prealloc+0xe0>)
 8011d7c:	f240 120b 	movw	r2, #267	; 0x10b
 8011d80:	490f      	ldr	r1, [pc, #60]	; (8011dc0 <tcp_pbuf_prealloc+0xf0>)
 8011d82:	480d      	ldr	r0, [pc, #52]	; (8011db8 <tcp_pbuf_prealloc+0xe8>)
 8011d84:	f006 ffe4 	bl	8018d50 <iprintf>
  *oversize = p->len - length;
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	895a      	ldrh	r2, [r3, #10]
 8011d8c:	89bb      	ldrh	r3, [r7, #12]
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	89ba      	ldrh	r2, [r7, #12]
 8011d9a:	811a      	strh	r2, [r3, #8]
 8011d9c:	693b      	ldr	r3, [r7, #16]
 8011d9e:	891a      	ldrh	r2, [r3, #8]
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	815a      	strh	r2, [r3, #10]
  return p;
 8011da4:	693b      	ldr	r3, [r7, #16]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3718      	adds	r7, #24
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	0801c168 	.word	0x0801c168
 8011db4:	0801c220 	.word	0x0801c220
 8011db8:	0801c1bc 	.word	0x0801c1bc
 8011dbc:	0801c244 	.word	0x0801c244
 8011dc0:	0801c264 	.word	0x0801c264

08011dc4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	460b      	mov	r3, r1
 8011dce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d106      	bne.n	8011de4 <tcp_write_checks+0x20>
 8011dd6:	4b33      	ldr	r3, [pc, #204]	; (8011ea4 <tcp_write_checks+0xe0>)
 8011dd8:	f240 1233 	movw	r2, #307	; 0x133
 8011ddc:	4932      	ldr	r1, [pc, #200]	; (8011ea8 <tcp_write_checks+0xe4>)
 8011dde:	4833      	ldr	r0, [pc, #204]	; (8011eac <tcp_write_checks+0xe8>)
 8011de0:	f006 ffb6 	bl	8018d50 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	7d1b      	ldrb	r3, [r3, #20]
 8011de8:	2b04      	cmp	r3, #4
 8011dea:	d00e      	beq.n	8011e0a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011df0:	2b07      	cmp	r3, #7
 8011df2:	d00a      	beq.n	8011e0a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011df8:	2b02      	cmp	r3, #2
 8011dfa:	d006      	beq.n	8011e0a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011e00:	2b03      	cmp	r3, #3
 8011e02:	d002      	beq.n	8011e0a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011e04:	f06f 030a 	mvn.w	r3, #10
 8011e08:	e048      	b.n	8011e9c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011e0a:	887b      	ldrh	r3, [r7, #2]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d101      	bne.n	8011e14 <tcp_write_checks+0x50>
    return ERR_OK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	e043      	b.n	8011e9c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e1a:	887a      	ldrh	r2, [r7, #2]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d909      	bls.n	8011e34 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	8b5b      	ldrh	r3, [r3, #26]
 8011e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e32:	e033      	b.n	8011e9c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e3a:	2b08      	cmp	r3, #8
 8011e3c:	d909      	bls.n	8011e52 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	8b5b      	ldrh	r3, [r3, #26]
 8011e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e46:	b29a      	uxth	r2, r3
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e50:	e024      	b.n	8011e9c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00f      	beq.n	8011e7c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d11a      	bne.n	8011e9a <tcp_write_checks+0xd6>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d116      	bne.n	8011e9a <tcp_write_checks+0xd6>
 8011e6c:	4b0d      	ldr	r3, [pc, #52]	; (8011ea4 <tcp_write_checks+0xe0>)
 8011e6e:	f240 1255 	movw	r2, #341	; 0x155
 8011e72:	490f      	ldr	r1, [pc, #60]	; (8011eb0 <tcp_write_checks+0xec>)
 8011e74:	480d      	ldr	r0, [pc, #52]	; (8011eac <tcp_write_checks+0xe8>)
 8011e76:	f006 ff6b 	bl	8018d50 <iprintf>
 8011e7a:	e00e      	b.n	8011e9a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d103      	bne.n	8011e8c <tcp_write_checks+0xc8>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d006      	beq.n	8011e9a <tcp_write_checks+0xd6>
 8011e8c:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <tcp_write_checks+0xe0>)
 8011e8e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011e92:	4908      	ldr	r1, [pc, #32]	; (8011eb4 <tcp_write_checks+0xf0>)
 8011e94:	4805      	ldr	r0, [pc, #20]	; (8011eac <tcp_write_checks+0xe8>)
 8011e96:	f006 ff5b 	bl	8018d50 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e9a:	2300      	movs	r3, #0
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3708      	adds	r7, #8
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	0801c168 	.word	0x0801c168
 8011ea8:	0801c278 	.word	0x0801c278
 8011eac:	0801c1bc 	.word	0x0801c1bc
 8011eb0:	0801c298 	.word	0x0801c298
 8011eb4:	0801c2d4 	.word	0x0801c2d4

08011eb8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011eb8:	b590      	push	{r4, r7, lr}
 8011eba:	b09b      	sub	sp, #108	; 0x6c
 8011ebc:	af04      	add	r7, sp, #16
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	4611      	mov	r1, r2
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	80fb      	strh	r3, [r7, #6]
 8011eca:	4613      	mov	r3, r2
 8011ecc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eda:	2300      	movs	r3, #0
 8011edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ede:	2300      	movs	r3, #0
 8011ee0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d109      	bne.n	8011f14 <tcp_write+0x5c>
 8011f00:	4ba4      	ldr	r3, [pc, #656]	; (8012194 <tcp_write+0x2dc>)
 8011f02:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011f06:	49a4      	ldr	r1, [pc, #656]	; (8012198 <tcp_write+0x2e0>)
 8011f08:	48a4      	ldr	r0, [pc, #656]	; (801219c <tcp_write+0x2e4>)
 8011f0a:	f006 ff21 	bl	8018d50 <iprintf>
 8011f0e:	f06f 030f 	mvn.w	r3, #15
 8011f12:	e32a      	b.n	801256a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f1a:	085b      	lsrs	r3, r3, #1
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f22:	4293      	cmp	r3, r2
 8011f24:	bf28      	it	cs
 8011f26:	4613      	movcs	r3, r2
 8011f28:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d102      	bne.n	8011f36 <tcp_write+0x7e>
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f34:	e000      	b.n	8011f38 <tcp_write+0x80>
 8011f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f38:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d109      	bne.n	8011f54 <tcp_write+0x9c>
 8011f40:	4b94      	ldr	r3, [pc, #592]	; (8012194 <tcp_write+0x2dc>)
 8011f42:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011f46:	4996      	ldr	r1, [pc, #600]	; (80121a0 <tcp_write+0x2e8>)
 8011f48:	4894      	ldr	r0, [pc, #592]	; (801219c <tcp_write+0x2e4>)
 8011f4a:	f006 ff01 	bl	8018d50 <iprintf>
 8011f4e:	f06f 030f 	mvn.w	r3, #15
 8011f52:	e30a      	b.n	801256a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f54:	88fb      	ldrh	r3, [r7, #6]
 8011f56:	4619      	mov	r1, r3
 8011f58:	68f8      	ldr	r0, [r7, #12]
 8011f5a:	f7ff ff33 	bl	8011dc4 <tcp_write_checks>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011f64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <tcp_write+0xba>
    return err;
 8011f6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f70:	e2fb      	b.n	801256a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	f000 80f6 	beq.w	8012178 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f90:	653b      	str	r3, [r7, #80]	; 0x50
 8011f92:	e002      	b.n	8011f9a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d1f8      	bne.n	8011f94 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa4:	7a9b      	ldrb	r3, [r3, #10]
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	f003 0304 	and.w	r3, r3, #4
 8011fae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011fb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb4:	891b      	ldrh	r3, [r3, #8]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	8c3b      	ldrh	r3, [r7, #32]
 8011fba:	440b      	add	r3, r1
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	da06      	bge.n	8011fce <tcp_write+0x116>
 8011fc0:	4b74      	ldr	r3, [pc, #464]	; (8012194 <tcp_write+0x2dc>)
 8011fc2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011fc6:	4977      	ldr	r1, [pc, #476]	; (80121a4 <tcp_write+0x2ec>)
 8011fc8:	4874      	ldr	r0, [pc, #464]	; (801219c <tcp_write+0x2e4>)
 8011fca:	f006 fec1 	bl	8018d50 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd0:	891a      	ldrh	r2, [r3, #8]
 8011fd2:	8c3b      	ldrh	r3, [r7, #32]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fe4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011fe6:	8a7b      	ldrh	r3, [r7, #18]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d026      	beq.n	801203a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011fec:	8a7b      	ldrh	r3, [r7, #18]
 8011fee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d206      	bcs.n	8012002 <tcp_write+0x14a>
 8011ff4:	4b67      	ldr	r3, [pc, #412]	; (8012194 <tcp_write+0x2dc>)
 8011ff6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011ffa:	496b      	ldr	r1, [pc, #428]	; (80121a8 <tcp_write+0x2f0>)
 8011ffc:	4867      	ldr	r0, [pc, #412]	; (801219c <tcp_write+0x2e4>)
 8011ffe:	f006 fea7 	bl	8018d50 <iprintf>
      seg = last_unsent;
 8012002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012004:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012006:	8a7b      	ldrh	r3, [r7, #18]
 8012008:	88fa      	ldrh	r2, [r7, #6]
 801200a:	4293      	cmp	r3, r2
 801200c:	bf28      	it	cs
 801200e:	4613      	movcs	r3, r2
 8012010:	b29b      	uxth	r3, r3
 8012012:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012014:	4293      	cmp	r3, r2
 8012016:	bf28      	it	cs
 8012018:	4613      	movcs	r3, r2
 801201a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801201c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012020:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012022:	4413      	add	r3, r2
 8012024:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012028:	8a7a      	ldrh	r2, [r7, #18]
 801202a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801202c:	1ad3      	subs	r3, r2, r3
 801202e:	b29b      	uxth	r3, r3
 8012030:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012032:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012034:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012036:	1ad3      	subs	r3, r2, r3
 8012038:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801203a:	8a7b      	ldrh	r3, [r7, #18]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d00b      	beq.n	8012058 <tcp_write+0x1a0>
 8012040:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012044:	88fb      	ldrh	r3, [r7, #6]
 8012046:	429a      	cmp	r2, r3
 8012048:	d006      	beq.n	8012058 <tcp_write+0x1a0>
 801204a:	4b52      	ldr	r3, [pc, #328]	; (8012194 <tcp_write+0x2dc>)
 801204c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012050:	4956      	ldr	r1, [pc, #344]	; (80121ac <tcp_write+0x2f4>)
 8012052:	4852      	ldr	r0, [pc, #328]	; (801219c <tcp_write+0x2e4>)
 8012054:	f006 fe7c 	bl	8018d50 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012058:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801205c:	88fb      	ldrh	r3, [r7, #6]
 801205e:	429a      	cmp	r2, r3
 8012060:	f080 8167 	bcs.w	8012332 <tcp_write+0x47a>
 8012064:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012066:	2b00      	cmp	r3, #0
 8012068:	f000 8163 	beq.w	8012332 <tcp_write+0x47a>
 801206c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801206e:	891b      	ldrh	r3, [r3, #8]
 8012070:	2b00      	cmp	r3, #0
 8012072:	f000 815e 	beq.w	8012332 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012076:	88fa      	ldrh	r2, [r7, #6]
 8012078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801207c:	1ad2      	subs	r2, r2, r3
 801207e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012080:	4293      	cmp	r3, r2
 8012082:	bfa8      	it	ge
 8012084:	4613      	movge	r3, r2
 8012086:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801208a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801208c:	797b      	ldrb	r3, [r7, #5]
 801208e:	f003 0301 	and.w	r3, r3, #1
 8012092:	2b00      	cmp	r3, #0
 8012094:	d027      	beq.n	80120e6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012096:	f107 0012 	add.w	r0, r7, #18
 801209a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801209c:	8bf9      	ldrh	r1, [r7, #30]
 801209e:	2301      	movs	r3, #1
 80120a0:	9302      	str	r3, [sp, #8]
 80120a2:	797b      	ldrb	r3, [r7, #5]
 80120a4:	9301      	str	r3, [sp, #4]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	9300      	str	r3, [sp, #0]
 80120aa:	4603      	mov	r3, r0
 80120ac:	2000      	movs	r0, #0
 80120ae:	f7ff fe0f 	bl	8011cd0 <tcp_pbuf_prealloc>
 80120b2:	6578      	str	r0, [r7, #84]	; 0x54
 80120b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	f000 8225 	beq.w	8012506 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80120bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120be:	6858      	ldr	r0, [r3, #4]
 80120c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	4413      	add	r3, r2
 80120c8:	8bfa      	ldrh	r2, [r7, #30]
 80120ca:	4619      	mov	r1, r3
 80120cc:	f006 fe2a 	bl	8018d24 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80120d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120d2:	f7fb fa09 	bl	800d4e8 <pbuf_clen>
 80120d6:	4603      	mov	r3, r0
 80120d8:	461a      	mov	r2, r3
 80120da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120de:	4413      	add	r3, r2
 80120e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80120e4:	e041      	b.n	801216a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80120e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	637b      	str	r3, [r7, #52]	; 0x34
 80120ec:	e002      	b.n	80120f4 <tcp_write+0x23c>
 80120ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	637b      	str	r3, [r7, #52]	; 0x34
 80120f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1f8      	bne.n	80120ee <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120fe:	7b1b      	ldrb	r3, [r3, #12]
 8012100:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012104:	2b00      	cmp	r3, #0
 8012106:	d115      	bne.n	8012134 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801210e:	8952      	ldrh	r2, [r2, #10]
 8012110:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	429a      	cmp	r2, r3
 8012116:	d10d      	bne.n	8012134 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801211c:	2b00      	cmp	r3, #0
 801211e:	d006      	beq.n	801212e <tcp_write+0x276>
 8012120:	4b1c      	ldr	r3, [pc, #112]	; (8012194 <tcp_write+0x2dc>)
 8012122:	f240 2231 	movw	r2, #561	; 0x231
 8012126:	4922      	ldr	r1, [pc, #136]	; (80121b0 <tcp_write+0x2f8>)
 8012128:	481c      	ldr	r0, [pc, #112]	; (801219c <tcp_write+0x2e4>)
 801212a:	f006 fe11 	bl	8018d50 <iprintf>
          extendlen = seglen;
 801212e:	8bfb      	ldrh	r3, [r7, #30]
 8012130:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012132:	e01a      	b.n	801216a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012134:	8bfb      	ldrh	r3, [r7, #30]
 8012136:	2201      	movs	r2, #1
 8012138:	4619      	mov	r1, r3
 801213a:	2000      	movs	r0, #0
 801213c:	f7fa fe62 	bl	800ce04 <pbuf_alloc>
 8012140:	6578      	str	r0, [r7, #84]	; 0x54
 8012142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 81e0 	beq.w	801250a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801214a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801214e:	68ba      	ldr	r2, [r7, #8]
 8012150:	441a      	add	r2, r3
 8012152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012154:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012156:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012158:	f7fb f9c6 	bl	800d4e8 <pbuf_clen>
 801215c:	4603      	mov	r3, r0
 801215e:	461a      	mov	r2, r3
 8012160:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012164:	4413      	add	r3, r2
 8012166:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801216a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801216e:	8bfb      	ldrh	r3, [r7, #30]
 8012170:	4413      	add	r3, r2
 8012172:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012176:	e0dc      	b.n	8012332 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801217e:	2b00      	cmp	r3, #0
 8012180:	f000 80d7 	beq.w	8012332 <tcp_write+0x47a>
 8012184:	4b03      	ldr	r3, [pc, #12]	; (8012194 <tcp_write+0x2dc>)
 8012186:	f240 224a 	movw	r2, #586	; 0x24a
 801218a:	490a      	ldr	r1, [pc, #40]	; (80121b4 <tcp_write+0x2fc>)
 801218c:	4803      	ldr	r0, [pc, #12]	; (801219c <tcp_write+0x2e4>)
 801218e:	f006 fddf 	bl	8018d50 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012192:	e0ce      	b.n	8012332 <tcp_write+0x47a>
 8012194:	0801c168 	.word	0x0801c168
 8012198:	0801c308 	.word	0x0801c308
 801219c:	0801c1bc 	.word	0x0801c1bc
 80121a0:	0801c320 	.word	0x0801c320
 80121a4:	0801c354 	.word	0x0801c354
 80121a8:	0801c36c 	.word	0x0801c36c
 80121ac:	0801c38c 	.word	0x0801c38c
 80121b0:	0801c3ac 	.word	0x0801c3ac
 80121b4:	0801c3d8 	.word	0x0801c3d8
    struct pbuf *p;
    u16_t left = len - pos;
 80121b8:	88fa      	ldrh	r2, [r7, #6]
 80121ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80121c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80121ce:	8b7a      	ldrh	r2, [r7, #26]
 80121d0:	8bbb      	ldrh	r3, [r7, #28]
 80121d2:	4293      	cmp	r3, r2
 80121d4:	bf28      	it	cs
 80121d6:	4613      	movcs	r3, r2
 80121d8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121da:	797b      	ldrb	r3, [r7, #5]
 80121dc:	f003 0301 	and.w	r3, r3, #1
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d036      	beq.n	8012252 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80121e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121e8:	b29a      	uxth	r2, r3
 80121ea:	8b3b      	ldrh	r3, [r7, #24]
 80121ec:	4413      	add	r3, r2
 80121ee:	b299      	uxth	r1, r3
 80121f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	bf0c      	ite	eq
 80121f6:	2301      	moveq	r3, #1
 80121f8:	2300      	movne	r3, #0
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	f107 0012 	add.w	r0, r7, #18
 8012200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012202:	9302      	str	r3, [sp, #8]
 8012204:	797b      	ldrb	r3, [r7, #5]
 8012206:	9301      	str	r3, [sp, #4]
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	4603      	mov	r3, r0
 801220e:	2036      	movs	r0, #54	; 0x36
 8012210:	f7ff fd5e 	bl	8011cd0 <tcp_pbuf_prealloc>
 8012214:	6338      	str	r0, [r7, #48]	; 0x30
 8012216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012218:	2b00      	cmp	r3, #0
 801221a:	f000 8178 	beq.w	801250e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012220:	895b      	ldrh	r3, [r3, #10]
 8012222:	8b3a      	ldrh	r2, [r7, #24]
 8012224:	429a      	cmp	r2, r3
 8012226:	d906      	bls.n	8012236 <tcp_write+0x37e>
 8012228:	4b8c      	ldr	r3, [pc, #560]	; (801245c <tcp_write+0x5a4>)
 801222a:	f240 2266 	movw	r2, #614	; 0x266
 801222e:	498c      	ldr	r1, [pc, #560]	; (8012460 <tcp_write+0x5a8>)
 8012230:	488c      	ldr	r0, [pc, #560]	; (8012464 <tcp_write+0x5ac>)
 8012232:	f006 fd8d 	bl	8018d50 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012238:	685a      	ldr	r2, [r3, #4]
 801223a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801223e:	18d0      	adds	r0, r2, r3
 8012240:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012244:	68ba      	ldr	r2, [r7, #8]
 8012246:	4413      	add	r3, r2
 8012248:	8b3a      	ldrh	r2, [r7, #24]
 801224a:	4619      	mov	r1, r3
 801224c:	f006 fd6a 	bl	8018d24 <memcpy>
 8012250:	e02f      	b.n	80122b2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012252:	8a7b      	ldrh	r3, [r7, #18]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d006      	beq.n	8012266 <tcp_write+0x3ae>
 8012258:	4b80      	ldr	r3, [pc, #512]	; (801245c <tcp_write+0x5a4>)
 801225a:	f240 2271 	movw	r2, #625	; 0x271
 801225e:	4982      	ldr	r1, [pc, #520]	; (8012468 <tcp_write+0x5b0>)
 8012260:	4880      	ldr	r0, [pc, #512]	; (8012464 <tcp_write+0x5ac>)
 8012262:	f006 fd75 	bl	8018d50 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012266:	8b3b      	ldrh	r3, [r7, #24]
 8012268:	2201      	movs	r2, #1
 801226a:	4619      	mov	r1, r3
 801226c:	2036      	movs	r0, #54	; 0x36
 801226e:	f7fa fdc9 	bl	800ce04 <pbuf_alloc>
 8012272:	6178      	str	r0, [r7, #20]
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	2b00      	cmp	r3, #0
 8012278:	f000 814b 	beq.w	8012512 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801227c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012280:	68ba      	ldr	r2, [r7, #8]
 8012282:	441a      	add	r2, r3
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012288:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801228c:	b29b      	uxth	r3, r3
 801228e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012292:	4619      	mov	r1, r3
 8012294:	2036      	movs	r0, #54	; 0x36
 8012296:	f7fa fdb5 	bl	800ce04 <pbuf_alloc>
 801229a:	6338      	str	r0, [r7, #48]	; 0x30
 801229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d103      	bne.n	80122aa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80122a2:	6978      	ldr	r0, [r7, #20]
 80122a4:	f7fb f892 	bl	800d3cc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80122a8:	e136      	b.n	8012518 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80122aa:	6979      	ldr	r1, [r7, #20]
 80122ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ae:	f7fb f95b 	bl	800d568 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80122b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122b4:	f7fb f918 	bl	800d4e8 <pbuf_clen>
 80122b8:	4603      	mov	r3, r0
 80122ba:	461a      	mov	r2, r3
 80122bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122c0:	4413      	add	r3, r2
 80122c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80122c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122ca:	2b09      	cmp	r3, #9
 80122cc:	d903      	bls.n	80122d6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80122ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122d0:	f7fb f87c 	bl	800d3cc <pbuf_free>
      goto memerr;
 80122d4:	e120      	b.n	8012518 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122de:	441a      	add	r2, r3
 80122e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122e4:	9300      	str	r3, [sp, #0]
 80122e6:	4613      	mov	r3, r2
 80122e8:	2200      	movs	r2, #0
 80122ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f7ff fc51 	bl	8011b94 <tcp_create_segment>
 80122f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80122f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f000 810d 	beq.w	8012516 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80122fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d102      	bne.n	8012308 <tcp_write+0x450>
      queue = seg;
 8012302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012304:	647b      	str	r3, [r7, #68]	; 0x44
 8012306:	e00c      	b.n	8012322 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801230a:	2b00      	cmp	r3, #0
 801230c:	d106      	bne.n	801231c <tcp_write+0x464>
 801230e:	4b53      	ldr	r3, [pc, #332]	; (801245c <tcp_write+0x5a4>)
 8012310:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012314:	4955      	ldr	r1, [pc, #340]	; (801246c <tcp_write+0x5b4>)
 8012316:	4853      	ldr	r0, [pc, #332]	; (8012464 <tcp_write+0x5ac>)
 8012318:	f006 fd1a 	bl	8018d50 <iprintf>
      prev_seg->next = seg;
 801231c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801231e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012320:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012324:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012326:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801232a:	8b3b      	ldrh	r3, [r7, #24]
 801232c:	4413      	add	r3, r2
 801232e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012332:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012336:	88fb      	ldrh	r3, [r7, #6]
 8012338:	429a      	cmp	r2, r3
 801233a:	f4ff af3d 	bcc.w	80121b8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801233e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012340:	2b00      	cmp	r3, #0
 8012342:	d02c      	beq.n	801239e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	62fb      	str	r3, [r7, #44]	; 0x2c
 801234a:	e01e      	b.n	801238a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234e:	891a      	ldrh	r2, [r3, #8]
 8012350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012352:	4413      	add	r3, r2
 8012354:	b29a      	uxth	r2, r3
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d110      	bne.n	8012384 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012368:	8952      	ldrh	r2, [r2, #10]
 801236a:	4413      	add	r3, r2
 801236c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801236e:	68b9      	ldr	r1, [r7, #8]
 8012370:	4618      	mov	r0, r3
 8012372:	f006 fcd7 	bl	8018d24 <memcpy>
        p->len += oversize_used;
 8012376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012378:	895a      	ldrh	r2, [r3, #10]
 801237a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801237c:	4413      	add	r3, r2
 801237e:	b29a      	uxth	r2, r3
 8012380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012382:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	62fb      	str	r3, [r7, #44]	; 0x2c
 801238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238c:	2b00      	cmp	r3, #0
 801238e:	d1dd      	bne.n	801234c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012392:	891a      	ldrh	r2, [r3, #8]
 8012394:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012396:	4413      	add	r3, r2
 8012398:	b29a      	uxth	r2, r3
 801239a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801239c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801239e:	8a7a      	ldrh	r2, [r7, #18]
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80123a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d018      	beq.n	80123de <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80123ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d106      	bne.n	80123c0 <tcp_write+0x508>
 80123b2:	4b2a      	ldr	r3, [pc, #168]	; (801245c <tcp_write+0x5a4>)
 80123b4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80123b8:	492d      	ldr	r1, [pc, #180]	; (8012470 <tcp_write+0x5b8>)
 80123ba:	482a      	ldr	r0, [pc, #168]	; (8012464 <tcp_write+0x5ac>)
 80123bc:	f006 fcc8 	bl	8018d50 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80123c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7fb f8ce 	bl	800d568 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80123cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ce:	891a      	ldrh	r2, [r3, #8]
 80123d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123d2:	891b      	ldrh	r3, [r3, #8]
 80123d4:	4413      	add	r3, r2
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123da:	811a      	strh	r2, [r3, #8]
 80123dc:	e037      	b.n	801244e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80123de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d034      	beq.n	801244e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80123e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d003      	beq.n	80123f2 <tcp_write+0x53a>
 80123ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d106      	bne.n	8012400 <tcp_write+0x548>
 80123f2:	4b1a      	ldr	r3, [pc, #104]	; (801245c <tcp_write+0x5a4>)
 80123f4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80123f8:	491e      	ldr	r1, [pc, #120]	; (8012474 <tcp_write+0x5bc>)
 80123fa:	481a      	ldr	r0, [pc, #104]	; (8012464 <tcp_write+0x5ac>)
 80123fc:	f006 fca8 	bl	8018d50 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	62bb      	str	r3, [r7, #40]	; 0x28
 8012406:	e009      	b.n	801241c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240a:	891a      	ldrh	r2, [r3, #8]
 801240c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801240e:	4413      	add	r3, r2
 8012410:	b29a      	uxth	r2, r3
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	62bb      	str	r3, [r7, #40]	; 0x28
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d1f1      	bne.n	8012408 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012426:	891a      	ldrh	r2, [r3, #8]
 8012428:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801242a:	4413      	add	r3, r2
 801242c:	b29a      	uxth	r2, r3
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012434:	895a      	ldrh	r2, [r3, #10]
 8012436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012438:	4413      	add	r3, r2
 801243a:	b29a      	uxth	r2, r3
 801243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012442:	891a      	ldrh	r2, [r3, #8]
 8012444:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012446:	4413      	add	r3, r2
 8012448:	b29a      	uxth	r2, r3
 801244a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801244c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801244e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012450:	2b00      	cmp	r3, #0
 8012452:	d111      	bne.n	8012478 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012458:	66da      	str	r2, [r3, #108]	; 0x6c
 801245a:	e010      	b.n	801247e <tcp_write+0x5c6>
 801245c:	0801c168 	.word	0x0801c168
 8012460:	0801c408 	.word	0x0801c408
 8012464:	0801c1bc 	.word	0x0801c1bc
 8012468:	0801c448 	.word	0x0801c448
 801246c:	0801c458 	.word	0x0801c458
 8012470:	0801c46c 	.word	0x0801c46c
 8012474:	0801c4a4 	.word	0x0801c4a4
  } else {
    last_unsent->next = queue;
 8012478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801247a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801247c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012482:	88fb      	ldrh	r3, [r7, #6]
 8012484:	441a      	add	r2, r3
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012490:	88fb      	ldrh	r3, [r7, #6]
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	b29a      	uxth	r2, r3
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80124a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00e      	beq.n	80124ce <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d10a      	bne.n	80124ce <tcp_write+0x616>
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d106      	bne.n	80124ce <tcp_write+0x616>
 80124c0:	4b2c      	ldr	r3, [pc, #176]	; (8012574 <tcp_write+0x6bc>)
 80124c2:	f240 3212 	movw	r2, #786	; 0x312
 80124c6:	492c      	ldr	r1, [pc, #176]	; (8012578 <tcp_write+0x6c0>)
 80124c8:	482c      	ldr	r0, [pc, #176]	; (801257c <tcp_write+0x6c4>)
 80124ca:	f006 fc41 	bl	8018d50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80124ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d016      	beq.n	8012502 <tcp_write+0x64a>
 80124d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d012      	beq.n	8012502 <tcp_write+0x64a>
 80124dc:	797b      	ldrb	r3, [r7, #5]
 80124de:	f003 0302 	and.w	r3, r3, #2
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10d      	bne.n	8012502 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80124e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	899b      	ldrh	r3, [r3, #12]
 80124ec:	b29c      	uxth	r4, r3
 80124ee:	2008      	movs	r0, #8
 80124f0:	f7f9 fb6a 	bl	800bbc8 <lwip_htons>
 80124f4:	4603      	mov	r3, r0
 80124f6:	461a      	mov	r2, r3
 80124f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	4322      	orrs	r2, r4
 80124fe:	b292      	uxth	r2, r2
 8012500:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012502:	2300      	movs	r3, #0
 8012504:	e031      	b.n	801256a <tcp_write+0x6b2>
          goto memerr;
 8012506:	bf00      	nop
 8012508:	e006      	b.n	8012518 <tcp_write+0x660>
            goto memerr;
 801250a:	bf00      	nop
 801250c:	e004      	b.n	8012518 <tcp_write+0x660>
        goto memerr;
 801250e:	bf00      	nop
 8012510:	e002      	b.n	8012518 <tcp_write+0x660>
        goto memerr;
 8012512:	bf00      	nop
 8012514:	e000      	b.n	8012518 <tcp_write+0x660>
      goto memerr;
 8012516:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	8b5b      	ldrh	r3, [r3, #26]
 801251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012520:	b29a      	uxth	r2, r3
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801252c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801252e:	f7fa ff4d 	bl	800d3cc <pbuf_free>
  }
  if (queue != NULL) {
 8012532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012538:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801253a:	f7fc fb6b 	bl	800ec14 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012544:	2b00      	cmp	r3, #0
 8012546:	d00e      	beq.n	8012566 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801254c:	2b00      	cmp	r3, #0
 801254e:	d10a      	bne.n	8012566 <tcp_write+0x6ae>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012554:	2b00      	cmp	r3, #0
 8012556:	d106      	bne.n	8012566 <tcp_write+0x6ae>
 8012558:	4b06      	ldr	r3, [pc, #24]	; (8012574 <tcp_write+0x6bc>)
 801255a:	f240 3227 	movw	r2, #807	; 0x327
 801255e:	4906      	ldr	r1, [pc, #24]	; (8012578 <tcp_write+0x6c0>)
 8012560:	4806      	ldr	r0, [pc, #24]	; (801257c <tcp_write+0x6c4>)
 8012562:	f006 fbf5 	bl	8018d50 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801256a:	4618      	mov	r0, r3
 801256c:	375c      	adds	r7, #92	; 0x5c
 801256e:	46bd      	mov	sp, r7
 8012570:	bd90      	pop	{r4, r7, pc}
 8012572:	bf00      	nop
 8012574:	0801c168 	.word	0x0801c168
 8012578:	0801c4dc 	.word	0x0801c4dc
 801257c:	0801c1bc 	.word	0x0801c1bc

08012580 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012580:	b590      	push	{r4, r7, lr}
 8012582:	b08b      	sub	sp, #44	; 0x2c
 8012584:	af02      	add	r7, sp, #8
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	460b      	mov	r3, r1
 801258a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801258c:	2300      	movs	r3, #0
 801258e:	61fb      	str	r3, [r7, #28]
 8012590:	2300      	movs	r3, #0
 8012592:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012594:	2300      	movs	r3, #0
 8012596:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d106      	bne.n	80125ac <tcp_split_unsent_seg+0x2c>
 801259e:	4b95      	ldr	r3, [pc, #596]	; (80127f4 <tcp_split_unsent_seg+0x274>)
 80125a0:	f240 324b 	movw	r2, #843	; 0x34b
 80125a4:	4994      	ldr	r1, [pc, #592]	; (80127f8 <tcp_split_unsent_seg+0x278>)
 80125a6:	4895      	ldr	r0, [pc, #596]	; (80127fc <tcp_split_unsent_seg+0x27c>)
 80125a8:	f006 fbd2 	bl	8018d50 <iprintf>

  useg = pcb->unsent;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d102      	bne.n	80125be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80125b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125bc:	e116      	b.n	80127ec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80125be:	887b      	ldrh	r3, [r7, #2]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d109      	bne.n	80125d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80125c4:	4b8b      	ldr	r3, [pc, #556]	; (80127f4 <tcp_split_unsent_seg+0x274>)
 80125c6:	f240 3253 	movw	r2, #851	; 0x353
 80125ca:	498d      	ldr	r1, [pc, #564]	; (8012800 <tcp_split_unsent_seg+0x280>)
 80125cc:	488b      	ldr	r0, [pc, #556]	; (80127fc <tcp_split_unsent_seg+0x27c>)
 80125ce:	f006 fbbf 	bl	8018d50 <iprintf>
    return ERR_VAL;
 80125d2:	f06f 0305 	mvn.w	r3, #5
 80125d6:	e109      	b.n	80127ec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	891b      	ldrh	r3, [r3, #8]
 80125dc:	887a      	ldrh	r2, [r7, #2]
 80125de:	429a      	cmp	r2, r3
 80125e0:	d301      	bcc.n	80125e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125e2:	2300      	movs	r3, #0
 80125e4:	e102      	b.n	80127ec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ea:	887a      	ldrh	r2, [r7, #2]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d906      	bls.n	80125fe <tcp_split_unsent_seg+0x7e>
 80125f0:	4b80      	ldr	r3, [pc, #512]	; (80127f4 <tcp_split_unsent_seg+0x274>)
 80125f2:	f240 325b 	movw	r2, #859	; 0x35b
 80125f6:	4983      	ldr	r1, [pc, #524]	; (8012804 <tcp_split_unsent_seg+0x284>)
 80125f8:	4880      	ldr	r0, [pc, #512]	; (80127fc <tcp_split_unsent_seg+0x27c>)
 80125fa:	f006 fba9 	bl	8018d50 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	891b      	ldrh	r3, [r3, #8]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d106      	bne.n	8012614 <tcp_split_unsent_seg+0x94>
 8012606:	4b7b      	ldr	r3, [pc, #492]	; (80127f4 <tcp_split_unsent_seg+0x274>)
 8012608:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801260c:	497e      	ldr	r1, [pc, #504]	; (8012808 <tcp_split_unsent_seg+0x288>)
 801260e:	487b      	ldr	r0, [pc, #492]	; (80127fc <tcp_split_unsent_seg+0x27c>)
 8012610:	f006 fb9e 	bl	8018d50 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	7a9b      	ldrb	r3, [r3, #10]
 8012618:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801261a:	7bfb      	ldrb	r3, [r7, #15]
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	b2db      	uxtb	r3, r3
 8012620:	f003 0304 	and.w	r3, r3, #4
 8012624:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	891a      	ldrh	r2, [r3, #8]
 801262a:	887b      	ldrh	r3, [r7, #2]
 801262c:	1ad3      	subs	r3, r2, r3
 801262e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012630:	7bbb      	ldrb	r3, [r7, #14]
 8012632:	b29a      	uxth	r2, r3
 8012634:	89bb      	ldrh	r3, [r7, #12]
 8012636:	4413      	add	r3, r2
 8012638:	b29b      	uxth	r3, r3
 801263a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801263e:	4619      	mov	r1, r3
 8012640:	2036      	movs	r0, #54	; 0x36
 8012642:	f7fa fbdf 	bl	800ce04 <pbuf_alloc>
 8012646:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	2b00      	cmp	r3, #0
 801264c:	f000 80b7 	beq.w	80127be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	891a      	ldrh	r2, [r3, #8]
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	891b      	ldrh	r3, [r3, #8]
 801265a:	1ad3      	subs	r3, r2, r3
 801265c:	b29a      	uxth	r2, r3
 801265e:	887b      	ldrh	r3, [r7, #2]
 8012660:	4413      	add	r3, r2
 8012662:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	6858      	ldr	r0, [r3, #4]
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	685a      	ldr	r2, [r3, #4]
 801266c:	7bbb      	ldrb	r3, [r7, #14]
 801266e:	18d1      	adds	r1, r2, r3
 8012670:	897b      	ldrh	r3, [r7, #10]
 8012672:	89ba      	ldrh	r2, [r7, #12]
 8012674:	f7fb f8a0 	bl	800d7b8 <pbuf_copy_partial>
 8012678:	4603      	mov	r3, r0
 801267a:	461a      	mov	r2, r3
 801267c:	89bb      	ldrh	r3, [r7, #12]
 801267e:	4293      	cmp	r3, r2
 8012680:	f040 809f 	bne.w	80127c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	899b      	ldrh	r3, [r3, #12]
 801268a:	b29b      	uxth	r3, r3
 801268c:	4618      	mov	r0, r3
 801268e:	f7f9 fa9b 	bl	800bbc8 <lwip_htons>
 8012692:	4603      	mov	r3, r0
 8012694:	b2db      	uxtb	r3, r3
 8012696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801269a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801269c:	2300      	movs	r3, #0
 801269e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80126a0:	7efb      	ldrb	r3, [r7, #27]
 80126a2:	f003 0308 	and.w	r3, r3, #8
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d007      	beq.n	80126ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80126aa:	7efb      	ldrb	r3, [r7, #27]
 80126ac:	f023 0308 	bic.w	r3, r3, #8
 80126b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80126b2:	7ebb      	ldrb	r3, [r7, #26]
 80126b4:	f043 0308 	orr.w	r3, r3, #8
 80126b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80126ba:	7efb      	ldrb	r3, [r7, #27]
 80126bc:	f003 0301 	and.w	r3, r3, #1
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d007      	beq.n	80126d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80126c4:	7efb      	ldrb	r3, [r7, #27]
 80126c6:	f023 0301 	bic.w	r3, r3, #1
 80126ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80126cc:	7ebb      	ldrb	r3, [r7, #26]
 80126ce:	f043 0301 	orr.w	r3, r3, #1
 80126d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7f9 fa89 	bl	800bbf2 <lwip_htonl>
 80126e0:	4602      	mov	r2, r0
 80126e2:	887b      	ldrh	r3, [r7, #2]
 80126e4:	18d1      	adds	r1, r2, r3
 80126e6:	7eba      	ldrb	r2, [r7, #26]
 80126e8:	7bfb      	ldrb	r3, [r7, #15]
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	460b      	mov	r3, r1
 80126ee:	6939      	ldr	r1, [r7, #16]
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7ff fa4f 	bl	8011b94 <tcp_create_segment>
 80126f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d063      	beq.n	80127c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	4618      	mov	r0, r3
 8012704:	f7fa fef0 	bl	800d4e8 <pbuf_clen>
 8012708:	4603      	mov	r3, r0
 801270a:	461a      	mov	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012712:	1a9b      	subs	r3, r3, r2
 8012714:	b29a      	uxth	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	6858      	ldr	r0, [r3, #4]
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	891a      	ldrh	r2, [r3, #8]
 8012726:	89bb      	ldrh	r3, [r7, #12]
 8012728:	1ad3      	subs	r3, r2, r3
 801272a:	b29b      	uxth	r3, r3
 801272c:	4619      	mov	r1, r3
 801272e:	f7fa fcc7 	bl	800d0c0 <pbuf_realloc>
  useg->len -= remainder;
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	891a      	ldrh	r2, [r3, #8]
 8012736:	89bb      	ldrh	r3, [r7, #12]
 8012738:	1ad3      	subs	r3, r2, r3
 801273a:	b29a      	uxth	r2, r3
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	899b      	ldrh	r3, [r3, #12]
 8012746:	b29c      	uxth	r4, r3
 8012748:	7efb      	ldrb	r3, [r7, #27]
 801274a:	b29b      	uxth	r3, r3
 801274c:	4618      	mov	r0, r3
 801274e:	f7f9 fa3b 	bl	800bbc8 <lwip_htons>
 8012752:	4603      	mov	r3, r0
 8012754:	461a      	mov	r2, r3
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	4322      	orrs	r2, r4
 801275c:	b292      	uxth	r2, r2
 801275e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f7fa febf 	bl	800d4e8 <pbuf_clen>
 801276a:	4603      	mov	r3, r0
 801276c:	461a      	mov	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012774:	4413      	add	r3, r2
 8012776:	b29a      	uxth	r2, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801277e:	69fb      	ldr	r3, [r7, #28]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	4618      	mov	r0, r3
 8012784:	f7fa feb0 	bl	800d4e8 <pbuf_clen>
 8012788:	4603      	mov	r3, r0
 801278a:	461a      	mov	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012792:	4413      	add	r3, r2
 8012794:	b29a      	uxth	r2, r3
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	681a      	ldr	r2, [r3, #0]
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	69fa      	ldr	r2, [r7, #28]
 80127a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d103      	bne.n	80127ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2200      	movs	r2, #0
 80127b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80127ba:	2300      	movs	r3, #0
 80127bc:	e016      	b.n	80127ec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80127be:	bf00      	nop
 80127c0:	e002      	b.n	80127c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127c2:	bf00      	nop
 80127c4:	e000      	b.n	80127c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d006      	beq.n	80127dc <tcp_split_unsent_seg+0x25c>
 80127ce:	4b09      	ldr	r3, [pc, #36]	; (80127f4 <tcp_split_unsent_seg+0x274>)
 80127d0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80127d4:	490d      	ldr	r1, [pc, #52]	; (801280c <tcp_split_unsent_seg+0x28c>)
 80127d6:	4809      	ldr	r0, [pc, #36]	; (80127fc <tcp_split_unsent_seg+0x27c>)
 80127d8:	f006 faba 	bl	8018d50 <iprintf>
  if (p != NULL) {
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d002      	beq.n	80127e8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127e2:	6938      	ldr	r0, [r7, #16]
 80127e4:	f7fa fdf2 	bl	800d3cc <pbuf_free>
  }

  return ERR_MEM;
 80127e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3724      	adds	r7, #36	; 0x24
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd90      	pop	{r4, r7, pc}
 80127f4:	0801c168 	.word	0x0801c168
 80127f8:	0801c4fc 	.word	0x0801c4fc
 80127fc:	0801c1bc 	.word	0x0801c1bc
 8012800:	0801c520 	.word	0x0801c520
 8012804:	0801c544 	.word	0x0801c544
 8012808:	0801c554 	.word	0x0801c554
 801280c:	0801c564 	.word	0x0801c564

08012810 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012810:	b590      	push	{r4, r7, lr}
 8012812:	b085      	sub	sp, #20
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d106      	bne.n	801282c <tcp_send_fin+0x1c>
 801281e:	4b21      	ldr	r3, [pc, #132]	; (80128a4 <tcp_send_fin+0x94>)
 8012820:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012824:	4920      	ldr	r1, [pc, #128]	; (80128a8 <tcp_send_fin+0x98>)
 8012826:	4821      	ldr	r0, [pc, #132]	; (80128ac <tcp_send_fin+0x9c>)
 8012828:	f006 fa92 	bl	8018d50 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012830:	2b00      	cmp	r3, #0
 8012832:	d02e      	beq.n	8012892 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012838:	60fb      	str	r3, [r7, #12]
 801283a:	e002      	b.n	8012842 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1f8      	bne.n	801283c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	899b      	ldrh	r3, [r3, #12]
 8012850:	b29b      	uxth	r3, r3
 8012852:	4618      	mov	r0, r3
 8012854:	f7f9 f9b8 	bl	800bbc8 <lwip_htons>
 8012858:	4603      	mov	r3, r0
 801285a:	b2db      	uxtb	r3, r3
 801285c:	f003 0307 	and.w	r3, r3, #7
 8012860:	2b00      	cmp	r3, #0
 8012862:	d116      	bne.n	8012892 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	68db      	ldr	r3, [r3, #12]
 8012868:	899b      	ldrh	r3, [r3, #12]
 801286a:	b29c      	uxth	r4, r3
 801286c:	2001      	movs	r0, #1
 801286e:	f7f9 f9ab 	bl	800bbc8 <lwip_htons>
 8012872:	4603      	mov	r3, r0
 8012874:	461a      	mov	r2, r3
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	4322      	orrs	r2, r4
 801287c:	b292      	uxth	r2, r2
 801287e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	8b5b      	ldrh	r3, [r3, #26]
 8012884:	f043 0320 	orr.w	r3, r3, #32
 8012888:	b29a      	uxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801288e:	2300      	movs	r3, #0
 8012890:	e004      	b.n	801289c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012892:	2101      	movs	r1, #1
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 f80b 	bl	80128b0 <tcp_enqueue_flags>
 801289a:	4603      	mov	r3, r0
}
 801289c:	4618      	mov	r0, r3
 801289e:	3714      	adds	r7, #20
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd90      	pop	{r4, r7, pc}
 80128a4:	0801c168 	.word	0x0801c168
 80128a8:	0801c570 	.word	0x0801c570
 80128ac:	0801c1bc 	.word	0x0801c1bc

080128b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b08a      	sub	sp, #40	; 0x28
 80128b4:	af02      	add	r7, sp, #8
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	460b      	mov	r3, r1
 80128ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80128bc:	2300      	movs	r3, #0
 80128be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80128c0:	2300      	movs	r3, #0
 80128c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80128c4:	78fb      	ldrb	r3, [r7, #3]
 80128c6:	f003 0303 	and.w	r3, r3, #3
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d106      	bne.n	80128dc <tcp_enqueue_flags+0x2c>
 80128ce:	4b67      	ldr	r3, [pc, #412]	; (8012a6c <tcp_enqueue_flags+0x1bc>)
 80128d0:	f240 4211 	movw	r2, #1041	; 0x411
 80128d4:	4966      	ldr	r1, [pc, #408]	; (8012a70 <tcp_enqueue_flags+0x1c0>)
 80128d6:	4867      	ldr	r0, [pc, #412]	; (8012a74 <tcp_enqueue_flags+0x1c4>)
 80128d8:	f006 fa3a 	bl	8018d50 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d106      	bne.n	80128f0 <tcp_enqueue_flags+0x40>
 80128e2:	4b62      	ldr	r3, [pc, #392]	; (8012a6c <tcp_enqueue_flags+0x1bc>)
 80128e4:	f240 4213 	movw	r2, #1043	; 0x413
 80128e8:	4963      	ldr	r1, [pc, #396]	; (8012a78 <tcp_enqueue_flags+0x1c8>)
 80128ea:	4862      	ldr	r0, [pc, #392]	; (8012a74 <tcp_enqueue_flags+0x1c4>)
 80128ec:	f006 fa30 	bl	8018d50 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80128f0:	78fb      	ldrb	r3, [r7, #3]
 80128f2:	f003 0302 	and.w	r3, r3, #2
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d001      	beq.n	80128fe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80128fa:	2301      	movs	r3, #1
 80128fc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128fe:	7ffb      	ldrb	r3, [r7, #31]
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	b2db      	uxtb	r3, r3
 8012904:	f003 0304 	and.w	r3, r3, #4
 8012908:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801290a:	7dfb      	ldrb	r3, [r7, #23]
 801290c:	b29b      	uxth	r3, r3
 801290e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012912:	4619      	mov	r1, r3
 8012914:	2036      	movs	r0, #54	; 0x36
 8012916:	f7fa fa75 	bl	800ce04 <pbuf_alloc>
 801291a:	6138      	str	r0, [r7, #16]
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d109      	bne.n	8012936 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	8b5b      	ldrh	r3, [r3, #26]
 8012926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801292a:	b29a      	uxth	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012934:	e095      	b.n	8012a62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	895a      	ldrh	r2, [r3, #10]
 801293a:	7dfb      	ldrb	r3, [r7, #23]
 801293c:	b29b      	uxth	r3, r3
 801293e:	429a      	cmp	r2, r3
 8012940:	d206      	bcs.n	8012950 <tcp_enqueue_flags+0xa0>
 8012942:	4b4a      	ldr	r3, [pc, #296]	; (8012a6c <tcp_enqueue_flags+0x1bc>)
 8012944:	f240 4239 	movw	r2, #1081	; 0x439
 8012948:	494c      	ldr	r1, [pc, #304]	; (8012a7c <tcp_enqueue_flags+0x1cc>)
 801294a:	484a      	ldr	r0, [pc, #296]	; (8012a74 <tcp_enqueue_flags+0x1c4>)
 801294c:	f006 fa00 	bl	8018d50 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012954:	78fa      	ldrb	r2, [r7, #3]
 8012956:	7ffb      	ldrb	r3, [r7, #31]
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	460b      	mov	r3, r1
 801295c:	6939      	ldr	r1, [r7, #16]
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7ff f918 	bl	8011b94 <tcp_create_segment>
 8012964:	60f8      	str	r0, [r7, #12]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d109      	bne.n	8012980 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8b5b      	ldrh	r3, [r3, #26]
 8012970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012974:	b29a      	uxth	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801297a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801297e:	e070      	b.n	8012a62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	f003 0303 	and.w	r3, r3, #3
 8012988:	2b00      	cmp	r3, #0
 801298a:	d006      	beq.n	801299a <tcp_enqueue_flags+0xea>
 801298c:	4b37      	ldr	r3, [pc, #220]	; (8012a6c <tcp_enqueue_flags+0x1bc>)
 801298e:	f240 4242 	movw	r2, #1090	; 0x442
 8012992:	493b      	ldr	r1, [pc, #236]	; (8012a80 <tcp_enqueue_flags+0x1d0>)
 8012994:	4837      	ldr	r0, [pc, #220]	; (8012a74 <tcp_enqueue_flags+0x1c4>)
 8012996:	f006 f9db 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	891b      	ldrh	r3, [r3, #8]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d006      	beq.n	80129b0 <tcp_enqueue_flags+0x100>
 80129a2:	4b32      	ldr	r3, [pc, #200]	; (8012a6c <tcp_enqueue_flags+0x1bc>)
 80129a4:	f240 4243 	movw	r2, #1091	; 0x443
 80129a8:	4936      	ldr	r1, [pc, #216]	; (8012a84 <tcp_enqueue_flags+0x1d4>)
 80129aa:	4832      	ldr	r0, [pc, #200]	; (8012a74 <tcp_enqueue_flags+0x1c4>)
 80129ac:	f006 f9d0 	bl	8018d50 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d103      	bne.n	80129c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80129be:	e00d      	b.n	80129dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129c4:	61bb      	str	r3, [r7, #24]
 80129c6:	e002      	b.n	80129ce <tcp_enqueue_flags+0x11e>
 80129c8:	69bb      	ldr	r3, [r7, #24]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	61bb      	str	r3, [r7, #24]
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d1f8      	bne.n	80129c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2200      	movs	r2, #0
 80129e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80129e4:	78fb      	ldrb	r3, [r7, #3]
 80129e6:	f003 0302 	and.w	r3, r3, #2
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d104      	bne.n	80129f8 <tcp_enqueue_flags+0x148>
 80129ee:	78fb      	ldrb	r3, [r7, #3]
 80129f0:	f003 0301 	and.w	r3, r3, #1
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d004      	beq.n	8012a02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129fc:	1c5a      	adds	r2, r3, #1
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012a02:	78fb      	ldrb	r3, [r7, #3]
 8012a04:	f003 0301 	and.w	r3, r3, #1
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d006      	beq.n	8012a1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	8b5b      	ldrh	r3, [r3, #26]
 8012a10:	f043 0320 	orr.w	r3, r3, #32
 8012a14:	b29a      	uxth	r2, r3
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7fa fd62 	bl	800d4e8 <pbuf_clen>
 8012a24:	4603      	mov	r3, r0
 8012a26:	461a      	mov	r2, r3
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a2e:	4413      	add	r3, r2
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d00e      	beq.n	8012a60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d10a      	bne.n	8012a60 <tcp_enqueue_flags+0x1b0>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d106      	bne.n	8012a60 <tcp_enqueue_flags+0x1b0>
 8012a52:	4b06      	ldr	r3, [pc, #24]	; (8012a6c <tcp_enqueue_flags+0x1bc>)
 8012a54:	f240 4265 	movw	r2, #1125	; 0x465
 8012a58:	490b      	ldr	r1, [pc, #44]	; (8012a88 <tcp_enqueue_flags+0x1d8>)
 8012a5a:	4806      	ldr	r0, [pc, #24]	; (8012a74 <tcp_enqueue_flags+0x1c4>)
 8012a5c:	f006 f978 	bl	8018d50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a60:	2300      	movs	r3, #0
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3720      	adds	r7, #32
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	0801c168 	.word	0x0801c168
 8012a70:	0801c58c 	.word	0x0801c58c
 8012a74:	0801c1bc 	.word	0x0801c1bc
 8012a78:	0801c5e4 	.word	0x0801c5e4
 8012a7c:	0801c604 	.word	0x0801c604
 8012a80:	0801c640 	.word	0x0801c640
 8012a84:	0801c658 	.word	0x0801c658
 8012a88:	0801c684 	.word	0x0801c684

08012a8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a8c:	b5b0      	push	{r4, r5, r7, lr}
 8012a8e:	b08a      	sub	sp, #40	; 0x28
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d106      	bne.n	8012aa8 <tcp_output+0x1c>
 8012a9a:	4b8a      	ldr	r3, [pc, #552]	; (8012cc4 <tcp_output+0x238>)
 8012a9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012aa0:	4989      	ldr	r1, [pc, #548]	; (8012cc8 <tcp_output+0x23c>)
 8012aa2:	488a      	ldr	r0, [pc, #552]	; (8012ccc <tcp_output+0x240>)
 8012aa4:	f006 f954 	bl	8018d50 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	7d1b      	ldrb	r3, [r3, #20]
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	d106      	bne.n	8012abe <tcp_output+0x32>
 8012ab0:	4b84      	ldr	r3, [pc, #528]	; (8012cc4 <tcp_output+0x238>)
 8012ab2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012ab6:	4986      	ldr	r1, [pc, #536]	; (8012cd0 <tcp_output+0x244>)
 8012ab8:	4884      	ldr	r0, [pc, #528]	; (8012ccc <tcp_output+0x240>)
 8012aba:	f006 f949 	bl	8018d50 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012abe:	4b85      	ldr	r3, [pc, #532]	; (8012cd4 <tcp_output+0x248>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	687a      	ldr	r2, [r7, #4]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d101      	bne.n	8012acc <tcp_output+0x40>
    return ERR_OK;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	e1ce      	b.n	8012e6a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	bf28      	it	cs
 8012adc:	4613      	movcs	r3, r2
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ae6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d10b      	bne.n	8012b06 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	8b5b      	ldrh	r3, [r3, #26]
 8012af2:	f003 0302 	and.w	r3, r3, #2
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f000 81aa 	beq.w	8012e50 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 fdcb 	bl	8013698 <tcp_send_empty_ack>
 8012b02:	4603      	mov	r3, r0
 8012b04:	e1b1      	b.n	8012e6a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012b06:	6879      	ldr	r1, [r7, #4]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	3304      	adds	r3, #4
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7ff f824 	bl	8011b5c <tcp_route>
 8012b14:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d102      	bne.n	8012b22 <tcp_output+0x96>
    return ERR_RTE;
 8012b1c:	f06f 0303 	mvn.w	r3, #3
 8012b20:	e1a3      	b.n	8012e6a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d003      	beq.n	8012b30 <tcp_output+0xa4>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d111      	bne.n	8012b54 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d002      	beq.n	8012b3c <tcp_output+0xb0>
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	3304      	adds	r3, #4
 8012b3a:	e000      	b.n	8012b3e <tcp_output+0xb2>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d102      	bne.n	8012b4c <tcp_output+0xc0>
      return ERR_RTE;
 8012b46:	f06f 0303 	mvn.w	r3, #3
 8012b4a:	e18e      	b.n	8012e6a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7f9 f849 	bl	800bbf2 <lwip_htonl>
 8012b60:	4602      	mov	r2, r0
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b66:	1ad3      	subs	r3, r2, r3
 8012b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b6a:	8912      	ldrh	r2, [r2, #8]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	69ba      	ldr	r2, [r7, #24]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d227      	bcs.n	8012bc4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d114      	bne.n	8012bac <tcp_output+0x120>
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d110      	bne.n	8012bac <tcp_output+0x120>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10b      	bne.n	8012bac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	8b5b      	ldrh	r3, [r3, #26]
 8012bb0:	f003 0302 	and.w	r3, r3, #2
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f000 814d 	beq.w	8012e54 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f000 fd6c 	bl	8013698 <tcp_send_empty_ack>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	e152      	b.n	8012e6a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bd0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012bd2:	6a3b      	ldr	r3, [r7, #32]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	f000 811c 	beq.w	8012e12 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012bda:	e002      	b.n	8012be2 <tcp_output+0x156>
 8012bdc:	6a3b      	ldr	r3, [r7, #32]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	623b      	str	r3, [r7, #32]
 8012be2:	6a3b      	ldr	r3, [r7, #32]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d1f8      	bne.n	8012bdc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012bea:	e112      	b.n	8012e12 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	68db      	ldr	r3, [r3, #12]
 8012bf0:	899b      	ldrh	r3, [r3, #12]
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7f8 ffe7 	bl	800bbc8 <lwip_htons>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	b2db      	uxtb	r3, r3
 8012bfe:	f003 0304 	and.w	r3, r3, #4
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d006      	beq.n	8012c14 <tcp_output+0x188>
 8012c06:	4b2f      	ldr	r3, [pc, #188]	; (8012cc4 <tcp_output+0x238>)
 8012c08:	f240 5236 	movw	r2, #1334	; 0x536
 8012c0c:	4932      	ldr	r1, [pc, #200]	; (8012cd8 <tcp_output+0x24c>)
 8012c0e:	482f      	ldr	r0, [pc, #188]	; (8012ccc <tcp_output+0x240>)
 8012c10:	f006 f89e 	bl	8018d50 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d01f      	beq.n	8012c5c <tcp_output+0x1d0>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	8b5b      	ldrh	r3, [r3, #26]
 8012c20:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d119      	bne.n	8012c5c <tcp_output+0x1d0>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00b      	beq.n	8012c48 <tcp_output+0x1bc>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d110      	bne.n	8012c5c <tcp_output+0x1d0>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c3e:	891a      	ldrh	r2, [r3, #8]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d209      	bcs.n	8012c5c <tcp_output+0x1d0>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d004      	beq.n	8012c5c <tcp_output+0x1d0>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c58:	2b08      	cmp	r3, #8
 8012c5a:	d901      	bls.n	8012c60 <tcp_output+0x1d4>
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e000      	b.n	8012c62 <tcp_output+0x1d6>
 8012c60:	2300      	movs	r3, #0
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d106      	bne.n	8012c74 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	8b5b      	ldrh	r3, [r3, #26]
 8012c6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f000 80e4 	beq.w	8012e3c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	7d1b      	ldrb	r3, [r3, #20]
 8012c78:	2b02      	cmp	r3, #2
 8012c7a:	d00d      	beq.n	8012c98 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	899b      	ldrh	r3, [r3, #12]
 8012c82:	b29c      	uxth	r4, r3
 8012c84:	2010      	movs	r0, #16
 8012c86:	f7f8 ff9f 	bl	800bbc8 <lwip_htons>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	4322      	orrs	r2, r4
 8012c94:	b292      	uxth	r2, r2
 8012c96:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c98:	697a      	ldr	r2, [r7, #20]
 8012c9a:	6879      	ldr	r1, [r7, #4]
 8012c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c9e:	f000 f909 	bl	8012eb4 <tcp_output_segment>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d016      	beq.n	8012cdc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	8b5b      	ldrh	r3, [r3, #26]
 8012cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cb6:	b29a      	uxth	r2, r3
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	835a      	strh	r2, [r3, #26]
      return err;
 8012cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cc0:	e0d3      	b.n	8012e6a <tcp_output+0x3de>
 8012cc2:	bf00      	nop
 8012cc4:	0801c168 	.word	0x0801c168
 8012cc8:	0801c6ac 	.word	0x0801c6ac
 8012ccc:	0801c1bc 	.word	0x0801c1bc
 8012cd0:	0801c6c4 	.word	0x0801c6c4
 8012cd4:	20011280 	.word	0x20011280
 8012cd8:	0801c6ec 	.word	0x0801c6ec
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	7d1b      	ldrb	r3, [r3, #20]
 8012ce8:	2b02      	cmp	r3, #2
 8012cea:	d006      	beq.n	8012cfa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	8b5b      	ldrh	r3, [r3, #26]
 8012cf0:	f023 0303 	bic.w	r3, r3, #3
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f8 ff76 	bl	800bbf2 <lwip_htonl>
 8012d06:	4604      	mov	r4, r0
 8012d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0a:	891b      	ldrh	r3, [r3, #8]
 8012d0c:	461d      	mov	r5, r3
 8012d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d10:	68db      	ldr	r3, [r3, #12]
 8012d12:	899b      	ldrh	r3, [r3, #12]
 8012d14:	b29b      	uxth	r3, r3
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7f8 ff56 	bl	800bbc8 <lwip_htons>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	f003 0303 	and.w	r3, r3, #3
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d001      	beq.n	8012d2c <tcp_output+0x2a0>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	e000      	b.n	8012d2e <tcp_output+0x2a2>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	442b      	add	r3, r5
 8012d30:	4423      	add	r3, r4
 8012d32:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	da02      	bge.n	8012d46 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	68ba      	ldr	r2, [r7, #8]
 8012d44:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d48:	891b      	ldrh	r3, [r3, #8]
 8012d4a:	461c      	mov	r4, r3
 8012d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	899b      	ldrh	r3, [r3, #12]
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f8 ff37 	bl	800bbc8 <lwip_htons>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	f003 0303 	and.w	r3, r3, #3
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d001      	beq.n	8012d6a <tcp_output+0x2de>
 8012d66:	2301      	movs	r3, #1
 8012d68:	e000      	b.n	8012d6c <tcp_output+0x2e0>
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	4423      	add	r3, r4
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d049      	beq.n	8012e06 <tcp_output+0x37a>
      seg->next = NULL;
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	2200      	movs	r2, #0
 8012d76:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d105      	bne.n	8012d8c <tcp_output+0x300>
        pcb->unacked = seg;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d84:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d88:	623b      	str	r3, [r7, #32]
 8012d8a:	e03f      	b.n	8012e0c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7f8 ff2d 	bl	800bbf2 <lwip_htonl>
 8012d98:	4604      	mov	r4, r0
 8012d9a:	6a3b      	ldr	r3, [r7, #32]
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7f8 ff26 	bl	800bbf2 <lwip_htonl>
 8012da6:	4603      	mov	r3, r0
 8012da8:	1ae3      	subs	r3, r4, r3
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	da24      	bge.n	8012df8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	3370      	adds	r3, #112	; 0x70
 8012db2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012db4:	e002      	b.n	8012dbc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d011      	beq.n	8012de8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012dc4:	69fb      	ldr	r3, [r7, #28]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	68db      	ldr	r3, [r3, #12]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7f8 ff10 	bl	800bbf2 <lwip_htonl>
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd6:	68db      	ldr	r3, [r3, #12]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7f8 ff09 	bl	800bbf2 <lwip_htonl>
 8012de0:	4603      	mov	r3, r0
 8012de2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dbe6      	blt.n	8012db6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012df4:	601a      	str	r2, [r3, #0]
 8012df6:	e009      	b.n	8012e0c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012df8:	6a3b      	ldr	r3, [r7, #32]
 8012dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dfc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012dfe:	6a3b      	ldr	r3, [r7, #32]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	623b      	str	r3, [r7, #32]
 8012e04:	e002      	b.n	8012e0c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012e06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e08:	f7fb ff19 	bl	800ec3e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e10:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d012      	beq.n	8012e3e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7f8 fee7 	bl	800bbf2 <lwip_htonl>
 8012e24:	4602      	mov	r2, r0
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e2e:	8912      	ldrh	r2, [r2, #8]
 8012e30:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e32:	69ba      	ldr	r2, [r7, #24]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	f4bf aed9 	bcs.w	8012bec <tcp_output+0x160>
 8012e3a:	e000      	b.n	8012e3e <tcp_output+0x3b2>
      break;
 8012e3c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d108      	bne.n	8012e58 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e4e:	e004      	b.n	8012e5a <tcp_output+0x3ce>
    goto output_done;
 8012e50:	bf00      	nop
 8012e52:	e002      	b.n	8012e5a <tcp_output+0x3ce>
    goto output_done;
 8012e54:	bf00      	nop
 8012e56:	e000      	b.n	8012e5a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e58:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	8b5b      	ldrh	r3, [r3, #26]
 8012e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3728      	adds	r7, #40	; 0x28
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bdb0      	pop	{r4, r5, r7, pc}
 8012e72:	bf00      	nop

08012e74 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d106      	bne.n	8012e90 <tcp_output_segment_busy+0x1c>
 8012e82:	4b09      	ldr	r3, [pc, #36]	; (8012ea8 <tcp_output_segment_busy+0x34>)
 8012e84:	f240 529a 	movw	r2, #1434	; 0x59a
 8012e88:	4908      	ldr	r1, [pc, #32]	; (8012eac <tcp_output_segment_busy+0x38>)
 8012e8a:	4809      	ldr	r0, [pc, #36]	; (8012eb0 <tcp_output_segment_busy+0x3c>)
 8012e8c:	f005 ff60 	bl	8018d50 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	7b9b      	ldrb	r3, [r3, #14]
 8012e96:	2b01      	cmp	r3, #1
 8012e98:	d001      	beq.n	8012e9e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	e000      	b.n	8012ea0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	0801c168 	.word	0x0801c168
 8012eac:	0801c704 	.word	0x0801c704
 8012eb0:	0801c1bc 	.word	0x0801c1bc

08012eb4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012eb4:	b5b0      	push	{r4, r5, r7, lr}
 8012eb6:	b08c      	sub	sp, #48	; 0x30
 8012eb8:	af04      	add	r7, sp, #16
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d106      	bne.n	8012ed4 <tcp_output_segment+0x20>
 8012ec6:	4b63      	ldr	r3, [pc, #396]	; (8013054 <tcp_output_segment+0x1a0>)
 8012ec8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012ecc:	4962      	ldr	r1, [pc, #392]	; (8013058 <tcp_output_segment+0x1a4>)
 8012ece:	4863      	ldr	r0, [pc, #396]	; (801305c <tcp_output_segment+0x1a8>)
 8012ed0:	f005 ff3e 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d106      	bne.n	8012ee8 <tcp_output_segment+0x34>
 8012eda:	4b5e      	ldr	r3, [pc, #376]	; (8013054 <tcp_output_segment+0x1a0>)
 8012edc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012ee0:	495f      	ldr	r1, [pc, #380]	; (8013060 <tcp_output_segment+0x1ac>)
 8012ee2:	485e      	ldr	r0, [pc, #376]	; (801305c <tcp_output_segment+0x1a8>)
 8012ee4:	f005 ff34 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d106      	bne.n	8012efc <tcp_output_segment+0x48>
 8012eee:	4b59      	ldr	r3, [pc, #356]	; (8013054 <tcp_output_segment+0x1a0>)
 8012ef0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012ef4:	495b      	ldr	r1, [pc, #364]	; (8013064 <tcp_output_segment+0x1b0>)
 8012ef6:	4859      	ldr	r0, [pc, #356]	; (801305c <tcp_output_segment+0x1a8>)
 8012ef8:	f005 ff2a 	bl	8018d50 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f7ff ffb9 	bl	8012e74 <tcp_output_segment_busy>
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d001      	beq.n	8012f0c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	e09f      	b.n	801304c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	68dc      	ldr	r4, [r3, #12]
 8012f14:	4610      	mov	r0, r2
 8012f16:	f7f8 fe6c 	bl	800bbf2 <lwip_htonl>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	68dc      	ldr	r4, [r3, #12]
 8012f26:	4610      	mov	r0, r2
 8012f28:	f7f8 fe4e 	bl	800bbc8 <lwip_htons>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f38:	441a      	add	r2, r3
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	3314      	adds	r3, #20
 8012f44:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	7a9b      	ldrb	r3, [r3, #10]
 8012f4a:	f003 0301 	and.w	r3, r3, #1
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d015      	beq.n	8012f7e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	3304      	adds	r3, #4
 8012f56:	461a      	mov	r2, r3
 8012f58:	6879      	ldr	r1, [r7, #4]
 8012f5a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012f5e:	f7fc fa33 	bl	800f3c8 <tcp_eff_send_mss_netif>
 8012f62:	4603      	mov	r3, r0
 8012f64:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f66:	8b7b      	ldrh	r3, [r7, #26]
 8012f68:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f8 fe40 	bl	800bbf2 <lwip_htonl>
 8012f72:	4602      	mov	r2, r0
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	3304      	adds	r3, #4
 8012f7c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	da02      	bge.n	8012f8e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d10c      	bne.n	8012fb0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f96:	4b34      	ldr	r3, [pc, #208]	; (8013068 <tcp_output_segment+0x1b4>)
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f8 fe24 	bl	800bbf2 <lwip_htonl>
 8012faa:	4602      	mov	r2, r0
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	68da      	ldr	r2, [r3, #12]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	1ad3      	subs	r3, r2, r3
 8012fbc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	8959      	ldrh	r1, [r3, #10]
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	8b3a      	ldrh	r2, [r7, #24]
 8012fca:	1a8a      	subs	r2, r1, r2
 8012fcc:	b292      	uxth	r2, r2
 8012fce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	8919      	ldrh	r1, [r3, #8]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	8b3a      	ldrh	r2, [r7, #24]
 8012fdc:	1a8a      	subs	r2, r1, r2
 8012fde:	b292      	uxth	r2, r2
 8012fe0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	68fa      	ldr	r2, [r7, #12]
 8012fe8:	68d2      	ldr	r2, [r2, #12]
 8012fea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	68db      	ldr	r3, [r3, #12]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	741a      	strb	r2, [r3, #16]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	68db      	ldr	r3, [r3, #12]
 8012ffc:	f103 0214 	add.w	r2, r3, #20
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	7a9b      	ldrb	r3, [r3, #10]
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	f003 0304 	and.w	r3, r3, #4
 801300a:	4413      	add	r3, r2
 801300c:	69fa      	ldr	r2, [r7, #28]
 801300e:	429a      	cmp	r2, r3
 8013010:	d006      	beq.n	8013020 <tcp_output_segment+0x16c>
 8013012:	4b10      	ldr	r3, [pc, #64]	; (8013054 <tcp_output_segment+0x1a0>)
 8013014:	f240 621c 	movw	r2, #1564	; 0x61c
 8013018:	4914      	ldr	r1, [pc, #80]	; (801306c <tcp_output_segment+0x1b8>)
 801301a:	4810      	ldr	r0, [pc, #64]	; (801305c <tcp_output_segment+0x1a8>)
 801301c:	f005 fe98 	bl	8018d50 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	6858      	ldr	r0, [r3, #4]
 8013024:	68b9      	ldr	r1, [r7, #8]
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	1d1c      	adds	r4, r3, #4
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	7add      	ldrb	r5, [r3, #11]
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	7a9b      	ldrb	r3, [r3, #10]
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	9202      	str	r2, [sp, #8]
 8013036:	2206      	movs	r2, #6
 8013038:	9201      	str	r2, [sp, #4]
 801303a:	9300      	str	r3, [sp, #0]
 801303c:	462b      	mov	r3, r5
 801303e:	4622      	mov	r2, r4
 8013040:	f002 fc1a 	bl	8015878 <ip4_output_if>
 8013044:	4603      	mov	r3, r0
 8013046:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801304c:	4618      	mov	r0, r3
 801304e:	3720      	adds	r7, #32
 8013050:	46bd      	mov	sp, r7
 8013052:	bdb0      	pop	{r4, r5, r7, pc}
 8013054:	0801c168 	.word	0x0801c168
 8013058:	0801c72c 	.word	0x0801c72c
 801305c:	0801c1bc 	.word	0x0801c1bc
 8013060:	0801c74c 	.word	0x0801c74c
 8013064:	0801c76c 	.word	0x0801c76c
 8013068:	20011234 	.word	0x20011234
 801306c:	0801c790 	.word	0x0801c790

08013070 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013070:	b5b0      	push	{r4, r5, r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <tcp_rexmit_rto_prepare+0x1c>
 801307e:	4b31      	ldr	r3, [pc, #196]	; (8013144 <tcp_rexmit_rto_prepare+0xd4>)
 8013080:	f240 6263 	movw	r2, #1635	; 0x663
 8013084:	4930      	ldr	r1, [pc, #192]	; (8013148 <tcp_rexmit_rto_prepare+0xd8>)
 8013086:	4831      	ldr	r0, [pc, #196]	; (801314c <tcp_rexmit_rto_prepare+0xdc>)
 8013088:	f005 fe62 	bl	8018d50 <iprintf>

  if (pcb->unacked == NULL) {
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013090:	2b00      	cmp	r3, #0
 8013092:	d102      	bne.n	801309a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013094:	f06f 0305 	mvn.w	r3, #5
 8013098:	e050      	b.n	801313c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801309e:	60fb      	str	r3, [r7, #12]
 80130a0:	e00b      	b.n	80130ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80130a2:	68f8      	ldr	r0, [r7, #12]
 80130a4:	f7ff fee6 	bl	8012e74 <tcp_output_segment_busy>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d002      	beq.n	80130b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80130ae:	f06f 0305 	mvn.w	r3, #5
 80130b2:	e043      	b.n	801313c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	60fb      	str	r3, [r7, #12]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d1ef      	bne.n	80130a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	f7ff fed6 	bl	8012e74 <tcp_output_segment_busy>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d002      	beq.n	80130d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130ce:	f06f 0305 	mvn.w	r3, #5
 80130d2:	e033      	b.n	801313c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	8b5b      	ldrh	r3, [r3, #26]
 80130ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80130f2:	b29a      	uxth	r2, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f8 fd77 	bl	800bbf2 <lwip_htonl>
 8013104:	4604      	mov	r4, r0
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	891b      	ldrh	r3, [r3, #8]
 801310a:	461d      	mov	r5, r3
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	68db      	ldr	r3, [r3, #12]
 8013110:	899b      	ldrh	r3, [r3, #12]
 8013112:	b29b      	uxth	r3, r3
 8013114:	4618      	mov	r0, r3
 8013116:	f7f8 fd57 	bl	800bbc8 <lwip_htons>
 801311a:	4603      	mov	r3, r0
 801311c:	b2db      	uxtb	r3, r3
 801311e:	f003 0303 	and.w	r3, r3, #3
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <tcp_rexmit_rto_prepare+0xba>
 8013126:	2301      	movs	r3, #1
 8013128:	e000      	b.n	801312c <tcp_rexmit_rto_prepare+0xbc>
 801312a:	2300      	movs	r3, #0
 801312c:	442b      	add	r3, r5
 801312e:	18e2      	adds	r2, r4, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2200      	movs	r2, #0
 8013138:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801313a:	2300      	movs	r3, #0
}
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bdb0      	pop	{r4, r5, r7, pc}
 8013144:	0801c168 	.word	0x0801c168
 8013148:	0801c7a4 	.word	0x0801c7a4
 801314c:	0801c1bc 	.word	0x0801c1bc

08013150 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d106      	bne.n	801316c <tcp_rexmit_rto_commit+0x1c>
 801315e:	4b0d      	ldr	r3, [pc, #52]	; (8013194 <tcp_rexmit_rto_commit+0x44>)
 8013160:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013164:	490c      	ldr	r1, [pc, #48]	; (8013198 <tcp_rexmit_rto_commit+0x48>)
 8013166:	480d      	ldr	r0, [pc, #52]	; (801319c <tcp_rexmit_rto_commit+0x4c>)
 8013168:	f005 fdf2 	bl	8018d50 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013172:	2bff      	cmp	r3, #255	; 0xff
 8013174:	d007      	beq.n	8013186 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801317c:	3301      	adds	r3, #1
 801317e:	b2da      	uxtb	r2, r3
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff fc80 	bl	8012a8c <tcp_output>
}
 801318c:	bf00      	nop
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	0801c168 	.word	0x0801c168
 8013198:	0801c7c8 	.word	0x0801c7c8
 801319c:	0801c1bc 	.word	0x0801c1bc

080131a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d106      	bne.n	80131bc <tcp_rexmit_rto+0x1c>
 80131ae:	4b0a      	ldr	r3, [pc, #40]	; (80131d8 <tcp_rexmit_rto+0x38>)
 80131b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80131b4:	4909      	ldr	r1, [pc, #36]	; (80131dc <tcp_rexmit_rto+0x3c>)
 80131b6:	480a      	ldr	r0, [pc, #40]	; (80131e0 <tcp_rexmit_rto+0x40>)
 80131b8:	f005 fdca 	bl	8018d50 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff ff57 	bl	8013070 <tcp_rexmit_rto_prepare>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d102      	bne.n	80131ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f7ff ffc1 	bl	8013150 <tcp_rexmit_rto_commit>
  }
}
 80131ce:	bf00      	nop
 80131d0:	3708      	adds	r7, #8
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	0801c168 	.word	0x0801c168
 80131dc:	0801c7ec 	.word	0x0801c7ec
 80131e0:	0801c1bc 	.word	0x0801c1bc

080131e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80131e4:	b590      	push	{r4, r7, lr}
 80131e6:	b085      	sub	sp, #20
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <tcp_rexmit+0x1c>
 80131f2:	4b2f      	ldr	r3, [pc, #188]	; (80132b0 <tcp_rexmit+0xcc>)
 80131f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80131f8:	492e      	ldr	r1, [pc, #184]	; (80132b4 <tcp_rexmit+0xd0>)
 80131fa:	482f      	ldr	r0, [pc, #188]	; (80132b8 <tcp_rexmit+0xd4>)
 80131fc:	f005 fda8 	bl	8018d50 <iprintf>

  if (pcb->unacked == NULL) {
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013204:	2b00      	cmp	r3, #0
 8013206:	d102      	bne.n	801320e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013208:	f06f 0305 	mvn.w	r3, #5
 801320c:	e04c      	b.n	80132a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013212:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013214:	68b8      	ldr	r0, [r7, #8]
 8013216:	f7ff fe2d 	bl	8012e74 <tcp_output_segment_busy>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013220:	f06f 0305 	mvn.w	r3, #5
 8013224:	e040      	b.n	80132a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	336c      	adds	r3, #108	; 0x6c
 8013232:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013234:	e002      	b.n	801323c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d011      	beq.n	8013268 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	4618      	mov	r0, r3
 801324e:	f7f8 fcd0 	bl	800bbf2 <lwip_htonl>
 8013252:	4604      	mov	r4, r0
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	68db      	ldr	r3, [r3, #12]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	4618      	mov	r0, r3
 801325c:	f7f8 fcc9 	bl	800bbf2 <lwip_htonl>
 8013260:	4603      	mov	r3, r0
 8013262:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013264:	2b00      	cmp	r3, #0
 8013266:	dbe6      	blt.n	8013236 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d103      	bne.n	8013286 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2200      	movs	r2, #0
 8013282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801328c:	2bff      	cmp	r3, #255	; 0xff
 801328e:	d007      	beq.n	80132a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013296:	3301      	adds	r3, #1
 8013298:	b2da      	uxtb	r2, r3
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80132a6:	2300      	movs	r3, #0
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3714      	adds	r7, #20
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd90      	pop	{r4, r7, pc}
 80132b0:	0801c168 	.word	0x0801c168
 80132b4:	0801c808 	.word	0x0801c808
 80132b8:	0801c1bc 	.word	0x0801c1bc

080132bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d106      	bne.n	80132d8 <tcp_rexmit_fast+0x1c>
 80132ca:	4b2a      	ldr	r3, [pc, #168]	; (8013374 <tcp_rexmit_fast+0xb8>)
 80132cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80132d0:	4929      	ldr	r1, [pc, #164]	; (8013378 <tcp_rexmit_fast+0xbc>)
 80132d2:	482a      	ldr	r0, [pc, #168]	; (801337c <tcp_rexmit_fast+0xc0>)
 80132d4:	f005 fd3c 	bl	8018d50 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d045      	beq.n	801336c <tcp_rexmit_fast+0xb0>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	8b5b      	ldrh	r3, [r3, #26]
 80132e4:	f003 0304 	and.w	r3, r3, #4
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d13f      	bne.n	801336c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff ff79 	bl	80131e4 <tcp_rexmit>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d139      	bne.n	801336c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013304:	4293      	cmp	r3, r2
 8013306:	bf28      	it	cs
 8013308:	4613      	movcs	r3, r2
 801330a:	b29b      	uxth	r3, r3
 801330c:	2b00      	cmp	r3, #0
 801330e:	da00      	bge.n	8013312 <tcp_rexmit_fast+0x56>
 8013310:	3301      	adds	r3, #1
 8013312:	105b      	asrs	r3, r3, #1
 8013314:	b29a      	uxth	r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013322:	461a      	mov	r2, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013328:	005b      	lsls	r3, r3, #1
 801332a:	429a      	cmp	r2, r3
 801332c:	d206      	bcs.n	801333c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013332:	005b      	lsls	r3, r3, #1
 8013334:	b29a      	uxth	r2, r3
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013346:	4619      	mov	r1, r3
 8013348:	0049      	lsls	r1, r1, #1
 801334a:	440b      	add	r3, r1
 801334c:	b29b      	uxth	r3, r3
 801334e:	4413      	add	r3, r2
 8013350:	b29a      	uxth	r2, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	8b5b      	ldrh	r3, [r3, #26]
 801335c:	f043 0304 	orr.w	r3, r3, #4
 8013360:	b29a      	uxth	r2, r3
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2200      	movs	r2, #0
 801336a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801336c:	bf00      	nop
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	0801c168 	.word	0x0801c168
 8013378:	0801c820 	.word	0x0801c820
 801337c:	0801c1bc 	.word	0x0801c1bc

08013380 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	607b      	str	r3, [r7, #4]
 801338a:	460b      	mov	r3, r1
 801338c:	817b      	strh	r3, [r7, #10]
 801338e:	4613      	mov	r3, r2
 8013390:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013392:	897a      	ldrh	r2, [r7, #10]
 8013394:	893b      	ldrh	r3, [r7, #8]
 8013396:	4413      	add	r3, r2
 8013398:	b29b      	uxth	r3, r3
 801339a:	3314      	adds	r3, #20
 801339c:	b29b      	uxth	r3, r3
 801339e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133a2:	4619      	mov	r1, r3
 80133a4:	2022      	movs	r0, #34	; 0x22
 80133a6:	f7f9 fd2d 	bl	800ce04 <pbuf_alloc>
 80133aa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d04d      	beq.n	801344e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80133b2:	897b      	ldrh	r3, [r7, #10]
 80133b4:	3313      	adds	r3, #19
 80133b6:	697a      	ldr	r2, [r7, #20]
 80133b8:	8952      	ldrh	r2, [r2, #10]
 80133ba:	4293      	cmp	r3, r2
 80133bc:	db06      	blt.n	80133cc <tcp_output_alloc_header_common+0x4c>
 80133be:	4b26      	ldr	r3, [pc, #152]	; (8013458 <tcp_output_alloc_header_common+0xd8>)
 80133c0:	f240 7223 	movw	r2, #1827	; 0x723
 80133c4:	4925      	ldr	r1, [pc, #148]	; (801345c <tcp_output_alloc_header_common+0xdc>)
 80133c6:	4826      	ldr	r0, [pc, #152]	; (8013460 <tcp_output_alloc_header_common+0xe0>)
 80133c8:	f005 fcc2 	bl	8018d50 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80133d2:	8c3b      	ldrh	r3, [r7, #32]
 80133d4:	4618      	mov	r0, r3
 80133d6:	f7f8 fbf7 	bl	800bbc8 <lwip_htons>
 80133da:	4603      	mov	r3, r0
 80133dc:	461a      	mov	r2, r3
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80133e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f8 fbef 	bl	800bbc8 <lwip_htons>
 80133ea:	4603      	mov	r3, r0
 80133ec:	461a      	mov	r2, r3
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f7f8 fbfa 	bl	800bbf2 <lwip_htonl>
 80133fe:	4602      	mov	r2, r0
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013404:	897b      	ldrh	r3, [r7, #10]
 8013406:	089b      	lsrs	r3, r3, #2
 8013408:	b29b      	uxth	r3, r3
 801340a:	3305      	adds	r3, #5
 801340c:	b29b      	uxth	r3, r3
 801340e:	031b      	lsls	r3, r3, #12
 8013410:	b29a      	uxth	r2, r3
 8013412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013416:	b29b      	uxth	r3, r3
 8013418:	4313      	orrs	r3, r2
 801341a:	b29b      	uxth	r3, r3
 801341c:	4618      	mov	r0, r3
 801341e:	f7f8 fbd3 	bl	800bbc8 <lwip_htons>
 8013422:	4603      	mov	r3, r0
 8013424:	461a      	mov	r2, r3
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801342a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801342c:	4618      	mov	r0, r3
 801342e:	f7f8 fbcb 	bl	800bbc8 <lwip_htons>
 8013432:	4603      	mov	r3, r0
 8013434:	461a      	mov	r2, r3
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	2200      	movs	r2, #0
 801343e:	741a      	strb	r2, [r3, #16]
 8013440:	2200      	movs	r2, #0
 8013442:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	2200      	movs	r2, #0
 8013448:	749a      	strb	r2, [r3, #18]
 801344a:	2200      	movs	r2, #0
 801344c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801344e:	697b      	ldr	r3, [r7, #20]
}
 8013450:	4618      	mov	r0, r3
 8013452:	3718      	adds	r7, #24
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	0801c168 	.word	0x0801c168
 801345c:	0801c840 	.word	0x0801c840
 8013460:	0801c1bc 	.word	0x0801c1bc

08013464 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013464:	b5b0      	push	{r4, r5, r7, lr}
 8013466:	b08a      	sub	sp, #40	; 0x28
 8013468:	af04      	add	r7, sp, #16
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	607b      	str	r3, [r7, #4]
 801346e:	460b      	mov	r3, r1
 8013470:	817b      	strh	r3, [r7, #10]
 8013472:	4613      	mov	r3, r2
 8013474:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d106      	bne.n	801348a <tcp_output_alloc_header+0x26>
 801347c:	4b15      	ldr	r3, [pc, #84]	; (80134d4 <tcp_output_alloc_header+0x70>)
 801347e:	f240 7242 	movw	r2, #1858	; 0x742
 8013482:	4915      	ldr	r1, [pc, #84]	; (80134d8 <tcp_output_alloc_header+0x74>)
 8013484:	4815      	ldr	r0, [pc, #84]	; (80134dc <tcp_output_alloc_header+0x78>)
 8013486:	f005 fc63 	bl	8018d50 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	8adb      	ldrh	r3, [r3, #22]
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	8b12      	ldrh	r2, [r2, #24]
 8013496:	68f9      	ldr	r1, [r7, #12]
 8013498:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801349a:	893d      	ldrh	r5, [r7, #8]
 801349c:	897c      	ldrh	r4, [r7, #10]
 801349e:	9103      	str	r1, [sp, #12]
 80134a0:	2110      	movs	r1, #16
 80134a2:	9102      	str	r1, [sp, #8]
 80134a4:	9201      	str	r2, [sp, #4]
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	462a      	mov	r2, r5
 80134ac:	4621      	mov	r1, r4
 80134ae:	f7ff ff67 	bl	8013380 <tcp_output_alloc_header_common>
 80134b2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d006      	beq.n	80134c8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134be:	68fa      	ldr	r2, [r7, #12]
 80134c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80134c2:	441a      	add	r2, r3
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80134c8:	697b      	ldr	r3, [r7, #20]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3718      	adds	r7, #24
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bdb0      	pop	{r4, r5, r7, pc}
 80134d2:	bf00      	nop
 80134d4:	0801c168 	.word	0x0801c168
 80134d8:	0801c870 	.word	0x0801c870
 80134dc:	0801c1bc 	.word	0x0801c1bc

080134e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b088      	sub	sp, #32
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	4611      	mov	r1, r2
 80134ec:	461a      	mov	r2, r3
 80134ee:	460b      	mov	r3, r1
 80134f0:	71fb      	strb	r3, [r7, #7]
 80134f2:	4613      	mov	r3, r2
 80134f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80134f6:	2300      	movs	r3, #0
 80134f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d106      	bne.n	801350e <tcp_output_fill_options+0x2e>
 8013500:	4b13      	ldr	r3, [pc, #76]	; (8013550 <tcp_output_fill_options+0x70>)
 8013502:	f240 7256 	movw	r2, #1878	; 0x756
 8013506:	4913      	ldr	r1, [pc, #76]	; (8013554 <tcp_output_fill_options+0x74>)
 8013508:	4813      	ldr	r0, [pc, #76]	; (8013558 <tcp_output_fill_options+0x78>)
 801350a:	f005 fc21 	bl	8018d50 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	3314      	adds	r3, #20
 8013518:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	f103 0214 	add.w	r2, r3, #20
 8013520:	8bfb      	ldrh	r3, [r7, #30]
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	4619      	mov	r1, r3
 8013526:	79fb      	ldrb	r3, [r7, #7]
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	f003 0304 	and.w	r3, r3, #4
 801352e:	440b      	add	r3, r1
 8013530:	4413      	add	r3, r2
 8013532:	697a      	ldr	r2, [r7, #20]
 8013534:	429a      	cmp	r2, r3
 8013536:	d006      	beq.n	8013546 <tcp_output_fill_options+0x66>
 8013538:	4b05      	ldr	r3, [pc, #20]	; (8013550 <tcp_output_fill_options+0x70>)
 801353a:	f240 7275 	movw	r2, #1909	; 0x775
 801353e:	4907      	ldr	r1, [pc, #28]	; (801355c <tcp_output_fill_options+0x7c>)
 8013540:	4805      	ldr	r0, [pc, #20]	; (8013558 <tcp_output_fill_options+0x78>)
 8013542:	f005 fc05 	bl	8018d50 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013546:	bf00      	nop
 8013548:	3720      	adds	r7, #32
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	0801c168 	.word	0x0801c168
 8013554:	0801c898 	.word	0x0801c898
 8013558:	0801c1bc 	.word	0x0801c1bc
 801355c:	0801c790 	.word	0x0801c790

08013560 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b08a      	sub	sp, #40	; 0x28
 8013564:	af04      	add	r7, sp, #16
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	607a      	str	r2, [r7, #4]
 801356c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d106      	bne.n	8013582 <tcp_output_control_segment+0x22>
 8013574:	4b1c      	ldr	r3, [pc, #112]	; (80135e8 <tcp_output_control_segment+0x88>)
 8013576:	f240 7287 	movw	r2, #1927	; 0x787
 801357a:	491c      	ldr	r1, [pc, #112]	; (80135ec <tcp_output_control_segment+0x8c>)
 801357c:	481c      	ldr	r0, [pc, #112]	; (80135f0 <tcp_output_control_segment+0x90>)
 801357e:	f005 fbe7 	bl	8018d50 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013582:	683a      	ldr	r2, [r7, #0]
 8013584:	6879      	ldr	r1, [r7, #4]
 8013586:	68f8      	ldr	r0, [r7, #12]
 8013588:	f7fe fae8 	bl	8011b5c <tcp_route>
 801358c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d102      	bne.n	801359a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013594:	23fc      	movs	r3, #252	; 0xfc
 8013596:	75fb      	strb	r3, [r7, #23]
 8013598:	e01c      	b.n	80135d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d006      	beq.n	80135ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	7adb      	ldrb	r3, [r3, #11]
 80135a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	7a9b      	ldrb	r3, [r3, #10]
 80135aa:	757b      	strb	r3, [r7, #21]
 80135ac:	e003      	b.n	80135b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80135ae:	23ff      	movs	r3, #255	; 0xff
 80135b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80135b2:	2300      	movs	r3, #0
 80135b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80135b6:	7dba      	ldrb	r2, [r7, #22]
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	9302      	str	r3, [sp, #8]
 80135bc:	2306      	movs	r3, #6
 80135be:	9301      	str	r3, [sp, #4]
 80135c0:	7d7b      	ldrb	r3, [r7, #21]
 80135c2:	9300      	str	r3, [sp, #0]
 80135c4:	4613      	mov	r3, r2
 80135c6:	683a      	ldr	r2, [r7, #0]
 80135c8:	6879      	ldr	r1, [r7, #4]
 80135ca:	68b8      	ldr	r0, [r7, #8]
 80135cc:	f002 f954 	bl	8015878 <ip4_output_if>
 80135d0:	4603      	mov	r3, r0
 80135d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80135d4:	68b8      	ldr	r0, [r7, #8]
 80135d6:	f7f9 fef9 	bl	800d3cc <pbuf_free>
  return err;
 80135da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3718      	adds	r7, #24
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	0801c168 	.word	0x0801c168
 80135ec:	0801c8c0 	.word	0x0801c8c0
 80135f0:	0801c1bc 	.word	0x0801c1bc

080135f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80135f4:	b590      	push	{r4, r7, lr}
 80135f6:	b08b      	sub	sp, #44	; 0x2c
 80135f8:	af04      	add	r7, sp, #16
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
 8013600:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d106      	bne.n	8013616 <tcp_rst+0x22>
 8013608:	4b1f      	ldr	r3, [pc, #124]	; (8013688 <tcp_rst+0x94>)
 801360a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801360e:	491f      	ldr	r1, [pc, #124]	; (801368c <tcp_rst+0x98>)
 8013610:	481f      	ldr	r0, [pc, #124]	; (8013690 <tcp_rst+0x9c>)
 8013612:	f005 fb9d 	bl	8018d50 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013618:	2b00      	cmp	r3, #0
 801361a:	d106      	bne.n	801362a <tcp_rst+0x36>
 801361c:	4b1a      	ldr	r3, [pc, #104]	; (8013688 <tcp_rst+0x94>)
 801361e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013622:	491c      	ldr	r1, [pc, #112]	; (8013694 <tcp_rst+0xa0>)
 8013624:	481a      	ldr	r0, [pc, #104]	; (8013690 <tcp_rst+0x9c>)
 8013626:	f005 fb93 	bl	8018d50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801362a:	2300      	movs	r3, #0
 801362c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801362e:	f246 0308 	movw	r3, #24584	; 0x6008
 8013632:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013634:	7dfb      	ldrb	r3, [r7, #23]
 8013636:	b29c      	uxth	r4, r3
 8013638:	68b8      	ldr	r0, [r7, #8]
 801363a:	f7f8 fada 	bl	800bbf2 <lwip_htonl>
 801363e:	4602      	mov	r2, r0
 8013640:	8abb      	ldrh	r3, [r7, #20]
 8013642:	9303      	str	r3, [sp, #12]
 8013644:	2314      	movs	r3, #20
 8013646:	9302      	str	r3, [sp, #8]
 8013648:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801364e:	9300      	str	r3, [sp, #0]
 8013650:	4613      	mov	r3, r2
 8013652:	2200      	movs	r2, #0
 8013654:	4621      	mov	r1, r4
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff fe92 	bl	8013380 <tcp_output_alloc_header_common>
 801365c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d00c      	beq.n	801367e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013664:	7dfb      	ldrb	r3, [r7, #23]
 8013666:	2200      	movs	r2, #0
 8013668:	6939      	ldr	r1, [r7, #16]
 801366a:	68f8      	ldr	r0, [r7, #12]
 801366c:	f7ff ff38 	bl	80134e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013672:	683a      	ldr	r2, [r7, #0]
 8013674:	6939      	ldr	r1, [r7, #16]
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f7ff ff72 	bl	8013560 <tcp_output_control_segment>
 801367c:	e000      	b.n	8013680 <tcp_rst+0x8c>
    return;
 801367e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013680:	371c      	adds	r7, #28
 8013682:	46bd      	mov	sp, r7
 8013684:	bd90      	pop	{r4, r7, pc}
 8013686:	bf00      	nop
 8013688:	0801c168 	.word	0x0801c168
 801368c:	0801c8ec 	.word	0x0801c8ec
 8013690:	0801c1bc 	.word	0x0801c1bc
 8013694:	0801c908 	.word	0x0801c908

08013698 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013698:	b590      	push	{r4, r7, lr}
 801369a:	b087      	sub	sp, #28
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80136a0:	2300      	movs	r3, #0
 80136a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80136a4:	2300      	movs	r3, #0
 80136a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d106      	bne.n	80136bc <tcp_send_empty_ack+0x24>
 80136ae:	4b28      	ldr	r3, [pc, #160]	; (8013750 <tcp_send_empty_ack+0xb8>)
 80136b0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80136b4:	4927      	ldr	r1, [pc, #156]	; (8013754 <tcp_send_empty_ack+0xbc>)
 80136b6:	4828      	ldr	r0, [pc, #160]	; (8013758 <tcp_send_empty_ack+0xc0>)
 80136b8:	f005 fb4a 	bl	8018d50 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136bc:	7dfb      	ldrb	r3, [r7, #23]
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	f003 0304 	and.w	r3, r3, #4
 80136c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80136c8:	7d7b      	ldrb	r3, [r7, #21]
 80136ca:	b29c      	uxth	r4, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7f8 fa8e 	bl	800bbf2 <lwip_htonl>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2200      	movs	r2, #0
 80136da:	4621      	mov	r1, r4
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f7ff fec1 	bl	8013464 <tcp_output_alloc_header>
 80136e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d109      	bne.n	80136fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	8b5b      	ldrh	r3, [r3, #26]
 80136ee:	f043 0303 	orr.w	r3, r3, #3
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80136f8:	f06f 0301 	mvn.w	r3, #1
 80136fc:	e023      	b.n	8013746 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80136fe:	7dbb      	ldrb	r3, [r7, #22]
 8013700:	7dfa      	ldrb	r2, [r7, #23]
 8013702:	6939      	ldr	r1, [r7, #16]
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7ff feeb 	bl	80134e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	3304      	adds	r3, #4
 8013710:	6939      	ldr	r1, [r7, #16]
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7ff ff24 	bl	8013560 <tcp_output_control_segment>
 8013718:	4603      	mov	r3, r0
 801371a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d007      	beq.n	8013734 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	8b5b      	ldrh	r3, [r3, #26]
 8013728:	f043 0303 	orr.w	r3, r3, #3
 801372c:	b29a      	uxth	r2, r3
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	835a      	strh	r2, [r3, #26]
 8013732:	e006      	b.n	8013742 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	8b5b      	ldrh	r3, [r3, #26]
 8013738:	f023 0303 	bic.w	r3, r3, #3
 801373c:	b29a      	uxth	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013746:	4618      	mov	r0, r3
 8013748:	371c      	adds	r7, #28
 801374a:	46bd      	mov	sp, r7
 801374c:	bd90      	pop	{r4, r7, pc}
 801374e:	bf00      	nop
 8013750:	0801c168 	.word	0x0801c168
 8013754:	0801c924 	.word	0x0801c924
 8013758:	0801c1bc 	.word	0x0801c1bc

0801375c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801375c:	b590      	push	{r4, r7, lr}
 801375e:	b087      	sub	sp, #28
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013764:	2300      	movs	r3, #0
 8013766:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d106      	bne.n	801377c <tcp_keepalive+0x20>
 801376e:	4b18      	ldr	r3, [pc, #96]	; (80137d0 <tcp_keepalive+0x74>)
 8013770:	f640 0224 	movw	r2, #2084	; 0x824
 8013774:	4917      	ldr	r1, [pc, #92]	; (80137d4 <tcp_keepalive+0x78>)
 8013776:	4818      	ldr	r0, [pc, #96]	; (80137d8 <tcp_keepalive+0x7c>)
 8013778:	f005 faea 	bl	8018d50 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801377c:	7dfb      	ldrb	r3, [r7, #23]
 801377e:	b29c      	uxth	r4, r3
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013784:	3b01      	subs	r3, #1
 8013786:	4618      	mov	r0, r3
 8013788:	f7f8 fa33 	bl	800bbf2 <lwip_htonl>
 801378c:	4603      	mov	r3, r0
 801378e:	2200      	movs	r2, #0
 8013790:	4621      	mov	r1, r4
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f7ff fe66 	bl	8013464 <tcp_output_alloc_header>
 8013798:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d102      	bne.n	80137a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80137a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137a4:	e010      	b.n	80137c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137a6:	7dfb      	ldrb	r3, [r7, #23]
 80137a8:	2200      	movs	r2, #0
 80137aa:	6939      	ldr	r1, [r7, #16]
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f7ff fe97 	bl	80134e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137b2:	687a      	ldr	r2, [r7, #4]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	3304      	adds	r3, #4
 80137b8:	6939      	ldr	r1, [r7, #16]
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f7ff fed0 	bl	8013560 <tcp_output_control_segment>
 80137c0:	4603      	mov	r3, r0
 80137c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	371c      	adds	r7, #28
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd90      	pop	{r4, r7, pc}
 80137d0:	0801c168 	.word	0x0801c168
 80137d4:	0801c944 	.word	0x0801c944
 80137d8:	0801c1bc 	.word	0x0801c1bc

080137dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80137dc:	b590      	push	{r4, r7, lr}
 80137de:	b08b      	sub	sp, #44	; 0x2c
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137e4:	2300      	movs	r3, #0
 80137e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d106      	bne.n	80137fe <tcp_zero_window_probe+0x22>
 80137f0:	4b4c      	ldr	r3, [pc, #304]	; (8013924 <tcp_zero_window_probe+0x148>)
 80137f2:	f640 024f 	movw	r2, #2127	; 0x84f
 80137f6:	494c      	ldr	r1, [pc, #304]	; (8013928 <tcp_zero_window_probe+0x14c>)
 80137f8:	484c      	ldr	r0, [pc, #304]	; (801392c <tcp_zero_window_probe+0x150>)
 80137fa:	f005 faa9 	bl	8018d50 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013802:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013804:	6a3b      	ldr	r3, [r7, #32]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801380a:	2300      	movs	r3, #0
 801380c:	e086      	b.n	801391c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013814:	2bff      	cmp	r3, #255	; 0xff
 8013816:	d007      	beq.n	8013828 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801381e:	3301      	adds	r3, #1
 8013820:	b2da      	uxtb	r2, r3
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013828:	6a3b      	ldr	r3, [r7, #32]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	899b      	ldrh	r3, [r3, #12]
 801382e:	b29b      	uxth	r3, r3
 8013830:	4618      	mov	r0, r3
 8013832:	f7f8 f9c9 	bl	800bbc8 <lwip_htons>
 8013836:	4603      	mov	r3, r0
 8013838:	b2db      	uxtb	r3, r3
 801383a:	f003 0301 	and.w	r3, r3, #1
 801383e:	2b00      	cmp	r3, #0
 8013840:	d005      	beq.n	801384e <tcp_zero_window_probe+0x72>
 8013842:	6a3b      	ldr	r3, [r7, #32]
 8013844:	891b      	ldrh	r3, [r3, #8]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d101      	bne.n	801384e <tcp_zero_window_probe+0x72>
 801384a:	2301      	movs	r3, #1
 801384c:	e000      	b.n	8013850 <tcp_zero_window_probe+0x74>
 801384e:	2300      	movs	r3, #0
 8013850:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013852:	7ffb      	ldrb	r3, [r7, #31]
 8013854:	2b00      	cmp	r3, #0
 8013856:	bf0c      	ite	eq
 8013858:	2301      	moveq	r3, #1
 801385a:	2300      	movne	r3, #0
 801385c:	b2db      	uxtb	r3, r3
 801385e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013864:	b299      	uxth	r1, r3
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	8bba      	ldrh	r2, [r7, #28]
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f7ff fdf8 	bl	8013464 <tcp_output_alloc_header>
 8013874:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013876:	69bb      	ldr	r3, [r7, #24]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d102      	bne.n	8013882 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801387c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013880:	e04c      	b.n	801391c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013888:	7ffb      	ldrb	r3, [r7, #31]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d011      	beq.n	80138b2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	899b      	ldrh	r3, [r3, #12]
 8013892:	b29b      	uxth	r3, r3
 8013894:	b21b      	sxth	r3, r3
 8013896:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801389a:	b21c      	sxth	r4, r3
 801389c:	2011      	movs	r0, #17
 801389e:	f7f8 f993 	bl	800bbc8 <lwip_htons>
 80138a2:	4603      	mov	r3, r0
 80138a4:	b21b      	sxth	r3, r3
 80138a6:	4323      	orrs	r3, r4
 80138a8:	b21b      	sxth	r3, r3
 80138aa:	b29a      	uxth	r2, r3
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	819a      	strh	r2, [r3, #12]
 80138b0:	e010      	b.n	80138d4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	3314      	adds	r3, #20
 80138b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80138ba:	6a3b      	ldr	r3, [r7, #32]
 80138bc:	6858      	ldr	r0, [r3, #4]
 80138be:	6a3b      	ldr	r3, [r7, #32]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	891a      	ldrh	r2, [r3, #8]
 80138c4:	6a3b      	ldr	r3, [r7, #32]
 80138c6:	891b      	ldrh	r3, [r3, #8]
 80138c8:	1ad3      	subs	r3, r2, r3
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	2201      	movs	r2, #1
 80138ce:	6939      	ldr	r1, [r7, #16]
 80138d0:	f7f9 ff72 	bl	800d7b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80138d4:	6a3b      	ldr	r3, [r7, #32]
 80138d6:	68db      	ldr	r3, [r3, #12]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	4618      	mov	r0, r3
 80138dc:	f7f8 f989 	bl	800bbf2 <lwip_htonl>
 80138e0:	4603      	mov	r3, r0
 80138e2:	3301      	adds	r3, #1
 80138e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	1ad3      	subs	r3, r2, r3
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	da02      	bge.n	80138f8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	68fa      	ldr	r2, [r7, #12]
 80138f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80138f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138fc:	2200      	movs	r2, #0
 80138fe:	69b9      	ldr	r1, [r7, #24]
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7ff fded 	bl	80134e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	3304      	adds	r3, #4
 801390c:	69b9      	ldr	r1, [r7, #24]
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f7ff fe26 	bl	8013560 <tcp_output_control_segment>
 8013914:	4603      	mov	r3, r0
 8013916:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013918:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801391c:	4618      	mov	r0, r3
 801391e:	372c      	adds	r7, #44	; 0x2c
 8013920:	46bd      	mov	sp, r7
 8013922:	bd90      	pop	{r4, r7, pc}
 8013924:	0801c168 	.word	0x0801c168
 8013928:	0801c960 	.word	0x0801c960
 801392c:	0801c1bc 	.word	0x0801c1bc

08013930 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013938:	f7fa f82c 	bl	800d994 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801393c:	4b0a      	ldr	r3, [pc, #40]	; (8013968 <tcpip_tcp_timer+0x38>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d103      	bne.n	801394c <tcpip_tcp_timer+0x1c>
 8013944:	4b09      	ldr	r3, [pc, #36]	; (801396c <tcpip_tcp_timer+0x3c>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d005      	beq.n	8013958 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801394c:	2200      	movs	r2, #0
 801394e:	4908      	ldr	r1, [pc, #32]	; (8013970 <tcpip_tcp_timer+0x40>)
 8013950:	20fa      	movs	r0, #250	; 0xfa
 8013952:	f000 f8f3 	bl	8013b3c <sys_timeout>
 8013956:	e003      	b.n	8013960 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013958:	4b06      	ldr	r3, [pc, #24]	; (8013974 <tcpip_tcp_timer+0x44>)
 801395a:	2200      	movs	r2, #0
 801395c:	601a      	str	r2, [r3, #0]
  }
}
 801395e:	bf00      	nop
 8013960:	bf00      	nop
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	20011240 	.word	0x20011240
 801396c:	20011244 	.word	0x20011244
 8013970:	08013931 	.word	0x08013931
 8013974:	2001128c 	.word	0x2001128c

08013978 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801397c:	4b0a      	ldr	r3, [pc, #40]	; (80139a8 <tcp_timer_needed+0x30>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d10f      	bne.n	80139a4 <tcp_timer_needed+0x2c>
 8013984:	4b09      	ldr	r3, [pc, #36]	; (80139ac <tcp_timer_needed+0x34>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d103      	bne.n	8013994 <tcp_timer_needed+0x1c>
 801398c:	4b08      	ldr	r3, [pc, #32]	; (80139b0 <tcp_timer_needed+0x38>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d007      	beq.n	80139a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013994:	4b04      	ldr	r3, [pc, #16]	; (80139a8 <tcp_timer_needed+0x30>)
 8013996:	2201      	movs	r2, #1
 8013998:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801399a:	2200      	movs	r2, #0
 801399c:	4905      	ldr	r1, [pc, #20]	; (80139b4 <tcp_timer_needed+0x3c>)
 801399e:	20fa      	movs	r0, #250	; 0xfa
 80139a0:	f000 f8cc 	bl	8013b3c <sys_timeout>
  }
}
 80139a4:	bf00      	nop
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	2001128c 	.word	0x2001128c
 80139ac:	20011240 	.word	0x20011240
 80139b0:	20011244 	.word	0x20011244
 80139b4:	08013931 	.word	0x08013931

080139b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80139c4:	200a      	movs	r0, #10
 80139c6:	f7f8 fde7 	bl	800c598 <memp_malloc>
 80139ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d109      	bne.n	80139e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d151      	bne.n	8013a7c <sys_timeout_abs+0xc4>
 80139d8:	4b2a      	ldr	r3, [pc, #168]	; (8013a84 <sys_timeout_abs+0xcc>)
 80139da:	22be      	movs	r2, #190	; 0xbe
 80139dc:	492a      	ldr	r1, [pc, #168]	; (8013a88 <sys_timeout_abs+0xd0>)
 80139de:	482b      	ldr	r0, [pc, #172]	; (8013a8c <sys_timeout_abs+0xd4>)
 80139e0:	f005 f9b6 	bl	8018d50 <iprintf>
    return;
 80139e4:	e04a      	b.n	8013a7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	2200      	movs	r2, #0
 80139ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	68fa      	ldr	r2, [r7, #12]
 80139fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80139fe:	4b24      	ldr	r3, [pc, #144]	; (8013a90 <sys_timeout_abs+0xd8>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d103      	bne.n	8013a0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a06:	4a22      	ldr	r2, [pc, #136]	; (8013a90 <sys_timeout_abs+0xd8>)
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	6013      	str	r3, [r2, #0]
    return;
 8013a0c:	e037      	b.n	8013a7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	685a      	ldr	r2, [r3, #4]
 8013a12:	4b1f      	ldr	r3, [pc, #124]	; (8013a90 <sys_timeout_abs+0xd8>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	1ad3      	subs	r3, r2, r3
 8013a1a:	0fdb      	lsrs	r3, r3, #31
 8013a1c:	f003 0301 	and.w	r3, r3, #1
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d007      	beq.n	8013a36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013a26:	4b1a      	ldr	r3, [pc, #104]	; (8013a90 <sys_timeout_abs+0xd8>)
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a2e:	4a18      	ldr	r2, [pc, #96]	; (8013a90 <sys_timeout_abs+0xd8>)
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	6013      	str	r3, [r2, #0]
 8013a34:	e023      	b.n	8013a7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a36:	4b16      	ldr	r3, [pc, #88]	; (8013a90 <sys_timeout_abs+0xd8>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	617b      	str	r3, [r7, #20]
 8013a3c:	e01a      	b.n	8013a74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d00b      	beq.n	8013a5e <sys_timeout_abs+0xa6>
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	685a      	ldr	r2, [r3, #4]
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	1ad3      	subs	r3, r2, r3
 8013a52:	0fdb      	lsrs	r3, r3, #31
 8013a54:	f003 0301 	and.w	r3, r3, #1
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d007      	beq.n	8013a6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	693a      	ldr	r2, [r7, #16]
 8013a6a:	601a      	str	r2, [r3, #0]
        break;
 8013a6c:	e007      	b.n	8013a7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	617b      	str	r3, [r7, #20]
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d1e1      	bne.n	8013a3e <sys_timeout_abs+0x86>
 8013a7a:	e000      	b.n	8013a7e <sys_timeout_abs+0xc6>
    return;
 8013a7c:	bf00      	nop
      }
    }
  }
}
 8013a7e:	3718      	adds	r7, #24
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	0801c984 	.word	0x0801c984
 8013a88:	0801c9b8 	.word	0x0801c9b8
 8013a8c:	0801c9f8 	.word	0x0801c9f8
 8013a90:	20011284 	.word	0x20011284

08013a94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b086      	sub	sp, #24
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	4798      	blx	r3

  now = sys_now();
 8013aa6:	f7f2 fc9b 	bl	80063e0 <sys_now>
 8013aaa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	4b0f      	ldr	r3, [pc, #60]	; (8013af0 <lwip_cyclic_timer+0x5c>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	1ad3      	subs	r3, r2, r3
 8013abe:	0fdb      	lsrs	r3, r3, #31
 8013ac0:	f003 0301 	and.w	r3, r3, #1
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d009      	beq.n	8013ade <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	4413      	add	r3, r2
 8013ad2:	687a      	ldr	r2, [r7, #4]
 8013ad4:	4907      	ldr	r1, [pc, #28]	; (8013af4 <lwip_cyclic_timer+0x60>)
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7ff ff6e 	bl	80139b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013adc:	e004      	b.n	8013ae8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	4904      	ldr	r1, [pc, #16]	; (8013af4 <lwip_cyclic_timer+0x60>)
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	f7ff ff68 	bl	80139b8 <sys_timeout_abs>
}
 8013ae8:	bf00      	nop
 8013aea:	3718      	adds	r7, #24
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	20011288 	.word	0x20011288
 8013af4:	08013a95 	.word	0x08013a95

08013af8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b082      	sub	sp, #8
 8013afc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013afe:	2301      	movs	r3, #1
 8013b00:	607b      	str	r3, [r7, #4]
 8013b02:	e00e      	b.n	8013b22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b04:	4a0b      	ldr	r2, [pc, #44]	; (8013b34 <sys_timeouts_init+0x3c>)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	00db      	lsls	r3, r3, #3
 8013b10:	4a08      	ldr	r2, [pc, #32]	; (8013b34 <sys_timeouts_init+0x3c>)
 8013b12:	4413      	add	r3, r2
 8013b14:	461a      	mov	r2, r3
 8013b16:	4908      	ldr	r1, [pc, #32]	; (8013b38 <sys_timeouts_init+0x40>)
 8013b18:	f000 f810 	bl	8013b3c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	607b      	str	r3, [r7, #4]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d9ed      	bls.n	8013b04 <sys_timeouts_init+0xc>
  }
}
 8013b28:	bf00      	nop
 8013b2a:	bf00      	nop
 8013b2c:	3708      	adds	r7, #8
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	0801d68c 	.word	0x0801d68c
 8013b38:	08013a95 	.word	0x08013a95

08013b3c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b4e:	d306      	bcc.n	8013b5e <sys_timeout+0x22>
 8013b50:	4b0a      	ldr	r3, [pc, #40]	; (8013b7c <sys_timeout+0x40>)
 8013b52:	f240 1229 	movw	r2, #297	; 0x129
 8013b56:	490a      	ldr	r1, [pc, #40]	; (8013b80 <sys_timeout+0x44>)
 8013b58:	480a      	ldr	r0, [pc, #40]	; (8013b84 <sys_timeout+0x48>)
 8013b5a:	f005 f8f9 	bl	8018d50 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b5e:	f7f2 fc3f 	bl	80063e0 <sys_now>
 8013b62:	4602      	mov	r2, r0
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	4413      	add	r3, r2
 8013b68:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013b6a:	687a      	ldr	r2, [r7, #4]
 8013b6c:	68b9      	ldr	r1, [r7, #8]
 8013b6e:	6978      	ldr	r0, [r7, #20]
 8013b70:	f7ff ff22 	bl	80139b8 <sys_timeout_abs>
#endif
}
 8013b74:	bf00      	nop
 8013b76:	3718      	adds	r7, #24
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	0801c984 	.word	0x0801c984
 8013b80:	0801ca20 	.word	0x0801ca20
 8013b84:	0801c9f8 	.word	0x0801c9f8

08013b88 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013b8e:	f7f2 fc27 	bl	80063e0 <sys_now>
 8013b92:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013b94:	4b17      	ldr	r3, [pc, #92]	; (8013bf4 <sys_check_timeouts+0x6c>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d022      	beq.n	8013be6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	685b      	ldr	r3, [r3, #4]
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	1ad3      	subs	r3, r2, r3
 8013ba8:	0fdb      	lsrs	r3, r3, #31
 8013baa:	f003 0301 	and.w	r3, r3, #1
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d11a      	bne.n	8013bea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4a0e      	ldr	r2, [pc, #56]	; (8013bf4 <sys_check_timeouts+0x6c>)
 8013bba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	689b      	ldr	r3, [r3, #8]
 8013bc0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	68db      	ldr	r3, [r3, #12]
 8013bc6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	4a0a      	ldr	r2, [pc, #40]	; (8013bf8 <sys_check_timeouts+0x70>)
 8013bce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013bd0:	68b9      	ldr	r1, [r7, #8]
 8013bd2:	200a      	movs	r0, #10
 8013bd4:	f7f8 fd56 	bl	800c684 <memp_free>
    if (handler != NULL) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d0da      	beq.n	8013b94 <sys_check_timeouts+0xc>
      handler(arg);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6838      	ldr	r0, [r7, #0]
 8013be2:	4798      	blx	r3
  do {
 8013be4:	e7d6      	b.n	8013b94 <sys_check_timeouts+0xc>
      return;
 8013be6:	bf00      	nop
 8013be8:	e000      	b.n	8013bec <sys_check_timeouts+0x64>
      return;
 8013bea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	20011284 	.word	0x20011284
 8013bf8:	20011288 	.word	0x20011288

08013bfc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013c02:	4b16      	ldr	r3, [pc, #88]	; (8013c5c <sys_timeouts_sleeptime+0x60>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d102      	bne.n	8013c10 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c0e:	e020      	b.n	8013c52 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013c10:	f7f2 fbe6 	bl	80063e0 <sys_now>
 8013c14:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013c16:	4b11      	ldr	r3, [pc, #68]	; (8013c5c <sys_timeouts_sleeptime+0x60>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	685a      	ldr	r2, [r3, #4]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	0fdb      	lsrs	r3, r3, #31
 8013c22:	f003 0301 	and.w	r3, r3, #1
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d001      	beq.n	8013c30 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	e010      	b.n	8013c52 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013c30:	4b0a      	ldr	r3, [pc, #40]	; (8013c5c <sys_timeouts_sleeptime+0x60>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	685a      	ldr	r2, [r3, #4]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	1ad3      	subs	r3, r2, r3
 8013c3a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	da06      	bge.n	8013c50 <sys_timeouts_sleeptime+0x54>
 8013c42:	4b07      	ldr	r3, [pc, #28]	; (8013c60 <sys_timeouts_sleeptime+0x64>)
 8013c44:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013c48:	4906      	ldr	r1, [pc, #24]	; (8013c64 <sys_timeouts_sleeptime+0x68>)
 8013c4a:	4807      	ldr	r0, [pc, #28]	; (8013c68 <sys_timeouts_sleeptime+0x6c>)
 8013c4c:	f005 f880 	bl	8018d50 <iprintf>
    return ret;
 8013c50:	683b      	ldr	r3, [r7, #0]
  }
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	20011284 	.word	0x20011284
 8013c60:	0801c984 	.word	0x0801c984
 8013c64:	0801ca58 	.word	0x0801ca58
 8013c68:	0801c9f8 	.word	0x0801c9f8

08013c6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c70:	f005 f8fc 	bl	8018e6c <rand>
 8013c74:	4603      	mov	r3, r0
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013c82:	b29a      	uxth	r2, r3
 8013c84:	4b01      	ldr	r3, [pc, #4]	; (8013c8c <udp_init+0x20>)
 8013c86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c88:	bf00      	nop
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	2000002c 	.word	0x2000002c

08013c90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b083      	sub	sp, #12
 8013c94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013c9a:	4b17      	ldr	r3, [pc, #92]	; (8013cf8 <udp_new_port+0x68>)
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	1c5a      	adds	r2, r3, #1
 8013ca0:	b291      	uxth	r1, r2
 8013ca2:	4a15      	ldr	r2, [pc, #84]	; (8013cf8 <udp_new_port+0x68>)
 8013ca4:	8011      	strh	r1, [r2, #0]
 8013ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d103      	bne.n	8013cb6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013cae:	4b12      	ldr	r3, [pc, #72]	; (8013cf8 <udp_new_port+0x68>)
 8013cb0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013cb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cb6:	4b11      	ldr	r3, [pc, #68]	; (8013cfc <udp_new_port+0x6c>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	603b      	str	r3, [r7, #0]
 8013cbc:	e011      	b.n	8013ce2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	8a5a      	ldrh	r2, [r3, #18]
 8013cc2:	4b0d      	ldr	r3, [pc, #52]	; (8013cf8 <udp_new_port+0x68>)
 8013cc4:	881b      	ldrh	r3, [r3, #0]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d108      	bne.n	8013cdc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013cca:	88fb      	ldrh	r3, [r7, #6]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	80fb      	strh	r3, [r7, #6]
 8013cd0:	88fb      	ldrh	r3, [r7, #6]
 8013cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013cd6:	d3e0      	bcc.n	8013c9a <udp_new_port+0xa>
        return 0;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e007      	b.n	8013cec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	68db      	ldr	r3, [r3, #12]
 8013ce0:	603b      	str	r3, [r7, #0]
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d1ea      	bne.n	8013cbe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013ce8:	4b03      	ldr	r3, [pc, #12]	; (8013cf8 <udp_new_port+0x68>)
 8013cea:	881b      	ldrh	r3, [r3, #0]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	2000002c 	.word	0x2000002c
 8013cfc:	20011290 	.word	0x20011290

08013d00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b084      	sub	sp, #16
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	60f8      	str	r0, [r7, #12]
 8013d08:	60b9      	str	r1, [r7, #8]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d105      	bne.n	8013d20 <udp_input_local_match+0x20>
 8013d14:	4b27      	ldr	r3, [pc, #156]	; (8013db4 <udp_input_local_match+0xb4>)
 8013d16:	2287      	movs	r2, #135	; 0x87
 8013d18:	4927      	ldr	r1, [pc, #156]	; (8013db8 <udp_input_local_match+0xb8>)
 8013d1a:	4828      	ldr	r0, [pc, #160]	; (8013dbc <udp_input_local_match+0xbc>)
 8013d1c:	f005 f818 	bl	8018d50 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d105      	bne.n	8013d32 <udp_input_local_match+0x32>
 8013d26:	4b23      	ldr	r3, [pc, #140]	; (8013db4 <udp_input_local_match+0xb4>)
 8013d28:	2288      	movs	r2, #136	; 0x88
 8013d2a:	4925      	ldr	r1, [pc, #148]	; (8013dc0 <udp_input_local_match+0xc0>)
 8013d2c:	4823      	ldr	r0, [pc, #140]	; (8013dbc <udp_input_local_match+0xbc>)
 8013d2e:	f005 f80f 	bl	8018d50 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	7a1b      	ldrb	r3, [r3, #8]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d00b      	beq.n	8013d52 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	7a1a      	ldrb	r2, [r3, #8]
 8013d3e:	4b21      	ldr	r3, [pc, #132]	; (8013dc4 <udp_input_local_match+0xc4>)
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d46:	3301      	adds	r3, #1
 8013d48:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d001      	beq.n	8013d52 <udp_input_local_match+0x52>
    return 0;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	e02b      	b.n	8013daa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d52:	79fb      	ldrb	r3, [r7, #7]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d018      	beq.n	8013d8a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d013      	beq.n	8013d86 <udp_input_local_match+0x86>
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00f      	beq.n	8013d86 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d66:	4b17      	ldr	r3, [pc, #92]	; (8013dc4 <udp_input_local_match+0xc4>)
 8013d68:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d6e:	d00a      	beq.n	8013d86 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	4b13      	ldr	r3, [pc, #76]	; (8013dc4 <udp_input_local_match+0xc4>)
 8013d76:	695b      	ldr	r3, [r3, #20]
 8013d78:	405a      	eors	r2, r3
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	3308      	adds	r3, #8
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d110      	bne.n	8013da8 <udp_input_local_match+0xa8>
          return 1;
 8013d86:	2301      	movs	r3, #1
 8013d88:	e00f      	b.n	8013daa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d009      	beq.n	8013da4 <udp_input_local_match+0xa4>
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d005      	beq.n	8013da4 <udp_input_local_match+0xa4>
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	4b09      	ldr	r3, [pc, #36]	; (8013dc4 <udp_input_local_match+0xc4>)
 8013d9e:	695b      	ldr	r3, [r3, #20]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d101      	bne.n	8013da8 <udp_input_local_match+0xa8>
        return 1;
 8013da4:	2301      	movs	r3, #1
 8013da6:	e000      	b.n	8013daa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3710      	adds	r7, #16
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	0801ca6c 	.word	0x0801ca6c
 8013db8:	0801ca9c 	.word	0x0801ca9c
 8013dbc:	0801cac0 	.word	0x0801cac0
 8013dc0:	0801cae8 	.word	0x0801cae8
 8013dc4:	2000a138 	.word	0x2000a138

08013dc8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013dc8:	b590      	push	{r4, r7, lr}
 8013dca:	b08d      	sub	sp, #52	; 0x34
 8013dcc:	af02      	add	r7, sp, #8
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d105      	bne.n	8013de8 <udp_input+0x20>
 8013ddc:	4b7c      	ldr	r3, [pc, #496]	; (8013fd0 <udp_input+0x208>)
 8013dde:	22cf      	movs	r2, #207	; 0xcf
 8013de0:	497c      	ldr	r1, [pc, #496]	; (8013fd4 <udp_input+0x20c>)
 8013de2:	487d      	ldr	r0, [pc, #500]	; (8013fd8 <udp_input+0x210>)
 8013de4:	f004 ffb4 	bl	8018d50 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d105      	bne.n	8013dfa <udp_input+0x32>
 8013dee:	4b78      	ldr	r3, [pc, #480]	; (8013fd0 <udp_input+0x208>)
 8013df0:	22d0      	movs	r2, #208	; 0xd0
 8013df2:	497a      	ldr	r1, [pc, #488]	; (8013fdc <udp_input+0x214>)
 8013df4:	4878      	ldr	r0, [pc, #480]	; (8013fd8 <udp_input+0x210>)
 8013df6:	f004 ffab 	bl	8018d50 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	895b      	ldrh	r3, [r3, #10]
 8013dfe:	2b07      	cmp	r3, #7
 8013e00:	d803      	bhi.n	8013e0a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7f9 fae2 	bl	800d3cc <pbuf_free>
    goto end;
 8013e08:	e0de      	b.n	8013fc8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013e10:	4b73      	ldr	r3, [pc, #460]	; (8013fe0 <udp_input+0x218>)
 8013e12:	695b      	ldr	r3, [r3, #20]
 8013e14:	4a72      	ldr	r2, [pc, #456]	; (8013fe0 <udp_input+0x218>)
 8013e16:	6812      	ldr	r2, [r2, #0]
 8013e18:	4611      	mov	r1, r2
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f001 fe04 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 8013e20:	4603      	mov	r3, r0
 8013e22:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	881b      	ldrh	r3, [r3, #0]
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7f7 fecc 	bl	800bbc8 <lwip_htons>
 8013e30:	4603      	mov	r3, r0
 8013e32:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	885b      	ldrh	r3, [r3, #2]
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7f7 fec4 	bl	800bbc8 <lwip_htons>
 8013e40:	4603      	mov	r3, r0
 8013e42:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e44:	2300      	movs	r3, #0
 8013e46:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e50:	4b64      	ldr	r3, [pc, #400]	; (8013fe4 <udp_input+0x21c>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	627b      	str	r3, [r7, #36]	; 0x24
 8013e56:	e054      	b.n	8013f02 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5a:	8a5b      	ldrh	r3, [r3, #18]
 8013e5c:	89fa      	ldrh	r2, [r7, #14]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d14a      	bne.n	8013ef8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e62:	7cfb      	ldrb	r3, [r7, #19]
 8013e64:	461a      	mov	r2, r3
 8013e66:	6839      	ldr	r1, [r7, #0]
 8013e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e6a:	f7ff ff49 	bl	8013d00 <udp_input_local_match>
 8013e6e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d041      	beq.n	8013ef8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e76:	7c1b      	ldrb	r3, [r3, #16]
 8013e78:	f003 0304 	and.w	r3, r3, #4
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d11d      	bne.n	8013ebc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d102      	bne.n	8013e8c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e88:	61fb      	str	r3, [r7, #28]
 8013e8a:	e017      	b.n	8013ebc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e8c:	7cfb      	ldrb	r3, [r7, #19]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d014      	beq.n	8013ebc <udp_input+0xf4>
 8013e92:	4b53      	ldr	r3, [pc, #332]	; (8013fe0 <udp_input+0x218>)
 8013e94:	695b      	ldr	r3, [r3, #20]
 8013e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e9a:	d10f      	bne.n	8013ebc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	3304      	adds	r3, #4
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d008      	beq.n	8013ebc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eac:	681a      	ldr	r2, [r3, #0]
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d101      	bne.n	8013ebc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebe:	8a9b      	ldrh	r3, [r3, #20]
 8013ec0:	8a3a      	ldrh	r2, [r7, #16]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d118      	bne.n	8013ef8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d005      	beq.n	8013eda <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	4b43      	ldr	r3, [pc, #268]	; (8013fe0 <udp_input+0x218>)
 8013ed4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d10e      	bne.n	8013ef8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013eda:	6a3b      	ldr	r3, [r7, #32]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d014      	beq.n	8013f0a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee2:	68da      	ldr	r2, [r3, #12]
 8013ee4:	6a3b      	ldr	r3, [r7, #32]
 8013ee6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ee8:	4b3e      	ldr	r3, [pc, #248]	; (8013fe4 <udp_input+0x21c>)
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ef0:	4a3c      	ldr	r2, [pc, #240]	; (8013fe4 <udp_input+0x21c>)
 8013ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ef6:	e008      	b.n	8013f0a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	627b      	str	r3, [r7, #36]	; 0x24
 8013f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d1a7      	bne.n	8013e58 <udp_input+0x90>
 8013f08:	e000      	b.n	8013f0c <udp_input+0x144>
        break;
 8013f0a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d101      	bne.n	8013f16 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d002      	beq.n	8013f22 <udp_input+0x15a>
    for_us = 1;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	76fb      	strb	r3, [r7, #27]
 8013f20:	e00a      	b.n	8013f38 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	3304      	adds	r3, #4
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	4b2d      	ldr	r3, [pc, #180]	; (8013fe0 <udp_input+0x218>)
 8013f2a:	695b      	ldr	r3, [r3, #20]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	bf0c      	ite	eq
 8013f30:	2301      	moveq	r3, #1
 8013f32:	2300      	movne	r3, #0
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f38:	7efb      	ldrb	r3, [r7, #27]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d041      	beq.n	8013fc2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f3e:	2108      	movs	r1, #8
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f7f9 f9bd 	bl	800d2c0 <pbuf_remove_header>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d00a      	beq.n	8013f62 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f4c:	4b20      	ldr	r3, [pc, #128]	; (8013fd0 <udp_input+0x208>)
 8013f4e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f52:	4925      	ldr	r1, [pc, #148]	; (8013fe8 <udp_input+0x220>)
 8013f54:	4820      	ldr	r0, [pc, #128]	; (8013fd8 <udp_input+0x210>)
 8013f56:	f004 fefb 	bl	8018d50 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7f9 fa36 	bl	800d3cc <pbuf_free>
      goto end;
 8013f60:	e032      	b.n	8013fc8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d012      	beq.n	8013f8e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6a:	699b      	ldr	r3, [r3, #24]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d00a      	beq.n	8013f86 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f72:	699c      	ldr	r4, [r3, #24]
 8013f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f76:	69d8      	ldr	r0, [r3, #28]
 8013f78:	8a3b      	ldrh	r3, [r7, #16]
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	4b1b      	ldr	r3, [pc, #108]	; (8013fec <udp_input+0x224>)
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f82:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f84:	e021      	b.n	8013fca <udp_input+0x202>
        pbuf_free(p);
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7f9 fa20 	bl	800d3cc <pbuf_free>
        goto end;
 8013f8c:	e01c      	b.n	8013fc8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f8e:	7cfb      	ldrb	r3, [r7, #19]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d112      	bne.n	8013fba <udp_input+0x1f2>
 8013f94:	4b12      	ldr	r3, [pc, #72]	; (8013fe0 <udp_input+0x218>)
 8013f96:	695b      	ldr	r3, [r3, #20]
 8013f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f9c:	2be0      	cmp	r3, #224	; 0xe0
 8013f9e:	d00c      	beq.n	8013fba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013fa0:	4b0f      	ldr	r3, [pc, #60]	; (8013fe0 <udp_input+0x218>)
 8013fa2:	899b      	ldrh	r3, [r3, #12]
 8013fa4:	3308      	adds	r3, #8
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	b21b      	sxth	r3, r3
 8013faa:	4619      	mov	r1, r3
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7f9 f9fa 	bl	800d3a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013fb2:	2103      	movs	r1, #3
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f001 fa17 	bl	80153e8 <icmp_dest_unreach>
      pbuf_free(p);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7f9 fa06 	bl	800d3cc <pbuf_free>
  return;
 8013fc0:	e003      	b.n	8013fca <udp_input+0x202>
    pbuf_free(p);
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7f9 fa02 	bl	800d3cc <pbuf_free>
  return;
 8013fc8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013fca:	372c      	adds	r7, #44	; 0x2c
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd90      	pop	{r4, r7, pc}
 8013fd0:	0801ca6c 	.word	0x0801ca6c
 8013fd4:	0801cb10 	.word	0x0801cb10
 8013fd8:	0801cac0 	.word	0x0801cac0
 8013fdc:	0801cb28 	.word	0x0801cb28
 8013fe0:	2000a138 	.word	0x2000a138
 8013fe4:	20011290 	.word	0x20011290
 8013fe8:	0801cb44 	.word	0x0801cb44
 8013fec:	2000a148 	.word	0x2000a148

08013ff0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d101      	bne.n	8014008 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014004:	4b39      	ldr	r3, [pc, #228]	; (80140ec <udp_bind+0xfc>)
 8014006:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d109      	bne.n	8014022 <udp_bind+0x32>
 801400e:	4b38      	ldr	r3, [pc, #224]	; (80140f0 <udp_bind+0x100>)
 8014010:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014014:	4937      	ldr	r1, [pc, #220]	; (80140f4 <udp_bind+0x104>)
 8014016:	4838      	ldr	r0, [pc, #224]	; (80140f8 <udp_bind+0x108>)
 8014018:	f004 fe9a 	bl	8018d50 <iprintf>
 801401c:	f06f 030f 	mvn.w	r3, #15
 8014020:	e060      	b.n	80140e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014022:	2300      	movs	r3, #0
 8014024:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014026:	4b35      	ldr	r3, [pc, #212]	; (80140fc <udp_bind+0x10c>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	617b      	str	r3, [r7, #20]
 801402c:	e009      	b.n	8014042 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	429a      	cmp	r2, r3
 8014034:	d102      	bne.n	801403c <udp_bind+0x4c>
      rebind = 1;
 8014036:	2301      	movs	r3, #1
 8014038:	74fb      	strb	r3, [r7, #19]
      break;
 801403a:	e005      	b.n	8014048 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	617b      	str	r3, [r7, #20]
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d1f2      	bne.n	801402e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014048:	88fb      	ldrh	r3, [r7, #6]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d109      	bne.n	8014062 <udp_bind+0x72>
    port = udp_new_port();
 801404e:	f7ff fe1f 	bl	8013c90 <udp_new_port>
 8014052:	4603      	mov	r3, r0
 8014054:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014056:	88fb      	ldrh	r3, [r7, #6]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d12c      	bne.n	80140b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801405c:	f06f 0307 	mvn.w	r3, #7
 8014060:	e040      	b.n	80140e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014062:	4b26      	ldr	r3, [pc, #152]	; (80140fc <udp_bind+0x10c>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	617b      	str	r3, [r7, #20]
 8014068:	e022      	b.n	80140b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	429a      	cmp	r2, r3
 8014070:	d01b      	beq.n	80140aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	8a5b      	ldrh	r3, [r3, #18]
 8014076:	88fa      	ldrh	r2, [r7, #6]
 8014078:	429a      	cmp	r2, r3
 801407a:	d116      	bne.n	80140aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014084:	429a      	cmp	r2, r3
 8014086:	d00d      	beq.n	80140a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00a      	beq.n	80140a4 <udp_bind+0xb4>
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d006      	beq.n	80140a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014096:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014098:	2b00      	cmp	r3, #0
 801409a:	d003      	beq.n	80140a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d102      	bne.n	80140aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80140a4:	f06f 0307 	mvn.w	r3, #7
 80140a8:	e01c      	b.n	80140e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	617b      	str	r3, [r7, #20]
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1d9      	bne.n	801406a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d002      	beq.n	80140c2 <udp_bind+0xd2>
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	e000      	b.n	80140c4 <udp_bind+0xd4>
 80140c2:	2300      	movs	r3, #0
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	88fa      	ldrh	r2, [r7, #6]
 80140cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80140ce:	7cfb      	ldrb	r3, [r7, #19]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d106      	bne.n	80140e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80140d4:	4b09      	ldr	r3, [pc, #36]	; (80140fc <udp_bind+0x10c>)
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80140dc:	4a07      	ldr	r2, [pc, #28]	; (80140fc <udp_bind+0x10c>)
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80140e2:	2300      	movs	r3, #0
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3718      	adds	r7, #24
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	0801d6a4 	.word	0x0801d6a4
 80140f0:	0801ca6c 	.word	0x0801ca6c
 80140f4:	0801cd34 	.word	0x0801cd34
 80140f8:	0801cac0 	.word	0x0801cac0
 80140fc:	20011290 	.word	0x20011290

08014100 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	4613      	mov	r3, r2
 801410c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d109      	bne.n	8014128 <udp_connect+0x28>
 8014114:	4b2c      	ldr	r3, [pc, #176]	; (80141c8 <udp_connect+0xc8>)
 8014116:	f240 4235 	movw	r2, #1077	; 0x435
 801411a:	492c      	ldr	r1, [pc, #176]	; (80141cc <udp_connect+0xcc>)
 801411c:	482c      	ldr	r0, [pc, #176]	; (80141d0 <udp_connect+0xd0>)
 801411e:	f004 fe17 	bl	8018d50 <iprintf>
 8014122:	f06f 030f 	mvn.w	r3, #15
 8014126:	e04b      	b.n	80141c0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d109      	bne.n	8014142 <udp_connect+0x42>
 801412e:	4b26      	ldr	r3, [pc, #152]	; (80141c8 <udp_connect+0xc8>)
 8014130:	f240 4236 	movw	r2, #1078	; 0x436
 8014134:	4927      	ldr	r1, [pc, #156]	; (80141d4 <udp_connect+0xd4>)
 8014136:	4826      	ldr	r0, [pc, #152]	; (80141d0 <udp_connect+0xd0>)
 8014138:	f004 fe0a 	bl	8018d50 <iprintf>
 801413c:	f06f 030f 	mvn.w	r3, #15
 8014140:	e03e      	b.n	80141c0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	8a5b      	ldrh	r3, [r3, #18]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d10f      	bne.n	801416a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801414a:	68f9      	ldr	r1, [r7, #12]
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	8a5b      	ldrh	r3, [r3, #18]
 8014150:	461a      	mov	r2, r3
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f7ff ff4c 	bl	8013ff0 <udp_bind>
 8014158:	4603      	mov	r3, r0
 801415a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801415c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d002      	beq.n	801416a <udp_connect+0x6a>
      return err;
 8014164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014168:	e02a      	b.n	80141c0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d002      	beq.n	8014176 <udp_connect+0x76>
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	e000      	b.n	8014178 <udp_connect+0x78>
 8014176:	2300      	movs	r3, #0
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	88fa      	ldrh	r2, [r7, #6]
 8014180:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	7c1b      	ldrb	r3, [r3, #16]
 8014186:	f043 0304 	orr.w	r3, r3, #4
 801418a:	b2da      	uxtb	r2, r3
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014190:	4b11      	ldr	r3, [pc, #68]	; (80141d8 <udp_connect+0xd8>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	617b      	str	r3, [r7, #20]
 8014196:	e008      	b.n	80141aa <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014198:	68fa      	ldr	r2, [r7, #12]
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	429a      	cmp	r2, r3
 801419e:	d101      	bne.n	80141a4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80141a0:	2300      	movs	r3, #0
 80141a2:	e00d      	b.n	80141c0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	68db      	ldr	r3, [r3, #12]
 80141a8:	617b      	str	r3, [r7, #20]
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d1f3      	bne.n	8014198 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80141b0:	4b09      	ldr	r3, [pc, #36]	; (80141d8 <udp_connect+0xd8>)
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80141b8:	4a07      	ldr	r2, [pc, #28]	; (80141d8 <udp_connect+0xd8>)
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80141be:	2300      	movs	r3, #0
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3718      	adds	r7, #24
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	0801ca6c 	.word	0x0801ca6c
 80141cc:	0801cd4c 	.word	0x0801cd4c
 80141d0:	0801cac0 	.word	0x0801cac0
 80141d4:	0801cd68 	.word	0x0801cd68
 80141d8:	20011290 	.word	0x20011290

080141dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d107      	bne.n	80141fe <udp_recv+0x22>
 80141ee:	4b08      	ldr	r3, [pc, #32]	; (8014210 <udp_recv+0x34>)
 80141f0:	f240 428a 	movw	r2, #1162	; 0x48a
 80141f4:	4907      	ldr	r1, [pc, #28]	; (8014214 <udp_recv+0x38>)
 80141f6:	4808      	ldr	r0, [pc, #32]	; (8014218 <udp_recv+0x3c>)
 80141f8:	f004 fdaa 	bl	8018d50 <iprintf>
 80141fc:	e005      	b.n	801420a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	68ba      	ldr	r2, [r7, #8]
 8014202:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	687a      	ldr	r2, [r7, #4]
 8014208:	61da      	str	r2, [r3, #28]
}
 801420a:	3710      	adds	r7, #16
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	0801ca6c 	.word	0x0801ca6c
 8014214:	0801cda0 	.word	0x0801cda0
 8014218:	0801cac0 	.word	0x0801cac0

0801421c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d107      	bne.n	801423a <udp_remove+0x1e>
 801422a:	4b19      	ldr	r3, [pc, #100]	; (8014290 <udp_remove+0x74>)
 801422c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014230:	4918      	ldr	r1, [pc, #96]	; (8014294 <udp_remove+0x78>)
 8014232:	4819      	ldr	r0, [pc, #100]	; (8014298 <udp_remove+0x7c>)
 8014234:	f004 fd8c 	bl	8018d50 <iprintf>
 8014238:	e026      	b.n	8014288 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801423a:	4b18      	ldr	r3, [pc, #96]	; (801429c <udp_remove+0x80>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	429a      	cmp	r2, r3
 8014242:	d105      	bne.n	8014250 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014244:	4b15      	ldr	r3, [pc, #84]	; (801429c <udp_remove+0x80>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	4a14      	ldr	r2, [pc, #80]	; (801429c <udp_remove+0x80>)
 801424c:	6013      	str	r3, [r2, #0]
 801424e:	e017      	b.n	8014280 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014250:	4b12      	ldr	r3, [pc, #72]	; (801429c <udp_remove+0x80>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	60fb      	str	r3, [r7, #12]
 8014256:	e010      	b.n	801427a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d009      	beq.n	8014274 <udp_remove+0x58>
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	68db      	ldr	r3, [r3, #12]
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	429a      	cmp	r2, r3
 8014268:	d104      	bne.n	8014274 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	68da      	ldr	r2, [r3, #12]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	60da      	str	r2, [r3, #12]
        break;
 8014272:	e005      	b.n	8014280 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	60fb      	str	r3, [r7, #12]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d1eb      	bne.n	8014258 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014280:	6879      	ldr	r1, [r7, #4]
 8014282:	2000      	movs	r0, #0
 8014284:	f7f8 f9fe 	bl	800c684 <memp_free>
}
 8014288:	3710      	adds	r7, #16
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	0801ca6c 	.word	0x0801ca6c
 8014294:	0801cdb8 	.word	0x0801cdb8
 8014298:	0801cac0 	.word	0x0801cac0
 801429c:	20011290 	.word	0x20011290

080142a0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80142a6:	2000      	movs	r0, #0
 80142a8:	f7f8 f976 	bl	800c598 <memp_malloc>
 80142ac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d007      	beq.n	80142c4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80142b4:	2220      	movs	r2, #32
 80142b6:	2100      	movs	r1, #0
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f004 fd41 	bl	8018d40 <memset>
    pcb->ttl = UDP_TTL;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	22ff      	movs	r2, #255	; 0xff
 80142c2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80142c4:	687b      	ldr	r3, [r7, #4]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b084      	sub	sp, #16
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	4603      	mov	r3, r0
 80142d6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80142d8:	f7ff ffe2 	bl	80142a0 <udp_new>
 80142dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80142de:	68fb      	ldr	r3, [r7, #12]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3710      	adds	r7, #16
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b085      	sub	sp, #20
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d01e      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d01a      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d017      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d013      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801430e:	4b0d      	ldr	r3, [pc, #52]	; (8014344 <udp_netif_ip_addr_changed+0x5c>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	60fb      	str	r3, [r7, #12]
 8014314:	e00c      	b.n	8014330 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	429a      	cmp	r2, r3
 8014320:	d103      	bne.n	801432a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	60fb      	str	r3, [r7, #12]
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d1ef      	bne.n	8014316 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014336:	bf00      	nop
 8014338:	3714      	adds	r7, #20
 801433a:	46bd      	mov	sp, r7
 801433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014340:	4770      	bx	lr
 8014342:	bf00      	nop
 8014344:	20011290 	.word	0x20011290

08014348 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b082      	sub	sp, #8
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014350:	4915      	ldr	r1, [pc, #84]	; (80143a8 <etharp_free_entry+0x60>)
 8014352:	687a      	ldr	r2, [r7, #4]
 8014354:	4613      	mov	r3, r2
 8014356:	005b      	lsls	r3, r3, #1
 8014358:	4413      	add	r3, r2
 801435a:	00db      	lsls	r3, r3, #3
 801435c:	440b      	add	r3, r1
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d013      	beq.n	801438c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014364:	4910      	ldr	r1, [pc, #64]	; (80143a8 <etharp_free_entry+0x60>)
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	4613      	mov	r3, r2
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	4413      	add	r3, r2
 801436e:	00db      	lsls	r3, r3, #3
 8014370:	440b      	add	r3, r1
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	4618      	mov	r0, r3
 8014376:	f7f9 f829 	bl	800d3cc <pbuf_free>
    arp_table[i].q = NULL;
 801437a:	490b      	ldr	r1, [pc, #44]	; (80143a8 <etharp_free_entry+0x60>)
 801437c:	687a      	ldr	r2, [r7, #4]
 801437e:	4613      	mov	r3, r2
 8014380:	005b      	lsls	r3, r3, #1
 8014382:	4413      	add	r3, r2
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	440b      	add	r3, r1
 8014388:	2200      	movs	r2, #0
 801438a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801438c:	4906      	ldr	r1, [pc, #24]	; (80143a8 <etharp_free_entry+0x60>)
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	4613      	mov	r3, r2
 8014392:	005b      	lsls	r3, r3, #1
 8014394:	4413      	add	r3, r2
 8014396:	00db      	lsls	r3, r3, #3
 8014398:	440b      	add	r3, r1
 801439a:	3314      	adds	r3, #20
 801439c:	2200      	movs	r2, #0
 801439e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80143a0:	bf00      	nop
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	20011294 	.word	0x20011294

080143ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143b2:	2300      	movs	r3, #0
 80143b4:	607b      	str	r3, [r7, #4]
 80143b6:	e096      	b.n	80144e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80143b8:	494f      	ldr	r1, [pc, #316]	; (80144f8 <etharp_tmr+0x14c>)
 80143ba:	687a      	ldr	r2, [r7, #4]
 80143bc:	4613      	mov	r3, r2
 80143be:	005b      	lsls	r3, r3, #1
 80143c0:	4413      	add	r3, r2
 80143c2:	00db      	lsls	r3, r3, #3
 80143c4:	440b      	add	r3, r1
 80143c6:	3314      	adds	r3, #20
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80143cc:	78fb      	ldrb	r3, [r7, #3]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	f000 8086 	beq.w	80144e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80143d4:	4948      	ldr	r1, [pc, #288]	; (80144f8 <etharp_tmr+0x14c>)
 80143d6:	687a      	ldr	r2, [r7, #4]
 80143d8:	4613      	mov	r3, r2
 80143da:	005b      	lsls	r3, r3, #1
 80143dc:	4413      	add	r3, r2
 80143de:	00db      	lsls	r3, r3, #3
 80143e0:	440b      	add	r3, r1
 80143e2:	3312      	adds	r3, #18
 80143e4:	881b      	ldrh	r3, [r3, #0]
 80143e6:	3301      	adds	r3, #1
 80143e8:	b298      	uxth	r0, r3
 80143ea:	4943      	ldr	r1, [pc, #268]	; (80144f8 <etharp_tmr+0x14c>)
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	4613      	mov	r3, r2
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	4413      	add	r3, r2
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	440b      	add	r3, r1
 80143f8:	3312      	adds	r3, #18
 80143fa:	4602      	mov	r2, r0
 80143fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80143fe:	493e      	ldr	r1, [pc, #248]	; (80144f8 <etharp_tmr+0x14c>)
 8014400:	687a      	ldr	r2, [r7, #4]
 8014402:	4613      	mov	r3, r2
 8014404:	005b      	lsls	r3, r3, #1
 8014406:	4413      	add	r3, r2
 8014408:	00db      	lsls	r3, r3, #3
 801440a:	440b      	add	r3, r1
 801440c:	3312      	adds	r3, #18
 801440e:	881b      	ldrh	r3, [r3, #0]
 8014410:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014414:	d215      	bcs.n	8014442 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014416:	4938      	ldr	r1, [pc, #224]	; (80144f8 <etharp_tmr+0x14c>)
 8014418:	687a      	ldr	r2, [r7, #4]
 801441a:	4613      	mov	r3, r2
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	4413      	add	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	440b      	add	r3, r1
 8014424:	3314      	adds	r3, #20
 8014426:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014428:	2b01      	cmp	r3, #1
 801442a:	d10e      	bne.n	801444a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801442c:	4932      	ldr	r1, [pc, #200]	; (80144f8 <etharp_tmr+0x14c>)
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	4613      	mov	r3, r2
 8014432:	005b      	lsls	r3, r3, #1
 8014434:	4413      	add	r3, r2
 8014436:	00db      	lsls	r3, r3, #3
 8014438:	440b      	add	r3, r1
 801443a:	3312      	adds	r3, #18
 801443c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801443e:	2b04      	cmp	r3, #4
 8014440:	d903      	bls.n	801444a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f7ff ff80 	bl	8014348 <etharp_free_entry>
 8014448:	e04a      	b.n	80144e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801444a:	492b      	ldr	r1, [pc, #172]	; (80144f8 <etharp_tmr+0x14c>)
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	4613      	mov	r3, r2
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	4413      	add	r3, r2
 8014454:	00db      	lsls	r3, r3, #3
 8014456:	440b      	add	r3, r1
 8014458:	3314      	adds	r3, #20
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	2b03      	cmp	r3, #3
 801445e:	d10a      	bne.n	8014476 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014460:	4925      	ldr	r1, [pc, #148]	; (80144f8 <etharp_tmr+0x14c>)
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	4613      	mov	r3, r2
 8014466:	005b      	lsls	r3, r3, #1
 8014468:	4413      	add	r3, r2
 801446a:	00db      	lsls	r3, r3, #3
 801446c:	440b      	add	r3, r1
 801446e:	3314      	adds	r3, #20
 8014470:	2204      	movs	r2, #4
 8014472:	701a      	strb	r2, [r3, #0]
 8014474:	e034      	b.n	80144e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014476:	4920      	ldr	r1, [pc, #128]	; (80144f8 <etharp_tmr+0x14c>)
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	4613      	mov	r3, r2
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	4413      	add	r3, r2
 8014480:	00db      	lsls	r3, r3, #3
 8014482:	440b      	add	r3, r1
 8014484:	3314      	adds	r3, #20
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	2b04      	cmp	r3, #4
 801448a:	d10a      	bne.n	80144a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801448c:	491a      	ldr	r1, [pc, #104]	; (80144f8 <etharp_tmr+0x14c>)
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	4613      	mov	r3, r2
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	4413      	add	r3, r2
 8014496:	00db      	lsls	r3, r3, #3
 8014498:	440b      	add	r3, r1
 801449a:	3314      	adds	r3, #20
 801449c:	2202      	movs	r2, #2
 801449e:	701a      	strb	r2, [r3, #0]
 80144a0:	e01e      	b.n	80144e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80144a2:	4915      	ldr	r1, [pc, #84]	; (80144f8 <etharp_tmr+0x14c>)
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	4613      	mov	r3, r2
 80144a8:	005b      	lsls	r3, r3, #1
 80144aa:	4413      	add	r3, r2
 80144ac:	00db      	lsls	r3, r3, #3
 80144ae:	440b      	add	r3, r1
 80144b0:	3314      	adds	r3, #20
 80144b2:	781b      	ldrb	r3, [r3, #0]
 80144b4:	2b01      	cmp	r3, #1
 80144b6:	d113      	bne.n	80144e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80144b8:	490f      	ldr	r1, [pc, #60]	; (80144f8 <etharp_tmr+0x14c>)
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	4613      	mov	r3, r2
 80144be:	005b      	lsls	r3, r3, #1
 80144c0:	4413      	add	r3, r2
 80144c2:	00db      	lsls	r3, r3, #3
 80144c4:	440b      	add	r3, r1
 80144c6:	3308      	adds	r3, #8
 80144c8:	6818      	ldr	r0, [r3, #0]
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	4613      	mov	r3, r2
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	4413      	add	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	4a08      	ldr	r2, [pc, #32]	; (80144f8 <etharp_tmr+0x14c>)
 80144d6:	4413      	add	r3, r2
 80144d8:	3304      	adds	r3, #4
 80144da:	4619      	mov	r1, r3
 80144dc:	f000 fe6e 	bl	80151bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	3301      	adds	r3, #1
 80144e4:	607b      	str	r3, [r7, #4]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2b09      	cmp	r3, #9
 80144ea:	f77f af65 	ble.w	80143b8 <etharp_tmr+0xc>
      }
    }
  }
}
 80144ee:	bf00      	nop
 80144f0:	bf00      	nop
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	20011294 	.word	0x20011294

080144fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b08a      	sub	sp, #40	; 0x28
 8014500:	af00      	add	r7, sp, #0
 8014502:	60f8      	str	r0, [r7, #12]
 8014504:	460b      	mov	r3, r1
 8014506:	607a      	str	r2, [r7, #4]
 8014508:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801450a:	230a      	movs	r3, #10
 801450c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801450e:	230a      	movs	r3, #10
 8014510:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014512:	230a      	movs	r3, #10
 8014514:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014516:	2300      	movs	r3, #0
 8014518:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801451a:	230a      	movs	r3, #10
 801451c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801451e:	2300      	movs	r3, #0
 8014520:	83bb      	strh	r3, [r7, #28]
 8014522:	2300      	movs	r3, #0
 8014524:	837b      	strh	r3, [r7, #26]
 8014526:	2300      	movs	r3, #0
 8014528:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801452a:	2300      	movs	r3, #0
 801452c:	843b      	strh	r3, [r7, #32]
 801452e:	e0ae      	b.n	801468e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014530:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014534:	49a6      	ldr	r1, [pc, #664]	; (80147d0 <etharp_find_entry+0x2d4>)
 8014536:	4613      	mov	r3, r2
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	4413      	add	r3, r2
 801453c:	00db      	lsls	r3, r3, #3
 801453e:	440b      	add	r3, r1
 8014540:	3314      	adds	r3, #20
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014546:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801454a:	2b0a      	cmp	r3, #10
 801454c:	d105      	bne.n	801455a <etharp_find_entry+0x5e>
 801454e:	7dfb      	ldrb	r3, [r7, #23]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d102      	bne.n	801455a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014554:	8c3b      	ldrh	r3, [r7, #32]
 8014556:	847b      	strh	r3, [r7, #34]	; 0x22
 8014558:	e095      	b.n	8014686 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801455a:	7dfb      	ldrb	r3, [r7, #23]
 801455c:	2b00      	cmp	r3, #0
 801455e:	f000 8092 	beq.w	8014686 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014562:	7dfb      	ldrb	r3, [r7, #23]
 8014564:	2b01      	cmp	r3, #1
 8014566:	d009      	beq.n	801457c <etharp_find_entry+0x80>
 8014568:	7dfb      	ldrb	r3, [r7, #23]
 801456a:	2b01      	cmp	r3, #1
 801456c:	d806      	bhi.n	801457c <etharp_find_entry+0x80>
 801456e:	4b99      	ldr	r3, [pc, #612]	; (80147d4 <etharp_find_entry+0x2d8>)
 8014570:	f240 1223 	movw	r2, #291	; 0x123
 8014574:	4998      	ldr	r1, [pc, #608]	; (80147d8 <etharp_find_entry+0x2dc>)
 8014576:	4899      	ldr	r0, [pc, #612]	; (80147dc <etharp_find_entry+0x2e0>)
 8014578:	f004 fbea 	bl	8018d50 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d020      	beq.n	80145c4 <etharp_find_entry+0xc8>
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	6819      	ldr	r1, [r3, #0]
 8014586:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801458a:	4891      	ldr	r0, [pc, #580]	; (80147d0 <etharp_find_entry+0x2d4>)
 801458c:	4613      	mov	r3, r2
 801458e:	005b      	lsls	r3, r3, #1
 8014590:	4413      	add	r3, r2
 8014592:	00db      	lsls	r3, r3, #3
 8014594:	4403      	add	r3, r0
 8014596:	3304      	adds	r3, #4
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	4299      	cmp	r1, r3
 801459c:	d112      	bne.n	80145c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d00c      	beq.n	80145be <etharp_find_entry+0xc2>
 80145a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145a8:	4989      	ldr	r1, [pc, #548]	; (80147d0 <etharp_find_entry+0x2d4>)
 80145aa:	4613      	mov	r3, r2
 80145ac:	005b      	lsls	r3, r3, #1
 80145ae:	4413      	add	r3, r2
 80145b0:	00db      	lsls	r3, r3, #3
 80145b2:	440b      	add	r3, r1
 80145b4:	3308      	adds	r3, #8
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d102      	bne.n	80145c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80145be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145c2:	e100      	b.n	80147c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80145c4:	7dfb      	ldrb	r3, [r7, #23]
 80145c6:	2b01      	cmp	r3, #1
 80145c8:	d140      	bne.n	801464c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80145ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145ce:	4980      	ldr	r1, [pc, #512]	; (80147d0 <etharp_find_entry+0x2d4>)
 80145d0:	4613      	mov	r3, r2
 80145d2:	005b      	lsls	r3, r3, #1
 80145d4:	4413      	add	r3, r2
 80145d6:	00db      	lsls	r3, r3, #3
 80145d8:	440b      	add	r3, r1
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d01a      	beq.n	8014616 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80145e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145e4:	497a      	ldr	r1, [pc, #488]	; (80147d0 <etharp_find_entry+0x2d4>)
 80145e6:	4613      	mov	r3, r2
 80145e8:	005b      	lsls	r3, r3, #1
 80145ea:	4413      	add	r3, r2
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	440b      	add	r3, r1
 80145f0:	3312      	adds	r3, #18
 80145f2:	881b      	ldrh	r3, [r3, #0]
 80145f4:	8bba      	ldrh	r2, [r7, #28]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d845      	bhi.n	8014686 <etharp_find_entry+0x18a>
            old_queue = i;
 80145fa:	8c3b      	ldrh	r3, [r7, #32]
 80145fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80145fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014602:	4973      	ldr	r1, [pc, #460]	; (80147d0 <etharp_find_entry+0x2d4>)
 8014604:	4613      	mov	r3, r2
 8014606:	005b      	lsls	r3, r3, #1
 8014608:	4413      	add	r3, r2
 801460a:	00db      	lsls	r3, r3, #3
 801460c:	440b      	add	r3, r1
 801460e:	3312      	adds	r3, #18
 8014610:	881b      	ldrh	r3, [r3, #0]
 8014612:	83bb      	strh	r3, [r7, #28]
 8014614:	e037      	b.n	8014686 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014616:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801461a:	496d      	ldr	r1, [pc, #436]	; (80147d0 <etharp_find_entry+0x2d4>)
 801461c:	4613      	mov	r3, r2
 801461e:	005b      	lsls	r3, r3, #1
 8014620:	4413      	add	r3, r2
 8014622:	00db      	lsls	r3, r3, #3
 8014624:	440b      	add	r3, r1
 8014626:	3312      	adds	r3, #18
 8014628:	881b      	ldrh	r3, [r3, #0]
 801462a:	8b7a      	ldrh	r2, [r7, #26]
 801462c:	429a      	cmp	r2, r3
 801462e:	d82a      	bhi.n	8014686 <etharp_find_entry+0x18a>
            old_pending = i;
 8014630:	8c3b      	ldrh	r3, [r7, #32]
 8014632:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014634:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014638:	4965      	ldr	r1, [pc, #404]	; (80147d0 <etharp_find_entry+0x2d4>)
 801463a:	4613      	mov	r3, r2
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	440b      	add	r3, r1
 8014644:	3312      	adds	r3, #18
 8014646:	881b      	ldrh	r3, [r3, #0]
 8014648:	837b      	strh	r3, [r7, #26]
 801464a:	e01c      	b.n	8014686 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801464c:	7dfb      	ldrb	r3, [r7, #23]
 801464e:	2b01      	cmp	r3, #1
 8014650:	d919      	bls.n	8014686 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014652:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014656:	495e      	ldr	r1, [pc, #376]	; (80147d0 <etharp_find_entry+0x2d4>)
 8014658:	4613      	mov	r3, r2
 801465a:	005b      	lsls	r3, r3, #1
 801465c:	4413      	add	r3, r2
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	440b      	add	r3, r1
 8014662:	3312      	adds	r3, #18
 8014664:	881b      	ldrh	r3, [r3, #0]
 8014666:	8b3a      	ldrh	r2, [r7, #24]
 8014668:	429a      	cmp	r2, r3
 801466a:	d80c      	bhi.n	8014686 <etharp_find_entry+0x18a>
            old_stable = i;
 801466c:	8c3b      	ldrh	r3, [r7, #32]
 801466e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014674:	4956      	ldr	r1, [pc, #344]	; (80147d0 <etharp_find_entry+0x2d4>)
 8014676:	4613      	mov	r3, r2
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	4413      	add	r3, r2
 801467c:	00db      	lsls	r3, r3, #3
 801467e:	440b      	add	r3, r1
 8014680:	3312      	adds	r3, #18
 8014682:	881b      	ldrh	r3, [r3, #0]
 8014684:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014686:	8c3b      	ldrh	r3, [r7, #32]
 8014688:	3301      	adds	r3, #1
 801468a:	b29b      	uxth	r3, r3
 801468c:	843b      	strh	r3, [r7, #32]
 801468e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014692:	2b09      	cmp	r3, #9
 8014694:	f77f af4c 	ble.w	8014530 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014698:	7afb      	ldrb	r3, [r7, #11]
 801469a:	f003 0302 	and.w	r3, r3, #2
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d108      	bne.n	80146b4 <etharp_find_entry+0x1b8>
 80146a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80146a6:	2b0a      	cmp	r3, #10
 80146a8:	d107      	bne.n	80146ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80146aa:	7afb      	ldrb	r3, [r7, #11]
 80146ac:	f003 0301 	and.w	r3, r3, #1
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d102      	bne.n	80146ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80146b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146b8:	e085      	b.n	80147c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80146ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80146be:	2b09      	cmp	r3, #9
 80146c0:	dc02      	bgt.n	80146c8 <etharp_find_entry+0x1cc>
    i = empty;
 80146c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146c4:	843b      	strh	r3, [r7, #32]
 80146c6:	e039      	b.n	801473c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80146c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80146cc:	2b09      	cmp	r3, #9
 80146ce:	dc14      	bgt.n	80146fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80146d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80146d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146d8:	493d      	ldr	r1, [pc, #244]	; (80147d0 <etharp_find_entry+0x2d4>)
 80146da:	4613      	mov	r3, r2
 80146dc:	005b      	lsls	r3, r3, #1
 80146de:	4413      	add	r3, r2
 80146e0:	00db      	lsls	r3, r3, #3
 80146e2:	440b      	add	r3, r1
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d018      	beq.n	801471c <etharp_find_entry+0x220>
 80146ea:	4b3a      	ldr	r3, [pc, #232]	; (80147d4 <etharp_find_entry+0x2d8>)
 80146ec:	f240 126d 	movw	r2, #365	; 0x16d
 80146f0:	493b      	ldr	r1, [pc, #236]	; (80147e0 <etharp_find_entry+0x2e4>)
 80146f2:	483a      	ldr	r0, [pc, #232]	; (80147dc <etharp_find_entry+0x2e0>)
 80146f4:	f004 fb2c 	bl	8018d50 <iprintf>
 80146f8:	e010      	b.n	801471c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80146fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80146fe:	2b09      	cmp	r3, #9
 8014700:	dc02      	bgt.n	8014708 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014704:	843b      	strh	r3, [r7, #32]
 8014706:	e009      	b.n	801471c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014708:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801470c:	2b09      	cmp	r3, #9
 801470e:	dc02      	bgt.n	8014716 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014710:	8bfb      	ldrh	r3, [r7, #30]
 8014712:	843b      	strh	r3, [r7, #32]
 8014714:	e002      	b.n	801471c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801471a:	e054      	b.n	80147c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801471c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014720:	2b09      	cmp	r3, #9
 8014722:	dd06      	ble.n	8014732 <etharp_find_entry+0x236>
 8014724:	4b2b      	ldr	r3, [pc, #172]	; (80147d4 <etharp_find_entry+0x2d8>)
 8014726:	f240 127f 	movw	r2, #383	; 0x17f
 801472a:	492e      	ldr	r1, [pc, #184]	; (80147e4 <etharp_find_entry+0x2e8>)
 801472c:	482b      	ldr	r0, [pc, #172]	; (80147dc <etharp_find_entry+0x2e0>)
 801472e:	f004 fb0f 	bl	8018d50 <iprintf>
    etharp_free_entry(i);
 8014732:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014736:	4618      	mov	r0, r3
 8014738:	f7ff fe06 	bl	8014348 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801473c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014740:	2b09      	cmp	r3, #9
 8014742:	dd06      	ble.n	8014752 <etharp_find_entry+0x256>
 8014744:	4b23      	ldr	r3, [pc, #140]	; (80147d4 <etharp_find_entry+0x2d8>)
 8014746:	f240 1283 	movw	r2, #387	; 0x183
 801474a:	4926      	ldr	r1, [pc, #152]	; (80147e4 <etharp_find_entry+0x2e8>)
 801474c:	4823      	ldr	r0, [pc, #140]	; (80147dc <etharp_find_entry+0x2e0>)
 801474e:	f004 faff 	bl	8018d50 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014752:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014756:	491e      	ldr	r1, [pc, #120]	; (80147d0 <etharp_find_entry+0x2d4>)
 8014758:	4613      	mov	r3, r2
 801475a:	005b      	lsls	r3, r3, #1
 801475c:	4413      	add	r3, r2
 801475e:	00db      	lsls	r3, r3, #3
 8014760:	440b      	add	r3, r1
 8014762:	3314      	adds	r3, #20
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d006      	beq.n	8014778 <etharp_find_entry+0x27c>
 801476a:	4b1a      	ldr	r3, [pc, #104]	; (80147d4 <etharp_find_entry+0x2d8>)
 801476c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014770:	491d      	ldr	r1, [pc, #116]	; (80147e8 <etharp_find_entry+0x2ec>)
 8014772:	481a      	ldr	r0, [pc, #104]	; (80147dc <etharp_find_entry+0x2e0>)
 8014774:	f004 faec 	bl	8018d50 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d00b      	beq.n	8014796 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801477e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	6819      	ldr	r1, [r3, #0]
 8014786:	4812      	ldr	r0, [pc, #72]	; (80147d0 <etharp_find_entry+0x2d4>)
 8014788:	4613      	mov	r3, r2
 801478a:	005b      	lsls	r3, r3, #1
 801478c:	4413      	add	r3, r2
 801478e:	00db      	lsls	r3, r3, #3
 8014790:	4403      	add	r3, r0
 8014792:	3304      	adds	r3, #4
 8014794:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801479a:	490d      	ldr	r1, [pc, #52]	; (80147d0 <etharp_find_entry+0x2d4>)
 801479c:	4613      	mov	r3, r2
 801479e:	005b      	lsls	r3, r3, #1
 80147a0:	4413      	add	r3, r2
 80147a2:	00db      	lsls	r3, r3, #3
 80147a4:	440b      	add	r3, r1
 80147a6:	3312      	adds	r3, #18
 80147a8:	2200      	movs	r2, #0
 80147aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80147ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147b0:	4907      	ldr	r1, [pc, #28]	; (80147d0 <etharp_find_entry+0x2d4>)
 80147b2:	4613      	mov	r3, r2
 80147b4:	005b      	lsls	r3, r3, #1
 80147b6:	4413      	add	r3, r2
 80147b8:	00db      	lsls	r3, r3, #3
 80147ba:	440b      	add	r3, r1
 80147bc:	3308      	adds	r3, #8
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80147c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3728      	adds	r7, #40	; 0x28
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	20011294 	.word	0x20011294
 80147d4:	0801cdd0 	.word	0x0801cdd0
 80147d8:	0801ce08 	.word	0x0801ce08
 80147dc:	0801ce48 	.word	0x0801ce48
 80147e0:	0801ce70 	.word	0x0801ce70
 80147e4:	0801ce88 	.word	0x0801ce88
 80147e8:	0801ce9c 	.word	0x0801ce9c

080147ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b088      	sub	sp, #32
 80147f0:	af02      	add	r7, sp, #8
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
 80147f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014800:	2b06      	cmp	r3, #6
 8014802:	d006      	beq.n	8014812 <etharp_update_arp_entry+0x26>
 8014804:	4b48      	ldr	r3, [pc, #288]	; (8014928 <etharp_update_arp_entry+0x13c>)
 8014806:	f240 12a9 	movw	r2, #425	; 0x1a9
 801480a:	4948      	ldr	r1, [pc, #288]	; (801492c <etharp_update_arp_entry+0x140>)
 801480c:	4848      	ldr	r0, [pc, #288]	; (8014930 <etharp_update_arp_entry+0x144>)
 801480e:	f004 fa9f 	bl	8018d50 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d012      	beq.n	801483e <etharp_update_arp_entry+0x52>
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00e      	beq.n	801483e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	68f9      	ldr	r1, [r7, #12]
 8014826:	4618      	mov	r0, r3
 8014828:	f001 f8fe 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 801482c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801482e:	2b00      	cmp	r3, #0
 8014830:	d105      	bne.n	801483e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801483a:	2be0      	cmp	r3, #224	; 0xe0
 801483c:	d102      	bne.n	8014844 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801483e:	f06f 030f 	mvn.w	r3, #15
 8014842:	e06c      	b.n	801491e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014844:	78fb      	ldrb	r3, [r7, #3]
 8014846:	68fa      	ldr	r2, [r7, #12]
 8014848:	4619      	mov	r1, r3
 801484a:	68b8      	ldr	r0, [r7, #8]
 801484c:	f7ff fe56 	bl	80144fc <etharp_find_entry>
 8014850:	4603      	mov	r3, r0
 8014852:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014854:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014858:	2b00      	cmp	r3, #0
 801485a:	da02      	bge.n	8014862 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801485c:	8afb      	ldrh	r3, [r7, #22]
 801485e:	b25b      	sxtb	r3, r3
 8014860:	e05d      	b.n	801491e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014862:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014866:	4933      	ldr	r1, [pc, #204]	; (8014934 <etharp_update_arp_entry+0x148>)
 8014868:	4613      	mov	r3, r2
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	4413      	add	r3, r2
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	440b      	add	r3, r1
 8014872:	3314      	adds	r3, #20
 8014874:	2202      	movs	r2, #2
 8014876:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014878:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801487c:	492d      	ldr	r1, [pc, #180]	; (8014934 <etharp_update_arp_entry+0x148>)
 801487e:	4613      	mov	r3, r2
 8014880:	005b      	lsls	r3, r3, #1
 8014882:	4413      	add	r3, r2
 8014884:	00db      	lsls	r3, r3, #3
 8014886:	440b      	add	r3, r1
 8014888:	3308      	adds	r3, #8
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801488e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014892:	4613      	mov	r3, r2
 8014894:	005b      	lsls	r3, r3, #1
 8014896:	4413      	add	r3, r2
 8014898:	00db      	lsls	r3, r3, #3
 801489a:	3308      	adds	r3, #8
 801489c:	4a25      	ldr	r2, [pc, #148]	; (8014934 <etharp_update_arp_entry+0x148>)
 801489e:	4413      	add	r3, r2
 80148a0:	3304      	adds	r3, #4
 80148a2:	2206      	movs	r2, #6
 80148a4:	6879      	ldr	r1, [r7, #4]
 80148a6:	4618      	mov	r0, r3
 80148a8:	f004 fa3c 	bl	8018d24 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80148ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148b0:	4920      	ldr	r1, [pc, #128]	; (8014934 <etharp_update_arp_entry+0x148>)
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	440b      	add	r3, r1
 80148bc:	3312      	adds	r3, #18
 80148be:	2200      	movs	r2, #0
 80148c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80148c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148c6:	491b      	ldr	r1, [pc, #108]	; (8014934 <etharp_update_arp_entry+0x148>)
 80148c8:	4613      	mov	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	4413      	add	r3, r2
 80148ce:	00db      	lsls	r3, r3, #3
 80148d0:	440b      	add	r3, r1
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d021      	beq.n	801491c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80148d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148dc:	4915      	ldr	r1, [pc, #84]	; (8014934 <etharp_update_arp_entry+0x148>)
 80148de:	4613      	mov	r3, r2
 80148e0:	005b      	lsls	r3, r3, #1
 80148e2:	4413      	add	r3, r2
 80148e4:	00db      	lsls	r3, r3, #3
 80148e6:	440b      	add	r3, r1
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80148ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148f0:	4910      	ldr	r1, [pc, #64]	; (8014934 <etharp_update_arp_entry+0x148>)
 80148f2:	4613      	mov	r3, r2
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	4413      	add	r3, r2
 80148f8:	00db      	lsls	r3, r3, #3
 80148fa:	440b      	add	r3, r1
 80148fc:	2200      	movs	r2, #0
 80148fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801490a:	9300      	str	r3, [sp, #0]
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6939      	ldr	r1, [r7, #16]
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f002 f8c1 	bl	8016a98 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014916:	6938      	ldr	r0, [r7, #16]
 8014918:	f7f8 fd58 	bl	800d3cc <pbuf_free>
  }
  return ERR_OK;
 801491c:	2300      	movs	r3, #0
}
 801491e:	4618      	mov	r0, r3
 8014920:	3718      	adds	r7, #24
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	0801cdd0 	.word	0x0801cdd0
 801492c:	0801cec8 	.word	0x0801cec8
 8014930:	0801ce48 	.word	0x0801ce48
 8014934:	20011294 	.word	0x20011294

08014938 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014940:	2300      	movs	r3, #0
 8014942:	60fb      	str	r3, [r7, #12]
 8014944:	e01e      	b.n	8014984 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014946:	4913      	ldr	r1, [pc, #76]	; (8014994 <etharp_cleanup_netif+0x5c>)
 8014948:	68fa      	ldr	r2, [r7, #12]
 801494a:	4613      	mov	r3, r2
 801494c:	005b      	lsls	r3, r3, #1
 801494e:	4413      	add	r3, r2
 8014950:	00db      	lsls	r3, r3, #3
 8014952:	440b      	add	r3, r1
 8014954:	3314      	adds	r3, #20
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801495a:	7afb      	ldrb	r3, [r7, #11]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00e      	beq.n	801497e <etharp_cleanup_netif+0x46>
 8014960:	490c      	ldr	r1, [pc, #48]	; (8014994 <etharp_cleanup_netif+0x5c>)
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	4613      	mov	r3, r2
 8014966:	005b      	lsls	r3, r3, #1
 8014968:	4413      	add	r3, r2
 801496a:	00db      	lsls	r3, r3, #3
 801496c:	440b      	add	r3, r1
 801496e:	3308      	adds	r3, #8
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	429a      	cmp	r2, r3
 8014976:	d102      	bne.n	801497e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014978:	68f8      	ldr	r0, [r7, #12]
 801497a:	f7ff fce5 	bl	8014348 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	3301      	adds	r3, #1
 8014982:	60fb      	str	r3, [r7, #12]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	2b09      	cmp	r3, #9
 8014988:	dddd      	ble.n	8014946 <etharp_cleanup_netif+0xe>
    }
  }
}
 801498a:	bf00      	nop
 801498c:	bf00      	nop
 801498e:	3710      	adds	r7, #16
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	20011294 	.word	0x20011294

08014998 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014998:	b5b0      	push	{r4, r5, r7, lr}
 801499a:	b08a      	sub	sp, #40	; 0x28
 801499c:	af04      	add	r7, sp, #16
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d107      	bne.n	80149b8 <etharp_input+0x20>
 80149a8:	4b3d      	ldr	r3, [pc, #244]	; (8014aa0 <etharp_input+0x108>)
 80149aa:	f240 228a 	movw	r2, #650	; 0x28a
 80149ae:	493d      	ldr	r1, [pc, #244]	; (8014aa4 <etharp_input+0x10c>)
 80149b0:	483d      	ldr	r0, [pc, #244]	; (8014aa8 <etharp_input+0x110>)
 80149b2:	f004 f9cd 	bl	8018d50 <iprintf>
 80149b6:	e06f      	b.n	8014a98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	685b      	ldr	r3, [r3, #4]
 80149bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	881b      	ldrh	r3, [r3, #0]
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149c8:	d10c      	bne.n	80149e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149ce:	2b06      	cmp	r3, #6
 80149d0:	d108      	bne.n	80149e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149d6:	2b04      	cmp	r3, #4
 80149d8:	d104      	bne.n	80149e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	885b      	ldrh	r3, [r3, #2]
 80149de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80149e0:	2b08      	cmp	r3, #8
 80149e2:	d003      	beq.n	80149ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f7f8 fcf1 	bl	800d3cc <pbuf_free>
    return;
 80149ea:	e055      	b.n	8014a98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80149ec:	693b      	ldr	r3, [r7, #16]
 80149ee:	330e      	adds	r3, #14
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	3318      	adds	r3, #24
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	3304      	adds	r3, #4
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d102      	bne.n	8014a0c <etharp_input+0x74>
    for_us = 0;
 8014a06:	2300      	movs	r3, #0
 8014a08:	75fb      	strb	r3, [r7, #23]
 8014a0a:	e009      	b.n	8014a20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014a0c:	68ba      	ldr	r2, [r7, #8]
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	3304      	adds	r3, #4
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	429a      	cmp	r2, r3
 8014a16:	bf0c      	ite	eq
 8014a18:	2301      	moveq	r3, #1
 8014a1a:	2300      	movne	r3, #0
 8014a1c:	b2db      	uxtb	r3, r3
 8014a1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	f103 0208 	add.w	r2, r3, #8
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d001      	beq.n	8014a30 <etharp_input+0x98>
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	e000      	b.n	8014a32 <etharp_input+0x9a>
 8014a30:	2302      	movs	r3, #2
 8014a32:	f107 010c 	add.w	r1, r7, #12
 8014a36:	6838      	ldr	r0, [r7, #0]
 8014a38:	f7ff fed8 	bl	80147ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014a3c:	693b      	ldr	r3, [r7, #16]
 8014a3e:	88db      	ldrh	r3, [r3, #6]
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a46:	d003      	beq.n	8014a50 <etharp_input+0xb8>
 8014a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a4c:	d01e      	beq.n	8014a8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014a4e:	e020      	b.n	8014a92 <etharp_input+0xfa>
      if (for_us) {
 8014a50:	7dfb      	ldrb	r3, [r7, #23]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d01c      	beq.n	8014a90 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014a6c:	693a      	ldr	r2, [r7, #16]
 8014a6e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014a70:	2102      	movs	r1, #2
 8014a72:	9103      	str	r1, [sp, #12]
 8014a74:	f107 010c 	add.w	r1, r7, #12
 8014a78:	9102      	str	r1, [sp, #8]
 8014a7a:	9201      	str	r2, [sp, #4]
 8014a7c:	9300      	str	r3, [sp, #0]
 8014a7e:	462b      	mov	r3, r5
 8014a80:	4622      	mov	r2, r4
 8014a82:	4601      	mov	r1, r0
 8014a84:	6838      	ldr	r0, [r7, #0]
 8014a86:	f000 faeb 	bl	8015060 <etharp_raw>
      break;
 8014a8a:	e001      	b.n	8014a90 <etharp_input+0xf8>
      break;
 8014a8c:	bf00      	nop
 8014a8e:	e000      	b.n	8014a92 <etharp_input+0xfa>
      break;
 8014a90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7f8 fc9a 	bl	800d3cc <pbuf_free>
}
 8014a98:	3718      	adds	r7, #24
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	0801cdd0 	.word	0x0801cdd0
 8014aa4:	0801cf20 	.word	0x0801cf20
 8014aa8:	0801ce48 	.word	0x0801ce48

08014aac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b086      	sub	sp, #24
 8014ab0:	af02      	add	r7, sp, #8
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014aba:	79fa      	ldrb	r2, [r7, #7]
 8014abc:	4944      	ldr	r1, [pc, #272]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014abe:	4613      	mov	r3, r2
 8014ac0:	005b      	lsls	r3, r3, #1
 8014ac2:	4413      	add	r3, r2
 8014ac4:	00db      	lsls	r3, r3, #3
 8014ac6:	440b      	add	r3, r1
 8014ac8:	3314      	adds	r3, #20
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d806      	bhi.n	8014ade <etharp_output_to_arp_index+0x32>
 8014ad0:	4b40      	ldr	r3, [pc, #256]	; (8014bd4 <etharp_output_to_arp_index+0x128>)
 8014ad2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014ad6:	4940      	ldr	r1, [pc, #256]	; (8014bd8 <etharp_output_to_arp_index+0x12c>)
 8014ad8:	4840      	ldr	r0, [pc, #256]	; (8014bdc <etharp_output_to_arp_index+0x130>)
 8014ada:	f004 f939 	bl	8018d50 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014ade:	79fa      	ldrb	r2, [r7, #7]
 8014ae0:	493b      	ldr	r1, [pc, #236]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	005b      	lsls	r3, r3, #1
 8014ae6:	4413      	add	r3, r2
 8014ae8:	00db      	lsls	r3, r3, #3
 8014aea:	440b      	add	r3, r1
 8014aec:	3314      	adds	r3, #20
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	2b02      	cmp	r3, #2
 8014af2:	d153      	bne.n	8014b9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014af4:	79fa      	ldrb	r2, [r7, #7]
 8014af6:	4936      	ldr	r1, [pc, #216]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014af8:	4613      	mov	r3, r2
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	4413      	add	r3, r2
 8014afe:	00db      	lsls	r3, r3, #3
 8014b00:	440b      	add	r3, r1
 8014b02:	3312      	adds	r3, #18
 8014b04:	881b      	ldrh	r3, [r3, #0]
 8014b06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014b0a:	d919      	bls.n	8014b40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014b0c:	79fa      	ldrb	r2, [r7, #7]
 8014b0e:	4613      	mov	r3, r2
 8014b10:	005b      	lsls	r3, r3, #1
 8014b12:	4413      	add	r3, r2
 8014b14:	00db      	lsls	r3, r3, #3
 8014b16:	4a2e      	ldr	r2, [pc, #184]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014b18:	4413      	add	r3, r2
 8014b1a:	3304      	adds	r3, #4
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	68f8      	ldr	r0, [r7, #12]
 8014b20:	f000 fb4c 	bl	80151bc <etharp_request>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d138      	bne.n	8014b9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b2a:	79fa      	ldrb	r2, [r7, #7]
 8014b2c:	4928      	ldr	r1, [pc, #160]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	00db      	lsls	r3, r3, #3
 8014b36:	440b      	add	r3, r1
 8014b38:	3314      	adds	r3, #20
 8014b3a:	2203      	movs	r2, #3
 8014b3c:	701a      	strb	r2, [r3, #0]
 8014b3e:	e02d      	b.n	8014b9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014b40:	79fa      	ldrb	r2, [r7, #7]
 8014b42:	4923      	ldr	r1, [pc, #140]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014b44:	4613      	mov	r3, r2
 8014b46:	005b      	lsls	r3, r3, #1
 8014b48:	4413      	add	r3, r2
 8014b4a:	00db      	lsls	r3, r3, #3
 8014b4c:	440b      	add	r3, r1
 8014b4e:	3312      	adds	r3, #18
 8014b50:	881b      	ldrh	r3, [r3, #0]
 8014b52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014b56:	d321      	bcc.n	8014b9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014b58:	79fa      	ldrb	r2, [r7, #7]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	005b      	lsls	r3, r3, #1
 8014b5e:	4413      	add	r3, r2
 8014b60:	00db      	lsls	r3, r3, #3
 8014b62:	4a1b      	ldr	r2, [pc, #108]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014b64:	4413      	add	r3, r2
 8014b66:	1d19      	adds	r1, r3, #4
 8014b68:	79fa      	ldrb	r2, [r7, #7]
 8014b6a:	4613      	mov	r3, r2
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	4413      	add	r3, r2
 8014b70:	00db      	lsls	r3, r3, #3
 8014b72:	3308      	adds	r3, #8
 8014b74:	4a16      	ldr	r2, [pc, #88]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014b76:	4413      	add	r3, r2
 8014b78:	3304      	adds	r3, #4
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f000 fafb 	bl	8015178 <etharp_request_dst>
 8014b82:	4603      	mov	r3, r0
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d109      	bne.n	8014b9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b88:	79fa      	ldrb	r2, [r7, #7]
 8014b8a:	4911      	ldr	r1, [pc, #68]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	005b      	lsls	r3, r3, #1
 8014b90:	4413      	add	r3, r2
 8014b92:	00db      	lsls	r3, r3, #3
 8014b94:	440b      	add	r3, r1
 8014b96:	3314      	adds	r3, #20
 8014b98:	2203      	movs	r2, #3
 8014b9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014ba2:	79fa      	ldrb	r2, [r7, #7]
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	005b      	lsls	r3, r3, #1
 8014ba8:	4413      	add	r3, r2
 8014baa:	00db      	lsls	r3, r3, #3
 8014bac:	3308      	adds	r3, #8
 8014bae:	4a08      	ldr	r2, [pc, #32]	; (8014bd0 <etharp_output_to_arp_index+0x124>)
 8014bb0:	4413      	add	r3, r2
 8014bb2:	3304      	adds	r3, #4
 8014bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014bb8:	9200      	str	r2, [sp, #0]
 8014bba:	460a      	mov	r2, r1
 8014bbc:	68b9      	ldr	r1, [r7, #8]
 8014bbe:	68f8      	ldr	r0, [r7, #12]
 8014bc0:	f001 ff6a 	bl	8016a98 <ethernet_output>
 8014bc4:	4603      	mov	r3, r0
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3710      	adds	r7, #16
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}
 8014bce:	bf00      	nop
 8014bd0:	20011294 	.word	0x20011294
 8014bd4:	0801cdd0 	.word	0x0801cdd0
 8014bd8:	0801cf40 	.word	0x0801cf40
 8014bdc:	0801ce48 	.word	0x0801ce48

08014be0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b08a      	sub	sp, #40	; 0x28
 8014be4:	af02      	add	r7, sp, #8
 8014be6:	60f8      	str	r0, [r7, #12]
 8014be8:	60b9      	str	r1, [r7, #8]
 8014bea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d106      	bne.n	8014c04 <etharp_output+0x24>
 8014bf6:	4b73      	ldr	r3, [pc, #460]	; (8014dc4 <etharp_output+0x1e4>)
 8014bf8:	f240 321e 	movw	r2, #798	; 0x31e
 8014bfc:	4972      	ldr	r1, [pc, #456]	; (8014dc8 <etharp_output+0x1e8>)
 8014bfe:	4873      	ldr	r0, [pc, #460]	; (8014dcc <etharp_output+0x1ec>)
 8014c00:	f004 f8a6 	bl	8018d50 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d106      	bne.n	8014c18 <etharp_output+0x38>
 8014c0a:	4b6e      	ldr	r3, [pc, #440]	; (8014dc4 <etharp_output+0x1e4>)
 8014c0c:	f240 321f 	movw	r2, #799	; 0x31f
 8014c10:	496f      	ldr	r1, [pc, #444]	; (8014dd0 <etharp_output+0x1f0>)
 8014c12:	486e      	ldr	r0, [pc, #440]	; (8014dcc <etharp_output+0x1ec>)
 8014c14:	f004 f89c 	bl	8018d50 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d106      	bne.n	8014c2c <etharp_output+0x4c>
 8014c1e:	4b69      	ldr	r3, [pc, #420]	; (8014dc4 <etharp_output+0x1e4>)
 8014c20:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014c24:	496b      	ldr	r1, [pc, #428]	; (8014dd4 <etharp_output+0x1f4>)
 8014c26:	4869      	ldr	r0, [pc, #420]	; (8014dcc <etharp_output+0x1ec>)
 8014c28:	f004 f892 	bl	8018d50 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	68f9      	ldr	r1, [r7, #12]
 8014c32:	4618      	mov	r0, r3
 8014c34:	f000 fef8 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d002      	beq.n	8014c44 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014c3e:	4b66      	ldr	r3, [pc, #408]	; (8014dd8 <etharp_output+0x1f8>)
 8014c40:	61fb      	str	r3, [r7, #28]
 8014c42:	e0af      	b.n	8014da4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c4c:	2be0      	cmp	r3, #224	; 0xe0
 8014c4e:	d118      	bne.n	8014c82 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014c50:	2301      	movs	r3, #1
 8014c52:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014c54:	2300      	movs	r3, #0
 8014c56:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014c58:	235e      	movs	r3, #94	; 0x5e
 8014c5a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c66:	b2db      	uxtb	r3, r3
 8014c68:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	3302      	adds	r3, #2
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	3303      	adds	r3, #3
 8014c76:	781b      	ldrb	r3, [r3, #0]
 8014c78:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014c7a:	f107 0310 	add.w	r3, r7, #16
 8014c7e:	61fb      	str	r3, [r7, #28]
 8014c80:	e090      	b.n	8014da4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	3304      	adds	r3, #4
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	405a      	eors	r2, r3
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	3308      	adds	r3, #8
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	4013      	ands	r3, r2
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d012      	beq.n	8014cc0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ca0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014ca4:	4293      	cmp	r3, r2
 8014ca6:	d00b      	beq.n	8014cc0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	330c      	adds	r3, #12
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d003      	beq.n	8014cba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	330c      	adds	r3, #12
 8014cb6:	61bb      	str	r3, [r7, #24]
 8014cb8:	e002      	b.n	8014cc0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014cba:	f06f 0303 	mvn.w	r3, #3
 8014cbe:	e07d      	b.n	8014dbc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014cc0:	4b46      	ldr	r3, [pc, #280]	; (8014ddc <etharp_output+0x1fc>)
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	4a46      	ldr	r2, [pc, #280]	; (8014de0 <etharp_output+0x200>)
 8014cc8:	460b      	mov	r3, r1
 8014cca:	005b      	lsls	r3, r3, #1
 8014ccc:	440b      	add	r3, r1
 8014cce:	00db      	lsls	r3, r3, #3
 8014cd0:	4413      	add	r3, r2
 8014cd2:	3314      	adds	r3, #20
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d925      	bls.n	8014d26 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014cda:	4b40      	ldr	r3, [pc, #256]	; (8014ddc <etharp_output+0x1fc>)
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	4619      	mov	r1, r3
 8014ce0:	4a3f      	ldr	r2, [pc, #252]	; (8014de0 <etharp_output+0x200>)
 8014ce2:	460b      	mov	r3, r1
 8014ce4:	005b      	lsls	r3, r3, #1
 8014ce6:	440b      	add	r3, r1
 8014ce8:	00db      	lsls	r3, r3, #3
 8014cea:	4413      	add	r3, r2
 8014cec:	3308      	adds	r3, #8
 8014cee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014cf0:	68fa      	ldr	r2, [r7, #12]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d117      	bne.n	8014d26 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014cf6:	69bb      	ldr	r3, [r7, #24]
 8014cf8:	681a      	ldr	r2, [r3, #0]
 8014cfa:	4b38      	ldr	r3, [pc, #224]	; (8014ddc <etharp_output+0x1fc>)
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	4618      	mov	r0, r3
 8014d00:	4937      	ldr	r1, [pc, #220]	; (8014de0 <etharp_output+0x200>)
 8014d02:	4603      	mov	r3, r0
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	4403      	add	r3, r0
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	440b      	add	r3, r1
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d108      	bne.n	8014d26 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014d14:	4b31      	ldr	r3, [pc, #196]	; (8014ddc <etharp_output+0x1fc>)
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	461a      	mov	r2, r3
 8014d1a:	68b9      	ldr	r1, [r7, #8]
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	f7ff fec5 	bl	8014aac <etharp_output_to_arp_index>
 8014d22:	4603      	mov	r3, r0
 8014d24:	e04a      	b.n	8014dbc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d26:	2300      	movs	r3, #0
 8014d28:	75fb      	strb	r3, [r7, #23]
 8014d2a:	e031      	b.n	8014d90 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d2c:	7dfa      	ldrb	r2, [r7, #23]
 8014d2e:	492c      	ldr	r1, [pc, #176]	; (8014de0 <etharp_output+0x200>)
 8014d30:	4613      	mov	r3, r2
 8014d32:	005b      	lsls	r3, r3, #1
 8014d34:	4413      	add	r3, r2
 8014d36:	00db      	lsls	r3, r3, #3
 8014d38:	440b      	add	r3, r1
 8014d3a:	3314      	adds	r3, #20
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d923      	bls.n	8014d8a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014d42:	7dfa      	ldrb	r2, [r7, #23]
 8014d44:	4926      	ldr	r1, [pc, #152]	; (8014de0 <etharp_output+0x200>)
 8014d46:	4613      	mov	r3, r2
 8014d48:	005b      	lsls	r3, r3, #1
 8014d4a:	4413      	add	r3, r2
 8014d4c:	00db      	lsls	r3, r3, #3
 8014d4e:	440b      	add	r3, r1
 8014d50:	3308      	adds	r3, #8
 8014d52:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d54:	68fa      	ldr	r2, [r7, #12]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d117      	bne.n	8014d8a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014d5a:	69bb      	ldr	r3, [r7, #24]
 8014d5c:	6819      	ldr	r1, [r3, #0]
 8014d5e:	7dfa      	ldrb	r2, [r7, #23]
 8014d60:	481f      	ldr	r0, [pc, #124]	; (8014de0 <etharp_output+0x200>)
 8014d62:	4613      	mov	r3, r2
 8014d64:	005b      	lsls	r3, r3, #1
 8014d66:	4413      	add	r3, r2
 8014d68:	00db      	lsls	r3, r3, #3
 8014d6a:	4403      	add	r3, r0
 8014d6c:	3304      	adds	r3, #4
 8014d6e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014d70:	4299      	cmp	r1, r3
 8014d72:	d10a      	bne.n	8014d8a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014d74:	4a19      	ldr	r2, [pc, #100]	; (8014ddc <etharp_output+0x1fc>)
 8014d76:	7dfb      	ldrb	r3, [r7, #23]
 8014d78:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014d7a:	7dfb      	ldrb	r3, [r7, #23]
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	68b9      	ldr	r1, [r7, #8]
 8014d80:	68f8      	ldr	r0, [r7, #12]
 8014d82:	f7ff fe93 	bl	8014aac <etharp_output_to_arp_index>
 8014d86:	4603      	mov	r3, r0
 8014d88:	e018      	b.n	8014dbc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d8a:	7dfb      	ldrb	r3, [r7, #23]
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	75fb      	strb	r3, [r7, #23]
 8014d90:	7dfb      	ldrb	r3, [r7, #23]
 8014d92:	2b09      	cmp	r3, #9
 8014d94:	d9ca      	bls.n	8014d2c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014d96:	68ba      	ldr	r2, [r7, #8]
 8014d98:	69b9      	ldr	r1, [r7, #24]
 8014d9a:	68f8      	ldr	r0, [r7, #12]
 8014d9c:	f000 f822 	bl	8014de4 <etharp_query>
 8014da0:	4603      	mov	r3, r0
 8014da2:	e00b      	b.n	8014dbc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	68b9      	ldr	r1, [r7, #8]
 8014db4:	68f8      	ldr	r0, [r7, #12]
 8014db6:	f001 fe6f 	bl	8016a98 <ethernet_output>
 8014dba:	4603      	mov	r3, r0
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3720      	adds	r7, #32
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	0801cdd0 	.word	0x0801cdd0
 8014dc8:	0801cf20 	.word	0x0801cf20
 8014dcc:	0801ce48 	.word	0x0801ce48
 8014dd0:	0801cf70 	.word	0x0801cf70
 8014dd4:	0801cf10 	.word	0x0801cf10
 8014dd8:	0801d6a8 	.word	0x0801d6a8
 8014ddc:	20011384 	.word	0x20011384
 8014de0:	20011294 	.word	0x20011294

08014de4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b08c      	sub	sp, #48	; 0x30
 8014de8:	af02      	add	r7, sp, #8
 8014dea:	60f8      	str	r0, [r7, #12]
 8014dec:	60b9      	str	r1, [r7, #8]
 8014dee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	3326      	adds	r3, #38	; 0x26
 8014df4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014df6:	23ff      	movs	r3, #255	; 0xff
 8014df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	68f9      	ldr	r1, [r7, #12]
 8014e06:	4618      	mov	r0, r3
 8014e08:	f000 fe0e 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d10c      	bne.n	8014e2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e1a:	2be0      	cmp	r3, #224	; 0xe0
 8014e1c:	d006      	beq.n	8014e2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d003      	beq.n	8014e2c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d102      	bne.n	8014e32 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e2c:	f06f 030f 	mvn.w	r3, #15
 8014e30:	e101      	b.n	8015036 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014e32:	68fa      	ldr	r2, [r7, #12]
 8014e34:	2101      	movs	r1, #1
 8014e36:	68b8      	ldr	r0, [r7, #8]
 8014e38:	f7ff fb60 	bl	80144fc <etharp_find_entry>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014e40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	da02      	bge.n	8014e4e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014e48:	8a7b      	ldrh	r3, [r7, #18]
 8014e4a:	b25b      	sxtb	r3, r3
 8014e4c:	e0f3      	b.n	8015036 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014e4e:	8a7b      	ldrh	r3, [r7, #18]
 8014e50:	2b7e      	cmp	r3, #126	; 0x7e
 8014e52:	d906      	bls.n	8014e62 <etharp_query+0x7e>
 8014e54:	4b7a      	ldr	r3, [pc, #488]	; (8015040 <etharp_query+0x25c>)
 8014e56:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014e5a:	497a      	ldr	r1, [pc, #488]	; (8015044 <etharp_query+0x260>)
 8014e5c:	487a      	ldr	r0, [pc, #488]	; (8015048 <etharp_query+0x264>)
 8014e5e:	f003 ff77 	bl	8018d50 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014e62:	8a7b      	ldrh	r3, [r7, #18]
 8014e64:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014e66:	7c7a      	ldrb	r2, [r7, #17]
 8014e68:	4978      	ldr	r1, [pc, #480]	; (801504c <etharp_query+0x268>)
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	005b      	lsls	r3, r3, #1
 8014e6e:	4413      	add	r3, r2
 8014e70:	00db      	lsls	r3, r3, #3
 8014e72:	440b      	add	r3, r1
 8014e74:	3314      	adds	r3, #20
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d115      	bne.n	8014ea8 <etharp_query+0xc4>
    is_new_entry = 1;
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014e80:	7c7a      	ldrb	r2, [r7, #17]
 8014e82:	4972      	ldr	r1, [pc, #456]	; (801504c <etharp_query+0x268>)
 8014e84:	4613      	mov	r3, r2
 8014e86:	005b      	lsls	r3, r3, #1
 8014e88:	4413      	add	r3, r2
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	440b      	add	r3, r1
 8014e8e:	3314      	adds	r3, #20
 8014e90:	2201      	movs	r2, #1
 8014e92:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014e94:	7c7a      	ldrb	r2, [r7, #17]
 8014e96:	496d      	ldr	r1, [pc, #436]	; (801504c <etharp_query+0x268>)
 8014e98:	4613      	mov	r3, r2
 8014e9a:	005b      	lsls	r3, r3, #1
 8014e9c:	4413      	add	r3, r2
 8014e9e:	00db      	lsls	r3, r3, #3
 8014ea0:	440b      	add	r3, r1
 8014ea2:	3308      	adds	r3, #8
 8014ea4:	68fa      	ldr	r2, [r7, #12]
 8014ea6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014ea8:	7c7a      	ldrb	r2, [r7, #17]
 8014eaa:	4968      	ldr	r1, [pc, #416]	; (801504c <etharp_query+0x268>)
 8014eac:	4613      	mov	r3, r2
 8014eae:	005b      	lsls	r3, r3, #1
 8014eb0:	4413      	add	r3, r2
 8014eb2:	00db      	lsls	r3, r3, #3
 8014eb4:	440b      	add	r3, r1
 8014eb6:	3314      	adds	r3, #20
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d011      	beq.n	8014ee2 <etharp_query+0xfe>
 8014ebe:	7c7a      	ldrb	r2, [r7, #17]
 8014ec0:	4962      	ldr	r1, [pc, #392]	; (801504c <etharp_query+0x268>)
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	005b      	lsls	r3, r3, #1
 8014ec6:	4413      	add	r3, r2
 8014ec8:	00db      	lsls	r3, r3, #3
 8014eca:	440b      	add	r3, r1
 8014ecc:	3314      	adds	r3, #20
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	d806      	bhi.n	8014ee2 <etharp_query+0xfe>
 8014ed4:	4b5a      	ldr	r3, [pc, #360]	; (8015040 <etharp_query+0x25c>)
 8014ed6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014eda:	495d      	ldr	r1, [pc, #372]	; (8015050 <etharp_query+0x26c>)
 8014edc:	485a      	ldr	r0, [pc, #360]	; (8015048 <etharp_query+0x264>)
 8014ede:	f003 ff37 	bl	8018d50 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014ee2:	6a3b      	ldr	r3, [r7, #32]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d102      	bne.n	8014eee <etharp_query+0x10a>
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10c      	bne.n	8014f08 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014eee:	68b9      	ldr	r1, [r7, #8]
 8014ef0:	68f8      	ldr	r0, [r7, #12]
 8014ef2:	f000 f963 	bl	80151bc <etharp_request>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d102      	bne.n	8014f08 <etharp_query+0x124>
      return result;
 8014f02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014f06:	e096      	b.n	8015036 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d106      	bne.n	8014f1c <etharp_query+0x138>
 8014f0e:	4b4c      	ldr	r3, [pc, #304]	; (8015040 <etharp_query+0x25c>)
 8014f10:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014f14:	494f      	ldr	r1, [pc, #316]	; (8015054 <etharp_query+0x270>)
 8014f16:	484c      	ldr	r0, [pc, #304]	; (8015048 <etharp_query+0x264>)
 8014f18:	f003 ff1a 	bl	8018d50 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014f1c:	7c7a      	ldrb	r2, [r7, #17]
 8014f1e:	494b      	ldr	r1, [pc, #300]	; (801504c <etharp_query+0x268>)
 8014f20:	4613      	mov	r3, r2
 8014f22:	005b      	lsls	r3, r3, #1
 8014f24:	4413      	add	r3, r2
 8014f26:	00db      	lsls	r3, r3, #3
 8014f28:	440b      	add	r3, r1
 8014f2a:	3314      	adds	r3, #20
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	2b01      	cmp	r3, #1
 8014f30:	d917      	bls.n	8014f62 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014f32:	4a49      	ldr	r2, [pc, #292]	; (8015058 <etharp_query+0x274>)
 8014f34:	7c7b      	ldrb	r3, [r7, #17]
 8014f36:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014f38:	7c7a      	ldrb	r2, [r7, #17]
 8014f3a:	4613      	mov	r3, r2
 8014f3c:	005b      	lsls	r3, r3, #1
 8014f3e:	4413      	add	r3, r2
 8014f40:	00db      	lsls	r3, r3, #3
 8014f42:	3308      	adds	r3, #8
 8014f44:	4a41      	ldr	r2, [pc, #260]	; (801504c <etharp_query+0x268>)
 8014f46:	4413      	add	r3, r2
 8014f48:	3304      	adds	r3, #4
 8014f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014f4e:	9200      	str	r2, [sp, #0]
 8014f50:	697a      	ldr	r2, [r7, #20]
 8014f52:	6879      	ldr	r1, [r7, #4]
 8014f54:	68f8      	ldr	r0, [r7, #12]
 8014f56:	f001 fd9f 	bl	8016a98 <ethernet_output>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f60:	e067      	b.n	8015032 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014f62:	7c7a      	ldrb	r2, [r7, #17]
 8014f64:	4939      	ldr	r1, [pc, #228]	; (801504c <etharp_query+0x268>)
 8014f66:	4613      	mov	r3, r2
 8014f68:	005b      	lsls	r3, r3, #1
 8014f6a:	4413      	add	r3, r2
 8014f6c:	00db      	lsls	r3, r3, #3
 8014f6e:	440b      	add	r3, r1
 8014f70:	3314      	adds	r3, #20
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	2b01      	cmp	r3, #1
 8014f76:	d15c      	bne.n	8015032 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014f80:	e01c      	b.n	8014fbc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	895a      	ldrh	r2, [r3, #10]
 8014f86:	69fb      	ldr	r3, [r7, #28]
 8014f88:	891b      	ldrh	r3, [r3, #8]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d10a      	bne.n	8014fa4 <etharp_query+0x1c0>
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d006      	beq.n	8014fa4 <etharp_query+0x1c0>
 8014f96:	4b2a      	ldr	r3, [pc, #168]	; (8015040 <etharp_query+0x25c>)
 8014f98:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014f9c:	492f      	ldr	r1, [pc, #188]	; (801505c <etharp_query+0x278>)
 8014f9e:	482a      	ldr	r0, [pc, #168]	; (8015048 <etharp_query+0x264>)
 8014fa0:	f003 fed6 	bl	8018d50 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	7b1b      	ldrb	r3, [r3, #12]
 8014fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d002      	beq.n	8014fb6 <etharp_query+0x1d2>
        copy_needed = 1;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	61bb      	str	r3, [r7, #24]
        break;
 8014fb4:	e005      	b.n	8014fc2 <etharp_query+0x1de>
      }
      p = p->next;
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fbc:	69fb      	ldr	r3, [r7, #28]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d1df      	bne.n	8014f82 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014fc2:	69bb      	ldr	r3, [r7, #24]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d007      	beq.n	8014fd8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014fc8:	687a      	ldr	r2, [r7, #4]
 8014fca:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014fce:	200e      	movs	r0, #14
 8014fd0:	f7f8 fc64 	bl	800d89c <pbuf_clone>
 8014fd4:	61f8      	str	r0, [r7, #28]
 8014fd6:	e004      	b.n	8014fe2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014fdc:	69f8      	ldr	r0, [r7, #28]
 8014fde:	f7f8 fa9b 	bl	800d518 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d021      	beq.n	801502c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014fe8:	7c7a      	ldrb	r2, [r7, #17]
 8014fea:	4918      	ldr	r1, [pc, #96]	; (801504c <etharp_query+0x268>)
 8014fec:	4613      	mov	r3, r2
 8014fee:	005b      	lsls	r3, r3, #1
 8014ff0:	4413      	add	r3, r2
 8014ff2:	00db      	lsls	r3, r3, #3
 8014ff4:	440b      	add	r3, r1
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00a      	beq.n	8015012 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014ffc:	7c7a      	ldrb	r2, [r7, #17]
 8014ffe:	4913      	ldr	r1, [pc, #76]	; (801504c <etharp_query+0x268>)
 8015000:	4613      	mov	r3, r2
 8015002:	005b      	lsls	r3, r3, #1
 8015004:	4413      	add	r3, r2
 8015006:	00db      	lsls	r3, r3, #3
 8015008:	440b      	add	r3, r1
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	4618      	mov	r0, r3
 801500e:	f7f8 f9dd 	bl	800d3cc <pbuf_free>
      }
      arp_table[i].q = p;
 8015012:	7c7a      	ldrb	r2, [r7, #17]
 8015014:	490d      	ldr	r1, [pc, #52]	; (801504c <etharp_query+0x268>)
 8015016:	4613      	mov	r3, r2
 8015018:	005b      	lsls	r3, r3, #1
 801501a:	4413      	add	r3, r2
 801501c:	00db      	lsls	r3, r3, #3
 801501e:	440b      	add	r3, r1
 8015020:	69fa      	ldr	r2, [r7, #28]
 8015022:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015024:	2300      	movs	r3, #0
 8015026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801502a:	e002      	b.n	8015032 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801502c:	23ff      	movs	r3, #255	; 0xff
 801502e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015036:	4618      	mov	r0, r3
 8015038:	3728      	adds	r7, #40	; 0x28
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	0801cdd0 	.word	0x0801cdd0
 8015044:	0801cf7c 	.word	0x0801cf7c
 8015048:	0801ce48 	.word	0x0801ce48
 801504c:	20011294 	.word	0x20011294
 8015050:	0801cf8c 	.word	0x0801cf8c
 8015054:	0801cf70 	.word	0x0801cf70
 8015058:	20011384 	.word	0x20011384
 801505c:	0801cfb4 	.word	0x0801cfb4

08015060 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b08a      	sub	sp, #40	; 0x28
 8015064:	af02      	add	r7, sp, #8
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
 801506c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801506e:	2300      	movs	r3, #0
 8015070:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d106      	bne.n	8015086 <etharp_raw+0x26>
 8015078:	4b3a      	ldr	r3, [pc, #232]	; (8015164 <etharp_raw+0x104>)
 801507a:	f240 4257 	movw	r2, #1111	; 0x457
 801507e:	493a      	ldr	r1, [pc, #232]	; (8015168 <etharp_raw+0x108>)
 8015080:	483a      	ldr	r0, [pc, #232]	; (801516c <etharp_raw+0x10c>)
 8015082:	f003 fe65 	bl	8018d50 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015086:	f44f 7220 	mov.w	r2, #640	; 0x280
 801508a:	211c      	movs	r1, #28
 801508c:	200e      	movs	r0, #14
 801508e:	f7f7 feb9 	bl	800ce04 <pbuf_alloc>
 8015092:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015094:	69bb      	ldr	r3, [r7, #24]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d102      	bne.n	80150a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801509a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801509e:	e05d      	b.n	801515c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80150a0:	69bb      	ldr	r3, [r7, #24]
 80150a2:	895b      	ldrh	r3, [r3, #10]
 80150a4:	2b1b      	cmp	r3, #27
 80150a6:	d806      	bhi.n	80150b6 <etharp_raw+0x56>
 80150a8:	4b2e      	ldr	r3, [pc, #184]	; (8015164 <etharp_raw+0x104>)
 80150aa:	f240 4262 	movw	r2, #1122	; 0x462
 80150ae:	4930      	ldr	r1, [pc, #192]	; (8015170 <etharp_raw+0x110>)
 80150b0:	482e      	ldr	r0, [pc, #184]	; (801516c <etharp_raw+0x10c>)
 80150b2:	f003 fe4d 	bl	8018d50 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80150b6:	69bb      	ldr	r3, [r7, #24]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80150bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80150be:	4618      	mov	r0, r3
 80150c0:	f7f6 fd82 	bl	800bbc8 <lwip_htons>
 80150c4:	4603      	mov	r3, r0
 80150c6:	461a      	mov	r2, r3
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150d2:	2b06      	cmp	r3, #6
 80150d4:	d006      	beq.n	80150e4 <etharp_raw+0x84>
 80150d6:	4b23      	ldr	r3, [pc, #140]	; (8015164 <etharp_raw+0x104>)
 80150d8:	f240 4269 	movw	r2, #1129	; 0x469
 80150dc:	4925      	ldr	r1, [pc, #148]	; (8015174 <etharp_raw+0x114>)
 80150de:	4823      	ldr	r0, [pc, #140]	; (801516c <etharp_raw+0x10c>)
 80150e0:	f003 fe36 	bl	8018d50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	3308      	adds	r3, #8
 80150e8:	2206      	movs	r2, #6
 80150ea:	6839      	ldr	r1, [r7, #0]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f003 fe19 	bl	8018d24 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	3312      	adds	r3, #18
 80150f6:	2206      	movs	r2, #6
 80150f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80150fa:	4618      	mov	r0, r3
 80150fc:	f003 fe12 	bl	8018d24 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	330e      	adds	r3, #14
 8015104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015106:	6812      	ldr	r2, [r2, #0]
 8015108:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	3318      	adds	r3, #24
 801510e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015110:	6812      	ldr	r2, [r2, #0]
 8015112:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	2200      	movs	r2, #0
 8015118:	701a      	strb	r2, [r3, #0]
 801511a:	2200      	movs	r2, #0
 801511c:	f042 0201 	orr.w	r2, r2, #1
 8015120:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	2200      	movs	r2, #0
 8015126:	f042 0208 	orr.w	r2, r2, #8
 801512a:	709a      	strb	r2, [r3, #2]
 801512c:	2200      	movs	r2, #0
 801512e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	2206      	movs	r2, #6
 8015134:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	2204      	movs	r2, #4
 801513a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801513c:	f640 0306 	movw	r3, #2054	; 0x806
 8015140:	9300      	str	r3, [sp, #0]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	68ba      	ldr	r2, [r7, #8]
 8015146:	69b9      	ldr	r1, [r7, #24]
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f001 fca5 	bl	8016a98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801514e:	69b8      	ldr	r0, [r7, #24]
 8015150:	f7f8 f93c 	bl	800d3cc <pbuf_free>
  p = NULL;
 8015154:	2300      	movs	r3, #0
 8015156:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015158:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801515c:	4618      	mov	r0, r3
 801515e:	3720      	adds	r7, #32
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	0801cdd0 	.word	0x0801cdd0
 8015168:	0801cf20 	.word	0x0801cf20
 801516c:	0801ce48 	.word	0x0801ce48
 8015170:	0801cfd0 	.word	0x0801cfd0
 8015174:	0801d004 	.word	0x0801d004

08015178 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b088      	sub	sp, #32
 801517c:	af04      	add	r7, sp, #16
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	60b9      	str	r1, [r7, #8]
 8015182:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015194:	2201      	movs	r2, #1
 8015196:	9203      	str	r2, [sp, #12]
 8015198:	68ba      	ldr	r2, [r7, #8]
 801519a:	9202      	str	r2, [sp, #8]
 801519c:	4a06      	ldr	r2, [pc, #24]	; (80151b8 <etharp_request_dst+0x40>)
 801519e:	9201      	str	r2, [sp, #4]
 80151a0:	9300      	str	r3, [sp, #0]
 80151a2:	4603      	mov	r3, r0
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	68f8      	ldr	r0, [r7, #12]
 80151a8:	f7ff ff5a 	bl	8015060 <etharp_raw>
 80151ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	0801d6b0 	.word	0x0801d6b0

080151bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80151c6:	4a05      	ldr	r2, [pc, #20]	; (80151dc <etharp_request+0x20>)
 80151c8:	6839      	ldr	r1, [r7, #0]
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f7ff ffd4 	bl	8015178 <etharp_request_dst>
 80151d0:	4603      	mov	r3, r0
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3708      	adds	r7, #8
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
 80151da:	bf00      	nop
 80151dc:	0801d6a8 	.word	0x0801d6a8

080151e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b08e      	sub	sp, #56	; 0x38
 80151e4:	af04      	add	r7, sp, #16
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80151ea:	4b79      	ldr	r3, [pc, #484]	; (80153d0 <icmp_input+0x1f0>)
 80151ec:	689b      	ldr	r3, [r3, #8]
 80151ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80151f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	f003 030f 	and.w	r3, r3, #15
 80151f8:	b2db      	uxtb	r3, r3
 80151fa:	009b      	lsls	r3, r3, #2
 80151fc:	b2db      	uxtb	r3, r3
 80151fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015202:	2b13      	cmp	r3, #19
 8015204:	f240 80cd 	bls.w	80153a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	895b      	ldrh	r3, [r3, #10]
 801520c:	2b03      	cmp	r3, #3
 801520e:	f240 80ca 	bls.w	80153a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	781b      	ldrb	r3, [r3, #0]
 8015218:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801521c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015220:	2b00      	cmp	r3, #0
 8015222:	f000 80b7 	beq.w	8015394 <icmp_input+0x1b4>
 8015226:	2b08      	cmp	r3, #8
 8015228:	f040 80b7 	bne.w	801539a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801522c:	4b69      	ldr	r3, [pc, #420]	; (80153d4 <icmp_input+0x1f4>)
 801522e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015230:	4b67      	ldr	r3, [pc, #412]	; (80153d0 <icmp_input+0x1f0>)
 8015232:	695b      	ldr	r3, [r3, #20]
 8015234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015238:	2be0      	cmp	r3, #224	; 0xe0
 801523a:	f000 80bb 	beq.w	80153b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801523e:	4b64      	ldr	r3, [pc, #400]	; (80153d0 <icmp_input+0x1f0>)
 8015240:	695b      	ldr	r3, [r3, #20]
 8015242:	4a63      	ldr	r2, [pc, #396]	; (80153d0 <icmp_input+0x1f0>)
 8015244:	6812      	ldr	r2, [r2, #0]
 8015246:	4611      	mov	r1, r2
 8015248:	4618      	mov	r0, r3
 801524a:	f000 fbed 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	f040 80b1 	bne.w	80153b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	891b      	ldrh	r3, [r3, #8]
 801525a:	2b07      	cmp	r3, #7
 801525c:	f240 80a5 	bls.w	80153aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015262:	330e      	adds	r3, #14
 8015264:	4619      	mov	r1, r3
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	f7f8 f81a 	bl	800d2a0 <pbuf_add_header>
 801526c:	4603      	mov	r3, r0
 801526e:	2b00      	cmp	r3, #0
 8015270:	d04b      	beq.n	801530a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	891a      	ldrh	r2, [r3, #8]
 8015276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015278:	4413      	add	r3, r2
 801527a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	891b      	ldrh	r3, [r3, #8]
 8015280:	8b7a      	ldrh	r2, [r7, #26]
 8015282:	429a      	cmp	r2, r3
 8015284:	f0c0 809a 	bcc.w	80153bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015288:	8b7b      	ldrh	r3, [r7, #26]
 801528a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801528e:	4619      	mov	r1, r3
 8015290:	200e      	movs	r0, #14
 8015292:	f7f7 fdb7 	bl	800ce04 <pbuf_alloc>
 8015296:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	2b00      	cmp	r3, #0
 801529c:	f000 8090 	beq.w	80153c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	895b      	ldrh	r3, [r3, #10]
 80152a4:	461a      	mov	r2, r3
 80152a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152a8:	3308      	adds	r3, #8
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d203      	bcs.n	80152b6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80152ae:	6978      	ldr	r0, [r7, #20]
 80152b0:	f7f8 f88c 	bl	800d3cc <pbuf_free>
          goto icmperr;
 80152b4:	e085      	b.n	80153c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80152bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152be:	4618      	mov	r0, r3
 80152c0:	f003 fd30 	bl	8018d24 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80152c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152c6:	4619      	mov	r1, r3
 80152c8:	6978      	ldr	r0, [r7, #20]
 80152ca:	f7f7 fff9 	bl	800d2c0 <pbuf_remove_header>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d009      	beq.n	80152e8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80152d4:	4b40      	ldr	r3, [pc, #256]	; (80153d8 <icmp_input+0x1f8>)
 80152d6:	22b6      	movs	r2, #182	; 0xb6
 80152d8:	4940      	ldr	r1, [pc, #256]	; (80153dc <icmp_input+0x1fc>)
 80152da:	4841      	ldr	r0, [pc, #260]	; (80153e0 <icmp_input+0x200>)
 80152dc:	f003 fd38 	bl	8018d50 <iprintf>
          pbuf_free(r);
 80152e0:	6978      	ldr	r0, [r7, #20]
 80152e2:	f7f8 f873 	bl	800d3cc <pbuf_free>
          goto icmperr;
 80152e6:	e06c      	b.n	80153c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80152e8:	6879      	ldr	r1, [r7, #4]
 80152ea:	6978      	ldr	r0, [r7, #20]
 80152ec:	f7f8 f992 	bl	800d614 <pbuf_copy>
 80152f0:	4603      	mov	r3, r0
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d003      	beq.n	80152fe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80152f6:	6978      	ldr	r0, [r7, #20]
 80152f8:	f7f8 f868 	bl	800d3cc <pbuf_free>
          goto icmperr;
 80152fc:	e061      	b.n	80153c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f7f8 f864 	bl	800d3cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	607b      	str	r3, [r7, #4]
 8015308:	e00f      	b.n	801532a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801530a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801530c:	330e      	adds	r3, #14
 801530e:	4619      	mov	r1, r3
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f7f7 ffd5 	bl	800d2c0 <pbuf_remove_header>
 8015316:	4603      	mov	r3, r0
 8015318:	2b00      	cmp	r3, #0
 801531a:	d006      	beq.n	801532a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801531c:	4b2e      	ldr	r3, [pc, #184]	; (80153d8 <icmp_input+0x1f8>)
 801531e:	22c7      	movs	r2, #199	; 0xc7
 8015320:	4930      	ldr	r1, [pc, #192]	; (80153e4 <icmp_input+0x204>)
 8015322:	482f      	ldr	r0, [pc, #188]	; (80153e0 <icmp_input+0x200>)
 8015324:	f003 fd14 	bl	8018d50 <iprintf>
          goto icmperr;
 8015328:	e04b      	b.n	80153c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015332:	4619      	mov	r1, r3
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7f7 ffb3 	bl	800d2a0 <pbuf_add_header>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d12b      	bne.n	8015398 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801534e:	4b20      	ldr	r3, [pc, #128]	; (80153d0 <icmp_input+0x1f0>)
 8015350:	691a      	ldr	r2, [r3, #16]
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	2200      	movs	r2, #0
 801535a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	2200      	movs	r2, #0
 8015360:	709a      	strb	r2, [r3, #2]
 8015362:	2200      	movs	r2, #0
 8015364:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	22ff      	movs	r2, #255	; 0xff
 801536a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2200      	movs	r2, #0
 8015370:	729a      	strb	r2, [r3, #10]
 8015372:	2200      	movs	r2, #0
 8015374:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	9302      	str	r3, [sp, #8]
 801537a:	2301      	movs	r3, #1
 801537c:	9301      	str	r3, [sp, #4]
 801537e:	2300      	movs	r3, #0
 8015380:	9300      	str	r3, [sp, #0]
 8015382:	23ff      	movs	r3, #255	; 0xff
 8015384:	2200      	movs	r2, #0
 8015386:	69f9      	ldr	r1, [r7, #28]
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f000 fa75 	bl	8015878 <ip4_output_if>
 801538e:	4603      	mov	r3, r0
 8015390:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015392:	e001      	b.n	8015398 <icmp_input+0x1b8>
      break;
 8015394:	bf00      	nop
 8015396:	e000      	b.n	801539a <icmp_input+0x1ba>
      break;
 8015398:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f7f8 f816 	bl	800d3cc <pbuf_free>
  return;
 80153a0:	e013      	b.n	80153ca <icmp_input+0x1ea>
    goto lenerr;
 80153a2:	bf00      	nop
 80153a4:	e002      	b.n	80153ac <icmp_input+0x1cc>
    goto lenerr;
 80153a6:	bf00      	nop
 80153a8:	e000      	b.n	80153ac <icmp_input+0x1cc>
        goto lenerr;
 80153aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f7f8 f80d 	bl	800d3cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153b2:	e00a      	b.n	80153ca <icmp_input+0x1ea>
        goto icmperr;
 80153b4:	bf00      	nop
 80153b6:	e004      	b.n	80153c2 <icmp_input+0x1e2>
        goto icmperr;
 80153b8:	bf00      	nop
 80153ba:	e002      	b.n	80153c2 <icmp_input+0x1e2>
          goto icmperr;
 80153bc:	bf00      	nop
 80153be:	e000      	b.n	80153c2 <icmp_input+0x1e2>
          goto icmperr;
 80153c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f7f8 f802 	bl	800d3cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80153ca:	3728      	adds	r7, #40	; 0x28
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	2000a138 	.word	0x2000a138
 80153d4:	2000a14c 	.word	0x2000a14c
 80153d8:	0801d048 	.word	0x0801d048
 80153dc:	0801d080 	.word	0x0801d080
 80153e0:	0801d0b8 	.word	0x0801d0b8
 80153e4:	0801d0e0 	.word	0x0801d0e0

080153e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	460b      	mov	r3, r1
 80153f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80153f4:	78fb      	ldrb	r3, [r7, #3]
 80153f6:	461a      	mov	r2, r3
 80153f8:	2103      	movs	r1, #3
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 f814 	bl	8015428 <icmp_send_response>
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	460b      	mov	r3, r1
 8015412:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015414:	78fb      	ldrb	r3, [r7, #3]
 8015416:	461a      	mov	r2, r3
 8015418:	210b      	movs	r1, #11
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f804 	bl	8015428 <icmp_send_response>
}
 8015420:	bf00      	nop
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b08c      	sub	sp, #48	; 0x30
 801542c:	af04      	add	r7, sp, #16
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	460b      	mov	r3, r1
 8015432:	70fb      	strb	r3, [r7, #3]
 8015434:	4613      	mov	r3, r2
 8015436:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015438:	f44f 7220 	mov.w	r2, #640	; 0x280
 801543c:	2124      	movs	r1, #36	; 0x24
 801543e:	2022      	movs	r0, #34	; 0x22
 8015440:	f7f7 fce0 	bl	800ce04 <pbuf_alloc>
 8015444:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015446:	69fb      	ldr	r3, [r7, #28]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d04c      	beq.n	80154e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	895b      	ldrh	r3, [r3, #10]
 8015450:	2b23      	cmp	r3, #35	; 0x23
 8015452:	d806      	bhi.n	8015462 <icmp_send_response+0x3a>
 8015454:	4b26      	ldr	r3, [pc, #152]	; (80154f0 <icmp_send_response+0xc8>)
 8015456:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801545a:	4926      	ldr	r1, [pc, #152]	; (80154f4 <icmp_send_response+0xcc>)
 801545c:	4826      	ldr	r0, [pc, #152]	; (80154f8 <icmp_send_response+0xd0>)
 801545e:	f003 fc77 	bl	8018d50 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	78fa      	ldrb	r2, [r7, #3]
 8015472:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	78ba      	ldrb	r2, [r7, #2]
 8015478:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	2200      	movs	r2, #0
 801547e:	711a      	strb	r2, [r3, #4]
 8015480:	2200      	movs	r2, #0
 8015482:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	2200      	movs	r2, #0
 8015488:	719a      	strb	r2, [r3, #6]
 801548a:	2200      	movs	r2, #0
 801548c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	f103 0008 	add.w	r0, r3, #8
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	221c      	movs	r2, #28
 801549c:	4619      	mov	r1, r3
 801549e:	f003 fc41 	bl	8018d24 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	68db      	ldr	r3, [r3, #12]
 80154a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80154a8:	f107 030c 	add.w	r3, r7, #12
 80154ac:	4618      	mov	r0, r3
 80154ae:	f000 f825 	bl	80154fc <ip4_route>
 80154b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d011      	beq.n	80154de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	2200      	movs	r2, #0
 80154be:	709a      	strb	r2, [r3, #2]
 80154c0:	2200      	movs	r2, #0
 80154c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80154c4:	f107 020c 	add.w	r2, r7, #12
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	9302      	str	r3, [sp, #8]
 80154cc:	2301      	movs	r3, #1
 80154ce:	9301      	str	r3, [sp, #4]
 80154d0:	2300      	movs	r3, #0
 80154d2:	9300      	str	r3, [sp, #0]
 80154d4:	23ff      	movs	r3, #255	; 0xff
 80154d6:	2100      	movs	r1, #0
 80154d8:	69f8      	ldr	r0, [r7, #28]
 80154da:	f000 f9cd 	bl	8015878 <ip4_output_if>
  }
  pbuf_free(q);
 80154de:	69f8      	ldr	r0, [r7, #28]
 80154e0:	f7f7 ff74 	bl	800d3cc <pbuf_free>
 80154e4:	e000      	b.n	80154e8 <icmp_send_response+0xc0>
    return;
 80154e6:	bf00      	nop
}
 80154e8:	3720      	adds	r7, #32
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	0801d048 	.word	0x0801d048
 80154f4:	0801d114 	.word	0x0801d114
 80154f8:	0801d0b8 	.word	0x0801d0b8

080154fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80154fc:	b480      	push	{r7}
 80154fe:	b085      	sub	sp, #20
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015504:	4b33      	ldr	r3, [pc, #204]	; (80155d4 <ip4_route+0xd8>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	60fb      	str	r3, [r7, #12]
 801550a:	e036      	b.n	801557a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015512:	f003 0301 	and.w	r3, r3, #1
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b00      	cmp	r3, #0
 801551a:	d02b      	beq.n	8015574 <ip4_route+0x78>
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015522:	089b      	lsrs	r3, r3, #2
 8015524:	f003 0301 	and.w	r3, r3, #1
 8015528:	b2db      	uxtb	r3, r3
 801552a:	2b00      	cmp	r3, #0
 801552c:	d022      	beq.n	8015574 <ip4_route+0x78>
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	3304      	adds	r3, #4
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d01d      	beq.n	8015574 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	3304      	adds	r3, #4
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	405a      	eors	r2, r3
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	3308      	adds	r3, #8
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	4013      	ands	r3, r2
 801554c:	2b00      	cmp	r3, #0
 801554e:	d101      	bne.n	8015554 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	e038      	b.n	80155c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801555a:	f003 0302 	and.w	r3, r3, #2
 801555e:	2b00      	cmp	r3, #0
 8015560:	d108      	bne.n	8015574 <ip4_route+0x78>
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	330c      	adds	r3, #12
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	429a      	cmp	r2, r3
 801556e:	d101      	bne.n	8015574 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	e028      	b.n	80155c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	60fb      	str	r3, [r7, #12]
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d1c5      	bne.n	801550c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015580:	4b15      	ldr	r3, [pc, #84]	; (80155d8 <ip4_route+0xdc>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d01a      	beq.n	80155be <ip4_route+0xc2>
 8015588:	4b13      	ldr	r3, [pc, #76]	; (80155d8 <ip4_route+0xdc>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015590:	f003 0301 	and.w	r3, r3, #1
 8015594:	2b00      	cmp	r3, #0
 8015596:	d012      	beq.n	80155be <ip4_route+0xc2>
 8015598:	4b0f      	ldr	r3, [pc, #60]	; (80155d8 <ip4_route+0xdc>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155a0:	f003 0304 	and.w	r3, r3, #4
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d00a      	beq.n	80155be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155a8:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <ip4_route+0xdc>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	3304      	adds	r3, #4
 80155ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d004      	beq.n	80155be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	2b7f      	cmp	r3, #127	; 0x7f
 80155bc:	d101      	bne.n	80155c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80155be:	2300      	movs	r3, #0
 80155c0:	e001      	b.n	80155c6 <ip4_route+0xca>
  }

  return netif_default;
 80155c2:	4b05      	ldr	r3, [pc, #20]	; (80155d8 <ip4_route+0xdc>)
 80155c4:	681b      	ldr	r3, [r3, #0]
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3714      	adds	r7, #20
 80155ca:	46bd      	mov	sp, r7
 80155cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d0:	4770      	bx	lr
 80155d2:	bf00      	nop
 80155d4:	20011228 	.word	0x20011228
 80155d8:	2001122c 	.word	0x2001122c

080155dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b082      	sub	sp, #8
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155ea:	f003 0301 	and.w	r3, r3, #1
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d016      	beq.n	8015622 <ip4_input_accept+0x46>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3304      	adds	r3, #4
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d011      	beq.n	8015622 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80155fe:	4b0b      	ldr	r3, [pc, #44]	; (801562c <ip4_input_accept+0x50>)
 8015600:	695a      	ldr	r2, [r3, #20]
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	3304      	adds	r3, #4
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	429a      	cmp	r2, r3
 801560a:	d008      	beq.n	801561e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801560c:	4b07      	ldr	r3, [pc, #28]	; (801562c <ip4_input_accept+0x50>)
 801560e:	695b      	ldr	r3, [r3, #20]
 8015610:	6879      	ldr	r1, [r7, #4]
 8015612:	4618      	mov	r0, r3
 8015614:	f000 fa08 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 8015618:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801561a:	2b00      	cmp	r3, #0
 801561c:	d001      	beq.n	8015622 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801561e:	2301      	movs	r3, #1
 8015620:	e000      	b.n	8015624 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015622:	2300      	movs	r3, #0
}
 8015624:	4618      	mov	r0, r3
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	2000a138 	.word	0x2000a138

08015630 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b086      	sub	sp, #24
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	685b      	ldr	r3, [r3, #4]
 801563e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	091b      	lsrs	r3, r3, #4
 8015646:	b2db      	uxtb	r3, r3
 8015648:	2b04      	cmp	r3, #4
 801564a:	d004      	beq.n	8015656 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f7f7 febd 	bl	800d3cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015652:	2300      	movs	r3, #0
 8015654:	e107      	b.n	8015866 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	781b      	ldrb	r3, [r3, #0]
 801565a:	f003 030f 	and.w	r3, r3, #15
 801565e:	b2db      	uxtb	r3, r3
 8015660:	009b      	lsls	r3, r3, #2
 8015662:	b2db      	uxtb	r3, r3
 8015664:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	885b      	ldrh	r3, [r3, #2]
 801566a:	b29b      	uxth	r3, r3
 801566c:	4618      	mov	r0, r3
 801566e:	f7f6 faab 	bl	800bbc8 <lwip_htons>
 8015672:	4603      	mov	r3, r0
 8015674:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	891b      	ldrh	r3, [r3, #8]
 801567a:	89ba      	ldrh	r2, [r7, #12]
 801567c:	429a      	cmp	r2, r3
 801567e:	d204      	bcs.n	801568a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015680:	89bb      	ldrh	r3, [r7, #12]
 8015682:	4619      	mov	r1, r3
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f7f7 fd1b 	bl	800d0c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	895b      	ldrh	r3, [r3, #10]
 801568e:	89fa      	ldrh	r2, [r7, #14]
 8015690:	429a      	cmp	r2, r3
 8015692:	d807      	bhi.n	80156a4 <ip4_input+0x74>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	891b      	ldrh	r3, [r3, #8]
 8015698:	89ba      	ldrh	r2, [r7, #12]
 801569a:	429a      	cmp	r2, r3
 801569c:	d802      	bhi.n	80156a4 <ip4_input+0x74>
 801569e:	89fb      	ldrh	r3, [r7, #14]
 80156a0:	2b13      	cmp	r3, #19
 80156a2:	d804      	bhi.n	80156ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f7f7 fe91 	bl	800d3cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80156aa:	2300      	movs	r3, #0
 80156ac:	e0db      	b.n	8015866 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	691b      	ldr	r3, [r3, #16]
 80156b2:	4a6f      	ldr	r2, [pc, #444]	; (8015870 <ip4_input+0x240>)
 80156b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	68db      	ldr	r3, [r3, #12]
 80156ba:	4a6d      	ldr	r2, [pc, #436]	; (8015870 <ip4_input+0x240>)
 80156bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156be:	4b6c      	ldr	r3, [pc, #432]	; (8015870 <ip4_input+0x240>)
 80156c0:	695b      	ldr	r3, [r3, #20]
 80156c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80156c6:	2be0      	cmp	r3, #224	; 0xe0
 80156c8:	d112      	bne.n	80156f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156d0:	f003 0301 	and.w	r3, r3, #1
 80156d4:	b2db      	uxtb	r3, r3
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d007      	beq.n	80156ea <ip4_input+0xba>
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	3304      	adds	r3, #4
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d002      	beq.n	80156ea <ip4_input+0xba>
      netif = inp;
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	613b      	str	r3, [r7, #16]
 80156e8:	e02a      	b.n	8015740 <ip4_input+0x110>
    } else {
      netif = NULL;
 80156ea:	2300      	movs	r3, #0
 80156ec:	613b      	str	r3, [r7, #16]
 80156ee:	e027      	b.n	8015740 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80156f0:	6838      	ldr	r0, [r7, #0]
 80156f2:	f7ff ff73 	bl	80155dc <ip4_input_accept>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d002      	beq.n	8015702 <ip4_input+0xd2>
      netif = inp;
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	613b      	str	r3, [r7, #16]
 8015700:	e01e      	b.n	8015740 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015702:	2300      	movs	r3, #0
 8015704:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015706:	4b5a      	ldr	r3, [pc, #360]	; (8015870 <ip4_input+0x240>)
 8015708:	695b      	ldr	r3, [r3, #20]
 801570a:	b2db      	uxtb	r3, r3
 801570c:	2b7f      	cmp	r3, #127	; 0x7f
 801570e:	d017      	beq.n	8015740 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015710:	4b58      	ldr	r3, [pc, #352]	; (8015874 <ip4_input+0x244>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	613b      	str	r3, [r7, #16]
 8015716:	e00e      	b.n	8015736 <ip4_input+0x106>
          if (netif == inp) {
 8015718:	693a      	ldr	r2, [r7, #16]
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	429a      	cmp	r2, r3
 801571e:	d006      	beq.n	801572e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015720:	6938      	ldr	r0, [r7, #16]
 8015722:	f7ff ff5b 	bl	80155dc <ip4_input_accept>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d108      	bne.n	801573e <ip4_input+0x10e>
 801572c:	e000      	b.n	8015730 <ip4_input+0x100>
            continue;
 801572e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	613b      	str	r3, [r7, #16]
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d1ed      	bne.n	8015718 <ip4_input+0xe8>
 801573c:	e000      	b.n	8015740 <ip4_input+0x110>
            break;
 801573e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015740:	4b4b      	ldr	r3, [pc, #300]	; (8015870 <ip4_input+0x240>)
 8015742:	691b      	ldr	r3, [r3, #16]
 8015744:	6839      	ldr	r1, [r7, #0]
 8015746:	4618      	mov	r0, r3
 8015748:	f000 f96e 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 801574c:	4603      	mov	r3, r0
 801574e:	2b00      	cmp	r3, #0
 8015750:	d105      	bne.n	801575e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015752:	4b47      	ldr	r3, [pc, #284]	; (8015870 <ip4_input+0x240>)
 8015754:	691b      	ldr	r3, [r3, #16]
 8015756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801575a:	2be0      	cmp	r3, #224	; 0xe0
 801575c:	d104      	bne.n	8015768 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7f7 fe34 	bl	800d3cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015764:	2300      	movs	r3, #0
 8015766:	e07e      	b.n	8015866 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d104      	bne.n	8015778 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f7f7 fe2c 	bl	800d3cc <pbuf_free>
    return ERR_OK;
 8015774:	2300      	movs	r3, #0
 8015776:	e076      	b.n	8015866 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	88db      	ldrh	r3, [r3, #6]
 801577c:	b29b      	uxth	r3, r3
 801577e:	461a      	mov	r2, r3
 8015780:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015784:	4013      	ands	r3, r2
 8015786:	2b00      	cmp	r3, #0
 8015788:	d00b      	beq.n	80157a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f000 fdbc 	bl	8016308 <ip4_reass>
 8015790:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d101      	bne.n	801579c <ip4_input+0x16c>
      return ERR_OK;
 8015798:	2300      	movs	r3, #0
 801579a:	e064      	b.n	8015866 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80157a2:	4a33      	ldr	r2, [pc, #204]	; (8015870 <ip4_input+0x240>)
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80157a8:	4a31      	ldr	r2, [pc, #196]	; (8015870 <ip4_input+0x240>)
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80157ae:	4a30      	ldr	r2, [pc, #192]	; (8015870 <ip4_input+0x240>)
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	f003 030f 	and.w	r3, r3, #15
 80157bc:	b2db      	uxtb	r3, r3
 80157be:	009b      	lsls	r3, r3, #2
 80157c0:	b2db      	uxtb	r3, r3
 80157c2:	b29a      	uxth	r2, r3
 80157c4:	4b2a      	ldr	r3, [pc, #168]	; (8015870 <ip4_input+0x240>)
 80157c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80157c8:	89fb      	ldrh	r3, [r7, #14]
 80157ca:	4619      	mov	r1, r3
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f7f7 fd77 	bl	800d2c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	7a5b      	ldrb	r3, [r3, #9]
 80157d6:	2b11      	cmp	r3, #17
 80157d8:	d006      	beq.n	80157e8 <ip4_input+0x1b8>
 80157da:	2b11      	cmp	r3, #17
 80157dc:	dc13      	bgt.n	8015806 <ip4_input+0x1d6>
 80157de:	2b01      	cmp	r3, #1
 80157e0:	d00c      	beq.n	80157fc <ip4_input+0x1cc>
 80157e2:	2b06      	cmp	r3, #6
 80157e4:	d005      	beq.n	80157f2 <ip4_input+0x1c2>
 80157e6:	e00e      	b.n	8015806 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f7fe faec 	bl	8013dc8 <udp_input>
        break;
 80157f0:	e026      	b.n	8015840 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80157f2:	6839      	ldr	r1, [r7, #0]
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f7f9 fea5 	bl	800f544 <tcp_input>
        break;
 80157fa:	e021      	b.n	8015840 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80157fc:	6839      	ldr	r1, [r7, #0]
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f7ff fcee 	bl	80151e0 <icmp_input>
        break;
 8015804:	e01c      	b.n	8015840 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015806:	4b1a      	ldr	r3, [pc, #104]	; (8015870 <ip4_input+0x240>)
 8015808:	695b      	ldr	r3, [r3, #20]
 801580a:	6939      	ldr	r1, [r7, #16]
 801580c:	4618      	mov	r0, r3
 801580e:	f000 f90b 	bl	8015a28 <ip4_addr_isbroadcast_u32>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d10f      	bne.n	8015838 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015818:	4b15      	ldr	r3, [pc, #84]	; (8015870 <ip4_input+0x240>)
 801581a:	695b      	ldr	r3, [r3, #20]
 801581c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015820:	2be0      	cmp	r3, #224	; 0xe0
 8015822:	d009      	beq.n	8015838 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015828:	4619      	mov	r1, r3
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f7f7 fdbb 	bl	800d3a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015830:	2102      	movs	r1, #2
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f7ff fdd8 	bl	80153e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f7f7 fdc7 	bl	800d3cc <pbuf_free>
        break;
 801583e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015840:	4b0b      	ldr	r3, [pc, #44]	; (8015870 <ip4_input+0x240>)
 8015842:	2200      	movs	r2, #0
 8015844:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015846:	4b0a      	ldr	r3, [pc, #40]	; (8015870 <ip4_input+0x240>)
 8015848:	2200      	movs	r2, #0
 801584a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801584c:	4b08      	ldr	r3, [pc, #32]	; (8015870 <ip4_input+0x240>)
 801584e:	2200      	movs	r2, #0
 8015850:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015852:	4b07      	ldr	r3, [pc, #28]	; (8015870 <ip4_input+0x240>)
 8015854:	2200      	movs	r2, #0
 8015856:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015858:	4b05      	ldr	r3, [pc, #20]	; (8015870 <ip4_input+0x240>)
 801585a:	2200      	movs	r2, #0
 801585c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801585e:	4b04      	ldr	r3, [pc, #16]	; (8015870 <ip4_input+0x240>)
 8015860:	2200      	movs	r2, #0
 8015862:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015864:	2300      	movs	r3, #0
}
 8015866:	4618      	mov	r0, r3
 8015868:	3718      	adds	r7, #24
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
 801586e:	bf00      	nop
 8015870:	2000a138 	.word	0x2000a138
 8015874:	20011228 	.word	0x20011228

08015878 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08a      	sub	sp, #40	; 0x28
 801587c:	af04      	add	r7, sp, #16
 801587e:	60f8      	str	r0, [r7, #12]
 8015880:	60b9      	str	r1, [r7, #8]
 8015882:	607a      	str	r2, [r7, #4]
 8015884:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d009      	beq.n	80158a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d003      	beq.n	801589e <ip4_output_if+0x26>
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d102      	bne.n	80158a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a0:	3304      	adds	r3, #4
 80158a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80158a4:	78fa      	ldrb	r2, [r7, #3]
 80158a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a8:	9302      	str	r3, [sp, #8]
 80158aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80158ae:	9301      	str	r3, [sp, #4]
 80158b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158b4:	9300      	str	r3, [sp, #0]
 80158b6:	4613      	mov	r3, r2
 80158b8:	687a      	ldr	r2, [r7, #4]
 80158ba:	6979      	ldr	r1, [r7, #20]
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f000 f805 	bl	80158cc <ip4_output_if_src>
 80158c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3718      	adds	r7, #24
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b088      	sub	sp, #32
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
 80158d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	7b9b      	ldrb	r3, [r3, #14]
 80158de:	2b01      	cmp	r3, #1
 80158e0:	d006      	beq.n	80158f0 <ip4_output_if_src+0x24>
 80158e2:	4b4b      	ldr	r3, [pc, #300]	; (8015a10 <ip4_output_if_src+0x144>)
 80158e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80158e8:	494a      	ldr	r1, [pc, #296]	; (8015a14 <ip4_output_if_src+0x148>)
 80158ea:	484b      	ldr	r0, [pc, #300]	; (8015a18 <ip4_output_if_src+0x14c>)
 80158ec:	f003 fa30 	bl	8018d50 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d060      	beq.n	80159b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80158f6:	2314      	movs	r3, #20
 80158f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80158fa:	2114      	movs	r1, #20
 80158fc:	68f8      	ldr	r0, [r7, #12]
 80158fe:	f7f7 fccf 	bl	800d2a0 <pbuf_add_header>
 8015902:	4603      	mov	r3, r0
 8015904:	2b00      	cmp	r3, #0
 8015906:	d002      	beq.n	801590e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015908:	f06f 0301 	mvn.w	r3, #1
 801590c:	e07c      	b.n	8015a08 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	895b      	ldrh	r3, [r3, #10]
 8015918:	2b13      	cmp	r3, #19
 801591a:	d806      	bhi.n	801592a <ip4_output_if_src+0x5e>
 801591c:	4b3c      	ldr	r3, [pc, #240]	; (8015a10 <ip4_output_if_src+0x144>)
 801591e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015922:	493e      	ldr	r1, [pc, #248]	; (8015a1c <ip4_output_if_src+0x150>)
 8015924:	483c      	ldr	r0, [pc, #240]	; (8015a18 <ip4_output_if_src+0x14c>)
 8015926:	f003 fa13 	bl	8018d50 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	78fa      	ldrb	r2, [r7, #3]
 801592e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015930:	69fb      	ldr	r3, [r7, #28]
 8015932:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015936:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681a      	ldr	r2, [r3, #0]
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015940:	8b7b      	ldrh	r3, [r7, #26]
 8015942:	089b      	lsrs	r3, r3, #2
 8015944:	b29b      	uxth	r3, r3
 8015946:	b2db      	uxtb	r3, r3
 8015948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801594c:	b2da      	uxtb	r2, r3
 801594e:	69fb      	ldr	r3, [r7, #28]
 8015950:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015952:	69fb      	ldr	r3, [r7, #28]
 8015954:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015958:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	891b      	ldrh	r3, [r3, #8]
 801595e:	4618      	mov	r0, r3
 8015960:	f7f6 f932 	bl	800bbc8 <lwip_htons>
 8015964:	4603      	mov	r3, r0
 8015966:	461a      	mov	r2, r3
 8015968:	69fb      	ldr	r3, [r7, #28]
 801596a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801596c:	69fb      	ldr	r3, [r7, #28]
 801596e:	2200      	movs	r2, #0
 8015970:	719a      	strb	r2, [r3, #6]
 8015972:	2200      	movs	r2, #0
 8015974:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015976:	4b2a      	ldr	r3, [pc, #168]	; (8015a20 <ip4_output_if_src+0x154>)
 8015978:	881b      	ldrh	r3, [r3, #0]
 801597a:	4618      	mov	r0, r3
 801597c:	f7f6 f924 	bl	800bbc8 <lwip_htons>
 8015980:	4603      	mov	r3, r0
 8015982:	461a      	mov	r2, r3
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015988:	4b25      	ldr	r3, [pc, #148]	; (8015a20 <ip4_output_if_src+0x154>)
 801598a:	881b      	ldrh	r3, [r3, #0]
 801598c:	3301      	adds	r3, #1
 801598e:	b29a      	uxth	r2, r3
 8015990:	4b23      	ldr	r3, [pc, #140]	; (8015a20 <ip4_output_if_src+0x154>)
 8015992:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d104      	bne.n	80159a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801599a:	4b22      	ldr	r3, [pc, #136]	; (8015a24 <ip4_output_if_src+0x158>)
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	69fb      	ldr	r3, [r7, #28]
 80159a0:	60da      	str	r2, [r3, #12]
 80159a2:	e003      	b.n	80159ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	681a      	ldr	r2, [r3, #0]
 80159a8:	69fb      	ldr	r3, [r7, #28]
 80159aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	2200      	movs	r2, #0
 80159b0:	729a      	strb	r2, [r3, #10]
 80159b2:	2200      	movs	r2, #0
 80159b4:	72da      	strb	r2, [r3, #11]
 80159b6:	e00f      	b.n	80159d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	895b      	ldrh	r3, [r3, #10]
 80159bc:	2b13      	cmp	r3, #19
 80159be:	d802      	bhi.n	80159c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80159c0:	f06f 0301 	mvn.w	r3, #1
 80159c4:	e020      	b.n	8015a08 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	691b      	ldr	r3, [r3, #16]
 80159d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80159d2:	f107 0314 	add.w	r3, r7, #20
 80159d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80159d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d00c      	beq.n	80159fa <ip4_output_if_src+0x12e>
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	891a      	ldrh	r2, [r3, #8]
 80159e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d906      	bls.n	80159fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80159ec:	687a      	ldr	r2, [r7, #4]
 80159ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	f000 fe7d 	bl	80166f0 <ip4_frag>
 80159f6:	4603      	mov	r3, r0
 80159f8:	e006      	b.n	8015a08 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80159fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fc:	695b      	ldr	r3, [r3, #20]
 80159fe:	687a      	ldr	r2, [r7, #4]
 8015a00:	68f9      	ldr	r1, [r7, #12]
 8015a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a04:	4798      	blx	r3
 8015a06:	4603      	mov	r3, r0
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3720      	adds	r7, #32
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	0801d140 	.word	0x0801d140
 8015a14:	0801d174 	.word	0x0801d174
 8015a18:	0801d180 	.word	0x0801d180
 8015a1c:	0801d1a8 	.word	0x0801d1a8
 8015a20:	20011386 	.word	0x20011386
 8015a24:	0801d6a4 	.word	0x0801d6a4

08015a28 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b085      	sub	sp, #20
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
 8015a30:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a3c:	d002      	beq.n	8015a44 <ip4_addr_isbroadcast_u32+0x1c>
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d101      	bne.n	8015a48 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015a44:	2301      	movs	r3, #1
 8015a46:	e02a      	b.n	8015a9e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a4e:	f003 0302 	and.w	r3, r3, #2
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d101      	bne.n	8015a5a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015a56:	2300      	movs	r3, #0
 8015a58:	e021      	b.n	8015a9e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	3304      	adds	r3, #4
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	687a      	ldr	r2, [r7, #4]
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d101      	bne.n	8015a6a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	e019      	b.n	8015a9e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015a6a:	68fa      	ldr	r2, [r7, #12]
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	3304      	adds	r3, #4
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	405a      	eors	r2, r3
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	3308      	adds	r3, #8
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d10d      	bne.n	8015a9c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	3308      	adds	r3, #8
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	43da      	mvns	r2, r3
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	3308      	adds	r3, #8
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d101      	bne.n	8015a9c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	e000      	b.n	8015a9e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015a9c:	2300      	movs	r3, #0
  }
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3714      	adds	r7, #20
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa8:	4770      	bx	lr
	...

08015aac <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b08a      	sub	sp, #40	; 0x28
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8015ab6:	f107 030c 	add.w	r3, r7, #12
 8015aba:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8015ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015ac8:	3301      	adds	r3, #1
 8015aca:	4a89      	ldr	r2, [pc, #548]	; (8015cf0 <ip4addr_aton+0x244>)
 8015acc:	4413      	add	r3, r2
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	f003 0304 	and.w	r3, r3, #4
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d101      	bne.n	8015adc <ip4addr_aton+0x30>
      return 0;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	e105      	b.n	8015ce8 <ip4addr_aton+0x23c>
    }
    val = 0;
 8015adc:	2300      	movs	r3, #0
 8015ade:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8015ae0:	230a      	movs	r3, #10
 8015ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8015ae6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015aea:	2b30      	cmp	r3, #48	; 0x30
 8015aec:	d11c      	bne.n	8015b28 <ip4addr_aton+0x7c>
      c = *++cp;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	3301      	adds	r3, #1
 8015af2:	607b      	str	r3, [r7, #4]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8015afc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b00:	2b78      	cmp	r3, #120	; 0x78
 8015b02:	d003      	beq.n	8015b0c <ip4addr_aton+0x60>
 8015b04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b08:	2b58      	cmp	r3, #88	; 0x58
 8015b0a:	d10a      	bne.n	8015b22 <ip4addr_aton+0x76>
        base = 16;
 8015b0c:	2310      	movs	r3, #16
 8015b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	3301      	adds	r3, #1
 8015b16:	607b      	str	r3, [r7, #4]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015b20:	e002      	b.n	8015b28 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8015b22:	2308      	movs	r3, #8
 8015b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8015b28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b2c:	3301      	adds	r3, #1
 8015b2e:	4a70      	ldr	r2, [pc, #448]	; (8015cf0 <ip4addr_aton+0x244>)
 8015b30:	4413      	add	r3, r2
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	f003 0304 	and.w	r3, r3, #4
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d011      	beq.n	8015b60 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8015b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b42:	fb03 f202 	mul.w	r2, r3, r2
 8015b46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b4a:	4413      	add	r3, r2
 8015b4c:	3b30      	subs	r3, #48	; 0x30
 8015b4e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	3301      	adds	r3, #1
 8015b54:	607b      	str	r3, [r7, #4]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015b5e:	e7e3      	b.n	8015b28 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8015b60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015b64:	2b10      	cmp	r3, #16
 8015b66:	d127      	bne.n	8015bb8 <ip4addr_aton+0x10c>
 8015b68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b6c:	3301      	adds	r3, #1
 8015b6e:	4a60      	ldr	r2, [pc, #384]	; (8015cf0 <ip4addr_aton+0x244>)
 8015b70:	4413      	add	r3, r2
 8015b72:	781b      	ldrb	r3, [r3, #0]
 8015b74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d01d      	beq.n	8015bb8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8015b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7e:	011b      	lsls	r3, r3, #4
 8015b80:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015b84:	f102 010a 	add.w	r1, r2, #10
 8015b88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015b8c:	3201      	adds	r2, #1
 8015b8e:	4858      	ldr	r0, [pc, #352]	; (8015cf0 <ip4addr_aton+0x244>)
 8015b90:	4402      	add	r2, r0
 8015b92:	7812      	ldrb	r2, [r2, #0]
 8015b94:	f002 0203 	and.w	r2, r2, #3
 8015b98:	2a02      	cmp	r2, #2
 8015b9a:	d101      	bne.n	8015ba0 <ip4addr_aton+0xf4>
 8015b9c:	2261      	movs	r2, #97	; 0x61
 8015b9e:	e000      	b.n	8015ba2 <ip4addr_aton+0xf6>
 8015ba0:	2241      	movs	r2, #65	; 0x41
 8015ba2:	1a8a      	subs	r2, r1, r2
 8015ba4:	4313      	orrs	r3, r2
 8015ba6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	3301      	adds	r3, #1
 8015bac:	607b      	str	r3, [r7, #4]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8015bb6:	e7b7      	b.n	8015b28 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8015bb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8015bbe:	d114      	bne.n	8015bea <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8015bc0:	f107 030c 	add.w	r3, r7, #12
 8015bc4:	330c      	adds	r3, #12
 8015bc6:	69fa      	ldr	r2, [r7, #28]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d301      	bcc.n	8015bd0 <ip4addr_aton+0x124>
        return 0;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	e08b      	b.n	8015ce8 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8015bd0:	69fb      	ldr	r3, [r7, #28]
 8015bd2:	1d1a      	adds	r2, r3, #4
 8015bd4:	61fa      	str	r2, [r7, #28]
 8015bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bd8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	3301      	adds	r3, #1
 8015bde:	607b      	str	r3, [r7, #4]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8015be8:	e76c      	b.n	8015ac4 <ip4addr_aton+0x18>
    } else {
      break;
 8015bea:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8015bec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d00b      	beq.n	8015c0c <ip4addr_aton+0x160>
 8015bf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	4a3d      	ldr	r2, [pc, #244]	; (8015cf0 <ip4addr_aton+0x244>)
 8015bfc:	4413      	add	r3, r2
 8015bfe:	781b      	ldrb	r3, [r3, #0]
 8015c00:	f003 0308 	and.w	r3, r3, #8
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d101      	bne.n	8015c0c <ip4addr_aton+0x160>
    return 0;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	e06d      	b.n	8015ce8 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8015c0c:	f107 030c 	add.w	r3, r7, #12
 8015c10:	69fa      	ldr	r2, [r7, #28]
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	109b      	asrs	r3, r3, #2
 8015c16:	3301      	adds	r3, #1
 8015c18:	2b04      	cmp	r3, #4
 8015c1a:	d853      	bhi.n	8015cc4 <ip4addr_aton+0x218>
 8015c1c:	a201      	add	r2, pc, #4	; (adr r2, 8015c24 <ip4addr_aton+0x178>)
 8015c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c22:	bf00      	nop
 8015c24:	08015c39 	.word	0x08015c39
 8015c28:	08015cd3 	.word	0x08015cd3
 8015c2c:	08015c3d 	.word	0x08015c3d
 8015c30:	08015c5f 	.word	0x08015c5f
 8015c34:	08015c8d 	.word	0x08015c8d

    case 0:
      return 0;       /* initial nondigit */
 8015c38:	2300      	movs	r3, #0
 8015c3a:	e055      	b.n	8015ce8 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8015c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015c42:	d301      	bcc.n	8015c48 <ip4addr_aton+0x19c>
        return 0;
 8015c44:	2300      	movs	r3, #0
 8015c46:	e04f      	b.n	8015ce8 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2bff      	cmp	r3, #255	; 0xff
 8015c4c:	d901      	bls.n	8015c52 <ip4addr_aton+0x1a6>
        return 0;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	e04a      	b.n	8015ce8 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	061b      	lsls	r3, r3, #24
 8015c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c58:	4313      	orrs	r3, r2
 8015c5a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015c5c:	e03a      	b.n	8015cd4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8015c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c64:	d301      	bcc.n	8015c6a <ip4addr_aton+0x1be>
        return 0;
 8015c66:	2300      	movs	r3, #0
 8015c68:	e03e      	b.n	8015ce8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	2bff      	cmp	r3, #255	; 0xff
 8015c6e:	d802      	bhi.n	8015c76 <ip4addr_aton+0x1ca>
 8015c70:	693b      	ldr	r3, [r7, #16]
 8015c72:	2bff      	cmp	r3, #255	; 0xff
 8015c74:	d901      	bls.n	8015c7a <ip4addr_aton+0x1ce>
        return 0;
 8015c76:	2300      	movs	r3, #0
 8015c78:	e036      	b.n	8015ce8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	061a      	lsls	r2, r3, #24
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	041b      	lsls	r3, r3, #16
 8015c82:	4313      	orrs	r3, r2
 8015c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c86:	4313      	orrs	r3, r2
 8015c88:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015c8a:	e023      	b.n	8015cd4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	2bff      	cmp	r3, #255	; 0xff
 8015c90:	d901      	bls.n	8015c96 <ip4addr_aton+0x1ea>
        return 0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	e028      	b.n	8015ce8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2bff      	cmp	r3, #255	; 0xff
 8015c9a:	d805      	bhi.n	8015ca8 <ip4addr_aton+0x1fc>
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	2bff      	cmp	r3, #255	; 0xff
 8015ca0:	d802      	bhi.n	8015ca8 <ip4addr_aton+0x1fc>
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	2bff      	cmp	r3, #255	; 0xff
 8015ca6:	d901      	bls.n	8015cac <ip4addr_aton+0x200>
        return 0;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	e01d      	b.n	8015ce8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	061a      	lsls	r2, r3, #24
 8015cb0:	693b      	ldr	r3, [r7, #16]
 8015cb2:	041b      	lsls	r3, r3, #16
 8015cb4:	431a      	orrs	r2, r3
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	021b      	lsls	r3, r3, #8
 8015cba:	4313      	orrs	r3, r2
 8015cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cbe:	4313      	orrs	r3, r2
 8015cc0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015cc2:	e007      	b.n	8015cd4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8015cc4:	4b0b      	ldr	r3, [pc, #44]	; (8015cf4 <ip4addr_aton+0x248>)
 8015cc6:	22f9      	movs	r2, #249	; 0xf9
 8015cc8:	490b      	ldr	r1, [pc, #44]	; (8015cf8 <ip4addr_aton+0x24c>)
 8015cca:	480c      	ldr	r0, [pc, #48]	; (8015cfc <ip4addr_aton+0x250>)
 8015ccc:	f003 f840 	bl	8018d50 <iprintf>
      break;
 8015cd0:	e000      	b.n	8015cd4 <ip4addr_aton+0x228>
      break;
 8015cd2:	bf00      	nop
  }
  if (addr) {
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d005      	beq.n	8015ce6 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8015cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cdc:	f7f5 ff89 	bl	800bbf2 <lwip_htonl>
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8015ce6:	2301      	movs	r3, #1
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3728      	adds	r7, #40	; 0x28
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	0801d6c0 	.word	0x0801d6c0
 8015cf4:	0801d1d8 	.word	0x0801d1d8
 8015cf8:	0801d214 	.word	0x0801d214
 8015cfc:	0801d220 	.word	0x0801d220

08015d00 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b084      	sub	sp, #16
 8015d04:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015d06:	2300      	movs	r3, #0
 8015d08:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015d0a:	4b12      	ldr	r3, [pc, #72]	; (8015d54 <ip_reass_tmr+0x54>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015d10:	e018      	b.n	8015d44 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	7fdb      	ldrb	r3, [r3, #31]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d00b      	beq.n	8015d32 <ip_reass_tmr+0x32>
      r->timer--;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	7fdb      	ldrb	r3, [r3, #31]
 8015d1e:	3b01      	subs	r3, #1
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	60fb      	str	r3, [r7, #12]
 8015d30:	e008      	b.n	8015d44 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015d3c:	68b9      	ldr	r1, [r7, #8]
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f000 f80a 	bl	8015d58 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d1e3      	bne.n	8015d12 <ip_reass_tmr+0x12>
    }
  }
}
 8015d4a:	bf00      	nop
 8015d4c:	bf00      	nop
 8015d4e:	3710      	adds	r7, #16
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	20011388 	.word	0x20011388

08015d58 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b088      	sub	sp, #32
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015d62:	2300      	movs	r3, #0
 8015d64:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d105      	bne.n	8015d7a <ip_reass_free_complete_datagram+0x22>
 8015d6e:	4b45      	ldr	r3, [pc, #276]	; (8015e84 <ip_reass_free_complete_datagram+0x12c>)
 8015d70:	22ab      	movs	r2, #171	; 0xab
 8015d72:	4945      	ldr	r1, [pc, #276]	; (8015e88 <ip_reass_free_complete_datagram+0x130>)
 8015d74:	4845      	ldr	r0, [pc, #276]	; (8015e8c <ip_reass_free_complete_datagram+0x134>)
 8015d76:	f002 ffeb 	bl	8018d50 <iprintf>
  if (prev != NULL) {
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d00a      	beq.n	8015d96 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d005      	beq.n	8015d96 <ip_reass_free_complete_datagram+0x3e>
 8015d8a:	4b3e      	ldr	r3, [pc, #248]	; (8015e84 <ip_reass_free_complete_datagram+0x12c>)
 8015d8c:	22ad      	movs	r2, #173	; 0xad
 8015d8e:	4940      	ldr	r1, [pc, #256]	; (8015e90 <ip_reass_free_complete_datagram+0x138>)
 8015d90:	483e      	ldr	r0, [pc, #248]	; (8015e8c <ip_reass_free_complete_datagram+0x134>)
 8015d92:	f002 ffdd 	bl	8018d50 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	889b      	ldrh	r3, [r3, #4]
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d12a      	bne.n	8015dfe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	681a      	ldr	r2, [r3, #0]
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015db6:	69bb      	ldr	r3, [r7, #24]
 8015db8:	6858      	ldr	r0, [r3, #4]
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	3308      	adds	r3, #8
 8015dbe:	2214      	movs	r2, #20
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	f002 ffaf 	bl	8018d24 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015dc6:	2101      	movs	r1, #1
 8015dc8:	69b8      	ldr	r0, [r7, #24]
 8015dca:	f7ff fb1d 	bl	8015408 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015dce:	69b8      	ldr	r0, [r7, #24]
 8015dd0:	f7f7 fb8a 	bl	800d4e8 <pbuf_clen>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015dd8:	8bfa      	ldrh	r2, [r7, #30]
 8015dda:	8a7b      	ldrh	r3, [r7, #18]
 8015ddc:	4413      	add	r3, r2
 8015dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015de2:	db05      	blt.n	8015df0 <ip_reass_free_complete_datagram+0x98>
 8015de4:	4b27      	ldr	r3, [pc, #156]	; (8015e84 <ip_reass_free_complete_datagram+0x12c>)
 8015de6:	22bc      	movs	r2, #188	; 0xbc
 8015de8:	492a      	ldr	r1, [pc, #168]	; (8015e94 <ip_reass_free_complete_datagram+0x13c>)
 8015dea:	4828      	ldr	r0, [pc, #160]	; (8015e8c <ip_reass_free_complete_datagram+0x134>)
 8015dec:	f002 ffb0 	bl	8018d50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015df0:	8bfa      	ldrh	r2, [r7, #30]
 8015df2:	8a7b      	ldrh	r3, [r7, #18]
 8015df4:	4413      	add	r3, r2
 8015df6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015df8:	69b8      	ldr	r0, [r7, #24]
 8015dfa:	f7f7 fae7 	bl	800d3cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015e04:	e01f      	b.n	8015e46 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015e06:	69bb      	ldr	r3, [r7, #24]
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015e0c:	69bb      	ldr	r3, [r7, #24]
 8015e0e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f7f7 fb66 	bl	800d4e8 <pbuf_clen>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e20:	8bfa      	ldrh	r2, [r7, #30]
 8015e22:	8a7b      	ldrh	r3, [r7, #18]
 8015e24:	4413      	add	r3, r2
 8015e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e2a:	db05      	blt.n	8015e38 <ip_reass_free_complete_datagram+0xe0>
 8015e2c:	4b15      	ldr	r3, [pc, #84]	; (8015e84 <ip_reass_free_complete_datagram+0x12c>)
 8015e2e:	22cc      	movs	r2, #204	; 0xcc
 8015e30:	4918      	ldr	r1, [pc, #96]	; (8015e94 <ip_reass_free_complete_datagram+0x13c>)
 8015e32:	4816      	ldr	r0, [pc, #88]	; (8015e8c <ip_reass_free_complete_datagram+0x134>)
 8015e34:	f002 ff8c 	bl	8018d50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e38:	8bfa      	ldrh	r2, [r7, #30]
 8015e3a:	8a7b      	ldrh	r3, [r7, #18]
 8015e3c:	4413      	add	r3, r2
 8015e3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015e40:	68f8      	ldr	r0, [r7, #12]
 8015e42:	f7f7 fac3 	bl	800d3cc <pbuf_free>
  while (p != NULL) {
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d1dc      	bne.n	8015e06 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f000 f8c2 	bl	8015fd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015e54:	4b10      	ldr	r3, [pc, #64]	; (8015e98 <ip_reass_free_complete_datagram+0x140>)
 8015e56:	881b      	ldrh	r3, [r3, #0]
 8015e58:	8bfa      	ldrh	r2, [r7, #30]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d905      	bls.n	8015e6a <ip_reass_free_complete_datagram+0x112>
 8015e5e:	4b09      	ldr	r3, [pc, #36]	; (8015e84 <ip_reass_free_complete_datagram+0x12c>)
 8015e60:	22d2      	movs	r2, #210	; 0xd2
 8015e62:	490e      	ldr	r1, [pc, #56]	; (8015e9c <ip_reass_free_complete_datagram+0x144>)
 8015e64:	4809      	ldr	r0, [pc, #36]	; (8015e8c <ip_reass_free_complete_datagram+0x134>)
 8015e66:	f002 ff73 	bl	8018d50 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015e6a:	4b0b      	ldr	r3, [pc, #44]	; (8015e98 <ip_reass_free_complete_datagram+0x140>)
 8015e6c:	881a      	ldrh	r2, [r3, #0]
 8015e6e:	8bfb      	ldrh	r3, [r7, #30]
 8015e70:	1ad3      	subs	r3, r2, r3
 8015e72:	b29a      	uxth	r2, r3
 8015e74:	4b08      	ldr	r3, [pc, #32]	; (8015e98 <ip_reass_free_complete_datagram+0x140>)
 8015e76:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015e78:	8bfb      	ldrh	r3, [r7, #30]
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3720      	adds	r7, #32
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	0801d248 	.word	0x0801d248
 8015e88:	0801d284 	.word	0x0801d284
 8015e8c:	0801d290 	.word	0x0801d290
 8015e90:	0801d2b8 	.word	0x0801d2b8
 8015e94:	0801d2cc 	.word	0x0801d2cc
 8015e98:	2001138c 	.word	0x2001138c
 8015e9c:	0801d2ec 	.word	0x0801d2ec

08015ea0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b08a      	sub	sp, #40	; 0x28
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
 8015ea8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015ebe:	4b28      	ldr	r3, [pc, #160]	; (8015f60 <ip_reass_remove_oldest_datagram+0xc0>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015ec4:	e030      	b.n	8015f28 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec8:	695a      	ldr	r2, [r3, #20]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	68db      	ldr	r3, [r3, #12]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d10c      	bne.n	8015eec <ip_reass_remove_oldest_datagram+0x4c>
 8015ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed4:	699a      	ldr	r2, [r3, #24]
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	691b      	ldr	r3, [r3, #16]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d106      	bne.n	8015eec <ip_reass_remove_oldest_datagram+0x4c>
 8015ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee0:	899a      	ldrh	r2, [r3, #12]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	889b      	ldrh	r3, [r3, #4]
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d014      	beq.n	8015f16 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015ef2:	6a3b      	ldr	r3, [r7, #32]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d104      	bne.n	8015f02 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015efa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	61bb      	str	r3, [r7, #24]
 8015f00:	e009      	b.n	8015f16 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f04:	7fda      	ldrb	r2, [r3, #31]
 8015f06:	6a3b      	ldr	r3, [r7, #32]
 8015f08:	7fdb      	ldrb	r3, [r3, #31]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d803      	bhi.n	8015f16 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f12:	69fb      	ldr	r3, [r7, #28]
 8015f14:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d001      	beq.n	8015f22 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f20:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d1cb      	bne.n	8015ec6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015f2e:	6a3b      	ldr	r3, [r7, #32]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d008      	beq.n	8015f46 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015f34:	69b9      	ldr	r1, [r7, #24]
 8015f36:	6a38      	ldr	r0, [r7, #32]
 8015f38:	f7ff ff0e 	bl	8015d58 <ip_reass_free_complete_datagram>
 8015f3c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015f3e:	697a      	ldr	r2, [r7, #20]
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	4413      	add	r3, r2
 8015f44:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015f46:	697a      	ldr	r2, [r7, #20]
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	da02      	bge.n	8015f54 <ip_reass_remove_oldest_datagram+0xb4>
 8015f4e:	693b      	ldr	r3, [r7, #16]
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	dcac      	bgt.n	8015eae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015f54:	697b      	ldr	r3, [r7, #20]
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	3728      	adds	r7, #40	; 0x28
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	20011388 	.word	0x20011388

08015f64 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015f6e:	2004      	movs	r0, #4
 8015f70:	f7f6 fb12 	bl	800c598 <memp_malloc>
 8015f74:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d110      	bne.n	8015f9e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015f7c:	6839      	ldr	r1, [r7, #0]
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f7ff ff8e 	bl	8015ea0 <ip_reass_remove_oldest_datagram>
 8015f84:	4602      	mov	r2, r0
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	dc03      	bgt.n	8015f94 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015f8c:	2004      	movs	r0, #4
 8015f8e:	f7f6 fb03 	bl	800c598 <memp_malloc>
 8015f92:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d101      	bne.n	8015f9e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	e016      	b.n	8015fcc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015f9e:	2220      	movs	r2, #32
 8015fa0:	2100      	movs	r1, #0
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f002 fecc 	bl	8018d40 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	220f      	movs	r2, #15
 8015fac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015fae:	4b09      	ldr	r3, [pc, #36]	; (8015fd4 <ip_reass_enqueue_new_datagram+0x70>)
 8015fb0:	681a      	ldr	r2, [r3, #0]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015fb6:	4a07      	ldr	r2, [pc, #28]	; (8015fd4 <ip_reass_enqueue_new_datagram+0x70>)
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	3308      	adds	r3, #8
 8015fc0:	2214      	movs	r2, #20
 8015fc2:	6879      	ldr	r1, [r7, #4]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f002 fead 	bl	8018d24 <memcpy>
  return ipr;
 8015fca:	68fb      	ldr	r3, [r7, #12]
}
 8015fcc:	4618      	mov	r0, r3
 8015fce:	3710      	adds	r7, #16
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	20011388 	.word	0x20011388

08015fd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015fe2:	4b10      	ldr	r3, [pc, #64]	; (8016024 <ip_reass_dequeue_datagram+0x4c>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d104      	bne.n	8015ff6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4a0c      	ldr	r2, [pc, #48]	; (8016024 <ip_reass_dequeue_datagram+0x4c>)
 8015ff2:	6013      	str	r3, [r2, #0]
 8015ff4:	e00d      	b.n	8016012 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d106      	bne.n	801600a <ip_reass_dequeue_datagram+0x32>
 8015ffc:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <ip_reass_dequeue_datagram+0x50>)
 8015ffe:	f240 1245 	movw	r2, #325	; 0x145
 8016002:	490a      	ldr	r1, [pc, #40]	; (801602c <ip_reass_dequeue_datagram+0x54>)
 8016004:	480a      	ldr	r0, [pc, #40]	; (8016030 <ip_reass_dequeue_datagram+0x58>)
 8016006:	f002 fea3 	bl	8018d50 <iprintf>
    prev->next = ipr->next;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681a      	ldr	r2, [r3, #0]
 801600e:	683b      	ldr	r3, [r7, #0]
 8016010:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016012:	6879      	ldr	r1, [r7, #4]
 8016014:	2004      	movs	r0, #4
 8016016:	f7f6 fb35 	bl	800c684 <memp_free>
}
 801601a:	bf00      	nop
 801601c:	3708      	adds	r7, #8
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	20011388 	.word	0x20011388
 8016028:	0801d248 	.word	0x0801d248
 801602c:	0801d310 	.word	0x0801d310
 8016030:	0801d290 	.word	0x0801d290

08016034 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b08c      	sub	sp, #48	; 0x30
 8016038:	af00      	add	r7, sp, #0
 801603a:	60f8      	str	r0, [r7, #12]
 801603c:	60b9      	str	r1, [r7, #8]
 801603e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016040:	2300      	movs	r3, #0
 8016042:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016044:	2301      	movs	r3, #1
 8016046:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	885b      	ldrh	r3, [r3, #2]
 8016052:	b29b      	uxth	r3, r3
 8016054:	4618      	mov	r0, r3
 8016056:	f7f5 fdb7 	bl	800bbc8 <lwip_htons>
 801605a:	4603      	mov	r3, r0
 801605c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801605e:	69fb      	ldr	r3, [r7, #28]
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	f003 030f 	and.w	r3, r3, #15
 8016066:	b2db      	uxtb	r3, r3
 8016068:	009b      	lsls	r3, r3, #2
 801606a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801606c:	7e7b      	ldrb	r3, [r7, #25]
 801606e:	b29b      	uxth	r3, r3
 8016070:	8b7a      	ldrh	r2, [r7, #26]
 8016072:	429a      	cmp	r2, r3
 8016074:	d202      	bcs.n	801607c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801607a:	e135      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801607c:	7e7b      	ldrb	r3, [r7, #25]
 801607e:	b29b      	uxth	r3, r3
 8016080:	8b7a      	ldrh	r2, [r7, #26]
 8016082:	1ad3      	subs	r3, r2, r3
 8016084:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016086:	69fb      	ldr	r3, [r7, #28]
 8016088:	88db      	ldrh	r3, [r3, #6]
 801608a:	b29b      	uxth	r3, r3
 801608c:	4618      	mov	r0, r3
 801608e:	f7f5 fd9b 	bl	800bbc8 <lwip_htons>
 8016092:	4603      	mov	r3, r0
 8016094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016098:	b29b      	uxth	r3, r3
 801609a:	00db      	lsls	r3, r3, #3
 801609c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80160a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a6:	2200      	movs	r2, #0
 80160a8:	701a      	strb	r2, [r3, #0]
 80160aa:	2200      	movs	r2, #0
 80160ac:	705a      	strb	r2, [r3, #1]
 80160ae:	2200      	movs	r2, #0
 80160b0:	709a      	strb	r2, [r3, #2]
 80160b2:	2200      	movs	r2, #0
 80160b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80160b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b8:	8afa      	ldrh	r2, [r7, #22]
 80160ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80160bc:	8afa      	ldrh	r2, [r7, #22]
 80160be:	8b7b      	ldrh	r3, [r7, #26]
 80160c0:	4413      	add	r3, r2
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80160c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ca:	88db      	ldrh	r3, [r3, #6]
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	8afa      	ldrh	r2, [r7, #22]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d902      	bls.n	80160da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80160d8:	e106      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	685b      	ldr	r3, [r3, #4]
 80160de:	627b      	str	r3, [r7, #36]	; 0x24
 80160e0:	e068      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80160e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80160e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ea:	889b      	ldrh	r3, [r3, #4]
 80160ec:	b29a      	uxth	r2, r3
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	889b      	ldrh	r3, [r3, #4]
 80160f2:	b29b      	uxth	r3, r3
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d235      	bcs.n	8016164 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80160f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80160fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016100:	2b00      	cmp	r3, #0
 8016102:	d020      	beq.n	8016146 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016106:	889b      	ldrh	r3, [r3, #4]
 8016108:	b29a      	uxth	r2, r3
 801610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610c:	88db      	ldrh	r3, [r3, #6]
 801610e:	b29b      	uxth	r3, r3
 8016110:	429a      	cmp	r2, r3
 8016112:	d307      	bcc.n	8016124 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016116:	88db      	ldrh	r3, [r3, #6]
 8016118:	b29a      	uxth	r2, r3
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	889b      	ldrh	r3, [r3, #4]
 801611e:	b29b      	uxth	r3, r3
 8016120:	429a      	cmp	r2, r3
 8016122:	d902      	bls.n	801612a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016128:	e0de      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016132:	88db      	ldrh	r3, [r3, #6]
 8016134:	b29a      	uxth	r2, r3
 8016136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016138:	889b      	ldrh	r3, [r3, #4]
 801613a:	b29b      	uxth	r3, r3
 801613c:	429a      	cmp	r2, r3
 801613e:	d03d      	beq.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016140:	2300      	movs	r3, #0
 8016142:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016144:	e03a      	b.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016148:	88db      	ldrh	r3, [r3, #6]
 801614a:	b29a      	uxth	r2, r3
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	889b      	ldrh	r3, [r3, #4]
 8016150:	b29b      	uxth	r3, r3
 8016152:	429a      	cmp	r2, r3
 8016154:	d902      	bls.n	801615c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801615a:	e0c5      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	68ba      	ldr	r2, [r7, #8]
 8016160:	605a      	str	r2, [r3, #4]
      break;
 8016162:	e02b      	b.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016166:	889b      	ldrh	r3, [r3, #4]
 8016168:	b29a      	uxth	r2, r3
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	889b      	ldrh	r3, [r3, #4]
 801616e:	b29b      	uxth	r3, r3
 8016170:	429a      	cmp	r2, r3
 8016172:	d102      	bne.n	801617a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016178:	e0b6      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617c:	889b      	ldrh	r3, [r3, #4]
 801617e:	b29a      	uxth	r2, r3
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	88db      	ldrh	r3, [r3, #6]
 8016184:	b29b      	uxth	r3, r3
 8016186:	429a      	cmp	r2, r3
 8016188:	d202      	bcs.n	8016190 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801618a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801618e:	e0ab      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016192:	2b00      	cmp	r3, #0
 8016194:	d009      	beq.n	80161aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016198:	88db      	ldrh	r3, [r3, #6]
 801619a:	b29a      	uxth	r2, r3
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	889b      	ldrh	r3, [r3, #4]
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d001      	beq.n	80161aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80161b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d193      	bne.n	80160e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80161ba:	e000      	b.n	80161be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80161bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80161be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d12d      	bne.n	8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80161c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d01c      	beq.n	8016204 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	88db      	ldrh	r3, [r3, #6]
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d2:	889b      	ldrh	r3, [r3, #4]
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d906      	bls.n	80161e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80161da:	4b45      	ldr	r3, [pc, #276]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80161e0:	4944      	ldr	r1, [pc, #272]	; (80162f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80161e2:	4845      	ldr	r0, [pc, #276]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161e4:	f002 fdb4 	bl	8018d50 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80161e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80161ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f0:	88db      	ldrh	r3, [r3, #6]
 80161f2:	b29a      	uxth	r2, r3
 80161f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f6:	889b      	ldrh	r3, [r3, #4]
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d010      	beq.n	8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80161fe:	2300      	movs	r3, #0
 8016200:	623b      	str	r3, [r7, #32]
 8016202:	e00d      	b.n	8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d006      	beq.n	801621a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801620c:	4b38      	ldr	r3, [pc, #224]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801620e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016212:	493a      	ldr	r1, [pc, #232]	; (80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016214:	4838      	ldr	r0, [pc, #224]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016216:	f002 fd9b 	bl	8018d50 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	68ba      	ldr	r2, [r7, #8]
 801621e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d105      	bne.n	8016232 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	7f9b      	ldrb	r3, [r3, #30]
 801622a:	f003 0301 	and.w	r3, r3, #1
 801622e:	2b00      	cmp	r3, #0
 8016230:	d059      	beq.n	80162e6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016232:	6a3b      	ldr	r3, [r7, #32]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d04f      	beq.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d006      	beq.n	801624e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	685b      	ldr	r3, [r3, #4]
 8016246:	889b      	ldrh	r3, [r3, #4]
 8016248:	b29b      	uxth	r3, r3
 801624a:	2b00      	cmp	r3, #0
 801624c:	d002      	beq.n	8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801624e:	2300      	movs	r3, #0
 8016250:	623b      	str	r3, [r7, #32]
 8016252:	e041      	b.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016256:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801625e:	e012      	b.n	8016286 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016268:	88db      	ldrh	r3, [r3, #6]
 801626a:	b29a      	uxth	r2, r3
 801626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626e:	889b      	ldrh	r3, [r3, #4]
 8016270:	b29b      	uxth	r3, r3
 8016272:	429a      	cmp	r2, r3
 8016274:	d002      	beq.n	801627c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016276:	2300      	movs	r3, #0
 8016278:	623b      	str	r3, [r7, #32]
            break;
 801627a:	e007      	b.n	801628c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016288:	2b00      	cmp	r3, #0
 801628a:	d1e9      	bne.n	8016260 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801628c:	6a3b      	ldr	r3, [r7, #32]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d022      	beq.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	685b      	ldr	r3, [r3, #4]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d106      	bne.n	80162a8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801629a:	4b15      	ldr	r3, [pc, #84]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801629c:	f240 12df 	movw	r2, #479	; 0x1df
 80162a0:	4917      	ldr	r1, [pc, #92]	; (8016300 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80162a2:	4815      	ldr	r0, [pc, #84]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162a4:	f002 fd54 	bl	8018d50 <iprintf>
          LWIP_ASSERT("sanity check",
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d106      	bne.n	80162c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80162b4:	4b0e      	ldr	r3, [pc, #56]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80162ba:	4911      	ldr	r1, [pc, #68]	; (8016300 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80162bc:	480e      	ldr	r0, [pc, #56]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162be:	f002 fd47 	bl	8018d50 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80162c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d006      	beq.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80162ca:	4b09      	ldr	r3, [pc, #36]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162cc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80162d0:	490c      	ldr	r1, [pc, #48]	; (8016304 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80162d2:	4809      	ldr	r0, [pc, #36]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162d4:	f002 fd3c 	bl	8018d50 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80162d8:	6a3b      	ldr	r3, [r7, #32]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	bf14      	ite	ne
 80162de:	2301      	movne	r3, #1
 80162e0:	2300      	moveq	r3, #0
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	e000      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80162e6:	2300      	movs	r3, #0
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3730      	adds	r7, #48	; 0x30
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	0801d248 	.word	0x0801d248
 80162f4:	0801d32c 	.word	0x0801d32c
 80162f8:	0801d290 	.word	0x0801d290
 80162fc:	0801d34c 	.word	0x0801d34c
 8016300:	0801d384 	.word	0x0801d384
 8016304:	0801d394 	.word	0x0801d394

08016308 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b08e      	sub	sp, #56	; 0x38
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	f003 030f 	and.w	r3, r3, #15
 801631e:	b2db      	uxtb	r3, r3
 8016320:	009b      	lsls	r3, r3, #2
 8016322:	b2db      	uxtb	r3, r3
 8016324:	2b14      	cmp	r3, #20
 8016326:	f040 8171 	bne.w	801660c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632c:	88db      	ldrh	r3, [r3, #6]
 801632e:	b29b      	uxth	r3, r3
 8016330:	4618      	mov	r0, r3
 8016332:	f7f5 fc49 	bl	800bbc8 <lwip_htons>
 8016336:	4603      	mov	r3, r0
 8016338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801633c:	b29b      	uxth	r3, r3
 801633e:	00db      	lsls	r3, r3, #3
 8016340:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016344:	885b      	ldrh	r3, [r3, #2]
 8016346:	b29b      	uxth	r3, r3
 8016348:	4618      	mov	r0, r3
 801634a:	f7f5 fc3d 	bl	800bbc8 <lwip_htons>
 801634e:	4603      	mov	r3, r0
 8016350:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	f003 030f 	and.w	r3, r3, #15
 801635a:	b2db      	uxtb	r3, r3
 801635c:	009b      	lsls	r3, r3, #2
 801635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016366:	b29b      	uxth	r3, r3
 8016368:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801636a:	429a      	cmp	r2, r3
 801636c:	f0c0 8150 	bcc.w	8016610 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016374:	b29b      	uxth	r3, r3
 8016376:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016378:	1ad3      	subs	r3, r2, r3
 801637a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f7f7 f8b3 	bl	800d4e8 <pbuf_clen>
 8016382:	4603      	mov	r3, r0
 8016384:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016386:	4b8c      	ldr	r3, [pc, #560]	; (80165b8 <ip4_reass+0x2b0>)
 8016388:	881b      	ldrh	r3, [r3, #0]
 801638a:	461a      	mov	r2, r3
 801638c:	8c3b      	ldrh	r3, [r7, #32]
 801638e:	4413      	add	r3, r2
 8016390:	2b0a      	cmp	r3, #10
 8016392:	dd10      	ble.n	80163b6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016394:	8c3b      	ldrh	r3, [r7, #32]
 8016396:	4619      	mov	r1, r3
 8016398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801639a:	f7ff fd81 	bl	8015ea0 <ip_reass_remove_oldest_datagram>
 801639e:	4603      	mov	r3, r0
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	f000 8137 	beq.w	8016614 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80163a6:	4b84      	ldr	r3, [pc, #528]	; (80165b8 <ip4_reass+0x2b0>)
 80163a8:	881b      	ldrh	r3, [r3, #0]
 80163aa:	461a      	mov	r2, r3
 80163ac:	8c3b      	ldrh	r3, [r7, #32]
 80163ae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80163b0:	2b0a      	cmp	r3, #10
 80163b2:	f300 812f 	bgt.w	8016614 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80163b6:	4b81      	ldr	r3, [pc, #516]	; (80165bc <ip4_reass+0x2b4>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	633b      	str	r3, [r7, #48]	; 0x30
 80163bc:	e015      	b.n	80163ea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80163be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c0:	695a      	ldr	r2, [r3, #20]
 80163c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c4:	68db      	ldr	r3, [r3, #12]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d10c      	bne.n	80163e4 <ip4_reass+0xdc>
 80163ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163cc:	699a      	ldr	r2, [r3, #24]
 80163ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d0:	691b      	ldr	r3, [r3, #16]
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d106      	bne.n	80163e4 <ip4_reass+0xdc>
 80163d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d8:	899a      	ldrh	r2, [r3, #12]
 80163da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163dc:	889b      	ldrh	r3, [r3, #4]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d006      	beq.n	80163f2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80163e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	633b      	str	r3, [r7, #48]	; 0x30
 80163ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d1e6      	bne.n	80163be <ip4_reass+0xb6>
 80163f0:	e000      	b.n	80163f4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80163f2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80163f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d109      	bne.n	801640e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80163fa:	8c3b      	ldrh	r3, [r7, #32]
 80163fc:	4619      	mov	r1, r3
 80163fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016400:	f7ff fdb0 	bl	8015f64 <ip_reass_enqueue_new_datagram>
 8016404:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016408:	2b00      	cmp	r3, #0
 801640a:	d11c      	bne.n	8016446 <ip4_reass+0x13e>
      goto nullreturn;
 801640c:	e105      	b.n	801661a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016410:	88db      	ldrh	r3, [r3, #6]
 8016412:	b29b      	uxth	r3, r3
 8016414:	4618      	mov	r0, r3
 8016416:	f7f5 fbd7 	bl	800bbc8 <lwip_htons>
 801641a:	4603      	mov	r3, r0
 801641c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016420:	2b00      	cmp	r3, #0
 8016422:	d110      	bne.n	8016446 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016426:	89db      	ldrh	r3, [r3, #14]
 8016428:	4618      	mov	r0, r3
 801642a:	f7f5 fbcd 	bl	800bbc8 <lwip_htons>
 801642e:	4603      	mov	r3, r0
 8016430:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016434:	2b00      	cmp	r3, #0
 8016436:	d006      	beq.n	8016446 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801643a:	3308      	adds	r3, #8
 801643c:	2214      	movs	r2, #20
 801643e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016440:	4618      	mov	r0, r3
 8016442:	f002 fc6f 	bl	8018d24 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016448:	88db      	ldrh	r3, [r3, #6]
 801644a:	b29b      	uxth	r3, r3
 801644c:	f003 0320 	and.w	r3, r3, #32
 8016450:	2b00      	cmp	r3, #0
 8016452:	bf0c      	ite	eq
 8016454:	2301      	moveq	r3, #1
 8016456:	2300      	movne	r3, #0
 8016458:	b2db      	uxtb	r3, r3
 801645a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d00e      	beq.n	8016480 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016462:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016466:	4413      	add	r3, r2
 8016468:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801646a:	8b7a      	ldrh	r2, [r7, #26]
 801646c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801646e:	429a      	cmp	r2, r3
 8016470:	f0c0 80a0 	bcc.w	80165b4 <ip4_reass+0x2ac>
 8016474:	8b7b      	ldrh	r3, [r7, #26]
 8016476:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801647a:	4293      	cmp	r3, r2
 801647c:	f200 809a 	bhi.w	80165b4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016480:	69fa      	ldr	r2, [r7, #28]
 8016482:	6879      	ldr	r1, [r7, #4]
 8016484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016486:	f7ff fdd5 	bl	8016034 <ip_reass_chain_frag_into_datagram_and_validate>
 801648a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801648c:	697b      	ldr	r3, [r7, #20]
 801648e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016492:	f000 809b 	beq.w	80165cc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016496:	4b48      	ldr	r3, [pc, #288]	; (80165b8 <ip4_reass+0x2b0>)
 8016498:	881a      	ldrh	r2, [r3, #0]
 801649a:	8c3b      	ldrh	r3, [r7, #32]
 801649c:	4413      	add	r3, r2
 801649e:	b29a      	uxth	r2, r3
 80164a0:	4b45      	ldr	r3, [pc, #276]	; (80165b8 <ip4_reass+0x2b0>)
 80164a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80164a4:	69fb      	ldr	r3, [r7, #28]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d00d      	beq.n	80164c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80164aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80164ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164ae:	4413      	add	r3, r2
 80164b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80164b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b4:	8a7a      	ldrh	r2, [r7, #18]
 80164b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80164b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ba:	7f9b      	ldrb	r3, [r3, #30]
 80164bc:	f043 0301 	orr.w	r3, r3, #1
 80164c0:	b2da      	uxtb	r2, r3
 80164c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	2b01      	cmp	r3, #1
 80164ca:	d171      	bne.n	80165b0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80164cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ce:	8b9b      	ldrh	r3, [r3, #28]
 80164d0:	3314      	adds	r3, #20
 80164d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80164d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80164de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80164e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e8:	3308      	adds	r3, #8
 80164ea:	2214      	movs	r2, #20
 80164ec:	4619      	mov	r1, r3
 80164ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164f0:	f002 fc18 	bl	8018d24 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80164f4:	8a3b      	ldrh	r3, [r7, #16]
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7f5 fb66 	bl	800bbc8 <lwip_htons>
 80164fc:	4603      	mov	r3, r0
 80164fe:	461a      	mov	r2, r3
 8016500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016502:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016506:	2200      	movs	r2, #0
 8016508:	719a      	strb	r2, [r3, #6]
 801650a:	2200      	movs	r2, #0
 801650c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016510:	2200      	movs	r2, #0
 8016512:	729a      	strb	r2, [r3, #10]
 8016514:	2200      	movs	r2, #0
 8016516:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801651e:	e00d      	b.n	801653c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016526:	2114      	movs	r1, #20
 8016528:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801652a:	f7f6 fec9 	bl	800d2c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801652e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f7f7 f819 	bl	800d568 <pbuf_cat>
      r = iprh->next_pbuf;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801653e:	2b00      	cmp	r3, #0
 8016540:	d1ee      	bne.n	8016520 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016542:	4b1e      	ldr	r3, [pc, #120]	; (80165bc <ip4_reass+0x2b4>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016548:	429a      	cmp	r2, r3
 801654a:	d102      	bne.n	8016552 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801654c:	2300      	movs	r3, #0
 801654e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016550:	e010      	b.n	8016574 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016552:	4b1a      	ldr	r3, [pc, #104]	; (80165bc <ip4_reass+0x2b4>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016558:	e007      	b.n	801656a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016560:	429a      	cmp	r2, r3
 8016562:	d006      	beq.n	8016572 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	62fb      	str	r3, [r7, #44]	; 0x2c
 801656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656c:	2b00      	cmp	r3, #0
 801656e:	d1f4      	bne.n	801655a <ip4_reass+0x252>
 8016570:	e000      	b.n	8016574 <ip4_reass+0x26c>
          break;
 8016572:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016578:	f7ff fd2e 	bl	8015fd8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f7f6 ffb3 	bl	800d4e8 <pbuf_clen>
 8016582:	4603      	mov	r3, r0
 8016584:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016586:	4b0c      	ldr	r3, [pc, #48]	; (80165b8 <ip4_reass+0x2b0>)
 8016588:	881b      	ldrh	r3, [r3, #0]
 801658a:	8c3a      	ldrh	r2, [r7, #32]
 801658c:	429a      	cmp	r2, r3
 801658e:	d906      	bls.n	801659e <ip4_reass+0x296>
 8016590:	4b0b      	ldr	r3, [pc, #44]	; (80165c0 <ip4_reass+0x2b8>)
 8016592:	f240 229b 	movw	r2, #667	; 0x29b
 8016596:	490b      	ldr	r1, [pc, #44]	; (80165c4 <ip4_reass+0x2bc>)
 8016598:	480b      	ldr	r0, [pc, #44]	; (80165c8 <ip4_reass+0x2c0>)
 801659a:	f002 fbd9 	bl	8018d50 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801659e:	4b06      	ldr	r3, [pc, #24]	; (80165b8 <ip4_reass+0x2b0>)
 80165a0:	881a      	ldrh	r2, [r3, #0]
 80165a2:	8c3b      	ldrh	r3, [r7, #32]
 80165a4:	1ad3      	subs	r3, r2, r3
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	4b03      	ldr	r3, [pc, #12]	; (80165b8 <ip4_reass+0x2b0>)
 80165aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	e038      	b.n	8016622 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80165b0:	2300      	movs	r3, #0
 80165b2:	e036      	b.n	8016622 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80165b4:	bf00      	nop
 80165b6:	e00a      	b.n	80165ce <ip4_reass+0x2c6>
 80165b8:	2001138c 	.word	0x2001138c
 80165bc:	20011388 	.word	0x20011388
 80165c0:	0801d248 	.word	0x0801d248
 80165c4:	0801d3b8 	.word	0x0801d3b8
 80165c8:	0801d290 	.word	0x0801d290
    goto nullreturn_ipr;
 80165cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80165ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d106      	bne.n	80165e2 <ip4_reass+0x2da>
 80165d4:	4b15      	ldr	r3, [pc, #84]	; (801662c <ip4_reass+0x324>)
 80165d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80165da:	4915      	ldr	r1, [pc, #84]	; (8016630 <ip4_reass+0x328>)
 80165dc:	4815      	ldr	r0, [pc, #84]	; (8016634 <ip4_reass+0x32c>)
 80165de:	f002 fbb7 	bl	8018d50 <iprintf>
  if (ipr->p == NULL) {
 80165e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d116      	bne.n	8016618 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80165ea:	4b13      	ldr	r3, [pc, #76]	; (8016638 <ip4_reass+0x330>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165f0:	429a      	cmp	r2, r3
 80165f2:	d006      	beq.n	8016602 <ip4_reass+0x2fa>
 80165f4:	4b0d      	ldr	r3, [pc, #52]	; (801662c <ip4_reass+0x324>)
 80165f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80165fa:	4910      	ldr	r1, [pc, #64]	; (801663c <ip4_reass+0x334>)
 80165fc:	480d      	ldr	r0, [pc, #52]	; (8016634 <ip4_reass+0x32c>)
 80165fe:	f002 fba7 	bl	8018d50 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016602:	2100      	movs	r1, #0
 8016604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016606:	f7ff fce7 	bl	8015fd8 <ip_reass_dequeue_datagram>
 801660a:	e006      	b.n	801661a <ip4_reass+0x312>
    goto nullreturn;
 801660c:	bf00      	nop
 801660e:	e004      	b.n	801661a <ip4_reass+0x312>
    goto nullreturn;
 8016610:	bf00      	nop
 8016612:	e002      	b.n	801661a <ip4_reass+0x312>
      goto nullreturn;
 8016614:	bf00      	nop
 8016616:	e000      	b.n	801661a <ip4_reass+0x312>
  }

nullreturn:
 8016618:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7f6 fed6 	bl	800d3cc <pbuf_free>
  return NULL;
 8016620:	2300      	movs	r3, #0
}
 8016622:	4618      	mov	r0, r3
 8016624:	3738      	adds	r7, #56	; 0x38
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	0801d248 	.word	0x0801d248
 8016630:	0801d3d4 	.word	0x0801d3d4
 8016634:	0801d290 	.word	0x0801d290
 8016638:	20011388 	.word	0x20011388
 801663c:	0801d3e0 	.word	0x0801d3e0

08016640 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016644:	2005      	movs	r0, #5
 8016646:	f7f5 ffa7 	bl	800c598 <memp_malloc>
 801664a:	4603      	mov	r3, r0
}
 801664c:	4618      	mov	r0, r3
 801664e:	bd80      	pop	{r7, pc}

08016650 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d106      	bne.n	801666c <ip_frag_free_pbuf_custom_ref+0x1c>
 801665e:	4b07      	ldr	r3, [pc, #28]	; (801667c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016660:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016664:	4906      	ldr	r1, [pc, #24]	; (8016680 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016666:	4807      	ldr	r0, [pc, #28]	; (8016684 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016668:	f002 fb72 	bl	8018d50 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801666c:	6879      	ldr	r1, [r7, #4]
 801666e:	2005      	movs	r0, #5
 8016670:	f7f6 f808 	bl	800c684 <memp_free>
}
 8016674:	bf00      	nop
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}
 801667c:	0801d248 	.word	0x0801d248
 8016680:	0801d400 	.word	0x0801d400
 8016684:	0801d290 	.word	0x0801d290

08016688 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d106      	bne.n	80166a8 <ipfrag_free_pbuf_custom+0x20>
 801669a:	4b11      	ldr	r3, [pc, #68]	; (80166e0 <ipfrag_free_pbuf_custom+0x58>)
 801669c:	f240 22ce 	movw	r2, #718	; 0x2ce
 80166a0:	4910      	ldr	r1, [pc, #64]	; (80166e4 <ipfrag_free_pbuf_custom+0x5c>)
 80166a2:	4811      	ldr	r0, [pc, #68]	; (80166e8 <ipfrag_free_pbuf_custom+0x60>)
 80166a4:	f002 fb54 	bl	8018d50 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80166a8:	68fa      	ldr	r2, [r7, #12]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d006      	beq.n	80166be <ipfrag_free_pbuf_custom+0x36>
 80166b0:	4b0b      	ldr	r3, [pc, #44]	; (80166e0 <ipfrag_free_pbuf_custom+0x58>)
 80166b2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80166b6:	490d      	ldr	r1, [pc, #52]	; (80166ec <ipfrag_free_pbuf_custom+0x64>)
 80166b8:	480b      	ldr	r0, [pc, #44]	; (80166e8 <ipfrag_free_pbuf_custom+0x60>)
 80166ba:	f002 fb49 	bl	8018d50 <iprintf>
  if (pcr->original != NULL) {
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	695b      	ldr	r3, [r3, #20]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d004      	beq.n	80166d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	695b      	ldr	r3, [r3, #20]
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7f6 fe7e 	bl	800d3cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80166d0:	68f8      	ldr	r0, [r7, #12]
 80166d2:	f7ff ffbd 	bl	8016650 <ip_frag_free_pbuf_custom_ref>
}
 80166d6:	bf00      	nop
 80166d8:	3710      	adds	r7, #16
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}
 80166de:	bf00      	nop
 80166e0:	0801d248 	.word	0x0801d248
 80166e4:	0801d40c 	.word	0x0801d40c
 80166e8:	0801d290 	.word	0x0801d290
 80166ec:	0801d418 	.word	0x0801d418

080166f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b094      	sub	sp, #80	; 0x50
 80166f4:	af02      	add	r7, sp, #8
 80166f6:	60f8      	str	r0, [r7, #12]
 80166f8:	60b9      	str	r1, [r7, #8]
 80166fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80166fc:	2300      	movs	r3, #0
 80166fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016706:	3b14      	subs	r3, #20
 8016708:	2b00      	cmp	r3, #0
 801670a:	da00      	bge.n	801670e <ip4_frag+0x1e>
 801670c:	3307      	adds	r3, #7
 801670e:	10db      	asrs	r3, r3, #3
 8016710:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016712:	2314      	movs	r3, #20
 8016714:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801671e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	f003 030f 	and.w	r3, r3, #15
 8016728:	b2db      	uxtb	r3, r3
 801672a:	009b      	lsls	r3, r3, #2
 801672c:	b2db      	uxtb	r3, r3
 801672e:	2b14      	cmp	r3, #20
 8016730:	d002      	beq.n	8016738 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016732:	f06f 0305 	mvn.w	r3, #5
 8016736:	e110      	b.n	801695a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	895b      	ldrh	r3, [r3, #10]
 801673c:	2b13      	cmp	r3, #19
 801673e:	d809      	bhi.n	8016754 <ip4_frag+0x64>
 8016740:	4b88      	ldr	r3, [pc, #544]	; (8016964 <ip4_frag+0x274>)
 8016742:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016746:	4988      	ldr	r1, [pc, #544]	; (8016968 <ip4_frag+0x278>)
 8016748:	4888      	ldr	r0, [pc, #544]	; (801696c <ip4_frag+0x27c>)
 801674a:	f002 fb01 	bl	8018d50 <iprintf>
 801674e:	f06f 0305 	mvn.w	r3, #5
 8016752:	e102      	b.n	801695a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016756:	88db      	ldrh	r3, [r3, #6]
 8016758:	b29b      	uxth	r3, r3
 801675a:	4618      	mov	r0, r3
 801675c:	f7f5 fa34 	bl	800bbc8 <lwip_htons>
 8016760:	4603      	mov	r3, r0
 8016762:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016764:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016766:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801676a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801676e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016774:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	891b      	ldrh	r3, [r3, #8]
 801677a:	3b14      	subs	r3, #20
 801677c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016780:	e0e1      	b.n	8016946 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016782:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	b29b      	uxth	r3, r3
 8016788:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801678c:	4293      	cmp	r3, r2
 801678e:	bf28      	it	cs
 8016790:	4613      	movcs	r3, r2
 8016792:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016794:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016798:	2114      	movs	r1, #20
 801679a:	200e      	movs	r0, #14
 801679c:	f7f6 fb32 	bl	800ce04 <pbuf_alloc>
 80167a0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80167a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	f000 80d5 	beq.w	8016954 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80167aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ac:	895b      	ldrh	r3, [r3, #10]
 80167ae:	2b13      	cmp	r3, #19
 80167b0:	d806      	bhi.n	80167c0 <ip4_frag+0xd0>
 80167b2:	4b6c      	ldr	r3, [pc, #432]	; (8016964 <ip4_frag+0x274>)
 80167b4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80167b8:	496d      	ldr	r1, [pc, #436]	; (8016970 <ip4_frag+0x280>)
 80167ba:	486c      	ldr	r0, [pc, #432]	; (801696c <ip4_frag+0x27c>)
 80167bc:	f002 fac8 	bl	8018d50 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80167c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	2214      	movs	r2, #20
 80167c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80167c8:	4618      	mov	r0, r3
 80167ca:	f002 faab 	bl	8018d24 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80167ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80167d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80167da:	e064      	b.n	80168a6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	895a      	ldrh	r2, [r3, #10]
 80167e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80167e2:	1ad3      	subs	r3, r2, r3
 80167e4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	895b      	ldrh	r3, [r3, #10]
 80167ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d906      	bls.n	80167fe <ip4_frag+0x10e>
 80167f0:	4b5c      	ldr	r3, [pc, #368]	; (8016964 <ip4_frag+0x274>)
 80167f2:	f240 322d 	movw	r2, #813	; 0x32d
 80167f6:	495f      	ldr	r1, [pc, #380]	; (8016974 <ip4_frag+0x284>)
 80167f8:	485c      	ldr	r0, [pc, #368]	; (801696c <ip4_frag+0x27c>)
 80167fa:	f002 faa9 	bl	8018d50 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80167fe:	8bfa      	ldrh	r2, [r7, #30]
 8016800:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016804:	4293      	cmp	r3, r2
 8016806:	bf28      	it	cs
 8016808:	4613      	movcs	r3, r2
 801680a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801680e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016812:	2b00      	cmp	r3, #0
 8016814:	d105      	bne.n	8016822 <ip4_frag+0x132>
        poff = 0;
 8016816:	2300      	movs	r3, #0
 8016818:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	60fb      	str	r3, [r7, #12]
        continue;
 8016820:	e041      	b.n	80168a6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016822:	f7ff ff0d 	bl	8016640 <ip_frag_alloc_pbuf_custom_ref>
 8016826:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016828:	69bb      	ldr	r3, [r7, #24]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d103      	bne.n	8016836 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801682e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016830:	f7f6 fdcc 	bl	800d3cc <pbuf_free>
        goto memerr;
 8016834:	e08f      	b.n	8016956 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016836:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801683c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801683e:	4413      	add	r3, r2
 8016840:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016844:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016848:	9201      	str	r2, [sp, #4]
 801684a:	9300      	str	r3, [sp, #0]
 801684c:	4603      	mov	r3, r0
 801684e:	2241      	movs	r2, #65	; 0x41
 8016850:	2000      	movs	r0, #0
 8016852:	f7f6 fc01 	bl	800d058 <pbuf_alloced_custom>
 8016856:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d106      	bne.n	801686c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801685e:	69b8      	ldr	r0, [r7, #24]
 8016860:	f7ff fef6 	bl	8016650 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016866:	f7f6 fdb1 	bl	800d3cc <pbuf_free>
        goto memerr;
 801686a:	e074      	b.n	8016956 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801686c:	68f8      	ldr	r0, [r7, #12]
 801686e:	f7f6 fe53 	bl	800d518 <pbuf_ref>
      pcr->original = p;
 8016872:	69bb      	ldr	r3, [r7, #24]
 8016874:	68fa      	ldr	r2, [r7, #12]
 8016876:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016878:	69bb      	ldr	r3, [r7, #24]
 801687a:	4a3f      	ldr	r2, [pc, #252]	; (8016978 <ip4_frag+0x288>)
 801687c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801687e:	6979      	ldr	r1, [r7, #20]
 8016880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016882:	f7f6 fe71 	bl	800d568 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016886:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801688a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801688e:	1ad3      	subs	r3, r2, r3
 8016890:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016894:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016898:	2b00      	cmp	r3, #0
 801689a:	d004      	beq.n	80168a6 <ip4_frag+0x1b6>
        poff = 0;
 801689c:	2300      	movs	r3, #0
 801689e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80168a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d196      	bne.n	80167dc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80168ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80168b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80168b4:	4413      	add	r3, r2
 80168b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80168bc:	f1a3 0213 	sub.w	r2, r3, #19
 80168c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80168c4:	429a      	cmp	r2, r3
 80168c6:	bfcc      	ite	gt
 80168c8:	2301      	movgt	r3, #1
 80168ca:	2300      	movle	r3, #0
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80168d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80168d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80168da:	6a3b      	ldr	r3, [r7, #32]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d002      	beq.n	80168e6 <ip4_frag+0x1f6>
 80168e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d003      	beq.n	80168ee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80168e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80168ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80168ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7f5 f969 	bl	800bbc8 <lwip_htons>
 80168f6:	4603      	mov	r3, r0
 80168f8:	461a      	mov	r2, r3
 80168fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80168fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016900:	3314      	adds	r3, #20
 8016902:	b29b      	uxth	r3, r3
 8016904:	4618      	mov	r0, r3
 8016906:	f7f5 f95f 	bl	800bbc8 <lwip_htons>
 801690a:	4603      	mov	r3, r0
 801690c:	461a      	mov	r2, r3
 801690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016910:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016914:	2200      	movs	r2, #0
 8016916:	729a      	strb	r2, [r3, #10]
 8016918:	2200      	movs	r2, #0
 801691a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801691c:	68bb      	ldr	r3, [r7, #8]
 801691e:	695b      	ldr	r3, [r3, #20]
 8016920:	687a      	ldr	r2, [r7, #4]
 8016922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016924:	68b8      	ldr	r0, [r7, #8]
 8016926:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801692a:	f7f6 fd4f 	bl	800d3cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801692e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016932:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016934:	1ad3      	subs	r3, r2, r3
 8016936:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801693a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801693e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016940:	4413      	add	r3, r2
 8016942:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016946:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801694a:	2b00      	cmp	r3, #0
 801694c:	f47f af19 	bne.w	8016782 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016950:	2300      	movs	r3, #0
 8016952:	e002      	b.n	801695a <ip4_frag+0x26a>
      goto memerr;
 8016954:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801695a:	4618      	mov	r0, r3
 801695c:	3748      	adds	r7, #72	; 0x48
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	0801d248 	.word	0x0801d248
 8016968:	0801d424 	.word	0x0801d424
 801696c:	0801d290 	.word	0x0801d290
 8016970:	0801d440 	.word	0x0801d440
 8016974:	0801d460 	.word	0x0801d460
 8016978:	08016689 	.word	0x08016689

0801697c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b086      	sub	sp, #24
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016986:	230e      	movs	r3, #14
 8016988:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	895b      	ldrh	r3, [r3, #10]
 801698e:	2b0e      	cmp	r3, #14
 8016990:	d96e      	bls.n	8016a70 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	7bdb      	ldrb	r3, [r3, #15]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d106      	bne.n	80169a8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80169a0:	3301      	adds	r3, #1
 80169a2:	b2da      	uxtb	r2, r3
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	7b1a      	ldrb	r2, [r3, #12]
 80169b2:	7b5b      	ldrb	r3, [r3, #13]
 80169b4:	021b      	lsls	r3, r3, #8
 80169b6:	4313      	orrs	r3, r2
 80169b8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80169ba:	693b      	ldr	r3, [r7, #16]
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	f003 0301 	and.w	r3, r3, #1
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d023      	beq.n	8016a0e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d10f      	bne.n	80169ee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	785b      	ldrb	r3, [r3, #1]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d11b      	bne.n	8016a0e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80169d6:	693b      	ldr	r3, [r7, #16]
 80169d8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80169da:	2b5e      	cmp	r3, #94	; 0x5e
 80169dc:	d117      	bne.n	8016a0e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	7b5b      	ldrb	r3, [r3, #13]
 80169e2:	f043 0310 	orr.w	r3, r3, #16
 80169e6:	b2da      	uxtb	r2, r3
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	735a      	strb	r2, [r3, #13]
 80169ec:	e00f      	b.n	8016a0e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	2206      	movs	r2, #6
 80169f2:	4928      	ldr	r1, [pc, #160]	; (8016a94 <ethernet_input+0x118>)
 80169f4:	4618      	mov	r0, r3
 80169f6:	f002 f985 	bl	8018d04 <memcmp>
 80169fa:	4603      	mov	r3, r0
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d106      	bne.n	8016a0e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	7b5b      	ldrb	r3, [r3, #13]
 8016a04:	f043 0308 	orr.w	r3, r3, #8
 8016a08:	b2da      	uxtb	r2, r3
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016a0e:	89fb      	ldrh	r3, [r7, #14]
 8016a10:	2b08      	cmp	r3, #8
 8016a12:	d003      	beq.n	8016a1c <ethernet_input+0xa0>
 8016a14:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016a18:	d014      	beq.n	8016a44 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016a1a:	e032      	b.n	8016a82 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a22:	f003 0308 	and.w	r3, r3, #8
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d024      	beq.n	8016a74 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a2a:	8afb      	ldrh	r3, [r7, #22]
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f7f6 fc46 	bl	800d2c0 <pbuf_remove_header>
 8016a34:	4603      	mov	r3, r0
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d11e      	bne.n	8016a78 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016a3a:	6839      	ldr	r1, [r7, #0]
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f7fe fdf7 	bl	8015630 <ip4_input>
      break;
 8016a42:	e013      	b.n	8016a6c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a4a:	f003 0308 	and.w	r3, r3, #8
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d014      	beq.n	8016a7c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a52:	8afb      	ldrh	r3, [r7, #22]
 8016a54:	4619      	mov	r1, r3
 8016a56:	6878      	ldr	r0, [r7, #4]
 8016a58:	f7f6 fc32 	bl	800d2c0 <pbuf_remove_header>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d10e      	bne.n	8016a80 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016a62:	6839      	ldr	r1, [r7, #0]
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f7fd ff97 	bl	8014998 <etharp_input>
      break;
 8016a6a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	e00c      	b.n	8016a8a <ethernet_input+0x10e>
    goto free_and_return;
 8016a70:	bf00      	nop
 8016a72:	e006      	b.n	8016a82 <ethernet_input+0x106>
        goto free_and_return;
 8016a74:	bf00      	nop
 8016a76:	e004      	b.n	8016a82 <ethernet_input+0x106>
        goto free_and_return;
 8016a78:	bf00      	nop
 8016a7a:	e002      	b.n	8016a82 <ethernet_input+0x106>
        goto free_and_return;
 8016a7c:	bf00      	nop
 8016a7e:	e000      	b.n	8016a82 <ethernet_input+0x106>
        goto free_and_return;
 8016a80:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	f7f6 fca2 	bl	800d3cc <pbuf_free>
  return ERR_OK;
 8016a88:	2300      	movs	r3, #0
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3718      	adds	r7, #24
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}
 8016a92:	bf00      	nop
 8016a94:	0801d6a8 	.word	0x0801d6a8

08016a98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b086      	sub	sp, #24
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	60f8      	str	r0, [r7, #12]
 8016aa0:	60b9      	str	r1, [r7, #8]
 8016aa2:	607a      	str	r2, [r7, #4]
 8016aa4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016aa6:	8c3b      	ldrh	r3, [r7, #32]
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7f5 f88d 	bl	800bbc8 <lwip_htons>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016ab2:	210e      	movs	r1, #14
 8016ab4:	68b8      	ldr	r0, [r7, #8]
 8016ab6:	f7f6 fbf3 	bl	800d2a0 <pbuf_add_header>
 8016aba:	4603      	mov	r3, r0
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d125      	bne.n	8016b0c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	685b      	ldr	r3, [r3, #4]
 8016ac4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	8afa      	ldrh	r2, [r7, #22]
 8016aca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	2206      	movs	r2, #6
 8016ad0:	6839      	ldr	r1, [r7, #0]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f002 f926 	bl	8018d24 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	3306      	adds	r3, #6
 8016adc:	2206      	movs	r2, #6
 8016ade:	6879      	ldr	r1, [r7, #4]
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f002 f91f 	bl	8018d24 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016aec:	2b06      	cmp	r3, #6
 8016aee:	d006      	beq.n	8016afe <ethernet_output+0x66>
 8016af0:	4b0a      	ldr	r3, [pc, #40]	; (8016b1c <ethernet_output+0x84>)
 8016af2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016af6:	490a      	ldr	r1, [pc, #40]	; (8016b20 <ethernet_output+0x88>)
 8016af8:	480a      	ldr	r0, [pc, #40]	; (8016b24 <ethernet_output+0x8c>)
 8016afa:	f002 f929 	bl	8018d50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	699b      	ldr	r3, [r3, #24]
 8016b02:	68b9      	ldr	r1, [r7, #8]
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	4798      	blx	r3
 8016b08:	4603      	mov	r3, r0
 8016b0a:	e002      	b.n	8016b12 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016b0c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016b0e:	f06f 0301 	mvn.w	r3, #1
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3718      	adds	r7, #24
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	0801d470 	.word	0x0801d470
 8016b20:	0801d4a8 	.word	0x0801d4a8
 8016b24:	0801d4dc 	.word	0x0801d4dc

08016b28 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b086      	sub	sp, #24
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	60bb      	str	r3, [r7, #8]
 8016b36:	2304      	movs	r3, #4
 8016b38:	60fb      	str	r3, [r7, #12]
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	613b      	str	r3, [r7, #16]
 8016b3e:	2300      	movs	r3, #0
 8016b40:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016b42:	f107 0308 	add.w	r3, r7, #8
 8016b46:	2100      	movs	r1, #0
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f7f0 f870 	bl	8006c2e <osMessageCreate>
 8016b4e:	4602      	mov	r2, r0
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d102      	bne.n	8016b62 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b60:	e000      	b.n	8016b64 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016b62:	2300      	movs	r3, #0
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	3718      	adds	r7, #24
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f0 f935 	bl	8006de8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7f0 f946 	bl	8006e14 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016b88:	bf00      	nop
 8016b8a:	3708      	adds	r7, #8
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b084      	sub	sp, #16
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	6839      	ldr	r1, [r7, #0]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f7f0 f86c 	bl	8006c80 <osMessagePut>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d102      	bne.n	8016bb4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	73fb      	strb	r3, [r7, #15]
 8016bb2:	e001      	b.n	8016bb8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016bb4:	23ff      	movs	r3, #255	; 0xff
 8016bb6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b08c      	sub	sp, #48	; 0x30
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	61f8      	str	r0, [r7, #28]
 8016bcc:	61b9      	str	r1, [r7, #24]
 8016bce:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016bd0:	f7ef fe58 	bl	8006884 <osKernelSysTick>
 8016bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016bd6:	697b      	ldr	r3, [r7, #20]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d017      	beq.n	8016c0c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016bdc:	69fb      	ldr	r3, [r7, #28]
 8016bde:	6819      	ldr	r1, [r3, #0]
 8016be0:	f107 0320 	add.w	r3, r7, #32
 8016be4:	697a      	ldr	r2, [r7, #20]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7f0 f88a 	bl	8006d00 <osMessageGet>

    if(event.status == osEventMessage)
 8016bec:	6a3b      	ldr	r3, [r7, #32]
 8016bee:	2b10      	cmp	r3, #16
 8016bf0:	d109      	bne.n	8016c06 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf4:	461a      	mov	r2, r3
 8016bf6:	69bb      	ldr	r3, [r7, #24]
 8016bf8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016bfa:	f7ef fe43 	bl	8006884 <osKernelSysTick>
 8016bfe:	4602      	mov	r2, r0
 8016c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c02:	1ad3      	subs	r3, r2, r3
 8016c04:	e019      	b.n	8016c3a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c0a:	e016      	b.n	8016c3a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	6819      	ldr	r1, [r3, #0]
 8016c10:	463b      	mov	r3, r7
 8016c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7f0 f872 	bl	8006d00 <osMessageGet>
 8016c1c:	f107 0320 	add.w	r3, r7, #32
 8016c20:	463a      	mov	r2, r7
 8016c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	69bb      	ldr	r3, [r7, #24]
 8016c2e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016c30:	f7ef fe28 	bl	8006884 <osKernelSysTick>
 8016c34:	4602      	mov	r2, r0
 8016c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c38:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	3730      	adds	r7, #48	; 0x30
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}

08016c42 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016c42:	b580      	push	{r7, lr}
 8016c44:	b086      	sub	sp, #24
 8016c46:	af00      	add	r7, sp, #0
 8016c48:	6078      	str	r0, [r7, #4]
 8016c4a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	6819      	ldr	r1, [r3, #0]
 8016c50:	f107 030c 	add.w	r3, r7, #12
 8016c54:	2200      	movs	r2, #0
 8016c56:	4618      	mov	r0, r3
 8016c58:	f7f0 f852 	bl	8006d00 <osMessageGet>

  if(event.status == osEventMessage)
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2b10      	cmp	r3, #16
 8016c60:	d105      	bne.n	8016c6e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	461a      	mov	r2, r3
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	e001      	b.n	8016c72 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3718      	adds	r7, #24
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}

08016c7a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016c7a:	b480      	push	{r7}
 8016c7c:	b083      	sub	sp, #12
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d101      	bne.n	8016c8e <sys_mbox_valid+0x14>
    return 0;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	e000      	b.n	8016c90 <sys_mbox_valid+0x16>
  else
    return 1;
 8016c8e:	2301      	movs	r3, #1
}
 8016c90:	4618      	mov	r0, r3
 8016c92:	370c      	adds	r7, #12
 8016c94:	46bd      	mov	sp, r7
 8016c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9a:	4770      	bx	lr

08016c9c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016c9c:	b480      	push	{r7}
 8016c9e:	b083      	sub	sp, #12
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	601a      	str	r2, [r3, #0]
}
 8016caa:	bf00      	nop
 8016cac:	370c      	adds	r7, #12
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr

08016cb6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	b084      	sub	sp, #16
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	60bb      	str	r3, [r7, #8]
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016cca:	f107 0308 	add.w	r3, r7, #8
 8016cce:	2101      	movs	r1, #1
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7ef fee3 	bl	8006a9c <osSemaphoreCreate>
 8016cd6:	4602      	mov	r2, r0
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d102      	bne.n	8016cea <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ce8:	e009      	b.n	8016cfe <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016cea:	78fb      	ldrb	r3, [r7, #3]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d105      	bne.n	8016cfc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	2100      	movs	r1, #0
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7ef ff02 	bl	8006b00 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016cfc:	2300      	movs	r3, #0
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3710      	adds	r7, #16
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}

08016d06 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016d06:	b580      	push	{r7, lr}
 8016d08:	b084      	sub	sp, #16
 8016d0a:	af00      	add	r7, sp, #0
 8016d0c:	6078      	str	r0, [r7, #4]
 8016d0e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016d10:	f7ef fdb8 	bl	8006884 <osKernelSysTick>
 8016d14:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d011      	beq.n	8016d40 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	6839      	ldr	r1, [r7, #0]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f7ef feec 	bl	8006b00 <osSemaphoreWait>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d105      	bne.n	8016d3a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016d2e:	f7ef fda9 	bl	8006884 <osKernelSysTick>
 8016d32:	4602      	mov	r2, r0
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	1ad3      	subs	r3, r2, r3
 8016d38:	e012      	b.n	8016d60 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d3e:	e00f      	b.n	8016d60 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016d40:	bf00      	nop
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7ef fed8 	bl	8006b00 <osSemaphoreWait>
 8016d50:	4603      	mov	r3, r0
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d1f5      	bne.n	8016d42 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016d56:	f7ef fd95 	bl	8006884 <osKernelSysTick>
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3710      	adds	r7, #16
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}

08016d68 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b082      	sub	sp, #8
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7ef ff11 	bl	8006b9c <osSemaphoreRelease>
}
 8016d7a:	bf00      	nop
 8016d7c:	3708      	adds	r7, #8
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bd80      	pop	{r7, pc}

08016d82 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016d82:	b580      	push	{r7, lr}
 8016d84:	b082      	sub	sp, #8
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7ef ff3a 	bl	8006c08 <osSemaphoreDelete>
}
 8016d94:	bf00      	nop
 8016d96:	3708      	adds	r7, #8
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	b083      	sub	sp, #12
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d101      	bne.n	8016db0 <sys_sem_valid+0x14>
    return 0;
 8016dac:	2300      	movs	r3, #0
 8016dae:	e000      	b.n	8016db2 <sys_sem_valid+0x16>
  else
    return 1;
 8016db0:	2301      	movs	r3, #1
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	370c      	adds	r7, #12
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr

08016dbe <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016dbe:	b480      	push	{r7}
 8016dc0:	b083      	sub	sp, #12
 8016dc2:	af00      	add	r7, sp, #0
 8016dc4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	601a      	str	r2, [r3, #0]
}
 8016dcc:	bf00      	nop
 8016dce:	370c      	adds	r7, #12
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd6:	4770      	bx	lr

08016dd8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016ddc:	4803      	ldr	r0, [pc, #12]	; (8016dec <sys_init+0x14>)
 8016dde:	f7ef fdc1 	bl	8006964 <osMutexCreate>
 8016de2:	4603      	mov	r3, r0
 8016de4:	4a02      	ldr	r2, [pc, #8]	; (8016df0 <sys_init+0x18>)
 8016de6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016de8:	bf00      	nop
 8016dea:	bd80      	pop	{r7, pc}
 8016dec:	0801d6b8 	.word	0x0801d6b8
 8016df0:	20011390 	.word	0x20011390

08016df4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b084      	sub	sp, #16
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	60bb      	str	r3, [r7, #8]
 8016e00:	2300      	movs	r3, #0
 8016e02:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016e04:	f107 0308 	add.w	r3, r7, #8
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7ef fdab 	bl	8006964 <osMutexCreate>
 8016e0e:	4602      	mov	r2, r0
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d102      	bne.n	8016e22 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e20:	e000      	b.n	8016e24 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016e22:	2300      	movs	r3, #0
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3710      	adds	r7, #16
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b082      	sub	sp, #8
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7ef fda9 	bl	8006994 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016e42:	bf00      	nop
 8016e44:	3708      	adds	r7, #8
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}

08016e4a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016e4a:	b580      	push	{r7, lr}
 8016e4c:	b082      	sub	sp, #8
 8016e4e:	af00      	add	r7, sp, #0
 8016e50:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	4618      	mov	r0, r3
 8016e58:	f7ef fdea 	bl	8006a30 <osMutexRelease>
}
 8016e5c:	bf00      	nop
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b08c      	sub	sp, #48	; 0x30
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016e72:	f107 0314 	add.w	r3, r7, #20
 8016e76:	2200      	movs	r2, #0
 8016e78:	601a      	str	r2, [r3, #0]
 8016e7a:	605a      	str	r2, [r3, #4]
 8016e7c:	609a      	str	r2, [r3, #8]
 8016e7e:	60da      	str	r2, [r3, #12]
 8016e80:	611a      	str	r2, [r3, #16]
 8016e82:	615a      	str	r2, [r3, #20]
 8016e84:	619a      	str	r2, [r3, #24]
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	617b      	str	r3, [r7, #20]
 8016e8a:	68bb      	ldr	r3, [r7, #8]
 8016e8c:	61bb      	str	r3, [r7, #24]
 8016e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e90:	b21b      	sxth	r3, r3
 8016e92:	83bb      	strh	r3, [r7, #28]
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016e98:	f107 0314 	add.w	r3, r7, #20
 8016e9c:	6879      	ldr	r1, [r7, #4]
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7ef fd00 	bl	80068a4 <osThreadCreate>
 8016ea4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3730      	adds	r7, #48	; 0x30
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
	...

08016eb0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016eb4:	4b04      	ldr	r3, [pc, #16]	; (8016ec8 <sys_arch_protect+0x18>)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7ef fd69 	bl	8006994 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016ec2:	2301      	movs	r3, #1
}
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	bd80      	pop	{r7, pc}
 8016ec8:	20011390 	.word	0x20011390

08016ecc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b082      	sub	sp, #8
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016ed4:	4b04      	ldr	r3, [pc, #16]	; (8016ee8 <sys_arch_unprotect+0x1c>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7ef fda9 	bl	8006a30 <osMutexRelease>
}
 8016ede:	bf00      	nop
 8016ee0:	3708      	adds	r7, #8
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	bf00      	nop
 8016ee8:	20011390 	.word	0x20011390

08016eec <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8016eec:	b480      	push	{r7}
 8016eee:	b085      	sub	sp, #20
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	60f8      	str	r0, [r7, #12]
 8016ef4:	60b9      	str	r1, [r7, #8]
 8016ef6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	68ba      	ldr	r2, [r7, #8]
 8016efc:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	687a      	ldr	r2, [r7, #4]
 8016f02:	601a      	str	r2, [r3, #0]
}
 8016f04:	bf00      	nop
 8016f06:	3714      	adds	r7, #20
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0e:	4770      	bx	lr

08016f10 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f20:	4293      	cmp	r3, r2
 8016f22:	d003      	beq.n	8016f2c <getNextPacketId+0x1c>
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	e000      	b.n	8016f2e <getNextPacketId+0x1e>
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	687a      	ldr	r2, [r7, #4]
 8016f30:	6013      	str	r3, [r2, #0]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	370c      	adds	r7, #12
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f40:	4770      	bx	lr

08016f42 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8016f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f44:	b087      	sub	sp, #28
 8016f46:	af00      	add	r7, sp, #0
 8016f48:	60f8      	str	r0, [r7, #12]
 8016f4a:	60b9      	str	r1, [r7, #8]
 8016f4c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8016f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f52:	617b      	str	r3, [r7, #20]
        sent = 0;
 8016f54:	2300      	movs	r3, #0
 8016f56:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8016f58:	e018      	b.n	8016f8c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f5e:	691c      	ldr	r4, [r3, #16]
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	691a      	ldr	r2, [r3, #16]
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	18d6      	adds	r6, r2, r3
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f000 fecb 	bl	8017d08 <TimerLeftMS>
 8016f72:	4603      	mov	r3, r0
 8016f74:	68ba      	ldr	r2, [r7, #8]
 8016f76:	4631      	mov	r1, r6
 8016f78:	4628      	mov	r0, r5
 8016f7a:	47a0      	blx	r4
 8016f7c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8016f7e:	697b      	ldr	r3, [r7, #20]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	db0e      	blt.n	8016fa2 <sendPacket+0x60>
            break;
        sent += rc;
 8016f84:	693a      	ldr	r2, [r7, #16]
 8016f86:	697b      	ldr	r3, [r7, #20]
 8016f88:	4413      	add	r3, r2
 8016f8a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8016f8c:	693a      	ldr	r2, [r7, #16]
 8016f8e:	68bb      	ldr	r3, [r7, #8]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	da07      	bge.n	8016fa4 <sendPacket+0x62>
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f000 fe75 	bl	8017c84 <TimerIsExpired>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d0dc      	beq.n	8016f5a <sendPacket+0x18>
 8016fa0:	e000      	b.n	8016fa4 <sendPacket+0x62>
            break;
 8016fa2:	bf00      	nop
    }
    if (sent == length)
 8016fa4:	693a      	ldr	r2, [r7, #16]
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	d10b      	bne.n	8016fc4 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	699b      	ldr	r3, [r3, #24]
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	4610      	mov	r0, r2
 8016fba:	f000 fe8d 	bl	8017cd8 <TimerCountdown>
        rc = MQTT_SUCCESS;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	617b      	str	r3, [r7, #20]
 8016fc2:	e002      	b.n	8016fca <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8016fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fc8:	617b      	str	r3, [r7, #20]
    return rc;
 8016fca:	697b      	ldr	r3, [r7, #20]
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	371c      	adds	r7, #28
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fd4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b086      	sub	sp, #24
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	60f8      	str	r0, [r7, #12]
 8016fdc:	60b9      	str	r1, [r7, #8]
 8016fde:	607a      	str	r2, [r7, #4]
 8016fe0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	68ba      	ldr	r2, [r7, #8]
 8016fe6:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8016fe8:	2300      	movs	r3, #0
 8016fea:	617b      	str	r3, [r7, #20]
 8016fec:	e008      	b.n	8017000 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	697a      	ldr	r2, [r7, #20]
 8016ff2:	3205      	adds	r2, #5
 8016ff4:	2100      	movs	r1, #0
 8016ff6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8016ffa:	697b      	ldr	r3, [r7, #20]
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	617b      	str	r3, [r7, #20]
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	2b04      	cmp	r3, #4
 8017004:	ddf3      	ble.n	8016fee <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	687a      	ldr	r2, [r7, #4]
 801700a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	683a      	ldr	r2, [r7, #0]
 8017010:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	6a3a      	ldr	r2, [r7, #32]
 8017016:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801701c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017022:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	2200      	movs	r2, #0
 8017028:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2200      	movs	r2, #0
 801702e:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	2200      	movs	r2, #0
 8017034:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2200      	movs	r2, #0
 801703a:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	2201      	movs	r2, #1
 8017040:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	3358      	adds	r3, #88	; 0x58
 8017046:	4618      	mov	r0, r3
 8017048:	f000 fe74 	bl	8017d34 <TimerInit>
    TimerInit(&c->last_received);
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	3360      	adds	r3, #96	; 0x60
 8017050:	4618      	mov	r0, r3
 8017052:	f000 fe6f 	bl	8017d34 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8017056:	bf00      	nop
 8017058:	3718      	adds	r7, #24
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}

0801705e <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801705e:	b590      	push	{r4, r7, lr}
 8017060:	b08b      	sub	sp, #44	; 0x2c
 8017062:	af00      	add	r7, sp, #0
 8017064:	60f8      	str	r0, [r7, #12]
 8017066:	60b9      	str	r1, [r7, #8]
 8017068:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801706a:	2301      	movs	r3, #1
 801706c:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801706e:	2300      	movs	r3, #0
 8017070:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8017072:	2304      	movs	r3, #4
 8017074:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	2200      	movs	r2, #0
 801707a:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801707c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017080:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8017082:	6a3b      	ldr	r3, [r7, #32]
 8017084:	3301      	adds	r3, #1
 8017086:	623b      	str	r3, [r7, #32]
 8017088:	6a3a      	ldr	r2, [r7, #32]
 801708a:	69fb      	ldr	r3, [r7, #28]
 801708c:	429a      	cmp	r2, r3
 801708e:	dd03      	ble.n	8017098 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8017090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017094:	61bb      	str	r3, [r7, #24]
            goto exit;
 8017096:	e021      	b.n	80170dc <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801709c:	68dc      	ldr	r4, [r3, #12]
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80170a2:	f107 0117 	add.w	r1, r7, #23
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	2201      	movs	r2, #1
 80170aa:	47a0      	blx	r4
 80170ac:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80170ae:	69bb      	ldr	r3, [r7, #24]
 80170b0:	2b01      	cmp	r3, #1
 80170b2:	d112      	bne.n	80170da <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	681a      	ldr	r2, [r3, #0]
 80170b8:	7dfb      	ldrb	r3, [r7, #23]
 80170ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170c0:	fb01 f303 	mul.w	r3, r1, r3
 80170c4:	441a      	add	r2, r3
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80170ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170cc:	01db      	lsls	r3, r3, #7
 80170ce:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 80170d0:	7dfb      	ldrb	r3, [r7, #23]
 80170d2:	b25b      	sxtb	r3, r3
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	dbd1      	blt.n	801707c <decodePacket+0x1e>
exit:
 80170d8:	e000      	b.n	80170dc <decodePacket+0x7e>
            goto exit;
 80170da:	bf00      	nop
    return len;
 80170dc:	6a3b      	ldr	r3, [r7, #32]
}
 80170de:	4618      	mov	r0, r3
 80170e0:	372c      	adds	r7, #44	; 0x2c
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd90      	pop	{r4, r7, pc}

080170e6 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 80170e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170e8:	b089      	sub	sp, #36	; 0x24
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	60f8      	str	r0, [r7, #12]
 80170ee:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 80170f0:	2300      	movs	r3, #0
 80170f2:	617b      	str	r3, [r7, #20]
    int len = 0;
 80170f4:	2300      	movs	r3, #0
 80170f6:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 80170f8:	2300      	movs	r3, #0
 80170fa:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017100:	68dc      	ldr	r4, [r3, #12]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	695e      	ldr	r6, [r3, #20]
 801710a:	68b8      	ldr	r0, [r7, #8]
 801710c:	f000 fdfc 	bl	8017d08 <TimerLeftMS>
 8017110:	4603      	mov	r3, r0
 8017112:	2201      	movs	r2, #1
 8017114:	4631      	mov	r1, r6
 8017116:	4628      	mov	r0, r5
 8017118:	47a0      	blx	r4
 801711a:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 801711c:	69fb      	ldr	r3, [r7, #28]
 801711e:	2b01      	cmp	r3, #1
 8017120:	d15d      	bne.n	80171de <readPacket+0xf8>
        goto exit;

    len = 1;
 8017122:	2301      	movs	r3, #1
 8017124:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8017126:	68b8      	ldr	r0, [r7, #8]
 8017128:	f000 fdee 	bl	8017d08 <TimerLeftMS>
 801712c:	4602      	mov	r2, r0
 801712e:	f107 0310 	add.w	r3, r7, #16
 8017132:	4619      	mov	r1, r3
 8017134:	68f8      	ldr	r0, [r7, #12]
 8017136:	f7ff ff92 	bl	801705e <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	695b      	ldr	r3, [r3, #20]
 801713e:	3301      	adds	r3, #1
 8017140:	693a      	ldr	r2, [r7, #16]
 8017142:	4611      	mov	r1, r2
 8017144:	4618      	mov	r0, r3
 8017146:	f001 f9bd 	bl	80184c4 <MQTTPacket_encode>
 801714a:	4602      	mov	r2, r0
 801714c:	69bb      	ldr	r3, [r7, #24]
 801714e:	4413      	add	r3, r2
 8017150:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	68da      	ldr	r2, [r3, #12]
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	1ad3      	subs	r3, r2, r3
 801715a:	693a      	ldr	r2, [r7, #16]
 801715c:	4293      	cmp	r3, r2
 801715e:	d203      	bcs.n	8017168 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8017160:	f06f 0301 	mvn.w	r3, #1
 8017164:	61fb      	str	r3, [r7, #28]
        goto exit;
 8017166:	e03d      	b.n	80171e4 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8017168:	693b      	ldr	r3, [r7, #16]
 801716a:	2b00      	cmp	r3, #0
 801716c:	dd20      	ble.n	80171b0 <readPacket+0xca>
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017172:	68dc      	ldr	r4, [r3, #12]
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	695a      	ldr	r2, [r3, #20]
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	18d6      	adds	r6, r2, r3
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	607b      	str	r3, [r7, #4]
 8017184:	68b8      	ldr	r0, [r7, #8]
 8017186:	f000 fdbf 	bl	8017d08 <TimerLeftMS>
 801718a:	4603      	mov	r3, r0
 801718c:	687a      	ldr	r2, [r7, #4]
 801718e:	4631      	mov	r1, r6
 8017190:	4628      	mov	r0, r5
 8017192:	47a0      	blx	r4
 8017194:	4602      	mov	r2, r0
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	429a      	cmp	r2, r3
 801719a:	bf14      	ite	ne
 801719c:	2301      	movne	r3, #1
 801719e:	2300      	moveq	r3, #0
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	61fb      	str	r3, [r7, #28]
 80171a4:	69fb      	ldr	r3, [r7, #28]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d002      	beq.n	80171b0 <readPacket+0xca>
        rc = 0;
 80171aa:	2300      	movs	r3, #0
 80171ac:	61fb      	str	r3, [r7, #28]
        goto exit;
 80171ae:	e019      	b.n	80171e4 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	695b      	ldr	r3, [r3, #20]
 80171b4:	781b      	ldrb	r3, [r3, #0]
 80171b6:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80171b8:	7d3b      	ldrb	r3, [r7, #20]
 80171ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80171be:	b2db      	uxtb	r3, r3
 80171c0:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	699b      	ldr	r3, [r3, #24]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d00b      	beq.n	80171e2 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	699b      	ldr	r3, [r3, #24]
 80171d4:	4619      	mov	r1, r3
 80171d6:	4610      	mov	r0, r2
 80171d8:	f000 fd7e 	bl	8017cd8 <TimerCountdown>
 80171dc:	e002      	b.n	80171e4 <readPacket+0xfe>
        goto exit;
 80171de:	bf00      	nop
 80171e0:	e000      	b.n	80171e4 <readPacket+0xfe>
exit:
 80171e2:	bf00      	nop
    return rc;
 80171e4:	69fb      	ldr	r3, [r7, #28]
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	3724      	adds	r7, #36	; 0x24
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080171ee <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80171ee:	b480      	push	{r7}
 80171f0:	b087      	sub	sp, #28
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	6078      	str	r0, [r7, #4]
 80171f6:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	689b      	ldr	r3, [r3, #8]
 8017200:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	461a      	mov	r2, r3
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	4413      	add	r3, r2
 801720c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801720e:	e039      	b.n	8017284 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	2b2f      	cmp	r3, #47	; 0x2f
 8017216:	d103      	bne.n	8017220 <isTopicMatched+0x32>
 8017218:	697b      	ldr	r3, [r7, #20]
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	2b2f      	cmp	r3, #47	; 0x2f
 801721e:	d13a      	bne.n	8017296 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	2b2b      	cmp	r3, #43	; 0x2b
 8017226:	d009      	beq.n	801723c <isTopicMatched+0x4e>
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	2b23      	cmp	r3, #35	; 0x23
 801722e:	d005      	beq.n	801723c <isTopicMatched+0x4e>
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	781a      	ldrb	r2, [r3, #0]
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	429a      	cmp	r2, r3
 801723a:	d12e      	bne.n	801729a <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	781b      	ldrb	r3, [r3, #0]
 8017240:	2b2b      	cmp	r3, #43	; 0x2b
 8017242:	d112      	bne.n	801726a <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8017244:	693b      	ldr	r3, [r7, #16]
 8017246:	3301      	adds	r3, #1
 8017248:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801724a:	e005      	b.n	8017258 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801724c:	693b      	ldr	r3, [r7, #16]
 801724e:	3301      	adds	r3, #1
 8017250:	613b      	str	r3, [r7, #16]
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	3301      	adds	r3, #1
 8017256:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	429a      	cmp	r2, r3
 801725e:	d20b      	bcs.n	8017278 <isTopicMatched+0x8a>
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	2b2f      	cmp	r3, #47	; 0x2f
 8017266:	d1f1      	bne.n	801724c <isTopicMatched+0x5e>
 8017268:	e006      	b.n	8017278 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801726a:	697b      	ldr	r3, [r7, #20]
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	2b23      	cmp	r3, #35	; 0x23
 8017270:	d102      	bne.n	8017278 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	3b01      	subs	r3, #1
 8017276:	613b      	str	r3, [r7, #16]
        curf++;
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	3301      	adds	r3, #1
 801727c:	617b      	str	r3, [r7, #20]
        curn++;
 801727e:	693b      	ldr	r3, [r7, #16]
 8017280:	3301      	adds	r3, #1
 8017282:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d007      	beq.n	801729c <isTopicMatched+0xae>
 801728c:	693a      	ldr	r2, [r7, #16]
 801728e:	68bb      	ldr	r3, [r7, #8]
 8017290:	429a      	cmp	r2, r3
 8017292:	d3bd      	bcc.n	8017210 <isTopicMatched+0x22>
 8017294:	e002      	b.n	801729c <isTopicMatched+0xae>
            break;
 8017296:	bf00      	nop
 8017298:	e000      	b.n	801729c <isTopicMatched+0xae>
            break;
 801729a:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801729c:	693a      	ldr	r2, [r7, #16]
 801729e:	68bb      	ldr	r3, [r7, #8]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d105      	bne.n	80172b0 <isTopicMatched+0xc2>
 80172a4:	697b      	ldr	r3, [r7, #20]
 80172a6:	781b      	ldrb	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d101      	bne.n	80172b0 <isTopicMatched+0xc2>
 80172ac:	2301      	movs	r3, #1
 80172ae:	e000      	b.n	80172b2 <isTopicMatched+0xc4>
 80172b0:	2300      	movs	r3, #0
 80172b2:	b2db      	uxtb	r3, r3
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	371c      	adds	r7, #28
 80172b8:	46bd      	mov	sp, r7
 80172ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172be:	4770      	bx	lr

080172c0 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b08a      	sub	sp, #40	; 0x28
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	60f8      	str	r0, [r7, #12]
 80172c8:	60b9      	str	r1, [r7, #8]
 80172ca:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 80172cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172d0:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80172d2:	2300      	movs	r3, #0
 80172d4:	627b      	str	r3, [r7, #36]	; 0x24
 80172d6:	e03c      	b.n	8017352 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172dc:	3205      	adds	r2, #5
 80172de:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d032      	beq.n	801734c <deliverMessage+0x8c>
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172ea:	3205      	adds	r2, #5
 80172ec:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80172f0:	4619      	mov	r1, r3
 80172f2:	68b8      	ldr	r0, [r7, #8]
 80172f4:	f001 fab6 	bl	8018864 <MQTTPacket_equals>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d10b      	bne.n	8017316 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017302:	3205      	adds	r2, #5
 8017304:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8017308:	68b9      	ldr	r1, [r7, #8]
 801730a:	4618      	mov	r0, r3
 801730c:	f7ff ff6f 	bl	80171ee <isTopicMatched>
 8017310:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8017312:	2b00      	cmp	r3, #0
 8017314:	d01a      	beq.n	801734c <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8017316:	68fa      	ldr	r2, [r7, #12]
 8017318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801731a:	3305      	adds	r3, #5
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	4413      	add	r3, r2
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d012      	beq.n	801734c <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8017326:	f107 0318 	add.w	r3, r7, #24
 801732a:	687a      	ldr	r2, [r7, #4]
 801732c:	68b9      	ldr	r1, [r7, #8]
 801732e:	4618      	mov	r0, r3
 8017330:	f7ff fddc 	bl	8016eec <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8017334:	68fa      	ldr	r2, [r7, #12]
 8017336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017338:	3305      	adds	r3, #5
 801733a:	00db      	lsls	r3, r3, #3
 801733c:	4413      	add	r3, r2
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	f107 0218 	add.w	r2, r7, #24
 8017344:	4610      	mov	r0, r2
 8017346:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8017348:	2300      	movs	r3, #0
 801734a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734e:	3301      	adds	r3, #1
 8017350:	627b      	str	r3, [r7, #36]	; 0x24
 8017352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017354:	2b04      	cmp	r3, #4
 8017356:	ddbf      	ble.n	80172d8 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8017358:	6a3b      	ldr	r3, [r7, #32]
 801735a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801735e:	d112      	bne.n	8017386 <deliverMessage+0xc6>
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017364:	2b00      	cmp	r3, #0
 8017366:	d00e      	beq.n	8017386 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8017368:	f107 0310 	add.w	r3, r7, #16
 801736c:	687a      	ldr	r2, [r7, #4]
 801736e:	68b9      	ldr	r1, [r7, #8]
 8017370:	4618      	mov	r0, r3
 8017372:	f7ff fdbb 	bl	8016eec <NewMessageData>
        c->defaultMessageHandler(&md);
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801737a:	f107 0210 	add.w	r2, r7, #16
 801737e:	4610      	mov	r0, r2
 8017380:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8017382:	2300      	movs	r3, #0
 8017384:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8017386:	6a3b      	ldr	r3, [r7, #32]
}
 8017388:	4618      	mov	r0, r3
 801738a:	3728      	adds	r7, #40	; 0x28
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}

08017390 <keepalive>:


int keepalive(MQTTClient* c)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b086      	sub	sp, #24
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8017398:	2300      	movs	r3, #0
 801739a:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	699b      	ldr	r3, [r3, #24]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d03e      	beq.n	8017422 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	3358      	adds	r3, #88	; 0x58
 80173a8:	4618      	mov	r0, r3
 80173aa:	f000 fc6b 	bl	8017c84 <TimerIsExpired>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d107      	bne.n	80173c4 <keepalive+0x34>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	3360      	adds	r3, #96	; 0x60
 80173b8:	4618      	mov	r0, r3
 80173ba:	f000 fc63 	bl	8017c84 <TimerIsExpired>
 80173be:	4603      	mov	r3, r0
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d030      	beq.n	8017426 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	7f1b      	ldrb	r3, [r3, #28]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d003      	beq.n	80173d4 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 80173cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80173d0:	617b      	str	r3, [r7, #20]
 80173d2:	e029      	b.n	8017428 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 80173d4:	f107 0308 	add.w	r3, r7, #8
 80173d8:	4618      	mov	r0, r3
 80173da:	f000 fcab 	bl	8017d34 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 80173de:	f107 0308 	add.w	r3, r7, #8
 80173e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80173e6:	4618      	mov	r0, r3
 80173e8:	f000 fc62 	bl	8017cb0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	691a      	ldr	r2, [r3, #16]
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	689b      	ldr	r3, [r3, #8]
 80173f4:	4619      	mov	r1, r3
 80173f6:	4610      	mov	r0, r2
 80173f8:	f000 ff98 	bl	801832c <MQTTSerialize_pingreq>
 80173fc:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 80173fe:	693b      	ldr	r3, [r7, #16]
 8017400:	2b00      	cmp	r3, #0
 8017402:	dd11      	ble.n	8017428 <keepalive+0x98>
 8017404:	f107 0308 	add.w	r3, r7, #8
 8017408:	461a      	mov	r2, r3
 801740a:	6939      	ldr	r1, [r7, #16]
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7ff fd98 	bl	8016f42 <sendPacket>
 8017412:	6178      	str	r0, [r7, #20]
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d106      	bne.n	8017428 <keepalive+0x98>
                c->ping_outstanding = 1;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2201      	movs	r2, #1
 801741e:	771a      	strb	r2, [r3, #28]
 8017420:	e002      	b.n	8017428 <keepalive+0x98>
        goto exit;
 8017422:	bf00      	nop
 8017424:	e000      	b.n	8017428 <keepalive+0x98>
        }
    }

exit:
 8017426:	bf00      	nop
    return rc;
 8017428:	697b      	ldr	r3, [r7, #20]
}
 801742a:	4618      	mov	r0, r3
 801742c:	3718      	adds	r7, #24
 801742e:	46bd      	mov	sp, r7
 8017430:	bd80      	pop	{r7, pc}

08017432 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8017432:	b480      	push	{r7}
 8017434:	b085      	sub	sp, #20
 8017436:	af00      	add	r7, sp, #0
 8017438:	6078      	str	r0, [r7, #4]
    int i = 0;
 801743a:	2300      	movs	r3, #0
 801743c:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801743e:	2300      	movs	r3, #0
 8017440:	60fb      	str	r3, [r7, #12]
 8017442:	e008      	b.n	8017456 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	68fa      	ldr	r2, [r7, #12]
 8017448:	3205      	adds	r2, #5
 801744a:	2100      	movs	r1, #0
 801744c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	3301      	adds	r3, #1
 8017454:	60fb      	str	r3, [r7, #12]
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	2b04      	cmp	r3, #4
 801745a:	ddf3      	ble.n	8017444 <MQTTCleanSession+0x12>
}
 801745c:	bf00      	nop
 801745e:	bf00      	nop
 8017460:	3714      	adds	r7, #20
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr

0801746a <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 801746a:	b580      	push	{r7, lr}
 801746c:	b082      	sub	sp, #8
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2200      	movs	r2, #0
 801747c:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017482:	2b00      	cmp	r3, #0
 8017484:	d002      	beq.n	801748c <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f7ff ffd3 	bl	8017432 <MQTTCleanSession>
}
 801748c:	bf00      	nop
 801748e:	3708      	adds	r7, #8
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8017494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017496:	b095      	sub	sp, #84	; 0x54
 8017498:	af06      	add	r7, sp, #24
 801749a:	6078      	str	r0, [r7, #4]
 801749c:	6039      	str	r1, [r7, #0]
    int len = 0,
 801749e:	2300      	movs	r3, #0
 80174a0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCCESS;
 80174a2:	2300      	movs	r3, #0
 80174a4:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 80174a6:	6839      	ldr	r1, [r7, #0]
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	f7ff fe1c 	bl	80170e6 <readPacket>
 80174ae:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 80174b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b2:	2b0d      	cmp	r3, #13
 80174b4:	d81e      	bhi.n	80174f4 <cycle+0x60>
 80174b6:	a201      	add	r2, pc, #4	; (adr r2, 80174bc <cycle+0x28>)
 80174b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174bc:	0801764b 	.word	0x0801764b
 80174c0:	080174f5 	.word	0x080174f5
 80174c4:	0801764b 	.word	0x0801764b
 80174c8:	080174fb 	.word	0x080174fb
 80174cc:	0801764b 	.word	0x0801764b
 80174d0:	080175c7 	.word	0x080175c7
 80174d4:	080175c7 	.word	0x080175c7
 80174d8:	0801764b 	.word	0x0801764b
 80174dc:	080174f5 	.word	0x080174f5
 80174e0:	0801764b 	.word	0x0801764b
 80174e4:	080174f5 	.word	0x080174f5
 80174e8:	0801764b 	.word	0x0801764b
 80174ec:	080174f5 	.word	0x080174f5
 80174f0:	08017643 	.word	0x08017643
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 80174f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f6:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 80174f8:	e0b9      	b.n	801766e <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 80174fa:	2300      	movs	r3, #0
 80174fc:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8017502:	687a      	ldr	r2, [r7, #4]
 8017504:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8017506:	4616      	mov	r6, r2
 8017508:	f107 0210 	add.w	r2, r7, #16
 801750c:	1d15      	adds	r5, r2, #4
 801750e:	f107 0210 	add.w	r2, r7, #16
 8017512:	1c54      	adds	r4, r2, #1
 8017514:	f107 010c 	add.w	r1, r7, #12
 8017518:	f107 0210 	add.w	r2, r7, #16
 801751c:	1c90      	adds	r0, r2, #2
 801751e:	9604      	str	r6, [sp, #16]
 8017520:	9303      	str	r3, [sp, #12]
 8017522:	f107 0310 	add.w	r3, r7, #16
 8017526:	330c      	adds	r3, #12
 8017528:	9302      	str	r3, [sp, #8]
 801752a:	f107 0310 	add.w	r3, r7, #16
 801752e:	3308      	adds	r3, #8
 8017530:	9301      	str	r3, [sp, #4]
 8017532:	f107 0320 	add.w	r3, r7, #32
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	462b      	mov	r3, r5
 801753a:	4622      	mov	r2, r4
 801753c:	f000 ff05 	bl	801834a <MQTTDeserialize_publish>
 8017540:	4603      	mov	r3, r0
 8017542:	2b01      	cmp	r3, #1
 8017544:	f040 8090 	bne.w	8017668 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	b2db      	uxtb	r3, r3
 801754c:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801754e:	f107 0210 	add.w	r2, r7, #16
 8017552:	f107 0320 	add.w	r3, r7, #32
 8017556:	4619      	mov	r1, r3
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f7ff feb1 	bl	80172c0 <deliverMessage>
            if (msg.qos != QOS0)
 801755e:	7c3b      	ldrb	r3, [r7, #16]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d074      	beq.n	801764e <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8017564:	7c3b      	ldrb	r3, [r7, #16]
 8017566:	2b01      	cmp	r3, #1
 8017568:	d10c      	bne.n	8017584 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	6918      	ldr	r0, [r3, #16]
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	689b      	ldr	r3, [r3, #8]
 8017572:	4619      	mov	r1, r3
 8017574:	8abb      	ldrh	r3, [r7, #20]
 8017576:	9300      	str	r3, [sp, #0]
 8017578:	2300      	movs	r3, #0
 801757a:	2204      	movs	r2, #4
 801757c:	f001 fa3f 	bl	80189fe <MQTTSerialize_ack>
 8017580:	6378      	str	r0, [r7, #52]	; 0x34
 8017582:	e00e      	b.n	80175a2 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8017584:	7c3b      	ldrb	r3, [r7, #16]
 8017586:	2b02      	cmp	r3, #2
 8017588:	d10b      	bne.n	80175a2 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6918      	ldr	r0, [r3, #16]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	689b      	ldr	r3, [r3, #8]
 8017592:	4619      	mov	r1, r3
 8017594:	8abb      	ldrh	r3, [r7, #20]
 8017596:	9300      	str	r3, [sp, #0]
 8017598:	2300      	movs	r3, #0
 801759a:	2205      	movs	r2, #5
 801759c:	f001 fa2f 	bl	80189fe <MQTTSerialize_ack>
 80175a0:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 80175a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	dc03      	bgt.n	80175b0 <cycle+0x11c>
                    rc = FAILURE;
 80175a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80175ac:	633b      	str	r3, [r7, #48]	; 0x30
 80175ae:	e005      	b.n	80175bc <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 80175b0:	683a      	ldr	r2, [r7, #0]
 80175b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	f7ff fcc4 	bl	8016f42 <sendPacket>
 80175ba:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 80175bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80175c2:	d144      	bne.n	801764e <cycle+0x1ba>
                    goto exit; // there was a problem
 80175c4:	e053      	b.n	801766e <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	695c      	ldr	r4, [r3, #20]
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	68db      	ldr	r3, [r3, #12]
 80175ce:	f107 020a 	add.w	r2, r7, #10
 80175d2:	f107 0109 	add.w	r1, r7, #9
 80175d6:	f107 0008 	add.w	r0, r7, #8
 80175da:	9300      	str	r3, [sp, #0]
 80175dc:	4623      	mov	r3, r4
 80175de:	f000 ff26 	bl	801842e <MQTTDeserialize_ack>
 80175e2:	4603      	mov	r3, r0
 80175e4:	2b01      	cmp	r3, #1
 80175e6:	d003      	beq.n	80175f0 <cycle+0x15c>
                rc = FAILURE;
 80175e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80175ec:	633b      	str	r3, [r7, #48]	; 0x30
 80175ee:	e023      	b.n	8017638 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	6918      	ldr	r0, [r3, #16]
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	689b      	ldr	r3, [r3, #8]
 80175f8:	4619      	mov	r1, r3
 80175fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175fc:	2b05      	cmp	r3, #5
 80175fe:	d101      	bne.n	8017604 <cycle+0x170>
 8017600:	2206      	movs	r2, #6
 8017602:	e000      	b.n	8017606 <cycle+0x172>
 8017604:	2207      	movs	r2, #7
 8017606:	897b      	ldrh	r3, [r7, #10]
 8017608:	9300      	str	r3, [sp, #0]
 801760a:	2300      	movs	r3, #0
 801760c:	f001 f9f7 	bl	80189fe <MQTTSerialize_ack>
 8017610:	6378      	str	r0, [r7, #52]	; 0x34
 8017612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017614:	2b00      	cmp	r3, #0
 8017616:	dc03      	bgt.n	8017620 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8017618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801761c:	633b      	str	r3, [r7, #48]	; 0x30
 801761e:	e00b      	b.n	8017638 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8017620:	683a      	ldr	r2, [r7, #0]
 8017622:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017624:	6878      	ldr	r0, [r7, #4]
 8017626:	f7ff fc8c 	bl	8016f42 <sendPacket>
 801762a:	6338      	str	r0, [r7, #48]	; 0x30
 801762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801762e:	2b00      	cmp	r3, #0
 8017630:	d002      	beq.n	8017638 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 8017632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017636:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8017638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801763e:	d108      	bne.n	8017652 <cycle+0x1be>
                goto exit; // there was a problem
 8017640:	e015      	b.n	801766e <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	2200      	movs	r2, #0
 8017646:	771a      	strb	r2, [r3, #28]
            break;
 8017648:	e004      	b.n	8017654 <cycle+0x1c0>
            break;
 801764a:	bf00      	nop
 801764c:	e002      	b.n	8017654 <cycle+0x1c0>
            break;
 801764e:	bf00      	nop
 8017650:	e000      	b.n	8017654 <cycle+0x1c0>
            break;
 8017652:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 8017654:	6878      	ldr	r0, [r7, #4]
 8017656:	f7ff fe9b 	bl	8017390 <keepalive>
 801765a:	4603      	mov	r3, r0
 801765c:	2b00      	cmp	r3, #0
 801765e:	d005      	beq.n	801766c <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8017660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017664:	633b      	str	r3, [r7, #48]	; 0x30
 8017666:	e002      	b.n	801766e <cycle+0x1da>
                goto exit;
 8017668:	bf00      	nop
 801766a:	e000      	b.n	801766e <cycle+0x1da>
    }

exit:
 801766c:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 801766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017670:	2b00      	cmp	r3, #0
 8017672:	d102      	bne.n	801767a <cycle+0x1e6>
        rc = packet_type;
 8017674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017676:	633b      	str	r3, [r7, #48]	; 0x30
 8017678:	e006      	b.n	8017688 <cycle+0x1f4>
    else if (c->isconnected)
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	6a1b      	ldr	r3, [r3, #32]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d002      	beq.n	8017688 <cycle+0x1f4>
        MQTTCloseSession(c);
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ff fef1 	bl	801746a <MQTTCloseSession>
    return rc;
 8017688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801768a:	4618      	mov	r0, r3
 801768c:	373c      	adds	r7, #60	; 0x3c
 801768e:	46bd      	mov	sp, r7
 8017690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017692:	bf00      	nop

08017694 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b086      	sub	sp, #24
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
 801769c:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 801769e:	2300      	movs	r3, #0
 80176a0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 80176a2:	f107 030c 	add.w	r3, r7, #12
 80176a6:	4618      	mov	r0, r3
 80176a8:	f000 fb44 	bl	8017d34 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80176ac:	683a      	ldr	r2, [r7, #0]
 80176ae:	f107 030c 	add.w	r3, r7, #12
 80176b2:	4611      	mov	r1, r2
 80176b4:	4618      	mov	r0, r3
 80176b6:	f000 fafb 	bl	8017cb0 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 80176ba:	f107 030c 	add.w	r3, r7, #12
 80176be:	4619      	mov	r1, r3
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f7ff fee7 	bl	8017494 <cycle>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	da03      	bge.n	80176d4 <MQTTYield+0x40>
        {
            rc = FAILURE;
 80176cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176d0:	617b      	str	r3, [r7, #20]
            break;
 80176d2:	e007      	b.n	80176e4 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 80176d4:	f107 030c 	add.w	r3, r7, #12
 80176d8:	4618      	mov	r0, r3
 80176da:	f000 fad3 	bl	8017c84 <TimerIsExpired>
 80176de:	4603      	mov	r3, r0
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d0ea      	beq.n	80176ba <MQTTYield+0x26>

    return rc;
 80176e4:	697b      	ldr	r3, [r7, #20]
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3718      	adds	r7, #24
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd80      	pop	{r7, pc}

080176ee <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80176ee:	b580      	push	{r7, lr}
 80176f0:	b086      	sub	sp, #24
 80176f2:	af00      	add	r7, sp, #0
 80176f4:	60f8      	str	r0, [r7, #12]
 80176f6:	60b9      	str	r1, [r7, #8]
 80176f8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80176fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176fe:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f000 fabf 	bl	8017c84 <TimerIsExpired>
 8017706:	4603      	mov	r3, r0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d10c      	bne.n	8017726 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 801770c:	6879      	ldr	r1, [r7, #4]
 801770e:	68f8      	ldr	r0, [r7, #12]
 8017710:	f7ff fec0 	bl	8017494 <cycle>
 8017714:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8017716:	697a      	ldr	r2, [r7, #20]
 8017718:	68bb      	ldr	r3, [r7, #8]
 801771a:	429a      	cmp	r2, r3
 801771c:	d004      	beq.n	8017728 <waitfor+0x3a>
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	2b00      	cmp	r3, #0
 8017722:	daed      	bge.n	8017700 <waitfor+0x12>
 8017724:	e000      	b.n	8017728 <waitfor+0x3a>
            break; // we timed out
 8017726:	bf00      	nop

    return rc;
 8017728:	697b      	ldr	r3, [r7, #20]
}
 801772a:	4618      	mov	r0, r3
 801772c:	3718      	adds	r7, #24
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
	...

08017734 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b09e      	sub	sp, #120	; 0x78
 8017738:	af00      	add	r7, sp, #0
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	60b9      	str	r1, [r7, #8]
 801773e:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8017740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017744:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8017746:	4a43      	ldr	r2, [pc, #268]	; (8017854 <MQTTConnectWithResults+0x120>)
 8017748:	f107 0310 	add.w	r3, r7, #16
 801774c:	4611      	mov	r1, r2
 801774e:	2258      	movs	r2, #88	; 0x58
 8017750:	4618      	mov	r0, r3
 8017752:	f001 fae7 	bl	8018d24 <memcpy>
    int len = 0;
 8017756:	2300      	movs	r3, #0
 8017758:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	6a1b      	ldr	r3, [r3, #32]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d164      	bne.n	801782c <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8017762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8017766:	4618      	mov	r0, r3
 8017768:	f000 fae4 	bl	8017d34 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	685a      	ldr	r2, [r3, #4]
 8017770:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8017774:	4611      	mov	r1, r2
 8017776:	4618      	mov	r0, r3
 8017778:	f000 fa9a 	bl	8017cb0 <TimerCountdownMS>

    if (options == 0)
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d102      	bne.n	8017788 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8017782:	f107 0310 	add.w	r3, r7, #16
 8017786:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	8b1b      	ldrh	r3, [r3, #24]
 801778c:	461a      	mov	r2, r3
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	7e9b      	ldrb	r3, [r3, #26]
 8017796:	461a      	mov	r2, r3
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	699b      	ldr	r3, [r3, #24]
 80177a6:	4619      	mov	r1, r3
 80177a8:	4610      	mov	r0, r2
 80177aa:	f000 fa95 	bl	8017cd8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	6918      	ldr	r0, [r3, #16]
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	689b      	ldr	r3, [r3, #8]
 80177b6:	68ba      	ldr	r2, [r7, #8]
 80177b8:	4619      	mov	r1, r3
 80177ba:	f000 fc2f 	bl	801801c <MQTTSerialize_connect>
 80177be:	6738      	str	r0, [r7, #112]	; 0x70
 80177c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	dd34      	ble.n	8017830 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 80177c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80177ca:	461a      	mov	r2, r3
 80177cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80177ce:	68f8      	ldr	r0, [r7, #12]
 80177d0:	f7ff fbb7 	bl	8016f42 <sendPacket>
 80177d4:	6778      	str	r0, [r7, #116]	; 0x74
 80177d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d12b      	bne.n	8017834 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 80177dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80177e0:	461a      	mov	r2, r3
 80177e2:	2102      	movs	r1, #2
 80177e4:	68f8      	ldr	r0, [r7, #12]
 80177e6:	f7ff ff82 	bl	80176ee <waitfor>
 80177ea:	4603      	mov	r3, r0
 80177ec:	2b02      	cmp	r3, #2
 80177ee:	d119      	bne.n	8017824 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2200      	movs	r2, #0
 80177f4:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2200      	movs	r2, #0
 80177fa:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	1c58      	adds	r0, r3, #1
 8017800:	6879      	ldr	r1, [r7, #4]
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	695a      	ldr	r2, [r3, #20]
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	68db      	ldr	r3, [r3, #12]
 801780a:	f000 fcf3 	bl	80181f4 <MQTTDeserialize_connack>
 801780e:	4603      	mov	r3, r0
 8017810:	2b01      	cmp	r3, #1
 8017812:	d103      	bne.n	801781c <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	677b      	str	r3, [r7, #116]	; 0x74
 801781a:	e00c      	b.n	8017836 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 801781c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017820:	677b      	str	r3, [r7, #116]	; 0x74
 8017822:	e008      	b.n	8017836 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8017824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017828:	677b      	str	r3, [r7, #116]	; 0x74
 801782a:	e004      	b.n	8017836 <MQTTConnectWithResults+0x102>
		  goto exit;
 801782c:	bf00      	nop
 801782e:	e002      	b.n	8017836 <MQTTConnectWithResults+0x102>
        goto exit;
 8017830:	bf00      	nop
 8017832:	e000      	b.n	8017836 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8017834:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8017836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017838:	2b00      	cmp	r3, #0
 801783a:	d105      	bne.n	8017848 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	2201      	movs	r2, #1
 8017840:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	2200      	movs	r2, #0
 8017846:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8017848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801784a:	4618      	mov	r0, r3
 801784c:	3778      	adds	r7, #120	; 0x78
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
 8017852:	bf00      	nop
 8017854:	0801d504 	.word	0x0801d504

08017858 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b084      	sub	sp, #16
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
 8017860:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8017862:	f107 030c 	add.w	r3, r7, #12
 8017866:	461a      	mov	r2, r3
 8017868:	6839      	ldr	r1, [r7, #0]
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7ff ff62 	bl	8017734 <MQTTConnectWithResults>
 8017870:	4603      	mov	r3, r0
}
 8017872:	4618      	mov	r0, r3
 8017874:	3710      	adds	r7, #16
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}

0801787a <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 801787a:	b580      	push	{r7, lr}
 801787c:	b086      	sub	sp, #24
 801787e:	af00      	add	r7, sp, #0
 8017880:	60f8      	str	r0, [r7, #12]
 8017882:	60b9      	str	r1, [r7, #8]
 8017884:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8017886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801788a:	617b      	str	r3, [r7, #20]
    int i = -1;
 801788c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017890:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017892:	2300      	movs	r3, #0
 8017894:	613b      	str	r3, [r7, #16]
 8017896:	e028      	b.n	80178ea <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	693a      	ldr	r2, [r7, #16]
 801789c:	3205      	adds	r2, #5
 801789e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d01e      	beq.n	80178e4 <MQTTSetMessageHandler+0x6a>
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	693a      	ldr	r2, [r7, #16]
 80178aa:	3205      	adds	r2, #5
 80178ac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80178b0:	68b9      	ldr	r1, [r7, #8]
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7e8 fcc4 	bl	8000240 <strcmp>
 80178b8:	4603      	mov	r3, r0
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d112      	bne.n	80178e4 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d10c      	bne.n	80178de <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	693a      	ldr	r2, [r7, #16]
 80178c8:	3205      	adds	r2, #5
 80178ca:	2100      	movs	r1, #0
 80178cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 80178d0:	68fa      	ldr	r2, [r7, #12]
 80178d2:	693b      	ldr	r3, [r7, #16]
 80178d4:	3305      	adds	r3, #5
 80178d6:	00db      	lsls	r3, r3, #3
 80178d8:	4413      	add	r3, r2
 80178da:	2200      	movs	r2, #0
 80178dc:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 80178de:	2300      	movs	r3, #0
 80178e0:	617b      	str	r3, [r7, #20]
            break;
 80178e2:	e005      	b.n	80178f0 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80178e4:	693b      	ldr	r3, [r7, #16]
 80178e6:	3301      	adds	r3, #1
 80178e8:	613b      	str	r3, [r7, #16]
 80178ea:	693b      	ldr	r3, [r7, #16]
 80178ec:	2b04      	cmp	r3, #4
 80178ee:	ddd3      	ble.n	8017898 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d026      	beq.n	8017944 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80178fc:	d112      	bne.n	8017924 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80178fe:	2300      	movs	r3, #0
 8017900:	613b      	str	r3, [r7, #16]
 8017902:	e00c      	b.n	801791e <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	693a      	ldr	r2, [r7, #16]
 8017908:	3205      	adds	r2, #5
 801790a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d102      	bne.n	8017918 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 8017912:	2300      	movs	r3, #0
 8017914:	617b      	str	r3, [r7, #20]
                    break;
 8017916:	e005      	b.n	8017924 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	3301      	adds	r3, #1
 801791c:	613b      	str	r3, [r7, #16]
 801791e:	693b      	ldr	r3, [r7, #16]
 8017920:	2b04      	cmp	r3, #4
 8017922:	ddef      	ble.n	8017904 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8017924:	693b      	ldr	r3, [r7, #16]
 8017926:	2b04      	cmp	r3, #4
 8017928:	dc0c      	bgt.n	8017944 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	693a      	ldr	r2, [r7, #16]
 801792e:	3205      	adds	r2, #5
 8017930:	68b9      	ldr	r1, [r7, #8]
 8017932:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8017936:	68fa      	ldr	r2, [r7, #12]
 8017938:	693b      	ldr	r3, [r7, #16]
 801793a:	3305      	adds	r3, #5
 801793c:	00db      	lsls	r3, r3, #3
 801793e:	4413      	add	r3, r2
 8017940:	687a      	ldr	r2, [r7, #4]
 8017942:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8017944:	697b      	ldr	r3, [r7, #20]
}
 8017946:	4618      	mov	r0, r3
 8017948:	3718      	adds	r7, #24
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}

0801794e <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 801794e:	b5b0      	push	{r4, r5, r7, lr}
 8017950:	b092      	sub	sp, #72	; 0x48
 8017952:	af04      	add	r7, sp, #16
 8017954:	60f8      	str	r0, [r7, #12]
 8017956:	60b9      	str	r1, [r7, #8]
 8017958:	603b      	str	r3, [r7, #0]
 801795a:	4613      	mov	r3, r2
 801795c:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 801795e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017962:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 8017964:	2300      	movs	r3, #0
 8017966:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 8017968:	2300      	movs	r3, #0
 801796a:	61fb      	str	r3, [r7, #28]
 801796c:	2300      	movs	r3, #0
 801796e:	623b      	str	r3, [r7, #32]
 8017970:	2300      	movs	r3, #0
 8017972:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 8017974:	68bb      	ldr	r3, [r7, #8]
 8017976:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	6a1b      	ldr	r3, [r3, #32]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d062      	beq.n	8017a46 <MQTTSubscribeWithResults+0xf8>
		    goto exit;

    TimerInit(&timer);
 8017980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017984:	4618      	mov	r0, r3
 8017986:	f000 f9d5 	bl	8017d34 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	685a      	ldr	r2, [r3, #4]
 801798e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017992:	4611      	mov	r1, r2
 8017994:	4618      	mov	r0, r3
 8017996:	f000 f98b 	bl	8017cb0 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic,(int*)&qos);
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	691c      	ldr	r4, [r3, #16]
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	689b      	ldr	r3, [r3, #8]
 80179a2:	461d      	mov	r5, r3
 80179a4:	68f8      	ldr	r0, [r7, #12]
 80179a6:	f7ff fab3 	bl	8016f10 <getNextPacketId>
 80179aa:	4603      	mov	r3, r0
 80179ac:	b29a      	uxth	r2, r3
 80179ae:	1dfb      	adds	r3, r7, #7
 80179b0:	9302      	str	r3, [sp, #8]
 80179b2:	f107 031c 	add.w	r3, r7, #28
 80179b6:	9301      	str	r3, [sp, #4]
 80179b8:	2301      	movs	r3, #1
 80179ba:	9300      	str	r3, [sp, #0]
 80179bc:	4613      	mov	r3, r2
 80179be:	2200      	movs	r2, #0
 80179c0:	4629      	mov	r1, r5
 80179c2:	4620      	mov	r0, r4
 80179c4:	f001 f897 	bl	8018af6 <MQTTSerialize_subscribe>
 80179c8:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 80179ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	dd3c      	ble.n	8017a4a <MQTTSubscribeWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80179d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80179d4:	461a      	mov	r2, r3
 80179d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	f7ff fab2 	bl	8016f42 <sendPacket>
 80179de:	6378      	str	r0, [r7, #52]	; 0x34
 80179e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d133      	bne.n	8017a4e <MQTTSubscribeWithResults+0x100>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80179e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80179ea:	461a      	mov	r2, r3
 80179ec:	2109      	movs	r1, #9
 80179ee:	68f8      	ldr	r0, [r7, #12]
 80179f0:	f7ff fe7d 	bl	80176ee <waitfor>
 80179f4:	4603      	mov	r3, r0
 80179f6:	2b09      	cmp	r3, #9
 80179f8:	d121      	bne.n	8017a3e <MQTTSubscribeWithResults+0xf0>
    {
        int count = 0;
 80179fa:	2300      	movs	r3, #0
 80179fc:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 80179fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a00:	2200      	movs	r2, #0
 8017a02:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, 0, c->readbuf, c->readbuf_size) == 1)
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	695b      	ldr	r3, [r3, #20]
 8017a08:	68fa      	ldr	r2, [r7, #12]
 8017a0a:	68d2      	ldr	r2, [r2, #12]
 8017a0c:	4611      	mov	r1, r2
 8017a0e:	f107 0218 	add.w	r2, r7, #24
 8017a12:	f107 0016 	add.w	r0, r7, #22
 8017a16:	9101      	str	r1, [sp, #4]
 8017a18:	9300      	str	r3, [sp, #0]
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	2101      	movs	r1, #1
 8017a1e:	f001 f8e6 	bl	8018bee <MQTTDeserialize_suback>
 8017a22:	4603      	mov	r3, r0
 8017a24:	2b01      	cmp	r3, #1
 8017a26:	d113      	bne.n	8017a50 <MQTTSubscribeWithResults+0x102>
        {
            if (data->grantedQoS != 0x80)
 8017a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	2b80      	cmp	r3, #128	; 0x80
 8017a2e:	d00f      	beq.n	8017a50 <MQTTSubscribeWithResults+0x102>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8017a30:	683a      	ldr	r2, [r7, #0]
 8017a32:	68b9      	ldr	r1, [r7, #8]
 8017a34:	68f8      	ldr	r0, [r7, #12]
 8017a36:	f7ff ff20 	bl	801787a <MQTTSetMessageHandler>
 8017a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8017a3c:	e008      	b.n	8017a50 <MQTTSubscribeWithResults+0x102>
        }
    }
    else
        rc = FAILURE;
 8017a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a42:	637b      	str	r3, [r7, #52]	; 0x34
 8017a44:	e004      	b.n	8017a50 <MQTTSubscribeWithResults+0x102>
		    goto exit;
 8017a46:	bf00      	nop
 8017a48:	e002      	b.n	8017a50 <MQTTSubscribeWithResults+0x102>
        goto exit;
 8017a4a:	bf00      	nop
 8017a4c:	e000      	b.n	8017a50 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem
 8017a4e:	bf00      	nop

exit:
    if (rc == FAILURE)
 8017a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a56:	d102      	bne.n	8017a5e <MQTTSubscribeWithResults+0x110>
        MQTTCloseSession(c);
 8017a58:	68f8      	ldr	r0, [r7, #12]
 8017a5a:	f7ff fd06 	bl	801746a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8017a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017a60:	4618      	mov	r0, r3
 8017a62:	3738      	adds	r7, #56	; 0x38
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bdb0      	pop	{r4, r5, r7, pc}

08017a68 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b088      	sub	sp, #32
 8017a6c:	af02      	add	r7, sp, #8
 8017a6e:	60f8      	str	r0, [r7, #12]
 8017a70:	60b9      	str	r1, [r7, #8]
 8017a72:	603b      	str	r3, [r7, #0]
 8017a74:	4613      	mov	r3, r2
 8017a76:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8017a78:	79fa      	ldrb	r2, [r7, #7]
 8017a7a:	f107 0314 	add.w	r3, r7, #20
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	68b9      	ldr	r1, [r7, #8]
 8017a84:	68f8      	ldr	r0, [r7, #12]
 8017a86:	f7ff ff62 	bl	801794e <MQTTSubscribeWithResults>
 8017a8a:	4603      	mov	r3, r0
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3718      	adds	r7, #24
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8017a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a96:	b097      	sub	sp, #92	; 0x5c
 8017a98:	af08      	add	r7, sp, #32
 8017a9a:	60f8      	str	r0, [r7, #12]
 8017a9c:	60b9      	str	r1, [r7, #8]
 8017a9e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8017aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017aa4:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	61fb      	str	r3, [r7, #28]
 8017aaa:	2300      	movs	r3, #0
 8017aac:	623b      	str	r3, [r7, #32]
 8017aae:	2300      	movs	r3, #0
 8017ab0:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8017ab2:	68bb      	ldr	r3, [r7, #8]
 8017ab4:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	6a1b      	ldr	r3, [r3, #32]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	f000 809b 	beq.w	8017bfa <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8017ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f000 f933 	bl	8017d34 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	685a      	ldr	r2, [r3, #4]
 8017ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017ad6:	4611      	mov	r1, r2
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f000 f8e9 	bl	8017cb0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	781b      	ldrb	r3, [r3, #0]
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	d003      	beq.n	8017aee <MQTTPublish+0x5a>
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	781b      	ldrb	r3, [r3, #0]
 8017aea:	2b02      	cmp	r3, #2
 8017aec:	d106      	bne.n	8017afc <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8017aee:	68f8      	ldr	r0, [r7, #12]
 8017af0:	f7ff fa0e 	bl	8016f10 <getNextPacketId>
 8017af4:	4603      	mov	r3, r0
 8017af6:	b29a      	uxth	r2, r3
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	691b      	ldr	r3, [r3, #16]
 8017b00:	603b      	str	r3, [r7, #0]
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	689b      	ldr	r3, [r3, #8]
 8017b06:	469c      	mov	ip, r3
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	781b      	ldrb	r3, [r3, #0]
 8017b0c:	469e      	mov	lr, r3
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	785d      	ldrb	r5, [r3, #1]
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	689b      	ldr	r3, [r3, #8]
 8017b1a:	687a      	ldr	r2, [r7, #4]
 8017b1c:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8017b1e:	9206      	str	r2, [sp, #24]
 8017b20:	9305      	str	r3, [sp, #20]
 8017b22:	ac02      	add	r4, sp, #8
 8017b24:	f107 031c 	add.w	r3, r7, #28
 8017b28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017b30:	9601      	str	r6, [sp, #4]
 8017b32:	9500      	str	r5, [sp, #0]
 8017b34:	4673      	mov	r3, lr
 8017b36:	2200      	movs	r2, #0
 8017b38:	4661      	mov	r1, ip
 8017b3a:	6838      	ldr	r0, [r7, #0]
 8017b3c:	f000 fee9 	bl	8018912 <MQTTSerialize_publish>
 8017b40:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8017b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	dd5a      	ble.n	8017bfe <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8017b48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017b4c:	461a      	mov	r2, r3
 8017b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b50:	68f8      	ldr	r0, [r7, #12]
 8017b52:	f7ff f9f6 	bl	8016f42 <sendPacket>
 8017b56:	6378      	str	r0, [r7, #52]	; 0x34
 8017b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d151      	bne.n	8017c02 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	2b01      	cmp	r3, #1
 8017b64:	d122      	bne.n	8017bac <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8017b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017b6a:	461a      	mov	r2, r3
 8017b6c:	2104      	movs	r1, #4
 8017b6e:	68f8      	ldr	r0, [r7, #12]
 8017b70:	f7ff fdbd 	bl	80176ee <waitfor>
 8017b74:	4603      	mov	r3, r0
 8017b76:	2b04      	cmp	r3, #4
 8017b78:	d114      	bne.n	8017ba4 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	695c      	ldr	r4, [r3, #20]
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	68db      	ldr	r3, [r3, #12]
 8017b82:	f107 021a 	add.w	r2, r7, #26
 8017b86:	f107 0119 	add.w	r1, r7, #25
 8017b8a:	f107 0018 	add.w	r0, r7, #24
 8017b8e:	9300      	str	r3, [sp, #0]
 8017b90:	4623      	mov	r3, r4
 8017b92:	f000 fc4c 	bl	801842e <MQTTDeserialize_ack>
 8017b96:	4603      	mov	r3, r0
 8017b98:	2b01      	cmp	r3, #1
 8017b9a:	d035      	beq.n	8017c08 <MQTTPublish+0x174>
                rc = FAILURE;
 8017b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8017ba2:	e031      	b.n	8017c08 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8017ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8017baa:	e02d      	b.n	8017c08 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	781b      	ldrb	r3, [r3, #0]
 8017bb0:	2b02      	cmp	r3, #2
 8017bb2:	d128      	bne.n	8017c06 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8017bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017bb8:	461a      	mov	r2, r3
 8017bba:	2107      	movs	r1, #7
 8017bbc:	68f8      	ldr	r0, [r7, #12]
 8017bbe:	f7ff fd96 	bl	80176ee <waitfor>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	2b07      	cmp	r3, #7
 8017bc6:	d114      	bne.n	8017bf2 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	695c      	ldr	r4, [r3, #20]
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	68db      	ldr	r3, [r3, #12]
 8017bd0:	f107 0216 	add.w	r2, r7, #22
 8017bd4:	f107 0115 	add.w	r1, r7, #21
 8017bd8:	f107 0014 	add.w	r0, r7, #20
 8017bdc:	9300      	str	r3, [sp, #0]
 8017bde:	4623      	mov	r3, r4
 8017be0:	f000 fc25 	bl	801842e <MQTTDeserialize_ack>
 8017be4:	4603      	mov	r3, r0
 8017be6:	2b01      	cmp	r3, #1
 8017be8:	d00e      	beq.n	8017c08 <MQTTPublish+0x174>
                rc = FAILURE;
 8017bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017bee:	637b      	str	r3, [r7, #52]	; 0x34
 8017bf0:	e00a      	b.n	8017c08 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8017bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8017bf8:	e006      	b.n	8017c08 <MQTTPublish+0x174>
		    goto exit;
 8017bfa:	bf00      	nop
 8017bfc:	e004      	b.n	8017c08 <MQTTPublish+0x174>
        goto exit;
 8017bfe:	bf00      	nop
 8017c00:	e002      	b.n	8017c08 <MQTTPublish+0x174>
        goto exit; // there was a problem
 8017c02:	bf00      	nop
 8017c04:	e000      	b.n	8017c08 <MQTTPublish+0x174>
    }

exit:
 8017c06:	bf00      	nop
    if (rc == FAILURE)
 8017c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c0e:	d102      	bne.n	8017c16 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8017c10:	68f8      	ldr	r0, [r7, #12]
 8017c12:	f7ff fc2a 	bl	801746a <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8017c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017c18:	4618      	mov	r0, r3
 8017c1a:	373c      	adds	r7, #60	; 0x3c
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017c20 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b086      	sub	sp, #24
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8017c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c2c:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8017c32:	f107 0308 	add.w	r3, r7, #8
 8017c36:	4618      	mov	r0, r3
 8017c38:	f000 f87c 	bl	8017d34 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	685a      	ldr	r2, [r3, #4]
 8017c40:	f107 0308 	add.w	r3, r7, #8
 8017c44:	4611      	mov	r1, r2
 8017c46:	4618      	mov	r0, r3
 8017c48:	f000 f832 	bl	8017cb0 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	691a      	ldr	r2, [r3, #16]
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	689b      	ldr	r3, [r3, #8]
 8017c54:	4619      	mov	r1, r3
 8017c56:	4610      	mov	r0, r2
 8017c58:	f000 fb59 	bl	801830e <MQTTSerialize_disconnect>
 8017c5c:	6138      	str	r0, [r7, #16]
    if (len > 0)
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	dd07      	ble.n	8017c74 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8017c64:	f107 0308 	add.w	r3, r7, #8
 8017c68:	461a      	mov	r2, r3
 8017c6a:	6939      	ldr	r1, [r7, #16]
 8017c6c:	6878      	ldr	r0, [r7, #4]
 8017c6e:	f7ff f968 	bl	8016f42 <sendPacket>
 8017c72:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 8017c74:	6878      	ldr	r0, [r7, #4]
 8017c76:	f7ff fbf8 	bl	801746a <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8017c7a:	697b      	ldr	r3, [r7, #20]
}
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	3718      	adds	r7, #24
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}

08017c84 <TimerIsExpired>:
//#define SERVER_IP4	84

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 8017c84:	b480      	push	{r7}
 8017c86:	b085      	sub	sp, #20
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	685a      	ldr	r2, [r3, #4]
 8017c90:	4b06      	ldr	r3, [pc, #24]	; (8017cac <TimerIsExpired+0x28>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	1ad3      	subs	r3, r2, r3
 8017c96:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	0fdb      	lsrs	r3, r3, #31
 8017c9c:	b2db      	uxtb	r3, r3
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	3714      	adds	r7, #20
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca8:	4770      	bx	lr
 8017caa:	bf00      	nop
 8017cac:	20011394 	.word	0x20011394

08017cb0 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8017cb0:	b480      	push	{r7}
 8017cb2:	b083      	sub	sp, #12
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8017cba:	4b06      	ldr	r3, [pc, #24]	; (8017cd4 <TimerCountdownMS+0x24>)
 8017cbc:	681a      	ldr	r2, [r3, #0]
 8017cbe:	683b      	ldr	r3, [r7, #0]
 8017cc0:	441a      	add	r2, r3
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	605a      	str	r2, [r3, #4]
}
 8017cc6:	bf00      	nop
 8017cc8:	370c      	adds	r7, #12
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd0:	4770      	bx	lr
 8017cd2:	bf00      	nop
 8017cd4:	20011394 	.word	0x20011394

08017cd8 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 8017cd8:	b480      	push	{r7}
 8017cda:	b083      	sub	sp, #12
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
 8017ce0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017ce8:	fb03 f202 	mul.w	r2, r3, r2
 8017cec:	4b05      	ldr	r3, [pc, #20]	; (8017d04 <TimerCountdown+0x2c>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	441a      	add	r2, r3
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	605a      	str	r2, [r3, #4]
}
 8017cf6:	bf00      	nop
 8017cf8:	370c      	adds	r7, #12
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d00:	4770      	bx	lr
 8017d02:	bf00      	nop
 8017d04:	20011394 	.word	0x20011394

08017d08 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 8017d08:	b480      	push	{r7}
 8017d0a:	b085      	sub	sp, #20
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	685a      	ldr	r2, [r3, #4]
 8017d14:	4b06      	ldr	r3, [pc, #24]	; (8017d30 <TimerLeftMS+0x28>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	1ad3      	subs	r3, r2, r3
 8017d1a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3714      	adds	r7, #20
 8017d26:	46bd      	mov	sp, r7
 8017d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2c:	4770      	bx	lr
 8017d2e:	bf00      	nop
 8017d30:	20011394 	.word	0x20011394

08017d34 <TimerInit>:

void TimerInit(Timer *timer) {
 8017d34:	b480      	push	{r7}
 8017d36:	b083      	sub	sp, #12
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	2200      	movs	r2, #0
 8017d40:	605a      	str	r2, [r3, #4]
}
 8017d42:	bf00      	nop
 8017d44:	370c      	adds	r7, #12
 8017d46:	46bd      	mov	sp, r7
 8017d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4c:	4770      	bx	lr
	...

08017d50 <NewNetwork>:
	close(n->socket);
	n->socket = 0;
}

#elif defined(MQTT_LWIP_NETCONN)
void NewNetwork(Network *n) {
 8017d50:	b480      	push	{r7}
 8017d52:	b083      	sub	sp, #12
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
	n->conn = NULL;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	601a      	str	r2, [r3, #0]
	n->buf = NULL;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2200      	movs	r2, #0
 8017d62:	605a      	str	r2, [r3, #4]
	n->offset = 0;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2200      	movs	r2, #0
 8017d68:	609a      	str	r2, [r3, #8]

	n->mqttread = net_read;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4a06      	ldr	r2, [pc, #24]	; (8017d88 <NewNetwork+0x38>)
 8017d6e:	60da      	str	r2, [r3, #12]
	n->mqttwrite = net_write;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	4a06      	ldr	r2, [pc, #24]	; (8017d8c <NewNetwork+0x3c>)
 8017d74:	611a      	str	r2, [r3, #16]
	n->disconnect = net_disconnect;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	4a05      	ldr	r2, [pc, #20]	; (8017d90 <NewNetwork+0x40>)
 8017d7a:	615a      	str	r2, [r3, #20]
}
 8017d7c:	bf00      	nop
 8017d7e:	370c      	adds	r7, #12
 8017d80:	46bd      	mov	sp, r7
 8017d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d86:	4770      	bx	lr
 8017d88:	08017dfd 	.word	0x08017dfd
 8017d8c:	08017ef7 	.word	0x08017ef7
 8017d90:	08017f31 	.word	0x08017f31

08017d94 <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b086      	sub	sp, #24
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	60f8      	str	r0, [r7, #12]
 8017d9c:	60b9      	str	r1, [r7, #8]
 8017d9e:	607a      	str	r2, [r7, #4]
	err_t err;
	ip_addr_t server_ip;

	ipaddr_aton(ip, &server_ip);
 8017da0:	f107 0310 	add.w	r3, r7, #16
 8017da4:	4619      	mov	r1, r3
 8017da6:	68b8      	ldr	r0, [r7, #8]
 8017da8:	f7fd fe80 	bl	8015aac <ip4addr_aton>

	n->conn = netconn_new(NETCONN_TCP);
 8017dac:	2200      	movs	r2, #0
 8017dae:	2100      	movs	r1, #0
 8017db0:	2010      	movs	r0, #16
 8017db2:	f7f1 fd89 	bl	80098c8 <netconn_new_with_proto_and_callback>
 8017db6:	4602      	mov	r2, r0
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	601a      	str	r2, [r3, #0]
	if (n->conn != NULL) {
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d016      	beq.n	8017df2 <ConnectNetwork+0x5e>
		err = netconn_connect(n->conn, &server_ip, port);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	687a      	ldr	r2, [r7, #4]
 8017dca:	b292      	uxth	r2, r2
 8017dcc:	f107 0110 	add.w	r1, r7, #16
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7f1 fe33 	bl	8009a3c <netconn_connect>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	75fb      	strb	r3, [r7, #23]

		if (err != ERR_OK) {
 8017dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d007      	beq.n	8017df2 <ConnectNetwork+0x5e>
			netconn_delete(n->conn); //free memory
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7f1 fe0c 	bl	8009a04 <netconn_delete>
			return -1;
 8017dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017df0:	e000      	b.n	8017df4 <ConnectNetwork+0x60>
		}
	}

	return 0;
 8017df2:	2300      	movs	r3, #0
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	3718      	adds	r7, #24
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}

08017dfc <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b08a      	sub	sp, #40	; 0x28
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	60f8      	str	r0, [r7, #12]
 8017e04:	60b9      	str	r1, [r7, #8]
 8017e06:	607a      	str	r2, [r7, #4]
 8017e08:	603b      	str	r3, [r7, #0]
	int rc;
	struct netbuf *inbuf;
	int offset = 0;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	623b      	str	r3, [r7, #32]
	int bytes = 0;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	61fb      	str	r3, [r7, #28]

	while(bytes < len) {
 8017e12:	e065      	b.n	8017ee0 <net_read+0xe4>
		if(n->buf != NULL) {
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	685b      	ldr	r3, [r3, #4]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d008      	beq.n	8017e2e <net_read+0x32>
			inbuf = n->buf;
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	685b      	ldr	r3, [r3, #4]
 8017e20:	617b      	str	r3, [r7, #20]
			offset = n->offset;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	689b      	ldr	r3, [r3, #8]
 8017e26:	623b      	str	r3, [r7, #32]
			rc = ERR_OK;
 8017e28:	2300      	movs	r3, #0
 8017e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8017e2c:	e00b      	b.n	8017e46 <net_read+0x4a>
		} else {
			rc = netconn_recv(n->conn, &inbuf);
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	f107 0214 	add.w	r2, r7, #20
 8017e36:	4611      	mov	r1, r2
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7f1 ffb3 	bl	8009da4 <netconn_recv>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	627b      	str	r3, [r7, #36]	; 0x24
			offset = 0;
 8017e42:	2300      	movs	r3, #0
 8017e44:	623b      	str	r3, [r7, #32]
		}

		if(rc != ERR_OK) {
 8017e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d007      	beq.n	8017e5c <net_read+0x60>
			if(rc != ERR_TIMEOUT) {
 8017e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4e:	f113 0f03 	cmn.w	r3, #3
 8017e52:	d04a      	beq.n	8017eea <net_read+0xee>
				bytes = -1;
 8017e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e58:	61fb      	str	r3, [r7, #28]
			}
			break;
 8017e5a:	e046      	b.n	8017eea <net_read+0xee>
		} else {
			int nblen = netbuf_len(inbuf) - offset;
 8017e5c:	697b      	ldr	r3, [r7, #20]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	891b      	ldrh	r3, [r3, #8]
 8017e62:	461a      	mov	r2, r3
 8017e64:	6a3b      	ldr	r3, [r7, #32]
 8017e66:	1ad3      	subs	r3, r2, r3
 8017e68:	61bb      	str	r3, [r7, #24]
			if((bytes+nblen) > len) {
 8017e6a:	69fa      	ldr	r2, [r7, #28]
 8017e6c:	69bb      	ldr	r3, [r7, #24]
 8017e6e:	4413      	add	r3, r2
 8017e70:	687a      	ldr	r2, [r7, #4]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	da1b      	bge.n	8017eae <net_read+0xb2>
				netbuf_copy_partial(inbuf, buffer+bytes, len-bytes,offset);
 8017e76:	697b      	ldr	r3, [r7, #20]
 8017e78:	6818      	ldr	r0, [r3, #0]
 8017e7a:	69fb      	ldr	r3, [r7, #28]
 8017e7c:	68ba      	ldr	r2, [r7, #8]
 8017e7e:	18d1      	adds	r1, r2, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	b29a      	uxth	r2, r3
 8017e84:	69fb      	ldr	r3, [r7, #28]
 8017e86:	b29b      	uxth	r3, r3
 8017e88:	1ad3      	subs	r3, r2, r3
 8017e8a:	b29a      	uxth	r2, r3
 8017e8c:	6a3b      	ldr	r3, [r7, #32]
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	f7f5 fc92 	bl	800d7b8 <pbuf_copy_partial>
				n->buf = inbuf;
 8017e94:	697a      	ldr	r2, [r7, #20]
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	605a      	str	r2, [r3, #4]
				n->offset = offset + len - bytes;
 8017e9a:	6a3a      	ldr	r2, [r7, #32]
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	441a      	add	r2, r3
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	1ad2      	subs	r2, r2, r3
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	609a      	str	r2, [r3, #8]
				bytes = len;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	61fb      	str	r3, [r7, #28]
 8017eac:	e018      	b.n	8017ee0 <net_read+0xe4>
			} else {
				netbuf_copy_partial(inbuf, buffer+bytes, nblen, offset);
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	6818      	ldr	r0, [r3, #0]
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	68ba      	ldr	r2, [r7, #8]
 8017eb6:	18d1      	adds	r1, r2, r3
 8017eb8:	69bb      	ldr	r3, [r7, #24]
 8017eba:	b29a      	uxth	r2, r3
 8017ebc:	6a3b      	ldr	r3, [r7, #32]
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	f7f5 fc7a 	bl	800d7b8 <pbuf_copy_partial>
				bytes += nblen;
 8017ec4:	69fa      	ldr	r2, [r7, #28]
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	4413      	add	r3, r2
 8017eca:	61fb      	str	r3, [r7, #28]
				netbuf_delete(inbuf);
 8017ecc:	697b      	ldr	r3, [r7, #20]
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7f3 fca2 	bl	800b818 <netbuf_delete>
				n->buf = NULL;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	605a      	str	r2, [r3, #4]
				n->offset = 0;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	2200      	movs	r2, #0
 8017ede:	609a      	str	r2, [r3, #8]
	while(bytes < len) {
 8017ee0:	69fa      	ldr	r2, [r7, #28]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	db95      	blt.n	8017e14 <net_read+0x18>
 8017ee8:	e000      	b.n	8017eec <net_read+0xf0>
			break;
 8017eea:	bf00      	nop
			}
		}
	}
	return bytes;
 8017eec:	69fb      	ldr	r3, [r7, #28]
}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	3728      	adds	r7, #40	; 0x28
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}

08017ef6 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8017ef6:	b580      	push	{r7, lr}
 8017ef8:	b088      	sub	sp, #32
 8017efa:	af02      	add	r7, sp, #8
 8017efc:	60f8      	str	r0, [r7, #12]
 8017efe:	60b9      	str	r1, [r7, #8]
 8017f00:	607a      	str	r2, [r7, #4]
 8017f02:	603b      	str	r3, [r7, #0]
	int rc = netconn_write(n->conn, buffer, len, NETCONN_NOCOPY);
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	6818      	ldr	r0, [r3, #0]
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	2300      	movs	r3, #0
 8017f10:	68b9      	ldr	r1, [r7, #8]
 8017f12:	f7f1 ffc1 	bl	8009e98 <netconn_write_partly>
 8017f16:	4603      	mov	r3, r0
 8017f18:	617b      	str	r3, [r7, #20]
	if(rc != ERR_OK) return -1;
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d002      	beq.n	8017f26 <net_write+0x30>
 8017f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f24:	e000      	b.n	8017f28 <net_write+0x32>
	return len;
 8017f26:	687b      	ldr	r3, [r7, #4]
}
 8017f28:	4618      	mov	r0, r3
 8017f2a:	3718      	adds	r7, #24
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd80      	pop	{r7, pc}

08017f30 <net_disconnect>:

void net_disconnect(Network *n) {
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b082      	sub	sp, #8
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
	netconn_close(n->conn); //close session
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7f2 f8ad 	bl	800a09c <netconn_close>
	netconn_delete(n->conn); //free memory
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7f1 fd5c 	bl	8009a04 <netconn_delete>
	n->conn = NULL;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	601a      	str	r2, [r3, #0]
}
 8017f52:	bf00      	nop
 8017f54:	3708      	adds	r7, #8
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}

08017f5a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8017f5a:	b590      	push	{r4, r7, lr}
 8017f5c:	b085      	sub	sp, #20
 8017f5e:	af00      	add	r7, sp, #0
 8017f60:	6078      	str	r0, [r7, #4]
	int len = 0;
 8017f62:	2300      	movs	r3, #0
 8017f64:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	7a1b      	ldrb	r3, [r3, #8]
 8017f6a:	2b03      	cmp	r3, #3
 8017f6c:	d102      	bne.n	8017f74 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8017f6e:	230c      	movs	r3, #12
 8017f70:	60fb      	str	r3, [r7, #12]
 8017f72:	e005      	b.n	8017f80 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	7a1b      	ldrb	r3, [r3, #8]
 8017f78:	2b04      	cmp	r3, #4
 8017f7a:	d101      	bne.n	8017f80 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8017f7c:	230a      	movs	r3, #10
 8017f7e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	330c      	adds	r3, #12
 8017f84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017f88:	f000 fc53 	bl	8018832 <MQTTstrlen>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	3302      	adds	r3, #2
 8017f90:	68fa      	ldr	r2, [r7, #12]
 8017f92:	4413      	add	r3, r2
 8017f94:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	7edb      	ldrb	r3, [r3, #27]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d013      	beq.n	8017fc6 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	3324      	adds	r3, #36	; 0x24
 8017fa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017fa6:	f000 fc44 	bl	8018832 <MQTTstrlen>
 8017faa:	4603      	mov	r3, r0
 8017fac:	1c9c      	adds	r4, r3, #2
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	3330      	adds	r3, #48	; 0x30
 8017fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017fb6:	f000 fc3c 	bl	8018832 <MQTTstrlen>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	4423      	add	r3, r4
 8017fbe:	3302      	adds	r3, #2
 8017fc0:	68fa      	ldr	r2, [r7, #12]
 8017fc2:	4413      	add	r3, r2
 8017fc4:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d103      	bne.n	8017fd6 <MQTTSerialize_connectLength+0x7c>
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d00a      	beq.n	8017fec <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	3340      	adds	r3, #64	; 0x40
 8017fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017fde:	f000 fc28 	bl	8018832 <MQTTstrlen>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	3302      	adds	r3, #2
 8017fe6:	68fa      	ldr	r2, [r7, #12]
 8017fe8:	4413      	add	r3, r2
 8017fea:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d103      	bne.n	8017ffc <MQTTSerialize_connectLength+0xa2>
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d00a      	beq.n	8018012 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	334c      	adds	r3, #76	; 0x4c
 8018000:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018004:	f000 fc15 	bl	8018832 <MQTTstrlen>
 8018008:	4603      	mov	r3, r0
 801800a:	3302      	adds	r3, #2
 801800c:	68fa      	ldr	r2, [r7, #12]
 801800e:	4413      	add	r3, r2
 8018010:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8018012:	68fb      	ldr	r3, [r7, #12]
}
 8018014:	4618      	mov	r0, r3
 8018016:	3714      	adds	r7, #20
 8018018:	46bd      	mov	sp, r7
 801801a:	bd90      	pop	{r4, r7, pc}

0801801c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b08a      	sub	sp, #40	; 0x28
 8018020:	af00      	add	r7, sp, #0
 8018022:	60f8      	str	r0, [r7, #12]
 8018024:	60b9      	str	r1, [r7, #8]
 8018026:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801802c:	2300      	movs	r3, #0
 801802e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8018030:	2300      	movs	r3, #0
 8018032:	617b      	str	r3, [r7, #20]
	int len = 0;
 8018034:	2300      	movs	r3, #0
 8018036:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8018038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801803c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801803e:	6878      	ldr	r0, [r7, #4]
 8018040:	f7ff ff8b 	bl	8017f5a <MQTTSerialize_connectLength>
 8018044:	6238      	str	r0, [r7, #32]
 8018046:	6a38      	ldr	r0, [r7, #32]
 8018048:	f000 faa8 	bl	801859c <MQTTPacket_len>
 801804c:	4602      	mov	r2, r0
 801804e:	68bb      	ldr	r3, [r7, #8]
 8018050:	4293      	cmp	r3, r2
 8018052:	da03      	bge.n	801805c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8018054:	f06f 0301 	mvn.w	r3, #1
 8018058:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801805a:	e0c2      	b.n	80181e2 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801805c:	2300      	movs	r3, #0
 801805e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8018060:	7e3b      	ldrb	r3, [r7, #24]
 8018062:	2201      	movs	r2, #1
 8018064:	f362 1307 	bfi	r3, r2, #4, #4
 8018068:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801806a:	7e3a      	ldrb	r2, [r7, #24]
 801806c:	f107 031c 	add.w	r3, r7, #28
 8018070:	4611      	mov	r1, r2
 8018072:	4618      	mov	r0, r3
 8018074:	f000 fb21 	bl	80186ba <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8018078:	69fb      	ldr	r3, [r7, #28]
 801807a:	6a39      	ldr	r1, [r7, #32]
 801807c:	4618      	mov	r0, r3
 801807e:	f000 fa21 	bl	80184c4 <MQTTPacket_encode>
 8018082:	4602      	mov	r2, r0
 8018084:	69fb      	ldr	r3, [r7, #28]
 8018086:	4413      	add	r3, r2
 8018088:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	7a1b      	ldrb	r3, [r3, #8]
 801808e:	2b04      	cmp	r3, #4
 8018090:	d10c      	bne.n	80180ac <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8018092:	f107 031c 	add.w	r3, r7, #28
 8018096:	4955      	ldr	r1, [pc, #340]	; (80181ec <MQTTSerialize_connect+0x1d0>)
 8018098:	4618      	mov	r0, r3
 801809a:	f000 fb4c 	bl	8018736 <writeCString>
		writeChar(&ptr, (char) 4);
 801809e:	f107 031c 	add.w	r3, r7, #28
 80180a2:	2104      	movs	r1, #4
 80180a4:	4618      	mov	r0, r3
 80180a6:	f000 fb08 	bl	80186ba <writeChar>
 80180aa:	e00b      	b.n	80180c4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80180ac:	f107 031c 	add.w	r3, r7, #28
 80180b0:	494f      	ldr	r1, [pc, #316]	; (80181f0 <MQTTSerialize_connect+0x1d4>)
 80180b2:	4618      	mov	r0, r3
 80180b4:	f000 fb3f 	bl	8018736 <writeCString>
		writeChar(&ptr, (char) 3);
 80180b8:	f107 031c 	add.w	r3, r7, #28
 80180bc:	2103      	movs	r1, #3
 80180be:	4618      	mov	r0, r3
 80180c0:	f000 fafb 	bl	80186ba <writeChar>
	}

	flags.all = 0;
 80180c4:	2300      	movs	r3, #0
 80180c6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	7e9b      	ldrb	r3, [r3, #26]
 80180cc:	f003 0301 	and.w	r3, r3, #1
 80180d0:	b2da      	uxtb	r2, r3
 80180d2:	7d3b      	ldrb	r3, [r7, #20]
 80180d4:	f362 0341 	bfi	r3, r2, #1, #1
 80180d8:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	7edb      	ldrb	r3, [r3, #27]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	bf14      	ite	ne
 80180e2:	2301      	movne	r3, #1
 80180e4:	2300      	moveq	r3, #0
 80180e6:	b2da      	uxtb	r2, r3
 80180e8:	7d3b      	ldrb	r3, [r7, #20]
 80180ea:	f362 0382 	bfi	r3, r2, #2, #1
 80180ee:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80180f0:	7d3b      	ldrb	r3, [r7, #20]
 80180f2:	f003 0304 	and.w	r3, r3, #4
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d013      	beq.n	8018124 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018102:	f003 0303 	and.w	r3, r3, #3
 8018106:	b2da      	uxtb	r2, r3
 8018108:	7d3b      	ldrb	r3, [r7, #20]
 801810a:	f362 03c4 	bfi	r3, r2, #3, #2
 801810e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018116:	f003 0301 	and.w	r3, r3, #1
 801811a:	b2da      	uxtb	r2, r3
 801811c:	7d3b      	ldrb	r3, [r7, #20]
 801811e:	f362 1345 	bfi	r3, r2, #5, #1
 8018122:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018128:	2b00      	cmp	r3, #0
 801812a:	d103      	bne.n	8018134 <MQTTSerialize_connect+0x118>
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018130:	2b00      	cmp	r3, #0
 8018132:	d003      	beq.n	801813c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8018134:	7d3b      	ldrb	r3, [r7, #20]
 8018136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801813a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018140:	2b00      	cmp	r3, #0
 8018142:	d103      	bne.n	801814c <MQTTSerialize_connect+0x130>
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018148:	2b00      	cmp	r3, #0
 801814a:	d003      	beq.n	8018154 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801814c:	7d3b      	ldrb	r3, [r7, #20]
 801814e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018152:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8018154:	7d3a      	ldrb	r2, [r7, #20]
 8018156:	f107 031c 	add.w	r3, r7, #28
 801815a:	4611      	mov	r1, r2
 801815c:	4618      	mov	r0, r3
 801815e:	f000 faac 	bl	80186ba <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	8b1b      	ldrh	r3, [r3, #24]
 8018166:	461a      	mov	r2, r3
 8018168:	f107 031c 	add.w	r3, r7, #28
 801816c:	4611      	mov	r1, r2
 801816e:	4618      	mov	r0, r3
 8018170:	f000 fab8 	bl	80186e4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f107 001c 	add.w	r0, r7, #28
 801817a:	330c      	adds	r3, #12
 801817c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801817e:	f000 faf9 	bl	8018774 <writeMQTTString>
	if (options->willFlag)
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	7edb      	ldrb	r3, [r3, #27]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d00d      	beq.n	80181a6 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	f107 001c 	add.w	r0, r7, #28
 8018190:	3324      	adds	r3, #36	; 0x24
 8018192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018194:	f000 faee 	bl	8018774 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f107 001c 	add.w	r0, r7, #28
 801819e:	3330      	adds	r3, #48	; 0x30
 80181a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80181a2:	f000 fae7 	bl	8018774 <writeMQTTString>
	}
	if (flags.bits.username)
 80181a6:	7d3b      	ldrb	r3, [r7, #20]
 80181a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80181ac:	b2db      	uxtb	r3, r3
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d006      	beq.n	80181c0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f107 001c 	add.w	r0, r7, #28
 80181b8:	3340      	adds	r3, #64	; 0x40
 80181ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80181bc:	f000 fada 	bl	8018774 <writeMQTTString>
	if (flags.bits.password)
 80181c0:	7d3b      	ldrb	r3, [r7, #20]
 80181c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181c6:	b2db      	uxtb	r3, r3
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d006      	beq.n	80181da <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	f107 001c 	add.w	r0, r7, #28
 80181d2:	334c      	adds	r3, #76	; 0x4c
 80181d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80181d6:	f000 facd 	bl	8018774 <writeMQTTString>

	rc = ptr - buf;
 80181da:	69fa      	ldr	r2, [r7, #28]
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	1ad3      	subs	r3, r2, r3
 80181e0:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80181e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	3728      	adds	r7, #40	; 0x28
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}
 80181ec:	0801d55c 	.word	0x0801d55c
 80181f0:	0801d564 	.word	0x0801d564

080181f4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b08a      	sub	sp, #40	; 0x28
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	60b9      	str	r1, [r7, #8]
 80181fe:	607a      	str	r2, [r7, #4]
 8018200:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8018202:	2300      	movs	r3, #0
 8018204:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801820a:	2300      	movs	r3, #0
 801820c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801820e:	2300      	movs	r3, #0
 8018210:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8018212:	2300      	movs	r3, #0
 8018214:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8018216:	f107 0318 	add.w	r3, r7, #24
 801821a:	4618      	mov	r0, r3
 801821c:	f000 fa39 	bl	8018692 <readChar>
 8018220:	4603      	mov	r3, r0
 8018222:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8018224:	7f3b      	ldrb	r3, [r7, #28]
 8018226:	f023 030f 	bic.w	r3, r3, #15
 801822a:	b2db      	uxtb	r3, r3
 801822c:	2b20      	cmp	r3, #32
 801822e:	d12e      	bne.n	801828e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8018230:	69bb      	ldr	r3, [r7, #24]
 8018232:	f107 0214 	add.w	r2, r7, #20
 8018236:	4611      	mov	r1, r2
 8018238:	4618      	mov	r0, r3
 801823a:	f000 f9f9 	bl	8018630 <MQTTPacket_decodeBuf>
 801823e:	6278      	str	r0, [r7, #36]	; 0x24
 8018240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018242:	69bb      	ldr	r3, [r7, #24]
 8018244:	4413      	add	r3, r2
 8018246:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8018248:	69bb      	ldr	r3, [r7, #24]
 801824a:	697a      	ldr	r2, [r7, #20]
 801824c:	4413      	add	r3, r2
 801824e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8018250:	69bb      	ldr	r3, [r7, #24]
 8018252:	6a3a      	ldr	r2, [r7, #32]
 8018254:	1ad3      	subs	r3, r2, r3
 8018256:	2b01      	cmp	r3, #1
 8018258:	dd1b      	ble.n	8018292 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801825a:	f107 0318 	add.w	r3, r7, #24
 801825e:	4618      	mov	r0, r3
 8018260:	f000 fa17 	bl	8018692 <readChar>
 8018264:	4603      	mov	r3, r0
 8018266:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8018268:	7c3b      	ldrb	r3, [r7, #16]
 801826a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801826e:	b2db      	uxtb	r3, r3
 8018270:	461a      	mov	r2, r3
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8018276:	f107 0318 	add.w	r3, r7, #24
 801827a:	4618      	mov	r0, r3
 801827c:	f000 fa09 	bl	8018692 <readChar>
 8018280:	4603      	mov	r3, r0
 8018282:	461a      	mov	r2, r3
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8018288:	2301      	movs	r3, #1
 801828a:	627b      	str	r3, [r7, #36]	; 0x24
 801828c:	e002      	b.n	8018294 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801828e:	bf00      	nop
 8018290:	e000      	b.n	8018294 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8018292:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018296:	4618      	mov	r0, r3
 8018298:	3728      	adds	r7, #40	; 0x28
 801829a:	46bd      	mov	sp, r7
 801829c:	bd80      	pop	{r7, pc}

0801829e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801829e:	b580      	push	{r7, lr}
 80182a0:	b088      	sub	sp, #32
 80182a2:	af00      	add	r7, sp, #0
 80182a4:	60f8      	str	r0, [r7, #12]
 80182a6:	60b9      	str	r1, [r7, #8]
 80182a8:	4613      	mov	r3, r2
 80182aa:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80182ac:	2300      	movs	r3, #0
 80182ae:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80182b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182b4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	2b01      	cmp	r3, #1
 80182be:	dc03      	bgt.n	80182c8 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80182c0:	f06f 0301 	mvn.w	r3, #1
 80182c4:	61fb      	str	r3, [r7, #28]
		goto exit;
 80182c6:	e01d      	b.n	8018304 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80182c8:	2300      	movs	r3, #0
 80182ca:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80182cc:	79fb      	ldrb	r3, [r7, #7]
 80182ce:	f003 030f 	and.w	r3, r3, #15
 80182d2:	b2da      	uxtb	r2, r3
 80182d4:	7e3b      	ldrb	r3, [r7, #24]
 80182d6:	f362 1307 	bfi	r3, r2, #4, #4
 80182da:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80182dc:	7e3a      	ldrb	r2, [r7, #24]
 80182de:	f107 0314 	add.w	r3, r7, #20
 80182e2:	4611      	mov	r1, r2
 80182e4:	4618      	mov	r0, r3
 80182e6:	f000 f9e8 	bl	80186ba <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80182ea:	697b      	ldr	r3, [r7, #20]
 80182ec:	2100      	movs	r1, #0
 80182ee:	4618      	mov	r0, r3
 80182f0:	f000 f8e8 	bl	80184c4 <MQTTPacket_encode>
 80182f4:	4602      	mov	r2, r0
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	4413      	add	r3, r2
 80182fa:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80182fc:	697a      	ldr	r2, [r7, #20]
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	1ad3      	subs	r3, r2, r3
 8018302:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018304:	69fb      	ldr	r3, [r7, #28]
}
 8018306:	4618      	mov	r0, r3
 8018308:	3720      	adds	r7, #32
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}

0801830e <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801830e:	b580      	push	{r7, lr}
 8018310:	b082      	sub	sp, #8
 8018312:	af00      	add	r7, sp, #0
 8018314:	6078      	str	r0, [r7, #4]
 8018316:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8018318:	220e      	movs	r2, #14
 801831a:	6839      	ldr	r1, [r7, #0]
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f7ff ffbe 	bl	801829e <MQTTSerialize_zero>
 8018322:	4603      	mov	r3, r0
}
 8018324:	4618      	mov	r0, r3
 8018326:	3708      	adds	r7, #8
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}

0801832c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b082      	sub	sp, #8
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8018336:	220c      	movs	r2, #12
 8018338:	6839      	ldr	r1, [r7, #0]
 801833a:	6878      	ldr	r0, [r7, #4]
 801833c:	f7ff ffaf 	bl	801829e <MQTTSerialize_zero>
 8018340:	4603      	mov	r3, r0
}
 8018342:	4618      	mov	r0, r3
 8018344:	3708      	adds	r7, #8
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}

0801834a <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801834a:	b580      	push	{r7, lr}
 801834c:	b08a      	sub	sp, #40	; 0x28
 801834e:	af00      	add	r7, sp, #0
 8018350:	60f8      	str	r0, [r7, #12]
 8018352:	60b9      	str	r1, [r7, #8]
 8018354:	607a      	str	r2, [r7, #4]
 8018356:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8018358:	2300      	movs	r3, #0
 801835a:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801835c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801835e:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8018360:	2300      	movs	r3, #0
 8018362:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8018364:	2300      	movs	r3, #0
 8018366:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8018368:	2300      	movs	r3, #0
 801836a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801836c:	f107 0318 	add.w	r3, r7, #24
 8018370:	4618      	mov	r0, r3
 8018372:	f000 f98e 	bl	8018692 <readChar>
 8018376:	4603      	mov	r3, r0
 8018378:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801837a:	7f3b      	ldrb	r3, [r7, #28]
 801837c:	f023 030f 	bic.w	r3, r3, #15
 8018380:	b2db      	uxtb	r3, r3
 8018382:	2b30      	cmp	r3, #48	; 0x30
 8018384:	d14b      	bne.n	801841e <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8018386:	7f3b      	ldrb	r3, [r7, #28]
 8018388:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801838c:	b2db      	uxtb	r3, r3
 801838e:	461a      	mov	r2, r3
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8018394:	7f3b      	ldrb	r3, [r7, #28]
 8018396:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801839a:	b2db      	uxtb	r3, r3
 801839c:	461a      	mov	r2, r3
 801839e:	68bb      	ldr	r3, [r7, #8]
 80183a0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80183a2:	7f3b      	ldrb	r3, [r7, #28]
 80183a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80183a8:	b2db      	uxtb	r3, r3
 80183aa:	461a      	mov	r2, r3
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80183b0:	69bb      	ldr	r3, [r7, #24]
 80183b2:	f107 0214 	add.w	r2, r7, #20
 80183b6:	4611      	mov	r1, r2
 80183b8:	4618      	mov	r0, r3
 80183ba:	f000 f939 	bl	8018630 <MQTTPacket_decodeBuf>
 80183be:	6278      	str	r0, [r7, #36]	; 0x24
 80183c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183c2:	69bb      	ldr	r3, [r7, #24]
 80183c4:	4413      	add	r3, r2
 80183c6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80183c8:	69bb      	ldr	r3, [r7, #24]
 80183ca:	697a      	ldr	r2, [r7, #20]
 80183cc:	4413      	add	r3, r2
 80183ce:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80183d0:	f107 0318 	add.w	r3, r7, #24
 80183d4:	6a3a      	ldr	r2, [r7, #32]
 80183d6:	4619      	mov	r1, r3
 80183d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183da:	f000 f9f9 	bl	80187d0 <readMQTTLenString>
 80183de:	4603      	mov	r3, r0
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d01e      	beq.n	8018422 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80183e4:	69bb      	ldr	r3, [r7, #24]
 80183e6:	6a3a      	ldr	r2, [r7, #32]
 80183e8:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	db19      	blt.n	8018422 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	dd08      	ble.n	8018408 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80183f6:	f107 0318 	add.w	r3, r7, #24
 80183fa:	4618      	mov	r0, r3
 80183fc:	f000 f92e 	bl	801865c <readInt>
 8018400:	4603      	mov	r3, r0
 8018402:	b29a      	uxth	r2, r3
 8018404:	683b      	ldr	r3, [r7, #0]
 8018406:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8018408:	69bb      	ldr	r3, [r7, #24]
 801840a:	6a3a      	ldr	r2, [r7, #32]
 801840c:	1ad2      	subs	r2, r2, r3
 801840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018410:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8018412:	69ba      	ldr	r2, [r7, #24]
 8018414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018416:	601a      	str	r2, [r3, #0]
	rc = 1;
 8018418:	2301      	movs	r3, #1
 801841a:	627b      	str	r3, [r7, #36]	; 0x24
 801841c:	e002      	b.n	8018424 <MQTTDeserialize_publish+0xda>
		goto exit;
 801841e:	bf00      	nop
 8018420:	e000      	b.n	8018424 <MQTTDeserialize_publish+0xda>
		goto exit;
 8018422:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018426:	4618      	mov	r0, r3
 8018428:	3728      	adds	r7, #40	; 0x28
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}

0801842e <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801842e:	b580      	push	{r7, lr}
 8018430:	b08a      	sub	sp, #40	; 0x28
 8018432:	af00      	add	r7, sp, #0
 8018434:	60f8      	str	r0, [r7, #12]
 8018436:	60b9      	str	r1, [r7, #8]
 8018438:	607a      	str	r2, [r7, #4]
 801843a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801843c:	2300      	movs	r3, #0
 801843e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8018444:	2300      	movs	r3, #0
 8018446:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8018448:	2300      	movs	r3, #0
 801844a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801844c:	f107 0318 	add.w	r3, r7, #24
 8018450:	4618      	mov	r0, r3
 8018452:	f000 f91e 	bl	8018692 <readChar>
 8018456:	4603      	mov	r3, r0
 8018458:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801845a:	7f3b      	ldrb	r3, [r7, #28]
 801845c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018460:	b2db      	uxtb	r3, r3
 8018462:	461a      	mov	r2, r3
 8018464:	68bb      	ldr	r3, [r7, #8]
 8018466:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8018468:	7f3b      	ldrb	r3, [r7, #28]
 801846a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801846e:	b2db      	uxtb	r3, r3
 8018470:	461a      	mov	r2, r3
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8018476:	69bb      	ldr	r3, [r7, #24]
 8018478:	f107 0214 	add.w	r2, r7, #20
 801847c:	4611      	mov	r1, r2
 801847e:	4618      	mov	r0, r3
 8018480:	f000 f8d6 	bl	8018630 <MQTTPacket_decodeBuf>
 8018484:	6278      	str	r0, [r7, #36]	; 0x24
 8018486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018488:	69bb      	ldr	r3, [r7, #24]
 801848a:	4413      	add	r3, r2
 801848c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801848e:	69bb      	ldr	r3, [r7, #24]
 8018490:	697a      	ldr	r2, [r7, #20]
 8018492:	4413      	add	r3, r2
 8018494:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8018496:	69bb      	ldr	r3, [r7, #24]
 8018498:	6a3a      	ldr	r2, [r7, #32]
 801849a:	1ad3      	subs	r3, r2, r3
 801849c:	2b01      	cmp	r3, #1
 801849e:	dd0b      	ble.n	80184b8 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 80184a0:	f107 0318 	add.w	r3, r7, #24
 80184a4:	4618      	mov	r0, r3
 80184a6:	f000 f8d9 	bl	801865c <readInt>
 80184aa:	4603      	mov	r3, r0
 80184ac:	b29a      	uxth	r2, r3
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	801a      	strh	r2, [r3, #0]

	rc = 1;
 80184b2:	2301      	movs	r3, #1
 80184b4:	627b      	str	r3, [r7, #36]	; 0x24
 80184b6:	e000      	b.n	80184ba <MQTTDeserialize_ack+0x8c>
		goto exit;
 80184b8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80184ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80184bc:	4618      	mov	r0, r3
 80184be:	3728      	adds	r7, #40	; 0x28
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80184c4:	b480      	push	{r7}
 80184c6:	b085      	sub	sp, #20
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
 80184cc:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80184ce:	2300      	movs	r3, #0
 80184d0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	425a      	negs	r2, r3
 80184d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80184da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80184de:	bf58      	it	pl
 80184e0:	4253      	negpl	r3, r2
 80184e2:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	da00      	bge.n	80184ec <MQTTPacket_encode+0x28>
 80184ea:	337f      	adds	r3, #127	; 0x7f
 80184ec:	11db      	asrs	r3, r3, #7
 80184ee:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80184f0:	683b      	ldr	r3, [r7, #0]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	dd03      	ble.n	80184fe <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80184f6:	7afb      	ldrb	r3, [r7, #11]
 80184f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80184fc:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	1c5a      	adds	r2, r3, #1
 8018502:	60fa      	str	r2, [r7, #12]
 8018504:	461a      	mov	r2, r3
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	4413      	add	r3, r2
 801850a:	7afa      	ldrb	r2, [r7, #11]
 801850c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	2b00      	cmp	r3, #0
 8018512:	dcde      	bgt.n	80184d2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8018514:	68fb      	ldr	r3, [r7, #12]
}
 8018516:	4618      	mov	r0, r3
 8018518:	3714      	adds	r7, #20
 801851a:	46bd      	mov	sp, r7
 801851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018520:	4770      	bx	lr

08018522 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8018522:	b580      	push	{r7, lr}
 8018524:	b086      	sub	sp, #24
 8018526:	af00      	add	r7, sp, #0
 8018528:	6078      	str	r0, [r7, #4]
 801852a:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801852c:	2301      	movs	r3, #1
 801852e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8018530:	2300      	movs	r3, #0
 8018532:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	2200      	movs	r2, #0
 8018538:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801853a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801853e:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	3301      	adds	r3, #1
 8018544:	613b      	str	r3, [r7, #16]
 8018546:	693b      	ldr	r3, [r7, #16]
 8018548:	2b04      	cmp	r3, #4
 801854a:	dd03      	ble.n	8018554 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801854c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018550:	60fb      	str	r3, [r7, #12]
			goto exit;
 8018552:	e01d      	b.n	8018590 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8018554:	f107 020b 	add.w	r2, r7, #11
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2101      	movs	r1, #1
 801855c:	4610      	mov	r0, r2
 801855e:	4798      	blx	r3
 8018560:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	2b01      	cmp	r3, #1
 8018566:	d112      	bne.n	801858e <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8018568:	683b      	ldr	r3, [r7, #0]
 801856a:	681a      	ldr	r2, [r3, #0]
 801856c:	7afb      	ldrb	r3, [r7, #11]
 801856e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018572:	6979      	ldr	r1, [r7, #20]
 8018574:	fb01 f303 	mul.w	r3, r1, r3
 8018578:	441a      	add	r2, r3
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	01db      	lsls	r3, r3, #7
 8018582:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8018584:	7afb      	ldrb	r3, [r7, #11]
 8018586:	b25b      	sxtb	r3, r3
 8018588:	2b00      	cmp	r3, #0
 801858a:	dbd6      	blt.n	801853a <MQTTPacket_decode+0x18>
exit:
 801858c:	e000      	b.n	8018590 <MQTTPacket_decode+0x6e>
			goto exit;
 801858e:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8018590:	693b      	ldr	r3, [r7, #16]
}
 8018592:	4618      	mov	r0, r3
 8018594:	3718      	adds	r7, #24
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
	...

0801859c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801859c:	b480      	push	{r7}
 801859e:	b083      	sub	sp, #12
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	3301      	adds	r3, #1
 80185a8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	2b7f      	cmp	r3, #127	; 0x7f
 80185ae:	dc03      	bgt.n	80185b8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	3301      	adds	r3, #1
 80185b4:	607b      	str	r3, [r7, #4]
 80185b6:	e012      	b.n	80185de <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80185be:	da03      	bge.n	80185c8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	3302      	adds	r3, #2
 80185c4:	607b      	str	r3, [r7, #4]
 80185c6:	e00a      	b.n	80185de <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	4a08      	ldr	r2, [pc, #32]	; (80185ec <MQTTPacket_len+0x50>)
 80185cc:	4293      	cmp	r3, r2
 80185ce:	dc03      	bgt.n	80185d8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	3303      	adds	r3, #3
 80185d4:	607b      	str	r3, [r7, #4]
 80185d6:	e002      	b.n	80185de <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	3304      	adds	r3, #4
 80185dc:	607b      	str	r3, [r7, #4]
	return rem_len;
 80185de:	687b      	ldr	r3, [r7, #4]
}
 80185e0:	4618      	mov	r0, r3
 80185e2:	370c      	adds	r7, #12
 80185e4:	46bd      	mov	sp, r7
 80185e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ea:	4770      	bx	lr
 80185ec:	001ffffe 	.word	0x001ffffe

080185f0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80185f0:	b480      	push	{r7}
 80185f2:	b085      	sub	sp, #20
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
 80185f8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80185fa:	2300      	movs	r3, #0
 80185fc:	60fb      	str	r3, [r7, #12]
 80185fe:	e00a      	b.n	8018616 <bufchar+0x26>
		*c = *bufptr++;
 8018600:	4b0a      	ldr	r3, [pc, #40]	; (801862c <bufchar+0x3c>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	1c5a      	adds	r2, r3, #1
 8018606:	4909      	ldr	r1, [pc, #36]	; (801862c <bufchar+0x3c>)
 8018608:	600a      	str	r2, [r1, #0]
 801860a:	781a      	ldrb	r2, [r3, #0]
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	3301      	adds	r3, #1
 8018614:	60fb      	str	r3, [r7, #12]
 8018616:	68fa      	ldr	r2, [r7, #12]
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	429a      	cmp	r2, r3
 801861c:	dbf0      	blt.n	8018600 <bufchar+0x10>
	return count;
 801861e:	683b      	ldr	r3, [r7, #0]
}
 8018620:	4618      	mov	r0, r3
 8018622:	3714      	adds	r7, #20
 8018624:	46bd      	mov	sp, r7
 8018626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862a:	4770      	bx	lr
 801862c:	20011398 	.word	0x20011398

08018630 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b082      	sub	sp, #8
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
 8018638:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801863a:	4a06      	ldr	r2, [pc, #24]	; (8018654 <MQTTPacket_decodeBuf+0x24>)
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8018640:	6839      	ldr	r1, [r7, #0]
 8018642:	4805      	ldr	r0, [pc, #20]	; (8018658 <MQTTPacket_decodeBuf+0x28>)
 8018644:	f7ff ff6d 	bl	8018522 <MQTTPacket_decode>
 8018648:	4603      	mov	r3, r0
}
 801864a:	4618      	mov	r0, r3
 801864c:	3708      	adds	r7, #8
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}
 8018652:	bf00      	nop
 8018654:	20011398 	.word	0x20011398
 8018658:	080185f1 	.word	0x080185f1

0801865c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801865c:	b480      	push	{r7}
 801865e:	b085      	sub	sp, #20
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	781b      	ldrb	r3, [r3, #0]
 801866e:	021b      	lsls	r3, r3, #8
 8018670:	68fa      	ldr	r2, [r7, #12]
 8018672:	3201      	adds	r2, #1
 8018674:	7812      	ldrb	r2, [r2, #0]
 8018676:	4413      	add	r3, r2
 8018678:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	1c9a      	adds	r2, r3, #2
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	601a      	str	r2, [r3, #0]
	return len;
 8018684:	68bb      	ldr	r3, [r7, #8]
}
 8018686:	4618      	mov	r0, r3
 8018688:	3714      	adds	r7, #20
 801868a:	46bd      	mov	sp, r7
 801868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018690:	4770      	bx	lr

08018692 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8018692:	b480      	push	{r7}
 8018694:	b085      	sub	sp, #20
 8018696:	af00      	add	r7, sp, #0
 8018698:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	781b      	ldrb	r3, [r3, #0]
 80186a0:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	1c5a      	adds	r2, r3, #1
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	601a      	str	r2, [r3, #0]
	return c;
 80186ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80186ae:	4618      	mov	r0, r3
 80186b0:	3714      	adds	r7, #20
 80186b2:	46bd      	mov	sp, r7
 80186b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b8:	4770      	bx	lr

080186ba <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 80186ba:	b480      	push	{r7}
 80186bc:	b083      	sub	sp, #12
 80186be:	af00      	add	r7, sp, #0
 80186c0:	6078      	str	r0, [r7, #4]
 80186c2:	460b      	mov	r3, r1
 80186c4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	78fa      	ldrb	r2, [r7, #3]
 80186cc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	1c5a      	adds	r2, r3, #1
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	601a      	str	r2, [r3, #0]
}
 80186d8:	bf00      	nop
 80186da:	370c      	adds	r7, #12
 80186dc:	46bd      	mov	sp, r7
 80186de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e2:	4770      	bx	lr

080186e4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80186e4:	b480      	push	{r7}
 80186e6:	b083      	sub	sp, #12
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	da00      	bge.n	80186f6 <writeInt+0x12>
 80186f4:	33ff      	adds	r3, #255	; 0xff
 80186f6:	121b      	asrs	r3, r3, #8
 80186f8:	461a      	mov	r2, r3
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	b2d2      	uxtb	r2, r2
 8018700:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	1c5a      	adds	r2, r3, #1
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801870c:	683b      	ldr	r3, [r7, #0]
 801870e:	425a      	negs	r2, r3
 8018710:	b2db      	uxtb	r3, r3
 8018712:	b2d2      	uxtb	r2, r2
 8018714:	bf58      	it	pl
 8018716:	4253      	negpl	r3, r2
 8018718:	687a      	ldr	r2, [r7, #4]
 801871a:	6812      	ldr	r2, [r2, #0]
 801871c:	b2db      	uxtb	r3, r3
 801871e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	1c5a      	adds	r2, r3, #1
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	601a      	str	r2, [r3, #0]
}
 801872a:	bf00      	nop
 801872c:	370c      	adds	r7, #12
 801872e:	46bd      	mov	sp, r7
 8018730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018734:	4770      	bx	lr

08018736 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8018736:	b580      	push	{r7, lr}
 8018738:	b084      	sub	sp, #16
 801873a:	af00      	add	r7, sp, #0
 801873c:	6078      	str	r0, [r7, #4]
 801873e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8018740:	6838      	ldr	r0, [r7, #0]
 8018742:	f7e7 fd87 	bl	8000254 <strlen>
 8018746:	4603      	mov	r3, r0
 8018748:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801874a:	68f9      	ldr	r1, [r7, #12]
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f7ff ffc9 	bl	80186e4 <writeInt>
	memcpy(*pptr, string, len);
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	68fa      	ldr	r2, [r7, #12]
 8018758:	6839      	ldr	r1, [r7, #0]
 801875a:	4618      	mov	r0, r3
 801875c:	f000 fae2 	bl	8018d24 <memcpy>
	*pptr += len;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	441a      	add	r2, r3
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	601a      	str	r2, [r3, #0]
}
 801876c:	bf00      	nop
 801876e:	3710      	adds	r7, #16
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}

08018774 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	4638      	mov	r0, r7
 801877e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2b00      	cmp	r3, #0
 8018786:	dd12      	ble.n	80187ae <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	4619      	mov	r1, r3
 801878c:	68f8      	ldr	r0, [r7, #12]
 801878e:	f7ff ffa9 	bl	80186e4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	68b9      	ldr	r1, [r7, #8]
 8018798:	687a      	ldr	r2, [r7, #4]
 801879a:	4618      	mov	r0, r3
 801879c:	f000 fac2 	bl	8018d24 <memcpy>
		*pptr += mqttstring.lenstring.len;
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	687a      	ldr	r2, [r7, #4]
 80187a6:	441a      	add	r2, r3
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80187ac:	e00c      	b.n	80187c8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d005      	beq.n	80187c0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	4619      	mov	r1, r3
 80187b8:	68f8      	ldr	r0, [r7, #12]
 80187ba:	f7ff ffbc 	bl	8018736 <writeCString>
}
 80187be:	e003      	b.n	80187c8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80187c0:	2100      	movs	r1, #0
 80187c2:	68f8      	ldr	r0, [r7, #12]
 80187c4:	f7ff ff8e 	bl	80186e4 <writeInt>
}
 80187c8:	bf00      	nop
 80187ca:	3710      	adds	r7, #16
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b086      	sub	sp, #24
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	60f8      	str	r0, [r7, #12]
 80187d8:	60b9      	str	r1, [r7, #8]
 80187da:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80187dc:	2300      	movs	r3, #0
 80187de:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	687a      	ldr	r2, [r7, #4]
 80187e6:	1ad3      	subs	r3, r2, r3
 80187e8:	2b01      	cmp	r3, #1
 80187ea:	dd1a      	ble.n	8018822 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80187ec:	68b8      	ldr	r0, [r7, #8]
 80187ee:	f7ff ff35 	bl	801865c <readInt>
 80187f2:	4602      	mov	r2, r0
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	68fa      	ldr	r2, [r7, #12]
 80187fe:	6852      	ldr	r2, [r2, #4]
 8018800:	4413      	add	r3, r2
 8018802:	687a      	ldr	r2, [r7, #4]
 8018804:	429a      	cmp	r2, r3
 8018806:	d30c      	bcc.n	8018822 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8018808:	68bb      	ldr	r3, [r7, #8]
 801880a:	681a      	ldr	r2, [r3, #0]
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8018810:	68bb      	ldr	r3, [r7, #8]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	68fa      	ldr	r2, [r7, #12]
 8018816:	6852      	ldr	r2, [r2, #4]
 8018818:	441a      	add	r2, r3
 801881a:	68bb      	ldr	r3, [r7, #8]
 801881c:	601a      	str	r2, [r3, #0]
			rc = 1;
 801881e:	2301      	movs	r3, #1
 8018820:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	2200      	movs	r2, #0
 8018826:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8018828:	697b      	ldr	r3, [r7, #20]
}
 801882a:	4618      	mov	r0, r3
 801882c:	3718      	adds	r7, #24
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}

08018832 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8018832:	b580      	push	{r7, lr}
 8018834:	b086      	sub	sp, #24
 8018836:	af00      	add	r7, sp, #0
 8018838:	1d3b      	adds	r3, r7, #4
 801883a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801883e:	2300      	movs	r3, #0
 8018840:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d006      	beq.n	8018856 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	4618      	mov	r0, r3
 801884c:	f7e7 fd02 	bl	8000254 <strlen>
 8018850:	4603      	mov	r3, r0
 8018852:	617b      	str	r3, [r7, #20]
 8018854:	e001      	b.n	801885a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	617b      	str	r3, [r7, #20]
	return rc;
 801885a:	697b      	ldr	r3, [r7, #20]
}
 801885c:	4618      	mov	r0, r3
 801885e:	3718      	adds	r7, #24
 8018860:	46bd      	mov	sp, r7
 8018862:	bd80      	pop	{r7, pc}

08018864 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b086      	sub	sp, #24
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801886e:	2300      	movs	r3, #0
 8018870:	617b      	str	r3, [r7, #20]
		blen = 0;
 8018872:	2300      	movs	r3, #0
 8018874:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d00a      	beq.n	8018894 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	4618      	mov	r0, r3
 801888a:	f7e7 fce3 	bl	8000254 <strlen>
 801888e:	4603      	mov	r3, r0
 8018890:	617b      	str	r3, [r7, #20]
 8018892:	e005      	b.n	80188a0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	689b      	ldr	r3, [r3, #8]
 8018898:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	685b      	ldr	r3, [r3, #4]
 801889e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 80188a0:	6838      	ldr	r0, [r7, #0]
 80188a2:	f7e7 fcd7 	bl	8000254 <strlen>
 80188a6:	4603      	mov	r3, r0
 80188a8:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 80188aa:	697a      	ldr	r2, [r7, #20]
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	429a      	cmp	r2, r3
 80188b0:	d10a      	bne.n	80188c8 <MQTTPacket_equals+0x64>
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	461a      	mov	r2, r3
 80188b6:	6839      	ldr	r1, [r7, #0]
 80188b8:	6938      	ldr	r0, [r7, #16]
 80188ba:	f000 fb15 	bl	8018ee8 <strncmp>
 80188be:	4603      	mov	r3, r0
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d101      	bne.n	80188c8 <MQTTPacket_equals+0x64>
 80188c4:	2301      	movs	r3, #1
 80188c6:	e000      	b.n	80188ca <MQTTPacket_equals+0x66>
 80188c8:	2300      	movs	r3, #0
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	3718      	adds	r7, #24
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd80      	pop	{r7, pc}

080188d2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 80188d2:	b580      	push	{r7, lr}
 80188d4:	b086      	sub	sp, #24
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	60f8      	str	r0, [r7, #12]
 80188da:	4638      	mov	r0, r7
 80188dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80188e0:	2300      	movs	r3, #0
 80188e2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80188e4:	463b      	mov	r3, r7
 80188e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80188ea:	f7ff ffa2 	bl	8018832 <MQTTstrlen>
 80188ee:	4603      	mov	r3, r0
 80188f0:	1c9a      	adds	r2, r3, #2
 80188f2:	6a3b      	ldr	r3, [r7, #32]
 80188f4:	4413      	add	r3, r2
 80188f6:	697a      	ldr	r2, [r7, #20]
 80188f8:	4413      	add	r3, r2
 80188fa:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	dd02      	ble.n	8018908 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8018902:	697b      	ldr	r3, [r7, #20]
 8018904:	3302      	adds	r3, #2
 8018906:	617b      	str	r3, [r7, #20]
	return len;
 8018908:	697b      	ldr	r3, [r7, #20]
}
 801890a:	4618      	mov	r0, r3
 801890c:	3718      	adds	r7, #24
 801890e:	46bd      	mov	sp, r7
 8018910:	bd80      	pop	{r7, pc}

08018912 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8018912:	b580      	push	{r7, lr}
 8018914:	b08a      	sub	sp, #40	; 0x28
 8018916:	af02      	add	r7, sp, #8
 8018918:	60f8      	str	r0, [r7, #12]
 801891a:	60b9      	str	r1, [r7, #8]
 801891c:	603b      	str	r3, [r7, #0]
 801891e:	4613      	mov	r3, r2
 8018920:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8018926:	2300      	movs	r3, #0
 8018928:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801892a:	2300      	movs	r3, #0
 801892c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801892e:	2300      	movs	r3, #0
 8018930:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8018932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018934:	9300      	str	r3, [sp, #0]
 8018936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801893a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801893c:	6838      	ldr	r0, [r7, #0]
 801893e:	f7ff ffc8 	bl	80188d2 <MQTTSerialize_publishLength>
 8018942:	61b8      	str	r0, [r7, #24]
 8018944:	69b8      	ldr	r0, [r7, #24]
 8018946:	f7ff fe29 	bl	801859c <MQTTPacket_len>
 801894a:	4602      	mov	r2, r0
 801894c:	68bb      	ldr	r3, [r7, #8]
 801894e:	4293      	cmp	r3, r2
 8018950:	da03      	bge.n	801895a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8018952:	f06f 0301 	mvn.w	r3, #1
 8018956:	61fb      	str	r3, [r7, #28]
		goto exit;
 8018958:	e04c      	b.n	80189f4 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801895a:	7c3b      	ldrb	r3, [r7, #16]
 801895c:	2203      	movs	r2, #3
 801895e:	f362 1307 	bfi	r3, r2, #4, #4
 8018962:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8018964:	79fb      	ldrb	r3, [r7, #7]
 8018966:	f003 0301 	and.w	r3, r3, #1
 801896a:	b2da      	uxtb	r2, r3
 801896c:	7c3b      	ldrb	r3, [r7, #16]
 801896e:	f362 03c3 	bfi	r3, r2, #3, #1
 8018972:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8018974:	683b      	ldr	r3, [r7, #0]
 8018976:	f003 0303 	and.w	r3, r3, #3
 801897a:	b2da      	uxtb	r2, r3
 801897c:	7c3b      	ldrb	r3, [r7, #16]
 801897e:	f362 0342 	bfi	r3, r2, #1, #2
 8018982:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8018984:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018988:	f003 0301 	and.w	r3, r3, #1
 801898c:	b2da      	uxtb	r2, r3
 801898e:	7c3b      	ldrb	r3, [r7, #16]
 8018990:	f362 0300 	bfi	r3, r2, #0, #1
 8018994:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8018996:	7c3a      	ldrb	r2, [r7, #16]
 8018998:	f107 0314 	add.w	r3, r7, #20
 801899c:	4611      	mov	r1, r2
 801899e:	4618      	mov	r0, r3
 80189a0:	f7ff fe8b 	bl	80186ba <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80189a4:	697b      	ldr	r3, [r7, #20]
 80189a6:	69b9      	ldr	r1, [r7, #24]
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7ff fd8b 	bl	80184c4 <MQTTPacket_encode>
 80189ae:	4602      	mov	r2, r0
 80189b0:	697b      	ldr	r3, [r7, #20]
 80189b2:	4413      	add	r3, r2
 80189b4:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 80189b6:	f107 0014 	add.w	r0, r7, #20
 80189ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80189be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80189c0:	f7ff fed8 	bl	8018774 <writeMQTTString>

	if (qos > 0)
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	dd06      	ble.n	80189d8 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 80189ca:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80189cc:	f107 0314 	add.w	r3, r7, #20
 80189d0:	4611      	mov	r1, r2
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7ff fe86 	bl	80186e4 <writeInt>

	memcpy(ptr, payload, payloadlen);
 80189d8:	697b      	ldr	r3, [r7, #20]
 80189da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80189dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80189de:	4618      	mov	r0, r3
 80189e0:	f000 f9a0 	bl	8018d24 <memcpy>
	ptr += payloadlen;
 80189e4:	697a      	ldr	r2, [r7, #20]
 80189e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189e8:	4413      	add	r3, r2
 80189ea:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80189ec:	697a      	ldr	r2, [r7, #20]
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	1ad3      	subs	r3, r2, r3
 80189f2:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80189f4:	69fb      	ldr	r3, [r7, #28]
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3720      	adds	r7, #32
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}

080189fe <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80189fe:	b580      	push	{r7, lr}
 8018a00:	b088      	sub	sp, #32
 8018a02:	af00      	add	r7, sp, #0
 8018a04:	60f8      	str	r0, [r7, #12]
 8018a06:	60b9      	str	r1, [r7, #8]
 8018a08:	4611      	mov	r1, r2
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	460b      	mov	r3, r1
 8018a0e:	71fb      	strb	r3, [r7, #7]
 8018a10:	4613      	mov	r3, r2
 8018a12:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8018a14:	2300      	movs	r3, #0
 8018a16:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8018a18:	2300      	movs	r3, #0
 8018a1a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8018a20:	68bb      	ldr	r3, [r7, #8]
 8018a22:	2b03      	cmp	r3, #3
 8018a24:	dc03      	bgt.n	8018a2e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8018a26:	f06f 0301 	mvn.w	r3, #1
 8018a2a:	61fb      	str	r3, [r7, #28]
		goto exit;
 8018a2c:	e037      	b.n	8018a9e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8018a2e:	79fb      	ldrb	r3, [r7, #7]
 8018a30:	f003 030f 	and.w	r3, r3, #15
 8018a34:	b2da      	uxtb	r2, r3
 8018a36:	7e3b      	ldrb	r3, [r7, #24]
 8018a38:	f362 1307 	bfi	r3, r2, #4, #4
 8018a3c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8018a3e:	79bb      	ldrb	r3, [r7, #6]
 8018a40:	f003 0301 	and.w	r3, r3, #1
 8018a44:	b2da      	uxtb	r2, r3
 8018a46:	7e3b      	ldrb	r3, [r7, #24]
 8018a48:	f362 03c3 	bfi	r3, r2, #3, #1
 8018a4c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8018a4e:	79fb      	ldrb	r3, [r7, #7]
 8018a50:	2b06      	cmp	r3, #6
 8018a52:	bf0c      	ite	eq
 8018a54:	2301      	moveq	r3, #1
 8018a56:	2300      	movne	r3, #0
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	f003 0303 	and.w	r3, r3, #3
 8018a5e:	b2da      	uxtb	r2, r3
 8018a60:	7e3b      	ldrb	r3, [r7, #24]
 8018a62:	f362 0342 	bfi	r3, r2, #1, #2
 8018a66:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8018a68:	7e3a      	ldrb	r2, [r7, #24]
 8018a6a:	f107 0314 	add.w	r3, r7, #20
 8018a6e:	4611      	mov	r1, r2
 8018a70:	4618      	mov	r0, r3
 8018a72:	f7ff fe22 	bl	80186ba <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	2102      	movs	r1, #2
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f7ff fd22 	bl	80184c4 <MQTTPacket_encode>
 8018a80:	4602      	mov	r2, r0
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	4413      	add	r3, r2
 8018a86:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8018a88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018a8a:	f107 0314 	add.w	r3, r7, #20
 8018a8e:	4611      	mov	r1, r2
 8018a90:	4618      	mov	r0, r3
 8018a92:	f7ff fe27 	bl	80186e4 <writeInt>
	rc = ptr - buf;
 8018a96:	697a      	ldr	r2, [r7, #20]
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	1ad3      	subs	r3, r2, r3
 8018a9c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018a9e:	69fb      	ldr	r3, [r7, #28]
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3720      	adds	r7, #32
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8018ab2:	2302      	movs	r3, #2
 8018ab4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	60fb      	str	r3, [r7, #12]
 8018aba:	e013      	b.n	8018ae4 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	4613      	mov	r3, r2
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	4413      	add	r3, r2
 8018ac4:	009b      	lsls	r3, r3, #2
 8018ac6:	461a      	mov	r2, r3
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	4413      	add	r3, r2
 8018acc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018ad0:	f7ff feaf 	bl	8018832 <MQTTstrlen>
 8018ad4:	4603      	mov	r3, r0
 8018ad6:	3303      	adds	r3, #3
 8018ad8:	68ba      	ldr	r2, [r7, #8]
 8018ada:	4413      	add	r3, r2
 8018adc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	60fb      	str	r3, [r7, #12]
 8018ae4:	68fa      	ldr	r2, [r7, #12]
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	dbe7      	blt.n	8018abc <MQTTSerialize_subscribeLength+0x14>
	return len;
 8018aec:	68bb      	ldr	r3, [r7, #8]
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3710      	adds	r7, #16
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}

08018af6 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8018af6:	b580      	push	{r7, lr}
 8018af8:	b08a      	sub	sp, #40	; 0x28
 8018afa:	af00      	add	r7, sp, #0
 8018afc:	60f8      	str	r0, [r7, #12]
 8018afe:	60b9      	str	r1, [r7, #8]
 8018b00:	4611      	mov	r1, r2
 8018b02:	461a      	mov	r2, r3
 8018b04:	460b      	mov	r3, r1
 8018b06:	71fb      	strb	r3, [r7, #7]
 8018b08:	4613      	mov	r3, r2
 8018b0a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8018b10:	2300      	movs	r3, #0
 8018b12:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8018b14:	2300      	movs	r3, #0
 8018b16:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8018b18:	2300      	movs	r3, #0
 8018b1a:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8018b20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b24:	f7ff ffc0 	bl	8018aa8 <MQTTSerialize_subscribeLength>
 8018b28:	61f8      	str	r0, [r7, #28]
 8018b2a:	69f8      	ldr	r0, [r7, #28]
 8018b2c:	f7ff fd36 	bl	801859c <MQTTPacket_len>
 8018b30:	4602      	mov	r2, r0
 8018b32:	68bb      	ldr	r3, [r7, #8]
 8018b34:	4293      	cmp	r3, r2
 8018b36:	da03      	bge.n	8018b40 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8018b38:	f06f 0301 	mvn.w	r3, #1
 8018b3c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8018b3e:	e051      	b.n	8018be4 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8018b40:	2300      	movs	r3, #0
 8018b42:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8018b44:	7d3b      	ldrb	r3, [r7, #20]
 8018b46:	2208      	movs	r2, #8
 8018b48:	f362 1307 	bfi	r3, r2, #4, #4
 8018b4c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8018b4e:	79fb      	ldrb	r3, [r7, #7]
 8018b50:	f003 0301 	and.w	r3, r3, #1
 8018b54:	b2da      	uxtb	r2, r3
 8018b56:	7d3b      	ldrb	r3, [r7, #20]
 8018b58:	f362 03c3 	bfi	r3, r2, #3, #1
 8018b5c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8018b5e:	7d3b      	ldrb	r3, [r7, #20]
 8018b60:	2201      	movs	r2, #1
 8018b62:	f362 0342 	bfi	r3, r2, #1, #2
 8018b66:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8018b68:	7d3a      	ldrb	r2, [r7, #20]
 8018b6a:	f107 0318 	add.w	r3, r7, #24
 8018b6e:	4611      	mov	r1, r2
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7ff fda2 	bl	80186ba <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8018b76:	69bb      	ldr	r3, [r7, #24]
 8018b78:	69f9      	ldr	r1, [r7, #28]
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f7ff fca2 	bl	80184c4 <MQTTPacket_encode>
 8018b80:	4602      	mov	r2, r0
 8018b82:	69bb      	ldr	r3, [r7, #24]
 8018b84:	4413      	add	r3, r2
 8018b86:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8018b88:	88ba      	ldrh	r2, [r7, #4]
 8018b8a:	f107 0318 	add.w	r3, r7, #24
 8018b8e:	4611      	mov	r1, r2
 8018b90:	4618      	mov	r0, r3
 8018b92:	f7ff fda7 	bl	80186e4 <writeInt>

	for (i = 0; i < count; ++i)
 8018b96:	2300      	movs	r3, #0
 8018b98:	623b      	str	r3, [r7, #32]
 8018b9a:	e01b      	b.n	8018bd4 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8018b9c:	6a3a      	ldr	r2, [r7, #32]
 8018b9e:	4613      	mov	r3, r2
 8018ba0:	005b      	lsls	r3, r3, #1
 8018ba2:	4413      	add	r3, r2
 8018ba4:	009b      	lsls	r3, r3, #2
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018baa:	4413      	add	r3, r2
 8018bac:	f107 0018 	add.w	r0, r7, #24
 8018bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018bb2:	f7ff fddf 	bl	8018774 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8018bb6:	6a3b      	ldr	r3, [r7, #32]
 8018bb8:	009b      	lsls	r3, r3, #2
 8018bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018bbc:	4413      	add	r3, r2
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	b2da      	uxtb	r2, r3
 8018bc2:	f107 0318 	add.w	r3, r7, #24
 8018bc6:	4611      	mov	r1, r2
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7ff fd76 	bl	80186ba <writeChar>
	for (i = 0; i < count; ++i)
 8018bce:	6a3b      	ldr	r3, [r7, #32]
 8018bd0:	3301      	adds	r3, #1
 8018bd2:	623b      	str	r3, [r7, #32]
 8018bd4:	6a3a      	ldr	r2, [r7, #32]
 8018bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd8:	429a      	cmp	r2, r3
 8018bda:	dbdf      	blt.n	8018b9c <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8018bdc:	69ba      	ldr	r2, [r7, #24]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	1ad3      	subs	r3, r2, r3
 8018be2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	3728      	adds	r7, #40	; 0x28
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd80      	pop	{r7, pc}

08018bee <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8018bee:	b580      	push	{r7, lr}
 8018bf0:	b08a      	sub	sp, #40	; 0x28
 8018bf2:	af00      	add	r7, sp, #0
 8018bf4:	60f8      	str	r0, [r7, #12]
 8018bf6:	60b9      	str	r1, [r7, #8]
 8018bf8:	607a      	str	r2, [r7, #4]
 8018bfa:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8018c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c02:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8018c04:	2300      	movs	r3, #0
 8018c06:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8018c0c:	f107 0318 	add.w	r3, r7, #24
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7ff fd3e 	bl	8018692 <readChar>
 8018c16:	4603      	mov	r3, r0
 8018c18:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8018c1a:	7f3b      	ldrb	r3, [r7, #28]
 8018c1c:	f023 030f 	bic.w	r3, r3, #15
 8018c20:	b2db      	uxtb	r3, r3
 8018c22:	2b90      	cmp	r3, #144	; 0x90
 8018c24:	d142      	bne.n	8018cac <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8018c26:	69bb      	ldr	r3, [r7, #24]
 8018c28:	f107 0214 	add.w	r2, r7, #20
 8018c2c:	4611      	mov	r1, r2
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f7ff fcfe 	bl	8018630 <MQTTPacket_decodeBuf>
 8018c34:	6278      	str	r0, [r7, #36]	; 0x24
 8018c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c38:	69bb      	ldr	r3, [r7, #24]
 8018c3a:	4413      	add	r3, r2
 8018c3c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8018c3e:	69bb      	ldr	r3, [r7, #24]
 8018c40:	697a      	ldr	r2, [r7, #20]
 8018c42:	4413      	add	r3, r2
 8018c44:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8018c46:	69bb      	ldr	r3, [r7, #24]
 8018c48:	6a3a      	ldr	r2, [r7, #32]
 8018c4a:	1ad3      	subs	r3, r2, r3
 8018c4c:	2b01      	cmp	r3, #1
 8018c4e:	dd2f      	ble.n	8018cb0 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8018c50:	f107 0318 	add.w	r3, r7, #24
 8018c54:	4618      	mov	r0, r3
 8018c56:	f7ff fd01 	bl	801865c <readInt>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	b29a      	uxth	r2, r3
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	2200      	movs	r2, #0
 8018c66:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8018c68:	e019      	b.n	8018c9e <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	68ba      	ldr	r2, [r7, #8]
 8018c70:	429a      	cmp	r2, r3
 8018c72:	da03      	bge.n	8018c7c <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8018c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c78:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8018c7a:	e01a      	b.n	8018cb2 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8018c7c:	f107 0318 	add.w	r3, r7, #24
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7ff fd06 	bl	8018692 <readChar>
 8018c86:	4603      	mov	r3, r0
 8018c88:	4618      	mov	r0, r3
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	1c59      	adds	r1, r3, #1
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	6011      	str	r1, [r2, #0]
 8018c94:	009b      	lsls	r3, r3, #2
 8018c96:	683a      	ldr	r2, [r7, #0]
 8018c98:	4413      	add	r3, r2
 8018c9a:	4602      	mov	r2, r0
 8018c9c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8018c9e:	69bb      	ldr	r3, [r7, #24]
 8018ca0:	6a3a      	ldr	r2, [r7, #32]
 8018ca2:	429a      	cmp	r2, r3
 8018ca4:	d8e1      	bhi.n	8018c6a <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8018caa:	e002      	b.n	8018cb2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8018cac:	bf00      	nop
 8018cae:	e000      	b.n	8018cb2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8018cb0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8018cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	3728      	adds	r7, #40	; 0x28
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}

08018cbc <__libc_init_array>:
 8018cbc:	b570      	push	{r4, r5, r6, lr}
 8018cbe:	4d0d      	ldr	r5, [pc, #52]	; (8018cf4 <__libc_init_array+0x38>)
 8018cc0:	4c0d      	ldr	r4, [pc, #52]	; (8018cf8 <__libc_init_array+0x3c>)
 8018cc2:	1b64      	subs	r4, r4, r5
 8018cc4:	10a4      	asrs	r4, r4, #2
 8018cc6:	2600      	movs	r6, #0
 8018cc8:	42a6      	cmp	r6, r4
 8018cca:	d109      	bne.n	8018ce0 <__libc_init_array+0x24>
 8018ccc:	4d0b      	ldr	r5, [pc, #44]	; (8018cfc <__libc_init_array+0x40>)
 8018cce:	4c0c      	ldr	r4, [pc, #48]	; (8018d00 <__libc_init_array+0x44>)
 8018cd0:	f001 f918 	bl	8019f04 <_init>
 8018cd4:	1b64      	subs	r4, r4, r5
 8018cd6:	10a4      	asrs	r4, r4, #2
 8018cd8:	2600      	movs	r6, #0
 8018cda:	42a6      	cmp	r6, r4
 8018cdc:	d105      	bne.n	8018cea <__libc_init_array+0x2e>
 8018cde:	bd70      	pop	{r4, r5, r6, pc}
 8018ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ce4:	4798      	blx	r3
 8018ce6:	3601      	adds	r6, #1
 8018ce8:	e7ee      	b.n	8018cc8 <__libc_init_array+0xc>
 8018cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8018cee:	4798      	blx	r3
 8018cf0:	3601      	adds	r6, #1
 8018cf2:	e7f2      	b.n	8018cda <__libc_init_array+0x1e>
 8018cf4:	0801d914 	.word	0x0801d914
 8018cf8:	0801d914 	.word	0x0801d914
 8018cfc:	0801d914 	.word	0x0801d914
 8018d00:	0801d918 	.word	0x0801d918

08018d04 <memcmp>:
 8018d04:	b510      	push	{r4, lr}
 8018d06:	3901      	subs	r1, #1
 8018d08:	4402      	add	r2, r0
 8018d0a:	4290      	cmp	r0, r2
 8018d0c:	d101      	bne.n	8018d12 <memcmp+0xe>
 8018d0e:	2000      	movs	r0, #0
 8018d10:	e005      	b.n	8018d1e <memcmp+0x1a>
 8018d12:	7803      	ldrb	r3, [r0, #0]
 8018d14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018d18:	42a3      	cmp	r3, r4
 8018d1a:	d001      	beq.n	8018d20 <memcmp+0x1c>
 8018d1c:	1b18      	subs	r0, r3, r4
 8018d1e:	bd10      	pop	{r4, pc}
 8018d20:	3001      	adds	r0, #1
 8018d22:	e7f2      	b.n	8018d0a <memcmp+0x6>

08018d24 <memcpy>:
 8018d24:	440a      	add	r2, r1
 8018d26:	4291      	cmp	r1, r2
 8018d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018d2c:	d100      	bne.n	8018d30 <memcpy+0xc>
 8018d2e:	4770      	bx	lr
 8018d30:	b510      	push	{r4, lr}
 8018d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018d3a:	4291      	cmp	r1, r2
 8018d3c:	d1f9      	bne.n	8018d32 <memcpy+0xe>
 8018d3e:	bd10      	pop	{r4, pc}

08018d40 <memset>:
 8018d40:	4402      	add	r2, r0
 8018d42:	4603      	mov	r3, r0
 8018d44:	4293      	cmp	r3, r2
 8018d46:	d100      	bne.n	8018d4a <memset+0xa>
 8018d48:	4770      	bx	lr
 8018d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8018d4e:	e7f9      	b.n	8018d44 <memset+0x4>

08018d50 <iprintf>:
 8018d50:	b40f      	push	{r0, r1, r2, r3}
 8018d52:	4b0a      	ldr	r3, [pc, #40]	; (8018d7c <iprintf+0x2c>)
 8018d54:	b513      	push	{r0, r1, r4, lr}
 8018d56:	681c      	ldr	r4, [r3, #0]
 8018d58:	b124      	cbz	r4, 8018d64 <iprintf+0x14>
 8018d5a:	69a3      	ldr	r3, [r4, #24]
 8018d5c:	b913      	cbnz	r3, 8018d64 <iprintf+0x14>
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f000 face 	bl	8019300 <__sinit>
 8018d64:	ab05      	add	r3, sp, #20
 8018d66:	9a04      	ldr	r2, [sp, #16]
 8018d68:	68a1      	ldr	r1, [r4, #8]
 8018d6a:	9301      	str	r3, [sp, #4]
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	f000 fcf1 	bl	8019754 <_vfiprintf_r>
 8018d72:	b002      	add	sp, #8
 8018d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d78:	b004      	add	sp, #16
 8018d7a:	4770      	bx	lr
 8018d7c:	20000030 	.word	0x20000030

08018d80 <_puts_r>:
 8018d80:	b570      	push	{r4, r5, r6, lr}
 8018d82:	460e      	mov	r6, r1
 8018d84:	4605      	mov	r5, r0
 8018d86:	b118      	cbz	r0, 8018d90 <_puts_r+0x10>
 8018d88:	6983      	ldr	r3, [r0, #24]
 8018d8a:	b90b      	cbnz	r3, 8018d90 <_puts_r+0x10>
 8018d8c:	f000 fab8 	bl	8019300 <__sinit>
 8018d90:	69ab      	ldr	r3, [r5, #24]
 8018d92:	68ac      	ldr	r4, [r5, #8]
 8018d94:	b913      	cbnz	r3, 8018d9c <_puts_r+0x1c>
 8018d96:	4628      	mov	r0, r5
 8018d98:	f000 fab2 	bl	8019300 <__sinit>
 8018d9c:	4b2c      	ldr	r3, [pc, #176]	; (8018e50 <_puts_r+0xd0>)
 8018d9e:	429c      	cmp	r4, r3
 8018da0:	d120      	bne.n	8018de4 <_puts_r+0x64>
 8018da2:	686c      	ldr	r4, [r5, #4]
 8018da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018da6:	07db      	lsls	r3, r3, #31
 8018da8:	d405      	bmi.n	8018db6 <_puts_r+0x36>
 8018daa:	89a3      	ldrh	r3, [r4, #12]
 8018dac:	0598      	lsls	r0, r3, #22
 8018dae:	d402      	bmi.n	8018db6 <_puts_r+0x36>
 8018db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018db2:	f000 fb55 	bl	8019460 <__retarget_lock_acquire_recursive>
 8018db6:	89a3      	ldrh	r3, [r4, #12]
 8018db8:	0719      	lsls	r1, r3, #28
 8018dba:	d51d      	bpl.n	8018df8 <_puts_r+0x78>
 8018dbc:	6923      	ldr	r3, [r4, #16]
 8018dbe:	b1db      	cbz	r3, 8018df8 <_puts_r+0x78>
 8018dc0:	3e01      	subs	r6, #1
 8018dc2:	68a3      	ldr	r3, [r4, #8]
 8018dc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018dc8:	3b01      	subs	r3, #1
 8018dca:	60a3      	str	r3, [r4, #8]
 8018dcc:	bb39      	cbnz	r1, 8018e1e <_puts_r+0x9e>
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	da38      	bge.n	8018e44 <_puts_r+0xc4>
 8018dd2:	4622      	mov	r2, r4
 8018dd4:	210a      	movs	r1, #10
 8018dd6:	4628      	mov	r0, r5
 8018dd8:	f000 f89a 	bl	8018f10 <__swbuf_r>
 8018ddc:	3001      	adds	r0, #1
 8018dde:	d011      	beq.n	8018e04 <_puts_r+0x84>
 8018de0:	250a      	movs	r5, #10
 8018de2:	e011      	b.n	8018e08 <_puts_r+0x88>
 8018de4:	4b1b      	ldr	r3, [pc, #108]	; (8018e54 <_puts_r+0xd4>)
 8018de6:	429c      	cmp	r4, r3
 8018de8:	d101      	bne.n	8018dee <_puts_r+0x6e>
 8018dea:	68ac      	ldr	r4, [r5, #8]
 8018dec:	e7da      	b.n	8018da4 <_puts_r+0x24>
 8018dee:	4b1a      	ldr	r3, [pc, #104]	; (8018e58 <_puts_r+0xd8>)
 8018df0:	429c      	cmp	r4, r3
 8018df2:	bf08      	it	eq
 8018df4:	68ec      	ldreq	r4, [r5, #12]
 8018df6:	e7d5      	b.n	8018da4 <_puts_r+0x24>
 8018df8:	4621      	mov	r1, r4
 8018dfa:	4628      	mov	r0, r5
 8018dfc:	f000 f8da 	bl	8018fb4 <__swsetup_r>
 8018e00:	2800      	cmp	r0, #0
 8018e02:	d0dd      	beq.n	8018dc0 <_puts_r+0x40>
 8018e04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e0a:	07da      	lsls	r2, r3, #31
 8018e0c:	d405      	bmi.n	8018e1a <_puts_r+0x9a>
 8018e0e:	89a3      	ldrh	r3, [r4, #12]
 8018e10:	059b      	lsls	r3, r3, #22
 8018e12:	d402      	bmi.n	8018e1a <_puts_r+0x9a>
 8018e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e16:	f000 fb24 	bl	8019462 <__retarget_lock_release_recursive>
 8018e1a:	4628      	mov	r0, r5
 8018e1c:	bd70      	pop	{r4, r5, r6, pc}
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	da04      	bge.n	8018e2c <_puts_r+0xac>
 8018e22:	69a2      	ldr	r2, [r4, #24]
 8018e24:	429a      	cmp	r2, r3
 8018e26:	dc06      	bgt.n	8018e36 <_puts_r+0xb6>
 8018e28:	290a      	cmp	r1, #10
 8018e2a:	d004      	beq.n	8018e36 <_puts_r+0xb6>
 8018e2c:	6823      	ldr	r3, [r4, #0]
 8018e2e:	1c5a      	adds	r2, r3, #1
 8018e30:	6022      	str	r2, [r4, #0]
 8018e32:	7019      	strb	r1, [r3, #0]
 8018e34:	e7c5      	b.n	8018dc2 <_puts_r+0x42>
 8018e36:	4622      	mov	r2, r4
 8018e38:	4628      	mov	r0, r5
 8018e3a:	f000 f869 	bl	8018f10 <__swbuf_r>
 8018e3e:	3001      	adds	r0, #1
 8018e40:	d1bf      	bne.n	8018dc2 <_puts_r+0x42>
 8018e42:	e7df      	b.n	8018e04 <_puts_r+0x84>
 8018e44:	6823      	ldr	r3, [r4, #0]
 8018e46:	250a      	movs	r5, #10
 8018e48:	1c5a      	adds	r2, r3, #1
 8018e4a:	6022      	str	r2, [r4, #0]
 8018e4c:	701d      	strb	r5, [r3, #0]
 8018e4e:	e7db      	b.n	8018e08 <_puts_r+0x88>
 8018e50:	0801d898 	.word	0x0801d898
 8018e54:	0801d8b8 	.word	0x0801d8b8
 8018e58:	0801d878 	.word	0x0801d878

08018e5c <puts>:
 8018e5c:	4b02      	ldr	r3, [pc, #8]	; (8018e68 <puts+0xc>)
 8018e5e:	4601      	mov	r1, r0
 8018e60:	6818      	ldr	r0, [r3, #0]
 8018e62:	f7ff bf8d 	b.w	8018d80 <_puts_r>
 8018e66:	bf00      	nop
 8018e68:	20000030 	.word	0x20000030

08018e6c <rand>:
 8018e6c:	4b16      	ldr	r3, [pc, #88]	; (8018ec8 <rand+0x5c>)
 8018e6e:	b510      	push	{r4, lr}
 8018e70:	681c      	ldr	r4, [r3, #0]
 8018e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018e74:	b9b3      	cbnz	r3, 8018ea4 <rand+0x38>
 8018e76:	2018      	movs	r0, #24
 8018e78:	f000 fb5a 	bl	8019530 <malloc>
 8018e7c:	63a0      	str	r0, [r4, #56]	; 0x38
 8018e7e:	b928      	cbnz	r0, 8018e8c <rand+0x20>
 8018e80:	4602      	mov	r2, r0
 8018e82:	4b12      	ldr	r3, [pc, #72]	; (8018ecc <rand+0x60>)
 8018e84:	4812      	ldr	r0, [pc, #72]	; (8018ed0 <rand+0x64>)
 8018e86:	214e      	movs	r1, #78	; 0x4e
 8018e88:	f000 f902 	bl	8019090 <__assert_func>
 8018e8c:	4a11      	ldr	r2, [pc, #68]	; (8018ed4 <rand+0x68>)
 8018e8e:	4b12      	ldr	r3, [pc, #72]	; (8018ed8 <rand+0x6c>)
 8018e90:	e9c0 2300 	strd	r2, r3, [r0]
 8018e94:	4b11      	ldr	r3, [pc, #68]	; (8018edc <rand+0x70>)
 8018e96:	6083      	str	r3, [r0, #8]
 8018e98:	230b      	movs	r3, #11
 8018e9a:	8183      	strh	r3, [r0, #12]
 8018e9c:	2201      	movs	r2, #1
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018ea4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018ea6:	4a0e      	ldr	r2, [pc, #56]	; (8018ee0 <rand+0x74>)
 8018ea8:	6920      	ldr	r0, [r4, #16]
 8018eaa:	6963      	ldr	r3, [r4, #20]
 8018eac:	490d      	ldr	r1, [pc, #52]	; (8018ee4 <rand+0x78>)
 8018eae:	4342      	muls	r2, r0
 8018eb0:	fb01 2203 	mla	r2, r1, r3, r2
 8018eb4:	fba0 0101 	umull	r0, r1, r0, r1
 8018eb8:	1c43      	adds	r3, r0, #1
 8018eba:	eb42 0001 	adc.w	r0, r2, r1
 8018ebe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018ec2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018ec6:	bd10      	pop	{r4, pc}
 8018ec8:	20000030 	.word	0x20000030
 8018ecc:	0801d7c8 	.word	0x0801d7c8
 8018ed0:	0801d7df 	.word	0x0801d7df
 8018ed4:	abcd330e 	.word	0xabcd330e
 8018ed8:	e66d1234 	.word	0xe66d1234
 8018edc:	0005deec 	.word	0x0005deec
 8018ee0:	5851f42d 	.word	0x5851f42d
 8018ee4:	4c957f2d 	.word	0x4c957f2d

08018ee8 <strncmp>:
 8018ee8:	b510      	push	{r4, lr}
 8018eea:	b17a      	cbz	r2, 8018f0c <strncmp+0x24>
 8018eec:	4603      	mov	r3, r0
 8018eee:	3901      	subs	r1, #1
 8018ef0:	1884      	adds	r4, r0, r2
 8018ef2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018ef6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018efa:	4290      	cmp	r0, r2
 8018efc:	d101      	bne.n	8018f02 <strncmp+0x1a>
 8018efe:	42a3      	cmp	r3, r4
 8018f00:	d101      	bne.n	8018f06 <strncmp+0x1e>
 8018f02:	1a80      	subs	r0, r0, r2
 8018f04:	bd10      	pop	{r4, pc}
 8018f06:	2800      	cmp	r0, #0
 8018f08:	d1f3      	bne.n	8018ef2 <strncmp+0xa>
 8018f0a:	e7fa      	b.n	8018f02 <strncmp+0x1a>
 8018f0c:	4610      	mov	r0, r2
 8018f0e:	e7f9      	b.n	8018f04 <strncmp+0x1c>

08018f10 <__swbuf_r>:
 8018f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f12:	460e      	mov	r6, r1
 8018f14:	4614      	mov	r4, r2
 8018f16:	4605      	mov	r5, r0
 8018f18:	b118      	cbz	r0, 8018f22 <__swbuf_r+0x12>
 8018f1a:	6983      	ldr	r3, [r0, #24]
 8018f1c:	b90b      	cbnz	r3, 8018f22 <__swbuf_r+0x12>
 8018f1e:	f000 f9ef 	bl	8019300 <__sinit>
 8018f22:	4b21      	ldr	r3, [pc, #132]	; (8018fa8 <__swbuf_r+0x98>)
 8018f24:	429c      	cmp	r4, r3
 8018f26:	d12b      	bne.n	8018f80 <__swbuf_r+0x70>
 8018f28:	686c      	ldr	r4, [r5, #4]
 8018f2a:	69a3      	ldr	r3, [r4, #24]
 8018f2c:	60a3      	str	r3, [r4, #8]
 8018f2e:	89a3      	ldrh	r3, [r4, #12]
 8018f30:	071a      	lsls	r2, r3, #28
 8018f32:	d52f      	bpl.n	8018f94 <__swbuf_r+0x84>
 8018f34:	6923      	ldr	r3, [r4, #16]
 8018f36:	b36b      	cbz	r3, 8018f94 <__swbuf_r+0x84>
 8018f38:	6923      	ldr	r3, [r4, #16]
 8018f3a:	6820      	ldr	r0, [r4, #0]
 8018f3c:	1ac0      	subs	r0, r0, r3
 8018f3e:	6963      	ldr	r3, [r4, #20]
 8018f40:	b2f6      	uxtb	r6, r6
 8018f42:	4283      	cmp	r3, r0
 8018f44:	4637      	mov	r7, r6
 8018f46:	dc04      	bgt.n	8018f52 <__swbuf_r+0x42>
 8018f48:	4621      	mov	r1, r4
 8018f4a:	4628      	mov	r0, r5
 8018f4c:	f000 f944 	bl	80191d8 <_fflush_r>
 8018f50:	bb30      	cbnz	r0, 8018fa0 <__swbuf_r+0x90>
 8018f52:	68a3      	ldr	r3, [r4, #8]
 8018f54:	3b01      	subs	r3, #1
 8018f56:	60a3      	str	r3, [r4, #8]
 8018f58:	6823      	ldr	r3, [r4, #0]
 8018f5a:	1c5a      	adds	r2, r3, #1
 8018f5c:	6022      	str	r2, [r4, #0]
 8018f5e:	701e      	strb	r6, [r3, #0]
 8018f60:	6963      	ldr	r3, [r4, #20]
 8018f62:	3001      	adds	r0, #1
 8018f64:	4283      	cmp	r3, r0
 8018f66:	d004      	beq.n	8018f72 <__swbuf_r+0x62>
 8018f68:	89a3      	ldrh	r3, [r4, #12]
 8018f6a:	07db      	lsls	r3, r3, #31
 8018f6c:	d506      	bpl.n	8018f7c <__swbuf_r+0x6c>
 8018f6e:	2e0a      	cmp	r6, #10
 8018f70:	d104      	bne.n	8018f7c <__swbuf_r+0x6c>
 8018f72:	4621      	mov	r1, r4
 8018f74:	4628      	mov	r0, r5
 8018f76:	f000 f92f 	bl	80191d8 <_fflush_r>
 8018f7a:	b988      	cbnz	r0, 8018fa0 <__swbuf_r+0x90>
 8018f7c:	4638      	mov	r0, r7
 8018f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f80:	4b0a      	ldr	r3, [pc, #40]	; (8018fac <__swbuf_r+0x9c>)
 8018f82:	429c      	cmp	r4, r3
 8018f84:	d101      	bne.n	8018f8a <__swbuf_r+0x7a>
 8018f86:	68ac      	ldr	r4, [r5, #8]
 8018f88:	e7cf      	b.n	8018f2a <__swbuf_r+0x1a>
 8018f8a:	4b09      	ldr	r3, [pc, #36]	; (8018fb0 <__swbuf_r+0xa0>)
 8018f8c:	429c      	cmp	r4, r3
 8018f8e:	bf08      	it	eq
 8018f90:	68ec      	ldreq	r4, [r5, #12]
 8018f92:	e7ca      	b.n	8018f2a <__swbuf_r+0x1a>
 8018f94:	4621      	mov	r1, r4
 8018f96:	4628      	mov	r0, r5
 8018f98:	f000 f80c 	bl	8018fb4 <__swsetup_r>
 8018f9c:	2800      	cmp	r0, #0
 8018f9e:	d0cb      	beq.n	8018f38 <__swbuf_r+0x28>
 8018fa0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018fa4:	e7ea      	b.n	8018f7c <__swbuf_r+0x6c>
 8018fa6:	bf00      	nop
 8018fa8:	0801d898 	.word	0x0801d898
 8018fac:	0801d8b8 	.word	0x0801d8b8
 8018fb0:	0801d878 	.word	0x0801d878

08018fb4 <__swsetup_r>:
 8018fb4:	4b32      	ldr	r3, [pc, #200]	; (8019080 <__swsetup_r+0xcc>)
 8018fb6:	b570      	push	{r4, r5, r6, lr}
 8018fb8:	681d      	ldr	r5, [r3, #0]
 8018fba:	4606      	mov	r6, r0
 8018fbc:	460c      	mov	r4, r1
 8018fbe:	b125      	cbz	r5, 8018fca <__swsetup_r+0x16>
 8018fc0:	69ab      	ldr	r3, [r5, #24]
 8018fc2:	b913      	cbnz	r3, 8018fca <__swsetup_r+0x16>
 8018fc4:	4628      	mov	r0, r5
 8018fc6:	f000 f99b 	bl	8019300 <__sinit>
 8018fca:	4b2e      	ldr	r3, [pc, #184]	; (8019084 <__swsetup_r+0xd0>)
 8018fcc:	429c      	cmp	r4, r3
 8018fce:	d10f      	bne.n	8018ff0 <__swsetup_r+0x3c>
 8018fd0:	686c      	ldr	r4, [r5, #4]
 8018fd2:	89a3      	ldrh	r3, [r4, #12]
 8018fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018fd8:	0719      	lsls	r1, r3, #28
 8018fda:	d42c      	bmi.n	8019036 <__swsetup_r+0x82>
 8018fdc:	06dd      	lsls	r5, r3, #27
 8018fde:	d411      	bmi.n	8019004 <__swsetup_r+0x50>
 8018fe0:	2309      	movs	r3, #9
 8018fe2:	6033      	str	r3, [r6, #0]
 8018fe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018fe8:	81a3      	strh	r3, [r4, #12]
 8018fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fee:	e03e      	b.n	801906e <__swsetup_r+0xba>
 8018ff0:	4b25      	ldr	r3, [pc, #148]	; (8019088 <__swsetup_r+0xd4>)
 8018ff2:	429c      	cmp	r4, r3
 8018ff4:	d101      	bne.n	8018ffa <__swsetup_r+0x46>
 8018ff6:	68ac      	ldr	r4, [r5, #8]
 8018ff8:	e7eb      	b.n	8018fd2 <__swsetup_r+0x1e>
 8018ffa:	4b24      	ldr	r3, [pc, #144]	; (801908c <__swsetup_r+0xd8>)
 8018ffc:	429c      	cmp	r4, r3
 8018ffe:	bf08      	it	eq
 8019000:	68ec      	ldreq	r4, [r5, #12]
 8019002:	e7e6      	b.n	8018fd2 <__swsetup_r+0x1e>
 8019004:	0758      	lsls	r0, r3, #29
 8019006:	d512      	bpl.n	801902e <__swsetup_r+0x7a>
 8019008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801900a:	b141      	cbz	r1, 801901e <__swsetup_r+0x6a>
 801900c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019010:	4299      	cmp	r1, r3
 8019012:	d002      	beq.n	801901a <__swsetup_r+0x66>
 8019014:	4630      	mov	r0, r6
 8019016:	f000 fa93 	bl	8019540 <_free_r>
 801901a:	2300      	movs	r3, #0
 801901c:	6363      	str	r3, [r4, #52]	; 0x34
 801901e:	89a3      	ldrh	r3, [r4, #12]
 8019020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019024:	81a3      	strh	r3, [r4, #12]
 8019026:	2300      	movs	r3, #0
 8019028:	6063      	str	r3, [r4, #4]
 801902a:	6923      	ldr	r3, [r4, #16]
 801902c:	6023      	str	r3, [r4, #0]
 801902e:	89a3      	ldrh	r3, [r4, #12]
 8019030:	f043 0308 	orr.w	r3, r3, #8
 8019034:	81a3      	strh	r3, [r4, #12]
 8019036:	6923      	ldr	r3, [r4, #16]
 8019038:	b94b      	cbnz	r3, 801904e <__swsetup_r+0x9a>
 801903a:	89a3      	ldrh	r3, [r4, #12]
 801903c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019044:	d003      	beq.n	801904e <__swsetup_r+0x9a>
 8019046:	4621      	mov	r1, r4
 8019048:	4630      	mov	r0, r6
 801904a:	f000 fa31 	bl	80194b0 <__smakebuf_r>
 801904e:	89a0      	ldrh	r0, [r4, #12]
 8019050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019054:	f010 0301 	ands.w	r3, r0, #1
 8019058:	d00a      	beq.n	8019070 <__swsetup_r+0xbc>
 801905a:	2300      	movs	r3, #0
 801905c:	60a3      	str	r3, [r4, #8]
 801905e:	6963      	ldr	r3, [r4, #20]
 8019060:	425b      	negs	r3, r3
 8019062:	61a3      	str	r3, [r4, #24]
 8019064:	6923      	ldr	r3, [r4, #16]
 8019066:	b943      	cbnz	r3, 801907a <__swsetup_r+0xc6>
 8019068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801906c:	d1ba      	bne.n	8018fe4 <__swsetup_r+0x30>
 801906e:	bd70      	pop	{r4, r5, r6, pc}
 8019070:	0781      	lsls	r1, r0, #30
 8019072:	bf58      	it	pl
 8019074:	6963      	ldrpl	r3, [r4, #20]
 8019076:	60a3      	str	r3, [r4, #8]
 8019078:	e7f4      	b.n	8019064 <__swsetup_r+0xb0>
 801907a:	2000      	movs	r0, #0
 801907c:	e7f7      	b.n	801906e <__swsetup_r+0xba>
 801907e:	bf00      	nop
 8019080:	20000030 	.word	0x20000030
 8019084:	0801d898 	.word	0x0801d898
 8019088:	0801d8b8 	.word	0x0801d8b8
 801908c:	0801d878 	.word	0x0801d878

08019090 <__assert_func>:
 8019090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019092:	4614      	mov	r4, r2
 8019094:	461a      	mov	r2, r3
 8019096:	4b09      	ldr	r3, [pc, #36]	; (80190bc <__assert_func+0x2c>)
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	4605      	mov	r5, r0
 801909c:	68d8      	ldr	r0, [r3, #12]
 801909e:	b14c      	cbz	r4, 80190b4 <__assert_func+0x24>
 80190a0:	4b07      	ldr	r3, [pc, #28]	; (80190c0 <__assert_func+0x30>)
 80190a2:	9100      	str	r1, [sp, #0]
 80190a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80190a8:	4906      	ldr	r1, [pc, #24]	; (80190c4 <__assert_func+0x34>)
 80190aa:	462b      	mov	r3, r5
 80190ac:	f000 f9a6 	bl	80193fc <fiprintf>
 80190b0:	f000 fe7a 	bl	8019da8 <abort>
 80190b4:	4b04      	ldr	r3, [pc, #16]	; (80190c8 <__assert_func+0x38>)
 80190b6:	461c      	mov	r4, r3
 80190b8:	e7f3      	b.n	80190a2 <__assert_func+0x12>
 80190ba:	bf00      	nop
 80190bc:	20000030 	.word	0x20000030
 80190c0:	0801d83a 	.word	0x0801d83a
 80190c4:	0801d847 	.word	0x0801d847
 80190c8:	0801d875 	.word	0x0801d875

080190cc <__sflush_r>:
 80190cc:	898a      	ldrh	r2, [r1, #12]
 80190ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190d2:	4605      	mov	r5, r0
 80190d4:	0710      	lsls	r0, r2, #28
 80190d6:	460c      	mov	r4, r1
 80190d8:	d458      	bmi.n	801918c <__sflush_r+0xc0>
 80190da:	684b      	ldr	r3, [r1, #4]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	dc05      	bgt.n	80190ec <__sflush_r+0x20>
 80190e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	dc02      	bgt.n	80190ec <__sflush_r+0x20>
 80190e6:	2000      	movs	r0, #0
 80190e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80190ee:	2e00      	cmp	r6, #0
 80190f0:	d0f9      	beq.n	80190e6 <__sflush_r+0x1a>
 80190f2:	2300      	movs	r3, #0
 80190f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80190f8:	682f      	ldr	r7, [r5, #0]
 80190fa:	602b      	str	r3, [r5, #0]
 80190fc:	d032      	beq.n	8019164 <__sflush_r+0x98>
 80190fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019100:	89a3      	ldrh	r3, [r4, #12]
 8019102:	075a      	lsls	r2, r3, #29
 8019104:	d505      	bpl.n	8019112 <__sflush_r+0x46>
 8019106:	6863      	ldr	r3, [r4, #4]
 8019108:	1ac0      	subs	r0, r0, r3
 801910a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801910c:	b10b      	cbz	r3, 8019112 <__sflush_r+0x46>
 801910e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019110:	1ac0      	subs	r0, r0, r3
 8019112:	2300      	movs	r3, #0
 8019114:	4602      	mov	r2, r0
 8019116:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019118:	6a21      	ldr	r1, [r4, #32]
 801911a:	4628      	mov	r0, r5
 801911c:	47b0      	blx	r6
 801911e:	1c43      	adds	r3, r0, #1
 8019120:	89a3      	ldrh	r3, [r4, #12]
 8019122:	d106      	bne.n	8019132 <__sflush_r+0x66>
 8019124:	6829      	ldr	r1, [r5, #0]
 8019126:	291d      	cmp	r1, #29
 8019128:	d82c      	bhi.n	8019184 <__sflush_r+0xb8>
 801912a:	4a2a      	ldr	r2, [pc, #168]	; (80191d4 <__sflush_r+0x108>)
 801912c:	40ca      	lsrs	r2, r1
 801912e:	07d6      	lsls	r6, r2, #31
 8019130:	d528      	bpl.n	8019184 <__sflush_r+0xb8>
 8019132:	2200      	movs	r2, #0
 8019134:	6062      	str	r2, [r4, #4]
 8019136:	04d9      	lsls	r1, r3, #19
 8019138:	6922      	ldr	r2, [r4, #16]
 801913a:	6022      	str	r2, [r4, #0]
 801913c:	d504      	bpl.n	8019148 <__sflush_r+0x7c>
 801913e:	1c42      	adds	r2, r0, #1
 8019140:	d101      	bne.n	8019146 <__sflush_r+0x7a>
 8019142:	682b      	ldr	r3, [r5, #0]
 8019144:	b903      	cbnz	r3, 8019148 <__sflush_r+0x7c>
 8019146:	6560      	str	r0, [r4, #84]	; 0x54
 8019148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801914a:	602f      	str	r7, [r5, #0]
 801914c:	2900      	cmp	r1, #0
 801914e:	d0ca      	beq.n	80190e6 <__sflush_r+0x1a>
 8019150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019154:	4299      	cmp	r1, r3
 8019156:	d002      	beq.n	801915e <__sflush_r+0x92>
 8019158:	4628      	mov	r0, r5
 801915a:	f000 f9f1 	bl	8019540 <_free_r>
 801915e:	2000      	movs	r0, #0
 8019160:	6360      	str	r0, [r4, #52]	; 0x34
 8019162:	e7c1      	b.n	80190e8 <__sflush_r+0x1c>
 8019164:	6a21      	ldr	r1, [r4, #32]
 8019166:	2301      	movs	r3, #1
 8019168:	4628      	mov	r0, r5
 801916a:	47b0      	blx	r6
 801916c:	1c41      	adds	r1, r0, #1
 801916e:	d1c7      	bne.n	8019100 <__sflush_r+0x34>
 8019170:	682b      	ldr	r3, [r5, #0]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d0c4      	beq.n	8019100 <__sflush_r+0x34>
 8019176:	2b1d      	cmp	r3, #29
 8019178:	d001      	beq.n	801917e <__sflush_r+0xb2>
 801917a:	2b16      	cmp	r3, #22
 801917c:	d101      	bne.n	8019182 <__sflush_r+0xb6>
 801917e:	602f      	str	r7, [r5, #0]
 8019180:	e7b1      	b.n	80190e6 <__sflush_r+0x1a>
 8019182:	89a3      	ldrh	r3, [r4, #12]
 8019184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019188:	81a3      	strh	r3, [r4, #12]
 801918a:	e7ad      	b.n	80190e8 <__sflush_r+0x1c>
 801918c:	690f      	ldr	r7, [r1, #16]
 801918e:	2f00      	cmp	r7, #0
 8019190:	d0a9      	beq.n	80190e6 <__sflush_r+0x1a>
 8019192:	0793      	lsls	r3, r2, #30
 8019194:	680e      	ldr	r6, [r1, #0]
 8019196:	bf08      	it	eq
 8019198:	694b      	ldreq	r3, [r1, #20]
 801919a:	600f      	str	r7, [r1, #0]
 801919c:	bf18      	it	ne
 801919e:	2300      	movne	r3, #0
 80191a0:	eba6 0807 	sub.w	r8, r6, r7
 80191a4:	608b      	str	r3, [r1, #8]
 80191a6:	f1b8 0f00 	cmp.w	r8, #0
 80191aa:	dd9c      	ble.n	80190e6 <__sflush_r+0x1a>
 80191ac:	6a21      	ldr	r1, [r4, #32]
 80191ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80191b0:	4643      	mov	r3, r8
 80191b2:	463a      	mov	r2, r7
 80191b4:	4628      	mov	r0, r5
 80191b6:	47b0      	blx	r6
 80191b8:	2800      	cmp	r0, #0
 80191ba:	dc06      	bgt.n	80191ca <__sflush_r+0xfe>
 80191bc:	89a3      	ldrh	r3, [r4, #12]
 80191be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80191c2:	81a3      	strh	r3, [r4, #12]
 80191c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80191c8:	e78e      	b.n	80190e8 <__sflush_r+0x1c>
 80191ca:	4407      	add	r7, r0
 80191cc:	eba8 0800 	sub.w	r8, r8, r0
 80191d0:	e7e9      	b.n	80191a6 <__sflush_r+0xda>
 80191d2:	bf00      	nop
 80191d4:	20400001 	.word	0x20400001

080191d8 <_fflush_r>:
 80191d8:	b538      	push	{r3, r4, r5, lr}
 80191da:	690b      	ldr	r3, [r1, #16]
 80191dc:	4605      	mov	r5, r0
 80191de:	460c      	mov	r4, r1
 80191e0:	b913      	cbnz	r3, 80191e8 <_fflush_r+0x10>
 80191e2:	2500      	movs	r5, #0
 80191e4:	4628      	mov	r0, r5
 80191e6:	bd38      	pop	{r3, r4, r5, pc}
 80191e8:	b118      	cbz	r0, 80191f2 <_fflush_r+0x1a>
 80191ea:	6983      	ldr	r3, [r0, #24]
 80191ec:	b90b      	cbnz	r3, 80191f2 <_fflush_r+0x1a>
 80191ee:	f000 f887 	bl	8019300 <__sinit>
 80191f2:	4b14      	ldr	r3, [pc, #80]	; (8019244 <_fflush_r+0x6c>)
 80191f4:	429c      	cmp	r4, r3
 80191f6:	d11b      	bne.n	8019230 <_fflush_r+0x58>
 80191f8:	686c      	ldr	r4, [r5, #4]
 80191fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d0ef      	beq.n	80191e2 <_fflush_r+0xa>
 8019202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019204:	07d0      	lsls	r0, r2, #31
 8019206:	d404      	bmi.n	8019212 <_fflush_r+0x3a>
 8019208:	0599      	lsls	r1, r3, #22
 801920a:	d402      	bmi.n	8019212 <_fflush_r+0x3a>
 801920c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801920e:	f000 f927 	bl	8019460 <__retarget_lock_acquire_recursive>
 8019212:	4628      	mov	r0, r5
 8019214:	4621      	mov	r1, r4
 8019216:	f7ff ff59 	bl	80190cc <__sflush_r>
 801921a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801921c:	07da      	lsls	r2, r3, #31
 801921e:	4605      	mov	r5, r0
 8019220:	d4e0      	bmi.n	80191e4 <_fflush_r+0xc>
 8019222:	89a3      	ldrh	r3, [r4, #12]
 8019224:	059b      	lsls	r3, r3, #22
 8019226:	d4dd      	bmi.n	80191e4 <_fflush_r+0xc>
 8019228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801922a:	f000 f91a 	bl	8019462 <__retarget_lock_release_recursive>
 801922e:	e7d9      	b.n	80191e4 <_fflush_r+0xc>
 8019230:	4b05      	ldr	r3, [pc, #20]	; (8019248 <_fflush_r+0x70>)
 8019232:	429c      	cmp	r4, r3
 8019234:	d101      	bne.n	801923a <_fflush_r+0x62>
 8019236:	68ac      	ldr	r4, [r5, #8]
 8019238:	e7df      	b.n	80191fa <_fflush_r+0x22>
 801923a:	4b04      	ldr	r3, [pc, #16]	; (801924c <_fflush_r+0x74>)
 801923c:	429c      	cmp	r4, r3
 801923e:	bf08      	it	eq
 8019240:	68ec      	ldreq	r4, [r5, #12]
 8019242:	e7da      	b.n	80191fa <_fflush_r+0x22>
 8019244:	0801d898 	.word	0x0801d898
 8019248:	0801d8b8 	.word	0x0801d8b8
 801924c:	0801d878 	.word	0x0801d878

08019250 <std>:
 8019250:	2300      	movs	r3, #0
 8019252:	b510      	push	{r4, lr}
 8019254:	4604      	mov	r4, r0
 8019256:	e9c0 3300 	strd	r3, r3, [r0]
 801925a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801925e:	6083      	str	r3, [r0, #8]
 8019260:	8181      	strh	r1, [r0, #12]
 8019262:	6643      	str	r3, [r0, #100]	; 0x64
 8019264:	81c2      	strh	r2, [r0, #14]
 8019266:	6183      	str	r3, [r0, #24]
 8019268:	4619      	mov	r1, r3
 801926a:	2208      	movs	r2, #8
 801926c:	305c      	adds	r0, #92	; 0x5c
 801926e:	f7ff fd67 	bl	8018d40 <memset>
 8019272:	4b05      	ldr	r3, [pc, #20]	; (8019288 <std+0x38>)
 8019274:	6263      	str	r3, [r4, #36]	; 0x24
 8019276:	4b05      	ldr	r3, [pc, #20]	; (801928c <std+0x3c>)
 8019278:	62a3      	str	r3, [r4, #40]	; 0x28
 801927a:	4b05      	ldr	r3, [pc, #20]	; (8019290 <std+0x40>)
 801927c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801927e:	4b05      	ldr	r3, [pc, #20]	; (8019294 <std+0x44>)
 8019280:	6224      	str	r4, [r4, #32]
 8019282:	6323      	str	r3, [r4, #48]	; 0x30
 8019284:	bd10      	pop	{r4, pc}
 8019286:	bf00      	nop
 8019288:	08019cfd 	.word	0x08019cfd
 801928c:	08019d1f 	.word	0x08019d1f
 8019290:	08019d57 	.word	0x08019d57
 8019294:	08019d7b 	.word	0x08019d7b

08019298 <_cleanup_r>:
 8019298:	4901      	ldr	r1, [pc, #4]	; (80192a0 <_cleanup_r+0x8>)
 801929a:	f000 b8c1 	b.w	8019420 <_fwalk_reent>
 801929e:	bf00      	nop
 80192a0:	080191d9 	.word	0x080191d9

080192a4 <__sfmoreglue>:
 80192a4:	b570      	push	{r4, r5, r6, lr}
 80192a6:	2268      	movs	r2, #104	; 0x68
 80192a8:	1e4d      	subs	r5, r1, #1
 80192aa:	4355      	muls	r5, r2
 80192ac:	460e      	mov	r6, r1
 80192ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80192b2:	f000 f9b1 	bl	8019618 <_malloc_r>
 80192b6:	4604      	mov	r4, r0
 80192b8:	b140      	cbz	r0, 80192cc <__sfmoreglue+0x28>
 80192ba:	2100      	movs	r1, #0
 80192bc:	e9c0 1600 	strd	r1, r6, [r0]
 80192c0:	300c      	adds	r0, #12
 80192c2:	60a0      	str	r0, [r4, #8]
 80192c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80192c8:	f7ff fd3a 	bl	8018d40 <memset>
 80192cc:	4620      	mov	r0, r4
 80192ce:	bd70      	pop	{r4, r5, r6, pc}

080192d0 <__sfp_lock_acquire>:
 80192d0:	4801      	ldr	r0, [pc, #4]	; (80192d8 <__sfp_lock_acquire+0x8>)
 80192d2:	f000 b8c5 	b.w	8019460 <__retarget_lock_acquire_recursive>
 80192d6:	bf00      	nop
 80192d8:	200113a1 	.word	0x200113a1

080192dc <__sfp_lock_release>:
 80192dc:	4801      	ldr	r0, [pc, #4]	; (80192e4 <__sfp_lock_release+0x8>)
 80192de:	f000 b8c0 	b.w	8019462 <__retarget_lock_release_recursive>
 80192e2:	bf00      	nop
 80192e4:	200113a1 	.word	0x200113a1

080192e8 <__sinit_lock_acquire>:
 80192e8:	4801      	ldr	r0, [pc, #4]	; (80192f0 <__sinit_lock_acquire+0x8>)
 80192ea:	f000 b8b9 	b.w	8019460 <__retarget_lock_acquire_recursive>
 80192ee:	bf00      	nop
 80192f0:	200113a2 	.word	0x200113a2

080192f4 <__sinit_lock_release>:
 80192f4:	4801      	ldr	r0, [pc, #4]	; (80192fc <__sinit_lock_release+0x8>)
 80192f6:	f000 b8b4 	b.w	8019462 <__retarget_lock_release_recursive>
 80192fa:	bf00      	nop
 80192fc:	200113a2 	.word	0x200113a2

08019300 <__sinit>:
 8019300:	b510      	push	{r4, lr}
 8019302:	4604      	mov	r4, r0
 8019304:	f7ff fff0 	bl	80192e8 <__sinit_lock_acquire>
 8019308:	69a3      	ldr	r3, [r4, #24]
 801930a:	b11b      	cbz	r3, 8019314 <__sinit+0x14>
 801930c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019310:	f7ff bff0 	b.w	80192f4 <__sinit_lock_release>
 8019314:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019318:	6523      	str	r3, [r4, #80]	; 0x50
 801931a:	4b13      	ldr	r3, [pc, #76]	; (8019368 <__sinit+0x68>)
 801931c:	4a13      	ldr	r2, [pc, #76]	; (801936c <__sinit+0x6c>)
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	62a2      	str	r2, [r4, #40]	; 0x28
 8019322:	42a3      	cmp	r3, r4
 8019324:	bf04      	itt	eq
 8019326:	2301      	moveq	r3, #1
 8019328:	61a3      	streq	r3, [r4, #24]
 801932a:	4620      	mov	r0, r4
 801932c:	f000 f820 	bl	8019370 <__sfp>
 8019330:	6060      	str	r0, [r4, #4]
 8019332:	4620      	mov	r0, r4
 8019334:	f000 f81c 	bl	8019370 <__sfp>
 8019338:	60a0      	str	r0, [r4, #8]
 801933a:	4620      	mov	r0, r4
 801933c:	f000 f818 	bl	8019370 <__sfp>
 8019340:	2200      	movs	r2, #0
 8019342:	60e0      	str	r0, [r4, #12]
 8019344:	2104      	movs	r1, #4
 8019346:	6860      	ldr	r0, [r4, #4]
 8019348:	f7ff ff82 	bl	8019250 <std>
 801934c:	68a0      	ldr	r0, [r4, #8]
 801934e:	2201      	movs	r2, #1
 8019350:	2109      	movs	r1, #9
 8019352:	f7ff ff7d 	bl	8019250 <std>
 8019356:	68e0      	ldr	r0, [r4, #12]
 8019358:	2202      	movs	r2, #2
 801935a:	2112      	movs	r1, #18
 801935c:	f7ff ff78 	bl	8019250 <std>
 8019360:	2301      	movs	r3, #1
 8019362:	61a3      	str	r3, [r4, #24]
 8019364:	e7d2      	b.n	801930c <__sinit+0xc>
 8019366:	bf00      	nop
 8019368:	0801d7c4 	.word	0x0801d7c4
 801936c:	08019299 	.word	0x08019299

08019370 <__sfp>:
 8019370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019372:	4607      	mov	r7, r0
 8019374:	f7ff ffac 	bl	80192d0 <__sfp_lock_acquire>
 8019378:	4b1e      	ldr	r3, [pc, #120]	; (80193f4 <__sfp+0x84>)
 801937a:	681e      	ldr	r6, [r3, #0]
 801937c:	69b3      	ldr	r3, [r6, #24]
 801937e:	b913      	cbnz	r3, 8019386 <__sfp+0x16>
 8019380:	4630      	mov	r0, r6
 8019382:	f7ff ffbd 	bl	8019300 <__sinit>
 8019386:	3648      	adds	r6, #72	; 0x48
 8019388:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801938c:	3b01      	subs	r3, #1
 801938e:	d503      	bpl.n	8019398 <__sfp+0x28>
 8019390:	6833      	ldr	r3, [r6, #0]
 8019392:	b30b      	cbz	r3, 80193d8 <__sfp+0x68>
 8019394:	6836      	ldr	r6, [r6, #0]
 8019396:	e7f7      	b.n	8019388 <__sfp+0x18>
 8019398:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801939c:	b9d5      	cbnz	r5, 80193d4 <__sfp+0x64>
 801939e:	4b16      	ldr	r3, [pc, #88]	; (80193f8 <__sfp+0x88>)
 80193a0:	60e3      	str	r3, [r4, #12]
 80193a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80193a6:	6665      	str	r5, [r4, #100]	; 0x64
 80193a8:	f000 f859 	bl	801945e <__retarget_lock_init_recursive>
 80193ac:	f7ff ff96 	bl	80192dc <__sfp_lock_release>
 80193b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80193b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80193b8:	6025      	str	r5, [r4, #0]
 80193ba:	61a5      	str	r5, [r4, #24]
 80193bc:	2208      	movs	r2, #8
 80193be:	4629      	mov	r1, r5
 80193c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80193c4:	f7ff fcbc 	bl	8018d40 <memset>
 80193c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80193cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80193d0:	4620      	mov	r0, r4
 80193d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193d4:	3468      	adds	r4, #104	; 0x68
 80193d6:	e7d9      	b.n	801938c <__sfp+0x1c>
 80193d8:	2104      	movs	r1, #4
 80193da:	4638      	mov	r0, r7
 80193dc:	f7ff ff62 	bl	80192a4 <__sfmoreglue>
 80193e0:	4604      	mov	r4, r0
 80193e2:	6030      	str	r0, [r6, #0]
 80193e4:	2800      	cmp	r0, #0
 80193e6:	d1d5      	bne.n	8019394 <__sfp+0x24>
 80193e8:	f7ff ff78 	bl	80192dc <__sfp_lock_release>
 80193ec:	230c      	movs	r3, #12
 80193ee:	603b      	str	r3, [r7, #0]
 80193f0:	e7ee      	b.n	80193d0 <__sfp+0x60>
 80193f2:	bf00      	nop
 80193f4:	0801d7c4 	.word	0x0801d7c4
 80193f8:	ffff0001 	.word	0xffff0001

080193fc <fiprintf>:
 80193fc:	b40e      	push	{r1, r2, r3}
 80193fe:	b503      	push	{r0, r1, lr}
 8019400:	4601      	mov	r1, r0
 8019402:	ab03      	add	r3, sp, #12
 8019404:	4805      	ldr	r0, [pc, #20]	; (801941c <fiprintf+0x20>)
 8019406:	f853 2b04 	ldr.w	r2, [r3], #4
 801940a:	6800      	ldr	r0, [r0, #0]
 801940c:	9301      	str	r3, [sp, #4]
 801940e:	f000 f9a1 	bl	8019754 <_vfiprintf_r>
 8019412:	b002      	add	sp, #8
 8019414:	f85d eb04 	ldr.w	lr, [sp], #4
 8019418:	b003      	add	sp, #12
 801941a:	4770      	bx	lr
 801941c:	20000030 	.word	0x20000030

08019420 <_fwalk_reent>:
 8019420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019424:	4606      	mov	r6, r0
 8019426:	4688      	mov	r8, r1
 8019428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801942c:	2700      	movs	r7, #0
 801942e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019432:	f1b9 0901 	subs.w	r9, r9, #1
 8019436:	d505      	bpl.n	8019444 <_fwalk_reent+0x24>
 8019438:	6824      	ldr	r4, [r4, #0]
 801943a:	2c00      	cmp	r4, #0
 801943c:	d1f7      	bne.n	801942e <_fwalk_reent+0xe>
 801943e:	4638      	mov	r0, r7
 8019440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019444:	89ab      	ldrh	r3, [r5, #12]
 8019446:	2b01      	cmp	r3, #1
 8019448:	d907      	bls.n	801945a <_fwalk_reent+0x3a>
 801944a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801944e:	3301      	adds	r3, #1
 8019450:	d003      	beq.n	801945a <_fwalk_reent+0x3a>
 8019452:	4629      	mov	r1, r5
 8019454:	4630      	mov	r0, r6
 8019456:	47c0      	blx	r8
 8019458:	4307      	orrs	r7, r0
 801945a:	3568      	adds	r5, #104	; 0x68
 801945c:	e7e9      	b.n	8019432 <_fwalk_reent+0x12>

0801945e <__retarget_lock_init_recursive>:
 801945e:	4770      	bx	lr

08019460 <__retarget_lock_acquire_recursive>:
 8019460:	4770      	bx	lr

08019462 <__retarget_lock_release_recursive>:
 8019462:	4770      	bx	lr

08019464 <__swhatbuf_r>:
 8019464:	b570      	push	{r4, r5, r6, lr}
 8019466:	460e      	mov	r6, r1
 8019468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801946c:	2900      	cmp	r1, #0
 801946e:	b096      	sub	sp, #88	; 0x58
 8019470:	4614      	mov	r4, r2
 8019472:	461d      	mov	r5, r3
 8019474:	da08      	bge.n	8019488 <__swhatbuf_r+0x24>
 8019476:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801947a:	2200      	movs	r2, #0
 801947c:	602a      	str	r2, [r5, #0]
 801947e:	061a      	lsls	r2, r3, #24
 8019480:	d410      	bmi.n	80194a4 <__swhatbuf_r+0x40>
 8019482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019486:	e00e      	b.n	80194a6 <__swhatbuf_r+0x42>
 8019488:	466a      	mov	r2, sp
 801948a:	f000 fca5 	bl	8019dd8 <_fstat_r>
 801948e:	2800      	cmp	r0, #0
 8019490:	dbf1      	blt.n	8019476 <__swhatbuf_r+0x12>
 8019492:	9a01      	ldr	r2, [sp, #4]
 8019494:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019498:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801949c:	425a      	negs	r2, r3
 801949e:	415a      	adcs	r2, r3
 80194a0:	602a      	str	r2, [r5, #0]
 80194a2:	e7ee      	b.n	8019482 <__swhatbuf_r+0x1e>
 80194a4:	2340      	movs	r3, #64	; 0x40
 80194a6:	2000      	movs	r0, #0
 80194a8:	6023      	str	r3, [r4, #0]
 80194aa:	b016      	add	sp, #88	; 0x58
 80194ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080194b0 <__smakebuf_r>:
 80194b0:	898b      	ldrh	r3, [r1, #12]
 80194b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80194b4:	079d      	lsls	r5, r3, #30
 80194b6:	4606      	mov	r6, r0
 80194b8:	460c      	mov	r4, r1
 80194ba:	d507      	bpl.n	80194cc <__smakebuf_r+0x1c>
 80194bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80194c0:	6023      	str	r3, [r4, #0]
 80194c2:	6123      	str	r3, [r4, #16]
 80194c4:	2301      	movs	r3, #1
 80194c6:	6163      	str	r3, [r4, #20]
 80194c8:	b002      	add	sp, #8
 80194ca:	bd70      	pop	{r4, r5, r6, pc}
 80194cc:	ab01      	add	r3, sp, #4
 80194ce:	466a      	mov	r2, sp
 80194d0:	f7ff ffc8 	bl	8019464 <__swhatbuf_r>
 80194d4:	9900      	ldr	r1, [sp, #0]
 80194d6:	4605      	mov	r5, r0
 80194d8:	4630      	mov	r0, r6
 80194da:	f000 f89d 	bl	8019618 <_malloc_r>
 80194de:	b948      	cbnz	r0, 80194f4 <__smakebuf_r+0x44>
 80194e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194e4:	059a      	lsls	r2, r3, #22
 80194e6:	d4ef      	bmi.n	80194c8 <__smakebuf_r+0x18>
 80194e8:	f023 0303 	bic.w	r3, r3, #3
 80194ec:	f043 0302 	orr.w	r3, r3, #2
 80194f0:	81a3      	strh	r3, [r4, #12]
 80194f2:	e7e3      	b.n	80194bc <__smakebuf_r+0xc>
 80194f4:	4b0d      	ldr	r3, [pc, #52]	; (801952c <__smakebuf_r+0x7c>)
 80194f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80194f8:	89a3      	ldrh	r3, [r4, #12]
 80194fa:	6020      	str	r0, [r4, #0]
 80194fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019500:	81a3      	strh	r3, [r4, #12]
 8019502:	9b00      	ldr	r3, [sp, #0]
 8019504:	6163      	str	r3, [r4, #20]
 8019506:	9b01      	ldr	r3, [sp, #4]
 8019508:	6120      	str	r0, [r4, #16]
 801950a:	b15b      	cbz	r3, 8019524 <__smakebuf_r+0x74>
 801950c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019510:	4630      	mov	r0, r6
 8019512:	f000 fc73 	bl	8019dfc <_isatty_r>
 8019516:	b128      	cbz	r0, 8019524 <__smakebuf_r+0x74>
 8019518:	89a3      	ldrh	r3, [r4, #12]
 801951a:	f023 0303 	bic.w	r3, r3, #3
 801951e:	f043 0301 	orr.w	r3, r3, #1
 8019522:	81a3      	strh	r3, [r4, #12]
 8019524:	89a0      	ldrh	r0, [r4, #12]
 8019526:	4305      	orrs	r5, r0
 8019528:	81a5      	strh	r5, [r4, #12]
 801952a:	e7cd      	b.n	80194c8 <__smakebuf_r+0x18>
 801952c:	08019299 	.word	0x08019299

08019530 <malloc>:
 8019530:	4b02      	ldr	r3, [pc, #8]	; (801953c <malloc+0xc>)
 8019532:	4601      	mov	r1, r0
 8019534:	6818      	ldr	r0, [r3, #0]
 8019536:	f000 b86f 	b.w	8019618 <_malloc_r>
 801953a:	bf00      	nop
 801953c:	20000030 	.word	0x20000030

08019540 <_free_r>:
 8019540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019542:	2900      	cmp	r1, #0
 8019544:	d044      	beq.n	80195d0 <_free_r+0x90>
 8019546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801954a:	9001      	str	r0, [sp, #4]
 801954c:	2b00      	cmp	r3, #0
 801954e:	f1a1 0404 	sub.w	r4, r1, #4
 8019552:	bfb8      	it	lt
 8019554:	18e4      	addlt	r4, r4, r3
 8019556:	f000 fc73 	bl	8019e40 <__malloc_lock>
 801955a:	4a1e      	ldr	r2, [pc, #120]	; (80195d4 <_free_r+0x94>)
 801955c:	9801      	ldr	r0, [sp, #4]
 801955e:	6813      	ldr	r3, [r2, #0]
 8019560:	b933      	cbnz	r3, 8019570 <_free_r+0x30>
 8019562:	6063      	str	r3, [r4, #4]
 8019564:	6014      	str	r4, [r2, #0]
 8019566:	b003      	add	sp, #12
 8019568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801956c:	f000 bc6e 	b.w	8019e4c <__malloc_unlock>
 8019570:	42a3      	cmp	r3, r4
 8019572:	d908      	bls.n	8019586 <_free_r+0x46>
 8019574:	6825      	ldr	r5, [r4, #0]
 8019576:	1961      	adds	r1, r4, r5
 8019578:	428b      	cmp	r3, r1
 801957a:	bf01      	itttt	eq
 801957c:	6819      	ldreq	r1, [r3, #0]
 801957e:	685b      	ldreq	r3, [r3, #4]
 8019580:	1949      	addeq	r1, r1, r5
 8019582:	6021      	streq	r1, [r4, #0]
 8019584:	e7ed      	b.n	8019562 <_free_r+0x22>
 8019586:	461a      	mov	r2, r3
 8019588:	685b      	ldr	r3, [r3, #4]
 801958a:	b10b      	cbz	r3, 8019590 <_free_r+0x50>
 801958c:	42a3      	cmp	r3, r4
 801958e:	d9fa      	bls.n	8019586 <_free_r+0x46>
 8019590:	6811      	ldr	r1, [r2, #0]
 8019592:	1855      	adds	r5, r2, r1
 8019594:	42a5      	cmp	r5, r4
 8019596:	d10b      	bne.n	80195b0 <_free_r+0x70>
 8019598:	6824      	ldr	r4, [r4, #0]
 801959a:	4421      	add	r1, r4
 801959c:	1854      	adds	r4, r2, r1
 801959e:	42a3      	cmp	r3, r4
 80195a0:	6011      	str	r1, [r2, #0]
 80195a2:	d1e0      	bne.n	8019566 <_free_r+0x26>
 80195a4:	681c      	ldr	r4, [r3, #0]
 80195a6:	685b      	ldr	r3, [r3, #4]
 80195a8:	6053      	str	r3, [r2, #4]
 80195aa:	4421      	add	r1, r4
 80195ac:	6011      	str	r1, [r2, #0]
 80195ae:	e7da      	b.n	8019566 <_free_r+0x26>
 80195b0:	d902      	bls.n	80195b8 <_free_r+0x78>
 80195b2:	230c      	movs	r3, #12
 80195b4:	6003      	str	r3, [r0, #0]
 80195b6:	e7d6      	b.n	8019566 <_free_r+0x26>
 80195b8:	6825      	ldr	r5, [r4, #0]
 80195ba:	1961      	adds	r1, r4, r5
 80195bc:	428b      	cmp	r3, r1
 80195be:	bf04      	itt	eq
 80195c0:	6819      	ldreq	r1, [r3, #0]
 80195c2:	685b      	ldreq	r3, [r3, #4]
 80195c4:	6063      	str	r3, [r4, #4]
 80195c6:	bf04      	itt	eq
 80195c8:	1949      	addeq	r1, r1, r5
 80195ca:	6021      	streq	r1, [r4, #0]
 80195cc:	6054      	str	r4, [r2, #4]
 80195ce:	e7ca      	b.n	8019566 <_free_r+0x26>
 80195d0:	b003      	add	sp, #12
 80195d2:	bd30      	pop	{r4, r5, pc}
 80195d4:	200113a4 	.word	0x200113a4

080195d8 <sbrk_aligned>:
 80195d8:	b570      	push	{r4, r5, r6, lr}
 80195da:	4e0e      	ldr	r6, [pc, #56]	; (8019614 <sbrk_aligned+0x3c>)
 80195dc:	460c      	mov	r4, r1
 80195de:	6831      	ldr	r1, [r6, #0]
 80195e0:	4605      	mov	r5, r0
 80195e2:	b911      	cbnz	r1, 80195ea <sbrk_aligned+0x12>
 80195e4:	f000 fb7a 	bl	8019cdc <_sbrk_r>
 80195e8:	6030      	str	r0, [r6, #0]
 80195ea:	4621      	mov	r1, r4
 80195ec:	4628      	mov	r0, r5
 80195ee:	f000 fb75 	bl	8019cdc <_sbrk_r>
 80195f2:	1c43      	adds	r3, r0, #1
 80195f4:	d00a      	beq.n	801960c <sbrk_aligned+0x34>
 80195f6:	1cc4      	adds	r4, r0, #3
 80195f8:	f024 0403 	bic.w	r4, r4, #3
 80195fc:	42a0      	cmp	r0, r4
 80195fe:	d007      	beq.n	8019610 <sbrk_aligned+0x38>
 8019600:	1a21      	subs	r1, r4, r0
 8019602:	4628      	mov	r0, r5
 8019604:	f000 fb6a 	bl	8019cdc <_sbrk_r>
 8019608:	3001      	adds	r0, #1
 801960a:	d101      	bne.n	8019610 <sbrk_aligned+0x38>
 801960c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019610:	4620      	mov	r0, r4
 8019612:	bd70      	pop	{r4, r5, r6, pc}
 8019614:	200113a8 	.word	0x200113a8

08019618 <_malloc_r>:
 8019618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801961c:	1ccd      	adds	r5, r1, #3
 801961e:	f025 0503 	bic.w	r5, r5, #3
 8019622:	3508      	adds	r5, #8
 8019624:	2d0c      	cmp	r5, #12
 8019626:	bf38      	it	cc
 8019628:	250c      	movcc	r5, #12
 801962a:	2d00      	cmp	r5, #0
 801962c:	4607      	mov	r7, r0
 801962e:	db01      	blt.n	8019634 <_malloc_r+0x1c>
 8019630:	42a9      	cmp	r1, r5
 8019632:	d905      	bls.n	8019640 <_malloc_r+0x28>
 8019634:	230c      	movs	r3, #12
 8019636:	603b      	str	r3, [r7, #0]
 8019638:	2600      	movs	r6, #0
 801963a:	4630      	mov	r0, r6
 801963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019640:	4e2e      	ldr	r6, [pc, #184]	; (80196fc <_malloc_r+0xe4>)
 8019642:	f000 fbfd 	bl	8019e40 <__malloc_lock>
 8019646:	6833      	ldr	r3, [r6, #0]
 8019648:	461c      	mov	r4, r3
 801964a:	bb34      	cbnz	r4, 801969a <_malloc_r+0x82>
 801964c:	4629      	mov	r1, r5
 801964e:	4638      	mov	r0, r7
 8019650:	f7ff ffc2 	bl	80195d8 <sbrk_aligned>
 8019654:	1c43      	adds	r3, r0, #1
 8019656:	4604      	mov	r4, r0
 8019658:	d14d      	bne.n	80196f6 <_malloc_r+0xde>
 801965a:	6834      	ldr	r4, [r6, #0]
 801965c:	4626      	mov	r6, r4
 801965e:	2e00      	cmp	r6, #0
 8019660:	d140      	bne.n	80196e4 <_malloc_r+0xcc>
 8019662:	6823      	ldr	r3, [r4, #0]
 8019664:	4631      	mov	r1, r6
 8019666:	4638      	mov	r0, r7
 8019668:	eb04 0803 	add.w	r8, r4, r3
 801966c:	f000 fb36 	bl	8019cdc <_sbrk_r>
 8019670:	4580      	cmp	r8, r0
 8019672:	d13a      	bne.n	80196ea <_malloc_r+0xd2>
 8019674:	6821      	ldr	r1, [r4, #0]
 8019676:	3503      	adds	r5, #3
 8019678:	1a6d      	subs	r5, r5, r1
 801967a:	f025 0503 	bic.w	r5, r5, #3
 801967e:	3508      	adds	r5, #8
 8019680:	2d0c      	cmp	r5, #12
 8019682:	bf38      	it	cc
 8019684:	250c      	movcc	r5, #12
 8019686:	4629      	mov	r1, r5
 8019688:	4638      	mov	r0, r7
 801968a:	f7ff ffa5 	bl	80195d8 <sbrk_aligned>
 801968e:	3001      	adds	r0, #1
 8019690:	d02b      	beq.n	80196ea <_malloc_r+0xd2>
 8019692:	6823      	ldr	r3, [r4, #0]
 8019694:	442b      	add	r3, r5
 8019696:	6023      	str	r3, [r4, #0]
 8019698:	e00e      	b.n	80196b8 <_malloc_r+0xa0>
 801969a:	6822      	ldr	r2, [r4, #0]
 801969c:	1b52      	subs	r2, r2, r5
 801969e:	d41e      	bmi.n	80196de <_malloc_r+0xc6>
 80196a0:	2a0b      	cmp	r2, #11
 80196a2:	d916      	bls.n	80196d2 <_malloc_r+0xba>
 80196a4:	1961      	adds	r1, r4, r5
 80196a6:	42a3      	cmp	r3, r4
 80196a8:	6025      	str	r5, [r4, #0]
 80196aa:	bf18      	it	ne
 80196ac:	6059      	strne	r1, [r3, #4]
 80196ae:	6863      	ldr	r3, [r4, #4]
 80196b0:	bf08      	it	eq
 80196b2:	6031      	streq	r1, [r6, #0]
 80196b4:	5162      	str	r2, [r4, r5]
 80196b6:	604b      	str	r3, [r1, #4]
 80196b8:	4638      	mov	r0, r7
 80196ba:	f104 060b 	add.w	r6, r4, #11
 80196be:	f000 fbc5 	bl	8019e4c <__malloc_unlock>
 80196c2:	f026 0607 	bic.w	r6, r6, #7
 80196c6:	1d23      	adds	r3, r4, #4
 80196c8:	1af2      	subs	r2, r6, r3
 80196ca:	d0b6      	beq.n	801963a <_malloc_r+0x22>
 80196cc:	1b9b      	subs	r3, r3, r6
 80196ce:	50a3      	str	r3, [r4, r2]
 80196d0:	e7b3      	b.n	801963a <_malloc_r+0x22>
 80196d2:	6862      	ldr	r2, [r4, #4]
 80196d4:	42a3      	cmp	r3, r4
 80196d6:	bf0c      	ite	eq
 80196d8:	6032      	streq	r2, [r6, #0]
 80196da:	605a      	strne	r2, [r3, #4]
 80196dc:	e7ec      	b.n	80196b8 <_malloc_r+0xa0>
 80196de:	4623      	mov	r3, r4
 80196e0:	6864      	ldr	r4, [r4, #4]
 80196e2:	e7b2      	b.n	801964a <_malloc_r+0x32>
 80196e4:	4634      	mov	r4, r6
 80196e6:	6876      	ldr	r6, [r6, #4]
 80196e8:	e7b9      	b.n	801965e <_malloc_r+0x46>
 80196ea:	230c      	movs	r3, #12
 80196ec:	603b      	str	r3, [r7, #0]
 80196ee:	4638      	mov	r0, r7
 80196f0:	f000 fbac 	bl	8019e4c <__malloc_unlock>
 80196f4:	e7a1      	b.n	801963a <_malloc_r+0x22>
 80196f6:	6025      	str	r5, [r4, #0]
 80196f8:	e7de      	b.n	80196b8 <_malloc_r+0xa0>
 80196fa:	bf00      	nop
 80196fc:	200113a4 	.word	0x200113a4

08019700 <__sfputc_r>:
 8019700:	6893      	ldr	r3, [r2, #8]
 8019702:	3b01      	subs	r3, #1
 8019704:	2b00      	cmp	r3, #0
 8019706:	b410      	push	{r4}
 8019708:	6093      	str	r3, [r2, #8]
 801970a:	da08      	bge.n	801971e <__sfputc_r+0x1e>
 801970c:	6994      	ldr	r4, [r2, #24]
 801970e:	42a3      	cmp	r3, r4
 8019710:	db01      	blt.n	8019716 <__sfputc_r+0x16>
 8019712:	290a      	cmp	r1, #10
 8019714:	d103      	bne.n	801971e <__sfputc_r+0x1e>
 8019716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801971a:	f7ff bbf9 	b.w	8018f10 <__swbuf_r>
 801971e:	6813      	ldr	r3, [r2, #0]
 8019720:	1c58      	adds	r0, r3, #1
 8019722:	6010      	str	r0, [r2, #0]
 8019724:	7019      	strb	r1, [r3, #0]
 8019726:	4608      	mov	r0, r1
 8019728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801972c:	4770      	bx	lr

0801972e <__sfputs_r>:
 801972e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019730:	4606      	mov	r6, r0
 8019732:	460f      	mov	r7, r1
 8019734:	4614      	mov	r4, r2
 8019736:	18d5      	adds	r5, r2, r3
 8019738:	42ac      	cmp	r4, r5
 801973a:	d101      	bne.n	8019740 <__sfputs_r+0x12>
 801973c:	2000      	movs	r0, #0
 801973e:	e007      	b.n	8019750 <__sfputs_r+0x22>
 8019740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019744:	463a      	mov	r2, r7
 8019746:	4630      	mov	r0, r6
 8019748:	f7ff ffda 	bl	8019700 <__sfputc_r>
 801974c:	1c43      	adds	r3, r0, #1
 801974e:	d1f3      	bne.n	8019738 <__sfputs_r+0xa>
 8019750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019754 <_vfiprintf_r>:
 8019754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019758:	460d      	mov	r5, r1
 801975a:	b09d      	sub	sp, #116	; 0x74
 801975c:	4614      	mov	r4, r2
 801975e:	4698      	mov	r8, r3
 8019760:	4606      	mov	r6, r0
 8019762:	b118      	cbz	r0, 801976c <_vfiprintf_r+0x18>
 8019764:	6983      	ldr	r3, [r0, #24]
 8019766:	b90b      	cbnz	r3, 801976c <_vfiprintf_r+0x18>
 8019768:	f7ff fdca 	bl	8019300 <__sinit>
 801976c:	4b89      	ldr	r3, [pc, #548]	; (8019994 <_vfiprintf_r+0x240>)
 801976e:	429d      	cmp	r5, r3
 8019770:	d11b      	bne.n	80197aa <_vfiprintf_r+0x56>
 8019772:	6875      	ldr	r5, [r6, #4]
 8019774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019776:	07d9      	lsls	r1, r3, #31
 8019778:	d405      	bmi.n	8019786 <_vfiprintf_r+0x32>
 801977a:	89ab      	ldrh	r3, [r5, #12]
 801977c:	059a      	lsls	r2, r3, #22
 801977e:	d402      	bmi.n	8019786 <_vfiprintf_r+0x32>
 8019780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019782:	f7ff fe6d 	bl	8019460 <__retarget_lock_acquire_recursive>
 8019786:	89ab      	ldrh	r3, [r5, #12]
 8019788:	071b      	lsls	r3, r3, #28
 801978a:	d501      	bpl.n	8019790 <_vfiprintf_r+0x3c>
 801978c:	692b      	ldr	r3, [r5, #16]
 801978e:	b9eb      	cbnz	r3, 80197cc <_vfiprintf_r+0x78>
 8019790:	4629      	mov	r1, r5
 8019792:	4630      	mov	r0, r6
 8019794:	f7ff fc0e 	bl	8018fb4 <__swsetup_r>
 8019798:	b1c0      	cbz	r0, 80197cc <_vfiprintf_r+0x78>
 801979a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801979c:	07dc      	lsls	r4, r3, #31
 801979e:	d50e      	bpl.n	80197be <_vfiprintf_r+0x6a>
 80197a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80197a4:	b01d      	add	sp, #116	; 0x74
 80197a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197aa:	4b7b      	ldr	r3, [pc, #492]	; (8019998 <_vfiprintf_r+0x244>)
 80197ac:	429d      	cmp	r5, r3
 80197ae:	d101      	bne.n	80197b4 <_vfiprintf_r+0x60>
 80197b0:	68b5      	ldr	r5, [r6, #8]
 80197b2:	e7df      	b.n	8019774 <_vfiprintf_r+0x20>
 80197b4:	4b79      	ldr	r3, [pc, #484]	; (801999c <_vfiprintf_r+0x248>)
 80197b6:	429d      	cmp	r5, r3
 80197b8:	bf08      	it	eq
 80197ba:	68f5      	ldreq	r5, [r6, #12]
 80197bc:	e7da      	b.n	8019774 <_vfiprintf_r+0x20>
 80197be:	89ab      	ldrh	r3, [r5, #12]
 80197c0:	0598      	lsls	r0, r3, #22
 80197c2:	d4ed      	bmi.n	80197a0 <_vfiprintf_r+0x4c>
 80197c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197c6:	f7ff fe4c 	bl	8019462 <__retarget_lock_release_recursive>
 80197ca:	e7e9      	b.n	80197a0 <_vfiprintf_r+0x4c>
 80197cc:	2300      	movs	r3, #0
 80197ce:	9309      	str	r3, [sp, #36]	; 0x24
 80197d0:	2320      	movs	r3, #32
 80197d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80197da:	2330      	movs	r3, #48	; 0x30
 80197dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80199a0 <_vfiprintf_r+0x24c>
 80197e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197e4:	f04f 0901 	mov.w	r9, #1
 80197e8:	4623      	mov	r3, r4
 80197ea:	469a      	mov	sl, r3
 80197ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197f0:	b10a      	cbz	r2, 80197f6 <_vfiprintf_r+0xa2>
 80197f2:	2a25      	cmp	r2, #37	; 0x25
 80197f4:	d1f9      	bne.n	80197ea <_vfiprintf_r+0x96>
 80197f6:	ebba 0b04 	subs.w	fp, sl, r4
 80197fa:	d00b      	beq.n	8019814 <_vfiprintf_r+0xc0>
 80197fc:	465b      	mov	r3, fp
 80197fe:	4622      	mov	r2, r4
 8019800:	4629      	mov	r1, r5
 8019802:	4630      	mov	r0, r6
 8019804:	f7ff ff93 	bl	801972e <__sfputs_r>
 8019808:	3001      	adds	r0, #1
 801980a:	f000 80aa 	beq.w	8019962 <_vfiprintf_r+0x20e>
 801980e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019810:	445a      	add	r2, fp
 8019812:	9209      	str	r2, [sp, #36]	; 0x24
 8019814:	f89a 3000 	ldrb.w	r3, [sl]
 8019818:	2b00      	cmp	r3, #0
 801981a:	f000 80a2 	beq.w	8019962 <_vfiprintf_r+0x20e>
 801981e:	2300      	movs	r3, #0
 8019820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019828:	f10a 0a01 	add.w	sl, sl, #1
 801982c:	9304      	str	r3, [sp, #16]
 801982e:	9307      	str	r3, [sp, #28]
 8019830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019834:	931a      	str	r3, [sp, #104]	; 0x68
 8019836:	4654      	mov	r4, sl
 8019838:	2205      	movs	r2, #5
 801983a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801983e:	4858      	ldr	r0, [pc, #352]	; (80199a0 <_vfiprintf_r+0x24c>)
 8019840:	f7e6 fd16 	bl	8000270 <memchr>
 8019844:	9a04      	ldr	r2, [sp, #16]
 8019846:	b9d8      	cbnz	r0, 8019880 <_vfiprintf_r+0x12c>
 8019848:	06d1      	lsls	r1, r2, #27
 801984a:	bf44      	itt	mi
 801984c:	2320      	movmi	r3, #32
 801984e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019852:	0713      	lsls	r3, r2, #28
 8019854:	bf44      	itt	mi
 8019856:	232b      	movmi	r3, #43	; 0x2b
 8019858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801985c:	f89a 3000 	ldrb.w	r3, [sl]
 8019860:	2b2a      	cmp	r3, #42	; 0x2a
 8019862:	d015      	beq.n	8019890 <_vfiprintf_r+0x13c>
 8019864:	9a07      	ldr	r2, [sp, #28]
 8019866:	4654      	mov	r4, sl
 8019868:	2000      	movs	r0, #0
 801986a:	f04f 0c0a 	mov.w	ip, #10
 801986e:	4621      	mov	r1, r4
 8019870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019874:	3b30      	subs	r3, #48	; 0x30
 8019876:	2b09      	cmp	r3, #9
 8019878:	d94e      	bls.n	8019918 <_vfiprintf_r+0x1c4>
 801987a:	b1b0      	cbz	r0, 80198aa <_vfiprintf_r+0x156>
 801987c:	9207      	str	r2, [sp, #28]
 801987e:	e014      	b.n	80198aa <_vfiprintf_r+0x156>
 8019880:	eba0 0308 	sub.w	r3, r0, r8
 8019884:	fa09 f303 	lsl.w	r3, r9, r3
 8019888:	4313      	orrs	r3, r2
 801988a:	9304      	str	r3, [sp, #16]
 801988c:	46a2      	mov	sl, r4
 801988e:	e7d2      	b.n	8019836 <_vfiprintf_r+0xe2>
 8019890:	9b03      	ldr	r3, [sp, #12]
 8019892:	1d19      	adds	r1, r3, #4
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	9103      	str	r1, [sp, #12]
 8019898:	2b00      	cmp	r3, #0
 801989a:	bfbb      	ittet	lt
 801989c:	425b      	neglt	r3, r3
 801989e:	f042 0202 	orrlt.w	r2, r2, #2
 80198a2:	9307      	strge	r3, [sp, #28]
 80198a4:	9307      	strlt	r3, [sp, #28]
 80198a6:	bfb8      	it	lt
 80198a8:	9204      	strlt	r2, [sp, #16]
 80198aa:	7823      	ldrb	r3, [r4, #0]
 80198ac:	2b2e      	cmp	r3, #46	; 0x2e
 80198ae:	d10c      	bne.n	80198ca <_vfiprintf_r+0x176>
 80198b0:	7863      	ldrb	r3, [r4, #1]
 80198b2:	2b2a      	cmp	r3, #42	; 0x2a
 80198b4:	d135      	bne.n	8019922 <_vfiprintf_r+0x1ce>
 80198b6:	9b03      	ldr	r3, [sp, #12]
 80198b8:	1d1a      	adds	r2, r3, #4
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	9203      	str	r2, [sp, #12]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	bfb8      	it	lt
 80198c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80198c6:	3402      	adds	r4, #2
 80198c8:	9305      	str	r3, [sp, #20]
 80198ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80199b0 <_vfiprintf_r+0x25c>
 80198ce:	7821      	ldrb	r1, [r4, #0]
 80198d0:	2203      	movs	r2, #3
 80198d2:	4650      	mov	r0, sl
 80198d4:	f7e6 fccc 	bl	8000270 <memchr>
 80198d8:	b140      	cbz	r0, 80198ec <_vfiprintf_r+0x198>
 80198da:	2340      	movs	r3, #64	; 0x40
 80198dc:	eba0 000a 	sub.w	r0, r0, sl
 80198e0:	fa03 f000 	lsl.w	r0, r3, r0
 80198e4:	9b04      	ldr	r3, [sp, #16]
 80198e6:	4303      	orrs	r3, r0
 80198e8:	3401      	adds	r4, #1
 80198ea:	9304      	str	r3, [sp, #16]
 80198ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198f0:	482c      	ldr	r0, [pc, #176]	; (80199a4 <_vfiprintf_r+0x250>)
 80198f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198f6:	2206      	movs	r2, #6
 80198f8:	f7e6 fcba 	bl	8000270 <memchr>
 80198fc:	2800      	cmp	r0, #0
 80198fe:	d03f      	beq.n	8019980 <_vfiprintf_r+0x22c>
 8019900:	4b29      	ldr	r3, [pc, #164]	; (80199a8 <_vfiprintf_r+0x254>)
 8019902:	bb1b      	cbnz	r3, 801994c <_vfiprintf_r+0x1f8>
 8019904:	9b03      	ldr	r3, [sp, #12]
 8019906:	3307      	adds	r3, #7
 8019908:	f023 0307 	bic.w	r3, r3, #7
 801990c:	3308      	adds	r3, #8
 801990e:	9303      	str	r3, [sp, #12]
 8019910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019912:	443b      	add	r3, r7
 8019914:	9309      	str	r3, [sp, #36]	; 0x24
 8019916:	e767      	b.n	80197e8 <_vfiprintf_r+0x94>
 8019918:	fb0c 3202 	mla	r2, ip, r2, r3
 801991c:	460c      	mov	r4, r1
 801991e:	2001      	movs	r0, #1
 8019920:	e7a5      	b.n	801986e <_vfiprintf_r+0x11a>
 8019922:	2300      	movs	r3, #0
 8019924:	3401      	adds	r4, #1
 8019926:	9305      	str	r3, [sp, #20]
 8019928:	4619      	mov	r1, r3
 801992a:	f04f 0c0a 	mov.w	ip, #10
 801992e:	4620      	mov	r0, r4
 8019930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019934:	3a30      	subs	r2, #48	; 0x30
 8019936:	2a09      	cmp	r2, #9
 8019938:	d903      	bls.n	8019942 <_vfiprintf_r+0x1ee>
 801993a:	2b00      	cmp	r3, #0
 801993c:	d0c5      	beq.n	80198ca <_vfiprintf_r+0x176>
 801993e:	9105      	str	r1, [sp, #20]
 8019940:	e7c3      	b.n	80198ca <_vfiprintf_r+0x176>
 8019942:	fb0c 2101 	mla	r1, ip, r1, r2
 8019946:	4604      	mov	r4, r0
 8019948:	2301      	movs	r3, #1
 801994a:	e7f0      	b.n	801992e <_vfiprintf_r+0x1da>
 801994c:	ab03      	add	r3, sp, #12
 801994e:	9300      	str	r3, [sp, #0]
 8019950:	462a      	mov	r2, r5
 8019952:	4b16      	ldr	r3, [pc, #88]	; (80199ac <_vfiprintf_r+0x258>)
 8019954:	a904      	add	r1, sp, #16
 8019956:	4630      	mov	r0, r6
 8019958:	f3af 8000 	nop.w
 801995c:	4607      	mov	r7, r0
 801995e:	1c78      	adds	r0, r7, #1
 8019960:	d1d6      	bne.n	8019910 <_vfiprintf_r+0x1bc>
 8019962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019964:	07d9      	lsls	r1, r3, #31
 8019966:	d405      	bmi.n	8019974 <_vfiprintf_r+0x220>
 8019968:	89ab      	ldrh	r3, [r5, #12]
 801996a:	059a      	lsls	r2, r3, #22
 801996c:	d402      	bmi.n	8019974 <_vfiprintf_r+0x220>
 801996e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019970:	f7ff fd77 	bl	8019462 <__retarget_lock_release_recursive>
 8019974:	89ab      	ldrh	r3, [r5, #12]
 8019976:	065b      	lsls	r3, r3, #25
 8019978:	f53f af12 	bmi.w	80197a0 <_vfiprintf_r+0x4c>
 801997c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801997e:	e711      	b.n	80197a4 <_vfiprintf_r+0x50>
 8019980:	ab03      	add	r3, sp, #12
 8019982:	9300      	str	r3, [sp, #0]
 8019984:	462a      	mov	r2, r5
 8019986:	4b09      	ldr	r3, [pc, #36]	; (80199ac <_vfiprintf_r+0x258>)
 8019988:	a904      	add	r1, sp, #16
 801998a:	4630      	mov	r0, r6
 801998c:	f000 f880 	bl	8019a90 <_printf_i>
 8019990:	e7e4      	b.n	801995c <_vfiprintf_r+0x208>
 8019992:	bf00      	nop
 8019994:	0801d898 	.word	0x0801d898
 8019998:	0801d8b8 	.word	0x0801d8b8
 801999c:	0801d878 	.word	0x0801d878
 80199a0:	0801d8d8 	.word	0x0801d8d8
 80199a4:	0801d8e2 	.word	0x0801d8e2
 80199a8:	00000000 	.word	0x00000000
 80199ac:	0801972f 	.word	0x0801972f
 80199b0:	0801d8de 	.word	0x0801d8de

080199b4 <_printf_common>:
 80199b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199b8:	4616      	mov	r6, r2
 80199ba:	4699      	mov	r9, r3
 80199bc:	688a      	ldr	r2, [r1, #8]
 80199be:	690b      	ldr	r3, [r1, #16]
 80199c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80199c4:	4293      	cmp	r3, r2
 80199c6:	bfb8      	it	lt
 80199c8:	4613      	movlt	r3, r2
 80199ca:	6033      	str	r3, [r6, #0]
 80199cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80199d0:	4607      	mov	r7, r0
 80199d2:	460c      	mov	r4, r1
 80199d4:	b10a      	cbz	r2, 80199da <_printf_common+0x26>
 80199d6:	3301      	adds	r3, #1
 80199d8:	6033      	str	r3, [r6, #0]
 80199da:	6823      	ldr	r3, [r4, #0]
 80199dc:	0699      	lsls	r1, r3, #26
 80199de:	bf42      	ittt	mi
 80199e0:	6833      	ldrmi	r3, [r6, #0]
 80199e2:	3302      	addmi	r3, #2
 80199e4:	6033      	strmi	r3, [r6, #0]
 80199e6:	6825      	ldr	r5, [r4, #0]
 80199e8:	f015 0506 	ands.w	r5, r5, #6
 80199ec:	d106      	bne.n	80199fc <_printf_common+0x48>
 80199ee:	f104 0a19 	add.w	sl, r4, #25
 80199f2:	68e3      	ldr	r3, [r4, #12]
 80199f4:	6832      	ldr	r2, [r6, #0]
 80199f6:	1a9b      	subs	r3, r3, r2
 80199f8:	42ab      	cmp	r3, r5
 80199fa:	dc26      	bgt.n	8019a4a <_printf_common+0x96>
 80199fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019a00:	1e13      	subs	r3, r2, #0
 8019a02:	6822      	ldr	r2, [r4, #0]
 8019a04:	bf18      	it	ne
 8019a06:	2301      	movne	r3, #1
 8019a08:	0692      	lsls	r2, r2, #26
 8019a0a:	d42b      	bmi.n	8019a64 <_printf_common+0xb0>
 8019a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a10:	4649      	mov	r1, r9
 8019a12:	4638      	mov	r0, r7
 8019a14:	47c0      	blx	r8
 8019a16:	3001      	adds	r0, #1
 8019a18:	d01e      	beq.n	8019a58 <_printf_common+0xa4>
 8019a1a:	6823      	ldr	r3, [r4, #0]
 8019a1c:	68e5      	ldr	r5, [r4, #12]
 8019a1e:	6832      	ldr	r2, [r6, #0]
 8019a20:	f003 0306 	and.w	r3, r3, #6
 8019a24:	2b04      	cmp	r3, #4
 8019a26:	bf08      	it	eq
 8019a28:	1aad      	subeq	r5, r5, r2
 8019a2a:	68a3      	ldr	r3, [r4, #8]
 8019a2c:	6922      	ldr	r2, [r4, #16]
 8019a2e:	bf0c      	ite	eq
 8019a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a34:	2500      	movne	r5, #0
 8019a36:	4293      	cmp	r3, r2
 8019a38:	bfc4      	itt	gt
 8019a3a:	1a9b      	subgt	r3, r3, r2
 8019a3c:	18ed      	addgt	r5, r5, r3
 8019a3e:	2600      	movs	r6, #0
 8019a40:	341a      	adds	r4, #26
 8019a42:	42b5      	cmp	r5, r6
 8019a44:	d11a      	bne.n	8019a7c <_printf_common+0xc8>
 8019a46:	2000      	movs	r0, #0
 8019a48:	e008      	b.n	8019a5c <_printf_common+0xa8>
 8019a4a:	2301      	movs	r3, #1
 8019a4c:	4652      	mov	r2, sl
 8019a4e:	4649      	mov	r1, r9
 8019a50:	4638      	mov	r0, r7
 8019a52:	47c0      	blx	r8
 8019a54:	3001      	adds	r0, #1
 8019a56:	d103      	bne.n	8019a60 <_printf_common+0xac>
 8019a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a60:	3501      	adds	r5, #1
 8019a62:	e7c6      	b.n	80199f2 <_printf_common+0x3e>
 8019a64:	18e1      	adds	r1, r4, r3
 8019a66:	1c5a      	adds	r2, r3, #1
 8019a68:	2030      	movs	r0, #48	; 0x30
 8019a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a6e:	4422      	add	r2, r4
 8019a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a78:	3302      	adds	r3, #2
 8019a7a:	e7c7      	b.n	8019a0c <_printf_common+0x58>
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	4622      	mov	r2, r4
 8019a80:	4649      	mov	r1, r9
 8019a82:	4638      	mov	r0, r7
 8019a84:	47c0      	blx	r8
 8019a86:	3001      	adds	r0, #1
 8019a88:	d0e6      	beq.n	8019a58 <_printf_common+0xa4>
 8019a8a:	3601      	adds	r6, #1
 8019a8c:	e7d9      	b.n	8019a42 <_printf_common+0x8e>
	...

08019a90 <_printf_i>:
 8019a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a94:	7e0f      	ldrb	r7, [r1, #24]
 8019a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019a98:	2f78      	cmp	r7, #120	; 0x78
 8019a9a:	4691      	mov	r9, r2
 8019a9c:	4680      	mov	r8, r0
 8019a9e:	460c      	mov	r4, r1
 8019aa0:	469a      	mov	sl, r3
 8019aa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019aa6:	d807      	bhi.n	8019ab8 <_printf_i+0x28>
 8019aa8:	2f62      	cmp	r7, #98	; 0x62
 8019aaa:	d80a      	bhi.n	8019ac2 <_printf_i+0x32>
 8019aac:	2f00      	cmp	r7, #0
 8019aae:	f000 80d8 	beq.w	8019c62 <_printf_i+0x1d2>
 8019ab2:	2f58      	cmp	r7, #88	; 0x58
 8019ab4:	f000 80a3 	beq.w	8019bfe <_printf_i+0x16e>
 8019ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ac0:	e03a      	b.n	8019b38 <_printf_i+0xa8>
 8019ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019ac6:	2b15      	cmp	r3, #21
 8019ac8:	d8f6      	bhi.n	8019ab8 <_printf_i+0x28>
 8019aca:	a101      	add	r1, pc, #4	; (adr r1, 8019ad0 <_printf_i+0x40>)
 8019acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ad0:	08019b29 	.word	0x08019b29
 8019ad4:	08019b3d 	.word	0x08019b3d
 8019ad8:	08019ab9 	.word	0x08019ab9
 8019adc:	08019ab9 	.word	0x08019ab9
 8019ae0:	08019ab9 	.word	0x08019ab9
 8019ae4:	08019ab9 	.word	0x08019ab9
 8019ae8:	08019b3d 	.word	0x08019b3d
 8019aec:	08019ab9 	.word	0x08019ab9
 8019af0:	08019ab9 	.word	0x08019ab9
 8019af4:	08019ab9 	.word	0x08019ab9
 8019af8:	08019ab9 	.word	0x08019ab9
 8019afc:	08019c49 	.word	0x08019c49
 8019b00:	08019b6d 	.word	0x08019b6d
 8019b04:	08019c2b 	.word	0x08019c2b
 8019b08:	08019ab9 	.word	0x08019ab9
 8019b0c:	08019ab9 	.word	0x08019ab9
 8019b10:	08019c6b 	.word	0x08019c6b
 8019b14:	08019ab9 	.word	0x08019ab9
 8019b18:	08019b6d 	.word	0x08019b6d
 8019b1c:	08019ab9 	.word	0x08019ab9
 8019b20:	08019ab9 	.word	0x08019ab9
 8019b24:	08019c33 	.word	0x08019c33
 8019b28:	682b      	ldr	r3, [r5, #0]
 8019b2a:	1d1a      	adds	r2, r3, #4
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	602a      	str	r2, [r5, #0]
 8019b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b38:	2301      	movs	r3, #1
 8019b3a:	e0a3      	b.n	8019c84 <_printf_i+0x1f4>
 8019b3c:	6820      	ldr	r0, [r4, #0]
 8019b3e:	6829      	ldr	r1, [r5, #0]
 8019b40:	0606      	lsls	r6, r0, #24
 8019b42:	f101 0304 	add.w	r3, r1, #4
 8019b46:	d50a      	bpl.n	8019b5e <_printf_i+0xce>
 8019b48:	680e      	ldr	r6, [r1, #0]
 8019b4a:	602b      	str	r3, [r5, #0]
 8019b4c:	2e00      	cmp	r6, #0
 8019b4e:	da03      	bge.n	8019b58 <_printf_i+0xc8>
 8019b50:	232d      	movs	r3, #45	; 0x2d
 8019b52:	4276      	negs	r6, r6
 8019b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b58:	485e      	ldr	r0, [pc, #376]	; (8019cd4 <_printf_i+0x244>)
 8019b5a:	230a      	movs	r3, #10
 8019b5c:	e019      	b.n	8019b92 <_printf_i+0x102>
 8019b5e:	680e      	ldr	r6, [r1, #0]
 8019b60:	602b      	str	r3, [r5, #0]
 8019b62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019b66:	bf18      	it	ne
 8019b68:	b236      	sxthne	r6, r6
 8019b6a:	e7ef      	b.n	8019b4c <_printf_i+0xbc>
 8019b6c:	682b      	ldr	r3, [r5, #0]
 8019b6e:	6820      	ldr	r0, [r4, #0]
 8019b70:	1d19      	adds	r1, r3, #4
 8019b72:	6029      	str	r1, [r5, #0]
 8019b74:	0601      	lsls	r1, r0, #24
 8019b76:	d501      	bpl.n	8019b7c <_printf_i+0xec>
 8019b78:	681e      	ldr	r6, [r3, #0]
 8019b7a:	e002      	b.n	8019b82 <_printf_i+0xf2>
 8019b7c:	0646      	lsls	r6, r0, #25
 8019b7e:	d5fb      	bpl.n	8019b78 <_printf_i+0xe8>
 8019b80:	881e      	ldrh	r6, [r3, #0]
 8019b82:	4854      	ldr	r0, [pc, #336]	; (8019cd4 <_printf_i+0x244>)
 8019b84:	2f6f      	cmp	r7, #111	; 0x6f
 8019b86:	bf0c      	ite	eq
 8019b88:	2308      	moveq	r3, #8
 8019b8a:	230a      	movne	r3, #10
 8019b8c:	2100      	movs	r1, #0
 8019b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019b92:	6865      	ldr	r5, [r4, #4]
 8019b94:	60a5      	str	r5, [r4, #8]
 8019b96:	2d00      	cmp	r5, #0
 8019b98:	bfa2      	ittt	ge
 8019b9a:	6821      	ldrge	r1, [r4, #0]
 8019b9c:	f021 0104 	bicge.w	r1, r1, #4
 8019ba0:	6021      	strge	r1, [r4, #0]
 8019ba2:	b90e      	cbnz	r6, 8019ba8 <_printf_i+0x118>
 8019ba4:	2d00      	cmp	r5, #0
 8019ba6:	d04d      	beq.n	8019c44 <_printf_i+0x1b4>
 8019ba8:	4615      	mov	r5, r2
 8019baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8019bae:	fb03 6711 	mls	r7, r3, r1, r6
 8019bb2:	5dc7      	ldrb	r7, [r0, r7]
 8019bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019bb8:	4637      	mov	r7, r6
 8019bba:	42bb      	cmp	r3, r7
 8019bbc:	460e      	mov	r6, r1
 8019bbe:	d9f4      	bls.n	8019baa <_printf_i+0x11a>
 8019bc0:	2b08      	cmp	r3, #8
 8019bc2:	d10b      	bne.n	8019bdc <_printf_i+0x14c>
 8019bc4:	6823      	ldr	r3, [r4, #0]
 8019bc6:	07de      	lsls	r6, r3, #31
 8019bc8:	d508      	bpl.n	8019bdc <_printf_i+0x14c>
 8019bca:	6923      	ldr	r3, [r4, #16]
 8019bcc:	6861      	ldr	r1, [r4, #4]
 8019bce:	4299      	cmp	r1, r3
 8019bd0:	bfde      	ittt	le
 8019bd2:	2330      	movle	r3, #48	; 0x30
 8019bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019bd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019bdc:	1b52      	subs	r2, r2, r5
 8019bde:	6122      	str	r2, [r4, #16]
 8019be0:	f8cd a000 	str.w	sl, [sp]
 8019be4:	464b      	mov	r3, r9
 8019be6:	aa03      	add	r2, sp, #12
 8019be8:	4621      	mov	r1, r4
 8019bea:	4640      	mov	r0, r8
 8019bec:	f7ff fee2 	bl	80199b4 <_printf_common>
 8019bf0:	3001      	adds	r0, #1
 8019bf2:	d14c      	bne.n	8019c8e <_printf_i+0x1fe>
 8019bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bf8:	b004      	add	sp, #16
 8019bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bfe:	4835      	ldr	r0, [pc, #212]	; (8019cd4 <_printf_i+0x244>)
 8019c00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019c04:	6829      	ldr	r1, [r5, #0]
 8019c06:	6823      	ldr	r3, [r4, #0]
 8019c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8019c0c:	6029      	str	r1, [r5, #0]
 8019c0e:	061d      	lsls	r5, r3, #24
 8019c10:	d514      	bpl.n	8019c3c <_printf_i+0x1ac>
 8019c12:	07df      	lsls	r7, r3, #31
 8019c14:	bf44      	itt	mi
 8019c16:	f043 0320 	orrmi.w	r3, r3, #32
 8019c1a:	6023      	strmi	r3, [r4, #0]
 8019c1c:	b91e      	cbnz	r6, 8019c26 <_printf_i+0x196>
 8019c1e:	6823      	ldr	r3, [r4, #0]
 8019c20:	f023 0320 	bic.w	r3, r3, #32
 8019c24:	6023      	str	r3, [r4, #0]
 8019c26:	2310      	movs	r3, #16
 8019c28:	e7b0      	b.n	8019b8c <_printf_i+0xfc>
 8019c2a:	6823      	ldr	r3, [r4, #0]
 8019c2c:	f043 0320 	orr.w	r3, r3, #32
 8019c30:	6023      	str	r3, [r4, #0]
 8019c32:	2378      	movs	r3, #120	; 0x78
 8019c34:	4828      	ldr	r0, [pc, #160]	; (8019cd8 <_printf_i+0x248>)
 8019c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019c3a:	e7e3      	b.n	8019c04 <_printf_i+0x174>
 8019c3c:	0659      	lsls	r1, r3, #25
 8019c3e:	bf48      	it	mi
 8019c40:	b2b6      	uxthmi	r6, r6
 8019c42:	e7e6      	b.n	8019c12 <_printf_i+0x182>
 8019c44:	4615      	mov	r5, r2
 8019c46:	e7bb      	b.n	8019bc0 <_printf_i+0x130>
 8019c48:	682b      	ldr	r3, [r5, #0]
 8019c4a:	6826      	ldr	r6, [r4, #0]
 8019c4c:	6961      	ldr	r1, [r4, #20]
 8019c4e:	1d18      	adds	r0, r3, #4
 8019c50:	6028      	str	r0, [r5, #0]
 8019c52:	0635      	lsls	r5, r6, #24
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	d501      	bpl.n	8019c5c <_printf_i+0x1cc>
 8019c58:	6019      	str	r1, [r3, #0]
 8019c5a:	e002      	b.n	8019c62 <_printf_i+0x1d2>
 8019c5c:	0670      	lsls	r0, r6, #25
 8019c5e:	d5fb      	bpl.n	8019c58 <_printf_i+0x1c8>
 8019c60:	8019      	strh	r1, [r3, #0]
 8019c62:	2300      	movs	r3, #0
 8019c64:	6123      	str	r3, [r4, #16]
 8019c66:	4615      	mov	r5, r2
 8019c68:	e7ba      	b.n	8019be0 <_printf_i+0x150>
 8019c6a:	682b      	ldr	r3, [r5, #0]
 8019c6c:	1d1a      	adds	r2, r3, #4
 8019c6e:	602a      	str	r2, [r5, #0]
 8019c70:	681d      	ldr	r5, [r3, #0]
 8019c72:	6862      	ldr	r2, [r4, #4]
 8019c74:	2100      	movs	r1, #0
 8019c76:	4628      	mov	r0, r5
 8019c78:	f7e6 fafa 	bl	8000270 <memchr>
 8019c7c:	b108      	cbz	r0, 8019c82 <_printf_i+0x1f2>
 8019c7e:	1b40      	subs	r0, r0, r5
 8019c80:	6060      	str	r0, [r4, #4]
 8019c82:	6863      	ldr	r3, [r4, #4]
 8019c84:	6123      	str	r3, [r4, #16]
 8019c86:	2300      	movs	r3, #0
 8019c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c8c:	e7a8      	b.n	8019be0 <_printf_i+0x150>
 8019c8e:	6923      	ldr	r3, [r4, #16]
 8019c90:	462a      	mov	r2, r5
 8019c92:	4649      	mov	r1, r9
 8019c94:	4640      	mov	r0, r8
 8019c96:	47d0      	blx	sl
 8019c98:	3001      	adds	r0, #1
 8019c9a:	d0ab      	beq.n	8019bf4 <_printf_i+0x164>
 8019c9c:	6823      	ldr	r3, [r4, #0]
 8019c9e:	079b      	lsls	r3, r3, #30
 8019ca0:	d413      	bmi.n	8019cca <_printf_i+0x23a>
 8019ca2:	68e0      	ldr	r0, [r4, #12]
 8019ca4:	9b03      	ldr	r3, [sp, #12]
 8019ca6:	4298      	cmp	r0, r3
 8019ca8:	bfb8      	it	lt
 8019caa:	4618      	movlt	r0, r3
 8019cac:	e7a4      	b.n	8019bf8 <_printf_i+0x168>
 8019cae:	2301      	movs	r3, #1
 8019cb0:	4632      	mov	r2, r6
 8019cb2:	4649      	mov	r1, r9
 8019cb4:	4640      	mov	r0, r8
 8019cb6:	47d0      	blx	sl
 8019cb8:	3001      	adds	r0, #1
 8019cba:	d09b      	beq.n	8019bf4 <_printf_i+0x164>
 8019cbc:	3501      	adds	r5, #1
 8019cbe:	68e3      	ldr	r3, [r4, #12]
 8019cc0:	9903      	ldr	r1, [sp, #12]
 8019cc2:	1a5b      	subs	r3, r3, r1
 8019cc4:	42ab      	cmp	r3, r5
 8019cc6:	dcf2      	bgt.n	8019cae <_printf_i+0x21e>
 8019cc8:	e7eb      	b.n	8019ca2 <_printf_i+0x212>
 8019cca:	2500      	movs	r5, #0
 8019ccc:	f104 0619 	add.w	r6, r4, #25
 8019cd0:	e7f5      	b.n	8019cbe <_printf_i+0x22e>
 8019cd2:	bf00      	nop
 8019cd4:	0801d8e9 	.word	0x0801d8e9
 8019cd8:	0801d8fa 	.word	0x0801d8fa

08019cdc <_sbrk_r>:
 8019cdc:	b538      	push	{r3, r4, r5, lr}
 8019cde:	4d06      	ldr	r5, [pc, #24]	; (8019cf8 <_sbrk_r+0x1c>)
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	4604      	mov	r4, r0
 8019ce4:	4608      	mov	r0, r1
 8019ce6:	602b      	str	r3, [r5, #0]
 8019ce8:	f7e7 faa6 	bl	8001238 <_sbrk>
 8019cec:	1c43      	adds	r3, r0, #1
 8019cee:	d102      	bne.n	8019cf6 <_sbrk_r+0x1a>
 8019cf0:	682b      	ldr	r3, [r5, #0]
 8019cf2:	b103      	cbz	r3, 8019cf6 <_sbrk_r+0x1a>
 8019cf4:	6023      	str	r3, [r4, #0]
 8019cf6:	bd38      	pop	{r3, r4, r5, pc}
 8019cf8:	2001139c 	.word	0x2001139c

08019cfc <__sread>:
 8019cfc:	b510      	push	{r4, lr}
 8019cfe:	460c      	mov	r4, r1
 8019d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d04:	f000 f8a8 	bl	8019e58 <_read_r>
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	bfab      	itete	ge
 8019d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8019d10:	181b      	addge	r3, r3, r0
 8019d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019d16:	bfac      	ite	ge
 8019d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8019d1a:	81a3      	strhlt	r3, [r4, #12]
 8019d1c:	bd10      	pop	{r4, pc}

08019d1e <__swrite>:
 8019d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d22:	461f      	mov	r7, r3
 8019d24:	898b      	ldrh	r3, [r1, #12]
 8019d26:	05db      	lsls	r3, r3, #23
 8019d28:	4605      	mov	r5, r0
 8019d2a:	460c      	mov	r4, r1
 8019d2c:	4616      	mov	r6, r2
 8019d2e:	d505      	bpl.n	8019d3c <__swrite+0x1e>
 8019d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d34:	2302      	movs	r3, #2
 8019d36:	2200      	movs	r2, #0
 8019d38:	f000 f870 	bl	8019e1c <_lseek_r>
 8019d3c:	89a3      	ldrh	r3, [r4, #12]
 8019d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019d46:	81a3      	strh	r3, [r4, #12]
 8019d48:	4632      	mov	r2, r6
 8019d4a:	463b      	mov	r3, r7
 8019d4c:	4628      	mov	r0, r5
 8019d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d52:	f000 b817 	b.w	8019d84 <_write_r>

08019d56 <__sseek>:
 8019d56:	b510      	push	{r4, lr}
 8019d58:	460c      	mov	r4, r1
 8019d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d5e:	f000 f85d 	bl	8019e1c <_lseek_r>
 8019d62:	1c43      	adds	r3, r0, #1
 8019d64:	89a3      	ldrh	r3, [r4, #12]
 8019d66:	bf15      	itete	ne
 8019d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8019d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019d72:	81a3      	strheq	r3, [r4, #12]
 8019d74:	bf18      	it	ne
 8019d76:	81a3      	strhne	r3, [r4, #12]
 8019d78:	bd10      	pop	{r4, pc}

08019d7a <__sclose>:
 8019d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d7e:	f000 b81b 	b.w	8019db8 <_close_r>
	...

08019d84 <_write_r>:
 8019d84:	b538      	push	{r3, r4, r5, lr}
 8019d86:	4d07      	ldr	r5, [pc, #28]	; (8019da4 <_write_r+0x20>)
 8019d88:	4604      	mov	r4, r0
 8019d8a:	4608      	mov	r0, r1
 8019d8c:	4611      	mov	r1, r2
 8019d8e:	2200      	movs	r2, #0
 8019d90:	602a      	str	r2, [r5, #0]
 8019d92:	461a      	mov	r2, r3
 8019d94:	f7e7 f9ff 	bl	8001196 <_write>
 8019d98:	1c43      	adds	r3, r0, #1
 8019d9a:	d102      	bne.n	8019da2 <_write_r+0x1e>
 8019d9c:	682b      	ldr	r3, [r5, #0]
 8019d9e:	b103      	cbz	r3, 8019da2 <_write_r+0x1e>
 8019da0:	6023      	str	r3, [r4, #0]
 8019da2:	bd38      	pop	{r3, r4, r5, pc}
 8019da4:	2001139c 	.word	0x2001139c

08019da8 <abort>:
 8019da8:	b508      	push	{r3, lr}
 8019daa:	2006      	movs	r0, #6
 8019dac:	f000 f88e 	bl	8019ecc <raise>
 8019db0:	2001      	movs	r0, #1
 8019db2:	f7e7 f9c9 	bl	8001148 <_exit>
	...

08019db8 <_close_r>:
 8019db8:	b538      	push	{r3, r4, r5, lr}
 8019dba:	4d06      	ldr	r5, [pc, #24]	; (8019dd4 <_close_r+0x1c>)
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	4604      	mov	r4, r0
 8019dc0:	4608      	mov	r0, r1
 8019dc2:	602b      	str	r3, [r5, #0]
 8019dc4:	f7e7 fa03 	bl	80011ce <_close>
 8019dc8:	1c43      	adds	r3, r0, #1
 8019dca:	d102      	bne.n	8019dd2 <_close_r+0x1a>
 8019dcc:	682b      	ldr	r3, [r5, #0]
 8019dce:	b103      	cbz	r3, 8019dd2 <_close_r+0x1a>
 8019dd0:	6023      	str	r3, [r4, #0]
 8019dd2:	bd38      	pop	{r3, r4, r5, pc}
 8019dd4:	2001139c 	.word	0x2001139c

08019dd8 <_fstat_r>:
 8019dd8:	b538      	push	{r3, r4, r5, lr}
 8019dda:	4d07      	ldr	r5, [pc, #28]	; (8019df8 <_fstat_r+0x20>)
 8019ddc:	2300      	movs	r3, #0
 8019dde:	4604      	mov	r4, r0
 8019de0:	4608      	mov	r0, r1
 8019de2:	4611      	mov	r1, r2
 8019de4:	602b      	str	r3, [r5, #0]
 8019de6:	f7e7 f9fe 	bl	80011e6 <_fstat>
 8019dea:	1c43      	adds	r3, r0, #1
 8019dec:	d102      	bne.n	8019df4 <_fstat_r+0x1c>
 8019dee:	682b      	ldr	r3, [r5, #0]
 8019df0:	b103      	cbz	r3, 8019df4 <_fstat_r+0x1c>
 8019df2:	6023      	str	r3, [r4, #0]
 8019df4:	bd38      	pop	{r3, r4, r5, pc}
 8019df6:	bf00      	nop
 8019df8:	2001139c 	.word	0x2001139c

08019dfc <_isatty_r>:
 8019dfc:	b538      	push	{r3, r4, r5, lr}
 8019dfe:	4d06      	ldr	r5, [pc, #24]	; (8019e18 <_isatty_r+0x1c>)
 8019e00:	2300      	movs	r3, #0
 8019e02:	4604      	mov	r4, r0
 8019e04:	4608      	mov	r0, r1
 8019e06:	602b      	str	r3, [r5, #0]
 8019e08:	f7e7 f9fd 	bl	8001206 <_isatty>
 8019e0c:	1c43      	adds	r3, r0, #1
 8019e0e:	d102      	bne.n	8019e16 <_isatty_r+0x1a>
 8019e10:	682b      	ldr	r3, [r5, #0]
 8019e12:	b103      	cbz	r3, 8019e16 <_isatty_r+0x1a>
 8019e14:	6023      	str	r3, [r4, #0]
 8019e16:	bd38      	pop	{r3, r4, r5, pc}
 8019e18:	2001139c 	.word	0x2001139c

08019e1c <_lseek_r>:
 8019e1c:	b538      	push	{r3, r4, r5, lr}
 8019e1e:	4d07      	ldr	r5, [pc, #28]	; (8019e3c <_lseek_r+0x20>)
 8019e20:	4604      	mov	r4, r0
 8019e22:	4608      	mov	r0, r1
 8019e24:	4611      	mov	r1, r2
 8019e26:	2200      	movs	r2, #0
 8019e28:	602a      	str	r2, [r5, #0]
 8019e2a:	461a      	mov	r2, r3
 8019e2c:	f7e7 f9f6 	bl	800121c <_lseek>
 8019e30:	1c43      	adds	r3, r0, #1
 8019e32:	d102      	bne.n	8019e3a <_lseek_r+0x1e>
 8019e34:	682b      	ldr	r3, [r5, #0]
 8019e36:	b103      	cbz	r3, 8019e3a <_lseek_r+0x1e>
 8019e38:	6023      	str	r3, [r4, #0]
 8019e3a:	bd38      	pop	{r3, r4, r5, pc}
 8019e3c:	2001139c 	.word	0x2001139c

08019e40 <__malloc_lock>:
 8019e40:	4801      	ldr	r0, [pc, #4]	; (8019e48 <__malloc_lock+0x8>)
 8019e42:	f7ff bb0d 	b.w	8019460 <__retarget_lock_acquire_recursive>
 8019e46:	bf00      	nop
 8019e48:	200113a0 	.word	0x200113a0

08019e4c <__malloc_unlock>:
 8019e4c:	4801      	ldr	r0, [pc, #4]	; (8019e54 <__malloc_unlock+0x8>)
 8019e4e:	f7ff bb08 	b.w	8019462 <__retarget_lock_release_recursive>
 8019e52:	bf00      	nop
 8019e54:	200113a0 	.word	0x200113a0

08019e58 <_read_r>:
 8019e58:	b538      	push	{r3, r4, r5, lr}
 8019e5a:	4d07      	ldr	r5, [pc, #28]	; (8019e78 <_read_r+0x20>)
 8019e5c:	4604      	mov	r4, r0
 8019e5e:	4608      	mov	r0, r1
 8019e60:	4611      	mov	r1, r2
 8019e62:	2200      	movs	r2, #0
 8019e64:	602a      	str	r2, [r5, #0]
 8019e66:	461a      	mov	r2, r3
 8019e68:	f7e7 f978 	bl	800115c <_read>
 8019e6c:	1c43      	adds	r3, r0, #1
 8019e6e:	d102      	bne.n	8019e76 <_read_r+0x1e>
 8019e70:	682b      	ldr	r3, [r5, #0]
 8019e72:	b103      	cbz	r3, 8019e76 <_read_r+0x1e>
 8019e74:	6023      	str	r3, [r4, #0]
 8019e76:	bd38      	pop	{r3, r4, r5, pc}
 8019e78:	2001139c 	.word	0x2001139c

08019e7c <_raise_r>:
 8019e7c:	291f      	cmp	r1, #31
 8019e7e:	b538      	push	{r3, r4, r5, lr}
 8019e80:	4604      	mov	r4, r0
 8019e82:	460d      	mov	r5, r1
 8019e84:	d904      	bls.n	8019e90 <_raise_r+0x14>
 8019e86:	2316      	movs	r3, #22
 8019e88:	6003      	str	r3, [r0, #0]
 8019e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e8e:	bd38      	pop	{r3, r4, r5, pc}
 8019e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019e92:	b112      	cbz	r2, 8019e9a <_raise_r+0x1e>
 8019e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e98:	b94b      	cbnz	r3, 8019eae <_raise_r+0x32>
 8019e9a:	4620      	mov	r0, r4
 8019e9c:	f000 f830 	bl	8019f00 <_getpid_r>
 8019ea0:	462a      	mov	r2, r5
 8019ea2:	4601      	mov	r1, r0
 8019ea4:	4620      	mov	r0, r4
 8019ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019eaa:	f000 b817 	b.w	8019edc <_kill_r>
 8019eae:	2b01      	cmp	r3, #1
 8019eb0:	d00a      	beq.n	8019ec8 <_raise_r+0x4c>
 8019eb2:	1c59      	adds	r1, r3, #1
 8019eb4:	d103      	bne.n	8019ebe <_raise_r+0x42>
 8019eb6:	2316      	movs	r3, #22
 8019eb8:	6003      	str	r3, [r0, #0]
 8019eba:	2001      	movs	r0, #1
 8019ebc:	e7e7      	b.n	8019e8e <_raise_r+0x12>
 8019ebe:	2400      	movs	r4, #0
 8019ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019ec4:	4628      	mov	r0, r5
 8019ec6:	4798      	blx	r3
 8019ec8:	2000      	movs	r0, #0
 8019eca:	e7e0      	b.n	8019e8e <_raise_r+0x12>

08019ecc <raise>:
 8019ecc:	4b02      	ldr	r3, [pc, #8]	; (8019ed8 <raise+0xc>)
 8019ece:	4601      	mov	r1, r0
 8019ed0:	6818      	ldr	r0, [r3, #0]
 8019ed2:	f7ff bfd3 	b.w	8019e7c <_raise_r>
 8019ed6:	bf00      	nop
 8019ed8:	20000030 	.word	0x20000030

08019edc <_kill_r>:
 8019edc:	b538      	push	{r3, r4, r5, lr}
 8019ede:	4d07      	ldr	r5, [pc, #28]	; (8019efc <_kill_r+0x20>)
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	4604      	mov	r4, r0
 8019ee4:	4608      	mov	r0, r1
 8019ee6:	4611      	mov	r1, r2
 8019ee8:	602b      	str	r3, [r5, #0]
 8019eea:	f7e7 f91b 	bl	8001124 <_kill>
 8019eee:	1c43      	adds	r3, r0, #1
 8019ef0:	d102      	bne.n	8019ef8 <_kill_r+0x1c>
 8019ef2:	682b      	ldr	r3, [r5, #0]
 8019ef4:	b103      	cbz	r3, 8019ef8 <_kill_r+0x1c>
 8019ef6:	6023      	str	r3, [r4, #0]
 8019ef8:	bd38      	pop	{r3, r4, r5, pc}
 8019efa:	bf00      	nop
 8019efc:	2001139c 	.word	0x2001139c

08019f00 <_getpid_r>:
 8019f00:	f7e7 b908 	b.w	8001114 <_getpid>

08019f04 <_init>:
 8019f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f06:	bf00      	nop
 8019f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f0a:	bc08      	pop	{r3}
 8019f0c:	469e      	mov	lr, r3
 8019f0e:	4770      	bx	lr

08019f10 <_fini>:
 8019f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f12:	bf00      	nop
 8019f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f16:	bc08      	pop	{r3}
 8019f18:	469e      	mov	lr, r3
 8019f1a:	4770      	bx	lr
