/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include "lwip.h"
#include "lwip/api.h"
#include "MQTTClient.h"
#include "MQTTInterface.h"
#include "sensor_data.h"
#include "process_data.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BROKER_IP		"10.42.0.84"
#define MQTT_PORT		1883
#define MQTT_BUFSIZE	1024

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
extern struct netif gnetif; //extern gnetif

osThreadId mqttClientSubTaskHandle;  //mqtt client task handle
osThreadId mqttClientPubTaskHandle;  //mqtt client task handle

Network net; //mqtt network
MQTTClient mqttClient; //mqtt client

uint8_t sndBuffer[MQTT_BUFSIZE]; //mqtt send buffer
uint8_t rcvBuffer[MQTT_BUFSIZE]; //mqtt receive buffer
uint8_t msgBuffer[MQTT_BUFSIZE]; //mqtt message buffer
extern volatile sensorData_buf sensorDataBuf; //sensor data buffer
extern osSemaphoreId bufsemHandle;

//pb_SensorData pb_recv_obj= pb_SensorData_init_zero;
sensorData sd1;
sensorData sd3;
//sensorData sd4 = sensorDataBuf.front(&sensorDataBuf);
/* USER CODE END Variables */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void MqttClientSubTask(void const *argument); //mqtt client subscribe task function
void MqttClientPubTask(void const *argument); //mqtt client publish task function
int  MqttConnectBroker(void); 				//mqtt broker connect function
void MqttMessageArrived(MessageData* msg); //mqtt message callback function
void EngagePin(void);
void EngagePin1(void);
extern bool sensor_data_to_pbuf(sensorData* sd,uint8_t *msg_buf,uint32_t len);
/* USER CODE END FunctionPrototypes */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void MqttClientSubTask(void const *argument)
{
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
		{
			osDelay(1000);
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
			break;
		}
	}

//	MqttConnectBroker();
//				osDelay(1000);

	while(1)
	{
		if(!mqttClient.isconnected)
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
			MqttConnectBroker();
//			osDelay(1000);
			vTaskDelay(1000);
		}
		else
		{
//			EngagePin1();
			MQTTYield(&mqttClient, 1000); //handle timer
//			osDelay(100);
			vTaskDelay(1000);
		}
	}
}

void MqttClientPubTask(void const *argument)
{
	uint8_t obuffer[pb_SensorData_size];
	sensorData sd = {.sensorName="",.sensorID=0,.sensorVal=0,.timeStamp=0};

//	if (xSemaphoreTake(bufsemHandle, portMAX_DELAY)) {
//
//		sd = sensorDataBuf.front(&sensorDataBuf);
//
////		copy_(&tmp, &sd);
//	}
//	//	copy_(&sd, &sd1);
//		bool res=sensor_data_to_pbuf(&sd,obuffer,sizeof(obuffer));

//	const char* str = "MQTT message from STM32";
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
		{
			if (xSemaphoreTake(bufsemHandle, portMAX_DELAY)) {

				sd = sensorDataBuf.front(&sensorDataBuf);

			//		copy_(&tmp, &sd);
			}
				//	copy_(&sd, &sd1);
			bool res=sensor_data_to_pbuf(&sd,obuffer,sizeof(obuffer));
			if (res) {
				if (strlen((const char*)sd.sensorName)) {
					sd1=sd;
//					copy_(&sd, &sd1);
					message.payload = (void*)obuffer;
					message.payloadlen = sizeof(obuffer);
					MQTTPublish(&mqttClient, "test", &message); //publish a message
				}
	//			message.payload = (void*)str;
	//			message.payloadlen = strlen(str);

//				MQTTPublish(&mqttClient, "test", &message); //publish a message
			}
		}

//		osDelay(1000);
		vTaskDelay(1000);
	}
}

int MqttConnectBroker()
{
	int ret;

	NewNetwork(&net);
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
	if(ret != MQTT_SUCCESS)
	{
		printf("ConnectNetwork failed.\n");
		return -1;
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
	data.willFlag = 0;
	data.MQTTVersion = 3;
	data.clientID.cstring = "STM32F4";
	data.username.cstring = "STM32F4";
	data.password.cstring = "";
	data.keepAliveInterval = 60;
	data.cleansession = 1;

	ret = MQTTConnect(&mqttClient, &data);
	if(ret != MQTT_SUCCESS)
	{
		printf("MQTTConnect failed.\n");
		return ret;
	}
	osDelay(500);

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
	if(ret != MQTT_SUCCESS)
	{
		printf("MQTTSubscribe failed.\n");
		return ret;
	}
	osDelay(500);

	printf("MQTT_ConnectBroker O.K.\n");
	return MQTT_SUCCESS;
}

void MqttMessageArrived(MessageData* msg)
{
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin); //toggle pin when new message arrived

	MQTTMessage* message = msg->message;
	memset(msgBuffer, 0, sizeof(msgBuffer));
	memcpy(msgBuffer, message->payload,message->payloadlen);

	pb_SensorData pb_recv_obj= pb_SensorData_init_zero;
	sensorData sd2 = {.sensorID=0,.sensorName="",.sensorVal=0,.timeStamp=0};
	message_to_pb_obj(&pb_recv_obj,msgBuffer,sizeof(msgBuffer));
	pbuf_to_sensor_data(&pb_recv_obj,&sd2);
	copy_(&sd2, &sd1);

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
}

void EngagePin(void) {
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
}

void EngagePin1(void) {
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
}
void DisEngagePin1(void) {
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
}
/* USER CODE END Application */

