
Sample_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f0  080081f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081f8  080081f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081fc  080081fc  000181fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004168  20000010  08008210  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004178  08008210  00024178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a432  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003535  00000000  00000000  0003a472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0003d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  0003f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023abf  00000000  00000000  00040708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab82  00000000  00000000  000641c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd026  00000000  00000000  0007ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015bd6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000632c  00000000  00000000  0015bdc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008140 	.word	0x08008140

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08008140 	.word	0x08008140

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c
 8000544:	20000080 	.word	0x20000080

08000548 <resetSPI>:
void StartDefaultTask(void const * argument);
void IRTask_Start(void const * argument);
void spiInteractionTaskStart(void const * argument);

/* USER CODE BEGIN PFP */
void resetSPI(SPI_HandleTypeDef* ht_spi) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	HAL_SPI_DeInit(ht_spi);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f003 fe5a 	bl	800420a <HAL_SPI_DeInit>
	HAL_SPI_Init(ht_spi);
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f003 fdce 	bl	80040f8 <HAL_SPI_Init>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b09a      	sub	sp, #104	; 0x68
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fd4b 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f86d 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f9b9 	bl	80008e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000576:	f000 f8d7 	bl	8000728 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f98b 	bl	8000894 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800057e:	f000 f933 	bl	80007e8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000582:	f000 f8ff 	bl	8000784 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of i2cmutex */
  osMutexDef(i2cmutex);
 8000586:	2300      	movs	r3, #0
 8000588:	663b      	str	r3, [r7, #96]	; 0x60
 800058a:	2300      	movs	r3, #0
 800058c:	667b      	str	r3, [r7, #100]	; 0x64
  i2cmutexHandle = osMutexCreate(osMutex(i2cmutex));
 800058e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000592:	4618      	mov	r0, r3
 8000594:	f005 fea9 	bl	80062ea <osMutexCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a24      	ldr	r2, [pc, #144]	; (800062c <main+0xc8>)
 800059c:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiMutex */
  osMutexDef(spiMutex);
 800059e:	2300      	movs	r3, #0
 80005a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80005a2:	2300      	movs	r3, #0
 80005a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  spiMutexHandle = osMutexCreate(osMutex(spiMutex));
 80005a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 fe9d 	bl	80062ea <osMutexCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <main+0xcc>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005b6:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <main+0xd0>)
 80005b8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005bc:	461d      	mov	r5, r3
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 fe2a 	bl	800622a <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a17      	ldr	r2, [pc, #92]	; (8000638 <main+0xd4>)
 80005da:	6013      	str	r3, [r2, #0]

  /* definition and creation of IR_Task */
  osThreadDef(IR_Task, IRTask_Start, osPriorityNormal, 0, 128);
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <main+0xd8>)
 80005de:	f107 0420 	add.w	r4, r7, #32
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IR_TaskHandle = osThreadCreate(osThread(IR_Task), NULL);
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 fe17 	bl	800622a <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <main+0xdc>)
 8000600:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiInteractionT */
  osThreadDef(spiInteractionT, spiInteractionTaskStart, osPriorityNormal, 0, 128);
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0xe0>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiInteractionTHandle = osThreadCreate(osThread(spiInteractionT), NULL);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fe06 	bl	800622a <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a09      	ldr	r2, [pc, #36]	; (8000648 <main+0xe4>)
 8000622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f005 fdfa 	bl	800621c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0xc4>
 800062a:	bf00      	nop
 800062c:	200003c4 	.word	0x200003c4
 8000630:	200003c8 	.word	0x200003c8
 8000634:	0800817c 	.word	0x0800817c
 8000638:	200003b8 	.word	0x200003b8
 800063c:	08008198 	.word	0x08008198
 8000640:	200003bc 	.word	0x200003bc
 8000644:	080081b4 	.word	0x080081b4
 8000648:	200003c0 	.word	0x200003c0

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2234      	movs	r2, #52	; 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 fd68 	bl	8008130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <SystemClock_Config+0xd4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a29      	ldr	r2, [pc, #164]	; (8000720 <SystemClock_Config+0xd4>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SystemClock_Config+0xd8>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fa6e 	bl	8003bbc <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e6:	f000 f9fc 	bl	8000ae2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fedc 	bl	80034c4 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000712:	f000 f9e6 	bl	8000ae2 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 144;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2290      	movs	r2, #144	; 0x90
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f001 f88d 	bl	8001884 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f9b7 	bl	8000ae2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000280 	.word	0x20000280
 800077c:	40005400 	.word	0x40005400
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_SPI1_Init+0x5c>)
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_SPI1_Init+0x60>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_SPI1_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_SPI1_Init+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_SPI1_Init+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_SPI1_Init+0x5c>)
 80007ce:	f003 fc93 	bl	80040f8 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 f983 	bl	8000ae2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200002d4 	.word	0x200002d4
 80007e4:	40013000 	.word	0x40013000

080007e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_TIM1_Init+0xa4>)
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <MX_TIM1_Init+0xa8>)
 8000808:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_TIM1_Init+0xa4>)
 800080c:	2253      	movs	r2, #83	; 0x53
 800080e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_TIM1_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_TIM1_Init+0xa4>)
 8000818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_TIM1_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_TIM1_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_TIM1_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_TIM1_Init+0xa4>)
 8000832:	f004 fc55 	bl	80050e0 <HAL_TIM_IC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 f951 	bl	8000ae2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	480f      	ldr	r0, [pc, #60]	; (800088c <MX_TIM1_Init+0xa4>)
 8000850:	f005 f97a 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800085a:	f000 f942 	bl	8000ae2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000862:	2301      	movs	r3, #1
 8000864:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_TIM1_Init+0xa4>)
 8000876:	f004 feb3 	bl	80055e0 <HAL_TIM_IC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000880:	f000 f92f 	bl	8000ae2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000032c 	.word	0x2000032c
 8000890:	40010000 	.word	0x40010000

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f005 f9cc 	bl	8005c68 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f904 	bl	8000ae2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000374 	.word	0x20000374
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a26      	ldr	r2, [pc, #152]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_GPIO_Init+0xd4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_GPIO_Init+0xd4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <MX_GPIO_Init+0xd4>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_GPIO_Init+0xd8>)
 8000976:	f000 ff6b 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800097a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_GPIO_Init+0xd8>)
 8000994:	f000 fcbc 	bl	8001310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0xd8>)
 80009ae:	f000 fcaf 	bl	8001310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f005 fc78 	bl	80062c2 <osDelay>
 80009d2:	e7fb      	b.n	80009cc <StartDefaultTask+0x8>

080009d4 <IRTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRTask_Start */
void IRTask_Start(void const * argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRTask_Start */
  /*
   * This task starts the reading of the IR sensor which is connected to
   * the digital input pin PA10. This result is stored in @tx_buf.
   */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009dc:	2100      	movs	r1, #0
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <IRTask_Start+0x44>)
 80009e0:	f004 fbce 	bl	8005180 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {

	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 80009e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <IRTask_Start+0x48>)
 80009ea:	f000 ff19 	bl	8001820 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d106      	bne.n	8000a02 <IRTask_Start+0x2e>
	  {
		  tx_buf[0]=1;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <IRTask_Start+0x4c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
		  toggle=1;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <IRTask_Start+0x50>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	e005      	b.n	8000a0e <IRTask_Start+0x3a>

	  }
	  else
	  {
		  toggle=0;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <IRTask_Start+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
		  tx_buf[0]=0;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <IRTask_Start+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
	  }

    osDelay(20);
 8000a0e:	2014      	movs	r0, #20
 8000a10:	f005 fc57 	bl	80062c2 <osDelay>
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000a14:	e7e6      	b.n	80009e4 <IRTask_Start+0x10>
 8000a16:	bf00      	nop
 8000a18:	2000032c 	.word	0x2000032c
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	200003d4 	.word	0x200003d4
 8000a24:	200003cc 	.word	0x200003cc

08000a28 <HAL_SPI_TxCpltCallback>:
/**
* @brief Function implementing the spiInteractionT thread.
* @param argument: Not used
* @retval None
*/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	success=1;
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_SPI_TxCpltCallback+0x1c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	200003d1 	.word	0x200003d1

08000a48 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if (rx_buf[0]==0x02) {
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <HAL_SPI_RxCpltCallback+0x28>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d107      	bne.n	8000a68 <HAL_SPI_RxCpltCallback+0x20>

		HAL_SPI_Transmit_IT(&hspi1, tx_buf, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4906      	ldr	r1, [pc, #24]	; (8000a74 <HAL_SPI_RxCpltCallback+0x2c>)
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <HAL_SPI_RxCpltCallback+0x30>)
 8000a5e:	f003 fbfd 	bl	800425c <HAL_SPI_Transmit_IT>
		rx_buf[0] = 0;
 8000a62:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_SPI_RxCpltCallback+0x28>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
//		xSemaphoreGive(spiMutexHandle);

	}
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200003d0 	.word	0x200003d0
 8000a74:	200003d4 	.word	0x200003d4
 8000a78:	200002d4 	.word	0x200002d4

08000a7c <spiInteractionTaskStart>:
/* USER CODE END Header_spiInteractionTaskStart */
void spiInteractionTaskStart(void const * argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spiInteractionTaskStart */
  /* Infinite loop */
  for(;;)
  {
	  if((g_ret = HAL_SPI_Receive_IT(&hspi1, rx_buf, 1)!=HAL_OK)) {
 8000a84:	2201      	movs	r2, #1
 8000a86:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <spiInteractionTaskStart+0x3c>)
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <spiInteractionTaskStart+0x40>)
 8000a8a:	f003 fc71 	bl	8004370 <HAL_SPI_Receive_IT>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf14      	ite	ne
 8000a94:	2301      	movne	r3, #1
 8000a96:	2300      	moveq	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <spiInteractionTaskStart+0x44>)
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <spiInteractionTaskStart+0x44>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <spiInteractionTaskStart+0x32>
		  resetSPI(&hspi1);
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <spiInteractionTaskStart+0x40>)
 8000aaa:	f7ff fd4d 	bl	8000548 <resetSPI>
	  }
//	  HAL_SPI_Receive_IT(&hspi1, rx_buf, 1);

    osDelay(20);
 8000aae:	2014      	movs	r0, #20
 8000ab0:	f005 fc07 	bl	80062c2 <osDelay>
	  if((g_ret = HAL_SPI_Receive_IT(&hspi1, rx_buf, 1)!=HAL_OK)) {
 8000ab4:	e7e6      	b.n	8000a84 <spiInteractionTaskStart+0x8>
 8000ab6:	bf00      	nop
 8000ab8:	200003d0 	.word	0x200003d0
 8000abc:	200002d4 	.word	0x200002d4
 8000ac0:	200003d5 	.word	0x200003d5

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 fab7 	bl	8001048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae6:	b672      	cpsid	i
}
 8000ae8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aea:	e7fe      	b.n	8000aea <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_MspInit+0x54>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <HAL_MspInit+0x54>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x54>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_MspInit+0x54>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_MspInit+0x54>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_MspInit+0x54>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	f06f 0001 	mvn.w	r0, #1
 8000b32:	f000 fb85 	bl	8001240 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <HAL_I2C_MspInit+0xa4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d13c      	bne.n	8000be0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_I2C_MspInit+0xa8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_I2C_MspInit+0xa8>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_I2C_MspInit+0xa8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b88:	2312      	movs	r3, #18
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b94:	2304      	movs	r3, #4
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <HAL_I2C_MspInit+0xac>)
 8000ba0:	f000 fbb6 	bl	8001310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_I2C_MspInit+0xa8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_I2C_MspInit+0xa8>)
 8000bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_I2C_MspInit+0xa8>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	201f      	movs	r0, #31
 8000bc6:	f000 fb3b 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bca:	201f      	movs	r0, #31
 8000bcc:	f000 fb54 	bl	8001278 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	2020      	movs	r0, #32
 8000bd6:	f000 fb33 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bda:	2020      	movs	r0, #32
 8000bdc:	f000 fb4c 	bl	8001278 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40005400 	.word	0x40005400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <HAL_SPI_MspInit+0x94>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d133      	bne.n	8000c7e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_SPI_MspInit+0x98>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_SPI_MspInit+0x98>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_SPI_MspInit+0x98>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_SPI_MspInit+0x98>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <HAL_SPI_MspInit+0x98>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_SPI_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c4e:	23e0      	movs	r3, #224	; 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <HAL_SPI_MspInit+0x9c>)
 8000c6a:	f000 fb51 	bl	8001310 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	2023      	movs	r0, #35	; 0x23
 8000c74:	f000 fae4 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c78:	2023      	movs	r0, #35	; 0x23
 8000c7a:	f000 fafd 	bl	8001278 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40013000 	.word	0x40013000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_SPI_MspDeInit+0x34>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_SPI_MspDeInit+0x38>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_SPI_MspDeInit+0x38>)
 8000cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8000cb2:	21e0      	movs	r1, #224	; 0xe0
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <HAL_SPI_MspDeInit+0x3c>)
 8000cb6:	f000 fcbf 	bl	8001638 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000cba:	2023      	movs	r0, #35	; 0x23
 8000cbc:	f000 faea 	bl	8001294 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_TIM_IC_MspInit+0x94>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d134      	bne.n	8000d60 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_TIM_IC_MspInit+0x98>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <HAL_TIM_IC_MspInit+0x98>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_TIM_IC_MspInit+0x98>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_TIM_IC_MspInit+0x98>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_TIM_IC_MspInit+0x98>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_TIM_IC_MspInit+0x98>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <HAL_TIM_IC_MspInit+0x9c>)
 8000d4c:	f000 fae0 	bl	8001310 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2105      	movs	r1, #5
 8000d54:	201b      	movs	r0, #27
 8000d56:	f000 fa73 	bl	8001240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d5a:	201b      	movs	r0, #27
 8000d5c:	f000 fa8c 	bl	8001278 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dea:	f000 fa91 	bl	8001310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b34      	ldr	r3, [pc, #208]	; (8000eec <HAL_InitTick+0xe8>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a33      	ldr	r2, [pc, #204]	; (8000eec <HAL_InitTick+0xe8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_InitTick+0xe8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e30:	f107 0210 	add.w	r2, r7, #16
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fc5c 	bl	80036f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4a:	f002 fc2d 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e52:	f002 fc29 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8000e56:	4603      	mov	r3, r0
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5e:	4a24      	ldr	r2, [pc, #144]	; (8000ef0 <HAL_InitTick+0xec>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	0c9b      	lsrs	r3, r3, #18
 8000e66:	3b01      	subs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000e74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e78:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000e92:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000e94:	f004 f85a 	bl	8004f4c <HAL_TIM_Base_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d11b      	bne.n	8000ede <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000ea6:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <HAL_InitTick+0xf0>)
 8000ea8:	f004 f8aa 	bl	8005000 <HAL_TIM_Base_Start_IT>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d111      	bne.n	8000ede <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eba:	201c      	movs	r0, #28
 8000ebc:	f000 f9dc 	bl	8001278 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d808      	bhi.n	8000ed8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	201c      	movs	r0, #28
 8000ecc:	f000 f9b8 	bl	8001240 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_InitTick+0xf4>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e002      	b.n	8000ede <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ede:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3738      	adds	r7, #56	; 0x38
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	200003d8 	.word	0x200003d8
 8000ef8:	20000004 	.word	0x20000004

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <TIM1_CC_IRQHandler+0x10>)
 8000f2e:	f004 fa4f 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000032c 	.word	0x2000032c

08000f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM2_IRQHandler+0x10>)
 8000f42:	f004 fa45 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200003d8 	.word	0x200003d8

08000f50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <I2C1_EV_IRQHandler+0x10>)
 8000f56:	f000 fdd9 	bl	8001b0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000280 	.word	0x20000280

08000f64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <I2C1_ER_IRQHandler+0x10>)
 8000f6a:	f000 ff40 	bl	8001dee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000280 	.word	0x20000280

08000f78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <SPI1_IRQHandler+0x10>)
 8000f7e:	f003 fb29 	bl	80045d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002d4 	.word	0x200002d4

08000f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fcc:	4c0b      	ldr	r4, [pc, #44]	; (8000ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fda:	f7ff ffd7 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f007 f875 	bl	80080cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fabf 	bl	8000564 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ff4:	08008200 	.word	0x08008200
  ldr r2, =_sbss
 8000ff8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ffc:	20004178 	.word	0x20004178

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f8fc 	bl	800122a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff fee6 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fd58 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20000420 	.word	0x20000420

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000420 	.word	0x20000420

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db12      	blt.n	8001160 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	490a      	ldr	r1, [pc, #40]	; (800116c <__NVIC_DisableIRQ+0x44>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	3320      	adds	r3, #32
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001154:	f3bf 8f4f 	dsb	sy
}
 8001158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115a:	f3bf 8f6f 	isb	sy
}
 800115e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff28 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001252:	f7ff ff3d 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001256:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff ffb1 	bl	80011c4 <NVIC_EncodePriority>
 8001262:	4602      	mov	r2, r0
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff80 	bl	8001170 <__NVIC_SetPriority>
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff30 	bl	80010ec <__NVIC_EnableIRQ>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff40 	bl	8001128 <__NVIC_DisableIRQ>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d004      	beq.n	80012ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00c      	b.n	80012e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2205      	movs	r2, #5
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001302:	b2db      	uxtb	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e165      	b.n	80015f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8154 	bne.w	80015f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d005      	beq.n	8001362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	2b02      	cmp	r3, #2
 8001360:	d130      	bne.n	80013c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	f003 0201 	and.w	r2, r3, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d017      	beq.n	8001400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d123      	bne.n	8001454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	69b9      	ldr	r1, [r7, #24]
 8001450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0203 	and.w	r2, r3, #3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80ae 	beq.w	80015f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <HAL_GPIO_Init+0x300>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a5c      	ldr	r2, [pc, #368]	; (8001610 <HAL_GPIO_Init+0x300>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b5a      	ldr	r3, [pc, #360]	; (8001610 <HAL_GPIO_Init+0x300>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b2:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_GPIO_Init+0x304>)
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_GPIO_Init+0x308>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x21a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_GPIO_Init+0x30c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x216>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_GPIO_Init+0x310>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x212>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x314>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x20e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_GPIO_Init+0x318>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x20a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_GPIO_Init+0x31c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x206>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a49      	ldr	r2, [pc, #292]	; (8001630 <HAL_GPIO_Init+0x320>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x202>
 800150e:	2306      	movs	r3, #6
 8001510:	e00c      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001512:	2307      	movs	r3, #7
 8001514:	e00a      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001516:	2305      	movs	r3, #5
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x21c>
 800151a:	2304      	movs	r3, #4
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x21c>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x21c>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x21c>
 800152a:	2300      	movs	r3, #0
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153c:	4935      	ldr	r1, [pc, #212]	; (8001614 <HAL_GPIO_Init+0x304>)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154a:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <HAL_GPIO_Init+0x324>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800156e:	4a31      	ldr	r2, [pc, #196]	; (8001634 <HAL_GPIO_Init+0x324>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x324>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <HAL_GPIO_Init+0x324>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_GPIO_Init+0x324>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <HAL_GPIO_Init+0x324>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_GPIO_Init+0x324>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ec:	4a11      	ldr	r2, [pc, #68]	; (8001634 <HAL_GPIO_Init+0x324>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	2b0f      	cmp	r3, #15
 80015fc:	f67f ae96 	bls.w	800132c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40013800 	.word	0x40013800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020400 	.word	0x40020400
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40013c00 	.word	0x40013c00

08001638 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e0c7      	b.n	80017e4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001654:	2201      	movs	r2, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	429a      	cmp	r2, r3
 800166c:	f040 80b7 	bne.w	80017de <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001670:	4a62      	ldr	r2, [pc, #392]	; (80017fc <HAL_GPIO_DeInit+0x1c4>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	4013      	ands	r3, r2
 8001690:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <HAL_GPIO_DeInit+0x1c8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d025      	beq.n	80016e6 <HAL_GPIO_DeInit+0xae>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a59      	ldr	r2, [pc, #356]	; (8001804 <HAL_GPIO_DeInit+0x1cc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01f      	beq.n	80016e2 <HAL_GPIO_DeInit+0xaa>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_GPIO_DeInit+0x1d0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_DeInit+0xa6>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_GPIO_DeInit+0x1d4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_DeInit+0xa2>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a56      	ldr	r2, [pc, #344]	; (8001810 <HAL_GPIO_DeInit+0x1d8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_DeInit+0x9e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a55      	ldr	r2, [pc, #340]	; (8001814 <HAL_GPIO_DeInit+0x1dc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_DeInit+0x9a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a54      	ldr	r2, [pc, #336]	; (8001818 <HAL_GPIO_DeInit+0x1e0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_DeInit+0x96>
 80016ca:	2306      	movs	r3, #6
 80016cc:	e00c      	b.n	80016e8 <HAL_GPIO_DeInit+0xb0>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e00a      	b.n	80016e8 <HAL_GPIO_DeInit+0xb0>
 80016d2:	2305      	movs	r3, #5
 80016d4:	e008      	b.n	80016e8 <HAL_GPIO_DeInit+0xb0>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_DeInit+0xb0>
 80016da:	2303      	movs	r3, #3
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_DeInit+0xb0>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_DeInit+0xb0>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_DeInit+0xb0>
 80016e6:	2300      	movs	r3, #0
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d132      	bne.n	800175e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80016f8:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	4946      	ldr	r1, [pc, #280]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 8001702:	4013      	ands	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	4943      	ldr	r1, [pc, #268]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 8001710:	4013      	ands	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	493f      	ldr	r1, [pc, #252]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 800171e:	4013      	ands	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001722:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	493c      	ldr	r1, [pc, #240]	; (800181c <HAL_GPIO_DeInit+0x1e4>)
 800172c:	4013      	ands	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001740:	4a2e      	ldr	r2, [pc, #184]	; (80017fc <HAL_GPIO_DeInit+0x1c4>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	43da      	mvns	r2, r3
 8001750:	482a      	ldr	r0, [pc, #168]	; (80017fc <HAL_GPIO_DeInit+0x1c4>)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	400a      	ands	r2, r1
 8001758:	3302      	adds	r3, #2
 800175a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2103      	movs	r1, #3
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	08d2      	lsrs	r2, r2, #3
 8001794:	4019      	ands	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2103      	movs	r1, #3
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2101      	movs	r1, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2103      	movs	r1, #3
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	401a      	ands	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f af34 	bls.w	8001654 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40013800 	.word	0x40013800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021000 	.word	0x40021000
 8001814:	40021400 	.word	0x40021400
 8001818:	40021800 	.word	0x40021800
 800181c:	40013c00 	.word	0x40013c00

08001820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	e001      	b.n	8001842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e12b      	b.n	8001aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff f94a 	bl	8000b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2224      	movs	r2, #36	; 0x24
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e8:	f001 fede 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 80018ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a81      	ldr	r2, [pc, #516]	; (8001af8 <HAL_I2C_Init+0x274>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d807      	bhi.n	8001908 <HAL_I2C_Init+0x84>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4a80      	ldr	r2, [pc, #512]	; (8001afc <HAL_I2C_Init+0x278>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	bf94      	ite	ls
 8001900:	2301      	movls	r3, #1
 8001902:	2300      	movhi	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	e006      	b.n	8001916 <HAL_I2C_Init+0x92>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a7d      	ldr	r2, [pc, #500]	; (8001b00 <HAL_I2C_Init+0x27c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e0e7      	b.n	8001aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a78      	ldr	r2, [pc, #480]	; (8001b04 <HAL_I2C_Init+0x280>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0c9b      	lsrs	r3, r3, #18
 8001928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4a6a      	ldr	r2, [pc, #424]	; (8001af8 <HAL_I2C_Init+0x274>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d802      	bhi.n	8001958 <HAL_I2C_Init+0xd4>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3301      	adds	r3, #1
 8001956:	e009      	b.n	800196c <HAL_I2C_Init+0xe8>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	4a69      	ldr	r2, [pc, #420]	; (8001b08 <HAL_I2C_Init+0x284>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	3301      	adds	r3, #1
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	430b      	orrs	r3, r1
 8001972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800197e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	495c      	ldr	r1, [pc, #368]	; (8001af8 <HAL_I2C_Init+0x274>)
 8001988:	428b      	cmp	r3, r1
 800198a:	d819      	bhi.n	80019c0 <HAL_I2C_Init+0x13c>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1e59      	subs	r1, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fbb1 f3f3 	udiv	r3, r1, r3
 800199a:	1c59      	adds	r1, r3, #1
 800199c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019a0:	400b      	ands	r3, r1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <HAL_I2C_Init+0x138>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e59      	subs	r1, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ba:	e051      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 80019bc:	2304      	movs	r3, #4
 80019be:	e04f      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d111      	bne.n	80019ec <HAL_I2C_Init+0x168>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	440b      	add	r3, r1
 80019d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e012      	b.n	8001a12 <HAL_I2C_Init+0x18e>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1e58      	subs	r0, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	0099      	lsls	r1, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Init+0x196>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e022      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10e      	bne.n	8001a40 <HAL_I2C_Init+0x1bc>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1e58      	subs	r0, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6859      	ldr	r1, [r3, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	440b      	add	r3, r1
 8001a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3e:	e00f      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e58      	subs	r0, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	0099      	lsls	r1, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	6809      	ldr	r1, [r1, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6911      	ldr	r1, [r2, #16]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68d2      	ldr	r2, [r2, #12]
 8001a9a:	4311      	orrs	r1, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	000186a0 	.word	0x000186a0
 8001afc:	001e847f 	.word	0x001e847f
 8001b00:	003d08ff 	.word	0x003d08ff
 8001b04:	431bde83 	.word	0x431bde83
 8001b08:	10624dd3 	.word	0x10624dd3

08001b0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d003      	beq.n	8001b44 <HAL_I2C_EV_IRQHandler+0x38>
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b40      	cmp	r3, #64	; 0x40
 8001b40:	f040 80c1 	bne.w	8001cc6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10d      	bne.n	8001b7a <HAL_I2C_EV_IRQHandler+0x6e>
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001b64:	d003      	beq.n	8001b6e <HAL_I2C_EV_IRQHandler+0x62>
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2C_EV_IRQHandler+0x66>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_I2C_EV_IRQHandler+0x68>
 8001b72:	2300      	movs	r3, #0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f000 8132 	beq.w	8001dde <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <HAL_I2C_EV_IRQHandler+0x92>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f001 fc7b 	bl	800348c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fd83 	bl	80026a2 <I2C_Master_SB>
 8001b9c:	e092      	b.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_I2C_EV_IRQHandler+0xb2>
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	0a5b      	lsrs	r3, r3, #9
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fdf9 	bl	80027ae <I2C_Master_ADD10>
 8001bbc:	e082      	b.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_I2C_EV_IRQHandler+0xd2>
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	0a5b      	lsrs	r3, r3, #9
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fe13 	bl	8002802 <I2C_Master_ADDR>
 8001bdc:	e072      	b.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d03b      	beq.n	8001c62 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf8:	f000 80f3 	beq.w	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	09db      	lsrs	r3, r3, #7
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00f      	beq.n	8001c28 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f9f3 	bl	800200c <I2C_MasterTransmit_TXE>
 8001c26:	e04d      	b.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80d6 	beq.w	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	0a5b      	lsrs	r3, r3, #9
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80cf 	beq.w	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	2b21      	cmp	r3, #33	; 0x21
 8001c48:	d103      	bne.n	8001c52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fa7a 	bl	8002144 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c50:	e0c7      	b.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	f040 80c4 	bne.w	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fae8 	bl	8002230 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c60:	e0bf      	b.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c70:	f000 80b7 	beq.w	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00f      	beq.n	8001ca0 <HAL_I2C_EV_IRQHandler+0x194>
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <HAL_I2C_EV_IRQHandler+0x194>
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fb5d 	bl	8002358 <I2C_MasterReceive_RXNE>
 8001c9e:	e011      	b.n	8001cc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 809a 	beq.w	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	0a5b      	lsrs	r3, r3, #9
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8093 	beq.w	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fc06 	bl	80024ce <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cc2:	e08e      	b.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001cc4:	e08d      	b.n	8001de2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e007      	b.n	8001ce8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x20e>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	0a5b      	lsrs	r3, r3, #9
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00c      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d10:	69b9      	ldr	r1, [r7, #24]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 ffc4 	bl	8002ca0 <I2C_Slave_ADDR>
 8001d18:	e066      	b.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_I2C_EV_IRQHandler+0x22e>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	0a5b      	lsrs	r3, r3, #9
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fffe 	bl	8002d34 <I2C_Slave_STOPF>
 8001d38:	e056      	b.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d3a:	7bbb      	ldrb	r3, [r7, #14]
 8001d3c:	2b21      	cmp	r3, #33	; 0x21
 8001d3e:	d002      	beq.n	8001d46 <HAL_I2C_EV_IRQHandler+0x23a>
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	2b29      	cmp	r3, #41	; 0x29
 8001d44:	d125      	bne.n	8001d92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	09db      	lsrs	r3, r3, #7
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00f      	beq.n	8001d72 <HAL_I2C_EV_IRQHandler+0x266>
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	0a9b      	lsrs	r3, r3, #10
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_I2C_EV_IRQHandler+0x266>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 feda 	bl	8002b24 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d70:	e039      	b.n	8001de6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d033      	beq.n	8001de6 <HAL_I2C_EV_IRQHandler+0x2da>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	0a5b      	lsrs	r3, r3, #9
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d02d      	beq.n	8001de6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 ff07 	bl	8002b9e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d90:	e029      	b.n	8001de6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00f      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	0a9b      	lsrs	r3, r3, #10
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 ff12 	bl	8002be0 <I2C_SlaveReceive_RXNE>
 8001dbc:	e014      	b.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00e      	beq.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	0a5b      	lsrs	r3, r3, #9
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d008      	beq.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 ff40 	bl	8002c5c <I2C_SlaveReceive_BTF>
 8001ddc:	e004      	b.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001dde:	bf00      	nop
 8001de0:	e002      	b.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de2:	bf00      	nop
 8001de4:	e000      	b.n	8001de8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001de6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b08a      	sub	sp, #40	; 0x28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <HAL_I2C_ER_IRQHandler+0x4e>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	0a5b      	lsrs	r3, r3, #9
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00e      	beq.n	8001e66 <HAL_I2C_ER_IRQHandler+0x78>
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001e64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	0a9b      	lsrs	r3, r3, #10
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03f      	beq.n	8001ef2 <HAL_I2C_ER_IRQHandler+0x104>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d039      	beq.n	8001ef2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001e7e:	7efb      	ldrb	r3, [r7, #27]
 8001e80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001e98:	7ebb      	ldrb	r3, [r7, #26]
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d112      	bne.n	8001ec4 <HAL_I2C_ER_IRQHandler+0xd6>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10f      	bne.n	8001ec4 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	2b21      	cmp	r3, #33	; 0x21
 8001ea8:	d008      	beq.n	8001ebc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001eaa:	7cfb      	ldrb	r3, [r7, #19]
 8001eac:	2b29      	cmp	r3, #41	; 0x29
 8001eae:	d005      	beq.n	8001ebc <HAL_I2C_ER_IRQHandler+0xce>
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	2b28      	cmp	r3, #40	; 0x28
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b21      	cmp	r3, #33	; 0x21
 8001eba:	d103      	bne.n	8001ec4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f001 f869 	bl	8002f94 <I2C_Slave_AF>
 8001ec2:	e016      	b.n	8001ef2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ecc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ed6:	7efb      	ldrb	r3, [r7, #27]
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d002      	beq.n	8001ee2 <HAL_I2C_ER_IRQHandler+0xf4>
 8001edc:	7efb      	ldrb	r3, [r7, #27]
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d107      	bne.n	8001ef2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	0adb      	lsrs	r3, r3, #11
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00e      	beq.n	8001f1c <HAL_I2C_ER_IRQHandler+0x12e>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f1a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f001 f8a0 	bl	8003074 <I2C_ITError>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002022:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d150      	bne.n	80020d4 <I2C_MasterTransmit_TXE+0xc8>
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	2b21      	cmp	r3, #33	; 0x21
 8002036:	d14d      	bne.n	80020d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d01d      	beq.n	800207a <I2C_MasterTransmit_TXE+0x6e>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b20      	cmp	r3, #32
 8002042:	d01a      	beq.n	800207a <I2C_MasterTransmit_TXE+0x6e>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800204a:	d016      	beq.n	800207a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800205a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2211      	movs	r2, #17
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff62 	bl	8001f3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002078:	e060      	b.n	800213c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002088:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002098:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d107      	bne.n	80020c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff7d 	bl	8001fbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020c2:	e03b      	b.n	800213c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff35 	bl	8001f3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020d2:	e033      	b.n	800213c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b21      	cmp	r3, #33	; 0x21
 80020d8:	d005      	beq.n	80020e6 <I2C_MasterTransmit_TXE+0xda>
 80020da:	7bbb      	ldrb	r3, [r7, #14]
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d12d      	bne.n	800213c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b22      	cmp	r3, #34	; 0x22
 80020e4:	d12a      	bne.n	800213c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d108      	bne.n	8002102 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002100:	e01c      	b.n	800213c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d103      	bne.n	8002116 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f88e 	bl	8002230 <I2C_MemoryTransmit_TXE_BTF>
}
 8002114:	e012      	b.n	800213c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800213a:	e7ff      	b.n	800213c <I2C_MasterTransmit_TXE+0x130>
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b21      	cmp	r3, #33	; 0x21
 800215c:	d164      	bne.n	8002228 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800218c:	e04c      	b.n	8002228 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d01d      	beq.n	80021d0 <I2C_MasterTransmit_BTF+0x8c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b20      	cmp	r3, #32
 8002198:	d01a      	beq.n	80021d0 <I2C_MasterTransmit_BTF+0x8c>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021a0:	d016      	beq.n	80021d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2211      	movs	r2, #17
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff feb7 	bl	8001f3c <HAL_I2C_MasterTxCpltCallback>
}
 80021ce:	e02b      	b.n	8002228 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d107      	bne.n	800221a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fed2 	bl	8001fbc <HAL_I2C_MemTxCpltCallback>
}
 8002218:	e006      	b.n	8002228 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fe8a 	bl	8001f3c <HAL_I2C_MasterTxCpltCallback>
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11d      	bne.n	8002284 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d10b      	bne.n	8002268 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002254:	b2da      	uxtb	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002260:	1c9a      	adds	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002266:	e073      	b.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226c:	b29b      	uxth	r3, r3
 800226e:	121b      	asrs	r3, r3, #8
 8002270:	b2da      	uxtb	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002282:	e065      	b.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10b      	bne.n	80022a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002290:	b2da      	uxtb	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022a2:	e055      	b.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d151      	bne.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b22      	cmp	r3, #34	; 0x22
 80022b0:	d10d      	bne.n	80022ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022cc:	e040      	b.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b21      	cmp	r3, #33	; 0x21
 80022dc:	d112      	bne.n	8002304 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002302:	e025      	b.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d120      	bne.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b21      	cmp	r3, #33	; 0x21
 8002312:	d11d      	bne.n	8002350 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002322:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fe36 	bl	8001fbc <HAL_I2C_MemTxCpltCallback>
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b22      	cmp	r3, #34	; 0x22
 800236a:	f040 80ac 	bne.w	80024c6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d921      	bls.n	80023c0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	f040 808c 	bne.w	80024c6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023bc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80023be:	e082      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d075      	beq.n	80024b4 <I2C_MasterReceive_RXNE+0x15c>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d002      	beq.n	80023d4 <I2C_MasterReceive_RXNE+0x7c>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d16f      	bne.n	80024b4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f001 f827 	bl	8003428 <I2C_WaitOnSTOPRequestThroughIT>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d142      	bne.n	8002466 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d10a      	bne.n	8002450 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fdc1 	bl	8001fd0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800244e:	e03a      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2212      	movs	r2, #18
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fd76 	bl	8001f50 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002464:	e02f      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002474:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fd99 	bl	8001fe4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024b2:	e008      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c2:	605a      	str	r2, [r3, #4]
}
 80024c4:	e7ff      	b.n	80024c6 <I2C_MasterReceive_RXNE+0x16e>
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d11b      	bne.n	800251e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800251c:	e0bd      	b.n	800269a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d129      	bne.n	800257c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002536:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00a      	beq.n	8002554 <I2C_MasterReceive_BTF+0x86>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d007      	beq.n	8002554 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800257a:	e08e      	b.n	800269a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d176      	bne.n	8002674 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d002      	beq.n	8002592 <I2C_MasterReceive_BTF+0xc4>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d108      	bne.n	80025a4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e019      	b.n	80025d8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d002      	beq.n	80025b0 <I2C_MasterReceive_BTF+0xe2>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d108      	bne.n	80025c2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e00a      	b.n	80025d8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d007      	beq.n	80025d8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002632:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d10a      	bne.n	800265e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fcba 	bl	8001fd0 <HAL_I2C_MemRxCpltCallback>
}
 800265c:	e01d      	b.n	800269a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2212      	movs	r2, #18
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fc6f 	bl	8001f50 <HAL_I2C_MasterRxCpltCallback>
}
 8002672:	e012      	b.n	800269a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d117      	bne.n	80026e6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026ce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80026d0:	e067      	b.n	80027a2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	611a      	str	r2, [r3, #16]
}
 80026e4:	e05d      	b.n	80027a2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ee:	d133      	bne.n	8002758 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b21      	cmp	r3, #33	; 0x21
 80026fa:	d109      	bne.n	8002710 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	e008      	b.n	8002722 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <I2C_Master_SB+0x92>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <I2C_Master_SB+0x100>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d02d      	beq.n	80027a2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002754:	605a      	str	r2, [r3, #4]
}
 8002756:	e024      	b.n	80027a2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10e      	bne.n	800277e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	b29b      	uxth	r3, r3
 8002766:	11db      	asrs	r3, r3, #7
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0306 	and.w	r3, r3, #6
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f063 030f 	orn	r3, r3, #15
 8002774:	b2da      	uxtb	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]
}
 800277c:	e011      	b.n	80027a2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10d      	bne.n	80027a2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	b29b      	uxth	r3, r3
 800278c:	11db      	asrs	r3, r3, #7
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f003 0306 	and.w	r3, r3, #6
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f063 030e 	orn	r3, r3, #14
 800279a:	b2da      	uxtb	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	611a      	str	r2, [r3, #16]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <I2C_Master_ADD10+0x26>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d108      	bne.n	80027e6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00c      	beq.n	80027f6 <I2C_Master_ADD10+0x48>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f4:	605a      	str	r2, [r3, #4]
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002802:	b480      	push	{r7}
 8002804:	b091      	sub	sp, #68	; 0x44
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b22      	cmp	r3, #34	; 0x22
 800282a:	f040 8169 	bne.w	8002b00 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <I2C_Master_ADDR+0x54>
 8002836:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d10b      	bne.n	8002856 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	633b      	str	r3, [r7, #48]	; 0x30
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	e160      	b.n	8002b18 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11d      	bne.n	800289a <I2C_Master_ADDR+0x98>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002866:	d118      	bne.n	800289a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800288c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	651a      	str	r2, [r3, #80]	; 0x50
 8002898:	e13e      	b.n	8002b18 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d113      	bne.n	80028cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e115      	b.n	8002af8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	f040 808a 	bne.w	80029ec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80028d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028de:	d137      	bne.n	8002950 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fe:	d113      	bne.n	8002928 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	e0e7      	b.n	8002af8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	623b      	str	r3, [r7, #32]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e0d3      	b.n	8002af8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	2b08      	cmp	r3, #8
 8002954:	d02e      	beq.n	80029b4 <I2C_Master_ADDR+0x1b2>
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	2b20      	cmp	r3, #32
 800295a:	d02b      	beq.n	80029b4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295e:	2b12      	cmp	r3, #18
 8002960:	d102      	bne.n	8002968 <I2C_Master_ADDR+0x166>
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	2b01      	cmp	r3, #1
 8002966:	d125      	bne.n	80029b4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	2b04      	cmp	r3, #4
 800296c:	d00e      	beq.n	800298c <I2C_Master_ADDR+0x18a>
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	2b02      	cmp	r3, #2
 8002972:	d00b      	beq.n	800298c <I2C_Master_ADDR+0x18a>
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	2b10      	cmp	r3, #16
 8002978:	d008      	beq.n	800298c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e007      	b.n	800299c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800299a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	e0a1      	b.n	8002af8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e085      	b.n	8002af8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d14d      	bne.n	8002a92 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d016      	beq.n	8002a2a <I2C_Master_ADDR+0x228>
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d013      	beq.n	8002a2a <I2C_Master_ADDR+0x228>
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d010      	beq.n	8002a2a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a16:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e007      	b.n	8002a3a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a38:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a48:	d117      	bne.n	8002a7a <I2C_Master_ADDR+0x278>
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a50:	d00b      	beq.n	8002a6a <I2C_Master_ADDR+0x268>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d008      	beq.n	8002a6a <I2C_Master_ADDR+0x268>
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d005      	beq.n	8002a6a <I2C_Master_ADDR+0x268>
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d002      	beq.n	8002a6a <I2C_Master_ADDR+0x268>
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d107      	bne.n	8002a7a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	e032      	b.n	8002af8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aa0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab0:	d117      	bne.n	8002ae2 <I2C_Master_ADDR+0x2e0>
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab8:	d00b      	beq.n	8002ad2 <I2C_Master_ADDR+0x2d0>
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d008      	beq.n	8002ad2 <I2C_Master_ADDR+0x2d0>
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d005      	beq.n	8002ad2 <I2C_Master_ADDR+0x2d0>
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d002      	beq.n	8002ad2 <I2C_Master_ADDR+0x2d0>
 8002acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d107      	bne.n	8002ae2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ae0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002afe:	e00b      	b.n	8002b18 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
}
 8002b16:	e7ff      	b.n	8002b18 <I2C_Master_ADDR+0x316>
 8002b18:	bf00      	nop
 8002b1a:	3744      	adds	r7, #68	; 0x44
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d02b      	beq.n	8002b96 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d114      	bne.n	8002b96 <I2C_SlaveTransmit_TXE+0x72>
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b29      	cmp	r3, #41	; 0x29
 8002b70:	d111      	bne.n	8002b96 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2221      	movs	r2, #33	; 0x21
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2228      	movs	r2, #40	; 0x28
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff f9e7 	bl	8001f64 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d011      	beq.n	8002bd4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d02c      	beq.n	8002c54 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d114      	bne.n	8002c54 <I2C_SlaveReceive_RXNE+0x74>
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c2e:	d111      	bne.n	8002c54 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2222      	movs	r2, #34	; 0x22
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2228      	movs	r2, #40	; 0x28
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff f992 	bl	8001f78 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d012      	beq.n	8002c94 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cba:	2b28      	cmp	r3, #40	; 0x28
 8002cbc:	d127      	bne.n	8002d0e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ccc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	09db      	lsrs	r3, r3, #7
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	81bb      	strh	r3, [r7, #12]
 8002cf0:	e002      	b.n	8002cf8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d00:	89ba      	ldrh	r2, [r7, #12]
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff f940 	bl	8001f8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d0c:	e00e      	b.n	8002d2c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d52:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d80:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d90:	d172      	bne.n	8002e78 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b22      	cmp	r3, #34	; 0x22
 8002d96:	d002      	beq.n	8002d9e <I2C_Slave_STOPF+0x6a>
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d9c:	d135      	bne.n	8002e0a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fa8c 	bl	80012f4 <HAL_DMA_GetState>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d049      	beq.n	8002e76 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	4a69      	ldr	r2, [pc, #420]	; (8002f8c <I2C_Slave_STOPF+0x258>)
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fa5e 	bl	80012b0 <HAL_DMA_Abort_IT>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03d      	beq.n	8002e76 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e04:	4610      	mov	r0, r2
 8002e06:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e08:	e035      	b.n	8002e76 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fa56 	bl	80012f4 <HAL_DMA_GetState>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d014      	beq.n	8002e78 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	4a4e      	ldr	r2, [pc, #312]	; (8002f8c <I2C_Slave_STOPF+0x258>)
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fa28 	bl	80012b0 <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e70:	4610      	mov	r0, r2
 8002e72:	4798      	blx	r3
 8002e74:	e000      	b.n	8002e78 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e76:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d03e      	beq.n	8002f00 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d112      	bne.n	8002eb6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d112      	bne.n	8002eea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0204 	orr.w	r2, r3, #4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8b3 	bl	8003074 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f0e:	e039      	b.n	8002f84 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b2a      	cmp	r3, #42	; 0x2a
 8002f14:	d109      	bne.n	8002f2a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2228      	movs	r2, #40	; 0x28
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff f827 	bl	8001f78 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b28      	cmp	r3, #40	; 0x28
 8002f34:	d111      	bne.n	8002f5a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <I2C_Slave_STOPF+0x25c>)
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff f828 	bl	8001fa8 <HAL_I2C_ListenCpltCallback>
}
 8002f58:	e014      	b.n	8002f84 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	2b22      	cmp	r3, #34	; 0x22
 8002f60:	d002      	beq.n	8002f68 <I2C_Slave_STOPF+0x234>
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b22      	cmp	r3, #34	; 0x22
 8002f66:	d10d      	bne.n	8002f84 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fffa 	bl	8001f78 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	080032d9 	.word	0x080032d9
 8002f90:	ffff0000 	.word	0xffff0000

08002f94 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d002      	beq.n	8002fb6 <I2C_Slave_AF+0x22>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d129      	bne.n	800300a <I2C_Slave_AF+0x76>
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b28      	cmp	r3, #40	; 0x28
 8002fba:	d126      	bne.n	800300a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <I2C_Slave_AF+0xdc>)
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fd0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fda:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe ffd0 	bl	8001fa8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003008:	e02e      	b.n	8003068 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b21      	cmp	r3, #33	; 0x21
 800300e:	d126      	bne.n	800305e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a17      	ldr	r2, [pc, #92]	; (8003070 <I2C_Slave_AF+0xdc>)
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2221      	movs	r2, #33	; 0x21
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003044:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003054:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe ff84 	bl	8001f64 <HAL_I2C_SlaveTxCpltCallback>
}
 800305c:	e004      	b.n	8003068 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003066:	615a      	str	r2, [r3, #20]
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	ffff0000 	.word	0xffff0000

08003074 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800308a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	2b10      	cmp	r3, #16
 8003090:	d002      	beq.n	8003098 <I2C_ITError+0x24>
 8003092:	7bbb      	ldrb	r3, [r7, #14]
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d10a      	bne.n	80030ae <I2C_ITError+0x3a>
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b22      	cmp	r3, #34	; 0x22
 800309c:	d107      	bne.n	80030ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030b4:	2b28      	cmp	r3, #40	; 0x28
 80030b6:	d107      	bne.n	80030c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2228      	movs	r2, #40	; 0x28
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030c6:	e015      	b.n	80030f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	d00a      	beq.n	80030ee <I2C_ITError+0x7a>
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b60      	cmp	r3, #96	; 0x60
 80030dc:	d007      	beq.n	80030ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003102:	d162      	bne.n	80031ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003112:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d020      	beq.n	8003164 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	4a6a      	ldr	r2, [pc, #424]	; (80032d0 <I2C_ITError+0x25c>)
 8003128:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe f8be 	bl	80012b0 <HAL_DMA_Abort_IT>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8089 	beq.w	800324e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800315e:	4610      	mov	r0, r2
 8003160:	4798      	blx	r3
 8003162:	e074      	b.n	800324e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	4a59      	ldr	r2, [pc, #356]	; (80032d0 <I2C_ITError+0x25c>)
 800316a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe f89d 	bl	80012b0 <HAL_DMA_Abort_IT>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d068      	beq.n	800324e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d10b      	bne.n	80031a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031c4:	4610      	mov	r0, r2
 80031c6:	4798      	blx	r3
 80031c8:	e041      	b.n	800324e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b60      	cmp	r3, #96	; 0x60
 80031d4:	d125      	bne.n	8003222 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d10b      	bne.n	800320a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe feec 	bl	8001ff8 <HAL_I2C_AbortCpltCallback>
 8003220:	e015      	b.n	800324e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d10b      	bne.n	8003248 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fe fecb 	bl	8001fe4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10e      	bne.n	800327c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003292:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d113      	bne.n	80032c8 <I2C_ITError+0x254>
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b28      	cmp	r3, #40	; 0x28
 80032a4:	d110      	bne.n	80032c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <I2C_ITError+0x260>)
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe fe70 	bl	8001fa8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	080032d9 	.word	0x080032d9
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032f2:	4b4b      	ldr	r3, [pc, #300]	; (8003420 <I2C_DMAAbort+0x148>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	08db      	lsrs	r3, r3, #3
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <I2C_DMAAbort+0x14c>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	0a1a      	lsrs	r2, r3, #8
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00da      	lsls	r2, r3, #3
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800331e:	e00a      	b.n	8003336 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3b01      	subs	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	d0ea      	beq.n	800330c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	2200      	movs	r2, #0
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	2200      	movs	r2, #0
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	2200      	movs	r2, #0
 800337a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	2200      	movs	r2, #0
 800338a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d10e      	bne.n	80033c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2200      	movs	r2, #0
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7fe fe1a 	bl	8001ff8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033c4:	e027      	b.n	8003416 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033cc:	2b28      	cmp	r3, #40	; 0x28
 80033ce:	d117      	bne.n	8003400 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2228      	movs	r2, #40	; 0x28
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033fe:	e007      	b.n	8003410 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003410:	6978      	ldr	r0, [r7, #20]
 8003412:	f7fe fde7 	bl	8001fe4 <HAL_I2C_ErrorCallback>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000000 	.word	0x20000000
 8003424:	14f8b589 	.word	0x14f8b589

08003428 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	08db      	lsrs	r3, r3, #3
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0a1a      	lsrs	r2, r3, #8
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b01      	subs	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e008      	b.n	8003478 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003474:	d0e9      	beq.n	800344a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20000000 	.word	0x20000000
 8003488:	14f8b589 	.word	0x14f8b589

0800348c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800349c:	d103      	bne.n	80034a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034a4:	e007      	b.n	80034b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034ae:	d102      	bne.n	80034b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2208      	movs	r2, #8
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0cc      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b68      	ldr	r3, [pc, #416]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d90c      	bls.n	8003500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d044      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d003      	beq.n	8003582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	2b03      	cmp	r3, #3
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e067      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4934      	ldr	r1, [pc, #208]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fd fd5c 	bl	8001070 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fd fd58 	bl	8001070 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d20c      	bcs.n	800360c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f887 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490a      	ldr	r1, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fbca 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00
 8003680:	40023800 	.word	0x40023800
 8003684:	080081d8 	.word	0x080081d8
 8003688:	20000000 	.word	0x20000000
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000000 	.word	0x20000000

080036a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036ac:	f7ff fff0 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0a9b      	lsrs	r3, r3, #10
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080081e8 	.word	0x080081e8

080036d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036d4:	f7ff ffdc 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0b5b      	lsrs	r3, r3, #13
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4903      	ldr	r1, [pc, #12]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	080081e8 	.word	0x080081e8

080036f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	220f      	movs	r2, #15
 8003706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_RCC_GetClockConfig+0x5c>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0203 	and.w	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_RCC_GetClockConfig+0x5c>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_RCC_GetClockConfig+0x5c>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_GetClockConfig+0x5c>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_RCC_GetClockConfig+0x60>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	601a      	str	r2, [r3, #0]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	40023c00 	.word	0x40023c00

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003760:	b0ae      	sub	sp, #184	; 0xb8
 8003762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003782:	4bcb      	ldr	r3, [pc, #812]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b0c      	cmp	r3, #12
 800378c:	f200 8206 	bhi.w	8003b9c <HAL_RCC_GetSysClockFreq+0x440>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037cd 	.word	0x080037cd
 800379c:	08003b9d 	.word	0x08003b9d
 80037a0:	08003b9d 	.word	0x08003b9d
 80037a4:	08003b9d 	.word	0x08003b9d
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	08003b9d 	.word	0x08003b9d
 80037b0:	08003b9d 	.word	0x08003b9d
 80037b4:	08003b9d 	.word	0x08003b9d
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	08003b9d 	.word	0x08003b9d
 80037c0:	08003b9d 	.word	0x08003b9d
 80037c4:	08003b9d 	.word	0x08003b9d
 80037c8:	080039cd 	.word	0x080039cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4bb9      	ldr	r3, [pc, #740]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x358>)
 80037ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80037d2:	e1e7      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d4:	4bb8      	ldr	r3, [pc, #736]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80037d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037da:	e1e3      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4bb4      	ldr	r3, [pc, #720]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e8:	4bb1      	ldr	r3, [pc, #708]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d071      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f4:	4bae      	ldr	r3, [pc, #696]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003800:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800381a:	4622      	mov	r2, r4
 800381c:	462b      	mov	r3, r5
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	0159      	lsls	r1, r3, #5
 8003828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382c:	0150      	lsls	r0, r2, #5
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4621      	mov	r1, r4
 8003834:	1a51      	subs	r1, r2, r1
 8003836:	6439      	str	r1, [r7, #64]	; 0x40
 8003838:	4629      	mov	r1, r5
 800383a:	eb63 0301 	sbc.w	r3, r3, r1
 800383e:	647b      	str	r3, [r7, #68]	; 0x44
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800384c:	4649      	mov	r1, r9
 800384e:	018b      	lsls	r3, r1, #6
 8003850:	4641      	mov	r1, r8
 8003852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003856:	4641      	mov	r1, r8
 8003858:	018a      	lsls	r2, r1, #6
 800385a:	4641      	mov	r1, r8
 800385c:	1a51      	subs	r1, r2, r1
 800385e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003860:	4649      	mov	r1, r9
 8003862:	eb63 0301 	sbc.w	r3, r3, r1
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003874:	4649      	mov	r1, r9
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4641      	mov	r1, r8
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4641      	mov	r1, r8
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4622      	mov	r2, r4
 800388a:	189b      	adds	r3, r3, r2
 800388c:	633b      	str	r3, [r7, #48]	; 0x30
 800388e:	462b      	mov	r3, r5
 8003890:	460a      	mov	r2, r1
 8003892:	eb42 0303 	adc.w	r3, r2, r3
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038a4:	4629      	mov	r1, r5
 80038a6:	024b      	lsls	r3, r1, #9
 80038a8:	4621      	mov	r1, r4
 80038aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038ae:	4621      	mov	r1, r4
 80038b0:	024a      	lsls	r2, r1, #9
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80038c8:	f7fc fca2 	bl	8000210 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4613      	mov	r3, r2
 80038d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038d6:	e067      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d8:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80038e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80038f2:	2300      	movs	r3, #0
 80038f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80038fa:	4622      	mov	r2, r4
 80038fc:	462b      	mov	r3, r5
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	0159      	lsls	r1, r3, #5
 8003908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390c:	0150      	lsls	r0, r2, #5
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4621      	mov	r1, r4
 8003914:	1a51      	subs	r1, r2, r1
 8003916:	62b9      	str	r1, [r7, #40]	; 0x28
 8003918:	4629      	mov	r1, r5
 800391a:	eb63 0301 	sbc.w	r3, r3, r1
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800392c:	4649      	mov	r1, r9
 800392e:	018b      	lsls	r3, r1, #6
 8003930:	4641      	mov	r1, r8
 8003932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003936:	4641      	mov	r1, r8
 8003938:	018a      	lsls	r2, r1, #6
 800393a:	4641      	mov	r1, r8
 800393c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003940:	4649      	mov	r1, r9
 8003942:	eb63 0b01 	sbc.w	fp, r3, r1
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003952:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800395a:	4692      	mov	sl, r2
 800395c:	469b      	mov	fp, r3
 800395e:	4623      	mov	r3, r4
 8003960:	eb1a 0303 	adds.w	r3, sl, r3
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	462b      	mov	r3, r5
 8003968:	eb4b 0303 	adc.w	r3, fp, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800397a:	4629      	mov	r1, r5
 800397c:	028b      	lsls	r3, r1, #10
 800397e:	4621      	mov	r1, r4
 8003980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003984:	4621      	mov	r1, r4
 8003986:	028a      	lsls	r2, r1, #10
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003990:	2200      	movs	r2, #0
 8003992:	673b      	str	r3, [r7, #112]	; 0x70
 8003994:	677a      	str	r2, [r7, #116]	; 0x74
 8003996:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800399a:	f7fc fc39 	bl	8000210 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4613      	mov	r3, r2
 80039a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a8:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80039ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039ca:	e0eb      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d8:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d06b      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e4:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	2200      	movs	r2, #0
 80039ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	663b      	str	r3, [r7, #96]	; 0x60
 80039f8:	2300      	movs	r3, #0
 80039fa:	667b      	str	r3, [r7, #100]	; 0x64
 80039fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a00:	4622      	mov	r2, r4
 8003a02:	462b      	mov	r3, r5
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0159      	lsls	r1, r3, #5
 8003a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a12:	0150      	lsls	r0, r2, #5
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4621      	mov	r1, r4
 8003a1a:	1a51      	subs	r1, r2, r1
 8003a1c:	61b9      	str	r1, [r7, #24]
 8003a1e:	4629      	mov	r1, r5
 8003a20:	eb63 0301 	sbc.w	r3, r3, r1
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a32:	4659      	mov	r1, fp
 8003a34:	018b      	lsls	r3, r1, #6
 8003a36:	4651      	mov	r1, sl
 8003a38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	018a      	lsls	r2, r1, #6
 8003a40:	4651      	mov	r1, sl
 8003a42:	ebb2 0801 	subs.w	r8, r2, r1
 8003a46:	4659      	mov	r1, fp
 8003a48:	eb63 0901 	sbc.w	r9, r3, r1
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a60:	4690      	mov	r8, r2
 8003a62:	4699      	mov	r9, r3
 8003a64:	4623      	mov	r3, r4
 8003a66:	eb18 0303 	adds.w	r3, r8, r3
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	eb49 0303 	adc.w	r3, r9, r3
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a80:	4629      	mov	r1, r5
 8003a82:	024b      	lsls	r3, r1, #9
 8003a84:	4621      	mov	r1, r4
 8003a86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	024a      	lsls	r2, r1, #9
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a96:	2200      	movs	r2, #0
 8003a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003aa0:	f7fc fbb6 	bl	8000210 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aae:	e065      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x420>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abc:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
 8003ace:	2300      	movs	r3, #0
 8003ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003ad6:	4642      	mov	r2, r8
 8003ad8:	464b      	mov	r3, r9
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	0159      	lsls	r1, r3, #5
 8003ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae8:	0150      	lsls	r0, r2, #5
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4641      	mov	r1, r8
 8003af0:	1a51      	subs	r1, r2, r1
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	4649      	mov	r1, r9
 8003af6:	eb63 0301 	sbc.w	r3, r3, r1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b08:	4659      	mov	r1, fp
 8003b0a:	018b      	lsls	r3, r1, #6
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b12:	4651      	mov	r1, sl
 8003b14:	018a      	lsls	r2, r1, #6
 8003b16:	4651      	mov	r1, sl
 8003b18:	1a54      	subs	r4, r2, r1
 8003b1a:	4659      	mov	r1, fp
 8003b1c:	eb63 0501 	sbc.w	r5, r3, r1
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	00eb      	lsls	r3, r5, #3
 8003b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2e:	00e2      	lsls	r2, r4, #3
 8003b30:	4614      	mov	r4, r2
 8003b32:	461d      	mov	r5, r3
 8003b34:	4643      	mov	r3, r8
 8003b36:	18e3      	adds	r3, r4, r3
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	eb45 0303 	adc.w	r3, r5, r3
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	028b      	lsls	r3, r1, #10
 8003b52:	4621      	mov	r1, r4
 8003b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b58:	4621      	mov	r1, r4
 8003b5a:	028a      	lsls	r2, r1, #10
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b64:	2200      	movs	r2, #0
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b6e:	f7fc fb4f 	bl	8000210 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4613      	mov	r3, r2
 8003b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	0f1b      	lsrs	r3, r3, #28
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b9a:	e003      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ba2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	37b8      	adds	r7, #184	; 0xb8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400

08003bbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e28d      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8083 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bdc:	4b94      	ldr	r3, [pc, #592]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d019      	beq.n	8003c1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003be8:	4b91      	ldr	r3, [pc, #580]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bf4:	4b8e      	ldr	r3, [pc, #568]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c00:	d00c      	beq.n	8003c1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c02:	4b8b      	ldr	r3, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d112      	bne.n	8003c34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0e:	4b88      	ldr	r3, [pc, #544]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x124>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d157      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e25a      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCC_OscConfig+0x90>
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7b      	ldr	r2, [pc, #492]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e01d      	b.n	8003c88 <HAL_RCC_OscConfig+0xcc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0xb4>
 8003c56:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a75      	ldr	r2, [pc, #468]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b73      	ldr	r3, [pc, #460]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a72      	ldr	r2, [pc, #456]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0xcc>
 8003c70:	4b6f      	ldr	r3, [pc, #444]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6b      	ldr	r2, [pc, #428]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd f9ee 	bl	8001070 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd f9ea 	bl	8001070 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e21f      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xdc>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd f9da 	bl	8001070 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fd f9d6 	bl	8001070 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e20b      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x104>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d06f      	beq.n	8003dce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cee:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d017      	beq.n	8003d2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cfa:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d105      	bne.n	8003d12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d06:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d11c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1e:	4b44      	ldr	r3, [pc, #272]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_RCC_OscConfig+0x186>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e1d3      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d42:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4937      	ldr	r1, [pc, #220]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	e03a      	b.n	8003dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d60:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCC_OscConfig+0x278>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fd f983 	bl	8001070 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6e:	f7fd f97f 	bl	8001070 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e1b4      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4925      	ldr	r1, [pc, #148]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]
 8003da0:	e015      	b.n	8003dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_RCC_OscConfig+0x278>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fd f962 	bl	8001070 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db0:	f7fd f95e 	bl	8001070 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e193      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d036      	beq.n	8003e48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d016      	beq.n	8003e10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <HAL_RCC_OscConfig+0x27c>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fd f942 	bl	8001070 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df0:	f7fd f93e 	bl	8001070 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e173      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_OscConfig+0x274>)
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x234>
 8003e0e:	e01b      	b.n	8003e48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_OscConfig+0x27c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fd f92b 	bl	8001070 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	e00e      	b.n	8003e3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1e:	f7fd f927 	bl	8001070 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d907      	bls.n	8003e3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e15c      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
 8003e30:	40023800 	.word	0x40023800
 8003e34:	42470000 	.word	0x42470000
 8003e38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	4b8a      	ldr	r3, [pc, #552]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ea      	bne.n	8003e1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8097 	beq.w	8003f84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5a:	4b83      	ldr	r3, [pc, #524]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
 8003e76:	4b7c      	ldr	r3, [pc, #496]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b79      	ldr	r3, [pc, #484]	; (800406c <HAL_RCC_OscConfig+0x4b0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d118      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e92:	4b76      	ldr	r3, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x4b0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a75      	ldr	r2, [pc, #468]	; (800406c <HAL_RCC_OscConfig+0x4b0>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fd f8e7 	bl	8001070 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fd f8e3 	bl	8001070 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e118      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	4b6c      	ldr	r3, [pc, #432]	; (800406c <HAL_RCC_OscConfig+0x4b0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x31e>
 8003ecc:	4b66      	ldr	r3, [pc, #408]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a65      	ldr	r2, [pc, #404]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed8:	e01c      	b.n	8003f14 <HAL_RCC_OscConfig+0x358>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x340>
 8003ee2:	4b61      	ldr	r3, [pc, #388]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a60      	ldr	r2, [pc, #384]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a5d      	ldr	r2, [pc, #372]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0x358>
 8003efc:	4b5a      	ldr	r3, [pc, #360]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	4a59      	ldr	r2, [pc, #356]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	6713      	str	r3, [r2, #112]	; 0x70
 8003f08:	4b57      	ldr	r3, [pc, #348]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a56      	ldr	r2, [pc, #344]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f0e:	f023 0304 	bic.w	r3, r3, #4
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d015      	beq.n	8003f48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fd f8a8 	bl	8001070 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fd f8a4 	bl	8001070 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0d7      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3a:	4b4b      	ldr	r3, [pc, #300]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0ee      	beq.n	8003f24 <HAL_RCC_OscConfig+0x368>
 8003f46:	e014      	b.n	8003f72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f48:	f7fd f892 	bl	8001070 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f50:	f7fd f88e 	bl	8001070 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0c1      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f66:	4b40      	ldr	r3, [pc, #256]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1ee      	bne.n	8003f50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f78:	4b3b      	ldr	r3, [pc, #236]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	4a3a      	ldr	r2, [pc, #232]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80ad 	beq.w	80040e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f8e:	4b36      	ldr	r3, [pc, #216]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d060      	beq.n	800405c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d145      	bne.n	800402e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_RCC_OscConfig+0x4b4>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd f862 	bl	8001070 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd f85e 	bl	8001070 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e093      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b29      	ldr	r3, [pc, #164]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	491b      	ldr	r1, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x4b4>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fd f833 	bl	8001070 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f7fd f82f 	bl	8001070 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e064      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x452>
 800402c:	e05c      	b.n	80040e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_RCC_OscConfig+0x4b4>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd f81c 	bl	8001070 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd f818 	bl	8001070 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e04d      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_OscConfig+0x4ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x480>
 800405a:	e045      	b.n	80040e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e040      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
 8004068:	40023800 	.word	0x40023800
 800406c:	40007000 	.word	0x40007000
 8004070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_RCC_OscConfig+0x538>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d030      	beq.n	80040e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d129      	bne.n	80040e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d122      	bne.n	80040e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d119      	bne.n	80040e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d10f      	bne.n	80040e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023800 	.word	0x40023800

080040f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07b      	b.n	8004202 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411a:	d009      	beq.n	8004130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	e005      	b.n	8004130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fd52 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	ea42 0103 	orr.w	r1, r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	f003 0104 	and.w	r1, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0210 	and.w	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e01a      	b.n	8004252 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004232:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fc fd2d 	bl	8000c94 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	4613      	mov	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_SPI_Transmit_IT+0x20>
 8004278:	2302      	movs	r3, #2
 800427a:	e06f      	b.n	800435c <HAL_SPI_Transmit_IT+0x100>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Transmit_IT+0x34>
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004294:	e05d      	b.n	8004352 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d002      	beq.n	80042a8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042a6:	e054      	b.n	8004352 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2203      	movs	r2, #3
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <HAL_SPI_Transmit_IT+0x10c>)
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
 80042ee:	e002      	b.n	80042f6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a1e      	ldr	r2, [pc, #120]	; (800436c <HAL_SPI_Transmit_IT+0x110>)
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fe:	d10f      	bne.n	8004320 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800432e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d008      	beq.n	8004350 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e000      	b.n	8004352 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004350:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
}
 800435c:	4618      	mov	r0, r3
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	08004a7d 	.word	0x08004a7d
 800436c:	08004a37 	.word	0x08004a37

08004370 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d110      	bne.n	80043ac <HAL_SPI_Receive_IT+0x3c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d10b      	bne.n	80043ac <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2204      	movs	r2, #4
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f882 	bl	80044ac <HAL_SPI_TransmitReceive_IT>
 80043a8:	4603      	mov	r3, r0
 80043aa:	e076      	b.n	800449a <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_SPI_Receive_IT+0x4a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e06f      	b.n	800449a <HAL_SPI_Receive_IT+0x12a>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
 80043d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043d2:	e05d      	b.n	8004490 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_SPI_Receive_IT+0x70>
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043e4:	e054      	b.n	8004490 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2204      	movs	r2, #4
 80043ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	88fa      	ldrh	r2, [r7, #6]
 80043fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_SPI_Receive_IT+0x134>)
 800442a:	641a      	str	r2, [r3, #64]	; 0x40
 800442c:	e002      	b.n	8004434 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <HAL_SPI_Receive_IT+0x138>)
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443c:	d10f      	bne.n	800445e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800445c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800446c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d008      	beq.n	800448e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e000      	b.n	8004490 <HAL_SPI_Receive_IT+0x120>
  }

error :
 800448e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	080049f1 	.word	0x080049f1
 80044a8:	080049a7 	.word	0x080049a7

080044ac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_SPI_TransmitReceive_IT+0x20>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e075      	b.n	80045b8 <HAL_SPI_TransmitReceive_IT+0x10c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e2:	7dbb      	ldrb	r3, [r7, #22]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d00d      	beq.n	8004504 <HAL_SPI_TransmitReceive_IT+0x58>
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ee:	d106      	bne.n	80044fe <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <HAL_SPI_TransmitReceive_IT+0x52>
 80044f8:	7dbb      	ldrb	r3, [r7, #22]
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80044fe:	2302      	movs	r3, #2
 8004500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004502:	e054      	b.n	80045ae <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_SPI_TransmitReceive_IT+0x6a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004510:	887b      	ldrh	r3, [r7, #2]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
    goto error;
 800451a:	e048      	b.n	80045ae <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b04      	cmp	r3, #4
 8004526:	d003      	beq.n	8004530 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2205      	movs	r2, #5
 800452c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	887a      	ldrh	r2, [r7, #2]
 8004540:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	887a      	ldrh	r2, [r7, #2]
 8004546:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	887a      	ldrh	r2, [r7, #2]
 8004552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d006      	beq.n	8004570 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
 800456e:	e005      	b.n	800457c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a16      	ldr	r2, [pc, #88]	; (80045cc <HAL_SPI_TransmitReceive_IT+0x120>)
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_SPI_TransmitReceive_IT+0x124>)
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800458a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d008      	beq.n	80045ac <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e000      	b.n	80045ae <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80045ac:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	080048e9 	.word	0x080048e9
 80045c8:	08004949 	.word	0x08004949
 80045cc:	08004825 	.word	0x08004825
 80045d0:	08004889 	.word	0x08004889

080045d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10f      	bne.n	8004618 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
    return;
 8004616:	e0d7      	b.n	80047c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_SPI_IRQHandler+0x66>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	09db      	lsrs	r3, r3, #7
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
    return;
 8004638:	e0c6      	b.n	80047c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10c      	bne.n	8004660 <HAL_SPI_IRQHandler+0x8c>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80b4 	beq.w	80047c8 <HAL_SPI_IRQHandler+0x1f4>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80ad 	beq.w	80047c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d023      	beq.n	80046c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d011      	beq.n	80046aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f043 0204 	orr.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	e00b      	b.n	80046c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	693b      	ldr	r3, [r7, #16]
        return;
 80046c0:	e082      	b.n	80047c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00c      	beq.n	800471e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	f043 0208 	orr.w	r2, r3, #8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004710:	2300      	movs	r3, #0
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04f      	beq.n	80047c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004734:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <HAL_SPI_IRQHandler+0x17e>
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d034      	beq.n	80047bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0203 	bic.w	r2, r2, #3
 8004760:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_SPI_IRQHandler+0x1fc>)
 8004770:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fd9a 	bl	80012b0 <HAL_DMA_Abort_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479a:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_SPI_IRQHandler+0x1fc>)
 800479c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fd84 	bl	80012b0 <HAL_DMA_Abort_IT>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80047ba:	e003      	b.n	80047c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f813 	bl	80047e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80047c2:	e000      	b.n	80047c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80047c4:	bf00      	nop
    return;
 80047c6:	bf00      	nop
  }
}
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	080047fd 	.word	0x080047fd

080047d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7ff ffe6 	bl	80047e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f103 020c 	add.w	r2, r3, #12
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10f      	bne.n	8004880 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800486e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa50 	bl	8004d20 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	7812      	ldrb	r2, [r2, #0]
 800489c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa20 	bl	8004d20 <SPI_CloseRxTx_ISR>
    }
  }
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	b292      	uxth	r2, r2
 80048fc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	1c9a      	adds	r2, r3, #2
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10f      	bne.n	8004940 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9f0 	bl	8004d20 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	881a      	ldrh	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f9c1 	bl	8004d20 <SPI_CloseRxTx_ISR>
    }
  }
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f103 020c 	add.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa10 	bl	8004e08 <SPI_CloseRx_ISR>
  }
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	b292      	uxth	r2, r2
 8004a04:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f9ed 	bl	8004e08 <SPI_CloseRx_ISR>
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	7812      	ldrb	r2, [r2, #0]
 8004a4a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa0a 	bl	8004e88 <SPI_CloseTx_ISR>
  }
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	881a      	ldrh	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9e8 	bl	8004e88 <SPI_CloseTx_ISR>
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ad0:	f7fc face 	bl	8001070 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	4413      	add	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ae0:	f7fc fac6 	bl	8001070 <HAL_GetTick>
 8004ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	015b      	lsls	r3, r3, #5
 8004aec:	0d1b      	lsrs	r3, r3, #20
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004af6:	e054      	b.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afe:	d050      	beq.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b00:	f7fc fab6 	bl	8001070 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d902      	bls.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d13d      	bne.n	8004b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2e:	d111      	bne.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	d004      	beq.n	8004b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b42:	d107      	bne.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5c:	d10f      	bne.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e017      	b.n	8004bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d19b      	bne.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000

08004bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be4:	d111      	bne.n	8004c0a <SPI_EndRxTransaction+0x3a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bee:	d004      	beq.n	8004bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf8:	d107      	bne.n	8004c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c12:	d12a      	bne.n	8004c6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1c:	d012      	beq.n	8004c44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff ff49 	bl	8004ac0 <SPI_WaitFlagStateUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02d      	beq.n	8004c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e026      	b.n	8004c92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff ff36 	bl	8004ac0 <SPI_WaitFlagStateUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01a      	beq.n	8004c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e013      	b.n	8004c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2101      	movs	r1, #1
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff ff23 	bl	8004ac0 <SPI_WaitFlagStateUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e000      	b.n	8004c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <SPI_EndRxTxTransaction+0x7c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <SPI_EndRxTxTransaction+0x80>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	0d5b      	lsrs	r3, r3, #21
 8004cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cb8:	fb02 f303 	mul.w	r3, r2, r3
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc6:	d112      	bne.n	8004cee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fef4 	bl	8004ac0 <SPI_WaitFlagStateUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e00f      	b.n	8004d0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d0f2      	beq.n	8004cee <SPI_EndRxTxTransaction+0x52>
 8004d08:	e000      	b.n	8004d0c <SPI_EndRxTxTransaction+0x70>
        break;
 8004d0a:	bf00      	nop
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000000 	.word	0x20000000
 8004d1c:	165e9f81 	.word	0x165e9f81

08004d20 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004d28:	4b35      	ldr	r3, [pc, #212]	; (8004e00 <SPI_CloseRxTx_ISR+0xe0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a35      	ldr	r2, [pc, #212]	; (8004e04 <SPI_CloseRxTx_ISR+0xe4>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	0a5b      	lsrs	r3, r3, #9
 8004d34:	2264      	movs	r2, #100	; 0x64
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc f998 	bl	8001070 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0220 	bic.w	r2, r2, #32
 8004d50:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f043 0220 	orr.w	r2, r3, #32
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d64:	e009      	b.n	8004d7a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0eb      	beq.n	8004d52 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	2164      	movs	r1, #100	; 0x64
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ff8c 	bl	8004c9c <SPI_EndRxTxTransaction>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d115      	bne.n	8004de8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d107      	bne.n	8004dd8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fb fe39 	bl	8000a48 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004dd6:	e00e      	b.n	8004df6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fcf7 	bl	80047d4 <HAL_SPI_TxRxCpltCallback>
}
 8004de6:	e006      	b.n	8004df6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fcf9 	bl	80047e8 <HAL_SPI_ErrorCallback>
}
 8004df6:	bf00      	nop
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000000 	.word	0x20000000
 8004e04:	057619f1 	.word	0x057619f1

08004e08 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004e20:	f7fc f926 	bl	8001070 <HAL_GetTick>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461a      	mov	r2, r3
 8004e28:	2164      	movs	r1, #100	; 0x64
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff fed0 	bl	8004bd0 <SPI_EndRxTransaction>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fb fde9 	bl	8000a48 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004e76:	e002      	b.n	8004e7e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fcb5 	bl	80047e8 <HAL_SPI_ErrorCallback>
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004e90:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <SPI_CloseTx_ISR+0xbc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <SPI_CloseTx_ISR+0xc0>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	0a5b      	lsrs	r3, r3, #9
 8004e9c:	2264      	movs	r2, #100	; 0x64
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea4:	f7fc f8e4 	bl	8001070 <HAL_GetTick>
 8004ea8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ebc:	e009      	b.n	8004ed2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0eb      	beq.n	8004eaa <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	2164      	movs	r1, #100	; 0x64
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fed8 	bl	8004c9c <SPI_EndRxTxTransaction>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fc5b 	bl	80047e8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004f32:	e002      	b.n	8004f3a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fb fd77 	bl	8000a28 <HAL_SPI_TxCpltCallback>
}
 8004f3a:	bf00      	nop
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000000 	.word	0x20000000
 8004f48:	057619f1 	.word	0x057619f1

08004f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e041      	b.n	8004fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f839 	bl	8004fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fbec 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e04e      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d022      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d01d      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIM_Base_Start_IT+0x80>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_TIM_Base_Start_IT+0xdc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d111      	bne.n	80050a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b06      	cmp	r3, #6
 8005090:	d010      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e007      	b.n	80050b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e041      	b.n	8005176 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fb fde4 	bl	8000cd4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fb22 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_TIM_IC_Start_IT+0x1e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519a:	b2db      	uxtb	r3, r3
 800519c:	e013      	b.n	80051c6 <HAL_TIM_IC_Start_IT+0x46>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_IC_Start_IT+0x2e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e00b      	b.n	80051c6 <HAL_TIM_IC_Start_IT+0x46>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d104      	bne.n	80051be <HAL_TIM_IC_Start_IT+0x3e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	e003      	b.n	80051c6 <HAL_TIM_IC_Start_IT+0x46>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <HAL_TIM_IC_Start_IT+0x58>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e013      	b.n	8005200 <HAL_TIM_IC_Start_IT+0x80>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d104      	bne.n	80051e8 <HAL_TIM_IC_Start_IT+0x68>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e00b      	b.n	8005200 <HAL_TIM_IC_Start_IT+0x80>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d104      	bne.n	80051f8 <HAL_TIM_IC_Start_IT+0x78>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	e003      	b.n	8005200 <HAL_TIM_IC_Start_IT+0x80>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d102      	bne.n	800520e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005208:	7b7b      	ldrb	r3, [r7, #13]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d001      	beq.n	8005212 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0cc      	b.n	80053ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_TIM_IC_Start_IT+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005220:	e013      	b.n	800524a <HAL_TIM_IC_Start_IT+0xca>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d104      	bne.n	8005232 <HAL_TIM_IC_Start_IT+0xb2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005230:	e00b      	b.n	800524a <HAL_TIM_IC_Start_IT+0xca>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d104      	bne.n	8005242 <HAL_TIM_IC_Start_IT+0xc2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	e003      	b.n	800524a <HAL_TIM_IC_Start_IT+0xca>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_TIM_IC_Start_IT+0xda>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005258:	e013      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x102>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b04      	cmp	r3, #4
 800525e:	d104      	bne.n	800526a <HAL_TIM_IC_Start_IT+0xea>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005268:	e00b      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x102>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d104      	bne.n	800527a <HAL_TIM_IC_Start_IT+0xfa>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005278:	e003      	b.n	8005282 <HAL_TIM_IC_Start_IT+0x102>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d841      	bhi.n	800530c <HAL_TIM_IC_Start_IT+0x18c>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <HAL_TIM_IC_Start_IT+0x110>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052c5 	.word	0x080052c5
 8005294:	0800530d 	.word	0x0800530d
 8005298:	0800530d 	.word	0x0800530d
 800529c:	0800530d 	.word	0x0800530d
 80052a0:	080052d7 	.word	0x080052d7
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	0800530d 	.word	0x0800530d
 80052ac:	0800530d 	.word	0x0800530d
 80052b0:	080052e9 	.word	0x080052e9
 80052b4:	0800530d 	.word	0x0800530d
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	080052fb 	.word	0x080052fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0202 	orr.w	r2, r2, #2
 80052d2:	60da      	str	r2, [r3, #12]
      break;
 80052d4:	e01d      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0204 	orr.w	r2, r2, #4
 80052e4:	60da      	str	r2, [r3, #12]
      break;
 80052e6:	e014      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0208 	orr.w	r2, r2, #8
 80052f6:	60da      	str	r2, [r3, #12]
      break;
 80052f8:	e00b      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0210 	orr.w	r2, r2, #16
 8005308:	60da      	str	r2, [r3, #12]
      break;
 800530a:	e002      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	bf00      	nop
  }

  if (status == HAL_OK)
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d148      	bne.n	80053aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2201      	movs	r2, #1
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fbeb 	bl	8005afc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <HAL_TIM_IC_Start_IT+0x234>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d022      	beq.n	8005376 <HAL_TIM_IC_Start_IT+0x1f6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005338:	d01d      	beq.n	8005376 <HAL_TIM_IC_Start_IT+0x1f6>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_TIM_IC_Start_IT+0x238>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d018      	beq.n	8005376 <HAL_TIM_IC_Start_IT+0x1f6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <HAL_TIM_IC_Start_IT+0x23c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_TIM_IC_Start_IT+0x1f6>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <HAL_TIM_IC_Start_IT+0x240>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <HAL_TIM_IC_Start_IT+0x1f6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <HAL_TIM_IC_Start_IT+0x244>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <HAL_TIM_IC_Start_IT+0x1f6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <HAL_TIM_IC_Start_IT+0x248>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_TIM_IC_Start_IT+0x1f6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <HAL_TIM_IC_Start_IT+0x24c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d111      	bne.n	800539a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b06      	cmp	r3, #6
 8005386:	d010      	beq.n	80053aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	e007      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40010000 	.word	0x40010000
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40000c00 	.word	0x40000c00
 80053c4:	40010400 	.word	0x40010400
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40001800 	.word	0x40001800

080053d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0202 	mvn.w	r2, #2
 80053fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f98a 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f97c 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f98d 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b04      	cmp	r3, #4
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0204 	mvn.w	r2, #4
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f960 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f952 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f963 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0208 	mvn.w	r2, #8
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2204      	movs	r2, #4
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f936 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f928 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f939 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0210 	mvn.w	r2, #16
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2208      	movs	r2, #8
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f90c 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8fe 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f90f 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0201 	mvn.w	r2, #1
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fb fab8 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b80      	cmp	r3, #128	; 0x80
 8005560:	d10e      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fb6a 	bl	8005c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d10e      	bne.n	80055ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d107      	bne.n	80055ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8d4 	bl	8005754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d10e      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0220 	mvn.w	r2, #32
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fb34 	bl	8005c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e088      	b.n	8005710 <HAL_TIM_IC_ConfigChannel+0x130>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11b      	bne.n	8005644 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f000 f944 	bl	80058a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 020c 	bic.w	r2, r2, #12
 800562e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6999      	ldr	r1, [r3, #24]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	619a      	str	r2, [r3, #24]
 8005642:	e060      	b.n	8005706 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b04      	cmp	r3, #4
 8005648:	d11c      	bne.n	8005684 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6819      	ldr	r1, [r3, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f000 f999 	bl	8005990 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800566c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6999      	ldr	r1, [r3, #24]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	021a      	lsls	r2, r3, #8
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
 8005682:	e040      	b.n	8005706 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b08      	cmp	r3, #8
 8005688:	d11b      	bne.n	80056c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f000 f9b6 	bl	8005a0a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 020c 	bic.w	r2, r2, #12
 80056ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69d9      	ldr	r1, [r3, #28]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	61da      	str	r2, [r3, #28]
 80056c0:	e021      	b.n	8005706 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d11c      	bne.n	8005702 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6819      	ldr	r1, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f000 f9d3 	bl	8005a82 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69d9      	ldr	r1, [r3, #28]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]
 8005700:	e001      	b.n	8005706 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a40      	ldr	r2, [pc, #256]	; (800587c <TIM_Base_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d013      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005786:	d00f      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <TIM_Base_SetConfig+0x118>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00b      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a3c      	ldr	r2, [pc, #240]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a3b      	ldr	r2, [pc, #236]	; (8005888 <TIM_Base_SetConfig+0x120>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3a      	ldr	r2, [pc, #232]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2f      	ldr	r2, [pc, #188]	; (800587c <TIM_Base_SetConfig+0x114>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d02b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d027      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <TIM_Base_SetConfig+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d023      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	; (8005884 <TIM_Base_SetConfig+0x11c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <TIM_Base_SetConfig+0x120>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_Base_SetConfig+0x124>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d017      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a28      	ldr	r2, [pc, #160]	; (8005890 <TIM_Base_SetConfig+0x128>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a27      	ldr	r2, [pc, #156]	; (8005894 <TIM_Base_SetConfig+0x12c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a26      	ldr	r2, [pc, #152]	; (8005898 <TIM_Base_SetConfig+0x130>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a25      	ldr	r2, [pc, #148]	; (800589c <TIM_Base_SetConfig+0x134>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <TIM_Base_SetConfig+0x138>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a23      	ldr	r2, [pc, #140]	; (80058a4 <TIM_Base_SetConfig+0x13c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <TIM_Base_SetConfig+0x114>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0xf8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a0c      	ldr	r2, [pc, #48]	; (800588c <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d103      	bne.n	8005868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	615a      	str	r2, [r3, #20]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40010400 	.word	0x40010400
 8005890:	40014000 	.word	0x40014000
 8005894:	40014400 	.word	0x40014400
 8005898:	40014800 	.word	0x40014800
 800589c:	40001800 	.word	0x40001800
 80058a0:	40001c00 	.word	0x40001c00
 80058a4:	40002000 	.word	0x40002000

080058a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4a28      	ldr	r2, [pc, #160]	; (8005974 <TIM_TI1_SetConfig+0xcc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01b      	beq.n	800590e <TIM_TI1_SetConfig+0x66>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058dc:	d017      	beq.n	800590e <TIM_TI1_SetConfig+0x66>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <TIM_TI1_SetConfig+0xd0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <TIM_TI1_SetConfig+0x66>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <TIM_TI1_SetConfig+0xd4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <TIM_TI1_SetConfig+0x66>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <TIM_TI1_SetConfig+0xd8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_TI1_SetConfig+0x66>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <TIM_TI1_SetConfig+0xdc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_TI1_SetConfig+0x66>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <TIM_TI1_SetConfig+0xe0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_TI1_SetConfig+0x66>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a20      	ldr	r2, [pc, #128]	; (800598c <TIM_TI1_SetConfig+0xe4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d101      	bne.n	8005912 <TIM_TI1_SetConfig+0x6a>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <TIM_TI1_SetConfig+0x6c>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e003      	b.n	8005932 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	b2db      	uxtb	r3, r3
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f023 030a 	bic.w	r3, r3, #10
 800594c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 030a 	and.w	r3, r3, #10
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40010400 	.word	0x40010400
 8005988:	40014000 	.word	0x40014000
 800598c:	40001800 	.word	0x40001800

08005990 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0210 	bic.w	r2, r3, #16
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	031b      	lsls	r3, r3, #12
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005a5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	031b      	lsls	r3, r3, #12
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	031b      	lsls	r3, r3, #12
 8005ada:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2201      	movs	r2, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1a      	ldr	r2, [r3, #32]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	401a      	ands	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1a      	ldr	r2, [r3, #32]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e05a      	b.n	8005c16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d022      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bac:	d01d      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d018      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d009      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d10c      	bne.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	40010400 	.word	0x40010400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40001800 	.word	0x40001800

08005c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e03f      	b.n	8005cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fb f870 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	; 0x24
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f829 	bl	8005d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d08:	b0c0      	sub	sp, #256	; 0x100
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	68d9      	ldr	r1, [r3, #12]
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	ea40 0301 	orr.w	r3, r0, r1
 8005d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d5c:	f021 010c 	bic.w	r1, r1, #12
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7e:	6999      	ldr	r1, [r3, #24]
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	ea40 0301 	orr.w	r3, r0, r1
 8005d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b8f      	ldr	r3, [pc, #572]	; (8005fd0 <UART_SetConfig+0x2cc>)
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d005      	beq.n	8005da4 <UART_SetConfig+0xa0>
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b8d      	ldr	r3, [pc, #564]	; (8005fd4 <UART_SetConfig+0x2d0>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d104      	bne.n	8005dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da4:	f7fd fc94 	bl	80036d0 <HAL_RCC_GetPCLK2Freq>
 8005da8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005dac:	e003      	b.n	8005db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dae:	f7fd fc7b 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8005db2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc0:	f040 810c 	bne.w	8005fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dde:	415b      	adcs	r3, r3
 8005de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005de6:	4621      	mov	r1, r4
 8005de8:	eb12 0801 	adds.w	r8, r2, r1
 8005dec:	4629      	mov	r1, r5
 8005dee:	eb43 0901 	adc.w	r9, r3, r1
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e06:	4690      	mov	r8, r2
 8005e08:	4699      	mov	r9, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	eb18 0303 	adds.w	r3, r8, r3
 8005e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e14:	462b      	mov	r3, r5
 8005e16:	eb49 0303 	adc.w	r3, r9, r3
 8005e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e32:	460b      	mov	r3, r1
 8005e34:	18db      	adds	r3, r3, r3
 8005e36:	653b      	str	r3, [r7, #80]	; 0x50
 8005e38:	4613      	mov	r3, r2
 8005e3a:	eb42 0303 	adc.w	r3, r2, r3
 8005e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e48:	f7fa f9e2 	bl	8000210 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4b61      	ldr	r3, [pc, #388]	; (8005fd8 <UART_SetConfig+0x2d4>)
 8005e52:	fba3 2302 	umull	r2, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	011c      	lsls	r4, r3, #4
 8005e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e74:	415b      	adcs	r3, r3
 8005e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e82:	4649      	mov	r1, r9
 8005e84:	eb43 0b01 	adc.w	fp, r3, r1
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e9c:	4692      	mov	sl, r2
 8005e9e:	469b      	mov	fp, r3
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	eb4b 0303 	adc.w	r3, fp, r3
 8005eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	18db      	adds	r3, r3, r3
 8005ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ece:	4613      	mov	r3, r2
 8005ed0:	eb42 0303 	adc.w	r3, r2, r3
 8005ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ede:	f7fa f997 	bl	8000210 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4b3b      	ldr	r3, [pc, #236]	; (8005fd8 <UART_SetConfig+0x2d4>)
 8005eea:	fba3 2301 	umull	r2, r3, r3, r1
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	2264      	movs	r2, #100	; 0x64
 8005ef2:	fb02 f303 	mul.w	r3, r2, r3
 8005ef6:	1acb      	subs	r3, r1, r3
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005efe:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <UART_SetConfig+0x2d4>)
 8005f00:	fba3 2302 	umull	r2, r3, r3, r2
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f0c:	441c      	add	r4, r3
 8005f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	1891      	adds	r1, r2, r2
 8005f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f28:	415b      	adcs	r3, r3
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f30:	4641      	mov	r1, r8
 8005f32:	1851      	adds	r1, r2, r1
 8005f34:	6339      	str	r1, [r7, #48]	; 0x30
 8005f36:	4649      	mov	r1, r9
 8005f38:	414b      	adcs	r3, r1
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f48:	4659      	mov	r1, fp
 8005f4a:	00cb      	lsls	r3, r1, #3
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f52:	4651      	mov	r1, sl
 8005f54:	00ca      	lsls	r2, r1, #3
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	189b      	adds	r3, r3, r2
 8005f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f64:	464b      	mov	r3, r9
 8005f66:	460a      	mov	r2, r1
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f84:	460b      	mov	r3, r1
 8005f86:	18db      	adds	r3, r3, r3
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	eb42 0303 	adc.w	r3, r2, r3
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f9a:	f7fa f939 	bl	8000210 <__aeabi_uldivmod>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <UART_SetConfig+0x2d4>)
 8005fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	2164      	movs	r1, #100	; 0x64
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	3332      	adds	r3, #50	; 0x32
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <UART_SetConfig+0x2d4>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f003 0207 	and.w	r2, r3, #7
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4422      	add	r2, r4
 8005fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fcc:	e105      	b.n	80061da <UART_SetConfig+0x4d6>
 8005fce:	bf00      	nop
 8005fd0:	40011000 	.word	0x40011000
 8005fd4:	40011400 	.word	0x40011400
 8005fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fee:	4642      	mov	r2, r8
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	1891      	adds	r1, r2, r2
 8005ff4:	6239      	str	r1, [r7, #32]
 8005ff6:	415b      	adcs	r3, r3
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ffe:	4641      	mov	r1, r8
 8006000:	1854      	adds	r4, r2, r1
 8006002:	4649      	mov	r1, r9
 8006004:	eb43 0501 	adc.w	r5, r3, r1
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	00eb      	lsls	r3, r5, #3
 8006012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006016:	00e2      	lsls	r2, r4, #3
 8006018:	4614      	mov	r4, r2
 800601a:	461d      	mov	r5, r3
 800601c:	4643      	mov	r3, r8
 800601e:	18e3      	adds	r3, r4, r3
 8006020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006024:	464b      	mov	r3, r9
 8006026:	eb45 0303 	adc.w	r3, r5, r3
 800602a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800603a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800604a:	4629      	mov	r1, r5
 800604c:	008b      	lsls	r3, r1, #2
 800604e:	4621      	mov	r1, r4
 8006050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006054:	4621      	mov	r1, r4
 8006056:	008a      	lsls	r2, r1, #2
 8006058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800605c:	f7fa f8d8 	bl	8000210 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4b60      	ldr	r3, [pc, #384]	; (80061e8 <UART_SetConfig+0x4e4>)
 8006066:	fba3 2302 	umull	r2, r3, r3, r2
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	011c      	lsls	r4, r3, #4
 800606e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800607c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006080:	4642      	mov	r2, r8
 8006082:	464b      	mov	r3, r9
 8006084:	1891      	adds	r1, r2, r2
 8006086:	61b9      	str	r1, [r7, #24]
 8006088:	415b      	adcs	r3, r3
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006090:	4641      	mov	r1, r8
 8006092:	1851      	adds	r1, r2, r1
 8006094:	6139      	str	r1, [r7, #16]
 8006096:	4649      	mov	r1, r9
 8006098:	414b      	adcs	r3, r1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060a8:	4659      	mov	r1, fp
 80060aa:	00cb      	lsls	r3, r1, #3
 80060ac:	4651      	mov	r1, sl
 80060ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b2:	4651      	mov	r1, sl
 80060b4:	00ca      	lsls	r2, r1, #3
 80060b6:	4610      	mov	r0, r2
 80060b8:	4619      	mov	r1, r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	4642      	mov	r2, r8
 80060be:	189b      	adds	r3, r3, r2
 80060c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060c4:	464b      	mov	r3, r9
 80060c6:	460a      	mov	r2, r1
 80060c8:	eb42 0303 	adc.w	r3, r2, r3
 80060cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80060da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060e8:	4649      	mov	r1, r9
 80060ea:	008b      	lsls	r3, r1, #2
 80060ec:	4641      	mov	r1, r8
 80060ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f2:	4641      	mov	r1, r8
 80060f4:	008a      	lsls	r2, r1, #2
 80060f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060fa:	f7fa f889 	bl	8000210 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4b39      	ldr	r3, [pc, #228]	; (80061e8 <UART_SetConfig+0x4e4>)
 8006104:	fba3 1302 	umull	r1, r3, r3, r2
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	2164      	movs	r1, #100	; 0x64
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	3332      	adds	r3, #50	; 0x32
 8006116:	4a34      	ldr	r2, [pc, #208]	; (80061e8 <UART_SetConfig+0x4e4>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006122:	441c      	add	r4, r3
 8006124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006128:	2200      	movs	r2, #0
 800612a:	673b      	str	r3, [r7, #112]	; 0x70
 800612c:	677a      	str	r2, [r7, #116]	; 0x74
 800612e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006132:	4642      	mov	r2, r8
 8006134:	464b      	mov	r3, r9
 8006136:	1891      	adds	r1, r2, r2
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	415b      	adcs	r3, r3
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006142:	4641      	mov	r1, r8
 8006144:	1851      	adds	r1, r2, r1
 8006146:	6039      	str	r1, [r7, #0]
 8006148:	4649      	mov	r1, r9
 800614a:	414b      	adcs	r3, r1
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800615a:	4659      	mov	r1, fp
 800615c:	00cb      	lsls	r3, r1, #3
 800615e:	4651      	mov	r1, sl
 8006160:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006164:	4651      	mov	r1, sl
 8006166:	00ca      	lsls	r2, r1, #3
 8006168:	4610      	mov	r0, r2
 800616a:	4619      	mov	r1, r3
 800616c:	4603      	mov	r3, r0
 800616e:	4642      	mov	r2, r8
 8006170:	189b      	adds	r3, r3, r2
 8006172:	66bb      	str	r3, [r7, #104]	; 0x68
 8006174:	464b      	mov	r3, r9
 8006176:	460a      	mov	r2, r1
 8006178:	eb42 0303 	adc.w	r3, r2, r3
 800617c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	663b      	str	r3, [r7, #96]	; 0x60
 8006188:	667a      	str	r2, [r7, #100]	; 0x64
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006196:	4649      	mov	r1, r9
 8006198:	008b      	lsls	r3, r1, #2
 800619a:	4641      	mov	r1, r8
 800619c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a0:	4641      	mov	r1, r8
 80061a2:	008a      	lsls	r2, r1, #2
 80061a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061a8:	f7fa f832 	bl	8000210 <__aeabi_uldivmod>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <UART_SetConfig+0x4e4>)
 80061b2:	fba3 1302 	umull	r1, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2164      	movs	r1, #100	; 0x64
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	3332      	adds	r3, #50	; 0x32
 80061c4:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <UART_SetConfig+0x4e4>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	f003 020f 	and.w	r2, r3, #15
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4422      	add	r2, r4
 80061d8:	609a      	str	r2, [r3, #8]
}
 80061da:	bf00      	nop
 80061dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061e0:	46bd      	mov	sp, r7
 80061e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e6:	bf00      	nop
 80061e8:	51eb851f 	.word	0x51eb851f

080061ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061fe:	2b84      	cmp	r3, #132	; 0x84
 8006200:	d005      	beq.n	800620e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	3303      	adds	r3, #3
 800620c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006220:	f000 fe50 	bl	8006ec4 <vTaskStartScheduler>
  
  return osOK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	bd80      	pop	{r7, pc}

0800622a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800622a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622c:	b089      	sub	sp, #36	; 0x24
 800622e:	af04      	add	r7, sp, #16
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <osThreadCreate+0x54>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01c      	beq.n	800627e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685c      	ldr	r4, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681d      	ldr	r5, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691e      	ldr	r6, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff ffc8 	bl	80061ec <makeFreeRtosPriority>
 800625c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006266:	9202      	str	r2, [sp, #8]
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	9100      	str	r1, [sp, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	4632      	mov	r2, r6
 8006270:	4629      	mov	r1, r5
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fc5e 	bl	8006b34 <xTaskCreateStatic>
 8006278:	4603      	mov	r3, r0
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e01c      	b.n	80062b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685c      	ldr	r4, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800628a:	b29e      	uxth	r6, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff ffaa 	bl	80061ec <makeFreeRtosPriority>
 8006298:	4602      	mov	r2, r0
 800629a:	f107 030c 	add.w	r3, r7, #12
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	9200      	str	r2, [sp, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	4632      	mov	r2, r6
 80062a6:	4629      	mov	r1, r5
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fca0 	bl	8006bee <xTaskCreate>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d001      	beq.n	80062b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062b8:	68fb      	ldr	r3, [r7, #12]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <osDelay+0x16>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	e000      	b.n	80062da <osDelay+0x18>
 80062d8:	2301      	movs	r3, #1
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fdbe 	bl	8006e5c <vTaskDelay>
  
  return osOK;
 80062e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	4619      	mov	r1, r3
 8006300:	2001      	movs	r0, #1
 8006302:	f000 fa2a 	bl	800675a <xQueueCreateMutexStatic>
 8006306:	4603      	mov	r3, r0
 8006308:	e003      	b.n	8006312 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800630a:	2001      	movs	r0, #1
 800630c:	f000 fa0d 	bl	800672a <xQueueCreateMutex>
 8006310:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f103 0208 	add.w	r2, r3, #8
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006332:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f103 0208 	add.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f103 0208 	add.w	r2, r3, #8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d2:	d103      	bne.n	80063dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e00c      	b.n	80063f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3308      	adds	r3, #8
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e002      	b.n	80063ea <vListInsert+0x2e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d2f6      	bcs.n	80063e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	601a      	str	r2, [r3, #0]
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6892      	ldr	r2, [r2, #8]
 8006444:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6852      	ldr	r2, [r2, #4]
 800644e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d103      	bne.n	8006462 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	1e5a      	subs	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064ae:	f001 fb41 	bl	8007b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	441a      	add	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	3b01      	subs	r3, #1
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	441a      	add	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	22ff      	movs	r2, #255	; 0xff
 80064f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d114      	bne.n	800652e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01a      	beq.n	8006542 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3310      	adds	r3, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f000 ff19 	bl	8007348 <xTaskRemoveFromEventList>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d012      	beq.n	8006542 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <xQueueGenericReset+0xcc>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	e009      	b.n	8006542 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3310      	adds	r3, #16
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fef1 	bl	800631a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3324      	adds	r3, #36	; 0x24
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff feec 	bl	800631a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006542:	f001 fb27 	bl	8007b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006546:	2301      	movs	r3, #1
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08e      	sub	sp, #56	; 0x38
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <xQueueGenericCreateStatic+0x52>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <xQueueGenericCreateStatic+0x56>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <xQueueGenericCreateStatic+0x58>
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	623b      	str	r3, [r7, #32]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <xQueueGenericCreateStatic+0x7e>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <xQueueGenericCreateStatic+0x82>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueGenericCreateStatic+0x84>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61fb      	str	r3, [r7, #28]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065f2:	2348      	movs	r3, #72	; 0x48
 80065f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b48      	cmp	r3, #72	; 0x48
 80065fa:	d00a      	beq.n	8006612 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61bb      	str	r3, [r7, #24]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006612:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006626:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f83f 	bl	80066b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800663c:	4618      	mov	r0, r3
 800663e:	3730      	adds	r7, #48	; 0x30
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af02      	add	r7, sp, #8
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	613b      	str	r3, [r7, #16]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3348      	adds	r3, #72	; 0x48
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fb3b 	bl	8007cf8 <pvPortMalloc>
 8006682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d011      	beq.n	80066ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	3348      	adds	r3, #72	; 0x48
 8006692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800669c:	79fa      	ldrb	r2, [r7, #7]
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4613      	mov	r3, r2
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f805 	bl	80066b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066ae:	69bb      	ldr	r3, [r7, #24]
	}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3720      	adds	r7, #32
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e002      	b.n	80066da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066e6:	2101      	movs	r1, #1
 80066e8:	69b8      	ldr	r0, [r7, #24]
 80066ea:	f7ff fecb 	bl	8006484 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00e      	beq.n	8006722 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006716:	2300      	movs	r3, #0
 8006718:	2200      	movs	r2, #0
 800671a:	2100      	movs	r1, #0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f837 	bl	8006790 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	4603      	mov	r3, r0
 8006732:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	461a      	mov	r2, r3
 8006740:	6939      	ldr	r1, [r7, #16]
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	f7ff ff7e 	bl	8006644 <xQueueGenericCreate>
 8006748:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff ffd3 	bl	80066f6 <prvInitialiseMutex>

		return xNewQueue;
 8006750:	68fb      	ldr	r3, [r7, #12]
	}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af02      	add	r7, sp, #8
 8006760:	4603      	mov	r3, r0
 8006762:	6039      	str	r1, [r7, #0]
 8006764:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006766:	2301      	movs	r3, #1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	6939      	ldr	r1, [r7, #16]
 8006778:	6978      	ldr	r0, [r7, #20]
 800677a:	f7ff feeb 	bl	8006554 <xQueueGenericCreateStatic>
 800677e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff ffb8 	bl	80066f6 <prvInitialiseMutex>

		return xNewQueue;
 8006786:	68fb      	ldr	r3, [r7, #12]
	}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08e      	sub	sp, #56	; 0x38
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800679e:	2300      	movs	r3, #0
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <xQueueGenericSend+0x32>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d103      	bne.n	80067d0 <xQueueGenericSend+0x40>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <xQueueGenericSend+0x44>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <xQueueGenericSend+0x46>
 80067d4:	2300      	movs	r3, #0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10a      	bne.n	80067f0 <xQueueGenericSend+0x60>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d103      	bne.n	80067fe <xQueueGenericSend+0x6e>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <xQueueGenericSend+0x72>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <xQueueGenericSend+0x74>
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueGenericSend+0x8e>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	623b      	str	r3, [r7, #32]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800681e:	f000 ff4f 	bl	80076c0 <xTaskGetSchedulerState>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <xQueueGenericSend+0x9e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <xQueueGenericSend+0xa2>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xQueueGenericSend+0xa4>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xQueueGenericSend+0xbe>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	61fb      	str	r3, [r7, #28]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800684e:	f001 f971 	bl	8007b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	429a      	cmp	r2, r3
 800685c:	d302      	bcc.n	8006864 <xQueueGenericSend+0xd4>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d129      	bne.n	80068b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686a:	f000 f88f 	bl	800698c <prvCopyDataToQueue>
 800686e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d010      	beq.n	800689a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	3324      	adds	r3, #36	; 0x24
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fd63 	bl	8007348 <xTaskRemoveFromEventList>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d013      	beq.n	80068b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006888:	4b3f      	ldr	r3, [pc, #252]	; (8006988 <xQueueGenericSend+0x1f8>)
 800688a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	e00a      	b.n	80068b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068a0:	4b39      	ldr	r3, [pc, #228]	; (8006988 <xQueueGenericSend+0x1f8>)
 80068a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068b0:	f001 f970 	bl	8007b94 <vPortExitCritical>
				return pdPASS;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e063      	b.n	8006980 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d103      	bne.n	80068c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068be:	f001 f969 	bl	8007b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e05c      	b.n	8006980 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fd9b 	bl	800740c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068d6:	2301      	movs	r3, #1
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068da:	f001 f95b 	bl	8007b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068de:	f000 fb51 	bl	8006f84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068e2:	f001 f927 	bl	8007b34 <vPortEnterCritical>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ec:	b25b      	sxtb	r3, r3
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f2:	d103      	bne.n	80068fc <xQueueGenericSend+0x16c>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006902:	b25b      	sxtb	r3, r3
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006908:	d103      	bne.n	8006912 <xQueueGenericSend+0x182>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006912:	f001 f93f 	bl	8007b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006916:	1d3a      	adds	r2, r7, #4
 8006918:	f107 0314 	add.w	r3, r7, #20
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fd8a 	bl	8007438 <xTaskCheckForTimeOut>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d124      	bne.n	8006974 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800692a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800692c:	f000 f8ea 	bl	8006b04 <prvIsQueueFull>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d018      	beq.n	8006968 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	3310      	adds	r3, #16
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4611      	mov	r1, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fcde 	bl	8007300 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006946:	f000 f88b 	bl	8006a60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800694a:	f000 fb29 	bl	8006fa0 <xTaskResumeAll>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	f47f af7c 	bne.w	800684e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <xQueueGenericSend+0x1f8>)
 8006958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	e772      	b.n	800684e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800696a:	f000 f879 	bl	8006a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800696e:	f000 fb17 	bl	8006fa0 <xTaskResumeAll>
 8006972:	e76c      	b.n	800684e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006976:	f000 f873 	bl	8006a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800697a:	f000 fb11 	bl	8006fa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800697e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006980:	4618      	mov	r0, r3
 8006982:	3738      	adds	r7, #56	; 0x38
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d14d      	bne.n	8006a4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fea0 	bl	80076fc <xTaskPriorityDisinherit>
 80069bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	e043      	b.n	8006a4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d119      	bne.n	8006a00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6858      	ldr	r0, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	461a      	mov	r2, r3
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	f001 fb9c 	bl	8008114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d32b      	bcc.n	8006a4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	e026      	b.n	8006a4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68d8      	ldr	r0, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	f001 fb82 	bl	8008114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	425b      	negs	r3, r3
 8006a1a:	441a      	add	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d207      	bcs.n	8006a3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	425b      	negs	r3, r3
 8006a36:	441a      	add	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d105      	bne.n	8006a4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a56:	697b      	ldr	r3, [r7, #20]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a68:	f001 f864 	bl	8007b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a74:	e011      	b.n	8006a9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d012      	beq.n	8006aa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3324      	adds	r3, #36	; 0x24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fc60 	bl	8007348 <xTaskRemoveFromEventList>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a8e:	f000 fd35 	bl	80074fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dce9      	bgt.n	8006a76 <prvUnlockQueue+0x16>
 8006aa2:	e000      	b.n	8006aa6 <prvUnlockQueue+0x46>
					break;
 8006aa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	22ff      	movs	r2, #255	; 0xff
 8006aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006aae:	f001 f871 	bl	8007b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ab2:	f001 f83f 	bl	8007b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006abc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006abe:	e011      	b.n	8006ae4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3310      	adds	r3, #16
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fc3b 	bl	8007348 <xTaskRemoveFromEventList>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ad8:	f000 fd10 	bl	80074fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dce9      	bgt.n	8006ac0 <prvUnlockQueue+0x60>
 8006aec:	e000      	b.n	8006af0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006aee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	22ff      	movs	r2, #255	; 0xff
 8006af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006af8:	f001 f84c 	bl	8007b94 <vPortExitCritical>
}
 8006afc:	bf00      	nop
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b0c:	f001 f812 	bl	8007b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d102      	bne.n	8006b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	e001      	b.n	8006b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b26:	f001 f835 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08e      	sub	sp, #56	; 0x38
 8006b38:	af04      	add	r7, sp, #16
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	623b      	str	r3, [r7, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xTaskCreateStatic+0x46>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	61fb      	str	r3, [r7, #28]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b7a:	2354      	movs	r3, #84	; 0x54
 8006b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b54      	cmp	r3, #84	; 0x54
 8006b82:	d00a      	beq.n	8006b9a <xTaskCreateStatic+0x66>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	61bb      	str	r3, [r7, #24]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01e      	beq.n	8006be0 <xTaskCreateStatic+0xac>
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9303      	str	r3, [sp, #12]
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	9302      	str	r3, [sp, #8]
 8006bc2:	f107 0314 	add.w	r3, r7, #20
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f850 	bl	8006c78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bda:	f000 f8d5 	bl	8006d88 <prvAddNewTaskToReadyList>
 8006bde:	e001      	b.n	8006be4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006be4:	697b      	ldr	r3, [r7, #20]
	}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3728      	adds	r7, #40	; 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b08c      	sub	sp, #48	; 0x30
 8006bf2:	af04      	add	r7, sp, #16
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 f878 	bl	8007cf8 <pvPortMalloc>
 8006c08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00e      	beq.n	8006c2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c10:	2054      	movs	r0, #84	; 0x54
 8006c12:	f001 f871 	bl	8007cf8 <pvPortMalloc>
 8006c16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
 8006c24:	e005      	b.n	8006c32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c26:	6978      	ldr	r0, [r7, #20]
 8006c28:	f001 f932 	bl	8007e90 <vPortFree>
 8006c2c:	e001      	b.n	8006c32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d017      	beq.n	8006c68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	2300      	movs	r3, #0
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f80e 	bl	8006c78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c5c:	69f8      	ldr	r0, [r7, #28]
 8006c5e:	f000 f893 	bl	8006d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c62:	2301      	movs	r3, #1
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e002      	b.n	8006c6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3720      	adds	r7, #32
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c90:	3b01      	subs	r3, #1
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f023 0307 	bic.w	r3, r3, #7
 8006c9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	617b      	str	r3, [r7, #20]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01f      	beq.n	8006d06 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	e012      	b.n	8006cf2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	7819      	ldrb	r1, [r3, #0]
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	3334      	adds	r3, #52	; 0x34
 8006cdc:	460a      	mov	r2, r1
 8006cde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d006      	beq.n	8006cfa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	2b0f      	cmp	r3, #15
 8006cf6:	d9e9      	bls.n	8006ccc <prvInitialiseNewTask+0x54>
 8006cf8:	e000      	b.n	8006cfc <prvInitialiseNewTask+0x84>
			{
				break;
 8006cfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d04:	e003      	b.n	8006d0e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d901      	bls.n	8006d18 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d14:	2306      	movs	r3, #6
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	2200      	movs	r2, #0
 8006d28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff fb13 	bl	800635a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	3318      	adds	r3, #24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fb0e 	bl	800635a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	f1c3 0207 	rsb	r2, r3, #7
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f000 fdb4 	bl	80078d4 <pxPortInitialiseStack>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d7e:	bf00      	nop
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d90:	f000 fed0 	bl	8007b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d94:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <prvAddNewTaskToReadyList+0xb8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <prvAddNewTaskToReadyList+0xb8>)
 8006d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d9e:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006da6:	4a27      	ldr	r2, [pc, #156]	; (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dac:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <prvAddNewTaskToReadyList+0xb8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d110      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006db4:	f000 fbc6 	bl	8007544 <prvInitialiseTaskLists>
 8006db8:	e00d      	b.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dba:	4b23      	ldr	r3, [pc, #140]	; (8006e48 <prvAddNewTaskToReadyList+0xc0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dc2:	4b20      	ldr	r3, [pc, #128]	; (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d802      	bhi.n	8006dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dd6:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <prvAddNewTaskToReadyList+0xc4>)
 8006dde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	2201      	movs	r2, #1
 8006de6:	409a      	lsls	r2, r3
 8006de8:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <prvAddNewTaskToReadyList+0xc8>)
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <prvAddNewTaskToReadyList+0xcc>)
 8006e00:	441a      	add	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f7ff fab3 	bl	8006374 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e0e:	f000 fec1 	bl	8007b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e12:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <prvAddNewTaskToReadyList+0xc0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <prvAddNewTaskToReadyList+0xbc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d207      	bcs.n	8006e38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvAddNewTaskToReadyList+0xd0>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000524 	.word	0x20000524
 8006e44:	20000424 	.word	0x20000424
 8006e48:	20000530 	.word	0x20000530
 8006e4c:	20000540 	.word	0x20000540
 8006e50:	2000052c 	.word	0x2000052c
 8006e54:	20000428 	.word	0x20000428
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d017      	beq.n	8006e9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e6e:	4b13      	ldr	r3, [pc, #76]	; (8006ebc <vTaskDelay+0x60>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <vTaskDelay+0x30>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60bb      	str	r3, [r7, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e8c:	f000 f87a 	bl	8006f84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e90:	2100      	movs	r1, #0
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fcb8 	bl	8007808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e98:	f000 f882 	bl	8006fa0 <xTaskResumeAll>
 8006e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <vTaskDelay+0x64>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	2000054c 	.word	0x2000054c
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ed2:	463a      	mov	r2, r7
 8006ed4:	1d39      	adds	r1, r7, #4
 8006ed6:	f107 0308 	add.w	r3, r7, #8
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 fb1a 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	9202      	str	r2, [sp, #8]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	2300      	movs	r3, #0
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	491e      	ldr	r1, [pc, #120]	; (8006f6c <vTaskStartScheduler+0xa8>)
 8006ef4:	481e      	ldr	r0, [pc, #120]	; (8006f70 <vTaskStartScheduler+0xac>)
 8006ef6:	f7ff fe1d 	bl	8006b34 <xTaskCreateStatic>
 8006efa:	4603      	mov	r3, r0
 8006efc:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <vTaskStartScheduler+0xb0>)
 8006efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f00:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <vTaskStartScheduler+0xb0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e001      	b.n	8006f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d116      	bne.n	8006f46 <vTaskStartScheduler+0x82>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	613b      	str	r3, [r7, #16]
}
 8006f2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f2c:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <vTaskStartScheduler+0xb4>)
 8006f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f34:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <vTaskStartScheduler+0xb8>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <vTaskStartScheduler+0xbc>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f40:	f000 fd56 	bl	80079f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f44:	e00e      	b.n	8006f64 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f4c:	d10a      	bne.n	8006f64 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60fb      	str	r3, [r7, #12]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <vTaskStartScheduler+0x9e>
}
 8006f64:	bf00      	nop
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	080081d0 	.word	0x080081d0
 8006f70:	08007515 	.word	0x08007515
 8006f74:	20000548 	.word	0x20000548
 8006f78:	20000544 	.word	0x20000544
 8006f7c:	20000530 	.word	0x20000530
 8006f80:	20000528 	.word	0x20000528

08006f84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <vTaskSuspendAll+0x18>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	4a03      	ldr	r2, [pc, #12]	; (8006f9c <vTaskSuspendAll+0x18>)
 8006f90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f92:	bf00      	nop
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	2000054c 	.word	0x2000054c

08006fa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fae:	4b41      	ldr	r3, [pc, #260]	; (80070b4 <xTaskResumeAll+0x114>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <xTaskResumeAll+0x2c>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	603b      	str	r3, [r7, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fcc:	f000 fdb2 	bl	8007b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fd0:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <xTaskResumeAll+0x114>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	4a37      	ldr	r2, [pc, #220]	; (80070b4 <xTaskResumeAll+0x114>)
 8006fd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fda:	4b36      	ldr	r3, [pc, #216]	; (80070b4 <xTaskResumeAll+0x114>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d161      	bne.n	80070a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fe2:	4b35      	ldr	r3, [pc, #212]	; (80070b8 <xTaskResumeAll+0x118>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d05d      	beq.n	80070a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fea:	e02e      	b.n	800704a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fec:	4b33      	ldr	r3, [pc, #204]	; (80070bc <xTaskResumeAll+0x11c>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3318      	adds	r3, #24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fa18 	bl	800642e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3304      	adds	r3, #4
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fa13 	bl	800642e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	2201      	movs	r2, #1
 800700e:	409a      	lsls	r2, r3
 8007010:	4b2b      	ldr	r3, [pc, #172]	; (80070c0 <xTaskResumeAll+0x120>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4313      	orrs	r3, r2
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <xTaskResumeAll+0x120>)
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <xTaskResumeAll+0x124>)
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7ff f99f 	bl	8006374 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <xTaskResumeAll+0x128>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	429a      	cmp	r2, r3
 8007042:	d302      	bcc.n	800704a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007044:	4b21      	ldr	r3, [pc, #132]	; (80070cc <xTaskResumeAll+0x12c>)
 8007046:	2201      	movs	r2, #1
 8007048:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800704a:	4b1c      	ldr	r3, [pc, #112]	; (80070bc <xTaskResumeAll+0x11c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1cc      	bne.n	8006fec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007058:	f000 fb12 	bl	8007680 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800705c:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <xTaskResumeAll+0x130>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007068:	f000 f836 	bl	80070d8 <xTaskIncrementTick>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007072:	4b16      	ldr	r3, [pc, #88]	; (80070cc <xTaskResumeAll+0x12c>)
 8007074:	2201      	movs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3b01      	subs	r3, #1
 800707c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1f1      	bne.n	8007068 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007084:	4b12      	ldr	r3, [pc, #72]	; (80070d0 <xTaskResumeAll+0x130>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800708a:	4b10      	ldr	r3, [pc, #64]	; (80070cc <xTaskResumeAll+0x12c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007096:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <xTaskResumeAll+0x134>)
 8007098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070a6:	f000 fd75 	bl	8007b94 <vPortExitCritical>

	return xAlreadyYielded;
 80070aa:	68bb      	ldr	r3, [r7, #8]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	2000054c 	.word	0x2000054c
 80070b8:	20000524 	.word	0x20000524
 80070bc:	200004e4 	.word	0x200004e4
 80070c0:	2000052c 	.word	0x2000052c
 80070c4:	20000428 	.word	0x20000428
 80070c8:	20000424 	.word	0x20000424
 80070cc:	20000538 	.word	0x20000538
 80070d0:	20000534 	.word	0x20000534
 80070d4:	e000ed04 	.word	0xe000ed04

080070d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e2:	4b4e      	ldr	r3, [pc, #312]	; (800721c <xTaskIncrementTick+0x144>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 808e 	bne.w	8007208 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070ec:	4b4c      	ldr	r3, [pc, #304]	; (8007220 <xTaskIncrementTick+0x148>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070f4:	4a4a      	ldr	r2, [pc, #296]	; (8007220 <xTaskIncrementTick+0x148>)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d120      	bne.n	8007142 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007100:	4b48      	ldr	r3, [pc, #288]	; (8007224 <xTaskIncrementTick+0x14c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <xTaskIncrementTick+0x48>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	603b      	str	r3, [r7, #0]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <xTaskIncrementTick+0x46>
 8007120:	4b40      	ldr	r3, [pc, #256]	; (8007224 <xTaskIncrementTick+0x14c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	4b40      	ldr	r3, [pc, #256]	; (8007228 <xTaskIncrementTick+0x150>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a3e      	ldr	r2, [pc, #248]	; (8007224 <xTaskIncrementTick+0x14c>)
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4a3e      	ldr	r2, [pc, #248]	; (8007228 <xTaskIncrementTick+0x150>)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	4b3d      	ldr	r3, [pc, #244]	; (800722c <xTaskIncrementTick+0x154>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	4a3c      	ldr	r2, [pc, #240]	; (800722c <xTaskIncrementTick+0x154>)
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	f000 fa9f 	bl	8007680 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007142:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <xTaskIncrementTick+0x158>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	429a      	cmp	r2, r3
 800714a:	d348      	bcc.n	80071de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800714c:	4b35      	ldr	r3, [pc, #212]	; (8007224 <xTaskIncrementTick+0x14c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007156:	4b36      	ldr	r3, [pc, #216]	; (8007230 <xTaskIncrementTick+0x158>)
 8007158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800715c:	601a      	str	r2, [r3, #0]
					break;
 800715e:	e03e      	b.n	80071de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007160:	4b30      	ldr	r3, [pc, #192]	; (8007224 <xTaskIncrementTick+0x14c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d203      	bcs.n	8007180 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007178:	4a2d      	ldr	r2, [pc, #180]	; (8007230 <xTaskIncrementTick+0x158>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800717e:	e02e      	b.n	80071de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff f952 	bl	800642e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3318      	adds	r3, #24
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff f949 	bl	800642e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	2201      	movs	r2, #1
 80071a2:	409a      	lsls	r2, r3
 80071a4:	4b23      	ldr	r3, [pc, #140]	; (8007234 <xTaskIncrementTick+0x15c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	4a22      	ldr	r2, [pc, #136]	; (8007234 <xTaskIncrementTick+0x15c>)
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <xTaskIncrementTick+0x160>)
 80071bc:	441a      	add	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f7ff f8d5 	bl	8006374 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ce:	4b1b      	ldr	r3, [pc, #108]	; (800723c <xTaskIncrementTick+0x164>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d3b9      	bcc.n	800714c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071dc:	e7b6      	b.n	800714c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071de:	4b17      	ldr	r3, [pc, #92]	; (800723c <xTaskIncrementTick+0x164>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	4914      	ldr	r1, [pc, #80]	; (8007238 <xTaskIncrementTick+0x160>)
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d901      	bls.n	80071fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80071f6:	2301      	movs	r3, #1
 80071f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071fa:	4b11      	ldr	r3, [pc, #68]	; (8007240 <xTaskIncrementTick+0x168>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007202:	2301      	movs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e004      	b.n	8007212 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <xTaskIncrementTick+0x16c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	4a0d      	ldr	r2, [pc, #52]	; (8007244 <xTaskIncrementTick+0x16c>)
 8007210:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007212:	697b      	ldr	r3, [r7, #20]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000054c 	.word	0x2000054c
 8007220:	20000528 	.word	0x20000528
 8007224:	200004dc 	.word	0x200004dc
 8007228:	200004e0 	.word	0x200004e0
 800722c:	2000053c 	.word	0x2000053c
 8007230:	20000544 	.word	0x20000544
 8007234:	2000052c 	.word	0x2000052c
 8007238:	20000428 	.word	0x20000428
 800723c:	20000424 	.word	0x20000424
 8007240:	20000538 	.word	0x20000538
 8007244:	20000534 	.word	0x20000534

08007248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800724e:	4b27      	ldr	r3, [pc, #156]	; (80072ec <vTaskSwitchContext+0xa4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007256:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <vTaskSwitchContext+0xa8>)
 8007258:	2201      	movs	r2, #1
 800725a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800725c:	e03f      	b.n	80072de <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <vTaskSwitchContext+0xa8>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007264:	4b23      	ldr	r3, [pc, #140]	; (80072f4 <vTaskSwitchContext+0xac>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	fab3 f383 	clz	r3, r3
 8007270:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	f1c3 031f 	rsb	r3, r3, #31
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	491f      	ldr	r1, [pc, #124]	; (80072f8 <vTaskSwitchContext+0xb0>)
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <vTaskSwitchContext+0x5a>
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <vTaskSwitchContext+0xb0>)
 80072b0:	4413      	add	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3308      	adds	r3, #8
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d104      	bne.n	80072d4 <vTaskSwitchContext+0x8c>
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	605a      	str	r2, [r3, #4]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	4a08      	ldr	r2, [pc, #32]	; (80072fc <vTaskSwitchContext+0xb4>)
 80072dc:	6013      	str	r3, [r2, #0]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	2000054c 	.word	0x2000054c
 80072f0:	20000538 	.word	0x20000538
 80072f4:	2000052c 	.word	0x2000052c
 80072f8:	20000428 	.word	0x20000428
 80072fc:	20000424 	.word	0x20000424

08007300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	60fb      	str	r3, [r7, #12]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <vTaskPlaceOnEventList+0x44>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3318      	adds	r3, #24
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff f844 	bl	80063bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007334:	2101      	movs	r1, #1
 8007336:	6838      	ldr	r0, [r7, #0]
 8007338:	f000 fa66 	bl	8007808 <prvAddCurrentTaskToDelayedList>
}
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000424 	.word	0x20000424

08007348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60fb      	str	r3, [r7, #12]
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	3318      	adds	r3, #24
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff f858 	bl	800642e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800737e:	4b1d      	ldr	r3, [pc, #116]	; (80073f4 <xTaskRemoveFromEventList+0xac>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d11c      	bne.n	80073c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	3304      	adds	r3, #4
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff f84f 	bl	800642e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	2201      	movs	r2, #1
 8007396:	409a      	lsls	r2, r3
 8007398:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <xTaskRemoveFromEventList+0xb0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4313      	orrs	r3, r2
 800739e:	4a16      	ldr	r2, [pc, #88]	; (80073f8 <xTaskRemoveFromEventList+0xb0>)
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4a13      	ldr	r2, [pc, #76]	; (80073fc <xTaskRemoveFromEventList+0xb4>)
 80073b0:	441a      	add	r2, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7fe ffdb 	bl	8006374 <vListInsertEnd>
 80073be:	e005      	b.n	80073cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	3318      	adds	r3, #24
 80073c4:	4619      	mov	r1, r3
 80073c6:	480e      	ldr	r0, [pc, #56]	; (8007400 <xTaskRemoveFromEventList+0xb8>)
 80073c8:	f7fe ffd4 	bl	8006374 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <xTaskRemoveFromEventList+0xbc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d905      	bls.n	80073e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073da:	2301      	movs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <xTaskRemoveFromEventList+0xc0>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e001      	b.n	80073ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073ea:	697b      	ldr	r3, [r7, #20]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	2000054c 	.word	0x2000054c
 80073f8:	2000052c 	.word	0x2000052c
 80073fc:	20000428 	.word	0x20000428
 8007400:	200004e4 	.word	0x200004e4
 8007404:	20000424 	.word	0x20000424
 8007408:	20000538 	.word	0x20000538

0800740c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <vTaskInternalSetTimeOutState+0x24>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <vTaskInternalSetTimeOutState+0x28>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	605a      	str	r2, [r3, #4]
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	2000053c 	.word	0x2000053c
 8007434:	20000528 	.word	0x20000528

08007438 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	613b      	str	r3, [r7, #16]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60fb      	str	r3, [r7, #12]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800747a:	f000 fb5b 	bl	8007b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800747e:	4b1d      	ldr	r3, [pc, #116]	; (80074f4 <xTaskCheckForTimeOut+0xbc>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007496:	d102      	bne.n	800749e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007498:	2300      	movs	r3, #0
 800749a:	61fb      	str	r3, [r7, #28]
 800749c:	e023      	b.n	80074e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b15      	ldr	r3, [pc, #84]	; (80074f8 <xTaskCheckForTimeOut+0xc0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d007      	beq.n	80074ba <xTaskCheckForTimeOut+0x82>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074b4:	2301      	movs	r3, #1
 80074b6:	61fb      	str	r3, [r7, #28]
 80074b8:	e015      	b.n	80074e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d20b      	bcs.n	80074dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff ff9b 	bl	800740c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	e004      	b.n	80074e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074e2:	2301      	movs	r3, #1
 80074e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074e6:	f000 fb55 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 80074ea:	69fb      	ldr	r3, [r7, #28]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000528 	.word	0x20000528
 80074f8:	2000053c 	.word	0x2000053c

080074fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <vTaskMissedYield+0x14>)
 8007502:	2201      	movs	r2, #1
 8007504:	601a      	str	r2, [r3, #0]
}
 8007506:	bf00      	nop
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	20000538 	.word	0x20000538

08007514 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800751c:	f000 f852 	bl	80075c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007520:	4b06      	ldr	r3, [pc, #24]	; (800753c <prvIdleTask+0x28>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d9f9      	bls.n	800751c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <prvIdleTask+0x2c>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007538:	e7f0      	b.n	800751c <prvIdleTask+0x8>
 800753a:	bf00      	nop
 800753c:	20000428 	.word	0x20000428
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800754a:	2300      	movs	r3, #0
 800754c:	607b      	str	r3, [r7, #4]
 800754e:	e00c      	b.n	800756a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4a12      	ldr	r2, [pc, #72]	; (80075a4 <prvInitialiseTaskLists+0x60>)
 800755c:	4413      	add	r3, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fedb 	bl	800631a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3301      	adds	r3, #1
 8007568:	607b      	str	r3, [r7, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b06      	cmp	r3, #6
 800756e:	d9ef      	bls.n	8007550 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007570:	480d      	ldr	r0, [pc, #52]	; (80075a8 <prvInitialiseTaskLists+0x64>)
 8007572:	f7fe fed2 	bl	800631a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007576:	480d      	ldr	r0, [pc, #52]	; (80075ac <prvInitialiseTaskLists+0x68>)
 8007578:	f7fe fecf 	bl	800631a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800757c:	480c      	ldr	r0, [pc, #48]	; (80075b0 <prvInitialiseTaskLists+0x6c>)
 800757e:	f7fe fecc 	bl	800631a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007582:	480c      	ldr	r0, [pc, #48]	; (80075b4 <prvInitialiseTaskLists+0x70>)
 8007584:	f7fe fec9 	bl	800631a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007588:	480b      	ldr	r0, [pc, #44]	; (80075b8 <prvInitialiseTaskLists+0x74>)
 800758a:	f7fe fec6 	bl	800631a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800758e:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <prvInitialiseTaskLists+0x78>)
 8007590:	4a05      	ldr	r2, [pc, #20]	; (80075a8 <prvInitialiseTaskLists+0x64>)
 8007592:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007594:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <prvInitialiseTaskLists+0x7c>)
 8007596:	4a05      	ldr	r2, [pc, #20]	; (80075ac <prvInitialiseTaskLists+0x68>)
 8007598:	601a      	str	r2, [r3, #0]
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000428 	.word	0x20000428
 80075a8:	200004b4 	.word	0x200004b4
 80075ac:	200004c8 	.word	0x200004c8
 80075b0:	200004e4 	.word	0x200004e4
 80075b4:	200004f8 	.word	0x200004f8
 80075b8:	20000510 	.word	0x20000510
 80075bc:	200004dc 	.word	0x200004dc
 80075c0:	200004e0 	.word	0x200004e0

080075c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075ca:	e019      	b.n	8007600 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075cc:	f000 fab2 	bl	8007b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d0:	4b10      	ldr	r3, [pc, #64]	; (8007614 <prvCheckTasksWaitingTermination+0x50>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe ff26 	bl	800642e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075e2:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <prvCheckTasksWaitingTermination+0x54>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	4a0b      	ldr	r2, [pc, #44]	; (8007618 <prvCheckTasksWaitingTermination+0x54>)
 80075ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075ec:	4b0b      	ldr	r3, [pc, #44]	; (800761c <prvCheckTasksWaitingTermination+0x58>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	4a0a      	ldr	r2, [pc, #40]	; (800761c <prvCheckTasksWaitingTermination+0x58>)
 80075f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075f6:	f000 facd 	bl	8007b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f810 	bl	8007620 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007600:	4b06      	ldr	r3, [pc, #24]	; (800761c <prvCheckTasksWaitingTermination+0x58>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e1      	bne.n	80075cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200004f8 	.word	0x200004f8
 8007618:	20000524 	.word	0x20000524
 800761c:	2000050c 	.word	0x2000050c

08007620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800762e:	2b00      	cmp	r3, #0
 8007630:	d108      	bne.n	8007644 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fc2a 	bl	8007e90 <vPortFree>
				vPortFree( pxTCB );
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fc27 	bl	8007e90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007642:	e018      	b.n	8007676 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800764a:	2b01      	cmp	r3, #1
 800764c:	d103      	bne.n	8007656 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fc1e 	bl	8007e90 <vPortFree>
	}
 8007654:	e00f      	b.n	8007676 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800765c:	2b02      	cmp	r3, #2
 800765e:	d00a      	beq.n	8007676 <prvDeleteTCB+0x56>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <prvDeleteTCB+0x54>
	}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <prvResetNextTaskUnblockTime+0x38>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <prvResetNextTaskUnblockTime+0x3c>)
 8007692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007696:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007698:	e008      	b.n	80076ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <prvResetNextTaskUnblockTime+0x38>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4a04      	ldr	r2, [pc, #16]	; (80076bc <prvResetNextTaskUnblockTime+0x3c>)
 80076aa:	6013      	str	r3, [r2, #0]
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	200004dc 	.word	0x200004dc
 80076bc:	20000544 	.word	0x20000544

080076c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076c6:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <xTaskGetSchedulerState+0x34>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076ce:	2301      	movs	r3, #1
 80076d0:	607b      	str	r3, [r7, #4]
 80076d2:	e008      	b.n	80076e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076d4:	4b08      	ldr	r3, [pc, #32]	; (80076f8 <xTaskGetSchedulerState+0x38>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076dc:	2302      	movs	r3, #2
 80076de:	607b      	str	r3, [r7, #4]
 80076e0:	e001      	b.n	80076e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076e6:	687b      	ldr	r3, [r7, #4]
	}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	20000530 	.word	0x20000530
 80076f8:	2000054c 	.word	0x2000054c

080076fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d06e      	beq.n	80077f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007712:	4b3a      	ldr	r3, [pc, #232]	; (80077fc <xTaskPriorityDisinherit+0x100>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	429a      	cmp	r2, r3
 800771a:	d00a      	beq.n	8007732 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60bb      	str	r3, [r7, #8]
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007754:	1e5a      	subs	r2, r3, #1
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	429a      	cmp	r2, r3
 8007764:	d044      	beq.n	80077f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776a:	2b00      	cmp	r3, #0
 800776c:	d140      	bne.n	80077f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	3304      	adds	r3, #4
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fe5b 	bl	800642e <uxListRemove>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d115      	bne.n	80077aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007782:	491f      	ldr	r1, [pc, #124]	; (8007800 <xTaskPriorityDisinherit+0x104>)
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xTaskPriorityDisinherit+0xae>
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	2201      	movs	r2, #1
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	43da      	mvns	r2, r3
 80077a0:	4b18      	ldr	r3, [pc, #96]	; (8007804 <xTaskPriorityDisinherit+0x108>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4013      	ands	r3, r2
 80077a6:	4a17      	ldr	r2, [pc, #92]	; (8007804 <xTaskPriorityDisinherit+0x108>)
 80077a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	f1c3 0207 	rsb	r2, r3, #7
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	2201      	movs	r2, #1
 80077c4:	409a      	lsls	r2, r3
 80077c6:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <xTaskPriorityDisinherit+0x108>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	4a0d      	ldr	r2, [pc, #52]	; (8007804 <xTaskPriorityDisinherit+0x108>)
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4a08      	ldr	r2, [pc, #32]	; (8007800 <xTaskPriorityDisinherit+0x104>)
 80077de:	441a      	add	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7fe fdc4 	bl	8006374 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077f0:	697b      	ldr	r3, [r7, #20]
	}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000424 	.word	0x20000424
 8007800:	20000428 	.word	0x20000428
 8007804:	2000052c 	.word	0x2000052c

08007808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007812:	4b29      	ldr	r3, [pc, #164]	; (80078b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007818:	4b28      	ldr	r3, [pc, #160]	; (80078bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fe05 	bl	800642e <uxListRemove>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10b      	bne.n	8007842 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800782a:	4b24      	ldr	r3, [pc, #144]	; (80078bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	2201      	movs	r2, #1
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	43da      	mvns	r2, r3
 8007838:	4b21      	ldr	r3, [pc, #132]	; (80078c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4013      	ands	r3, r2
 800783e:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007840:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007848:	d10a      	bne.n	8007860 <prvAddCurrentTaskToDelayedList+0x58>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007850:	4b1a      	ldr	r3, [pc, #104]	; (80078bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3304      	adds	r3, #4
 8007856:	4619      	mov	r1, r3
 8007858:	481a      	ldr	r0, [pc, #104]	; (80078c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800785a:	f7fe fd8b 	bl	8006374 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800785e:	e026      	b.n	80078ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4413      	add	r3, r2
 8007866:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007868:	4b14      	ldr	r3, [pc, #80]	; (80078bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	429a      	cmp	r2, r3
 8007876:	d209      	bcs.n	800788c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f7fe fd99 	bl	80063bc <vListInsert>
}
 800788a:	e010      	b.n	80078ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800788c:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b0a      	ldr	r3, [pc, #40]	; (80078bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3304      	adds	r3, #4
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7fe fd8f 	bl	80063bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800789e:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d202      	bcs.n	80078ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078a8:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6013      	str	r3, [r2, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000528 	.word	0x20000528
 80078bc:	20000424 	.word	0x20000424
 80078c0:	2000052c 	.word	0x2000052c
 80078c4:	20000510 	.word	0x20000510
 80078c8:	200004e0 	.word	0x200004e0
 80078cc:	200004dc 	.word	0x200004dc
 80078d0:	20000544 	.word	0x20000544

080078d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3b04      	subs	r3, #4
 80078e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b04      	subs	r3, #4
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f023 0201 	bic.w	r2, r3, #1
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3b04      	subs	r3, #4
 8007902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007904:	4a0c      	ldr	r2, [pc, #48]	; (8007938 <pxPortInitialiseStack+0x64>)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3b14      	subs	r3, #20
 800790e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3b04      	subs	r3, #4
 800791a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f06f 0202 	mvn.w	r2, #2
 8007922:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3b20      	subs	r3, #32
 8007928:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	0800793d 	.word	0x0800793d

0800793c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <prvTaskExitError+0x54>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800794e:	d00a      	beq.n	8007966 <prvTaskExitError+0x2a>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <prvTaskExitError+0x28>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60bb      	str	r3, [r7, #8]
}
 8007978:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800797a:	bf00      	nop
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0fc      	beq.n	800797c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	2000000c 	.word	0x2000000c
	...

080079a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079a0:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <pxCurrentTCBConst2>)
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	6808      	ldr	r0, [r1, #0]
 80079a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	f380 8809 	msr	PSP, r0
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8811 	msr	BASEPRI, r0
 80079ba:	4770      	bx	lr
 80079bc:	f3af 8000 	nop.w

080079c0 <pxCurrentTCBConst2>:
 80079c0:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop

080079c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079c8:	4808      	ldr	r0, [pc, #32]	; (80079ec <prvPortStartFirstTask+0x24>)
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	6800      	ldr	r0, [r0, #0]
 80079ce:	f380 8808 	msr	MSP, r0
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8814 	msr	CONTROL, r0
 80079da:	b662      	cpsie	i
 80079dc:	b661      	cpsie	f
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	df00      	svc	0
 80079e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ea:	bf00      	nop
 80079ec:	e000ed08 	.word	0xe000ed08

080079f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079f6:	4b46      	ldr	r3, [pc, #280]	; (8007b10 <xPortStartScheduler+0x120>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a46      	ldr	r2, [pc, #280]	; (8007b14 <xPortStartScheduler+0x124>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10a      	bne.n	8007a16 <xPortStartScheduler+0x26>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	613b      	str	r3, [r7, #16]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a16:	4b3e      	ldr	r3, [pc, #248]	; (8007b10 <xPortStartScheduler+0x120>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a3f      	ldr	r2, [pc, #252]	; (8007b18 <xPortStartScheduler+0x128>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10a      	bne.n	8007a36 <xPortStartScheduler+0x46>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	60fb      	str	r3, [r7, #12]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a36:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <xPortStartScheduler+0x12c>)
 8007a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <xPortStartScheduler+0x130>)
 8007a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a5e:	4b31      	ldr	r3, [pc, #196]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a64:	e009      	b.n	8007a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a66:	4b2f      	ldr	r3, [pc, #188]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b80      	cmp	r3, #128	; 0x80
 8007a84:	d0ef      	beq.n	8007a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a86:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f1c3 0307 	rsb	r3, r3, #7
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d00a      	beq.n	8007aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	60bb      	str	r3, [r7, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <xPortStartScheduler+0x134>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <xPortStartScheduler+0x134>)
 8007ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <xPortStartScheduler+0x134>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aba:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <xPortStartScheduler+0x134>)
 8007abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <xPortStartScheduler+0x138>)
 8007acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ade:	f000 f8dd 	bl	8007c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ae2:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <xPortStartScheduler+0x13c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ae8:	f000 f8fc 	bl	8007ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007aec:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <xPortStartScheduler+0x140>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0f      	ldr	r2, [pc, #60]	; (8007b30 <xPortStartScheduler+0x140>)
 8007af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007af8:	f7ff ff66 	bl	80079c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007afc:	f7ff fba4 	bl	8007248 <vTaskSwitchContext>
	prvTaskExitError();
 8007b00:	f7ff ff1c 	bl	800793c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	e000ed00 	.word	0xe000ed00
 8007b14:	410fc271 	.word	0x410fc271
 8007b18:	410fc270 	.word	0x410fc270
 8007b1c:	e000e400 	.word	0xe000e400
 8007b20:	20000550 	.word	0x20000550
 8007b24:	20000554 	.word	0x20000554
 8007b28:	e000ed20 	.word	0xe000ed20
 8007b2c:	2000000c 	.word	0x2000000c
 8007b30:	e000ef34 	.word	0xe000ef34

08007b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	607b      	str	r3, [r7, #4]
}
 8007b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3301      	adds	r3, #1
 8007b54:	4a0d      	ldr	r2, [pc, #52]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d10f      	bne.n	8007b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <vPortEnterCritical+0x5c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	603b      	str	r3, [r7, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <vPortEnterCritical+0x4a>
	}
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	2000000c 	.word	0x2000000c
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <vPortExitCritical+0x50>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <vPortExitCritical+0x24>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	607b      	str	r3, [r7, #4]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <vPortExitCritical+0x50>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bc2:	4b08      	ldr	r3, [pc, #32]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <vPortExitCritical+0x42>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	2000000c 	.word	0x2000000c
	...

08007bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bf0:	f3ef 8009 	mrs	r0, PSP
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <pxCurrentTCBConst>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f01e 0f10 	tst.w	lr, #16
 8007c00:	bf08      	it	eq
 8007c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	6010      	str	r0, [r2, #0]
 8007c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c14:	f380 8811 	msr	BASEPRI, r0
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f7ff fb12 	bl	8007248 <vTaskSwitchContext>
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	f380 8811 	msr	BASEPRI, r0
 8007c2c:	bc09      	pop	{r0, r3}
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	6808      	ldr	r0, [r1, #0]
 8007c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c36:	f01e 0f10 	tst.w	lr, #16
 8007c3a:	bf08      	it	eq
 8007c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c40:	f380 8809 	msr	PSP, r0
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst>:
 8007c50:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c72:	f7ff fa31 	bl	80070d8 <xTaskIncrementTick>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <SysTick_Handler+0x40>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f383 8811 	msr	BASEPRI, r3
}
 8007c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <vPortSetupTimerInterrupt+0x34>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <vPortSetupTimerInterrupt+0x38>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <vPortSetupTimerInterrupt+0x3c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <vPortSetupTimerInterrupt+0x40>)
 8007cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb6:	099b      	lsrs	r3, r3, #6
 8007cb8:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <vPortSetupTimerInterrupt+0x44>)
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <vPortSetupTimerInterrupt+0x34>)
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000e010 	.word	0xe000e010
 8007cd4:	e000e018 	.word	0xe000e018
 8007cd8:	20000000 	.word	0x20000000
 8007cdc:	10624dd3 	.word	0x10624dd3
 8007ce0:	e000e014 	.word	0xe000e014

08007ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cf4 <vPortEnableVFP+0x10>
 8007ce8:	6801      	ldr	r1, [r0, #0]
 8007cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cee:	6001      	str	r1, [r0, #0]
 8007cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cf2:	bf00      	nop
 8007cf4:	e000ed88 	.word	0xe000ed88

08007cf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	; 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d04:	f7ff f93e 	bl	8006f84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d08:	4b5b      	ldr	r3, [pc, #364]	; (8007e78 <pvPortMalloc+0x180>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d10:	f000 f920 	bl	8007f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d14:	4b59      	ldr	r3, [pc, #356]	; (8007e7c <pvPortMalloc+0x184>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 8093 	bne.w	8007e48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01d      	beq.n	8007d64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d28:	2208      	movs	r2, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d014      	beq.n	8007d64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	3308      	adds	r3, #8
 8007d42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <pvPortMalloc+0x6c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	617b      	str	r3, [r7, #20]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d06e      	beq.n	8007e48 <pvPortMalloc+0x150>
 8007d6a:	4b45      	ldr	r3, [pc, #276]	; (8007e80 <pvPortMalloc+0x188>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d869      	bhi.n	8007e48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d74:	4b43      	ldr	r3, [pc, #268]	; (8007e84 <pvPortMalloc+0x18c>)
 8007d76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d78:	4b42      	ldr	r3, [pc, #264]	; (8007e84 <pvPortMalloc+0x18c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d7e:	e004      	b.n	8007d8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d903      	bls.n	8007d9c <pvPortMalloc+0xa4>
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1f1      	bne.n	8007d80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d9c:	4b36      	ldr	r3, [pc, #216]	; (8007e78 <pvPortMalloc+0x180>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d050      	beq.n	8007e48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2208      	movs	r2, #8
 8007dac:	4413      	add	r3, r2
 8007dae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	1ad2      	subs	r2, r2, r3
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d91f      	bls.n	8007e08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <pvPortMalloc+0xf8>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	613b      	str	r3, [r7, #16]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e02:	69b8      	ldr	r0, [r7, #24]
 8007e04:	f000 f908 	bl	8008018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e08:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <pvPortMalloc+0x188>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <pvPortMalloc+0x188>)
 8007e14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e16:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <pvPortMalloc+0x188>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <pvPortMalloc+0x190>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d203      	bcs.n	8007e2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e22:	4b17      	ldr	r3, [pc, #92]	; (8007e80 <pvPortMalloc+0x188>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <pvPortMalloc+0x190>)
 8007e28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <pvPortMalloc+0x184>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e3e:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <pvPortMalloc+0x194>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	4a11      	ldr	r2, [pc, #68]	; (8007e8c <pvPortMalloc+0x194>)
 8007e46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e48:	f7ff f8aa 	bl	8006fa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <pvPortMalloc+0x174>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60fb      	str	r3, [r7, #12]
}
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <pvPortMalloc+0x172>
	return pvReturn;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3728      	adds	r7, #40	; 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20004160 	.word	0x20004160
 8007e7c:	20004174 	.word	0x20004174
 8007e80:	20004164 	.word	0x20004164
 8007e84:	20004158 	.word	0x20004158
 8007e88:	20004168 	.word	0x20004168
 8007e8c:	2000416c 	.word	0x2000416c

08007e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d04d      	beq.n	8007f3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ea2:	2308      	movs	r3, #8
 8007ea4:	425b      	negs	r3, r3
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <vPortFree+0xb8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <vPortFree+0x44>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60fb      	str	r3, [r7, #12]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <vPortFree+0x62>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	60bb      	str	r3, [r7, #8]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <vPortFree+0xb8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01e      	beq.n	8007f3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d11a      	bne.n	8007f3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	4b0e      	ldr	r3, [pc, #56]	; (8007f48 <vPortFree+0xb8>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	401a      	ands	r2, r3
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f18:	f7ff f834 	bl	8006f84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <vPortFree+0xbc>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4413      	add	r3, r2
 8007f26:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <vPortFree+0xbc>)
 8007f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f2a:	6938      	ldr	r0, [r7, #16]
 8007f2c:	f000 f874 	bl	8008018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <vPortFree+0xc0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	4a06      	ldr	r2, [pc, #24]	; (8007f50 <vPortFree+0xc0>)
 8007f38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f3a:	f7ff f831 	bl	8006fa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f3e:	bf00      	nop
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20004174 	.word	0x20004174
 8007f4c:	20004164 	.word	0x20004164
 8007f50:	20004170 	.word	0x20004170

08007f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f60:	4b27      	ldr	r3, [pc, #156]	; (8008000 <prvHeapInit+0xac>)
 8007f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00c      	beq.n	8007f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3307      	adds	r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0307 	bic.w	r3, r3, #7
 8007f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	4a1f      	ldr	r2, [pc, #124]	; (8008000 <prvHeapInit+0xac>)
 8007f84:	4413      	add	r3, r2
 8007f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f8c:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <prvHeapInit+0xb0>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f92:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <prvHeapInit+0xb0>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0307 	bic.w	r3, r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a15      	ldr	r2, [pc, #84]	; (8008008 <prvHeapInit+0xb4>)
 8007fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <prvHeapInit+0xb4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fbe:	4b12      	ldr	r3, [pc, #72]	; (8008008 <prvHeapInit+0xb4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <prvHeapInit+0xb4>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	4a0a      	ldr	r2, [pc, #40]	; (800800c <prvHeapInit+0xb8>)
 8007fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a09      	ldr	r2, [pc, #36]	; (8008010 <prvHeapInit+0xbc>)
 8007fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <prvHeapInit+0xc0>)
 8007fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ff2:	601a      	str	r2, [r3, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20000558 	.word	0x20000558
 8008004:	20004158 	.word	0x20004158
 8008008:	20004160 	.word	0x20004160
 800800c:	20004168 	.word	0x20004168
 8008010:	20004164 	.word	0x20004164
 8008014:	20004174 	.word	0x20004174

08008018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008020:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <prvInsertBlockIntoFreeList+0xac>)
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e002      	b.n	800802c <prvInsertBlockIntoFreeList+0x14>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d8f7      	bhi.n	8008026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4413      	add	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d108      	bne.n	800805a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	441a      	add	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	441a      	add	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d118      	bne.n	80080a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d00d      	beq.n	8008096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	441a      	add	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e008      	b.n	80080a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008096:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	e003      	b.n	80080a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d002      	beq.n	80080b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20004158 	.word	0x20004158
 80080c8:	20004160 	.word	0x20004160

080080cc <__libc_init_array>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	4d0d      	ldr	r5, [pc, #52]	; (8008104 <__libc_init_array+0x38>)
 80080d0:	4c0d      	ldr	r4, [pc, #52]	; (8008108 <__libc_init_array+0x3c>)
 80080d2:	1b64      	subs	r4, r4, r5
 80080d4:	10a4      	asrs	r4, r4, #2
 80080d6:	2600      	movs	r6, #0
 80080d8:	42a6      	cmp	r6, r4
 80080da:	d109      	bne.n	80080f0 <__libc_init_array+0x24>
 80080dc:	4d0b      	ldr	r5, [pc, #44]	; (800810c <__libc_init_array+0x40>)
 80080de:	4c0c      	ldr	r4, [pc, #48]	; (8008110 <__libc_init_array+0x44>)
 80080e0:	f000 f82e 	bl	8008140 <_init>
 80080e4:	1b64      	subs	r4, r4, r5
 80080e6:	10a4      	asrs	r4, r4, #2
 80080e8:	2600      	movs	r6, #0
 80080ea:	42a6      	cmp	r6, r4
 80080ec:	d105      	bne.n	80080fa <__libc_init_array+0x2e>
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f4:	4798      	blx	r3
 80080f6:	3601      	adds	r6, #1
 80080f8:	e7ee      	b.n	80080d8 <__libc_init_array+0xc>
 80080fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fe:	4798      	blx	r3
 8008100:	3601      	adds	r6, #1
 8008102:	e7f2      	b.n	80080ea <__libc_init_array+0x1e>
 8008104:	080081f8 	.word	0x080081f8
 8008108:	080081f8 	.word	0x080081f8
 800810c:	080081f8 	.word	0x080081f8
 8008110:	080081fc 	.word	0x080081fc

08008114 <memcpy>:
 8008114:	440a      	add	r2, r1
 8008116:	4291      	cmp	r1, r2
 8008118:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800811c:	d100      	bne.n	8008120 <memcpy+0xc>
 800811e:	4770      	bx	lr
 8008120:	b510      	push	{r4, lr}
 8008122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800812a:	4291      	cmp	r1, r2
 800812c:	d1f9      	bne.n	8008122 <memcpy+0xe>
 800812e:	bd10      	pop	{r4, pc}

08008130 <memset>:
 8008130:	4402      	add	r2, r0
 8008132:	4603      	mov	r3, r0
 8008134:	4293      	cmp	r3, r2
 8008136:	d100      	bne.n	800813a <memset+0xa>
 8008138:	4770      	bx	lr
 800813a:	f803 1b01 	strb.w	r1, [r3], #1
 800813e:	e7f9      	b.n	8008134 <memset+0x4>

08008140 <_init>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr

0800814c <_fini>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr
