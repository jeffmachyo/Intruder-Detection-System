
Sample_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008240  08008240  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008248  08008248  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008248  08008248  00018248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800824c  0800824c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004168  20000010  08008260  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004178  08008260  00024178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a497  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003575  00000000  00000000  0003a4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001620  00000000  00000000  0003f1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023abf  00000000  00000000  000407c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abac  00000000  00000000  0006427f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd03e  00000000  00000000  0007ee2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015be69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006354  00000000  00000000  0015bebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008190 	.word	0x08008190

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08008190 	.word	0x08008190

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c
 8000544:	20000080 	.word	0x20000080

08000548 <resetSPI>:
void StartDefaultTask(void const * argument);
void IRTask_Start(void const * argument);
void spiInteractionTaskStart(void const * argument);

/* USER CODE BEGIN PFP */
void resetSPI(SPI_HandleTypeDef* ht_spi) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	HAL_SPI_DeInit(ht_spi);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f003 fe84 	bl	800425e <HAL_SPI_DeInit>
	HAL_SPI_Init(ht_spi);
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f003 fdf8 	bl	800414c <HAL_SPI_Init>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <create_message>:

uint8_t create_message(uint8_t val,uint8_t addr) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	71bb      	strb	r3, [r7, #6]
    val|=(addr<<4);
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	b25a      	sxtb	r2, r3
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	4313      	orrs	r3, r2
 8000580:	b25b      	sxtb	r3, r3
 8000582:	71fb      	strb	r3, [r7, #7]
    return val;
 8000584:	79fb      	ldrb	r3, [r7, #7]
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b09a      	sub	sp, #104	; 0x68
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fd5d 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f86d 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f9b9 	bl	8000918 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a6:	f000 f8d7 	bl	8000758 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f98b 	bl	80008c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005ae:	f000 f933 	bl	8000818 <MX_TIM1_Init>
  MX_SPI1_Init();
 80005b2:	f000 f8ff 	bl	80007b4 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of i2cmutex */
  osMutexDef(i2cmutex);
 80005b6:	2300      	movs	r3, #0
 80005b8:	663b      	str	r3, [r7, #96]	; 0x60
 80005ba:	2300      	movs	r3, #0
 80005bc:	667b      	str	r3, [r7, #100]	; 0x64
  i2cmutexHandle = osMutexCreate(osMutex(i2cmutex));
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 febb 	bl	800633e <osMutexCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a24      	ldr	r2, [pc, #144]	; (800065c <main+0xc8>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiMutex */
  osMutexDef(spiMutex);
 80005ce:	2300      	movs	r3, #0
 80005d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80005d2:	2300      	movs	r3, #0
 80005d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  spiMutexHandle = osMutexCreate(osMutex(spiMutex));
 80005d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 feaf 	bl	800633e <osMutexCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <main+0xcc>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0xd0>)
 80005e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f005 fe3c 	bl	800627e <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <main+0xd4>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of IR_Task */
  osThreadDef(IR_Task, IRTask_Start, osPriorityHigh, 0, 128);
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <main+0xd8>)
 800060e:	f107 0420 	add.w	r4, r7, #32
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IR_TaskHandle = osThreadCreate(osThread(IR_Task), NULL);
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 fe29 	bl	800627e <osThreadCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <main+0xdc>)
 8000630:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiInteractionT */
  osThreadDef(spiInteractionT, spiInteractionTaskStart, osPriorityNormal, 0, 128);
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <main+0xe0>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiInteractionTHandle = osThreadCreate(osThread(spiInteractionT), NULL);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f005 fe18 	bl	800627e <osThreadCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <main+0xe4>)
 8000652:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000654:	f005 fe0c 	bl	8006270 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0xc4>
 800065a:	bf00      	nop
 800065c:	200003c4 	.word	0x200003c4
 8000660:	200003c8 	.word	0x200003c8
 8000664:	080081cc 	.word	0x080081cc
 8000668:	200003b8 	.word	0x200003b8
 800066c:	080081e8 	.word	0x080081e8
 8000670:	200003bc 	.word	0x200003bc
 8000674:	08008204 	.word	0x08008204
 8000678:	200003c0 	.word	0x200003c0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f007 fd78 	bl	8008180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <SystemClock_Config+0xd4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a29      	ldr	r2, [pc, #164]	; (8000750 <SystemClock_Config+0xd4>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <SystemClock_Config+0xd4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <SystemClock_Config+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <SystemClock_Config+0xd8>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <SystemClock_Config+0xd8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f0:	2310      	movs	r3, #16
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fa80 	bl	8003c10 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000716:	f000 fa0e 	bl	8000b36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f002 feee 	bl	8003518 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000742:	f000 f9f8 	bl	8000b36 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 144;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2290      	movs	r2, #144	; 0x90
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f001 f89f 	bl	80018d8 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f9c9 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000280 	.word	0x20000280
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <MX_SPI1_Init+0x60>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SPI1_Init+0x5c>)
 80007fe:	f003 fca5 	bl	800414c <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 f995 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200002d4 	.word	0x200002d4
 8000814:	40013000 	.word	0x40013000

08000818 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM1_Init+0xa4>)
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <MX_TIM1_Init+0xa8>)
 8000838:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_TIM1_Init+0xa4>)
 800083c:	2253      	movs	r2, #83	; 0x53
 800083e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM1_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_TIM1_Init+0xa4>)
 8000848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_TIM1_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_TIM1_Init+0xa4>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_TIM1_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000860:	4816      	ldr	r0, [pc, #88]	; (80008bc <MX_TIM1_Init+0xa4>)
 8000862:	f004 fc67 	bl	8005134 <HAL_TIM_IC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800086c:	f000 f963 	bl	8000b36 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	480f      	ldr	r0, [pc, #60]	; (80008bc <MX_TIM1_Init+0xa4>)
 8000880:	f005 f98c 	bl	8005b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800088a:	f000 f954 	bl	8000b36 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000892:	2301      	movs	r3, #1
 8000894:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_TIM1_Init+0xa4>)
 80008a6:	f004 fec5 	bl	8005634 <HAL_TIM_IC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008b0:	f000 f941 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000032c 	.word	0x2000032c
 80008c0:	40010000 	.word	0x40010000

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_USART2_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008fc:	f005 f9de 	bl	8005cbc <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f916 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000374 	.word	0x20000374
 8000914:	40004400 	.word	0x40004400

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a26      	ldr	r2, [pc, #152]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_GPIO_Init+0xd4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_GPIO_Init+0xd4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_GPIO_Init+0xd4>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_GPIO_Init+0xd8>)
 80009a6:	f000 ff7d 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0xd8>)
 80009c4:	f000 fcce 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xd8>)
 80009de:	f000 fcc1 	bl	8001364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000

080009f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f005 fc8a 	bl	8006316 <osDelay>
 8000a02:	e7fb      	b.n	80009fc <StartDefaultTask+0x8>

08000a04 <IRTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRTask_Start */
void IRTask_Start(void const * argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IRTask_Start */
  /*
   * This task starts the reading of the IR sensor which is connected to
   * the digital input pin PA10. This result is stored in @tx_buf.
   */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <IRTask_Start+0x44>)
 8000a10:	f004 fbe0 	bl	80051d4 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {

	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000a14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <IRTask_Start+0x48>)
 8000a1a:	f000 ff2b 	bl	8001874 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d106      	bne.n	8000a32 <IRTask_Start+0x2e>
	  {
		  tx_buf[0]=1;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <IRTask_Start+0x4c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
		  toggle=1;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <IRTask_Start+0x50>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e005      	b.n	8000a3e <IRTask_Start+0x3a>

	  }
	  else
	  {
		  toggle=0;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <IRTask_Start+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
		  tx_buf[0]=0;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <IRTask_Start+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
	  }

    osDelay(20);
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f005 fc69 	bl	8006316 <osDelay>
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000a44:	e7e6      	b.n	8000a14 <IRTask_Start+0x10>
 8000a46:	bf00      	nop
 8000a48:	2000032c 	.word	0x2000032c
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	200003d4 	.word	0x200003d4
 8000a54:	200003cc 	.word	0x200003cc

08000a58 <HAL_SPI_TxCpltCallback>:
/**
* @brief Function implementing the spiInteractionT thread.
* @param argument: Not used
* @retval None
*/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	success=1;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <HAL_SPI_TxCpltCallback+0x1c>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200003d1 	.word	0x200003d1

08000a78 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if (rx_buf[0]==0x03) {
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_SPI_RxCpltCallback+0x48>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d116      	bne.n	8000ab6 <HAL_SPI_RxCpltCallback+0x3e>
		uint8_t msg[1];

		msg[0] = create_message(tx_buf[0], rx_buf[0]);
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_SPI_RxCpltCallback+0x4c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <HAL_SPI_RxCpltCallback+0x48>)
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fd66 	bl	8000564 <create_message>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	733b      	strb	r3, [r7, #12]
		test_msg = msg[0];
 8000a9c:	7b3a      	ldrb	r2, [r7, #12]
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_SPI_RxCpltCallback+0x50>)
 8000aa0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_IT(&hspi1, msg, 1);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <HAL_SPI_RxCpltCallback+0x54>)
 8000aac:	f003 fc00 	bl	80042b0 <HAL_SPI_Transmit_IT>
		rx_buf[0] = 0;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_SPI_RxCpltCallback+0x48>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
//		xSemaphoreGive(spiMutexHandle);

	}
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200003d0 	.word	0x200003d0
 8000ac4:	200003d4 	.word	0x200003d4
 8000ac8:	200003d5 	.word	0x200003d5
 8000acc:	200002d4 	.word	0x200002d4

08000ad0 <spiInteractionTaskStart>:
/* USER CODE END Header_spiInteractionTaskStart */
void spiInteractionTaskStart(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spiInteractionTaskStart */
  /* Infinite loop */
  for(;;)
  {
	  if((g_ret = HAL_SPI_Receive_IT(&hspi1, rx_buf, 1)!=HAL_OK)) {
 8000ad8:	2201      	movs	r2, #1
 8000ada:	490c      	ldr	r1, [pc, #48]	; (8000b0c <spiInteractionTaskStart+0x3c>)
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <spiInteractionTaskStart+0x40>)
 8000ade:	f003 fc71 	bl	80043c4 <HAL_SPI_Receive_IT>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf14      	ite	ne
 8000ae8:	2301      	movne	r3, #1
 8000aea:	2300      	moveq	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <spiInteractionTaskStart+0x44>)
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <spiInteractionTaskStart+0x44>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <spiInteractionTaskStart+0x32>
		  resetSPI(&hspi1);
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <spiInteractionTaskStart+0x40>)
 8000afe:	f7ff fd23 	bl	8000548 <resetSPI>
	  }
//	  HAL_SPI_Receive_IT(&hspi1, rx_buf, 1);

    osDelay(20);
 8000b02:	2014      	movs	r0, #20
 8000b04:	f005 fc07 	bl	8006316 <osDelay>
	  if((g_ret = HAL_SPI_Receive_IT(&hspi1, rx_buf, 1)!=HAL_OK)) {
 8000b08:	e7e6      	b.n	8000ad8 <spiInteractionTaskStart+0x8>
 8000b0a:	bf00      	nop
 8000b0c:	200003d0 	.word	0x200003d0
 8000b10:	200002d4 	.word	0x200002d4
 8000b14:	200003d6 	.word	0x200003d6

08000b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d101      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2a:	f000 fab7 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3a:	b672      	cpsid	i
}
 8000b3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_MspInit+0x54>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <HAL_MspInit+0x54>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x54>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_MspInit+0x54>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_MspInit+0x54>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_MspInit+0x54>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	f06f 0001 	mvn.w	r0, #1
 8000b86:	f000 fb85 	bl	8001294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <HAL_I2C_MspInit+0xa4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d13c      	bne.n	8000c34 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_I2C_MspInit+0xa8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <HAL_I2C_MspInit+0xa8>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_I2C_MspInit+0xa8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bdc:	2312      	movs	r3, #18
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be8:	2304      	movs	r3, #4
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <HAL_I2C_MspInit+0xac>)
 8000bf4:	f000 fbb6 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_I2C_MspInit+0xa8>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_I2C_MspInit+0xa8>)
 8000c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_I2C_MspInit+0xa8>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2105      	movs	r1, #5
 8000c18:	201f      	movs	r0, #31
 8000c1a:	f000 fb3b 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c1e:	201f      	movs	r0, #31
 8000c20:	f000 fb54 	bl	80012cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2105      	movs	r1, #5
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f000 fb33 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c2e:	2020      	movs	r0, #32
 8000c30:	f000 fb4c 	bl	80012cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400

08000c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <HAL_SPI_MspInit+0x94>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d133      	bne.n	8000cd2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_SPI_MspInit+0x98>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_SPI_MspInit+0x98>)
 8000c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_SPI_MspInit+0x98>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_SPI_MspInit+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_SPI_MspInit+0x98>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_SPI_MspInit+0x98>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ca2:	23e0      	movs	r3, #224	; 0xe0
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_SPI_MspInit+0x9c>)
 8000cbe:	f000 fb51 	bl	8001364 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2023      	movs	r0, #35	; 0x23
 8000cc8:	f000 fae4 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ccc:	2023      	movs	r0, #35	; 0x23
 8000cce:	f000 fafd 	bl	80012cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_SPI_MspDeInit+0x34>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10c      	bne.n	8000d14 <HAL_SPI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_SPI_MspDeInit+0x38>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_SPI_MspDeInit+0x38>)
 8000d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8000d06:	21e0      	movs	r1, #224	; 0xe0
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <HAL_SPI_MspDeInit+0x3c>)
 8000d0a:	f000 fcbf 	bl	800168c <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000d0e:	2023      	movs	r0, #35	; 0x23
 8000d10:	f000 faea 	bl	80012e8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40013000 	.word	0x40013000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_TIM_IC_MspInit+0x94>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d134      	bne.n	8000db4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <HAL_TIM_IC_MspInit+0x9c>)
 8000da0:	f000 fae0 	bl	8001364 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2105      	movs	r1, #5
 8000da8:	201b      	movs	r0, #27
 8000daa:	f000 fa73 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dae:	201b      	movs	r0, #27
 8000db0:	f000 fa8c 	bl	80012cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40010000 	.word	0x40010000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12b      	bne.n	8000e42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_UART_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e22:	230c      	movs	r3, #12
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e32:	2307      	movs	r3, #7
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_UART_MspInit+0x8c>)
 8000e3e:	f000 fa91 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <HAL_InitTick+0xe8>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <HAL_InitTick+0xe8>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
 8000e78:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <HAL_InitTick+0xe8>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e84:	f107 0210 	add.w	r2, r7, #16
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fc5c 	bl	800374c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e9e:	f002 fc2d 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8000ea2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ea4:	e004      	b.n	8000eb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ea6:	f002 fc29 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb2:	4a24      	ldr	r2, [pc, #144]	; (8000f44 <HAL_InitTick+0xec>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	0c9b      	lsrs	r3, r3, #18
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_InitTick+0xf0>)
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_InitTick+0xf0>)
 8000ec8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ecc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <HAL_InitTick+0xf0>)
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_InitTick+0xf0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_InitTick+0xf0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_InitTick+0xf0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ee6:	4818      	ldr	r0, [pc, #96]	; (8000f48 <HAL_InitTick+0xf0>)
 8000ee8:	f004 f85a 	bl	8004fa0 <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d11b      	bne.n	8000f32 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000efa:	4813      	ldr	r0, [pc, #76]	; (8000f48 <HAL_InitTick+0xf0>)
 8000efc:	f004 f8aa 	bl	8005054 <HAL_TIM_Base_Start_IT>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d111      	bne.n	8000f32 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f000 f9dc 	bl	80012cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d808      	bhi.n	8000f2c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	201c      	movs	r0, #28
 8000f20:	f000 f9b8 	bl	8001294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_InitTick+0xf4>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e002      	b.n	8000f32 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3738      	adds	r7, #56	; 0x38
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	431bde83 	.word	0x431bde83
 8000f48:	200003d8 	.word	0x200003d8
 8000f4c:	20000004 	.word	0x20000004

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM1_CC_IRQHandler+0x10>)
 8000f82:	f004 fa4f 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000032c 	.word	0x2000032c

08000f90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM2_IRQHandler+0x10>)
 8000f96:	f004 fa45 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200003d8 	.word	0x200003d8

08000fa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <I2C1_EV_IRQHandler+0x10>)
 8000faa:	f000 fdd9 	bl	8001b60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000280 	.word	0x20000280

08000fb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <I2C1_ER_IRQHandler+0x10>)
 8000fbe:	f000 ff40 	bl	8001e42 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000280 	.word	0x20000280

08000fcc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <SPI1_IRQHandler+0x10>)
 8000fd2:	f003 fb29 	bl	8004628 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002d4 	.word	0x200002d4

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001020:	4c0b      	ldr	r4, [pc, #44]	; (8001050 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102e:	f7ff ffd7 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f007 f873 	bl	800811c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff faad 	bl	8000594 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001048:	08008250 	.word	0x08008250
  ldr r2, =_sbss
 800104c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001050:	20004178 	.word	0x20004178

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8fc 	bl	800127e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	200f      	movs	r0, #15
 8001088:	f7ff fee6 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fd58 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000420 	.word	0x20000420

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000420 	.word	0x20000420

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db12      	blt.n	80011b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	490a      	ldr	r1, [pc, #40]	; (80011c0 <__NVIC_DisableIRQ+0x44>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	3320      	adds	r3, #32
 80011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011a8:	f3bf 8f4f 	dsb	sy
}
 80011ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ae:	f3bf 8f6f 	isb	sy
}
 80011b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff28 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a6:	f7ff ff3d 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f7ff ffb1 	bl	8001218 <NVIC_EncodePriority>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff80 	bl	80011c4 <__NVIC_SetPriority>
}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff30 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff40 	bl	800117c <__NVIC_DisableIRQ>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d004      	beq.n	8001322 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00c      	b.n	800133c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001356:	b2db      	uxtb	r3, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e165      	b.n	800164c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8154 	bne.w	8001646 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80ae 	beq.w	8001646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <HAL_GPIO_Init+0x300>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a5c      	ldr	r2, [pc, #368]	; (8001664 <HAL_GPIO_Init+0x300>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b5a      	ldr	r3, [pc, #360]	; (8001664 <HAL_GPIO_Init+0x300>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a58      	ldr	r2, [pc, #352]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_GPIO_Init+0x308>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d025      	beq.n	800157e <HAL_GPIO_Init+0x21a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_GPIO_Init+0x30c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01f      	beq.n	800157a <HAL_GPIO_Init+0x216>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x310>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d019      	beq.n	8001576 <HAL_GPIO_Init+0x212>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x314>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0x20e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_GPIO_Init+0x318>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d00d      	beq.n	800156e <HAL_GPIO_Init+0x20a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4a      	ldr	r2, [pc, #296]	; (8001680 <HAL_GPIO_Init+0x31c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d007      	beq.n	800156a <HAL_GPIO_Init+0x206>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a49      	ldr	r2, [pc, #292]	; (8001684 <HAL_GPIO_Init+0x320>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_GPIO_Init+0x202>
 8001562:	2306      	movs	r3, #6
 8001564:	e00c      	b.n	8001580 <HAL_GPIO_Init+0x21c>
 8001566:	2307      	movs	r3, #7
 8001568:	e00a      	b.n	8001580 <HAL_GPIO_Init+0x21c>
 800156a:	2305      	movs	r3, #5
 800156c:	e008      	b.n	8001580 <HAL_GPIO_Init+0x21c>
 800156e:	2304      	movs	r3, #4
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x21c>
 8001572:	2303      	movs	r3, #3
 8001574:	e004      	b.n	8001580 <HAL_GPIO_Init+0x21c>
 8001576:	2302      	movs	r3, #2
 8001578:	e002      	b.n	8001580 <HAL_GPIO_Init+0x21c>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x21c>
 800157e:	2300      	movs	r3, #0
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4093      	lsls	r3, r2
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001590:	4935      	ldr	r1, [pc, #212]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <HAL_GPIO_Init+0x324>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <HAL_GPIO_Init+0x324>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_GPIO_Init+0x324>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ec:	4a26      	ldr	r2, [pc, #152]	; (8001688 <HAL_GPIO_Init+0x324>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_GPIO_Init+0x324>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <HAL_GPIO_Init+0x324>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_GPIO_Init+0x324>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_GPIO_Init+0x324>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3301      	adds	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	f67f ae96 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40013800 	.word	0x40013800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	40020800 	.word	0x40020800
 8001678:	40020c00 	.word	0x40020c00
 800167c:	40021000 	.word	0x40021000
 8001680:	40021400 	.word	0x40021400
 8001684:	40021800 	.word	0x40021800
 8001688:	40013c00 	.word	0x40013c00

0800168c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e0c7      	b.n	8001838 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a8:	2201      	movs	r2, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	429a      	cmp	r2, r3
 80016c0:	f040 80b7 	bne.w	8001832 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80016c4:	4a62      	ldr	r2, [pc, #392]	; (8001850 <HAL_GPIO_DeInit+0x1c4>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_GPIO_DeInit+0x1c8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d025      	beq.n	800173a <HAL_GPIO_DeInit+0xae>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a59      	ldr	r2, [pc, #356]	; (8001858 <HAL_GPIO_DeInit+0x1cc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <HAL_GPIO_DeInit+0xaa>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_GPIO_DeInit+0x1d0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_DeInit+0xa6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a57      	ldr	r2, [pc, #348]	; (8001860 <HAL_GPIO_DeInit+0x1d4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_DeInit+0xa2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a56      	ldr	r2, [pc, #344]	; (8001864 <HAL_GPIO_DeInit+0x1d8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_DeInit+0x9e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a55      	ldr	r2, [pc, #340]	; (8001868 <HAL_GPIO_DeInit+0x1dc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_DeInit+0x9a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a54      	ldr	r2, [pc, #336]	; (800186c <HAL_GPIO_DeInit+0x1e0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_DeInit+0x96>
 800171e:	2306      	movs	r3, #6
 8001720:	e00c      	b.n	800173c <HAL_GPIO_DeInit+0xb0>
 8001722:	2307      	movs	r3, #7
 8001724:	e00a      	b.n	800173c <HAL_GPIO_DeInit+0xb0>
 8001726:	2305      	movs	r3, #5
 8001728:	e008      	b.n	800173c <HAL_GPIO_DeInit+0xb0>
 800172a:	2304      	movs	r3, #4
 800172c:	e006      	b.n	800173c <HAL_GPIO_DeInit+0xb0>
 800172e:	2303      	movs	r3, #3
 8001730:	e004      	b.n	800173c <HAL_GPIO_DeInit+0xb0>
 8001732:	2302      	movs	r3, #2
 8001734:	e002      	b.n	800173c <HAL_GPIO_DeInit+0xb0>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_GPIO_DeInit+0xb0>
 800173a:	2300      	movs	r3, #0
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	f002 0203 	and.w	r2, r2, #3
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	4093      	lsls	r3, r2
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	429a      	cmp	r2, r3
 800174a:	d132      	bne.n	80017b2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800174c:	4b48      	ldr	r3, [pc, #288]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	4946      	ldr	r1, [pc, #280]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 8001756:	4013      	ands	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	4943      	ldr	r1, [pc, #268]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 8001764:	4013      	ands	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	493f      	ldr	r1, [pc, #252]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 8001772:	4013      	ands	r3, r2
 8001774:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	493c      	ldr	r1, [pc, #240]	; (8001870 <HAL_GPIO_DeInit+0x1e4>)
 8001780:	4013      	ands	r3, r2
 8001782:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001794:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <HAL_GPIO_DeInit+0x1c4>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	43da      	mvns	r2, r3
 80017a4:	482a      	ldr	r0, [pc, #168]	; (8001850 <HAL_GPIO_DeInit+0x1c4>)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	400a      	ands	r2, r1
 80017ac:	3302      	adds	r3, #2
 80017ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2103      	movs	r1, #3
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	08d2      	lsrs	r2, r2, #3
 80017e8:	4019      	ands	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2103      	movs	r1, #3
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	2101      	movs	r1, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	2103      	movs	r1, #3
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	401a      	ands	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	f67f af34 	bls.w	80016a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40013800 	.word	0x40013800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40021000 	.word	0x40021000
 8001868:	40021400 	.word	0x40021400
 800186c:	40021800 	.word	0x40021800
 8001870:	40013c00 	.word	0x40013c00

08001874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e001      	b.n	8001896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018c0:	e003      	b.n	80018ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	041a      	lsls	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e12b      	b.n	8001b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff f94a 	bl	8000b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800192a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800193a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800193c:	f001 fede 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a81      	ldr	r2, [pc, #516]	; (8001b4c <HAL_I2C_Init+0x274>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d807      	bhi.n	800195c <HAL_I2C_Init+0x84>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a80      	ldr	r2, [pc, #512]	; (8001b50 <HAL_I2C_Init+0x278>)
 8001950:	4293      	cmp	r3, r2
 8001952:	bf94      	ite	ls
 8001954:	2301      	movls	r3, #1
 8001956:	2300      	movhi	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e006      	b.n	800196a <HAL_I2C_Init+0x92>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a7d      	ldr	r2, [pc, #500]	; (8001b54 <HAL_I2C_Init+0x27c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	bf94      	ite	ls
 8001964:	2301      	movls	r3, #1
 8001966:	2300      	movhi	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0e7      	b.n	8001b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4a78      	ldr	r2, [pc, #480]	; (8001b58 <HAL_I2C_Init+0x280>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0c9b      	lsrs	r3, r3, #18
 800197c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_I2C_Init+0x274>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d802      	bhi.n	80019ac <HAL_I2C_Init+0xd4>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	e009      	b.n	80019c0 <HAL_I2C_Init+0xe8>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	4a69      	ldr	r2, [pc, #420]	; (8001b5c <HAL_I2C_Init+0x284>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	3301      	adds	r3, #1
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	495c      	ldr	r1, [pc, #368]	; (8001b4c <HAL_I2C_Init+0x274>)
 80019dc:	428b      	cmp	r3, r1
 80019de:	d819      	bhi.n	8001a14 <HAL_I2C_Init+0x13c>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e59      	subs	r1, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019f4:	400b      	ands	r3, r1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_I2C_Init+0x138>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e59      	subs	r1, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0e:	e051      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a10:	2304      	movs	r3, #4
 8001a12:	e04f      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d111      	bne.n	8001a40 <HAL_I2C_Init+0x168>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	440b      	add	r3, r1
 8001a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	e012      	b.n	8001a66 <HAL_I2C_Init+0x18e>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e58      	subs	r0, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	0099      	lsls	r1, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Init+0x196>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e022      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10e      	bne.n	8001a94 <HAL_I2C_Init+0x1bc>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1e58      	subs	r0, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a92:	e00f      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e58      	subs	r0, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	0099      	lsls	r1, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6809      	ldr	r1, [r1, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6911      	ldr	r1, [r2, #16]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	4311      	orrs	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	000186a0 	.word	0x000186a0
 8001b50:	001e847f 	.word	0x001e847f
 8001b54:	003d08ff 	.word	0x003d08ff
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	10624dd3 	.word	0x10624dd3

08001b60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d003      	beq.n	8001b98 <HAL_I2C_EV_IRQHandler+0x38>
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	2b40      	cmp	r3, #64	; 0x40
 8001b94:	f040 80c1 	bne.w	8001d1a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10d      	bne.n	8001bce <HAL_I2C_EV_IRQHandler+0x6e>
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001bb8:	d003      	beq.n	8001bc2 <HAL_I2C_EV_IRQHandler+0x62>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001bc0:	d101      	bne.n	8001bc6 <HAL_I2C_EV_IRQHandler+0x66>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_I2C_EV_IRQHandler+0x68>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f000 8132 	beq.w	8001e32 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_I2C_EV_IRQHandler+0x92>
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	0a5b      	lsrs	r3, r3, #9
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f001 fc7b 	bl	80034e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fd83 	bl	80026f6 <I2C_Master_SB>
 8001bf0:	e092      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_I2C_EV_IRQHandler+0xb2>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	0a5b      	lsrs	r3, r3, #9
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fdf9 	bl	8002802 <I2C_Master_ADD10>
 8001c10:	e082      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0xd2>
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	0a5b      	lsrs	r3, r3, #9
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fe13 	bl	8002856 <I2C_Master_ADDR>
 8001c30:	e072      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d03b      	beq.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c4c:	f000 80f3 	beq.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	09db      	lsrs	r3, r3, #7
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00f      	beq.n	8001c7c <HAL_I2C_EV_IRQHandler+0x11c>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_I2C_EV_IRQHandler+0x11c>
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f9f3 	bl	8002060 <I2C_MasterTransmit_TXE>
 8001c7a:	e04d      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80d6 	beq.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	0a5b      	lsrs	r3, r3, #9
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80cf 	beq.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001c98:	7bbb      	ldrb	r3, [r7, #14]
 8001c9a:	2b21      	cmp	r3, #33	; 0x21
 8001c9c:	d103      	bne.n	8001ca6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fa7a 	bl	8002198 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca4:	e0c7      	b.n	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	f040 80c4 	bne.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fae8 	bl	8002284 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb4:	e0bf      	b.n	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc4:	f000 80b7 	beq.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00f      	beq.n	8001cf4 <HAL_I2C_EV_IRQHandler+0x194>
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	0a9b      	lsrs	r3, r3, #10
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <HAL_I2C_EV_IRQHandler+0x194>
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fb5d 	bl	80023ac <I2C_MasterReceive_RXNE>
 8001cf2:	e011      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 809a 	beq.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	0a5b      	lsrs	r3, r3, #9
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8093 	beq.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fc06 	bl	8002522 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d16:	e08e      	b.n	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d18:	e08d      	b.n	8001e36 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e007      	b.n	8001d3c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0x20e>
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 ffc4 	bl	8002cf4 <I2C_Slave_ADDR>
 8001d6c:	e066      	b.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_I2C_EV_IRQHandler+0x22e>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0a5b      	lsrs	r3, r3, #9
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fffe 	bl	8002d88 <I2C_Slave_STOPF>
 8001d8c:	e056      	b.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d8e:	7bbb      	ldrb	r3, [r7, #14]
 8001d90:	2b21      	cmp	r3, #33	; 0x21
 8001d92:	d002      	beq.n	8001d9a <HAL_I2C_EV_IRQHandler+0x23a>
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	2b29      	cmp	r3, #41	; 0x29
 8001d98:	d125      	bne.n	8001de6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	09db      	lsrs	r3, r3, #7
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00f      	beq.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x266>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	0a9b      	lsrs	r3, r3, #10
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x266>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 feda 	bl	8002b78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dc4:	e039      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d033      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2da>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	0a5b      	lsrs	r3, r3, #9
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d02d      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 ff07 	bl	8002bf2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001de4:	e029      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00f      	beq.n	8001e12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	0a9b      	lsrs	r3, r3, #10
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 ff12 	bl	8002c34 <I2C_SlaveReceive_RXNE>
 8001e10:	e014      	b.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	0a5b      	lsrs	r3, r3, #9
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 ff40 	bl	8002cb0 <I2C_SlaveReceive_BTF>
 8001e30:	e004      	b.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001e32:	bf00      	nop
 8001e34:	e002      	b.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	bf00      	nop
 8001e38:	e000      	b.n	8001e3c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e3a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b08a      	sub	sp, #40	; 0x28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e64:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00e      	beq.n	8001e90 <HAL_I2C_ER_IRQHandler+0x4e>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	0a5b      	lsrs	r3, r3, #9
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <HAL_I2C_ER_IRQHandler+0x78>
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001eb8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	0a9b      	lsrs	r3, r3, #10
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03f      	beq.n	8001f46 <HAL_I2C_ER_IRQHandler+0x104>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d039      	beq.n	8001f46 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001ed2:	7efb      	ldrb	r3, [r7, #27]
 8001ed4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001eec:	7ebb      	ldrb	r3, [r7, #26]
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d112      	bne.n	8001f18 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10f      	bne.n	8001f18 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	2b21      	cmp	r3, #33	; 0x21
 8001efc:	d008      	beq.n	8001f10 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001efe:	7cfb      	ldrb	r3, [r7, #19]
 8001f00:	2b29      	cmp	r3, #41	; 0x29
 8001f02:	d005      	beq.n	8001f10 <HAL_I2C_ER_IRQHandler+0xce>
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	2b28      	cmp	r3, #40	; 0x28
 8001f08:	d106      	bne.n	8001f18 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b21      	cmp	r3, #33	; 0x21
 8001f0e:	d103      	bne.n	8001f18 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 f869 	bl	8002fe8 <I2C_Slave_AF>
 8001f16:	e016      	b.n	8001f46 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f20:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f2a:	7efb      	ldrb	r3, [r7, #27]
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d002      	beq.n	8001f36 <HAL_I2C_ER_IRQHandler+0xf4>
 8001f30:	7efb      	ldrb	r3, [r7, #27]
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d107      	bne.n	8001f46 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f44:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	0adb      	lsrs	r3, r3, #11
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00e      	beq.n	8001f70 <HAL_I2C_ER_IRQHandler+0x12e>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f001 f8a0 	bl	80030c8 <I2C_ITError>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3728      	adds	r7, #40	; 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
 8001fec:	4613      	mov	r3, r2
 8001fee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002076:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d150      	bne.n	8002128 <I2C_MasterTransmit_TXE+0xc8>
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b21      	cmp	r3, #33	; 0x21
 800208a:	d14d      	bne.n	8002128 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b08      	cmp	r3, #8
 8002090:	d01d      	beq.n	80020ce <I2C_MasterTransmit_TXE+0x6e>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b20      	cmp	r3, #32
 8002096:	d01a      	beq.n	80020ce <I2C_MasterTransmit_TXE+0x6e>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800209e:	d016      	beq.n	80020ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2211      	movs	r2, #17
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ff62 	bl	8001f90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020cc:	e060      	b.n	8002190 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d107      	bne.n	8002118 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff7d 	bl	8002010 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002116:	e03b      	b.n	8002190 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff35 	bl	8001f90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002126:	e033      	b.n	8002190 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	2b21      	cmp	r3, #33	; 0x21
 800212c:	d005      	beq.n	800213a <I2C_MasterTransmit_TXE+0xda>
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d12d      	bne.n	8002190 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b22      	cmp	r3, #34	; 0x22
 8002138:	d12a      	bne.n	8002190 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d108      	bne.n	8002156 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002152:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002154:	e01c      	b.n	8002190 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d103      	bne.n	800216a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f88e 	bl	8002284 <I2C_MemoryTransmit_TXE_BTF>
}
 8002168:	e012      	b.n	8002190 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800218e:	e7ff      	b.n	8002190 <I2C_MasterTransmit_TXE+0x130>
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b21      	cmp	r3, #33	; 0x21
 80021b0:	d164      	bne.n	800227c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d012      	beq.n	80021e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021e0:	e04c      	b.n	800227c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d01d      	beq.n	8002224 <I2C_MasterTransmit_BTF+0x8c>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d01a      	beq.n	8002224 <I2C_MasterTransmit_BTF+0x8c>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021f4:	d016      	beq.n	8002224 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002204:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2211      	movs	r2, #17
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff feb7 	bl	8001f90 <HAL_I2C_MasterTxCpltCallback>
}
 8002222:	e02b      	b.n	800227c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002232:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002242:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d107      	bne.n	800226e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fed2 	bl	8002010 <HAL_I2C_MemTxCpltCallback>
}
 800226c:	e006      	b.n	800227c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fe8a 	bl	8001f90 <HAL_I2C_MasterTxCpltCallback>
}
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002298:	2b00      	cmp	r3, #0
 800229a:	d11d      	bne.n	80022d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d10b      	bne.n	80022bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80022ba:	e073      	b.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	121b      	asrs	r3, r3, #8
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022d6:	e065      	b.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10b      	bne.n	80022f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022f6:	e055      	b.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d151      	bne.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b22      	cmp	r3, #34	; 0x22
 8002304:	d10d      	bne.n	8002322 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002314:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002320:	e040      	b.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b21      	cmp	r3, #33	; 0x21
 8002330:	d112      	bne.n	8002358 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002356:	e025      	b.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d120      	bne.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b21      	cmp	r3, #33	; 0x21
 8002366:	d11d      	bne.n	80023a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002376:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fe36 	bl	8002010 <HAL_I2C_MemTxCpltCallback>
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b22      	cmp	r3, #34	; 0x22
 80023be:	f040 80ac 	bne.w	800251a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d921      	bls.n	8002414 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	f040 808c 	bne.w	800251a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002410:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002412:	e082      	b.n	800251a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2b02      	cmp	r3, #2
 800241a:	d075      	beq.n	8002508 <I2C_MasterReceive_RXNE+0x15c>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d002      	beq.n	8002428 <I2C_MasterReceive_RXNE+0x7c>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d16f      	bne.n	8002508 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f001 f827 	bl	800347c <I2C_WaitOnSTOPRequestThroughIT>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d142      	bne.n	80024ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002442:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002452:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d10a      	bne.n	80024a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff fdc1 	bl	8002024 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024a2:	e03a      	b.n	800251a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2212      	movs	r2, #18
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fd76 	bl	8001fa4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024b8:	e02f      	b.n	800251a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fd99 	bl	8002038 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002506:	e008      	b.n	800251a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002516:	605a      	str	r2, [r3, #4]
}
 8002518:	e7ff      	b.n	800251a <I2C_MasterReceive_RXNE+0x16e>
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b04      	cmp	r3, #4
 8002538:	d11b      	bne.n	8002572 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002548:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002570:	e0bd      	b.n	80026ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b03      	cmp	r3, #3
 800257a:	d129      	bne.n	80025d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00a      	beq.n	80025a8 <I2C_MasterReceive_BTF+0x86>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d007      	beq.n	80025a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025ce:	e08e      	b.n	80026ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d176      	bne.n	80026c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d002      	beq.n	80025e6 <I2C_MasterReceive_BTF+0xc4>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d108      	bne.n	80025f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e019      	b.n	800262c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d002      	beq.n	8002604 <I2C_MasterReceive_BTF+0xe2>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d108      	bne.n	8002616 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e00a      	b.n	800262c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b10      	cmp	r3, #16
 800261a:	d007      	beq.n	800262c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002686:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d10a      	bne.n	80026b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fcba 	bl	8002024 <HAL_I2C_MemRxCpltCallback>
}
 80026b0:	e01d      	b.n	80026ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2212      	movs	r2, #18
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fc6f 	bl	8001fa4 <HAL_I2C_MasterRxCpltCallback>
}
 80026c6:	e012      	b.n	80026ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d117      	bne.n	800273a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002722:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002724:	e067      	b.n	80027f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]
}
 8002738:	e05d      	b.n	80027f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002742:	d133      	bne.n	80027ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b21      	cmp	r3, #33	; 0x21
 800274e:	d109      	bne.n	8002764 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002760:	611a      	str	r2, [r3, #16]
 8002762:	e008      	b.n	8002776 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <I2C_Master_SB+0x92>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d108      	bne.n	800279a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	2b00      	cmp	r3, #0
 800278e:	d032      	beq.n	80027f6 <I2C_Master_SB+0x100>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d02d      	beq.n	80027f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a8:	605a      	str	r2, [r3, #4]
}
 80027aa:	e024      	b.n	80027f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10e      	bne.n	80027d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	11db      	asrs	r3, r3, #7
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0306 	and.w	r3, r3, #6
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f063 030f 	orn	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]
}
 80027d0:	e011      	b.n	80027f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d10d      	bne.n	80027f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	b29b      	uxth	r3, r3
 80027e0:	11db      	asrs	r3, r3, #7
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f003 0306 	and.w	r3, r3, #6
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f063 030e 	orn	r3, r3, #14
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	611a      	str	r2, [r3, #16]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	b2da      	uxtb	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <I2C_Master_ADD10+0x26>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d108      	bne.n	800283a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00c      	beq.n	800284a <I2C_Master_ADD10+0x48>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002848:	605a      	str	r2, [r3, #4]
  }
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002856:	b480      	push	{r7}
 8002858:	b091      	sub	sp, #68	; 0x44
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002864:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b22      	cmp	r3, #34	; 0x22
 800287e:	f040 8169 	bne.w	8002b54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10f      	bne.n	80028aa <I2C_Master_ADDR+0x54>
 800288a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d10b      	bne.n	80028aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	e160      	b.n	8002b6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11d      	bne.n	80028ee <I2C_Master_ADDR+0x98>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028ba:	d118      	bne.n	80028ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	651a      	str	r2, [r3, #80]	; 0x50
 80028ec:	e13e      	b.n	8002b6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d113      	bne.n	8002920 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e115      	b.n	8002b4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	f040 808a 	bne.w	8002a40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002932:	d137      	bne.n	80029a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002942:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002952:	d113      	bne.n	800297c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002962:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	e0e7      	b.n	8002b4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e0d3      	b.n	8002b4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d02e      	beq.n	8002a08 <I2C_Master_ADDR+0x1b2>
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d02b      	beq.n	8002a08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	2b12      	cmp	r3, #18
 80029b4:	d102      	bne.n	80029bc <I2C_Master_ADDR+0x166>
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d125      	bne.n	8002a08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d00e      	beq.n	80029e0 <I2C_Master_ADDR+0x18a>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d00b      	beq.n	80029e0 <I2C_Master_ADDR+0x18a>
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d008      	beq.n	80029e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e007      	b.n	80029f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	e0a1      	b.n	8002b4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e085      	b.n	8002b4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d14d      	bne.n	8002ae6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d016      	beq.n	8002a7e <I2C_Master_ADDR+0x228>
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d013      	beq.n	8002a7e <I2C_Master_ADDR+0x228>
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d010      	beq.n	8002a7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e007      	b.n	8002a8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9c:	d117      	bne.n	8002ace <I2C_Master_ADDR+0x278>
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aa4:	d00b      	beq.n	8002abe <I2C_Master_ADDR+0x268>
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d008      	beq.n	8002abe <I2C_Master_ADDR+0x268>
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d005      	beq.n	8002abe <I2C_Master_ADDR+0x268>
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d002      	beq.n	8002abe <I2C_Master_ADDR+0x268>
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d107      	bne.n	8002ace <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002acc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	e032      	b.n	8002b4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b04:	d117      	bne.n	8002b36 <I2C_Master_ADDR+0x2e0>
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b0c:	d00b      	beq.n	8002b26 <I2C_Master_ADDR+0x2d0>
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d008      	beq.n	8002b26 <I2C_Master_ADDR+0x2d0>
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d005      	beq.n	8002b26 <I2C_Master_ADDR+0x2d0>
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d002      	beq.n	8002b26 <I2C_Master_ADDR+0x2d0>
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d107      	bne.n	8002b36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b52:	e00b      	b.n	8002b6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
}
 8002b6a:	e7ff      	b.n	8002b6c <I2C_Master_ADDR+0x316>
 8002b6c:	bf00      	nop
 8002b6e:	3744      	adds	r7, #68	; 0x44
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02b      	beq.n	8002bea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d114      	bne.n	8002bea <I2C_SlaveTransmit_TXE+0x72>
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b29      	cmp	r3, #41	; 0x29
 8002bc4:	d111      	bne.n	8002bea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2221      	movs	r2, #33	; 0x21
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2228      	movs	r2, #40	; 0x28
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff f9e7 	bl	8001fb8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d011      	beq.n	8002c28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02c      	beq.n	8002ca8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d114      	bne.n	8002ca8 <I2C_SlaveReceive_RXNE+0x74>
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b2a      	cmp	r3, #42	; 0x2a
 8002c82:	d111      	bne.n	8002ca8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2222      	movs	r2, #34	; 0x22
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2228      	movs	r2, #40	; 0x28
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff f992 	bl	8001fcc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d0e:	2b28      	cmp	r3, #40	; 0x28
 8002d10:	d127      	bne.n	8002d62 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d20:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	09db      	lsrs	r3, r3, #7
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	81bb      	strh	r3, [r7, #12]
 8002d44:	e002      	b.n	8002d4c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d54:	89ba      	ldrh	r2, [r7, #12]
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff f940 	bl	8001fe0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d60:	e00e      	b.n	8002d80 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002da6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de4:	d172      	bne.n	8002ecc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b22      	cmp	r3, #34	; 0x22
 8002dea:	d002      	beq.n	8002df2 <I2C_Slave_STOPF+0x6a>
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b2a      	cmp	r3, #42	; 0x2a
 8002df0:	d135      	bne.n	8002e5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0204 	orr.w	r2, r3, #4
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fa8c 	bl	8001348 <HAL_DMA_GetState>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d049      	beq.n	8002eca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	4a69      	ldr	r2, [pc, #420]	; (8002fe0 <I2C_Slave_STOPF+0x258>)
 8002e3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fa5e 	bl	8001304 <HAL_DMA_Abort_IT>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d03d      	beq.n	8002eca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e5c:	e035      	b.n	8002eca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fa56 	bl	8001348 <HAL_DMA_GetState>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d014      	beq.n	8002ecc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	4a4e      	ldr	r2, [pc, #312]	; (8002fe0 <I2C_Slave_STOPF+0x258>)
 8002ea8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fa28 	bl	8001304 <HAL_DMA_Abort_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4798      	blx	r3
 8002ec8:	e000      	b.n	8002ecc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03e      	beq.n	8002f54 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d112      	bne.n	8002f0a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d112      	bne.n	8002f3e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8b3 	bl	80030c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f62:	e039      	b.n	8002fd8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b2a      	cmp	r3, #42	; 0x2a
 8002f68:	d109      	bne.n	8002f7e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2228      	movs	r2, #40	; 0x28
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff f827 	bl	8001fcc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b28      	cmp	r3, #40	; 0x28
 8002f88:	d111      	bne.n	8002fae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <I2C_Slave_STOPF+0x25c>)
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff f828 	bl	8001ffc <HAL_I2C_ListenCpltCallback>
}
 8002fac:	e014      	b.n	8002fd8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	2b22      	cmp	r3, #34	; 0x22
 8002fb4:	d002      	beq.n	8002fbc <I2C_Slave_STOPF+0x234>
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b22      	cmp	r3, #34	; 0x22
 8002fba:	d10d      	bne.n	8002fd8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fffa 	bl	8001fcc <HAL_I2C_SlaveRxCpltCallback>
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	0800332d 	.word	0x0800332d
 8002fe4:	ffff0000 	.word	0xffff0000

08002fe8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d002      	beq.n	800300a <I2C_Slave_AF+0x22>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b20      	cmp	r3, #32
 8003008:	d129      	bne.n	800305e <I2C_Slave_AF+0x76>
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b28      	cmp	r3, #40	; 0x28
 800300e:	d126      	bne.n	800305e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <I2C_Slave_AF+0xdc>)
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003024:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800302e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe ffd0 	bl	8001ffc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800305c:	e02e      	b.n	80030bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b21      	cmp	r3, #33	; 0x21
 8003062:	d126      	bne.n	80030b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <I2C_Slave_AF+0xdc>)
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2221      	movs	r2, #33	; 0x21
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800308e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003098:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe ff84 	bl	8001fb8 <HAL_I2C_SlaveTxCpltCallback>
}
 80030b0:	e004      	b.n	80030bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ba:	615a      	str	r2, [r3, #20]
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	ffff0000 	.word	0xffff0000

080030c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d002      	beq.n	80030ec <I2C_ITError+0x24>
 80030e6:	7bbb      	ldrb	r3, [r7, #14]
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d10a      	bne.n	8003102 <I2C_ITError+0x3a>
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b22      	cmp	r3, #34	; 0x22
 80030f0:	d107      	bne.n	8003102 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003100:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003108:	2b28      	cmp	r3, #40	; 0x28
 800310a:	d107      	bne.n	800311c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2228      	movs	r2, #40	; 0x28
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800311a:	e015      	b.n	8003148 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312a:	d00a      	beq.n	8003142 <I2C_ITError+0x7a>
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b60      	cmp	r3, #96	; 0x60
 8003130:	d007      	beq.n	8003142 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003156:	d162      	bne.n	800321e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d020      	beq.n	80031b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	4a6a      	ldr	r2, [pc, #424]	; (8003324 <I2C_ITError+0x25c>)
 800317c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f8be 	bl	8001304 <HAL_DMA_Abort_IT>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8089 	beq.w	80032a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031b2:	4610      	mov	r0, r2
 80031b4:	4798      	blx	r3
 80031b6:	e074      	b.n	80032a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	4a59      	ldr	r2, [pc, #356]	; (8003324 <I2C_ITError+0x25c>)
 80031be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe f89d 	bl	8001304 <HAL_DMA_Abort_IT>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d068      	beq.n	80032a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d10b      	bne.n	80031f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
 800321c:	e041      	b.n	80032a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b60      	cmp	r3, #96	; 0x60
 8003228:	d125      	bne.n	8003276 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d10b      	bne.n	800325e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe feec 	bl	800204c <HAL_I2C_AbortCpltCallback>
 8003274:	e015      	b.n	80032a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d10b      	bne.n	800329c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fe fecb 	bl	8002038 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10e      	bne.n	80032d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d113      	bne.n	800331c <I2C_ITError+0x254>
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b28      	cmp	r3, #40	; 0x28
 80032f8:	d110      	bne.n	800331c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <I2C_ITError+0x260>)
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe fe70 	bl	8001ffc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	0800332d 	.word	0x0800332d
 8003328:	ffff0000 	.word	0xffff0000

0800332c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003346:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <I2C_DMAAbort+0x148>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	08db      	lsrs	r3, r3, #3
 800334c:	4a4a      	ldr	r2, [pc, #296]	; (8003478 <I2C_DMAAbort+0x14c>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0a1a      	lsrs	r2, r3, #8
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00da      	lsls	r2, r3, #3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003372:	e00a      	b.n	800338a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3b01      	subs	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d0ea      	beq.n	8003360 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	2200      	movs	r2, #0
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	2200      	movs	r2, #0
 80033a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	2200      	movs	r2, #0
 80033ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	2200      	movs	r2, #0
 80033de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b60      	cmp	r3, #96	; 0x60
 80033fa:	d10e      	bne.n	800341a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7fe fe1a 	bl	800204c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003418:	e027      	b.n	800346a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003420:	2b28      	cmp	r3, #40	; 0x28
 8003422:	d117      	bne.n	8003454 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003442:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2228      	movs	r2, #40	; 0x28
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003452:	e007      	b.n	8003464 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003464:	6978      	ldr	r0, [r7, #20]
 8003466:	f7fe fde7 	bl	8002038 <HAL_I2C_ErrorCallback>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000000 	.word	0x20000000
 8003478:	14f8b589 	.word	0x14f8b589

0800347c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	4a13      	ldr	r2, [pc, #76]	; (80034dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0a1a      	lsrs	r2, r3, #8
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d107      	bne.n	80034ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e008      	b.n	80034cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c8:	d0e9      	beq.n	800349e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	20000000 	.word	0x20000000
 80034dc:	14f8b589 	.word	0x14f8b589

080034e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034f0:	d103      	bne.n	80034fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034f8:	e007      	b.n	800350a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003502:	d102      	bne.n	800350a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2208      	movs	r2, #8
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90c      	bls.n	8003554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e067      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4934      	ldr	r1, [pc, #208]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fd fd5c 	bl	80010c4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fd fd58 	bl	80010c4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f887 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fbca 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023c00 	.word	0x40023c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08008228 	.word	0x08008228
 80036dc:	20000000 	.word	0x20000000
 80036e0:	20000004 	.word	0x20000004

080036e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000000 	.word	0x20000000

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003700:	f7ff fff0 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0a9b      	lsrs	r3, r3, #10
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	08008238 	.word	0x08008238

08003724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003728:	f7ff ffdc 	bl	80036e4 <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0b5b      	lsrs	r3, r3, #13
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	08008238 	.word	0x08008238

0800374c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	220f      	movs	r2, #15
 800375a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_GetClockConfig+0x5c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0203 	and.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_RCC_GetClockConfig+0x5c>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	08db      	lsrs	r3, r3, #3
 8003786:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <HAL_RCC_GetClockConfig+0x60>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 020f 	and.w	r2, r3, #15
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	601a      	str	r2, [r3, #0]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40023c00 	.word	0x40023c00

080037b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b4:	b0ae      	sub	sp, #184	; 0xb8
 80037b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d6:	4bcb      	ldr	r3, [pc, #812]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	f200 8206 	bhi.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x440>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	08003821 	.word	0x08003821
 80037f0:	08003bf1 	.word	0x08003bf1
 80037f4:	08003bf1 	.word	0x08003bf1
 80037f8:	08003bf1 	.word	0x08003bf1
 80037fc:	08003829 	.word	0x08003829
 8003800:	08003bf1 	.word	0x08003bf1
 8003804:	08003bf1 	.word	0x08003bf1
 8003808:	08003bf1 	.word	0x08003bf1
 800380c:	08003831 	.word	0x08003831
 8003810:	08003bf1 	.word	0x08003bf1
 8003814:	08003bf1 	.word	0x08003bf1
 8003818:	08003bf1 	.word	0x08003bf1
 800381c:	08003a21 	.word	0x08003a21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4bb9      	ldr	r3, [pc, #740]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x358>)
 8003822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003826:	e1e7      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003828:	4bb8      	ldr	r3, [pc, #736]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x35c>)
 800382a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800382e:	e1e3      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003830:	4bb4      	ldr	r3, [pc, #720]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383c:	4bb1      	ldr	r3, [pc, #708]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d071      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003848:	4bae      	ldr	r3, [pc, #696]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	2200      	movs	r2, #0
 8003850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003854:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800385c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003860:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003864:	2300      	movs	r3, #0
 8003866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800386a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4621      	mov	r1, r4
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	6439      	str	r1, [r7, #64]	; 0x40
 800388c:	4629      	mov	r1, r5
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	647b      	str	r3, [r7, #68]	; 0x44
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80038a0:	4649      	mov	r1, r9
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	4641      	mov	r1, r8
 80038a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038aa:	4641      	mov	r1, r8
 80038ac:	018a      	lsls	r2, r1, #6
 80038ae:	4641      	mov	r1, r8
 80038b0:	1a51      	subs	r1, r2, r1
 80038b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80038b4:	4649      	mov	r1, r9
 80038b6:	eb63 0301 	sbc.w	r3, r3, r1
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80038c8:	4649      	mov	r1, r9
 80038ca:	00cb      	lsls	r3, r1, #3
 80038cc:	4641      	mov	r1, r8
 80038ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d2:	4641      	mov	r1, r8
 80038d4:	00ca      	lsls	r2, r1, #3
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	4622      	mov	r2, r4
 80038de:	189b      	adds	r3, r3, r2
 80038e0:	633b      	str	r3, [r7, #48]	; 0x30
 80038e2:	462b      	mov	r3, r5
 80038e4:	460a      	mov	r2, r1
 80038e6:	eb42 0303 	adc.w	r3, r2, r3
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038f8:	4629      	mov	r1, r5
 80038fa:	024b      	lsls	r3, r1, #9
 80038fc:	4621      	mov	r1, r4
 80038fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003902:	4621      	mov	r1, r4
 8003904:	024a      	lsls	r2, r1, #9
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003918:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800391c:	f7fc fc78 	bl	8000210 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800392a:	e067      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392c:	4b75      	ldr	r3, [pc, #468]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003938:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800393c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	67bb      	str	r3, [r7, #120]	; 0x78
 8003946:	2300      	movs	r3, #0
 8003948:	67fb      	str	r3, [r7, #124]	; 0x7c
 800394a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800394e:	4622      	mov	r2, r4
 8003950:	462b      	mov	r3, r5
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	0159      	lsls	r1, r3, #5
 800395c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003960:	0150      	lsls	r0, r2, #5
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4621      	mov	r1, r4
 8003968:	1a51      	subs	r1, r2, r1
 800396a:	62b9      	str	r1, [r7, #40]	; 0x28
 800396c:	4629      	mov	r1, r5
 800396e:	eb63 0301 	sbc.w	r3, r3, r1
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003980:	4649      	mov	r1, r9
 8003982:	018b      	lsls	r3, r1, #6
 8003984:	4641      	mov	r1, r8
 8003986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800398a:	4641      	mov	r1, r8
 800398c:	018a      	lsls	r2, r1, #6
 800398e:	4641      	mov	r1, r8
 8003990:	ebb2 0a01 	subs.w	sl, r2, r1
 8003994:	4649      	mov	r1, r9
 8003996:	eb63 0b01 	sbc.w	fp, r3, r1
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ae:	4692      	mov	sl, r2
 80039b0:	469b      	mov	fp, r3
 80039b2:	4623      	mov	r3, r4
 80039b4:	eb1a 0303 	adds.w	r3, sl, r3
 80039b8:	623b      	str	r3, [r7, #32]
 80039ba:	462b      	mov	r3, r5
 80039bc:	eb4b 0303 	adc.w	r3, fp, r3
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039ce:	4629      	mov	r1, r5
 80039d0:	028b      	lsls	r3, r1, #10
 80039d2:	4621      	mov	r1, r4
 80039d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039d8:	4621      	mov	r1, r4
 80039da:	028a      	lsls	r2, r1, #10
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039e4:	2200      	movs	r2, #0
 80039e6:	673b      	str	r3, [r7, #112]	; 0x70
 80039e8:	677a      	str	r2, [r7, #116]	; 0x74
 80039ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80039ee:	f7fc fc0f 	bl	8000210 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4613      	mov	r3, r2
 80039f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039fc:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	3301      	adds	r3, #1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a1e:	e0eb      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d06b      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a38:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	2200      	movs	r2, #0
 8003a40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	f04f 0000 	mov.w	r0, #0
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	0159      	lsls	r1, r3, #5
 8003a62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a66:	0150      	lsls	r0, r2, #5
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	1a51      	subs	r1, r2, r1
 8003a70:	61b9      	str	r1, [r7, #24]
 8003a72:	4629      	mov	r1, r5
 8003a74:	eb63 0301 	sbc.w	r3, r3, r1
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a86:	4659      	mov	r1, fp
 8003a88:	018b      	lsls	r3, r1, #6
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a90:	4651      	mov	r1, sl
 8003a92:	018a      	lsls	r2, r1, #6
 8003a94:	4651      	mov	r1, sl
 8003a96:	ebb2 0801 	subs.w	r8, r2, r1
 8003a9a:	4659      	mov	r1, fp
 8003a9c:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab4:	4690      	mov	r8, r2
 8003ab6:	4699      	mov	r9, r3
 8003ab8:	4623      	mov	r3, r4
 8003aba:	eb18 0303 	adds.w	r3, r8, r3
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	eb49 0303 	adc.w	r3, r9, r3
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	024b      	lsls	r3, r1, #9
 8003ad8:	4621      	mov	r1, r4
 8003ada:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ade:	4621      	mov	r1, r4
 8003ae0:	024a      	lsls	r2, r1, #9
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aea:	2200      	movs	r2, #0
 8003aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003af0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003af4:	f7fc fb8c 	bl	8000210 <__aeabi_uldivmod>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4613      	mov	r3, r2
 8003afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b02:	e065      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x420>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b10:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	2200      	movs	r2, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b20:	653b      	str	r3, [r7, #80]	; 0x50
 8003b22:	2300      	movs	r3, #0
 8003b24:	657b      	str	r3, [r7, #84]	; 0x54
 8003b26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	f04f 0000 	mov.w	r0, #0
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	0159      	lsls	r1, r3, #5
 8003b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3c:	0150      	lsls	r0, r2, #5
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4641      	mov	r1, r8
 8003b44:	1a51      	subs	r1, r2, r1
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	4649      	mov	r1, r9
 8003b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	018b      	lsls	r3, r1, #6
 8003b60:	4651      	mov	r1, sl
 8003b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b66:	4651      	mov	r1, sl
 8003b68:	018a      	lsls	r2, r1, #6
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	1a54      	subs	r4, r2, r1
 8003b6e:	4659      	mov	r1, fp
 8003b70:	eb63 0501 	sbc.w	r5, r3, r1
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	00eb      	lsls	r3, r5, #3
 8003b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b82:	00e2      	lsls	r2, r4, #3
 8003b84:	4614      	mov	r4, r2
 8003b86:	461d      	mov	r5, r3
 8003b88:	4643      	mov	r3, r8
 8003b8a:	18e3      	adds	r3, r4, r3
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	464b      	mov	r3, r9
 8003b90:	eb45 0303 	adc.w	r3, r5, r3
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	028b      	lsls	r3, r1, #10
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bac:	4621      	mov	r1, r4
 8003bae:	028a      	lsls	r2, r1, #10
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bb8:	2200      	movs	r2, #0
 8003bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bc2:	f7fc fb25 	bl	8000210 <__aeabi_uldivmod>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4613      	mov	r3, r2
 8003bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	0f1b      	lsrs	r3, r3, #28
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bee:	e003      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	37b8      	adds	r7, #184	; 0xb8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	00f42400 	.word	0x00f42400

08003c10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e28d      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8083 	beq.w	8003d36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c30:	4b94      	ldr	r3, [pc, #592]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d019      	beq.n	8003c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c3c:	4b91      	ldr	r3, [pc, #580]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c48:	4b8e      	ldr	r3, [pc, #568]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c54:	d00c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c56:	4b8b      	ldr	r3, [pc, #556]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d112      	bne.n	8003c88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4b88      	ldr	r3, [pc, #544]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6e:	d10b      	bne.n	8003c88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c70:	4b84      	ldr	r3, [pc, #528]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05b      	beq.n	8003d34 <HAL_RCC_OscConfig+0x124>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d157      	bne.n	8003d34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e25a      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x90>
 8003c92:	4b7c      	ldr	r3, [pc, #496]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7b      	ldr	r2, [pc, #492]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e01d      	b.n	8003cdc <HAL_RCC_OscConfig+0xcc>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xb4>
 8003caa:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a75      	ldr	r2, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a72      	ldr	r2, [pc, #456]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0xcc>
 8003cc4:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6e      	ldr	r2, [pc, #440]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd f9ee 	bl	80010c4 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fd f9ea 	bl	80010c4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e21f      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b61      	ldr	r3, [pc, #388]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0xdc>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f9da 	bl	80010c4 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd f9d6 	bl	80010c4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e20b      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x104>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d06f      	beq.n	8003e22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d42:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d017      	beq.n	8003d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d4e:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d105      	bne.n	8003d66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d11c      	bne.n	8003dac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d116      	bne.n	8003dac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x186>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1d3      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4937      	ldr	r1, [pc, #220]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	e03a      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <HAL_RCC_OscConfig+0x278>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fd f983 	bl	80010c4 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fd f97f 	bl	80010c4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e1b4      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4925      	ldr	r1, [pc, #148]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_OscConfig+0x278>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd f962 	bl	80010c4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fd f95e 	bl	80010c4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e193      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d036      	beq.n	8003e9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fd f942 	bl	80010c4 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fd f93e 	bl	80010c4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e173      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x274>)
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x234>
 8003e62:	e01b      	b.n	8003e9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCC_OscConfig+0x27c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fd f92b 	bl	80010c4 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e70:	e00e      	b.n	8003e90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e72:	f7fd f927 	bl	80010c4 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d907      	bls.n	8003e90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e15c      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
 8003e84:	40023800 	.word	0x40023800
 8003e88:	42470000 	.word	0x42470000
 8003e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	4b8a      	ldr	r3, [pc, #552]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ea      	bne.n	8003e72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8097 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eae:	4b83      	ldr	r3, [pc, #524]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10f      	bne.n	8003eda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	4b7f      	ldr	r3, [pc, #508]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a7e      	ldr	r2, [pc, #504]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b7c      	ldr	r3, [pc, #496]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	4b79      	ldr	r3, [pc, #484]	; (80040c0 <HAL_RCC_OscConfig+0x4b0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d118      	bne.n	8003f18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee6:	4b76      	ldr	r3, [pc, #472]	; (80040c0 <HAL_RCC_OscConfig+0x4b0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a75      	ldr	r2, [pc, #468]	; (80040c0 <HAL_RCC_OscConfig+0x4b0>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef2:	f7fd f8e7 	bl	80010c4 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efa:	f7fd f8e3 	bl	80010c4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e118      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	4b6c      	ldr	r3, [pc, #432]	; (80040c0 <HAL_RCC_OscConfig+0x4b0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCC_OscConfig+0x31e>
 8003f20:	4b66      	ldr	r3, [pc, #408]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a65      	ldr	r2, [pc, #404]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2c:	e01c      	b.n	8003f68 <HAL_RCC_OscConfig+0x358>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x340>
 8003f36:	4b61      	ldr	r3, [pc, #388]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a60      	ldr	r2, [pc, #384]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	4b5e      	ldr	r3, [pc, #376]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a5d      	ldr	r2, [pc, #372]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0x358>
 8003f50:	4b5a      	ldr	r3, [pc, #360]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a59      	ldr	r2, [pc, #356]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5c:	4b57      	ldr	r3, [pc, #348]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a56      	ldr	r2, [pc, #344]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f62:	f023 0304 	bic.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d015      	beq.n	8003f9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fd f8a8 	bl	80010c4 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f78:	f7fd f8a4 	bl	80010c4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0d7      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8e:	4b4b      	ldr	r3, [pc, #300]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0ee      	beq.n	8003f78 <HAL_RCC_OscConfig+0x368>
 8003f9a:	e014      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fd f892 	bl	80010c4 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fd f88e 	bl	80010c4 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e0c1      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1ee      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4a3a      	ldr	r2, [pc, #232]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80ad 	beq.w	800413c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe2:	4b36      	ldr	r3, [pc, #216]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d060      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d145      	bne.n	8004082 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <HAL_RCC_OscConfig+0x4b4>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd f862 	bl	80010c4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd f85e 	bl	80010c4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e093      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	3b01      	subs	r3, #1
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	491b      	ldr	r1, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x4b4>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd f833 	bl	80010c4 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004062:	f7fd f82f 	bl	80010c4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e064      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x452>
 8004080:	e05c      	b.n	800413c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <HAL_RCC_OscConfig+0x4b4>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd f81c 	bl	80010c4 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7fd f818 	bl	80010c4 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e04d      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_OscConfig+0x4ac>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x480>
 80040ae:	e045      	b.n	800413c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e040      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000
 80040c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c8:	4b1f      	ldr	r3, [pc, #124]	; (8004148 <HAL_RCC_OscConfig+0x538>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d030      	beq.n	8004138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d129      	bne.n	8004138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d122      	bne.n	8004138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004100:	4293      	cmp	r3, r2
 8004102:	d119      	bne.n	8004138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	3b01      	subs	r3, #1
 8004112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d10f      	bne.n	8004138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d107      	bne.n	8004138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800

0800414c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07b      	b.n	8004256 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	d108      	bne.n	8004178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416e:	d009      	beq.n	8004184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
 8004176:	e005      	b.n	8004184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fc fd52 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	ea42 0103 	orr.w	r1, r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0104 	and.w	r1, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f003 0210 	and.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e01a      	b.n	80042a6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004286:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fc fd2d 	bl	8000ce8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_SPI_Transmit_IT+0x20>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e06f      	b.n	80043b0 <HAL_SPI_Transmit_IT+0x100>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_SPI_Transmit_IT+0x34>
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042e8:	e05d      	b.n	80043a6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d002      	beq.n	80042fc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042fa:	e054      	b.n	80043a6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2203      	movs	r2, #3
 8004300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	88fa      	ldrh	r2, [r7, #6]
 800431a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <HAL_SPI_Transmit_IT+0x10c>)
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
 8004342:	e002      	b.n	800434a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <HAL_SPI_Transmit_IT+0x110>)
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d10f      	bne.n	8004374 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004372:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004382:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d008      	beq.n	80043a4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e000      	b.n	80043a6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80043a4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	08004ad1 	.word	0x08004ad1
 80043c0:	08004a8b 	.word	0x08004a8b

080043c4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d110      	bne.n	8004400 <HAL_SPI_Receive_IT+0x3c>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e6:	d10b      	bne.n	8004400 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2204      	movs	r2, #4
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f882 	bl	8004500 <HAL_SPI_TransmitReceive_IT>
 80043fc:	4603      	mov	r3, r0
 80043fe:	e076      	b.n	80044ee <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_SPI_Receive_IT+0x4a>
 800440a:	2302      	movs	r3, #2
 800440c:	e06f      	b.n	80044ee <HAL_SPI_Receive_IT+0x12a>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d002      	beq.n	8004428 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004422:	2302      	movs	r3, #2
 8004424:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004426:	e05d      	b.n	80044e4 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Receive_IT+0x70>
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004438:	e054      	b.n	80044e4 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2204      	movs	r2, #4
 800443e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	88fa      	ldrh	r2, [r7, #6]
 8004452:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <HAL_SPI_Receive_IT+0x134>)
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
 8004480:	e002      	b.n	8004488 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_SPI_Receive_IT+0x138>)
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	d10f      	bne.n	80044b2 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80044c0:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d008      	beq.n	80044e2 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e000      	b.n	80044e4 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80044e2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08004a45 	.word	0x08004a45
 80044fc:	080049fb 	.word	0x080049fb

08004500 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_SPI_TransmitReceive_IT+0x20>
 800451c:	2302      	movs	r3, #2
 800451e:	e075      	b.n	800460c <HAL_SPI_TransmitReceive_IT+0x10c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004536:	7dbb      	ldrb	r3, [r7, #22]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d00d      	beq.n	8004558 <HAL_SPI_TransmitReceive_IT+0x58>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004542:	d106      	bne.n	8004552 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <HAL_SPI_TransmitReceive_IT+0x52>
 800454c:	7dbb      	ldrb	r3, [r7, #22]
 800454e:	2b04      	cmp	r3, #4
 8004550:	d002      	beq.n	8004558 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004552:	2302      	movs	r3, #2
 8004554:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004556:	e054      	b.n	8004602 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_SPI_TransmitReceive_IT+0x6a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_SPI_TransmitReceive_IT+0x6a>
 8004564:	887b      	ldrh	r3, [r7, #2]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800456e:	e048      	b.n	8004602 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b04      	cmp	r3, #4
 800457a:	d003      	beq.n	8004584 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2205      	movs	r2, #5
 8004580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	887a      	ldrh	r2, [r7, #2]
 800459a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	887a      	ldrh	r2, [r7, #2]
 80045a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a17      	ldr	r2, [pc, #92]	; (8004618 <HAL_SPI_TransmitReceive_IT+0x118>)
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <HAL_SPI_TransmitReceive_IT+0x11c>)
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
 80045c2:	e005      	b.n	80045d0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a16      	ldr	r2, [pc, #88]	; (8004620 <HAL_SPI_TransmitReceive_IT+0x120>)
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a15      	ldr	r2, [pc, #84]	; (8004624 <HAL_SPI_TransmitReceive_IT+0x124>)
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80045de:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d008      	beq.n	8004600 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e000      	b.n	8004602 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8004600:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	0800493d 	.word	0x0800493d
 800461c:	0800499d 	.word	0x0800499d
 8004620:	08004879 	.word	0x08004879
 8004624:	080048dd 	.word	0x080048dd

08004628 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
    return;
 800466a:	e0d7      	b.n	800481c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_SPI_IRQHandler+0x66>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	09db      	lsrs	r3, r3, #7
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
    return;
 800468c:	e0c6      	b.n	800481c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10c      	bne.n	80046b4 <HAL_SPI_IRQHandler+0x8c>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80b4 	beq.w	800481c <HAL_SPI_IRQHandler+0x1f4>
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80ad 	beq.w	800481c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d023      	beq.n	8004716 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d011      	beq.n	80046fe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	e00b      	b.n	8004716 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	693b      	ldr	r3, [r7, #16]
        return;
 8004714:	e082      	b.n	800481c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d014      	beq.n	800474c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0208 	orr.w	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	2b00      	cmp	r3, #0
 8004778:	d04f      	beq.n	800481a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004788:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_SPI_IRQHandler+0x17e>
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d034      	beq.n	8004810 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0203 	bic.w	r2, r2, #3
 80047b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d011      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c2:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_SPI_IRQHandler+0x1fc>)
 80047c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc fd9a 	bl	8001304 <HAL_DMA_Abort_IT>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ee:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <HAL_SPI_IRQHandler+0x1fc>)
 80047f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fc fd84 	bl	8001304 <HAL_DMA_Abort_IT>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800480e:	e003      	b.n	8004818 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f813 	bl	800483c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004816:	e000      	b.n	800481a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004818:	bf00      	nop
    return;
 800481a:	bf00      	nop
  }
}
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	08004851 	.word	0x08004851

08004828 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7ff ffe6 	bl	800483c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f103 020c 	add.w	r2, r3, #12
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa50 	bl	8004d74 <SPI_CloseRxTx_ISR>
    }
  }
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	7812      	ldrb	r2, [r2, #0]
 80048f0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004922:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa20 	bl	8004d74 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	b292      	uxth	r2, r2
 8004950:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	1c9a      	adds	r2, r3, #2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10f      	bne.n	8004994 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004982:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9f0 	bl	8004d74 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	1c9a      	adds	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10f      	bne.n	80049f2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049e0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f9c1 	bl	8004d74 <SPI_CloseRxTx_ISR>
    }
  }
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f103 020c 	add.w	r2, r3, #12
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	7812      	ldrb	r2, [r2, #0]
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa10 	bl	8004e5c <SPI_CloseRx_ISR>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	b292      	uxth	r2, r2
 8004a58:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	1c9a      	adds	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f9ed 	bl	8004e5c <SPI_CloseRx_ISR>
  }
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa0a 	bl	8004edc <SPI_CloseTx_ISR>
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	1c9a      	adds	r2, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9e8 	bl	8004edc <SPI_CloseTx_ISR>
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b24:	f7fc face 	bl	80010c4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b34:	f7fc fac6 	bl	80010c4 <HAL_GetTick>
 8004b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	0d1b      	lsrs	r3, r3, #20
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4a:	e054      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d050      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b54:	f7fc fab6 	bl	80010c4 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d902      	bls.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d13d      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b82:	d111      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d004      	beq.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d107      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d10f      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e017      	b.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d19b      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000000 	.word	0x20000000

08004c24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c38:	d111      	bne.n	8004c5e <SPI_EndRxTransaction+0x3a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c42:	d004      	beq.n	8004c4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d107      	bne.n	8004c5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c66:	d12a      	bne.n	8004cbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d012      	beq.n	8004c98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff ff49 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02d      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e026      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff ff36 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01a      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e013      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff ff23 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e000      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <SPI_EndRxTxTransaction+0x7c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <SPI_EndRxTxTransaction+0x80>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	0d5b      	lsrs	r3, r3, #21
 8004d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1a:	d112      	bne.n	8004d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff fef4 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d016      	beq.n	8004d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d0f2      	beq.n	8004d42 <SPI_EndRxTxTransaction+0x52>
 8004d5c:	e000      	b.n	8004d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d5e:	bf00      	nop
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	165e9f81 	.word	0x165e9f81

08004d74 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004d7c:	4b35      	ldr	r3, [pc, #212]	; (8004e54 <SPI_CloseRxTx_ISR+0xe0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a35      	ldr	r2, [pc, #212]	; (8004e58 <SPI_CloseRxTx_ISR+0xe4>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	0a5b      	lsrs	r3, r3, #9
 8004d88:	2264      	movs	r2, #100	; 0x64
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d90:	f7fc f998 	bl	80010c4 <HAL_GetTick>
 8004d94:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0220 	bic.w	r2, r2, #32
 8004da4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004db8:	e009      	b.n	8004dce <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0eb      	beq.n	8004da6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	2164      	movs	r1, #100	; 0x64
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ff8c 	bl	8004cf0 <SPI_EndRxTxTransaction>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d115      	bne.n	8004e3c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d107      	bne.n	8004e2c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fb fe27 	bl	8000a78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004e2a:	e00e      	b.n	8004e4a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fcf7 	bl	8004828 <HAL_SPI_TxRxCpltCallback>
}
 8004e3a:	e006      	b.n	8004e4a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fcf9 	bl	800483c <HAL_SPI_ErrorCallback>
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000000 	.word	0x20000000
 8004e58:	057619f1 	.word	0x057619f1

08004e5c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e72:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004e74:	f7fc f926 	bl	80010c4 <HAL_GetTick>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2164      	movs	r1, #100	; 0x64
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fed0 	bl	8004c24 <SPI_EndRxTransaction>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fb fdd7 	bl	8000a78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004eca:	e002      	b.n	8004ed2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fcb5 	bl	800483c <HAL_SPI_ErrorCallback>
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004ee4:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <SPI_CloseTx_ISR+0xbc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <SPI_CloseTx_ISR+0xc0>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0a5b      	lsrs	r3, r3, #9
 8004ef0:	2264      	movs	r2, #100	; 0x64
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ef8:	f7fc f8e4 	bl	80010c4 <HAL_GetTick>
 8004efc:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f08:	f043 0220 	orr.w	r2, r3, #32
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f10:	e009      	b.n	8004f26 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0eb      	beq.n	8004efe <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f34:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	2164      	movs	r1, #100	; 0x64
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fed8 	bl	8004cf0 <SPI_EndRxTxTransaction>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fc5b 	bl	800483c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004f86:	e002      	b.n	8004f8e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fb fd65 	bl	8000a58 <HAL_SPI_TxCpltCallback>
}
 8004f8e:	bf00      	nop
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	057619f1 	.word	0x057619f1

08004fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e041      	b.n	8005036 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f839 	bl	800503e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f000 fbec 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d001      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e04e      	b.n	800510a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a23      	ldr	r2, [pc, #140]	; (8005118 <HAL_TIM_Base_Start_IT+0xc4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d022      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d01d      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_TIM_Base_Start_IT+0xc8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d018      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_TIM_Base_Start_IT+0xcc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <HAL_TIM_Base_Start_IT+0xd0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00e      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x80>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_TIM_Base_Start_IT+0xd4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d009      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x80>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a19      	ldr	r2, [pc, #100]	; (800512c <HAL_TIM_Base_Start_IT+0xd8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x80>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_TIM_Base_Start_IT+0xdc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d111      	bne.n	80050f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b06      	cmp	r3, #6
 80050e4:	d010      	beq.n	8005108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	e007      	b.n	8005108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40010400 	.word	0x40010400
 800512c:	40014000 	.word	0x40014000
 8005130:	40001800 	.word	0x40001800

08005134 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e041      	b.n	80051ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb fde4 	bl	8000d28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f000 fb22 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_IC_Start_IT+0x1e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e013      	b.n	800521a <HAL_TIM_IC_Start_IT+0x46>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_IC_Start_IT+0x2e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	e00b      	b.n	800521a <HAL_TIM_IC_Start_IT+0x46>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d104      	bne.n	8005212 <HAL_TIM_IC_Start_IT+0x3e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e003      	b.n	800521a <HAL_TIM_IC_Start_IT+0x46>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005218:	b2db      	uxtb	r3, r3
 800521a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <HAL_TIM_IC_Start_IT+0x58>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005228:	b2db      	uxtb	r3, r3
 800522a:	e013      	b.n	8005254 <HAL_TIM_IC_Start_IT+0x80>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d104      	bne.n	800523c <HAL_TIM_IC_Start_IT+0x68>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e00b      	b.n	8005254 <HAL_TIM_IC_Start_IT+0x80>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b08      	cmp	r3, #8
 8005240:	d104      	bne.n	800524c <HAL_TIM_IC_Start_IT+0x78>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e003      	b.n	8005254 <HAL_TIM_IC_Start_IT+0x80>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005252:	b2db      	uxtb	r3, r3
 8005254:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d102      	bne.n	8005262 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800525c:	7b7b      	ldrb	r3, [r7, #13]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0cc      	b.n	8005400 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_IC_Start_IT+0xa2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	e013      	b.n	800529e <HAL_TIM_IC_Start_IT+0xca>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_IC_Start_IT+0xb2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	e00b      	b.n	800529e <HAL_TIM_IC_Start_IT+0xca>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_IC_Start_IT+0xc2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005294:	e003      	b.n	800529e <HAL_TIM_IC_Start_IT+0xca>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_IC_Start_IT+0xda>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ac:	e013      	b.n	80052d6 <HAL_TIM_IC_Start_IT+0x102>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d104      	bne.n	80052be <HAL_TIM_IC_Start_IT+0xea>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052bc:	e00b      	b.n	80052d6 <HAL_TIM_IC_Start_IT+0x102>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_IC_Start_IT+0xfa>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052cc:	e003      	b.n	80052d6 <HAL_TIM_IC_Start_IT+0x102>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	d841      	bhi.n	8005360 <HAL_TIM_IC_Start_IT+0x18c>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <HAL_TIM_IC_Start_IT+0x110>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005319 	.word	0x08005319
 80052e8:	08005361 	.word	0x08005361
 80052ec:	08005361 	.word	0x08005361
 80052f0:	08005361 	.word	0x08005361
 80052f4:	0800532b 	.word	0x0800532b
 80052f8:	08005361 	.word	0x08005361
 80052fc:	08005361 	.word	0x08005361
 8005300:	08005361 	.word	0x08005361
 8005304:	0800533d 	.word	0x0800533d
 8005308:	08005361 	.word	0x08005361
 800530c:	08005361 	.word	0x08005361
 8005310:	08005361 	.word	0x08005361
 8005314:	0800534f 	.word	0x0800534f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0202 	orr.w	r2, r2, #2
 8005326:	60da      	str	r2, [r3, #12]
      break;
 8005328:	e01d      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0204 	orr.w	r2, r2, #4
 8005338:	60da      	str	r2, [r3, #12]
      break;
 800533a:	e014      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0208 	orr.w	r2, r2, #8
 800534a:	60da      	str	r2, [r3, #12]
      break;
 800534c:	e00b      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0210 	orr.w	r2, r2, #16
 800535c:	60da      	str	r2, [r3, #12]
      break;
 800535e:	e002      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	bf00      	nop
  }

  if (status == HAL_OK)
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d148      	bne.n	80053fe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2201      	movs	r2, #1
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fbeb 	bl	8005b50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a22      	ldr	r2, [pc, #136]	; (8005408 <HAL_TIM_IC_Start_IT+0x234>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d022      	beq.n	80053ca <HAL_TIM_IC_Start_IT+0x1f6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d01d      	beq.n	80053ca <HAL_TIM_IC_Start_IT+0x1f6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_TIM_IC_Start_IT+0x238>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d018      	beq.n	80053ca <HAL_TIM_IC_Start_IT+0x1f6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <HAL_TIM_IC_Start_IT+0x23c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_TIM_IC_Start_IT+0x1f6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_TIM_IC_Start_IT+0x240>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIM_IC_Start_IT+0x1f6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_TIM_IC_Start_IT+0x244>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_TIM_IC_Start_IT+0x1f6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_TIM_IC_Start_IT+0x248>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIM_IC_Start_IT+0x1f6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <HAL_TIM_IC_Start_IT+0x24c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d111      	bne.n	80053ee <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b06      	cmp	r3, #6
 80053da:	d010      	beq.n	80053fe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	e007      	b.n	80053fe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40014000 	.word	0x40014000
 8005420:	40001800 	.word	0x40001800

08005424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f98a 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f97c 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f98d 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0204 	mvn.w	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f960 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f952 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f963 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f936 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f928 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f939 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2208      	movs	r2, #8
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f90c 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8fe 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f90f 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0201 	mvn.w	r2, #1
 80055a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb fab8 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fb6a 	bl	8005ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d10e      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8d4 	bl	80057a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b20      	cmp	r3, #32
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b20      	cmp	r3, #32
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0220 	mvn.w	r2, #32
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fb34 	bl	8005c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_TIM_IC_ConfigChannel+0x1e>
 800564e:	2302      	movs	r3, #2
 8005650:	e088      	b.n	8005764 <HAL_TIM_IC_ConfigChannel+0x130>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d11b      	bne.n	8005698 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f000 f944 	bl	80058fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 020c 	bic.w	r2, r2, #12
 8005682:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6999      	ldr	r1, [r3, #24]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	619a      	str	r2, [r3, #24]
 8005696:	e060      	b.n	800575a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b04      	cmp	r3, #4
 800569c:	d11c      	bne.n	80056d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f000 f999 	bl	80059e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6999      	ldr	r1, [r3, #24]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	021a      	lsls	r2, r3, #8
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	619a      	str	r2, [r3, #24]
 80056d6:	e040      	b.n	800575a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d11b      	bne.n	8005716 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6819      	ldr	r1, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f000 f9b6 	bl	8005a5e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 020c 	bic.w	r2, r2, #12
 8005700:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69d9      	ldr	r1, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	61da      	str	r2, [r3, #28]
 8005714:	e021      	b.n	800575a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d11c      	bne.n	8005756 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f000 f9d3 	bl	8005ad6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800573e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69d9      	ldr	r1, [r3, #28]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	021a      	lsls	r2, r3, #8
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	61da      	str	r2, [r3, #28]
 8005754:	e001      	b.n	800575a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a40      	ldr	r2, [pc, #256]	; (80058d0 <TIM_Base_SetConfig+0x114>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d00f      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a3d      	ldr	r2, [pc, #244]	; (80058d4 <TIM_Base_SetConfig+0x118>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00b      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a3c      	ldr	r2, [pc, #240]	; (80058d8 <TIM_Base_SetConfig+0x11c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3b      	ldr	r2, [pc, #236]	; (80058dc <TIM_Base_SetConfig+0x120>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3a      	ldr	r2, [pc, #232]	; (80058e0 <TIM_Base_SetConfig+0x124>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d108      	bne.n	800580e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2f      	ldr	r2, [pc, #188]	; (80058d0 <TIM_Base_SetConfig+0x114>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02b      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581c:	d027      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <TIM_Base_SetConfig+0x118>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d023      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <TIM_Base_SetConfig+0x11c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01f      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <TIM_Base_SetConfig+0x120>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01b      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <TIM_Base_SetConfig+0x124>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d017      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <TIM_Base_SetConfig+0x128>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <TIM_Base_SetConfig+0x12c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a26      	ldr	r2, [pc, #152]	; (80058ec <TIM_Base_SetConfig+0x130>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <TIM_Base_SetConfig+0x134>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a24      	ldr	r2, [pc, #144]	; (80058f4 <TIM_Base_SetConfig+0x138>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a23      	ldr	r2, [pc, #140]	; (80058f8 <TIM_Base_SetConfig+0x13c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d108      	bne.n	8005880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <TIM_Base_SetConfig+0x114>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0xf8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a0c      	ldr	r2, [pc, #48]	; (80058e0 <TIM_Base_SetConfig+0x124>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	615a      	str	r2, [r3, #20]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40000800 	.word	0x40000800
 80058dc:	40000c00 	.word	0x40000c00
 80058e0:	40010400 	.word	0x40010400
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800
 80058f0:	40001800 	.word	0x40001800
 80058f4:	40001c00 	.word	0x40001c00
 80058f8:	40002000 	.word	0x40002000

080058fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <TIM_TI1_SetConfig+0xcc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01b      	beq.n	8005962 <TIM_TI1_SetConfig+0x66>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d017      	beq.n	8005962 <TIM_TI1_SetConfig+0x66>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a25      	ldr	r2, [pc, #148]	; (80059cc <TIM_TI1_SetConfig+0xd0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_TI1_SetConfig+0x66>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a24      	ldr	r2, [pc, #144]	; (80059d0 <TIM_TI1_SetConfig+0xd4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_TI1_SetConfig+0x66>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4a23      	ldr	r2, [pc, #140]	; (80059d4 <TIM_TI1_SetConfig+0xd8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_TI1_SetConfig+0x66>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a22      	ldr	r2, [pc, #136]	; (80059d8 <TIM_TI1_SetConfig+0xdc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_TI1_SetConfig+0x66>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4a21      	ldr	r2, [pc, #132]	; (80059dc <TIM_TI1_SetConfig+0xe0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_TI1_SetConfig+0x66>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4a20      	ldr	r2, [pc, #128]	; (80059e0 <TIM_TI1_SetConfig+0xe4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d101      	bne.n	8005966 <TIM_TI1_SetConfig+0x6a>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <TIM_TI1_SetConfig+0x6c>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e003      	b.n	8005986 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	b2db      	uxtb	r3, r3
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f023 030a 	bic.w	r3, r3, #10
 80059a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f003 030a 	and.w	r3, r3, #10
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40010400 	.word	0x40010400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40001800 	.word	0x40001800

080059e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f023 0210 	bic.w	r2, r3, #16
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	031b      	lsls	r3, r3, #12
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b087      	sub	sp, #28
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b087      	sub	sp, #28
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	031b      	lsls	r3, r3, #12
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005b28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	031b      	lsls	r3, r3, #12
 8005b2e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2201      	movs	r2, #1
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	43db      	mvns	r3, r3
 8005b72:	401a      	ands	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a1a      	ldr	r2, [r3, #32]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	fa01 f303 	lsl.w	r3, r1, r3
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e05a      	b.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d01d      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d10c      	bne.n	8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40000c00 	.word	0x40000c00
 8005c88:	40010400 	.word	0x40010400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40001800 	.word	0x40001800

08005c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e03f      	b.n	8005d4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fb f870 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	; 0x24
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f829 	bl	8005d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d5c:	b0c0      	sub	sp, #256	; 0x100
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	68d9      	ldr	r1, [r3, #12]
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	ea40 0301 	orr.w	r3, r0, r1
 8005d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005db0:	f021 010c 	bic.w	r1, r1, #12
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd2:	6999      	ldr	r1, [r3, #24]
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	ea40 0301 	orr.w	r3, r0, r1
 8005dde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b8f      	ldr	r3, [pc, #572]	; (8006024 <UART_SetConfig+0x2cc>)
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d005      	beq.n	8005df8 <UART_SetConfig+0xa0>
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4b8d      	ldr	r3, [pc, #564]	; (8006028 <UART_SetConfig+0x2d0>)
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d104      	bne.n	8005e02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005df8:	f7fd fc94 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 8005dfc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e00:	e003      	b.n	8005e0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e02:	f7fd fc7b 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8005e06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e14:	f040 810c 	bne.w	8006030 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	462b      	mov	r3, r5
 8005e2e:	1891      	adds	r1, r2, r2
 8005e30:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e32:	415b      	adcs	r3, r3
 8005e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	eb12 0801 	adds.w	r8, r2, r1
 8005e40:	4629      	mov	r1, r5
 8005e42:	eb43 0901 	adc.w	r9, r3, r1
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e5a:	4690      	mov	r8, r2
 8005e5c:	4699      	mov	r9, r3
 8005e5e:	4623      	mov	r3, r4
 8005e60:	eb18 0303 	adds.w	r3, r8, r3
 8005e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e68:	462b      	mov	r3, r5
 8005e6a:	eb49 0303 	adc.w	r3, r9, r3
 8005e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e86:	460b      	mov	r3, r1
 8005e88:	18db      	adds	r3, r3, r3
 8005e8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	eb42 0303 	adc.w	r3, r2, r3
 8005e92:	657b      	str	r3, [r7, #84]	; 0x54
 8005e94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e9c:	f7fa f9b8 	bl	8000210 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4b61      	ldr	r3, [pc, #388]	; (800602c <UART_SetConfig+0x2d4>)
 8005ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	011c      	lsls	r4, r3, #4
 8005eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ebc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	1891      	adds	r1, r2, r2
 8005ec6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ecc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	eb43 0b01 	adc.w	fp, r3, r1
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ee8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef0:	4692      	mov	sl, r2
 8005ef2:	469b      	mov	fp, r3
 8005ef4:	4643      	mov	r3, r8
 8005ef6:	eb1a 0303 	adds.w	r3, sl, r3
 8005efa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005efe:	464b      	mov	r3, r9
 8005f00:	eb4b 0303 	adc.w	r3, fp, r3
 8005f04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	18db      	adds	r3, r3, r3
 8005f20:	643b      	str	r3, [r7, #64]	; 0x40
 8005f22:	4613      	mov	r3, r2
 8005f24:	eb42 0303 	adc.w	r3, r2, r3
 8005f28:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f32:	f7fa f96d 	bl	8000210 <__aeabi_uldivmod>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4b3b      	ldr	r3, [pc, #236]	; (800602c <UART_SetConfig+0x2d4>)
 8005f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2264      	movs	r2, #100	; 0x64
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	1acb      	subs	r3, r1, r3
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f52:	4b36      	ldr	r3, [pc, #216]	; (800602c <UART_SetConfig+0x2d4>)
 8005f54:	fba3 2302 	umull	r2, r3, r3, r2
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f60:	441c      	add	r4, r3
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	1891      	adds	r1, r2, r2
 8005f7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f7c:	415b      	adcs	r3, r3
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f84:	4641      	mov	r1, r8
 8005f86:	1851      	adds	r1, r2, r1
 8005f88:	6339      	str	r1, [r7, #48]	; 0x30
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	414b      	adcs	r3, r1
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	00cb      	lsls	r3, r1, #3
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	00ca      	lsls	r2, r1, #3
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	189b      	adds	r3, r3, r2
 8005fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb8:	464b      	mov	r3, r9
 8005fba:	460a      	mov	r2, r1
 8005fbc:	eb42 0303 	adc.w	r3, r2, r3
 8005fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fd8:	460b      	mov	r3, r1
 8005fda:	18db      	adds	r3, r3, r3
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fde:	4613      	mov	r3, r2
 8005fe0:	eb42 0303 	adc.w	r3, r2, r3
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fee:	f7fa f90f 	bl	8000210 <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <UART_SetConfig+0x2d4>)
 8005ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	2164      	movs	r1, #100	; 0x64
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	3332      	adds	r3, #50	; 0x32
 800600a:	4a08      	ldr	r2, [pc, #32]	; (800602c <UART_SetConfig+0x2d4>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	f003 0207 	and.w	r2, r3, #7
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4422      	add	r2, r4
 800601e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006020:	e105      	b.n	800622e <UART_SetConfig+0x4d6>
 8006022:	bf00      	nop
 8006024:	40011000 	.word	0x40011000
 8006028:	40011400 	.word	0x40011400
 800602c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006034:	2200      	movs	r2, #0
 8006036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800603a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800603e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006042:	4642      	mov	r2, r8
 8006044:	464b      	mov	r3, r9
 8006046:	1891      	adds	r1, r2, r2
 8006048:	6239      	str	r1, [r7, #32]
 800604a:	415b      	adcs	r3, r3
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
 800604e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006052:	4641      	mov	r1, r8
 8006054:	1854      	adds	r4, r2, r1
 8006056:	4649      	mov	r1, r9
 8006058:	eb43 0501 	adc.w	r5, r3, r1
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	00eb      	lsls	r3, r5, #3
 8006066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800606a:	00e2      	lsls	r2, r4, #3
 800606c:	4614      	mov	r4, r2
 800606e:	461d      	mov	r5, r3
 8006070:	4643      	mov	r3, r8
 8006072:	18e3      	adds	r3, r4, r3
 8006074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006078:	464b      	mov	r3, r9
 800607a:	eb45 0303 	adc.w	r3, r5, r3
 800607e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800608e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800609e:	4629      	mov	r1, r5
 80060a0:	008b      	lsls	r3, r1, #2
 80060a2:	4621      	mov	r1, r4
 80060a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060a8:	4621      	mov	r1, r4
 80060aa:	008a      	lsls	r2, r1, #2
 80060ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060b0:	f7fa f8ae 	bl	8000210 <__aeabi_uldivmod>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4b60      	ldr	r3, [pc, #384]	; (800623c <UART_SetConfig+0x4e4>)
 80060ba:	fba3 2302 	umull	r2, r3, r3, r2
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	011c      	lsls	r4, r3, #4
 80060c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	1891      	adds	r1, r2, r2
 80060da:	61b9      	str	r1, [r7, #24]
 80060dc:	415b      	adcs	r3, r3
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060e4:	4641      	mov	r1, r8
 80060e6:	1851      	adds	r1, r2, r1
 80060e8:	6139      	str	r1, [r7, #16]
 80060ea:	4649      	mov	r1, r9
 80060ec:	414b      	adcs	r3, r1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060fc:	4659      	mov	r1, fp
 80060fe:	00cb      	lsls	r3, r1, #3
 8006100:	4651      	mov	r1, sl
 8006102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006106:	4651      	mov	r1, sl
 8006108:	00ca      	lsls	r2, r1, #3
 800610a:	4610      	mov	r0, r2
 800610c:	4619      	mov	r1, r3
 800610e:	4603      	mov	r3, r0
 8006110:	4642      	mov	r2, r8
 8006112:	189b      	adds	r3, r3, r2
 8006114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006118:	464b      	mov	r3, r9
 800611a:	460a      	mov	r2, r1
 800611c:	eb42 0303 	adc.w	r3, r2, r3
 8006120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	67bb      	str	r3, [r7, #120]	; 0x78
 800612e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800613c:	4649      	mov	r1, r9
 800613e:	008b      	lsls	r3, r1, #2
 8006140:	4641      	mov	r1, r8
 8006142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006146:	4641      	mov	r1, r8
 8006148:	008a      	lsls	r2, r1, #2
 800614a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800614e:	f7fa f85f 	bl	8000210 <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4b39      	ldr	r3, [pc, #228]	; (800623c <UART_SetConfig+0x4e4>)
 8006158:	fba3 1302 	umull	r1, r3, r3, r2
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	2164      	movs	r1, #100	; 0x64
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	3332      	adds	r3, #50	; 0x32
 800616a:	4a34      	ldr	r2, [pc, #208]	; (800623c <UART_SetConfig+0x4e4>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006176:	441c      	add	r4, r3
 8006178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800617c:	2200      	movs	r2, #0
 800617e:	673b      	str	r3, [r7, #112]	; 0x70
 8006180:	677a      	str	r2, [r7, #116]	; 0x74
 8006182:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006186:	4642      	mov	r2, r8
 8006188:	464b      	mov	r3, r9
 800618a:	1891      	adds	r1, r2, r2
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	415b      	adcs	r3, r3
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006196:	4641      	mov	r1, r8
 8006198:	1851      	adds	r1, r2, r1
 800619a:	6039      	str	r1, [r7, #0]
 800619c:	4649      	mov	r1, r9
 800619e:	414b      	adcs	r3, r1
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061ae:	4659      	mov	r1, fp
 80061b0:	00cb      	lsls	r3, r1, #3
 80061b2:	4651      	mov	r1, sl
 80061b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061b8:	4651      	mov	r1, sl
 80061ba:	00ca      	lsls	r2, r1, #3
 80061bc:	4610      	mov	r0, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	4603      	mov	r3, r0
 80061c2:	4642      	mov	r2, r8
 80061c4:	189b      	adds	r3, r3, r2
 80061c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80061c8:	464b      	mov	r3, r9
 80061ca:	460a      	mov	r2, r1
 80061cc:	eb42 0303 	adc.w	r3, r2, r3
 80061d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	663b      	str	r3, [r7, #96]	; 0x60
 80061dc:	667a      	str	r2, [r7, #100]	; 0x64
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061ea:	4649      	mov	r1, r9
 80061ec:	008b      	lsls	r3, r1, #2
 80061ee:	4641      	mov	r1, r8
 80061f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061f4:	4641      	mov	r1, r8
 80061f6:	008a      	lsls	r2, r1, #2
 80061f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061fc:	f7fa f808 	bl	8000210 <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4b0d      	ldr	r3, [pc, #52]	; (800623c <UART_SetConfig+0x4e4>)
 8006206:	fba3 1302 	umull	r1, r3, r3, r2
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	2164      	movs	r1, #100	; 0x64
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	3332      	adds	r3, #50	; 0x32
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <UART_SetConfig+0x4e4>)
 800621a:	fba2 2303 	umull	r2, r3, r2, r3
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4422      	add	r2, r4
 800622c:	609a      	str	r2, [r3, #8]
}
 800622e:	bf00      	nop
 8006230:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006234:	46bd      	mov	sp, r7
 8006236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800623a:	bf00      	nop
 800623c:	51eb851f 	.word	0x51eb851f

08006240 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800624e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006252:	2b84      	cmp	r3, #132	; 0x84
 8006254:	d005      	beq.n	8006262 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006256:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	3303      	adds	r3, #3
 8006260:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006262:	68fb      	ldr	r3, [r7, #12]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006274:	f000 fe50 	bl	8006f18 <vTaskStartScheduler>
  
  return osOK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	bd80      	pop	{r7, pc}

0800627e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800627e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006280:	b089      	sub	sp, #36	; 0x24
 8006282:	af04      	add	r7, sp, #16
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d020      	beq.n	80062d2 <osThreadCreate+0x54>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01c      	beq.n	80062d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685c      	ldr	r4, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681d      	ldr	r5, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691e      	ldr	r6, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff ffc8 	bl	8006240 <makeFreeRtosPriority>
 80062b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062ba:	9202      	str	r2, [sp, #8]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	9100      	str	r1, [sp, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	4632      	mov	r2, r6
 80062c4:	4629      	mov	r1, r5
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 fc5e 	bl	8006b88 <xTaskCreateStatic>
 80062cc:	4603      	mov	r3, r0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e01c      	b.n	800630c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685c      	ldr	r4, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062de:	b29e      	uxth	r6, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff ffaa 	bl	8006240 <makeFreeRtosPriority>
 80062ec:	4602      	mov	r2, r0
 80062ee:	f107 030c 	add.w	r3, r7, #12
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	9200      	str	r2, [sp, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	4632      	mov	r2, r6
 80062fa:	4629      	mov	r1, r5
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 fca0 	bl	8006c42 <xTaskCreate>
 8006302:	4603      	mov	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d001      	beq.n	800630c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	e000      	b.n	800630e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800630c:	68fb      	ldr	r3, [r7, #12]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006316 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <osDelay+0x16>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	e000      	b.n	800632e <osDelay+0x18>
 800632c:	2301      	movs	r3, #1
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fdbe 	bl	8006eb0 <vTaskDelay>
  
  return osOK;
 8006334:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4619      	mov	r1, r3
 8006354:	2001      	movs	r0, #1
 8006356:	f000 fa2a 	bl	80067ae <xQueueCreateMutexStatic>
 800635a:	4603      	mov	r3, r0
 800635c:	e003      	b.n	8006366 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800635e:	2001      	movs	r0, #1
 8006360:	f000 fa0d 	bl	800677e <xQueueCreateMutex>
 8006364:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f103 0208 	add.w	r2, r3, #8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006386:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f103 0208 	add.w	r2, r3, #8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f103 0208 	add.w	r2, r3, #8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006426:	d103      	bne.n	8006430 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e00c      	b.n	800644a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3308      	adds	r3, #8
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e002      	b.n	800643e <vListInsert+0x2e>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d2f6      	bcs.n	8006438 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6892      	ldr	r2, [r2, #8]
 8006498:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6852      	ldr	r2, [r2, #4]
 80064a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d103      	bne.n	80064b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1e5a      	subs	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006502:	f001 fb3f 	bl	8007b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	441a      	add	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	3b01      	subs	r3, #1
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d114      	bne.n	8006582 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01a      	beq.n	8006596 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3310      	adds	r3, #16
 8006564:	4618      	mov	r0, r3
 8006566:	f000 ff19 	bl	800739c <xTaskRemoveFromEventList>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d012      	beq.n	8006596 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <xQueueGenericReset+0xcc>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	e009      	b.n	8006596 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3310      	adds	r3, #16
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fef1 	bl	800636e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3324      	adds	r3, #36	; 0x24
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff feec 	bl	800636e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006596:	f001 fb25 	bl	8007be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800659a:	2301      	movs	r3, #1
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08e      	sub	sp, #56	; 0x38
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <xQueueGenericCreateStatic+0x52>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <xQueueGenericCreateStatic+0x56>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <xQueueGenericCreateStatic+0x58>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	623b      	str	r3, [r7, #32]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <xQueueGenericCreateStatic+0x7e>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <xQueueGenericCreateStatic+0x82>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <xQueueGenericCreateStatic+0x84>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	61fb      	str	r3, [r7, #28]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006646:	2348      	movs	r3, #72	; 0x48
 8006648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b48      	cmp	r3, #72	; 0x48
 800664e:	d00a      	beq.n	8006666 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	61bb      	str	r3, [r7, #24]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006666:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00d      	beq.n	800668e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800667a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	4613      	mov	r3, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f83f 	bl	800670c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006690:	4618      	mov	r0, r3
 8006692:	3730      	adds	r7, #48	; 0x30
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	; 0x28
 800669c:	af02      	add	r7, sp, #8
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	613b      	str	r3, [r7, #16]
}
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	3348      	adds	r3, #72	; 0x48
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 fb39 	bl	8007d48 <pvPortMalloc>
 80066d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d011      	beq.n	8006702 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	3348      	adds	r3, #72	; 0x48
 80066e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066f0:	79fa      	ldrb	r2, [r7, #7]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f805 	bl	800670c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006702:	69bb      	ldr	r3, [r7, #24]
	}
 8006704:	4618      	mov	r0, r3
 8006706:	3720      	adds	r7, #32
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e002      	b.n	800672e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800673a:	2101      	movs	r1, #1
 800673c:	69b8      	ldr	r0, [r7, #24]
 800673e:	f7ff fecb 	bl	80064d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00e      	beq.n	8006776 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800676a:	2300      	movs	r3, #0
 800676c:	2200      	movs	r2, #0
 800676e:	2100      	movs	r1, #0
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f837 	bl	80067e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	4603      	mov	r3, r0
 8006786:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006788:	2301      	movs	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	461a      	mov	r2, r3
 8006794:	6939      	ldr	r1, [r7, #16]
 8006796:	6978      	ldr	r0, [r7, #20]
 8006798:	f7ff ff7e 	bl	8006698 <xQueueGenericCreate>
 800679c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff ffd3 	bl	800674a <prvInitialiseMutex>

		return xNewQueue;
 80067a4:	68fb      	ldr	r3, [r7, #12]
	}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b088      	sub	sp, #32
 80067b2:	af02      	add	r7, sp, #8
 80067b4:	4603      	mov	r3, r0
 80067b6:	6039      	str	r1, [r7, #0]
 80067b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067ba:	2301      	movs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	6939      	ldr	r1, [r7, #16]
 80067cc:	6978      	ldr	r0, [r7, #20]
 80067ce:	f7ff feeb 	bl	80065a8 <xQueueGenericCreateStatic>
 80067d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff ffb8 	bl	800674a <prvInitialiseMutex>

		return xNewQueue;
 80067da:	68fb      	ldr	r3, [r7, #12]
	}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	; 0x38
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067f2:	2300      	movs	r3, #0
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xQueueGenericSend+0x32>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <xQueueGenericSend+0x40>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <xQueueGenericSend+0x44>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <xQueueGenericSend+0x46>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xQueueGenericSend+0x60>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d103      	bne.n	8006852 <xQueueGenericSend+0x6e>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <xQueueGenericSend+0x72>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericSend+0x74>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xQueueGenericSend+0x8e>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	623b      	str	r3, [r7, #32]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006872:	f000 ff4f 	bl	8007714 <xTaskGetSchedulerState>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <xQueueGenericSend+0x9e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <xQueueGenericSend+0xa2>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <xQueueGenericSend+0xa4>
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	61fb      	str	r3, [r7, #28]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068a2:	f001 f96f 	bl	8007b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <xQueueGenericSend+0xd4>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d129      	bne.n	800690c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068be:	f000 f88f 	bl	80069e0 <prvCopyDataToQueue>
 80068c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d010      	beq.n	80068ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	3324      	adds	r3, #36	; 0x24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fd63 	bl	800739c <xTaskRemoveFromEventList>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d013      	beq.n	8006904 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068dc:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <xQueueGenericSend+0x1f8>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	e00a      	b.n	8006904 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068f4:	4b39      	ldr	r3, [pc, #228]	; (80069dc <xQueueGenericSend+0x1f8>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006904:	f001 f96e 	bl	8007be4 <vPortExitCritical>
				return pdPASS;
 8006908:	2301      	movs	r3, #1
 800690a:	e063      	b.n	80069d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006912:	f001 f967 	bl	8007be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006916:	2300      	movs	r3, #0
 8006918:	e05c      	b.n	80069d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fd9b 	bl	8007460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800692e:	f001 f959 	bl	8007be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006932:	f000 fb51 	bl	8006fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006936:	f001 f925 	bl	8007b84 <vPortEnterCritical>
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006940:	b25b      	sxtb	r3, r3
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006946:	d103      	bne.n	8006950 <xQueueGenericSend+0x16c>
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006956:	b25b      	sxtb	r3, r3
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800695c:	d103      	bne.n	8006966 <xQueueGenericSend+0x182>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006966:	f001 f93d 	bl	8007be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800696a:	1d3a      	adds	r2, r7, #4
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fd8a 	bl	800748c <xTaskCheckForTimeOut>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d124      	bne.n	80069c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800697e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006980:	f000 f8ea 	bl	8006b58 <prvIsQueueFull>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	3310      	adds	r3, #16
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fcde 	bl	8007354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800699a:	f000 f88b 	bl	8006ab4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800699e:	f000 fb29 	bl	8006ff4 <xTaskResumeAll>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f47f af7c 	bne.w	80068a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069aa:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <xQueueGenericSend+0x1f8>)
 80069ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	e772      	b.n	80068a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 f879 	bl	8006ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069c2:	f000 fb17 	bl	8006ff4 <xTaskResumeAll>
 80069c6:	e76c      	b.n	80068a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ca:	f000 f873 	bl	8006ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ce:	f000 fb11 	bl	8006ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3738      	adds	r7, #56	; 0x38
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d14d      	bne.n	8006aa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fea0 	bl	8007750 <xTaskPriorityDisinherit>
 8006a10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	e043      	b.n	8006aa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d119      	bne.n	8006a54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6858      	ldr	r0, [r3, #4]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	461a      	mov	r2, r3
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	f001 fb9a 	bl	8008164 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d32b      	bcc.n	8006aa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	e026      	b.n	8006aa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68d8      	ldr	r0, [r3, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	f001 fb80 	bl	8008164 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	425b      	negs	r3, r3
 8006a6e:	441a      	add	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d207      	bcs.n	8006a90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	425b      	negs	r3, r3
 8006a8a:	441a      	add	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d105      	bne.n	8006aa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006aaa:	697b      	ldr	r3, [r7, #20]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006abc:	f001 f862 	bl	8007b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ac8:	e011      	b.n	8006aee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d012      	beq.n	8006af8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3324      	adds	r3, #36	; 0x24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fc60 	bl	800739c <xTaskRemoveFromEventList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ae2:	f000 fd35 	bl	8007550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dce9      	bgt.n	8006aca <prvUnlockQueue+0x16>
 8006af6:	e000      	b.n	8006afa <prvUnlockQueue+0x46>
					break;
 8006af8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	22ff      	movs	r2, #255	; 0xff
 8006afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b02:	f001 f86f 	bl	8007be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b06:	f001 f83d 	bl	8007b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b12:	e011      	b.n	8006b38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d012      	beq.n	8006b42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3310      	adds	r3, #16
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fc3b 	bl	800739c <xTaskRemoveFromEventList>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b2c:	f000 fd10 	bl	8007550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	dce9      	bgt.n	8006b14 <prvUnlockQueue+0x60>
 8006b40:	e000      	b.n	8006b44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	22ff      	movs	r2, #255	; 0xff
 8006b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b4c:	f001 f84a 	bl	8007be4 <vPortExitCritical>
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b60:	f001 f810 	bl	8007b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d102      	bne.n	8006b76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e001      	b.n	8006b7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b7a:	f001 f833 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08e      	sub	sp, #56	; 0x38
 8006b8c:	af04      	add	r7, sp, #16
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <xTaskCreateStatic+0x46>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	61fb      	str	r3, [r7, #28]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bce:	2354      	movs	r3, #84	; 0x54
 8006bd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b54      	cmp	r3, #84	; 0x54
 8006bd6:	d00a      	beq.n	8006bee <xTaskCreateStatic+0x66>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	61bb      	str	r3, [r7, #24]
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01e      	beq.n	8006c34 <xTaskCreateStatic+0xac>
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9303      	str	r3, [sp, #12]
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	9302      	str	r3, [sp, #8]
 8006c16:	f107 0314 	add.w	r3, r7, #20
 8006c1a:	9301      	str	r3, [sp, #4]
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 f850 	bl	8006ccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c2e:	f000 f8d5 	bl	8006ddc <prvAddNewTaskToReadyList>
 8006c32:	e001      	b.n	8006c38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c38:	697b      	ldr	r3, [r7, #20]
	}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3728      	adds	r7, #40	; 0x28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b08c      	sub	sp, #48	; 0x30
 8006c46:	af04      	add	r7, sp, #16
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	603b      	str	r3, [r7, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 f876 	bl	8007d48 <pvPortMalloc>
 8006c5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00e      	beq.n	8006c82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c64:	2054      	movs	r0, #84	; 0x54
 8006c66:	f001 f86f 	bl	8007d48 <pvPortMalloc>
 8006c6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
 8006c78:	e005      	b.n	8006c86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c7a:	6978      	ldr	r0, [r7, #20]
 8006c7c:	f001 f930 	bl	8007ee0 <vPortFree>
 8006c80:	e001      	b.n	8006c86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d017      	beq.n	8006cbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c94:	88fa      	ldrh	r2, [r7, #6]
 8006c96:	2300      	movs	r3, #0
 8006c98:	9303      	str	r3, [sp, #12]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	9302      	str	r3, [sp, #8]
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f80e 	bl	8006ccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cb0:	69f8      	ldr	r0, [r7, #28]
 8006cb2:	f000 f893 	bl	8006ddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	e002      	b.n	8006cc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
	}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f023 0307 	bic.w	r3, r3, #7
 8006cf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	617b      	str	r3, [r7, #20]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d01f      	beq.n	8006d5a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	e012      	b.n	8006d46 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	7819      	ldrb	r1, [r3, #0]
 8006d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3334      	adds	r3, #52	; 0x34
 8006d30:	460a      	mov	r2, r1
 8006d32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	3301      	adds	r3, #1
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	2b0f      	cmp	r3, #15
 8006d4a:	d9e9      	bls.n	8006d20 <prvInitialiseNewTask+0x54>
 8006d4c:	e000      	b.n	8006d50 <prvInitialiseNewTask+0x84>
			{
				break;
 8006d4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d58:	e003      	b.n	8006d62 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	d901      	bls.n	8006d6c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d68:	2306      	movs	r3, #6
 8006d6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	3304      	adds	r3, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff fb13 	bl	80063ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	3318      	adds	r3, #24
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fb0e 	bl	80063ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	f1c3 0207 	rsb	r2, r3, #7
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	2200      	movs	r2, #0
 8006dac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68f9      	ldr	r1, [r7, #12]
 8006dba:	69b8      	ldr	r0, [r7, #24]
 8006dbc:	f000 fdb4 	bl	8007928 <pxPortInitialiseStack>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dd2:	bf00      	nop
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006de4:	f000 fece 	bl	8007b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006de8:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <prvAddNewTaskToReadyList+0xb8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	4a29      	ldr	r2, [pc, #164]	; (8006e94 <prvAddNewTaskToReadyList+0xb8>)
 8006df0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006df2:	4b29      	ldr	r3, [pc, #164]	; (8006e98 <prvAddNewTaskToReadyList+0xbc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dfa:	4a27      	ldr	r2, [pc, #156]	; (8006e98 <prvAddNewTaskToReadyList+0xbc>)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e00:	4b24      	ldr	r3, [pc, #144]	; (8006e94 <prvAddNewTaskToReadyList+0xb8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d110      	bne.n	8006e2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e08:	f000 fbc6 	bl	8007598 <prvInitialiseTaskLists>
 8006e0c:	e00d      	b.n	8006e2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e0e:	4b23      	ldr	r3, [pc, #140]	; (8006e9c <prvAddNewTaskToReadyList+0xc0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e16:	4b20      	ldr	r3, [pc, #128]	; (8006e98 <prvAddNewTaskToReadyList+0xbc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d802      	bhi.n	8006e2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e24:	4a1c      	ldr	r2, [pc, #112]	; (8006e98 <prvAddNewTaskToReadyList+0xbc>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <prvAddNewTaskToReadyList+0xc4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <prvAddNewTaskToReadyList+0xc4>)
 8006e32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	2201      	movs	r2, #1
 8006e3a:	409a      	lsls	r2, r3
 8006e3c:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <prvAddNewTaskToReadyList+0xc8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <prvAddNewTaskToReadyList+0xc8>)
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <prvAddNewTaskToReadyList+0xcc>)
 8006e54:	441a      	add	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	f7ff fab3 	bl	80063c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e62:	f000 febf 	bl	8007be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <prvAddNewTaskToReadyList+0xc0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00e      	beq.n	8006e8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <prvAddNewTaskToReadyList+0xbc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d207      	bcs.n	8006e8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <prvAddNewTaskToReadyList+0xd0>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e8c:	bf00      	nop
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000524 	.word	0x20000524
 8006e98:	20000424 	.word	0x20000424
 8006e9c:	20000530 	.word	0x20000530
 8006ea0:	20000540 	.word	0x20000540
 8006ea4:	2000052c 	.word	0x2000052c
 8006ea8:	20000428 	.word	0x20000428
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d017      	beq.n	8006ef2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <vTaskDelay+0x60>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <vTaskDelay+0x30>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	60bb      	str	r3, [r7, #8]
}
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ee0:	f000 f87a 	bl	8006fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fcb8 	bl	800785c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eec:	f000 f882 	bl	8006ff4 <xTaskResumeAll>
 8006ef0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d107      	bne.n	8006f08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <vTaskDelay+0x64>)
 8006efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	2000054c 	.word	0x2000054c
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f26:	463a      	mov	r2, r7
 8006f28:	1d39      	adds	r1, r7, #4
 8006f2a:	f107 0308 	add.w	r3, r7, #8
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7f9 faf0 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	9202      	str	r2, [sp, #8]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	460a      	mov	r2, r1
 8006f46:	491e      	ldr	r1, [pc, #120]	; (8006fc0 <vTaskStartScheduler+0xa8>)
 8006f48:	481e      	ldr	r0, [pc, #120]	; (8006fc4 <vTaskStartScheduler+0xac>)
 8006f4a:	f7ff fe1d 	bl	8006b88 <xTaskCreateStatic>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <vTaskStartScheduler+0xb0>)
 8006f52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f54:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <vTaskStartScheduler+0xb0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e001      	b.n	8006f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d116      	bne.n	8006f9a <vTaskStartScheduler+0x82>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	613b      	str	r3, [r7, #16]
}
 8006f7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f80:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <vTaskStartScheduler+0xb4>)
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f88:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <vTaskStartScheduler+0xb8>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f8e:	4b11      	ldr	r3, [pc, #68]	; (8006fd4 <vTaskStartScheduler+0xbc>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f94:	f000 fd54 	bl	8007a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f98:	e00e      	b.n	8006fb8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa0:	d10a      	bne.n	8006fb8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60fb      	str	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <vTaskStartScheduler+0x9e>
}
 8006fb8:	bf00      	nop
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	08008220 	.word	0x08008220
 8006fc4:	08007569 	.word	0x08007569
 8006fc8:	20000548 	.word	0x20000548
 8006fcc:	20000544 	.word	0x20000544
 8006fd0:	20000530 	.word	0x20000530
 8006fd4:	20000528 	.word	0x20000528

08006fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <vTaskSuspendAll+0x18>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a03      	ldr	r2, [pc, #12]	; (8006ff0 <vTaskSuspendAll+0x18>)
 8006fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fe6:	bf00      	nop
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	2000054c 	.word	0x2000054c

08006ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007002:	4b41      	ldr	r3, [pc, #260]	; (8007108 <xTaskResumeAll+0x114>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <xTaskResumeAll+0x2c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	603b      	str	r3, [r7, #0]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007020:	f000 fdb0 	bl	8007b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007024:	4b38      	ldr	r3, [pc, #224]	; (8007108 <xTaskResumeAll+0x114>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	4a37      	ldr	r2, [pc, #220]	; (8007108 <xTaskResumeAll+0x114>)
 800702c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702e:	4b36      	ldr	r3, [pc, #216]	; (8007108 <xTaskResumeAll+0x114>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d161      	bne.n	80070fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007036:	4b35      	ldr	r3, [pc, #212]	; (800710c <xTaskResumeAll+0x118>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d05d      	beq.n	80070fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800703e:	e02e      	b.n	800709e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007040:	4b33      	ldr	r3, [pc, #204]	; (8007110 <xTaskResumeAll+0x11c>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3318      	adds	r3, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fa18 	bl	8006482 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fa13 	bl	8006482 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	2201      	movs	r2, #1
 8007062:	409a      	lsls	r2, r3
 8007064:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <xTaskResumeAll+0x120>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4313      	orrs	r3, r2
 800706a:	4a2a      	ldr	r2, [pc, #168]	; (8007114 <xTaskResumeAll+0x120>)
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a27      	ldr	r2, [pc, #156]	; (8007118 <xTaskResumeAll+0x124>)
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7ff f99f 	bl	80063c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	4b23      	ldr	r3, [pc, #140]	; (800711c <xTaskResumeAll+0x128>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007098:	4b21      	ldr	r3, [pc, #132]	; (8007120 <xTaskResumeAll+0x12c>)
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800709e:	4b1c      	ldr	r3, [pc, #112]	; (8007110 <xTaskResumeAll+0x11c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1cc      	bne.n	8007040 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070ac:	f000 fb12 	bl	80076d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070b0:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <xTaskResumeAll+0x130>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070bc:	f000 f836 	bl	800712c <xTaskIncrementTick>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80070c6:	4b16      	ldr	r3, [pc, #88]	; (8007120 <xTaskResumeAll+0x12c>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f1      	bne.n	80070bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80070d8:	4b12      	ldr	r3, [pc, #72]	; (8007124 <xTaskResumeAll+0x130>)
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070de:	4b10      	ldr	r3, [pc, #64]	; (8007120 <xTaskResumeAll+0x12c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070ea:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <xTaskResumeAll+0x134>)
 80070ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070fa:	f000 fd73 	bl	8007be4 <vPortExitCritical>

	return xAlreadyYielded;
 80070fe:	68bb      	ldr	r3, [r7, #8]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	2000054c 	.word	0x2000054c
 800710c:	20000524 	.word	0x20000524
 8007110:	200004e4 	.word	0x200004e4
 8007114:	2000052c 	.word	0x2000052c
 8007118:	20000428 	.word	0x20000428
 800711c:	20000424 	.word	0x20000424
 8007120:	20000538 	.word	0x20000538
 8007124:	20000534 	.word	0x20000534
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007136:	4b4e      	ldr	r3, [pc, #312]	; (8007270 <xTaskIncrementTick+0x144>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 808e 	bne.w	800725c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007140:	4b4c      	ldr	r3, [pc, #304]	; (8007274 <xTaskIncrementTick+0x148>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007148:	4a4a      	ldr	r2, [pc, #296]	; (8007274 <xTaskIncrementTick+0x148>)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d120      	bne.n	8007196 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007154:	4b48      	ldr	r3, [pc, #288]	; (8007278 <xTaskIncrementTick+0x14c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <xTaskIncrementTick+0x48>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	603b      	str	r3, [r7, #0]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <xTaskIncrementTick+0x46>
 8007174:	4b40      	ldr	r3, [pc, #256]	; (8007278 <xTaskIncrementTick+0x14c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	4b40      	ldr	r3, [pc, #256]	; (800727c <xTaskIncrementTick+0x150>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3e      	ldr	r2, [pc, #248]	; (8007278 <xTaskIncrementTick+0x14c>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	4a3e      	ldr	r2, [pc, #248]	; (800727c <xTaskIncrementTick+0x150>)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	4b3d      	ldr	r3, [pc, #244]	; (8007280 <xTaskIncrementTick+0x154>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	4a3c      	ldr	r2, [pc, #240]	; (8007280 <xTaskIncrementTick+0x154>)
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	f000 fa9f 	bl	80076d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007196:	4b3b      	ldr	r3, [pc, #236]	; (8007284 <xTaskIncrementTick+0x158>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d348      	bcc.n	8007232 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a0:	4b35      	ldr	r3, [pc, #212]	; (8007278 <xTaskIncrementTick+0x14c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071aa:	4b36      	ldr	r3, [pc, #216]	; (8007284 <xTaskIncrementTick+0x158>)
 80071ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071b0:	601a      	str	r2, [r3, #0]
					break;
 80071b2:	e03e      	b.n	8007232 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b4:	4b30      	ldr	r3, [pc, #192]	; (8007278 <xTaskIncrementTick+0x14c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d203      	bcs.n	80071d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071cc:	4a2d      	ldr	r2, [pc, #180]	; (8007284 <xTaskIncrementTick+0x158>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071d2:	e02e      	b.n	8007232 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff f952 	bl	8006482 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	3318      	adds	r3, #24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff f949 	bl	8006482 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	4b23      	ldr	r3, [pc, #140]	; (8007288 <xTaskIncrementTick+0x15c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	4a22      	ldr	r2, [pc, #136]	; (8007288 <xTaskIncrementTick+0x15c>)
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4a1f      	ldr	r2, [pc, #124]	; (800728c <xTaskIncrementTick+0x160>)
 8007210:	441a      	add	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	3304      	adds	r3, #4
 8007216:	4619      	mov	r1, r3
 8007218:	4610      	mov	r0, r2
 800721a:	f7ff f8d5 	bl	80063c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007222:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <xTaskIncrementTick+0x164>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	429a      	cmp	r2, r3
 800722a:	d3b9      	bcc.n	80071a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007230:	e7b6      	b.n	80071a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007232:	4b17      	ldr	r3, [pc, #92]	; (8007290 <xTaskIncrementTick+0x164>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007238:	4914      	ldr	r1, [pc, #80]	; (800728c <xTaskIncrementTick+0x160>)
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d901      	bls.n	800724e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800724a:	2301      	movs	r3, #1
 800724c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <xTaskIncrementTick+0x168>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	e004      	b.n	8007266 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800725c:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <xTaskIncrementTick+0x16c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4a0d      	ldr	r2, [pc, #52]	; (8007298 <xTaskIncrementTick+0x16c>)
 8007264:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007266:	697b      	ldr	r3, [r7, #20]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2000054c 	.word	0x2000054c
 8007274:	20000528 	.word	0x20000528
 8007278:	200004dc 	.word	0x200004dc
 800727c:	200004e0 	.word	0x200004e0
 8007280:	2000053c 	.word	0x2000053c
 8007284:	20000544 	.word	0x20000544
 8007288:	2000052c 	.word	0x2000052c
 800728c:	20000428 	.word	0x20000428
 8007290:	20000424 	.word	0x20000424
 8007294:	20000538 	.word	0x20000538
 8007298:	20000534 	.word	0x20000534

0800729c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072a2:	4b27      	ldr	r3, [pc, #156]	; (8007340 <vTaskSwitchContext+0xa4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072aa:	4b26      	ldr	r3, [pc, #152]	; (8007344 <vTaskSwitchContext+0xa8>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072b0:	e03f      	b.n	8007332 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <vTaskSwitchContext+0xa8>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b8:	4b23      	ldr	r3, [pc, #140]	; (8007348 <vTaskSwitchContext+0xac>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	fab3 f383 	clz	r3, r3
 80072c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	f1c3 031f 	rsb	r3, r3, #31
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	491f      	ldr	r1, [pc, #124]	; (800734c <vTaskSwitchContext+0xb0>)
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	607b      	str	r3, [r7, #4]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <vTaskSwitchContext+0x5a>
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4a12      	ldr	r2, [pc, #72]	; (800734c <vTaskSwitchContext+0xb0>)
 8007304:	4413      	add	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3308      	adds	r3, #8
 800731a:	429a      	cmp	r2, r3
 800731c:	d104      	bne.n	8007328 <vTaskSwitchContext+0x8c>
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	605a      	str	r2, [r3, #4]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4a08      	ldr	r2, [pc, #32]	; (8007350 <vTaskSwitchContext+0xb4>)
 8007330:	6013      	str	r3, [r2, #0]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	2000054c 	.word	0x2000054c
 8007344:	20000538 	.word	0x20000538
 8007348:	2000052c 	.word	0x2000052c
 800734c:	20000428 	.word	0x20000428
 8007350:	20000424 	.word	0x20000424

08007354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60fb      	str	r3, [r7, #12]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <vTaskPlaceOnEventList+0x44>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3318      	adds	r3, #24
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff f844 	bl	8006410 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007388:	2101      	movs	r1, #1
 800738a:	6838      	ldr	r0, [r7, #0]
 800738c:	f000 fa66 	bl	800785c <prvAddCurrentTaskToDelayedList>
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000424 	.word	0x20000424

0800739c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	60fb      	str	r3, [r7, #12]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	3318      	adds	r3, #24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff f858 	bl	8006482 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d2:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <xTaskRemoveFromEventList+0xac>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d11c      	bne.n	8007414 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	3304      	adds	r3, #4
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff f84f 	bl	8006482 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	2201      	movs	r2, #1
 80073ea:	409a      	lsls	r2, r3
 80073ec:	4b17      	ldr	r3, [pc, #92]	; (800744c <xTaskRemoveFromEventList+0xb0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <xTaskRemoveFromEventList+0xb0>)
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <xTaskRemoveFromEventList+0xb4>)
 8007404:	441a      	add	r2, r3
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f7fe ffdb 	bl	80063c8 <vListInsertEnd>
 8007412:	e005      	b.n	8007420 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	3318      	adds	r3, #24
 8007418:	4619      	mov	r1, r3
 800741a:	480e      	ldr	r0, [pc, #56]	; (8007454 <xTaskRemoveFromEventList+0xb8>)
 800741c:	f7fe ffd4 	bl	80063c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <xTaskRemoveFromEventList+0xbc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	429a      	cmp	r2, r3
 800742c:	d905      	bls.n	800743a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800742e:	2301      	movs	r3, #1
 8007430:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <xTaskRemoveFromEventList+0xc0>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	e001      	b.n	800743e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800743e:	697b      	ldr	r3, [r7, #20]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	2000054c 	.word	0x2000054c
 800744c:	2000052c 	.word	0x2000052c
 8007450:	20000428 	.word	0x20000428
 8007454:	200004e4 	.word	0x200004e4
 8007458:	20000424 	.word	0x20000424
 800745c:	20000538 	.word	0x20000538

08007460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <vTaskInternalSetTimeOutState+0x24>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <vTaskInternalSetTimeOutState+0x28>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	605a      	str	r2, [r3, #4]
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	2000053c 	.word	0x2000053c
 8007488:	20000528 	.word	0x20000528

0800748c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	613b      	str	r3, [r7, #16]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60fb      	str	r3, [r7, #12]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074ce:	f000 fb59 	bl	8007b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074d2:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <xTaskCheckForTimeOut+0xbc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ea:	d102      	bne.n	80074f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	e023      	b.n	800753a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4b15      	ldr	r3, [pc, #84]	; (800754c <xTaskCheckForTimeOut+0xc0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d007      	beq.n	800750e <xTaskCheckForTimeOut+0x82>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	429a      	cmp	r2, r3
 8007506:	d302      	bcc.n	800750e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	61fb      	str	r3, [r7, #28]
 800750c:	e015      	b.n	800753a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	429a      	cmp	r2, r3
 8007516:	d20b      	bcs.n	8007530 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ff9b 	bl	8007460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	e004      	b.n	800753a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007536:	2301      	movs	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800753a:	f000 fb53 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 800753e:	69fb      	ldr	r3, [r7, #28]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000528 	.word	0x20000528
 800754c:	2000053c 	.word	0x2000053c

08007550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007554:	4b03      	ldr	r3, [pc, #12]	; (8007564 <vTaskMissedYield+0x14>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]
}
 800755a:	bf00      	nop
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	20000538 	.word	0x20000538

08007568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007570:	f000 f852 	bl	8007618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <prvIdleTask+0x28>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d9f9      	bls.n	8007570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <prvIdleTask+0x2c>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800758c:	e7f0      	b.n	8007570 <prvIdleTask+0x8>
 800758e:	bf00      	nop
 8007590:	20000428 	.word	0x20000428
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	e00c      	b.n	80075be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <prvInitialiseTaskLists+0x60>)
 80075b0:	4413      	add	r3, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fedb 	bl	800636e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3301      	adds	r3, #1
 80075bc:	607b      	str	r3, [r7, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b06      	cmp	r3, #6
 80075c2:	d9ef      	bls.n	80075a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075c4:	480d      	ldr	r0, [pc, #52]	; (80075fc <prvInitialiseTaskLists+0x64>)
 80075c6:	f7fe fed2 	bl	800636e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075ca:	480d      	ldr	r0, [pc, #52]	; (8007600 <prvInitialiseTaskLists+0x68>)
 80075cc:	f7fe fecf 	bl	800636e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075d0:	480c      	ldr	r0, [pc, #48]	; (8007604 <prvInitialiseTaskLists+0x6c>)
 80075d2:	f7fe fecc 	bl	800636e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075d6:	480c      	ldr	r0, [pc, #48]	; (8007608 <prvInitialiseTaskLists+0x70>)
 80075d8:	f7fe fec9 	bl	800636e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075dc:	480b      	ldr	r0, [pc, #44]	; (800760c <prvInitialiseTaskLists+0x74>)
 80075de:	f7fe fec6 	bl	800636e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075e2:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <prvInitialiseTaskLists+0x78>)
 80075e4:	4a05      	ldr	r2, [pc, #20]	; (80075fc <prvInitialiseTaskLists+0x64>)
 80075e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <prvInitialiseTaskLists+0x7c>)
 80075ea:	4a05      	ldr	r2, [pc, #20]	; (8007600 <prvInitialiseTaskLists+0x68>)
 80075ec:	601a      	str	r2, [r3, #0]
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000428 	.word	0x20000428
 80075fc:	200004b4 	.word	0x200004b4
 8007600:	200004c8 	.word	0x200004c8
 8007604:	200004e4 	.word	0x200004e4
 8007608:	200004f8 	.word	0x200004f8
 800760c:	20000510 	.word	0x20000510
 8007610:	200004dc 	.word	0x200004dc
 8007614:	200004e0 	.word	0x200004e0

08007618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800761e:	e019      	b.n	8007654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007620:	f000 fab0 	bl	8007b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007624:	4b10      	ldr	r3, [pc, #64]	; (8007668 <prvCheckTasksWaitingTermination+0x50>)
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3304      	adds	r3, #4
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe ff26 	bl	8006482 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007636:	4b0d      	ldr	r3, [pc, #52]	; (800766c <prvCheckTasksWaitingTermination+0x54>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3b01      	subs	r3, #1
 800763c:	4a0b      	ldr	r2, [pc, #44]	; (800766c <prvCheckTasksWaitingTermination+0x54>)
 800763e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007640:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <prvCheckTasksWaitingTermination+0x58>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3b01      	subs	r3, #1
 8007646:	4a0a      	ldr	r2, [pc, #40]	; (8007670 <prvCheckTasksWaitingTermination+0x58>)
 8007648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800764a:	f000 facb 	bl	8007be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f810 	bl	8007674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <prvCheckTasksWaitingTermination+0x58>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e1      	bne.n	8007620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	200004f8 	.word	0x200004f8
 800766c:	20000524 	.word	0x20000524
 8007670:	2000050c 	.word	0x2000050c

08007674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007682:	2b00      	cmp	r3, #0
 8007684:	d108      	bne.n	8007698 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fc28 	bl	8007ee0 <vPortFree>
				vPortFree( pxTCB );
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc25 	bl	8007ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007696:	e018      	b.n	80076ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d103      	bne.n	80076aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fc1c 	bl	8007ee0 <vPortFree>
	}
 80076a8:	e00f      	b.n	80076ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d00a      	beq.n	80076ca <prvDeleteTCB+0x56>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <prvDeleteTCB+0x54>
	}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <prvResetNextTaskUnblockTime+0x38>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <prvResetNextTaskUnblockTime+0x3c>)
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076ec:	e008      	b.n	8007700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <prvResetNextTaskUnblockTime+0x38>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4a04      	ldr	r2, [pc, #16]	; (8007710 <prvResetNextTaskUnblockTime+0x3c>)
 80076fe:	6013      	str	r3, [r2, #0]
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	200004dc 	.word	0x200004dc
 8007710:	20000544 	.word	0x20000544

08007714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <xTaskGetSchedulerState+0x34>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007722:	2301      	movs	r3, #1
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	e008      	b.n	800773a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007728:	4b08      	ldr	r3, [pc, #32]	; (800774c <xTaskGetSchedulerState+0x38>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007730:	2302      	movs	r3, #2
 8007732:	607b      	str	r3, [r7, #4]
 8007734:	e001      	b.n	800773a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800773a:	687b      	ldr	r3, [r7, #4]
	}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20000530 	.word	0x20000530
 800774c:	2000054c 	.word	0x2000054c

08007750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d06e      	beq.n	8007844 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007766:	4b3a      	ldr	r3, [pc, #232]	; (8007850 <xTaskPriorityDisinherit+0x100>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	d00a      	beq.n	8007786 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60fb      	str	r3, [r7, #12]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60bb      	str	r3, [r7, #8]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a8:	1e5a      	subs	r2, r3, #1
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d044      	beq.n	8007844 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d140      	bne.n	8007844 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fe5b 	bl	8006482 <uxListRemove>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d115      	bne.n	80077fe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	491f      	ldr	r1, [pc, #124]	; (8007854 <xTaskPriorityDisinherit+0x104>)
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <xTaskPriorityDisinherit+0xae>
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	2201      	movs	r2, #1
 80077ee:	fa02 f303 	lsl.w	r3, r2, r3
 80077f2:	43da      	mvns	r2, r3
 80077f4:	4b18      	ldr	r3, [pc, #96]	; (8007858 <xTaskPriorityDisinherit+0x108>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4013      	ands	r3, r2
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <xTaskPriorityDisinherit+0x108>)
 80077fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	f1c3 0207 	rsb	r2, r3, #7
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	2201      	movs	r2, #1
 8007818:	409a      	lsls	r2, r3
 800781a:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <xTaskPriorityDisinherit+0x108>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4313      	orrs	r3, r2
 8007820:	4a0d      	ldr	r2, [pc, #52]	; (8007858 <xTaskPriorityDisinherit+0x108>)
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4a08      	ldr	r2, [pc, #32]	; (8007854 <xTaskPriorityDisinherit+0x104>)
 8007832:	441a      	add	r2, r3
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f7fe fdc4 	bl	80063c8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007844:	697b      	ldr	r3, [r7, #20]
	}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000424 	.word	0x20000424
 8007854:	20000428 	.word	0x20000428
 8007858:	2000052c 	.word	0x2000052c

0800785c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007866:	4b29      	ldr	r3, [pc, #164]	; (800790c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800786c:	4b28      	ldr	r3, [pc, #160]	; (8007910 <prvAddCurrentTaskToDelayedList+0xb4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3304      	adds	r3, #4
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fe05 	bl	8006482 <uxListRemove>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800787e:	4b24      	ldr	r3, [pc, #144]	; (8007910 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	2201      	movs	r2, #1
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43da      	mvns	r2, r3
 800788c:	4b21      	ldr	r3, [pc, #132]	; (8007914 <prvAddCurrentTaskToDelayedList+0xb8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4013      	ands	r3, r2
 8007892:	4a20      	ldr	r2, [pc, #128]	; (8007914 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007894:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789c:	d10a      	bne.n	80078b4 <prvAddCurrentTaskToDelayedList+0x58>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a4:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4619      	mov	r1, r3
 80078ac:	481a      	ldr	r0, [pc, #104]	; (8007918 <prvAddCurrentTaskToDelayedList+0xbc>)
 80078ae:	f7fe fd8b 	bl	80063c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078b2:	e026      	b.n	8007902 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4413      	add	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d209      	bcs.n	80078e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078cc:	4b13      	ldr	r3, [pc, #76]	; (800791c <prvAddCurrentTaskToDelayedList+0xc0>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fe fd99 	bl	8006410 <vListInsert>
}
 80078de:	e010      	b.n	8007902 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078e0:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f7fe fd8f 	bl	8006410 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078f2:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d202      	bcs.n	8007902 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078fc:	4a09      	ldr	r2, [pc, #36]	; (8007924 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6013      	str	r3, [r2, #0]
}
 8007902:	bf00      	nop
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000528 	.word	0x20000528
 8007910:	20000424 	.word	0x20000424
 8007914:	2000052c 	.word	0x2000052c
 8007918:	20000510 	.word	0x20000510
 800791c:	200004e0 	.word	0x200004e0
 8007920:	200004dc 	.word	0x200004dc
 8007924:	20000544 	.word	0x20000544

08007928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3b04      	subs	r3, #4
 8007938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3b04      	subs	r3, #4
 8007946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f023 0201 	bic.w	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3b04      	subs	r3, #4
 8007956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007958:	4a0c      	ldr	r2, [pc, #48]	; (800798c <pxPortInitialiseStack+0x64>)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b14      	subs	r3, #20
 8007962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3b04      	subs	r3, #4
 800796e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f06f 0202 	mvn.w	r2, #2
 8007976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3b20      	subs	r3, #32
 800797c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	08007991 	.word	0x08007991

08007990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <prvTaskExitError+0x54>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a2:	d00a      	beq.n	80079ba <prvTaskExitError+0x2a>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	60fb      	str	r3, [r7, #12]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <prvTaskExitError+0x28>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60bb      	str	r3, [r7, #8]
}
 80079cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079ce:	bf00      	nop
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0fc      	beq.n	80079d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	2000000c 	.word	0x2000000c
	...

080079f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <pxCurrentTCBConst2>)
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	6808      	ldr	r0, [r1, #0]
 80079f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	f380 8809 	msr	PSP, r0
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8811 	msr	BASEPRI, r0
 8007a0a:	4770      	bx	lr
 8007a0c:	f3af 8000 	nop.w

08007a10 <pxCurrentTCBConst2>:
 8007a10:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop

08007a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a18:	4808      	ldr	r0, [pc, #32]	; (8007a3c <prvPortStartFirstTask+0x24>)
 8007a1a:	6800      	ldr	r0, [r0, #0]
 8007a1c:	6800      	ldr	r0, [r0, #0]
 8007a1e:	f380 8808 	msr	MSP, r0
 8007a22:	f04f 0000 	mov.w	r0, #0
 8007a26:	f380 8814 	msr	CONTROL, r0
 8007a2a:	b662      	cpsie	i
 8007a2c:	b661      	cpsie	f
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	df00      	svc	0
 8007a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a3a:	bf00      	nop
 8007a3c:	e000ed08 	.word	0xe000ed08

08007a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a46:	4b46      	ldr	r3, [pc, #280]	; (8007b60 <xPortStartScheduler+0x120>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a46      	ldr	r2, [pc, #280]	; (8007b64 <xPortStartScheduler+0x124>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10a      	bne.n	8007a66 <xPortStartScheduler+0x26>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	613b      	str	r3, [r7, #16]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a66:	4b3e      	ldr	r3, [pc, #248]	; (8007b60 <xPortStartScheduler+0x120>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a3f      	ldr	r2, [pc, #252]	; (8007b68 <xPortStartScheduler+0x128>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d10a      	bne.n	8007a86 <xPortStartScheduler+0x46>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a86:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <xPortStartScheduler+0x12c>)
 8007a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	4b31      	ldr	r3, [pc, #196]	; (8007b70 <xPortStartScheduler+0x130>)
 8007aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aae:	4b31      	ldr	r3, [pc, #196]	; (8007b74 <xPortStartScheduler+0x134>)
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ab4:	e009      	b.n	8007aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ab6:	4b2f      	ldr	r3, [pc, #188]	; (8007b74 <xPortStartScheduler+0x134>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <xPortStartScheduler+0x134>)
 8007abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad2:	2b80      	cmp	r3, #128	; 0x80
 8007ad4:	d0ef      	beq.n	8007ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ad6:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <xPortStartScheduler+0x134>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f1c3 0307 	rsb	r3, r3, #7
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d00a      	beq.n	8007af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60bb      	str	r3, [r7, #8]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007af8:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <xPortStartScheduler+0x134>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <xPortStartScheduler+0x134>)
 8007b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b02:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <xPortStartScheduler+0x134>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b0a:	4a1a      	ldr	r2, [pc, #104]	; (8007b74 <xPortStartScheduler+0x134>)
 8007b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b16:	4b18      	ldr	r3, [pc, #96]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b22:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <xPortStartScheduler+0x138>)
 8007b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b2e:	f000 f8dd 	bl	8007cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b32:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <xPortStartScheduler+0x13c>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b38:	f000 f8fc 	bl	8007d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b3c:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <xPortStartScheduler+0x140>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0f      	ldr	r2, [pc, #60]	; (8007b80 <xPortStartScheduler+0x140>)
 8007b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b48:	f7ff ff66 	bl	8007a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b4c:	f7ff fba6 	bl	800729c <vTaskSwitchContext>
	prvTaskExitError();
 8007b50:	f7ff ff1e 	bl	8007990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	e000ed00 	.word	0xe000ed00
 8007b64:	410fc271 	.word	0x410fc271
 8007b68:	410fc270 	.word	0x410fc270
 8007b6c:	e000e400 	.word	0xe000e400
 8007b70:	20000550 	.word	0x20000550
 8007b74:	20000554 	.word	0x20000554
 8007b78:	e000ed20 	.word	0xe000ed20
 8007b7c:	2000000c 	.word	0x2000000c
 8007b80:	e000ef34 	.word	0xe000ef34

08007b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	607b      	str	r3, [r7, #4]
}
 8007b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <vPortEnterCritical+0x58>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <vPortEnterCritical+0x58>)
 8007ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <vPortEnterCritical+0x58>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d10f      	bne.n	8007bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <vPortEnterCritical+0x5c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	603b      	str	r3, [r7, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vPortEnterCritical+0x4a>
	}
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	2000000c 	.word	0x2000000c
 8007be0:	e000ed04 	.word	0xe000ed04

08007be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bea:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <vPortExitCritical+0x50>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <vPortExitCritical+0x24>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	607b      	str	r3, [r7, #4]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <vPortExitCritical+0x50>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <vPortExitCritical+0x50>)
 8007c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c12:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <vPortExitCritical+0x50>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d105      	bne.n	8007c26 <vPortExitCritical+0x42>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	2000000c 	.word	0x2000000c
	...

08007c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c40:	f3ef 8009 	mrs	r0, PSP
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <pxCurrentTCBConst>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	f01e 0f10 	tst.w	lr, #16
 8007c50:	bf08      	it	eq
 8007c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5a:	6010      	str	r0, [r2, #0]
 8007c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c64:	f380 8811 	msr	BASEPRI, r0
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f7ff fb14 	bl	800729c <vTaskSwitchContext>
 8007c74:	f04f 0000 	mov.w	r0, #0
 8007c78:	f380 8811 	msr	BASEPRI, r0
 8007c7c:	bc09      	pop	{r0, r3}
 8007c7e:	6819      	ldr	r1, [r3, #0]
 8007c80:	6808      	ldr	r0, [r1, #0]
 8007c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c86:	f01e 0f10 	tst.w	lr, #16
 8007c8a:	bf08      	it	eq
 8007c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c90:	f380 8809 	msr	PSP, r0
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w

08007ca0 <pxCurrentTCBConst>:
 8007ca0:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop

08007ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	607b      	str	r3, [r7, #4]
}
 8007cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cc2:	f7ff fa33 	bl	800712c <xTaskIncrementTick>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ccc:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <SysTick_Handler+0x40>)
 8007cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f383 8811 	msr	BASEPRI, r3
}
 8007cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <vPortSetupTimerInterrupt+0x34>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <vPortSetupTimerInterrupt+0x38>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <vPortSetupTimerInterrupt+0x3c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <vPortSetupTimerInterrupt+0x40>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	099b      	lsrs	r3, r3, #6
 8007d08:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <vPortSetupTimerInterrupt+0x44>)
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d0e:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <vPortSetupTimerInterrupt+0x34>)
 8007d10:	2207      	movs	r2, #7
 8007d12:	601a      	str	r2, [r3, #0]
}
 8007d14:	bf00      	nop
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	e000e010 	.word	0xe000e010
 8007d24:	e000e018 	.word	0xe000e018
 8007d28:	20000000 	.word	0x20000000
 8007d2c:	10624dd3 	.word	0x10624dd3
 8007d30:	e000e014 	.word	0xe000e014

08007d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d44 <vPortEnableVFP+0x10>
 8007d38:	6801      	ldr	r1, [r0, #0]
 8007d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d3e:	6001      	str	r1, [r0, #0]
 8007d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d42:	bf00      	nop
 8007d44:	e000ed88 	.word	0xe000ed88

08007d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	; 0x28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d54:	f7ff f940 	bl	8006fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d58:	4b5b      	ldr	r3, [pc, #364]	; (8007ec8 <pvPortMalloc+0x180>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d60:	f000 f920 	bl	8007fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d64:	4b59      	ldr	r3, [pc, #356]	; (8007ecc <pvPortMalloc+0x184>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f040 8093 	bne.w	8007e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01d      	beq.n	8007db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d78:	2208      	movs	r2, #8
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d014      	beq.n	8007db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f023 0307 	bic.w	r3, r3, #7
 8007d90:	3308      	adds	r3, #8
 8007d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <pvPortMalloc+0x6c>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	617b      	str	r3, [r7, #20]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d06e      	beq.n	8007e98 <pvPortMalloc+0x150>
 8007dba:	4b45      	ldr	r3, [pc, #276]	; (8007ed0 <pvPortMalloc+0x188>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d869      	bhi.n	8007e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dc4:	4b43      	ldr	r3, [pc, #268]	; (8007ed4 <pvPortMalloc+0x18c>)
 8007dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dc8:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <pvPortMalloc+0x18c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dce:	e004      	b.n	8007dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d903      	bls.n	8007dec <pvPortMalloc+0xa4>
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f1      	bne.n	8007dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dec:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <pvPortMalloc+0x180>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d050      	beq.n	8007e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	4413      	add	r3, r2
 8007dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	2308      	movs	r3, #8
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d91f      	bls.n	8007e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <pvPortMalloc+0xf8>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	613b      	str	r3, [r7, #16]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e52:	69b8      	ldr	r0, [r7, #24]
 8007e54:	f000 f908 	bl	8008068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	4a1b      	ldr	r2, [pc, #108]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e66:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <pvPortMalloc+0x190>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d203      	bcs.n	8007e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e72:	4b17      	ldr	r3, [pc, #92]	; (8007ed0 <pvPortMalloc+0x188>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a18      	ldr	r2, [pc, #96]	; (8007ed8 <pvPortMalloc+0x190>)
 8007e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	4b13      	ldr	r3, [pc, #76]	; (8007ecc <pvPortMalloc+0x184>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <pvPortMalloc+0x194>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	4a11      	ldr	r2, [pc, #68]	; (8007edc <pvPortMalloc+0x194>)
 8007e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e98:	f7ff f8ac 	bl	8006ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <pvPortMalloc+0x174>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	60fb      	str	r3, [r7, #12]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <pvPortMalloc+0x172>
	return pvReturn;
 8007ebc:	69fb      	ldr	r3, [r7, #28]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3728      	adds	r7, #40	; 0x28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20004160 	.word	0x20004160
 8007ecc:	20004174 	.word	0x20004174
 8007ed0:	20004164 	.word	0x20004164
 8007ed4:	20004158 	.word	0x20004158
 8007ed8:	20004168 	.word	0x20004168
 8007edc:	2000416c 	.word	0x2000416c

08007ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d04d      	beq.n	8007f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <vPortFree+0xb8>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <vPortFree+0x44>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60fb      	str	r3, [r7, #12]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <vPortFree+0x62>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60bb      	str	r3, [r7, #8]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <vPortFree+0xb8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01e      	beq.n	8007f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11a      	bne.n	8007f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <vPortFree+0xb8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	43db      	mvns	r3, r3
 8007f62:	401a      	ands	r2, r3
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f68:	f7ff f836 	bl	8006fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <vPortFree+0xbc>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <vPortFree+0xbc>)
 8007f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f7a:	6938      	ldr	r0, [r7, #16]
 8007f7c:	f000 f874 	bl	8008068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <vPortFree+0xc0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	4a06      	ldr	r2, [pc, #24]	; (8007fa0 <vPortFree+0xc0>)
 8007f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f8a:	f7ff f833 	bl	8006ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f8e:	bf00      	nop
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20004174 	.word	0x20004174
 8007f9c:	20004164 	.word	0x20004164
 8007fa0:	20004170 	.word	0x20004170

08007fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fb0:	4b27      	ldr	r3, [pc, #156]	; (8008050 <prvHeapInit+0xac>)
 8007fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0307 	bic.w	r3, r3, #7
 8007fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <prvHeapInit+0xac>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <prvHeapInit+0xb0>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <prvHeapInit+0xb0>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1a9b      	subs	r3, r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a15      	ldr	r2, [pc, #84]	; (8008058 <prvHeapInit+0xb4>)
 8008004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <prvHeapInit+0xb4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <prvHeapInit+0xb4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	1ad2      	subs	r2, r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008024:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <prvHeapInit+0xb4>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4a0a      	ldr	r2, [pc, #40]	; (800805c <prvHeapInit+0xb8>)
 8008032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	4a09      	ldr	r2, [pc, #36]	; (8008060 <prvHeapInit+0xbc>)
 800803a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <prvHeapInit+0xc0>)
 800803e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	20000558 	.word	0x20000558
 8008054:	20004158 	.word	0x20004158
 8008058:	20004160 	.word	0x20004160
 800805c:	20004168 	.word	0x20004168
 8008060:	20004164 	.word	0x20004164
 8008064:	20004174 	.word	0x20004174

08008068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <prvInsertBlockIntoFreeList+0xac>)
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	e002      	b.n	800807c <prvInsertBlockIntoFreeList+0x14>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d8f7      	bhi.n	8008076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	4413      	add	r3, r2
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	429a      	cmp	r2, r3
 8008096:	d108      	bne.n	80080aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	441a      	add	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d118      	bne.n	80080f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d00d      	beq.n	80080e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	441a      	add	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e008      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080e6:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <prvInsertBlockIntoFreeList+0xb0>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e003      	b.n	80080f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d002      	beq.n	8008106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20004158 	.word	0x20004158
 8008118:	20004160 	.word	0x20004160

0800811c <__libc_init_array>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4d0d      	ldr	r5, [pc, #52]	; (8008154 <__libc_init_array+0x38>)
 8008120:	4c0d      	ldr	r4, [pc, #52]	; (8008158 <__libc_init_array+0x3c>)
 8008122:	1b64      	subs	r4, r4, r5
 8008124:	10a4      	asrs	r4, r4, #2
 8008126:	2600      	movs	r6, #0
 8008128:	42a6      	cmp	r6, r4
 800812a:	d109      	bne.n	8008140 <__libc_init_array+0x24>
 800812c:	4d0b      	ldr	r5, [pc, #44]	; (800815c <__libc_init_array+0x40>)
 800812e:	4c0c      	ldr	r4, [pc, #48]	; (8008160 <__libc_init_array+0x44>)
 8008130:	f000 f82e 	bl	8008190 <_init>
 8008134:	1b64      	subs	r4, r4, r5
 8008136:	10a4      	asrs	r4, r4, #2
 8008138:	2600      	movs	r6, #0
 800813a:	42a6      	cmp	r6, r4
 800813c:	d105      	bne.n	800814a <__libc_init_array+0x2e>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f855 3b04 	ldr.w	r3, [r5], #4
 8008144:	4798      	blx	r3
 8008146:	3601      	adds	r6, #1
 8008148:	e7ee      	b.n	8008128 <__libc_init_array+0xc>
 800814a:	f855 3b04 	ldr.w	r3, [r5], #4
 800814e:	4798      	blx	r3
 8008150:	3601      	adds	r6, #1
 8008152:	e7f2      	b.n	800813a <__libc_init_array+0x1e>
 8008154:	08008248 	.word	0x08008248
 8008158:	08008248 	.word	0x08008248
 800815c:	08008248 	.word	0x08008248
 8008160:	0800824c 	.word	0x0800824c

08008164 <memcpy>:
 8008164:	440a      	add	r2, r1
 8008166:	4291      	cmp	r1, r2
 8008168:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800816c:	d100      	bne.n	8008170 <memcpy+0xc>
 800816e:	4770      	bx	lr
 8008170:	b510      	push	{r4, lr}
 8008172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800817a:	4291      	cmp	r1, r2
 800817c:	d1f9      	bne.n	8008172 <memcpy+0xe>
 800817e:	bd10      	pop	{r4, pc}

08008180 <memset>:
 8008180:	4402      	add	r2, r0
 8008182:	4603      	mov	r3, r0
 8008184:	4293      	cmp	r3, r2
 8008186:	d100      	bne.n	800818a <memset+0xa>
 8008188:	4770      	bx	lr
 800818a:	f803 1b01 	strb.w	r1, [r3], #1
 800818e:	e7f9      	b.n	8008184 <memset+0x4>

08008190 <_init>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr

0800819c <_fini>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	bf00      	nop
 80081a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a2:	bc08      	pop	{r3}
 80081a4:	469e      	mov	lr, r3
 80081a6:	4770      	bx	lr
